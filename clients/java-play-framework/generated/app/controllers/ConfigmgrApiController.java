package controllers;

import apimodels.AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationInfo;
import apimodels.AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurInfo;
import apimodels.AnalyticsComponentQueryCacheServiceInfo;
import apimodels.ApacheSlingHealthCheckResultHTMLSerializerInfo;
import java.math.BigDecimal;
import apimodels.ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationInfo;
import apimodels.ComAdobeAemTransactionCoreImplTransactionRecorderInfo;
import apimodels.ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCInfo;
import apimodels.ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCInfo;
import apimodels.ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplInfo;
import apimodels.ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplInfo;
import apimodels.ComAdobeCqAccountApiAccountManagementServiceInfo;
import apimodels.ComAdobeCqAccountImplAccountManagementServletInfo;
import apimodels.ComAdobeCqAddressImplLocationLocationListServletInfo;
import apimodels.ComAdobeCqAuditPurgeDamInfo;
import apimodels.ComAdobeCqAuditPurgePagesInfo;
import apimodels.ComAdobeCqAuditPurgeReplicationInfo;
import apimodels.ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterInfo;
import apimodels.ComAdobeCqCdnRewriterImplCDNConfigServiceImplInfo;
import apimodels.ComAdobeCqCdnRewriterImplCDNRewriterInfo;
import apimodels.ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleInfo;
import apimodels.ComAdobeCqCommerceImplAssetDynamicImageHandlerInfo;
import apimodels.ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplInfo;
import apimodels.ComAdobeCqCommerceImplAssetStaticImageHandlerInfo;
import apimodels.ComAdobeCqCommerceImplAssetVideoHandlerInfo;
import apimodels.ComAdobeCqCommerceImplPromotionPromotionManagerImplInfo;
import apimodels.ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplInfo;
import apimodels.ComAdobeCqCommercePimImplPageEventListenerInfo;
import apimodels.ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplInfo;
import apimodels.ComAdobeCqContentinsightImplReportingServicesSettingsProviderInfo;
import apimodels.ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletInfo;
import apimodels.ComAdobeCqContentinsightImplServletsReportingServicesProxyServleInfo;
import apimodels.ComAdobeCqDamCfmImplComponentComponentConfigImplInfo;
import apimodels.ComAdobeCqDamCfmImplConfFeatureConfigImplInfo;
import apimodels.ComAdobeCqDamCfmImplContentRewriterAssetProcessorInfo;
import apimodels.ComAdobeCqDamCfmImplContentRewriterParRangeFilterInfo;
import apimodels.ComAdobeCqDamCfmImplContentRewriterPayloadFilterInfo;
import apimodels.ComAdobeCqDamDmProcessImagePTiffManagerImplInfo;
import apimodels.ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerInfo;
import apimodels.ComAdobeCqDamMacSyncHelperImplMACSyncClientImplInfo;
import apimodels.ComAdobeCqDamMacSyncImplDAMSyncServiceImplInfo;
import apimodels.ComAdobeCqDamProcessorNuiImplNuiAssetProcessorInfo;
import apimodels.ComAdobeCqDamS7imagingImplIsImageServerComponentInfo;
import apimodels.ComAdobeCqDamS7imagingImplPsPlatformServerServletInfo;
import apimodels.ComAdobeCqDamWebdavImplIoAssetIOHandlerInfo;
import apimodels.ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobInfo;
import apimodels.ComAdobeCqDamWebdavImplIoSpecialFilesHandlerInfo;
import apimodels.ComAdobeCqDeserfwImplDeserializationFirewallImplInfo;
import apimodels.ComAdobeCqDtmImplServiceDTMWebServiceImplInfo;
import apimodels.ComAdobeCqDtmImplServletsDTMDeployHookServletInfo;
import apimodels.ComAdobeCqDtmReactorImplServiceWebServiceImplInfo;
import apimodels.ComAdobeCqExperiencelogImplExperienceLogConfigServletInfo;
import apimodels.ComAdobeCqHcContentPackagesHealthCheckInfo;
import apimodels.ComAdobeCqHistoryImplHistoryRequestFilterInfo;
import apimodels.ComAdobeCqHistoryImplHistoryServiceImplInfo;
import apimodels.ComAdobeCqInboxImplTypeproviderItemTypeProviderInfo;
import apimodels.ComAdobeCqProjectsImplServletProjectImageServletInfo;
import apimodels.ComAdobeCqProjectsPurgeSchedulerInfo;
import apimodels.ComAdobeCqScheduledExporterImplScheduledExporterImplInfo;
import apimodels.ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplInfo;
import apimodels.ComAdobeCqScreensDeviceImplDeviceServiceInfo;
import apimodels.ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplInfo;
import apimodels.ComAdobeCqScreensImplHandlerChannelsUpdateHandlerInfo;
import apimodels.ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobInfo;
import apimodels.ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplInfo;
import apimodels.ComAdobeCqScreensImplScreensChannelPostProcessorInfo;
import apimodels.ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplInfo;
import apimodels.ComAdobeCqScreensMqActivemqImplArtemisJMSProviderInfo;
import apimodels.ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplInfo;
import apimodels.ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplInfo;
import apimodels.ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagInfo;
import apimodels.ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChInfo;
import apimodels.ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckInfo;
import apimodels.ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckInfo;
import apimodels.ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckInfo;
import apimodels.ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckInfo;
import apimodels.ComAdobeCqSocialAccountverificationImplAccountManagementConfigImInfo;
import apimodels.ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenInfo;
import apimodels.ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoInfo;
import apimodels.ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerInfo;
import apimodels.ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenInfo;
import apimodels.ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySInfo;
import apimodels.ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreInfo;
import apimodels.ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIInfo;
import apimodels.ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenInfo;
import apimodels.ComAdobeCqSocialCalendarServletsTimeZoneServletInfo;
import apimodels.ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventInfo;
import apimodels.ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeInfo;
import apimodels.ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiInfo;
import apimodels.ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCInfo;
import apimodels.ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosInfo;
import apimodels.ComAdobeCqSocialCommonsCorsCORSAuthenticationFilterInfo;
import apimodels.ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderInfo;
import apimodels.ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplInfo;
import apimodels.ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerInfo;
import apimodels.ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderInfo;
import apimodels.ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpInfo;
import apimodels.ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpInfo;
import apimodels.ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterInfo;
import apimodels.ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderInfo;
import apimodels.ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderInfo;
import apimodels.ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderInfo;
import apimodels.ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderInfo;
import apimodels.ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderInfo;
import apimodels.ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderInfo;
import apimodels.ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadInfo;
import apimodels.ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplInfo;
import apimodels.ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitInfo;
import apimodels.ComAdobeCqSocialConnectOauthImplFacebookProviderImplInfo;
import apimodels.ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleInfo;
import apimodels.ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperInfo;
import apimodels.ComAdobeCqSocialConnectOauthImplTwitterProviderImplInfo;
import apimodels.ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenInfo;
import apimodels.ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryInfo;
import apimodels.ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryInfo;
import apimodels.ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorInfo;
import apimodels.ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFInfo;
import apimodels.ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoInfo;
import apimodels.ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLInfo;
import apimodels.ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouInfo;
import apimodels.ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplInfo;
import apimodels.ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeInfo;
import apimodels.ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaInfo;
import apimodels.ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceInfo;
import apimodels.ComAdobeCqSocialForumDispatcherImplFlushOperationsInfo;
import apimodels.ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenInfo;
import apimodels.ComAdobeCqSocialGroupImplGroupServiceImplInfo;
import apimodels.ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplInfo;
import apimodels.ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSInfo;
import apimodels.ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerInfo;
import apimodels.ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileInfo;
import apimodels.ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOInfo;
import apimodels.ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFInfo;
import apimodels.ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationInfo;
import apimodels.ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenInfo;
import apimodels.ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialInfo;
import apimodels.ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenInfo;
import apimodels.ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociInfo;
import apimodels.ComAdobeCqSocialNotificationsImplMentionsRouterInfo;
import apimodels.ComAdobeCqSocialNotificationsImplNotificationManagerImplInfo;
import apimodels.ComAdobeCqSocialNotificationsImplNotificationsRouterInfo;
import apimodels.ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicInfo;
import apimodels.ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIInfo;
import apimodels.ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMInfo;
import apimodels.ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSInfo;
import apimodels.ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiInfo;
import apimodels.ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletInfo;
import apimodels.ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletInfo;
import apimodels.ComAdobeCqSocialScoringImplScoringEventListenerInfo;
import apimodels.ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplInfo;
import apimodels.ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceInfo;
import apimodels.ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImInfo;
import apimodels.ComAdobeCqSocialSiteImplSiteConfiguratorImplInfo;
import apimodels.ComAdobeCqSocialSrpImplSocialSolrConnectorInfo;
import apimodels.ComAdobeCqSocialSyncImplDiffChangesObserverInfo;
import apimodels.ComAdobeCqSocialSyncImplGroupSyncListenerImplInfo;
import apimodels.ComAdobeCqSocialSyncImplPublisherSyncServiceImplInfo;
import apimodels.ComAdobeCqSocialSyncImplUserSyncListenerImplInfo;
import apimodels.ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerInfo;
import apimodels.ComAdobeCqSocialTranslationImplUGCLanguageDetectorInfo;
import apimodels.ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplInfo;
import apimodels.ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplInfo;
import apimodels.ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplInfo;
import apimodels.ComAdobeCqSocialUgcbaseImplSocialUtilsImplInfo;
import apimodels.ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplInfo;
import apimodels.ComAdobeCqSocialUgcbaseModerationImplSentimentProcessInfo;
import apimodels.ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliInfo;
import apimodels.ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplInfo;
import apimodels.ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletInfo;
import apimodels.ComAdobeCqSocialUserImplTransportHttpToPublisherInfo;
import apimodels.ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactInfo;
import apimodels.ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupInfo;
import apimodels.ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupInfo;
import apimodels.ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceInfo;
import apimodels.ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskInfo;
import apimodels.ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceInfo;
import apimodels.ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceInfo;
import apimodels.ComAdobeCqWcmLaunchesImplLaunchesEventHandlerInfo;
import apimodels.ComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorInfo;
import apimodels.ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplInfo;
import apimodels.ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplInfo;
import apimodels.ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceInfo;
import apimodels.ComAdobeFdFpConfigFormsPortalSchedulerServiceInfo;
import apimodels.ComAdobeFormsCommonServiceImplDefaultDataProviderInfo;
import apimodels.ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpInfo;
import apimodels.ComAdobeFormsCommonServletTempCleanUpTaskInfo;
import apimodels.ComAdobeGraniteAcpPlatformPlatformServletInfo;
import apimodels.ComAdobeGraniteActivitystreamsImplActivityManagerImplInfo;
import apimodels.ComAdobeGraniteAnalyzerBaseSystemStatusServletInfo;
import apimodels.ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletInfo;
import apimodels.ComAdobeGraniteApicontrollerFilterResolverHookFactoryInfo;
import apimodels.ComAdobeGraniteAuthCertImplClientCertAuthHandlerInfo;
import apimodels.ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionInfo;
import apimodels.ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplInfo;
import apimodels.ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorInfo;
import apimodels.ComAdobeGraniteAuthImsImplIMSProviderImplInfo;
import apimodels.ComAdobeGraniteAuthImsImplImsConfigProviderImplInfo;
import apimodels.ComAdobeGraniteAuthImsInfo;
import apimodels.ComAdobeGraniteAuthOauthAccesstokenProviderInfo;
import apimodels.ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerInfo;
import apimodels.ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplInfo;
import apimodels.ComAdobeGraniteAuthOauthImplFacebookProviderImplInfo;
import apimodels.ComAdobeGraniteAuthOauthImplGithubProviderImplInfo;
import apimodels.ComAdobeGraniteAuthOauthImplGraniteProviderInfo;
import apimodels.ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInfo;
import apimodels.ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalInfo;
import apimodels.ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerInfo;
import apimodels.ComAdobeGraniteAuthOauthImplTwitterProviderImplInfo;
import apimodels.ComAdobeGraniteAuthOauthProviderInfo;
import apimodels.ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerInfo;
import apimodels.ComAdobeGraniteAuthSamlSamlAuthenticationHandlerInfo;
import apimodels.ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerInfo;
import apimodels.ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckInfo;
import apimodels.ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckInfo;
import apimodels.ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckInfo;
import apimodels.ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckInfo;
import apimodels.ComAdobeGraniteBundlesHcImplJobsHealthCheckInfo;
import apimodels.ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckInfo;
import apimodels.ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckInfo;
import apimodels.ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckInfo;
import apimodels.ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckInfo;
import apimodels.ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckInfo;
import apimodels.ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacInfo;
import apimodels.ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplInfo;
import apimodels.ComAdobeGraniteCompatrouterImplRoutingConfigInfo;
import apimodels.ComAdobeGraniteCompatrouterImplSwitchMappingConfigInfo;
import apimodels.ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingInfo;
import apimodels.ComAdobeGraniteContexthubImplContextHubImplInfo;
import apimodels.ComAdobeGraniteCorsImplCORSPolicyImplInfo;
import apimodels.ComAdobeGraniteCsrfImplCSRFFilterInfo;
import apimodels.ComAdobeGraniteCsrfImplCSRFServletInfo;
import apimodels.ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeInfo;
import apimodels.ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverInfo;
import apimodels.ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerInfo;
import apimodels.ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenInfo;
import apimodels.ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatInfo;
import apimodels.ComAdobeGraniteDistributionCoreImplReplicationDistributionTransInfo;
import apimodels.ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuInfo;
import apimodels.ComAdobeGraniteFragsImplCheckHttpHeaderFlagInfo;
import apimodels.ComAdobeGraniteFragsImplRandomFeatureInfo;
import apimodels.ComAdobeGraniteHttpcacheFileFileCacheStoreInfo;
import apimodels.ComAdobeGraniteHttpcacheImplOuterCacheFilterInfo;
import apimodels.ComAdobeGraniteI18nImplBundlePseudoTranslationsInfo;
import apimodels.ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceInfo;
import apimodels.ComAdobeGraniteInfocollectorInfoCollectorInfo;
import apimodels.ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryInfo;
import apimodels.ComAdobeGraniteLicenseImplLicenseCheckFilterInfo;
import apimodels.ComAdobeGraniteLoggingImplLogAnalyserImplInfo;
import apimodels.ComAdobeGraniteLoggingImplLogErrorHealthCheckInfo;
import apimodels.ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskInfo;
import apimodels.ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskInfo;
import apimodels.ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskInfo;
import apimodels.ComAdobeGraniteMonitoringImplScriptConfigImplInfo;
import apimodels.ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanInfo;
import apimodels.ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskInfo;
import apimodels.ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletInfo;
import apimodels.ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletInfo;
import apimodels.ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletInfo;
import apimodels.ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletInfo;
import apimodels.ComAdobeGraniteOffloadingImplOffloadingConfiguratorInfo;
import apimodels.ComAdobeGraniteOffloadingImplOffloadingJobClonerInfo;
import apimodels.ComAdobeGraniteOffloadingImplOffloadingJobOffloaderInfo;
import apimodels.ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerInfo;
import apimodels.ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoInfo;
import apimodels.ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplInfo;
import apimodels.ComAdobeGraniteOptoutImplOptOutServiceImplInfo;
import apimodels.ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckInfo;
import apimodels.ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckInfo;
import apimodels.ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckInfo;
import apimodels.ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsInfo;
import apimodels.ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckInfo;
import apimodels.ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckInfo;
import apimodels.ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCInfo;
import apimodels.ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckInfo;
import apimodels.ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCInfo;
import apimodels.ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckInfo;
import apimodels.ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheInfo;
import apimodels.ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckInfo;
import apimodels.ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckInfo;
import apimodels.ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckInfo;
import apimodels.ComAdobeGraniteRepositoryImplCommitStatsConfigInfo;
import apimodels.ComAdobeGraniteRepositoryServiceUserConfigurationInfo;
import apimodels.ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImInfo;
import apimodels.ComAdobeGraniteResourcestatusImplCompositeStatusTypeInfo;
import apimodels.ComAdobeGraniteResourcestatusImplStatusResourceProviderImplInfo;
import apimodels.ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterInfo;
import apimodels.ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplInfo;
import apimodels.ComAdobeGraniteRestImplServletDefaultGETServletInfo;
import apimodels.ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSInfo;
import apimodels.ComAdobeGraniteSecurityUserUserPropertiesServiceInfo;
import apimodels.ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplInfo;
import apimodels.ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplInfo;
import apimodels.ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryInfo;
import apimodels.ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceInfo;
import apimodels.ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskInfo;
import apimodels.ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorInfo;
import apimodels.ComAdobeGraniteThreaddumpThreadDumpCollectorInfo;
import apimodels.ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslInfo;
import apimodels.ComAdobeGraniteTranslationCoreImplTranslationManagerImplInfo;
import apimodels.ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplInfo;
import apimodels.ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureInfo;
import apimodels.ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceInfo;
import apimodels.ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerInfo;
import apimodels.ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerInfo;
import apimodels.ComAdobeGraniteWorkflowCoreJobJobHandlerInfo;
import apimodels.ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumInfo;
import apimodels.ComAdobeGraniteWorkflowCorePayloadMapCacheInfo;
import apimodels.ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerInfo;
import apimodels.ComAdobeGraniteWorkflowCoreWorkflowConfigInfo;
import apimodels.ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryInfo;
import apimodels.ComAdobeGraniteWorkflowPurgeSchedulerInfo;
import apimodels.ComAdobeOctopusNcommBootstrapInfo;
import apimodels.ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSInfo;
import apimodels.ComAdobeXmpWorkerFilesNcommXMPFilesNCommInfo;
import apimodels.ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceInfo;
import apimodels.ComDayCommonsHttpclientInfo;
import apimodels.ComDayCqAnalyticsImplStorePropertiesChangeListenerInfo;
import apimodels.ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteInfo;
import apimodels.ComDayCqAnalyticsSitecatalystImplImporterReportImporterInfo;
import apimodels.ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryInfo;
import apimodels.ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplInfo;
import apimodels.ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterInfo;
import apimodels.ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerInfo;
import apimodels.ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerInfo;
import apimodels.ComDayCqAnalyticsTestandtargetImplSegmentImporterInfo;
import apimodels.ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplInfo;
import apimodels.ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletInfo;
import apimodels.ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplInfo;
import apimodels.ComDayCqAuthImplCugCugSupportImplInfo;
import apimodels.ComDayCqAuthImplLoginSelectorHandlerInfo;
import apimodels.ComDayCqCommonsImplExternalizerImplInfo;
import apimodels.ComDayCqCommonsServletsRootMappingServletInfo;
import apimodels.ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfo;
import apimodels.ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListInfo;
import apimodels.ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistInfo;
import apimodels.ComDayCqContentsyncImplContentSyncManagerImplInfo;
import apimodels.ComDayCqDamCommonsHandlerStandardImageHandlerInfo;
import apimodels.ComDayCqDamCommonsMetadataXmpFilterBlackWhiteInfo;
import apimodels.ComDayCqDamCommonsUtilImplAssetCacheImplInfo;
import apimodels.ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigInfo;
import apimodels.ComDayCqDamCoreImplAssetMoveListenerInfo;
import apimodels.ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationInfo;
import apimodels.ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletInfo;
import apimodels.ComDayCqDamCoreImplCacheCQBufferedImageCacheInfo;
import apimodels.ComDayCqDamCoreImplDamChangeEventListenerInfo;
import apimodels.ComDayCqDamCoreImplDamEventPurgeServiceInfo;
import apimodels.ComDayCqDamCoreImplDamEventRecorderImplInfo;
import apimodels.ComDayCqDamCoreImplEventDamEventAuditListenerInfo;
import apimodels.ComDayCqDamCoreImplExpiryNotificationJobImplInfo;
import apimodels.ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatInfo;
import apimodels.ComDayCqDamCoreImplGfxCommonsGfxRendererInfo;
import apimodels.ComDayCqDamCoreImplHandlerEPSFormatHandlerInfo;
import apimodels.ComDayCqDamCoreImplHandlerIndesignFormatHandlerInfo;
import apimodels.ComDayCqDamCoreImplHandlerJpegHandlerInfo;
import apimodels.ComDayCqDamCoreImplHandlerXmpNCommXMPHandlerInfo;
import apimodels.ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorInfo;
import apimodels.ComDayCqDamCoreImplJmxAssetMigrationMBeanImplInfo;
import apimodels.ComDayCqDamCoreImplJmxAssetUpdateMonitorImplInfo;
import apimodels.ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigInfo;
import apimodels.ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigInfo;
import apimodels.ComDayCqDamCoreImplLightboxLightboxServletInfo;
import apimodels.ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerInfo;
import apimodels.ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperInfo;
import apimodels.ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplInfo;
import apimodels.ComDayCqDamCoreImplMissingMetadataNotificationJobInfo;
import apimodels.ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrInfo;
import apimodels.ComDayCqDamCoreImplProcessTextExtractionProcessInfo;
import apimodels.ComDayCqDamCoreImplRenditionMakerImplInfo;
import apimodels.ComDayCqDamCoreImplReportsReportExportServiceInfo;
import apimodels.ComDayCqDamCoreImplReportsReportPurgeServiceInfo;
import apimodels.ComDayCqDamCoreImplServletAssetDownloadServletInfo;
import apimodels.ComDayCqDamCoreImplServletAssetStatusServletInfo;
import apimodels.ComDayCqDamCoreImplServletAssetXMPSearchServletInfo;
import apimodels.ComDayCqDamCoreImplServletBatchMetadataServletInfo;
import apimodels.ComDayCqDamCoreImplServletBinaryProviderServletInfo;
import apimodels.ComDayCqDamCoreImplServletCollectionServletInfo;
import apimodels.ComDayCqDamCoreImplServletCollectionsServletInfo;
import apimodels.ComDayCqDamCoreImplServletCompanionServletInfo;
import apimodels.ComDayCqDamCoreImplServletCreateAssetServletInfo;
import apimodels.ComDayCqDamCoreImplServletDamContentDispositionFilterInfo;
import apimodels.ComDayCqDamCoreImplServletGuidLookupFilterInfo;
import apimodels.ComDayCqDamCoreImplServletHealthCheckServletInfo;
import apimodels.ComDayCqDamCoreImplServletMetadataGetServletInfo;
import apimodels.ComDayCqDamCoreImplServletMultipleLicenseAcceptServletInfo;
import apimodels.ComDayCqDamCoreImplServletResourceCollectionServletInfo;
import apimodels.ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplInfo;
import apimodels.ComDayCqDamCoreImplUnzipUnzipConfigInfo;
import apimodels.ComDayCqDamCoreProcessExifToolExtractMetadataProcessInfo;
import apimodels.ComDayCqDamCoreProcessExtractMetadataProcessInfo;
import apimodels.ComDayCqDamCoreProcessMetadataProcessorProcessInfo;
import apimodels.ComDayCqDamHandlerFfmpegLocatorImplInfo;
import apimodels.ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplInfo;
import apimodels.ComDayCqDamHandlerStandardPdfPdfHandlerInfo;
import apimodels.ComDayCqDamHandlerStandardPsPostScriptHandlerInfo;
import apimodels.ComDayCqDamHandlerStandardPsdPsdHandlerInfo;
import apimodels.ComDayCqDamIdsImplIDSJobProcessorInfo;
import apimodels.ComDayCqDamIdsImplIDSPoolManagerImplInfo;
import apimodels.ComDayCqDamInddImplHandlerIndesignXMPHandlerInfo;
import apimodels.ComDayCqDamInddImplServletSnippetCreationServletInfo;
import apimodels.ComDayCqDamInddProcessINDDMediaExtractProcessInfo;
import apimodels.ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplInfo;
import apimodels.ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobInfo;
import apimodels.ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProInfo;
import apimodels.ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenInfo;
import apimodels.ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerInfo;
import apimodels.ComDayCqDamS7damCommonPostServletsSetCreateHandlerInfo;
import apimodels.ComDayCqDamS7damCommonPostServletsSetModifyHandlerInfo;
import apimodels.ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessInfo;
import apimodels.ComDayCqDamS7damCommonS7damDamChangeEventListenerInfo;
import apimodels.ComDayCqDamS7damCommonServletsS7damProductInfoServletInfo;
import apimodels.ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplInfo;
import apimodels.ComDayCqDamScene7ImplScene7APIClientImplInfo;
import apimodels.ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplInfo;
import apimodels.ComDayCqDamScene7ImplScene7ConfigurationEventListenerInfo;
import apimodels.ComDayCqDamScene7ImplScene7DamChangeEventListenerInfo;
import apimodels.ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplInfo;
import apimodels.ComDayCqDamScene7ImplScene7UploadServiceImplInfo;
import apimodels.ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerInfo;
import apimodels.ComDayCqDamStockIntegrationImplConfigurationStockConfigurationInfo;
import apimodels.ComDayCqDamVideoImplServletVideoTestServletInfo;
import apimodels.ComDayCqExtwidgetServletsImageSpriteServletInfo;
import apimodels.ComDayCqImageInternalFontFontHelperInfo;
import apimodels.ComDayCqJcrclustersupportClusterStartLevelControllerInfo;
import apimodels.ComDayCqMailerDefaultMailServiceInfo;
import apimodels.ComDayCqMailerImplCqMailingServiceInfo;
import apimodels.ComDayCqMailerImplEmailCqEmailTemplateFactoryInfo;
import apimodels.ComDayCqMailerImplEmailCqRetrieverTemplateFactoryInfo;
import apimodels.ComDayCqMcmCampaignImplIntegrationConfigImplInfo;
import apimodels.ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryInfo;
import apimodels.ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplInfo;
import apimodels.ComDayCqMcmImplMCMConfigurationInfo;
import apimodels.ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenInfo;
import apimodels.ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougInfo;
import apimodels.ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentInfo;
import apimodels.ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaInfo;
import apimodels.ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHInfo;
import apimodels.ComDayCqNotificationImplNotificationServiceImplInfo;
import apimodels.ComDayCqPersonalizationImplServletsTargetingConfigurationServletInfo;
import apimodels.ComDayCqPollingImporterImplManagedPollConfigImplInfo;
import apimodels.ComDayCqPollingImporterImplManagedPollingImporterImplInfo;
import apimodels.ComDayCqPollingImporterImplPollingImporterImplInfo;
import apimodels.ComDayCqReplicationAuditReplicationEventListenerInfo;
import apimodels.ComDayCqReplicationContentStaticContentBuilderInfo;
import apimodels.ComDayCqReplicationImplAgentManagerImplInfo;
import apimodels.ComDayCqReplicationImplContentDurboBinaryLessContentBuilderInfo;
import apimodels.ComDayCqReplicationImplContentDurboDurboImportConfigurationProvInfo;
import apimodels.ComDayCqReplicationImplReplicationContentFactoryProviderImplInfo;
import apimodels.ComDayCqReplicationImplReplicationReceiverImplInfo;
import apimodels.ComDayCqReplicationImplReplicatorImplInfo;
import apimodels.ComDayCqReplicationImplReverseReplicatorInfo;
import apimodels.ComDayCqReplicationImplTransportBinaryLessTransportHandlerInfo;
import apimodels.ComDayCqReplicationImplTransportHttpInfo;
import apimodels.ComDayCqReportingImplCacheCacheImplInfo;
import apimodels.ComDayCqReportingImplConfigServiceImplInfo;
import apimodels.ComDayCqReportingImplRLogAnalyzerInfo;
import apimodels.ComDayCqRewriterLinkcheckerImplLinkCheckerImplInfo;
import apimodels.ComDayCqRewriterLinkcheckerImplLinkCheckerTaskInfo;
import apimodels.ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryInfo;
import apimodels.ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplInfo;
import apimodels.ComDayCqRewriterProcessorImplHtmlParserFactoryInfo;
import apimodels.ComDayCqSearchImplBuilderQueryBuilderImplInfo;
import apimodels.ComDayCqSearchSuggestImplSuggestionIndexManagerImplInfo;
import apimodels.ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerInfo;
import apimodels.ComDayCqSearchpromoteImplSearchPromoteServiceImplInfo;
import apimodels.ComDayCqSecurityACLSetupInfo;
import apimodels.ComDayCqStatisticsImplStatisticsServiceImplInfo;
import apimodels.ComDayCqTaggingImplJcrTagManagerFactoryImplInfo;
import apimodels.ComDayCqTaggingImplSearchTagPredicateEvaluatorInfo;
import apimodels.ComDayCqTaggingImplTagGarbageCollectorInfo;
import apimodels.ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerInfo;
import apimodels.ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorInfo;
import apimodels.ComDayCqWcmCoreImplAuthoringUIModeServiceImplInfo;
import apimodels.ComDayCqWcmCoreImplCommandsWCMCommandServletInfo;
import apimodels.ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplInfo;
import apimodels.ComDayCqWcmCoreImplEventPageEventAuditListenerInfo;
import apimodels.ComDayCqWcmCoreImplEventPagePostProcessorInfo;
import apimodels.ComDayCqWcmCoreImplEventRepositoryChangeEventListenerInfo;
import apimodels.ComDayCqWcmCoreImplEventTemplatePostProcessorInfo;
import apimodels.ComDayCqWcmCoreImplLanguageManagerImplInfo;
import apimodels.ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplInfo;
import apimodels.ComDayCqWcmCoreImplPagePageInfoAggregatorImplInfo;
import apimodels.ComDayCqWcmCoreImplPagePageManagerFactoryImplInfo;
import apimodels.ComDayCqWcmCoreImplReferencesContentContentReferenceConfigInfo;
import apimodels.ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerInfo;
import apimodels.ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieInfo;
import apimodels.ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerInfo;
import apimodels.ComDayCqWcmCoreImplServletsFindReplaceServletInfo;
import apimodels.ComDayCqWcmCoreImplServletsReferenceSearchServletInfo;
import apimodels.ComDayCqWcmCoreImplServletsThumbnailServletInfo;
import apimodels.ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorInfo;
import apimodels.ComDayCqWcmCoreImplVariantsPageVariantsProviderImplInfo;
import apimodels.ComDayCqWcmCoreImplVersionManagerImplInfo;
import apimodels.ComDayCqWcmCoreImplVersionPurgeTaskInfo;
import apimodels.ComDayCqWcmCoreImplWCMDebugFilterInfo;
import apimodels.ComDayCqWcmCoreImplWCMDeveloperModeFilterInfo;
import apimodels.ComDayCqWcmCoreImplWarpTimeWarpFilterInfo;
import apimodels.ComDayCqWcmCoreMvtMVTStatisticsImplInfo;
import apimodels.ComDayCqWcmCoreStatsPageViewStatisticsImplInfo;
import apimodels.ComDayCqWcmCoreWCMRequestFilterInfo;
import apimodels.ComDayCqWcmDesignimporterDesignPackageImporterInfo;
import apimodels.ComDayCqWcmDesignimporterImplCanvasBuilderImplInfo;
import apimodels.ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerInfo;
import apimodels.ComDayCqWcmDesignimporterImplEntryPreprocessorImplInfo;
import apimodels.ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplInfo;
import apimodels.ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeInfo;
import apimodels.ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponInfo;
import apimodels.ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanInfo;
import apimodels.ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleInfo;
import apimodels.ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandInfo;
import apimodels.ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenInfo;
import apimodels.ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerInfo;
import apimodels.ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTInfo;
import apimodels.ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleInfo;
import apimodels.ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleInfo;
import apimodels.ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHInfo;
import apimodels.ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeInfo;
import apimodels.ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandInfo;
import apimodels.ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlInfo;
import apimodels.ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentInfo;
import apimodels.ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenInfo;
import apimodels.ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlInfo;
import apimodels.ComDayCqWcmFoundationFormsImplFormChooserServletInfo;
import apimodels.ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorInfo;
import apimodels.ComDayCqWcmFoundationFormsImplFormsHandlingServletInfo;
import apimodels.ComDayCqWcmFoundationFormsImplMailServletInfo;
import apimodels.ComDayCqWcmFoundationImplAdaptiveImageComponentServletInfo;
import apimodels.ComDayCqWcmFoundationImplHTTPAuthHandlerInfo;
import apimodels.ComDayCqWcmFoundationImplPageImpressionsTrackerInfo;
import apimodels.ComDayCqWcmFoundationImplPageRedirectServletInfo;
import apimodels.ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistInfo;
import apimodels.ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplInfo;
import apimodels.ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo;
import apimodels.ComDayCqWcmMobileCoreImplRedirectRedirectFilterInfo;
import apimodels.ComDayCqWcmMsmImplActionsContentCopyActionFactoryInfo;
import apimodels.ComDayCqWcmMsmImplActionsContentDeleteActionFactoryInfo;
import apimodels.ComDayCqWcmMsmImplActionsContentUpdateActionFactoryInfo;
import apimodels.ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryInfo;
import apimodels.ComDayCqWcmMsmImplActionsPageMoveActionFactoryInfo;
import apimodels.ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryInfo;
import apimodels.ComDayCqWcmMsmImplActionsVersionCopyActionFactoryInfo;
import apimodels.ComDayCqWcmMsmImplLiveRelationshipManagerImplInfo;
import apimodels.ComDayCqWcmMsmImplRolloutManagerImplInfo;
import apimodels.ComDayCqWcmMsmImplServletsAuditLogServletInfo;
import apimodels.ComDayCqWcmNotificationEmailImplEmailChannelInfo;
import apimodels.ComDayCqWcmNotificationImplNotificationManagerImplInfo;
import apimodels.ComDayCqWcmScriptingImplBVPManagerInfo;
import apimodels.ComDayCqWcmUndoUndoConfigInfo;
import apimodels.ComDayCqWcmWebservicesupportImplReplicationEventListenerInfo;
import apimodels.ComDayCqWcmWorkflowImplWcmWorkflowServiceImplInfo;
import apimodels.ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderInfo;
import apimodels.ComDayCqWidgetImplHtmlLibraryManagerImplInfo;
import apimodels.ComDayCqWidgetImplWidgetExtensionProviderImplInfo;
import apimodels.ComDayCqWorkflowImplEmailEMailNotificationServiceInfo;
import apimodels.ComDayCqWorkflowImplEmailTaskEMailNotificationServiceInfo;
import apimodels.ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerInfo;
import apimodels.ComDayCrxSecurityTokenImplTokenCleanupTaskInfo;
import apimodels.GuideLocalizationServiceInfo;
import apimodels.MessagingUserComponentFactoryInfo;
import apimodels.OrgApacheAriesJmxFrameworkStateConfigInfo;
import apimodels.OrgApacheFelixEventadminImplEventAdminInfo;
import apimodels.OrgApacheFelixHttpInfo;
import apimodels.OrgApacheFelixHttpSslfilterSslFilterInfo;
import apimodels.OrgApacheFelixJaasConfigurationFactoryInfo;
import apimodels.OrgApacheFelixJaasConfigurationSpiInfo;
import apimodels.OrgApacheFelixScrScrServiceInfo;
import apimodels.OrgApacheFelixSystemreadyImplComponentsCheckInfo;
import apimodels.OrgApacheFelixSystemreadyImplFrameworkStartCheckInfo;
import apimodels.OrgApacheFelixSystemreadyImplServicesCheckInfo;
import apimodels.OrgApacheFelixSystemreadyImplServletSystemAliveServletInfo;
import apimodels.OrgApacheFelixSystemreadyImplServletSystemReadyServletInfo;
import apimodels.OrgApacheFelixSystemreadySystemReadyMonitorInfo;
import apimodels.OrgApacheFelixWebconsoleInternalServletOsgiManagerInfo;
import apimodels.OrgApacheFelixWebconsolePluginsEventInternalPluginServletInfo;
import apimodels.OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoInfo;
import apimodels.OrgApacheHttpProxyconfiguratorInfo;
import apimodels.OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderInfo;
import apimodels.OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreInfo;
import apimodels.OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceInfo;
import apimodels.OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreInfo;
import apimodels.OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacInfo;
import apimodels.OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceInfo;
import apimodels.OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServInfo;
import apimodels.OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoInfo;
import apimodels.OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersInfo;
import apimodels.OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationInfo;
import apimodels.OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfInfo;
import apimodels.OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidInfo;
import apimodels.OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeInfo;
import apimodels.OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryInfo;
import apimodels.OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderInfo;
import apimodels.OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceInfo;
import apimodels.OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigInfo;
import apimodels.OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiInfo;
import apimodels.OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraInfo;
import apimodels.OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurInfo;
import apimodels.OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiInfo;
import apimodels.OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameInfo;
import apimodels.OrgApacheJackrabbitOakSecurityUserUserConfigurationImplInfo;
import apimodels.OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceInfo;
import apimodels.OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryInfo;
import apimodels.OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceInfo;
import apimodels.OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceInfo;
import apimodels.OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceInfo;
import apimodels.OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeInfo;
import apimodels.OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExInfo;
import apimodels.OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrInfo;
import apimodels.OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiInfo;
import apimodels.OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluInfo;
import apimodels.OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableInfo;
import apimodels.OrgApacheJackrabbitVaultPackagingImplPackagingImplInfo;
import apimodels.OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryInfo;
import apimodels.OrgApacheSlingAuthCoreImplLogoutServletInfo;
import apimodels.OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderInfo;
import apimodels.OrgApacheSlingCaconfigImplConfigurationResolverImplInfo;
import apimodels.OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraInfo;
import apimodels.OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraInfo;
import apimodels.OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviInfo;
import apimodels.OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveInfo;
import apimodels.OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiInfo;
import apimodels.OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourInfo;
import apimodels.OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyInfo;
import apimodels.OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserInfo;
import apimodels.OrgApacheSlingCommonsLogLogManagerFactoryConfigInfo;
import apimodels.OrgApacheSlingCommonsLogLogManagerFactoryWriterInfo;
import apimodels.OrgApacheSlingCommonsLogLogManagerInfo;
import apimodels.OrgApacheSlingCommonsMetricsInternalLogReporterInfo;
import apimodels.OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterInfo;
import apimodels.OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplInfo;
import apimodels.OrgApacheSlingCommonsSchedulerImplQuartzSchedulerInfo;
import apimodels.OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckInfo;
import apimodels.OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryInfo;
import apimodels.OrgApacheSlingDatasourceDataSourceFactoryInfo;
import apimodels.OrgApacheSlingDatasourceJNDIDataSourceFactoryInfo;
import apimodels.OrgApacheSlingDiscoveryOakConfigInfo;
import apimodels.OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckInfo;
import apimodels.OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoInfo;
import apimodels.OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAInfo;
import apimodels.OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryInfo;
import apimodels.OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoInfo;
import apimodels.OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorInfo;
import apimodels.OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryInfo;
import apimodels.OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckInfo;
import apimodels.OrgApacheSlingDistributionPackagingImplExporterAgentDistributioInfo;
import apimodels.OrgApacheSlingDistributionPackagingImplExporterLocalDistributioInfo;
import apimodels.OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiInfo;
import apimodels.OrgApacheSlingDistributionPackagingImplImporterLocalDistributioInfo;
import apimodels.OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiInfo;
import apimodels.OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriInfo;
import apimodels.OrgApacheSlingDistributionResourcesImplDistributionConfigurationInfo;
import apimodels.OrgApacheSlingDistributionResourcesImplDistributionServiceResourInfo;
import apimodels.OrgApacheSlingDistributionSerializationImplDistributionPackageBuInfo;
import apimodels.OrgApacheSlingDistributionSerializationImplVltVaultDistributionInfo;
import apimodels.OrgApacheSlingDistributionTransportImplUserCredentialsDistributiInfo;
import apimodels.OrgApacheSlingDistributionTriggerImplDistributionEventDistributeInfo;
import apimodels.OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerInfo;
import apimodels.OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiInfo;
import apimodels.OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigInfo;
import apimodels.OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrInfo;
import apimodels.OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeInfo;
import apimodels.OrgApacheSlingEngineImplAuthSlingAuthenticatorInfo;
import apimodels.OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterInfo;
import apimodels.OrgApacheSlingEngineImplLogRequestLoggerInfo;
import apimodels.OrgApacheSlingEngineImplLogRequestLoggerServiceInfo;
import apimodels.OrgApacheSlingEngineImplSlingMainServletInfo;
import apimodels.OrgApacheSlingEngineParametersInfo;
import apimodels.OrgApacheSlingEventImplEventingThreadPoolInfo;
import apimodels.OrgApacheSlingEventImplJobsDefaultJobManagerInfo;
import apimodels.OrgApacheSlingEventImplJobsJcrPersistenceHandlerInfo;
import apimodels.OrgApacheSlingEventImplJobsJobConsumerManagerInfo;
import apimodels.OrgApacheSlingEventJobsQueueConfigurationInfo;
import apimodels.OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWInfo;
import apimodels.OrgApacheSlingFeatureflagsFeatureInfo;
import apimodels.OrgApacheSlingFeatureflagsImplConfiguredFeatureInfo;
import apimodels.OrgApacheSlingHapiImplHApiUtilImplInfo;
import apimodels.OrgApacheSlingHcCoreImplCompositeHealthCheckInfo;
import apimodels.OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplInfo;
import apimodels.OrgApacheSlingHcCoreImplJmxAttributeHealthCheckInfo;
import apimodels.OrgApacheSlingHcCoreImplScriptableHealthCheckInfo;
import apimodels.OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletInfo;
import apimodels.OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerInfo;
import apimodels.OrgApacheSlingI18nImplI18NFilterInfo;
import apimodels.OrgApacheSlingI18nImplJcrResourceBundleProviderInfo;
import apimodels.OrgApacheSlingInstallerProviderJcrImplJcrInstallerInfo;
import apimodels.OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentInfo;
import apimodels.OrgApacheSlingJcrBaseInternalLoginAdminWhitelistInfo;
import apimodels.OrgApacheSlingJcrDavexImplServletsSlingDavExServletInfo;
import apimodels.OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportInfo;
import apimodels.OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportInfo;
import apimodels.OrgApacheSlingJcrRepoinitImplRepositoryInitializerInfo;
import apimodels.OrgApacheSlingJcrRepoinitRepositoryInitializerInfo;
import apimodels.OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplInfo;
import apimodels.OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorInfo;
import apimodels.OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryInfo;
import apimodels.OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceInfo;
import apimodels.OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicInfo;
import apimodels.OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletInfo;
import apimodels.OrgApacheSlingJmxProviderImplJMXResourceProviderInfo;
import apimodels.OrgApacheSlingModelsImplModelAdapterFactoryInfo;
import apimodels.OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderInfo;
import apimodels.OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoInfo;
import apimodels.OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryInfo;
import apimodels.OrgApacheSlingResourcemergerPickerOverridingInfo;
import apimodels.OrgApacheSlingScriptingCoreImplScriptCacheImplInfo;
import apimodels.OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderInfo;
import apimodels.OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryInfo;
import apimodels.OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaInfo;
import apimodels.OrgApacheSlingScriptingJspJspScriptEngineFactoryInfo;
import apimodels.OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvInfo;
import apimodels.OrgApacheSlingSecurityImplContentDispositionFilterInfo;
import apimodels.OrgApacheSlingSecurityImplReferrerFilterInfo;
import apimodels.OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedInfo;
import apimodels.OrgApacheSlingServiceusermappingImplServiceUserMapperImplInfo;
import apimodels.OrgApacheSlingServletsGetDefaultGetServletInfo;
import apimodels.OrgApacheSlingServletsGetImplVersionVersionInfoServletInfo;
import apimodels.OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskInfo;
import apimodels.OrgApacheSlingServletsPostImplSlingPostServletInfo;
import apimodels.OrgApacheSlingServletsResolverSlingServletResolverInfo;
import apimodels.OrgApacheSlingSettingsImplSlingSettingsServiceImplInfo;
import apimodels.OrgApacheSlingStartupfilterImplStartupFilterImplInfo;
import apimodels.OrgApacheSlingTenantInternalTenantProviderImplInfo;
import apimodels.OrgApacheSlingTracerInternalLogTracerInfo;
import apimodels.OrgApacheSlingXssImplXSSFilterImplInfo;

import play.mvc.Controller;
import play.mvc.Result;
import play.mvc.Http;
import java.util.List;
import java.util.Map;
import java.util.ArrayList;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.JsonNode;
import com.google.inject.Inject;
import java.io.File;
import openapitools.OpenAPIUtils;
import com.fasterxml.jackson.core.type.TypeReference;

import javax.validation.constraints.*;
import play.Configuration;

import openapitools.OpenAPIUtils.ApiAction;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaPlayFrameworkCodegen", date = "2019-08-05T00:55:42.601Z[GMT]")

public class ConfigmgrApiController extends Controller {

    private final ConfigmgrApiControllerImpInterface imp;
    private final ObjectMapper mapper;
    private final Configuration configuration;

    @Inject
    private ConfigmgrApiController(Configuration configuration, ConfigmgrApiControllerImpInterface imp) {
        this.imp = imp;
        mapper = new ObjectMapper();
        this.configuration = configuration;
    }


    @ApiAction
    public Result adaptiveFormAndInteractiveCommunicationWebChannelConfiguration() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueshowPlaceholder = request().getQueryString("showPlaceholder");
        Boolean showPlaceholder;
        if (valueshowPlaceholder != null) {
            showPlaceholder = Boolean.valueOf(valueshowPlaceholder);
        } else {
            showPlaceholder = null;
        }
        String valuemaximumCacheEntries = request().getQueryString("maximumCacheEntries");
        Integer maximumCacheEntries;
        if (valuemaximumCacheEntries != null) {
            maximumCacheEntries = Integer.parseInt(valuemaximumCacheEntries);
        } else {
            maximumCacheEntries = null;
        }
        String valueafScriptingCompatversion = request().getQueryString("af.scripting.compatversion");
        String afScriptingCompatversion;
        if (valueafScriptingCompatversion != null) {
            afScriptingCompatversion = valueafScriptingCompatversion;
        } else {
            afScriptingCompatversion = null;
        }
        String valuemakeFileNameUnique = request().getQueryString("makeFileNameUnique");
        Boolean makeFileNameUnique;
        if (valuemakeFileNameUnique != null) {
            makeFileNameUnique = Boolean.valueOf(valuemakeFileNameUnique);
        } else {
            makeFileNameUnique = null;
        }
        String valuegeneratingCompliantData = request().getQueryString("generatingCompliantData");
        Boolean generatingCompliantData;
        if (valuegeneratingCompliantData != null) {
            generatingCompliantData = Boolean.valueOf(valuegeneratingCompliantData);
        } else {
            generatingCompliantData = null;
        }
        AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationInfo obj = imp.adaptiveFormAndInteractiveCommunicationWebChannelConfiguration(post, apply, delete, action, $location, propertylist, showPlaceholder, maximumCacheEntries, afScriptingCompatversion, makeFileNameUnique, generatingCompliantData);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result adaptiveFormAndInteractiveCommunicationWebChannelThemeConfigur() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] fontListArray = request().queryString().get("fontList");
        List<String> fontListList = OpenAPIUtils.parametersToList("multi", fontListArray);
        List<String> fontList = new ArrayList<String>();
        for (String curParam : fontListList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                fontList.add(curParam);
            }
        }
        AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurInfo obj = imp.adaptiveFormAndInteractiveCommunicationWebChannelThemeConfigur(post, apply, delete, action, $location, propertylist, fontList);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result analyticsComponentQueryCacheService() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuecqAnalyticsComponentQueryCacheSize = request().getQueryString("cq.analytics.component.query.cache.size");
        Integer cqAnalyticsComponentQueryCacheSize;
        if (valuecqAnalyticsComponentQueryCacheSize != null) {
            cqAnalyticsComponentQueryCacheSize = Integer.parseInt(valuecqAnalyticsComponentQueryCacheSize);
        } else {
            cqAnalyticsComponentQueryCacheSize = null;
        }
        AnalyticsComponentQueryCacheServiceInfo obj = imp.analyticsComponentQueryCacheService(post, apply, delete, action, $location, propertylist, cqAnalyticsComponentQueryCacheSize);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result apacheSlingHealthCheckResultHTMLSerializer() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuestyleString = request().getQueryString("styleString");
        String styleString;
        if (valuestyleString != null) {
            styleString = valuestyleString;
        } else {
            styleString = null;
        }
        ApacheSlingHealthCheckResultHTMLSerializerInfo obj = imp.apacheSlingHealthCheckResultHTMLSerializer(post, apply, delete, action, $location, propertylist, styleString);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeAemFormsndocumentsConfigAEMFormsManagerConfiguration() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueformsManagerConfigIncludeOOTBTemplates = request().getQueryString("formsManagerConfig.includeOOTBTemplates");
        Boolean formsManagerConfigIncludeOOTBTemplates;
        if (valueformsManagerConfigIncludeOOTBTemplates != null) {
            formsManagerConfigIncludeOOTBTemplates = Boolean.valueOf(valueformsManagerConfigIncludeOOTBTemplates);
        } else {
            formsManagerConfigIncludeOOTBTemplates = null;
        }
        String valueformsManagerConfigIncludeDeprecatedTemplates = request().getQueryString("formsManagerConfig.includeDeprecatedTemplates");
        Boolean formsManagerConfigIncludeDeprecatedTemplates;
        if (valueformsManagerConfigIncludeDeprecatedTemplates != null) {
            formsManagerConfigIncludeDeprecatedTemplates = Boolean.valueOf(valueformsManagerConfigIncludeDeprecatedTemplates);
        } else {
            formsManagerConfigIncludeDeprecatedTemplates = null;
        }
        ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationInfo obj = imp.comAdobeAemFormsndocumentsConfigAEMFormsManagerConfiguration(post, apply, delete, action, $location, propertylist, formsManagerConfigIncludeOOTBTemplates, formsManagerConfigIncludeDeprecatedTemplates);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeAemTransactionCoreImplTransactionRecorder() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueisTransactionRecordingEnabled = request().getQueryString("isTransactionRecordingEnabled");
        Boolean isTransactionRecordingEnabled;
        if (valueisTransactionRecordingEnabled != null) {
            isTransactionRecordingEnabled = Boolean.valueOf(valueisTransactionRecordingEnabled);
        } else {
            isTransactionRecordingEnabled = null;
        }
        ComAdobeAemTransactionCoreImplTransactionRecorderInfo obj = imp.comAdobeAemTransactionCoreImplTransactionRecorder(post, apply, delete, action, $location, propertylist, isTransactionRecordingEnabled);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeAemUpgradePrechecksHcImplDeprecateIndexesHC() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuehcName = request().getQueryString("hc.name");
        String hcName;
        if (valuehcName != null) {
            hcName = valuehcName;
        } else {
            hcName = null;
        }
        String[] hcTagsArray = request().queryString().get("hc.tags");
        List<String> hcTagsList = OpenAPIUtils.parametersToList("multi", hcTagsArray);
        List<String> hcTags = new ArrayList<String>();
        for (String curParam : hcTagsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                hcTags.add(curParam);
            }
        }
        String valuehcMbeanName = request().getQueryString("hc.mbean.name");
        String hcMbeanName;
        if (valuehcMbeanName != null) {
            hcMbeanName = valuehcMbeanName;
        } else {
            hcMbeanName = null;
        }
        ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCInfo obj = imp.comAdobeAemUpgradePrechecksHcImplDeprecateIndexesHC(post, apply, delete, action, $location, propertylist, hcName, hcTags, hcMbeanName);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHC() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuehcName = request().getQueryString("hc.name");
        String hcName;
        if (valuehcName != null) {
            hcName = valuehcName;
        } else {
            hcName = null;
        }
        String[] hcTagsArray = request().queryString().get("hc.tags");
        List<String> hcTagsList = OpenAPIUtils.parametersToList("multi", hcTagsArray);
        List<String> hcTags = new ArrayList<String>();
        for (String curParam : hcTagsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                hcTags.add(curParam);
            }
        }
        String valuehcMbeanName = request().getQueryString("hc.mbean.name");
        String hcMbeanName;
        if (valuehcMbeanName != null) {
            hcMbeanName = valuehcMbeanName;
        } else {
            hcMbeanName = null;
        }
        ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCInfo obj = imp.comAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHC(post, apply, delete, action, $location, propertylist, hcName, hcTags, hcMbeanName);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] preUpgradeMaintenanceTasksArray = request().queryString().get("pre-upgrade.maintenance.tasks");
        List<String> preUpgradeMaintenanceTasksList = OpenAPIUtils.parametersToList("multi", preUpgradeMaintenanceTasksArray);
        List<String> preUpgradeMaintenanceTasks = new ArrayList<String>();
        for (String curParam : preUpgradeMaintenanceTasksList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                preUpgradeMaintenanceTasks.add(curParam);
            }
        }
        String[] preUpgradeHcTagsArray = request().queryString().get("pre-upgrade.hc.tags");
        List<String> preUpgradeHcTagsList = OpenAPIUtils.parametersToList("multi", preUpgradeHcTagsArray);
        List<String> preUpgradeHcTags = new ArrayList<String>();
        for (String curParam : preUpgradeHcTagsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                preUpgradeHcTags.add(curParam);
            }
        }
        ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplInfo obj = imp.comAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImpl(post, apply, delete, action, $location, propertylist, preUpgradeMaintenanceTasks, preUpgradeHcTags);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuerootPath = request().getQueryString("root.path");
        String rootPath;
        if (valuerootPath != null) {
            rootPath = valuerootPath;
        } else {
            rootPath = null;
        }
        String valuefixInconsistencies = request().getQueryString("fix.inconsistencies");
        Boolean fixInconsistencies;
        if (valuefixInconsistencies != null) {
            fixInconsistencies = Boolean.valueOf(valuefixInconsistencies);
        } else {
            fixInconsistencies = null;
        }
        ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplInfo obj = imp.comAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImpl(post, apply, delete, action, $location, propertylist, rootPath, fixInconsistencies);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqAccountApiAccountManagementService() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuecqAccountmanagerTokenValidityPeriod = request().getQueryString("cq.accountmanager.token.validity.period");
        Integer cqAccountmanagerTokenValidityPeriod;
        if (valuecqAccountmanagerTokenValidityPeriod != null) {
            cqAccountmanagerTokenValidityPeriod = Integer.parseInt(valuecqAccountmanagerTokenValidityPeriod);
        } else {
            cqAccountmanagerTokenValidityPeriod = null;
        }
        String valuecqAccountmanagerConfigRequestnewaccountMail = request().getQueryString("cq.accountmanager.config.requestnewaccount.mail");
        String cqAccountmanagerConfigRequestnewaccountMail;
        if (valuecqAccountmanagerConfigRequestnewaccountMail != null) {
            cqAccountmanagerConfigRequestnewaccountMail = valuecqAccountmanagerConfigRequestnewaccountMail;
        } else {
            cqAccountmanagerConfigRequestnewaccountMail = null;
        }
        String valuecqAccountmanagerConfigRequestnewpwdMail = request().getQueryString("cq.accountmanager.config.requestnewpwd.mail");
        String cqAccountmanagerConfigRequestnewpwdMail;
        if (valuecqAccountmanagerConfigRequestnewpwdMail != null) {
            cqAccountmanagerConfigRequestnewpwdMail = valuecqAccountmanagerConfigRequestnewpwdMail;
        } else {
            cqAccountmanagerConfigRequestnewpwdMail = null;
        }
        ComAdobeCqAccountApiAccountManagementServiceInfo obj = imp.comAdobeCqAccountApiAccountManagementService(post, apply, delete, action, $location, propertylist, cqAccountmanagerTokenValidityPeriod, cqAccountmanagerConfigRequestnewaccountMail, cqAccountmanagerConfigRequestnewpwdMail);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqAccountImplAccountManagementServlet() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuecqAccountmanagerConfigInformnewaccountMail = request().getQueryString("cq.accountmanager.config.informnewaccount.mail");
        String cqAccountmanagerConfigInformnewaccountMail;
        if (valuecqAccountmanagerConfigInformnewaccountMail != null) {
            cqAccountmanagerConfigInformnewaccountMail = valuecqAccountmanagerConfigInformnewaccountMail;
        } else {
            cqAccountmanagerConfigInformnewaccountMail = null;
        }
        String valuecqAccountmanagerConfigInformnewpwdMail = request().getQueryString("cq.accountmanager.config.informnewpwd.mail");
        String cqAccountmanagerConfigInformnewpwdMail;
        if (valuecqAccountmanagerConfigInformnewpwdMail != null) {
            cqAccountmanagerConfigInformnewpwdMail = valuecqAccountmanagerConfigInformnewpwdMail;
        } else {
            cqAccountmanagerConfigInformnewpwdMail = null;
        }
        ComAdobeCqAccountImplAccountManagementServletInfo obj = imp.comAdobeCqAccountImplAccountManagementServlet(post, apply, delete, action, $location, propertylist, cqAccountmanagerConfigInformnewaccountMail, cqAccountmanagerConfigInformnewpwdMail);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqAddressImplLocationLocationListServlet() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuecqAddressLocationDefaultMaxResults = request().getQueryString("cq.address.location.default.maxResults");
        Integer cqAddressLocationDefaultMaxResults;
        if (valuecqAddressLocationDefaultMaxResults != null) {
            cqAddressLocationDefaultMaxResults = Integer.parseInt(valuecqAddressLocationDefaultMaxResults);
        } else {
            cqAddressLocationDefaultMaxResults = null;
        }
        ComAdobeCqAddressImplLocationLocationListServletInfo obj = imp.comAdobeCqAddressImplLocationLocationListServlet(post, apply, delete, action, $location, propertylist, cqAddressLocationDefaultMaxResults);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqAuditPurgeDam() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueauditlogRuleName = request().getQueryString("auditlog.rule.name");
        String auditlogRuleName;
        if (valueauditlogRuleName != null) {
            auditlogRuleName = valueauditlogRuleName;
        } else {
            auditlogRuleName = null;
        }
        String valueauditlogRuleContentpath = request().getQueryString("auditlog.rule.contentpath");
        String auditlogRuleContentpath;
        if (valueauditlogRuleContentpath != null) {
            auditlogRuleContentpath = valueauditlogRuleContentpath;
        } else {
            auditlogRuleContentpath = null;
        }
        String valueauditlogRuleMinimumage = request().getQueryString("auditlog.rule.minimumage");
        Integer auditlogRuleMinimumage;
        if (valueauditlogRuleMinimumage != null) {
            auditlogRuleMinimumage = Integer.parseInt(valueauditlogRuleMinimumage);
        } else {
            auditlogRuleMinimumage = null;
        }
        String valueauditlogRuleTypes = request().getQueryString("auditlog.rule.types");
        String auditlogRuleTypes;
        if (valueauditlogRuleTypes != null) {
            auditlogRuleTypes = valueauditlogRuleTypes;
        } else {
            auditlogRuleTypes = null;
        }
        ComAdobeCqAuditPurgeDamInfo obj = imp.comAdobeCqAuditPurgeDam(post, apply, delete, action, $location, propertylist, auditlogRuleName, auditlogRuleContentpath, auditlogRuleMinimumage, auditlogRuleTypes);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqAuditPurgePages() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueauditlogRuleName = request().getQueryString("auditlog.rule.name");
        String auditlogRuleName;
        if (valueauditlogRuleName != null) {
            auditlogRuleName = valueauditlogRuleName;
        } else {
            auditlogRuleName = null;
        }
        String valueauditlogRuleContentpath = request().getQueryString("auditlog.rule.contentpath");
        String auditlogRuleContentpath;
        if (valueauditlogRuleContentpath != null) {
            auditlogRuleContentpath = valueauditlogRuleContentpath;
        } else {
            auditlogRuleContentpath = null;
        }
        String valueauditlogRuleMinimumage = request().getQueryString("auditlog.rule.minimumage");
        Integer auditlogRuleMinimumage;
        if (valueauditlogRuleMinimumage != null) {
            auditlogRuleMinimumage = Integer.parseInt(valueauditlogRuleMinimumage);
        } else {
            auditlogRuleMinimumage = null;
        }
        String valueauditlogRuleTypes = request().getQueryString("auditlog.rule.types");
        String auditlogRuleTypes;
        if (valueauditlogRuleTypes != null) {
            auditlogRuleTypes = valueauditlogRuleTypes;
        } else {
            auditlogRuleTypes = null;
        }
        ComAdobeCqAuditPurgePagesInfo obj = imp.comAdobeCqAuditPurgePages(post, apply, delete, action, $location, propertylist, auditlogRuleName, auditlogRuleContentpath, auditlogRuleMinimumage, auditlogRuleTypes);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqAuditPurgeReplication() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueauditlogRuleName = request().getQueryString("auditlog.rule.name");
        String auditlogRuleName;
        if (valueauditlogRuleName != null) {
            auditlogRuleName = valueauditlogRuleName;
        } else {
            auditlogRuleName = null;
        }
        String valueauditlogRuleContentpath = request().getQueryString("auditlog.rule.contentpath");
        String auditlogRuleContentpath;
        if (valueauditlogRuleContentpath != null) {
            auditlogRuleContentpath = valueauditlogRuleContentpath;
        } else {
            auditlogRuleContentpath = null;
        }
        String valueauditlogRuleMinimumage = request().getQueryString("auditlog.rule.minimumage");
        Integer auditlogRuleMinimumage;
        if (valueauditlogRuleMinimumage != null) {
            auditlogRuleMinimumage = Integer.parseInt(valueauditlogRuleMinimumage);
        } else {
            auditlogRuleMinimumage = null;
        }
        String valueauditlogRuleTypes = request().getQueryString("auditlog.rule.types");
        String auditlogRuleTypes;
        if (valueauditlogRuleTypes != null) {
            auditlogRuleTypes = valueauditlogRuleTypes;
        } else {
            auditlogRuleTypes = null;
        }
        ComAdobeCqAuditPurgeReplicationInfo obj = imp.comAdobeCqAuditPurgeReplication(post, apply, delete, action, $location, propertylist, auditlogRuleName, auditlogRuleContentpath, auditlogRuleMinimumage, auditlogRuleTypes);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqCdnRewriterImplAWSCloudFrontRewriter() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueserviceRanking = request().getQueryString("service.ranking");
        Integer serviceRanking;
        if (valueserviceRanking != null) {
            serviceRanking = Integer.parseInt(valueserviceRanking);
        } else {
            serviceRanking = null;
        }
        String valuekeypairId = request().getQueryString("keypair.id");
        String keypairId;
        if (valuekeypairId != null) {
            keypairId = valuekeypairId;
        } else {
            keypairId = null;
        }
        String valuekeypairAlias = request().getQueryString("keypair.alias");
        String keypairAlias;
        if (valuekeypairAlias != null) {
            keypairAlias = valuekeypairAlias;
        } else {
            keypairAlias = null;
        }
        String[] cdnrewriterAttributesArray = request().queryString().get("cdnrewriter.attributes");
        List<String> cdnrewriterAttributesList = OpenAPIUtils.parametersToList("multi", cdnrewriterAttributesArray);
        List<String> cdnrewriterAttributes = new ArrayList<String>();
        for (String curParam : cdnrewriterAttributesList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                cdnrewriterAttributes.add(curParam);
            }
        }
        String valuecdnRewriterDistributionDomain = request().getQueryString("cdn.rewriter.distribution.domain");
        String cdnRewriterDistributionDomain;
        if (valuecdnRewriterDistributionDomain != null) {
            cdnRewriterDistributionDomain = valuecdnRewriterDistributionDomain;
        } else {
            cdnRewriterDistributionDomain = null;
        }
        ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterInfo obj = imp.comAdobeCqCdnRewriterImplAWSCloudFrontRewriter(post, apply, delete, action, $location, propertylist, serviceRanking, keypairId, keypairAlias, cdnrewriterAttributes, cdnRewriterDistributionDomain);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqCdnRewriterImplCDNConfigServiceImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuecdnConfigDistributionDomain = request().getQueryString("cdn.config.distribution.domain");
        String cdnConfigDistributionDomain;
        if (valuecdnConfigDistributionDomain != null) {
            cdnConfigDistributionDomain = valuecdnConfigDistributionDomain;
        } else {
            cdnConfigDistributionDomain = null;
        }
        String valuecdnConfigEnableRewriting = request().getQueryString("cdn.config.enable.rewriting");
        Boolean cdnConfigEnableRewriting;
        if (valuecdnConfigEnableRewriting != null) {
            cdnConfigEnableRewriting = Boolean.valueOf(valuecdnConfigEnableRewriting);
        } else {
            cdnConfigEnableRewriting = null;
        }
        String[] cdnConfigPathPrefixesArray = request().queryString().get("cdn.config.path.prefixes");
        List<String> cdnConfigPathPrefixesList = OpenAPIUtils.parametersToList("multi", cdnConfigPathPrefixesArray);
        List<String> cdnConfigPathPrefixes = new ArrayList<String>();
        for (String curParam : cdnConfigPathPrefixesList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                cdnConfigPathPrefixes.add(curParam);
            }
        }
        String valuecdnConfigCdnttl = request().getQueryString("cdn.config.cdnttl");
        Integer cdnConfigCdnttl;
        if (valuecdnConfigCdnttl != null) {
            cdnConfigCdnttl = Integer.parseInt(valuecdnConfigCdnttl);
        } else {
            cdnConfigCdnttl = null;
        }
        String valuecdnConfigApplicationProtocol = request().getQueryString("cdn.config.application.protocol");
        String cdnConfigApplicationProtocol;
        if (valuecdnConfigApplicationProtocol != null) {
            cdnConfigApplicationProtocol = valuecdnConfigApplicationProtocol;
        } else {
            cdnConfigApplicationProtocol = null;
        }
        ComAdobeCqCdnRewriterImplCDNConfigServiceImplInfo obj = imp.comAdobeCqCdnRewriterImplCDNConfigServiceImpl(post, apply, delete, action, $location, propertylist, cdnConfigDistributionDomain, cdnConfigEnableRewriting, cdnConfigPathPrefixes, cdnConfigCdnttl, cdnConfigApplicationProtocol);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqCdnRewriterImplCDNRewriter() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueserviceRanking = request().getQueryString("service.ranking");
        Integer serviceRanking;
        if (valueserviceRanking != null) {
            serviceRanking = Integer.parseInt(valueserviceRanking);
        } else {
            serviceRanking = null;
        }
        String[] cdnrewriterAttributesArray = request().queryString().get("cdnrewriter.attributes");
        List<String> cdnrewriterAttributesList = OpenAPIUtils.parametersToList("multi", cdnrewriterAttributesArray);
        List<String> cdnrewriterAttributes = new ArrayList<String>();
        for (String curParam : cdnrewriterAttributesList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                cdnrewriterAttributes.add(curParam);
            }
        }
        String valuecdnRewriterDistributionDomain = request().getQueryString("cdn.rewriter.distribution.domain");
        String cdnRewriterDistributionDomain;
        if (valuecdnRewriterDistributionDomain != null) {
            cdnRewriterDistributionDomain = valuecdnRewriterDistributionDomain;
        } else {
            cdnRewriterDistributionDomain = null;
        }
        ComAdobeCqCdnRewriterImplCDNRewriterInfo obj = imp.comAdobeCqCdnRewriterImplCDNRewriter(post, apply, delete, action, $location, propertylist, serviceRanking, cdnrewriterAttributes, cdnRewriterDistributionDomain);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandle() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] flushAgentsArray = request().queryString().get("flush.agents");
        List<String> flushAgentsList = OpenAPIUtils.parametersToList("multi", flushAgentsArray);
        List<String> flushAgents = new ArrayList<String>();
        for (String curParam : flushAgentsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                flushAgents.add(curParam);
            }
        }
        ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleInfo obj = imp.comAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandle(post, apply, delete, action, $location, propertylist, flushAgents);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqCommerceImplAssetDynamicImageHandler() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuecqCommerceAssetHandlerActive = request().getQueryString("cq.commerce.asset.handler.active");
        Boolean cqCommerceAssetHandlerActive;
        if (valuecqCommerceAssetHandlerActive != null) {
            cqCommerceAssetHandlerActive = Boolean.valueOf(valuecqCommerceAssetHandlerActive);
        } else {
            cqCommerceAssetHandlerActive = null;
        }
        String valuecqCommerceAssetHandlerName = request().getQueryString("cq.commerce.asset.handler.name");
        String cqCommerceAssetHandlerName;
        if (valuecqCommerceAssetHandlerName != null) {
            cqCommerceAssetHandlerName = valuecqCommerceAssetHandlerName;
        } else {
            cqCommerceAssetHandlerName = null;
        }
        ComAdobeCqCommerceImplAssetDynamicImageHandlerInfo obj = imp.comAdobeCqCommerceImplAssetDynamicImageHandler(post, apply, delete, action, $location, propertylist, cqCommerceAssetHandlerActive, cqCommerceAssetHandlerName);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqCommerceImplAssetProductAssetHandlerProviderImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuecqCommerceAssetHandlerFallback = request().getQueryString("cq.commerce.asset.handler.fallback");
        String cqCommerceAssetHandlerFallback;
        if (valuecqCommerceAssetHandlerFallback != null) {
            cqCommerceAssetHandlerFallback = valuecqCommerceAssetHandlerFallback;
        } else {
            cqCommerceAssetHandlerFallback = null;
        }
        ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplInfo obj = imp.comAdobeCqCommerceImplAssetProductAssetHandlerProviderImpl(post, apply, delete, action, $location, propertylist, cqCommerceAssetHandlerFallback);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqCommerceImplAssetStaticImageHandler() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuecqCommerceAssetHandlerActive = request().getQueryString("cq.commerce.asset.handler.active");
        Boolean cqCommerceAssetHandlerActive;
        if (valuecqCommerceAssetHandlerActive != null) {
            cqCommerceAssetHandlerActive = Boolean.valueOf(valuecqCommerceAssetHandlerActive);
        } else {
            cqCommerceAssetHandlerActive = null;
        }
        String valuecqCommerceAssetHandlerName = request().getQueryString("cq.commerce.asset.handler.name");
        String cqCommerceAssetHandlerName;
        if (valuecqCommerceAssetHandlerName != null) {
            cqCommerceAssetHandlerName = valuecqCommerceAssetHandlerName;
        } else {
            cqCommerceAssetHandlerName = null;
        }
        ComAdobeCqCommerceImplAssetStaticImageHandlerInfo obj = imp.comAdobeCqCommerceImplAssetStaticImageHandler(post, apply, delete, action, $location, propertylist, cqCommerceAssetHandlerActive, cqCommerceAssetHandlerName);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqCommerceImplAssetVideoHandler() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuecqCommerceAssetHandlerActive = request().getQueryString("cq.commerce.asset.handler.active");
        Boolean cqCommerceAssetHandlerActive;
        if (valuecqCommerceAssetHandlerActive != null) {
            cqCommerceAssetHandlerActive = Boolean.valueOf(valuecqCommerceAssetHandlerActive);
        } else {
            cqCommerceAssetHandlerActive = null;
        }
        String valuecqCommerceAssetHandlerName = request().getQueryString("cq.commerce.asset.handler.name");
        String cqCommerceAssetHandlerName;
        if (valuecqCommerceAssetHandlerName != null) {
            cqCommerceAssetHandlerName = valuecqCommerceAssetHandlerName;
        } else {
            cqCommerceAssetHandlerName = null;
        }
        ComAdobeCqCommerceImplAssetVideoHandlerInfo obj = imp.comAdobeCqCommerceImplAssetVideoHandler(post, apply, delete, action, $location, propertylist, cqCommerceAssetHandlerActive, cqCommerceAssetHandlerName);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqCommerceImplPromotionPromotionManagerImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuecqCommercePromotionRoot = request().getQueryString("cq.commerce.promotion.root");
        String cqCommercePromotionRoot;
        if (valuecqCommercePromotionRoot != null) {
            cqCommercePromotionRoot = valuecqCommercePromotionRoot;
        } else {
            cqCommercePromotionRoot = null;
        }
        ComAdobeCqCommerceImplPromotionPromotionManagerImplInfo obj = imp.comAdobeCqCommerceImplPromotionPromotionManagerImpl(post, apply, delete, action, $location, propertylist, cqCommercePromotionRoot);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuecqCommerceCataloggeneratorBucketsize = request().getQueryString("cq.commerce.cataloggenerator.bucketsize");
        Integer cqCommerceCataloggeneratorBucketsize;
        if (valuecqCommerceCataloggeneratorBucketsize != null) {
            cqCommerceCataloggeneratorBucketsize = Integer.parseInt(valuecqCommerceCataloggeneratorBucketsize);
        } else {
            cqCommerceCataloggeneratorBucketsize = null;
        }
        String valuecqCommerceCataloggeneratorBucketname = request().getQueryString("cq.commerce.cataloggenerator.bucketname");
        String cqCommerceCataloggeneratorBucketname;
        if (valuecqCommerceCataloggeneratorBucketname != null) {
            cqCommerceCataloggeneratorBucketname = valuecqCommerceCataloggeneratorBucketname;
        } else {
            cqCommerceCataloggeneratorBucketname = null;
        }
        String[] cqCommerceCataloggeneratorExcludedtemplatepropertiesArray = request().queryString().get("cq.commerce.cataloggenerator.excludedtemplateproperties");
        List<String> cqCommerceCataloggeneratorExcludedtemplatepropertiesList = OpenAPIUtils.parametersToList("multi", cqCommerceCataloggeneratorExcludedtemplatepropertiesArray);
        List<String> cqCommerceCataloggeneratorExcludedtemplateproperties = new ArrayList<String>();
        for (String curParam : cqCommerceCataloggeneratorExcludedtemplatepropertiesList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                cqCommerceCataloggeneratorExcludedtemplateproperties.add(curParam);
            }
        }
        ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplInfo obj = imp.comAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImpl(post, apply, delete, action, $location, propertylist, cqCommerceCataloggeneratorBucketsize, cqCommerceCataloggeneratorBucketname, cqCommerceCataloggeneratorExcludedtemplateproperties);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqCommercePimImplPageEventListener() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuecqCommercePageeventlistenerEnabled = request().getQueryString("cq.commerce.pageeventlistener.enabled");
        Boolean cqCommercePageeventlistenerEnabled;
        if (valuecqCommercePageeventlistenerEnabled != null) {
            cqCommercePageeventlistenerEnabled = Boolean.valueOf(valuecqCommercePageeventlistenerEnabled);
        } else {
            cqCommercePageeventlistenerEnabled = null;
        }
        ComAdobeCqCommercePimImplPageEventListenerInfo obj = imp.comAdobeCqCommercePimImplPageEventListener(post, apply, delete, action, $location, propertylist, cqCommercePageeventlistenerEnabled);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqCommercePimImplProductfeedProductFeedServiceImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuefeedGeneratorAlgorithm = request().getQueryString("Feed generator algorithm");
        String feedGeneratorAlgorithm;
        if (valuefeedGeneratorAlgorithm != null) {
            feedGeneratorAlgorithm = valuefeedGeneratorAlgorithm;
        } else {
            feedGeneratorAlgorithm = null;
        }
        ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplInfo obj = imp.comAdobeCqCommercePimImplProductfeedProductFeedServiceImpl(post, apply, delete, action, $location, propertylist, feedGeneratorAlgorithm);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqContentinsightImplReportingServicesSettingsProvider() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuereportingservicesUrl = request().getQueryString("reportingservices.url");
        String reportingservicesUrl;
        if (valuereportingservicesUrl != null) {
            reportingservicesUrl = valuereportingservicesUrl;
        } else {
            reportingservicesUrl = null;
        }
        ComAdobeCqContentinsightImplReportingServicesSettingsProviderInfo obj = imp.comAdobeCqContentinsightImplReportingServicesSettingsProvider(post, apply, delete, action, $location, propertylist, reportingservicesUrl);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqContentinsightImplServletsBrightEdgeProxyServlet() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuebrightedgeUrl = request().getQueryString("brightedge.url");
        String brightedgeUrl;
        if (valuebrightedgeUrl != null) {
            brightedgeUrl = valuebrightedgeUrl;
        } else {
            brightedgeUrl = null;
        }
        ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletInfo obj = imp.comAdobeCqContentinsightImplServletsBrightEdgeProxyServlet(post, apply, delete, action, $location, propertylist, brightedgeUrl);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqContentinsightImplServletsReportingServicesProxyServle() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] reportingservicesProxyWhitelistArray = request().queryString().get("reportingservices.proxy.whitelist");
        List<String> reportingservicesProxyWhitelistList = OpenAPIUtils.parametersToList("multi", reportingservicesProxyWhitelistArray);
        List<String> reportingservicesProxyWhitelist = new ArrayList<String>();
        for (String curParam : reportingservicesProxyWhitelistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                reportingservicesProxyWhitelist.add(curParam);
            }
        }
        ComAdobeCqContentinsightImplServletsReportingServicesProxyServleInfo obj = imp.comAdobeCqContentinsightImplServletsReportingServicesProxyServle(post, apply, delete, action, $location, propertylist, reportingservicesProxyWhitelist);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqDamCfmImplComponentComponentConfigImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuedamCfmComponentResourceType = request().getQueryString("dam.cfm.component.resourceType");
        String damCfmComponentResourceType;
        if (valuedamCfmComponentResourceType != null) {
            damCfmComponentResourceType = valuedamCfmComponentResourceType;
        } else {
            damCfmComponentResourceType = null;
        }
        String valuedamCfmComponentFileReferenceProp = request().getQueryString("dam.cfm.component.fileReferenceProp");
        String damCfmComponentFileReferenceProp;
        if (valuedamCfmComponentFileReferenceProp != null) {
            damCfmComponentFileReferenceProp = valuedamCfmComponentFileReferenceProp;
        } else {
            damCfmComponentFileReferenceProp = null;
        }
        String valuedamCfmComponentElementsProp = request().getQueryString("dam.cfm.component.elementsProp");
        String damCfmComponentElementsProp;
        if (valuedamCfmComponentElementsProp != null) {
            damCfmComponentElementsProp = valuedamCfmComponentElementsProp;
        } else {
            damCfmComponentElementsProp = null;
        }
        String valuedamCfmComponentVariationProp = request().getQueryString("dam.cfm.component.variationProp");
        String damCfmComponentVariationProp;
        if (valuedamCfmComponentVariationProp != null) {
            damCfmComponentVariationProp = valuedamCfmComponentVariationProp;
        } else {
            damCfmComponentVariationProp = null;
        }
        ComAdobeCqDamCfmImplComponentComponentConfigImplInfo obj = imp.comAdobeCqDamCfmImplComponentComponentConfigImpl(post, apply, delete, action, $location, propertylist, damCfmComponentResourceType, damCfmComponentFileReferenceProp, damCfmComponentElementsProp, damCfmComponentVariationProp);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqDamCfmImplConfFeatureConfigImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] damCfmResourceTypesArray = request().queryString().get("dam.cfm.resourceTypes");
        List<String> damCfmResourceTypesList = OpenAPIUtils.parametersToList("multi", damCfmResourceTypesArray);
        List<String> damCfmResourceTypes = new ArrayList<String>();
        for (String curParam : damCfmResourceTypesList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                damCfmResourceTypes.add(curParam);
            }
        }
        String[] damCfmReferencePropertiesArray = request().queryString().get("dam.cfm.referenceProperties");
        List<String> damCfmReferencePropertiesList = OpenAPIUtils.parametersToList("multi", damCfmReferencePropertiesArray);
        List<String> damCfmReferenceProperties = new ArrayList<String>();
        for (String curParam : damCfmReferencePropertiesList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                damCfmReferenceProperties.add(curParam);
            }
        }
        ComAdobeCqDamCfmImplConfFeatureConfigImplInfo obj = imp.comAdobeCqDamCfmImplConfFeatureConfigImpl(post, apply, delete, action, $location, propertylist, damCfmResourceTypes, damCfmReferenceProperties);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqDamCfmImplContentRewriterAssetProcessor() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuepipelineType = request().getQueryString("pipeline.type");
        String pipelineType;
        if (valuepipelineType != null) {
            pipelineType = valuepipelineType;
        } else {
            pipelineType = null;
        }
        ComAdobeCqDamCfmImplContentRewriterAssetProcessorInfo obj = imp.comAdobeCqDamCfmImplContentRewriterAssetProcessor(post, apply, delete, action, $location, propertylist, pipelineType);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqDamCfmImplContentRewriterParRangeFilter() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuepipelineType = request().getQueryString("pipeline.type");
        String pipelineType;
        if (valuepipelineType != null) {
            pipelineType = valuepipelineType;
        } else {
            pipelineType = null;
        }
        ComAdobeCqDamCfmImplContentRewriterParRangeFilterInfo obj = imp.comAdobeCqDamCfmImplContentRewriterParRangeFilter(post, apply, delete, action, $location, propertylist, pipelineType);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqDamCfmImplContentRewriterPayloadFilter() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuepipelineType = request().getQueryString("pipeline.type");
        String pipelineType;
        if (valuepipelineType != null) {
            pipelineType = valuepipelineType;
        } else {
            pipelineType = null;
        }
        ComAdobeCqDamCfmImplContentRewriterPayloadFilterInfo obj = imp.comAdobeCqDamCfmImplContentRewriterPayloadFilter(post, apply, delete, action, $location, propertylist, pipelineType);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqDamDmProcessImagePTiffManagerImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuemaxMemory = request().getQueryString("maxMemory");
        Integer maxMemory;
        if (valuemaxMemory != null) {
            maxMemory = Integer.parseInt(valuemaxMemory);
        } else {
            maxMemory = null;
        }
        ComAdobeCqDamDmProcessImagePTiffManagerImplInfo obj = imp.comAdobeCqDamDmProcessImagePTiffManagerImpl(post, apply, delete, action, $location, propertylist, maxMemory);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorker() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuedmreplicateonmodifyEnabled = request().getQueryString("dmreplicateonmodify.enabled");
        Boolean dmreplicateonmodifyEnabled;
        if (valuedmreplicateonmodifyEnabled != null) {
            dmreplicateonmodifyEnabled = Boolean.valueOf(valuedmreplicateonmodifyEnabled);
        } else {
            dmreplicateonmodifyEnabled = null;
        }
        String valuedmreplicateonmodifyForcesyncdeletes = request().getQueryString("dmreplicateonmodify.forcesyncdeletes");
        Boolean dmreplicateonmodifyForcesyncdeletes;
        if (valuedmreplicateonmodifyForcesyncdeletes != null) {
            dmreplicateonmodifyForcesyncdeletes = Boolean.valueOf(valuedmreplicateonmodifyForcesyncdeletes);
        } else {
            dmreplicateonmodifyForcesyncdeletes = null;
        }
        ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerInfo obj = imp.comAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorker(post, apply, delete, action, $location, propertylist, dmreplicateonmodifyEnabled, dmreplicateonmodifyForcesyncdeletes);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqDamMacSyncHelperImplMACSyncClientImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuecomAdobeDamMacSyncClientSoTimeout = request().getQueryString("com.adobe.dam.mac.sync.client.so.timeout");
        Integer comAdobeDamMacSyncClientSoTimeout;
        if (valuecomAdobeDamMacSyncClientSoTimeout != null) {
            comAdobeDamMacSyncClientSoTimeout = Integer.parseInt(valuecomAdobeDamMacSyncClientSoTimeout);
        } else {
            comAdobeDamMacSyncClientSoTimeout = null;
        }
        ComAdobeCqDamMacSyncHelperImplMACSyncClientImplInfo obj = imp.comAdobeCqDamMacSyncHelperImplMACSyncClientImpl(post, apply, delete, action, $location, propertylist, comAdobeDamMacSyncClientSoTimeout);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqDamMacSyncImplDAMSyncServiceImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] comAdobeCqDamMacSyncDamsyncserviceRegisteredPathsArray = request().queryString().get("com.adobe.cq.dam.mac.sync.damsyncservice.registered_paths");
        List<String> comAdobeCqDamMacSyncDamsyncserviceRegisteredPathsList = OpenAPIUtils.parametersToList("multi", comAdobeCqDamMacSyncDamsyncserviceRegisteredPathsArray);
        List<String> comAdobeCqDamMacSyncDamsyncserviceRegisteredPaths = new ArrayList<String>();
        for (String curParam : comAdobeCqDamMacSyncDamsyncserviceRegisteredPathsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                comAdobeCqDamMacSyncDamsyncserviceRegisteredPaths.add(curParam);
            }
        }
        String valuecomAdobeCqDamMacSyncDamsyncserviceSyncRenditions = request().getQueryString("com.adobe.cq.dam.mac.sync.damsyncservice.sync.renditions");
        Boolean comAdobeCqDamMacSyncDamsyncserviceSyncRenditions;
        if (valuecomAdobeCqDamMacSyncDamsyncserviceSyncRenditions != null) {
            comAdobeCqDamMacSyncDamsyncserviceSyncRenditions = Boolean.valueOf(valuecomAdobeCqDamMacSyncDamsyncserviceSyncRenditions);
        } else {
            comAdobeCqDamMacSyncDamsyncserviceSyncRenditions = null;
        }
        String valuecomAdobeCqDamMacSyncDamsyncserviceReplicateThreadWaitMs = request().getQueryString("com.adobe.cq.dam.mac.sync.damsyncservice.replicate.thread.wait.ms");
        Integer comAdobeCqDamMacSyncDamsyncserviceReplicateThreadWaitMs;
        if (valuecomAdobeCqDamMacSyncDamsyncserviceReplicateThreadWaitMs != null) {
            comAdobeCqDamMacSyncDamsyncserviceReplicateThreadWaitMs = Integer.parseInt(valuecomAdobeCqDamMacSyncDamsyncserviceReplicateThreadWaitMs);
        } else {
            comAdobeCqDamMacSyncDamsyncserviceReplicateThreadWaitMs = null;
        }
        String valuecomAdobeCqDamMacSyncDamsyncservicePlatform = request().getQueryString("com.adobe.cq.dam.mac.sync.damsyncservice.platform");
        String comAdobeCqDamMacSyncDamsyncservicePlatform;
        if (valuecomAdobeCqDamMacSyncDamsyncservicePlatform != null) {
            comAdobeCqDamMacSyncDamsyncservicePlatform = valuecomAdobeCqDamMacSyncDamsyncservicePlatform;
        } else {
            comAdobeCqDamMacSyncDamsyncservicePlatform = null;
        }
        ComAdobeCqDamMacSyncImplDAMSyncServiceImplInfo obj = imp.comAdobeCqDamMacSyncImplDAMSyncServiceImpl(post, apply, delete, action, $location, propertylist, comAdobeCqDamMacSyncDamsyncserviceRegisteredPaths, comAdobeCqDamMacSyncDamsyncserviceSyncRenditions, comAdobeCqDamMacSyncDamsyncserviceReplicateThreadWaitMs, comAdobeCqDamMacSyncDamsyncservicePlatform);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqDamProcessorNuiImplNuiAssetProcessor() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuenuiEnabled = request().getQueryString("nuiEnabled");
        Boolean nuiEnabled;
        if (valuenuiEnabled != null) {
            nuiEnabled = Boolean.valueOf(valuenuiEnabled);
        } else {
            nuiEnabled = null;
        }
        String valuenuiServiceUrl = request().getQueryString("nuiServiceUrl");
        String nuiServiceUrl;
        if (valuenuiServiceUrl != null) {
            nuiServiceUrl = valuenuiServiceUrl;
        } else {
            nuiServiceUrl = null;
        }
        String valuenuiApiKey = request().getQueryString("nuiApiKey");
        String nuiApiKey;
        if (valuenuiApiKey != null) {
            nuiApiKey = valuenuiApiKey;
        } else {
            nuiApiKey = null;
        }
        ComAdobeCqDamProcessorNuiImplNuiAssetProcessorInfo obj = imp.comAdobeCqDamProcessorNuiImplNuiAssetProcessor(post, apply, delete, action, $location, propertylist, nuiEnabled, nuiServiceUrl, nuiApiKey);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqDamS7imagingImplIsImageServerComponent() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuetcpPort = request().getQueryString("TcpPort");
        String tcpPort;
        if (valuetcpPort != null) {
            tcpPort = valuetcpPort;
        } else {
            tcpPort = null;
        }
        String valueallowRemoteAccess = request().getQueryString("AllowRemoteAccess");
        Boolean allowRemoteAccess;
        if (valueallowRemoteAccess != null) {
            allowRemoteAccess = Boolean.valueOf(valueallowRemoteAccess);
        } else {
            allowRemoteAccess = null;
        }
        String valuemaxRenderRgnPixels = request().getQueryString("MaxRenderRgnPixels");
        String maxRenderRgnPixels;
        if (valuemaxRenderRgnPixels != null) {
            maxRenderRgnPixels = valuemaxRenderRgnPixels;
        } else {
            maxRenderRgnPixels = null;
        }
        String valuemaxMessageSize = request().getQueryString("MaxMessageSize");
        String maxMessageSize;
        if (valuemaxMessageSize != null) {
            maxMessageSize = valuemaxMessageSize;
        } else {
            maxMessageSize = null;
        }
        String valuerandomAccessUrlTimeout = request().getQueryString("RandomAccessUrlTimeout");
        Integer randomAccessUrlTimeout;
        if (valuerandomAccessUrlTimeout != null) {
            randomAccessUrlTimeout = Integer.parseInt(valuerandomAccessUrlTimeout);
        } else {
            randomAccessUrlTimeout = null;
        }
        String valueworkerThreads = request().getQueryString("WorkerThreads");
        Integer workerThreads;
        if (valueworkerThreads != null) {
            workerThreads = Integer.parseInt(valueworkerThreads);
        } else {
            workerThreads = null;
        }
        ComAdobeCqDamS7imagingImplIsImageServerComponentInfo obj = imp.comAdobeCqDamS7imagingImplIsImageServerComponent(post, apply, delete, action, $location, propertylist, tcpPort, allowRemoteAccess, maxRenderRgnPixels, maxMessageSize, randomAccessUrlTimeout, workerThreads);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqDamS7imagingImplPsPlatformServerServlet() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuecacheEnable = request().getQueryString("cache.enable");
        Boolean cacheEnable;
        if (valuecacheEnable != null) {
            cacheEnable = Boolean.valueOf(valuecacheEnable);
        } else {
            cacheEnable = null;
        }
        String[] cacheRootPathsArray = request().queryString().get("cache.rootPaths");
        List<String> cacheRootPathsList = OpenAPIUtils.parametersToList("multi", cacheRootPathsArray);
        List<String> cacheRootPaths = new ArrayList<String>();
        for (String curParam : cacheRootPathsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                cacheRootPaths.add(curParam);
            }
        }
        String valuecacheMaxSize = request().getQueryString("cache.maxSize");
        Integer cacheMaxSize;
        if (valuecacheMaxSize != null) {
            cacheMaxSize = Integer.parseInt(valuecacheMaxSize);
        } else {
            cacheMaxSize = null;
        }
        String valuecacheMaxEntries = request().getQueryString("cache.maxEntries");
        Integer cacheMaxEntries;
        if (valuecacheMaxEntries != null) {
            cacheMaxEntries = Integer.parseInt(valuecacheMaxEntries);
        } else {
            cacheMaxEntries = null;
        }
        ComAdobeCqDamS7imagingImplPsPlatformServerServletInfo obj = imp.comAdobeCqDamS7imagingImplPsPlatformServerServlet(post, apply, delete, action, $location, propertylist, cacheEnable, cacheRootPaths, cacheMaxSize, cacheMaxEntries);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqDamWebdavImplIoAssetIOHandler() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueserviceRanking = request().getQueryString("service.ranking");
        Integer serviceRanking;
        if (valueserviceRanking != null) {
            serviceRanking = Integer.parseInt(valueserviceRanking);
        } else {
            serviceRanking = null;
        }
        String valuepathPrefix = request().getQueryString("pathPrefix");
        String pathPrefix;
        if (valuepathPrefix != null) {
            pathPrefix = valuepathPrefix;
        } else {
            pathPrefix = null;
        }
        String valuecreateVersion = request().getQueryString("createVersion");
        Boolean createVersion;
        if (valuecreateVersion != null) {
            createVersion = Boolean.valueOf(valuecreateVersion);
        } else {
            createVersion = null;
        }
        ComAdobeCqDamWebdavImplIoAssetIOHandlerInfo obj = imp.comAdobeCqDamWebdavImplIoAssetIOHandler(post, apply, delete, action, $location, propertylist, serviceRanking, pathPrefix, createVersion);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJob() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuecqDamWebdavVersionLinkingEnable = request().getQueryString("cq.dam.webdav.version.linking.enable");
        Boolean cqDamWebdavVersionLinkingEnable;
        if (valuecqDamWebdavVersionLinkingEnable != null) {
            cqDamWebdavVersionLinkingEnable = Boolean.valueOf(valuecqDamWebdavVersionLinkingEnable);
        } else {
            cqDamWebdavVersionLinkingEnable = null;
        }
        String valuecqDamWebdavVersionLinkingSchedulerPeriod = request().getQueryString("cq.dam.webdav.version.linking.scheduler.period");
        Integer cqDamWebdavVersionLinkingSchedulerPeriod;
        if (valuecqDamWebdavVersionLinkingSchedulerPeriod != null) {
            cqDamWebdavVersionLinkingSchedulerPeriod = Integer.parseInt(valuecqDamWebdavVersionLinkingSchedulerPeriod);
        } else {
            cqDamWebdavVersionLinkingSchedulerPeriod = null;
        }
        String valuecqDamWebdavVersionLinkingStagingTimeout = request().getQueryString("cq.dam.webdav.version.linking.staging.timeout");
        Integer cqDamWebdavVersionLinkingStagingTimeout;
        if (valuecqDamWebdavVersionLinkingStagingTimeout != null) {
            cqDamWebdavVersionLinkingStagingTimeout = Integer.parseInt(valuecqDamWebdavVersionLinkingStagingTimeout);
        } else {
            cqDamWebdavVersionLinkingStagingTimeout = null;
        }
        ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobInfo obj = imp.comAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJob(post, apply, delete, action, $location, propertylist, cqDamWebdavVersionLinkingEnable, cqDamWebdavVersionLinkingSchedulerPeriod, cqDamWebdavVersionLinkingStagingTimeout);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqDamWebdavImplIoSpecialFilesHandler() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] comDayCqDamCoreImplIoSpecialFilesHandlerFilepattersArray = request().queryString().get("com.day.cq.dam.core.impl.io.SpecialFilesHandler.filepatters");
        List<String> comDayCqDamCoreImplIoSpecialFilesHandlerFilepattersList = OpenAPIUtils.parametersToList("multi", comDayCqDamCoreImplIoSpecialFilesHandlerFilepattersArray);
        List<String> comDayCqDamCoreImplIoSpecialFilesHandlerFilepatters = new ArrayList<String>();
        for (String curParam : comDayCqDamCoreImplIoSpecialFilesHandlerFilepattersList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                comDayCqDamCoreImplIoSpecialFilesHandlerFilepatters.add(curParam);
            }
        }
        ComAdobeCqDamWebdavImplIoSpecialFilesHandlerInfo obj = imp.comAdobeCqDamWebdavImplIoSpecialFilesHandler(post, apply, delete, action, $location, propertylist, comDayCqDamCoreImplIoSpecialFilesHandlerFilepatters);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqDeserfwImplDeserializationFirewallImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] firewallDeserializationWhitelistArray = request().queryString().get("firewall.deserialization.whitelist");
        List<String> firewallDeserializationWhitelistList = OpenAPIUtils.parametersToList("multi", firewallDeserializationWhitelistArray);
        List<String> firewallDeserializationWhitelist = new ArrayList<String>();
        for (String curParam : firewallDeserializationWhitelistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                firewallDeserializationWhitelist.add(curParam);
            }
        }
        String[] firewallDeserializationBlacklistArray = request().queryString().get("firewall.deserialization.blacklist");
        List<String> firewallDeserializationBlacklistList = OpenAPIUtils.parametersToList("multi", firewallDeserializationBlacklistArray);
        List<String> firewallDeserializationBlacklist = new ArrayList<String>();
        for (String curParam : firewallDeserializationBlacklistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                firewallDeserializationBlacklist.add(curParam);
            }
        }
        String valuefirewallDeserializationDiagnostics = request().getQueryString("firewall.deserialization.diagnostics");
        String firewallDeserializationDiagnostics;
        if (valuefirewallDeserializationDiagnostics != null) {
            firewallDeserializationDiagnostics = valuefirewallDeserializationDiagnostics;
        } else {
            firewallDeserializationDiagnostics = null;
        }
        ComAdobeCqDeserfwImplDeserializationFirewallImplInfo obj = imp.comAdobeCqDeserfwImplDeserializationFirewallImpl(post, apply, delete, action, $location, propertylist, firewallDeserializationWhitelist, firewallDeserializationBlacklist, firewallDeserializationDiagnostics);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqDtmImplServiceDTMWebServiceImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueconnectionTimeout = request().getQueryString("connection.timeout");
        Integer connectionTimeout;
        if (valueconnectionTimeout != null) {
            connectionTimeout = Integer.parseInt(valueconnectionTimeout);
        } else {
            connectionTimeout = null;
        }
        String valuesocketTimeout = request().getQueryString("socket.timeout");
        Integer socketTimeout;
        if (valuesocketTimeout != null) {
            socketTimeout = Integer.parseInt(valuesocketTimeout);
        } else {
            socketTimeout = null;
        }
        ComAdobeCqDtmImplServiceDTMWebServiceImplInfo obj = imp.comAdobeCqDtmImplServiceDTMWebServiceImpl(post, apply, delete, action, $location, propertylist, connectionTimeout, socketTimeout);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqDtmImplServletsDTMDeployHookServlet() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] dtmStagingIpWhitelistArray = request().queryString().get("dtm.staging.ip.whitelist");
        List<String> dtmStagingIpWhitelistList = OpenAPIUtils.parametersToList("multi", dtmStagingIpWhitelistArray);
        List<String> dtmStagingIpWhitelist = new ArrayList<String>();
        for (String curParam : dtmStagingIpWhitelistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                dtmStagingIpWhitelist.add(curParam);
            }
        }
        String[] dtmProductionIpWhitelistArray = request().queryString().get("dtm.production.ip.whitelist");
        List<String> dtmProductionIpWhitelistList = OpenAPIUtils.parametersToList("multi", dtmProductionIpWhitelistArray);
        List<String> dtmProductionIpWhitelist = new ArrayList<String>();
        for (String curParam : dtmProductionIpWhitelistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                dtmProductionIpWhitelist.add(curParam);
            }
        }
        ComAdobeCqDtmImplServletsDTMDeployHookServletInfo obj = imp.comAdobeCqDtmImplServletsDTMDeployHookServlet(post, apply, delete, action, $location, propertylist, dtmStagingIpWhitelist, dtmProductionIpWhitelist);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqDtmReactorImplServiceWebServiceImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueendpointUri = request().getQueryString("endpointUri");
        String endpointUri;
        if (valueendpointUri != null) {
            endpointUri = valueendpointUri;
        } else {
            endpointUri = null;
        }
        String valueconnectionTimeout = request().getQueryString("connectionTimeout");
        Integer connectionTimeout;
        if (valueconnectionTimeout != null) {
            connectionTimeout = Integer.parseInt(valueconnectionTimeout);
        } else {
            connectionTimeout = null;
        }
        String valuesocketTimeout = request().getQueryString("socketTimeout");
        Integer socketTimeout;
        if (valuesocketTimeout != null) {
            socketTimeout = Integer.parseInt(valuesocketTimeout);
        } else {
            socketTimeout = null;
        }
        ComAdobeCqDtmReactorImplServiceWebServiceImplInfo obj = imp.comAdobeCqDtmReactorImplServiceWebServiceImpl(post, apply, delete, action, $location, propertylist, endpointUri, connectionTimeout, socketTimeout);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqExperiencelogImplExperienceLogConfigServlet() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueenabled = request().getQueryString("enabled");
        Boolean enabled;
        if (valueenabled != null) {
            enabled = Boolean.valueOf(valueenabled);
        } else {
            enabled = null;
        }
        String[] disabledForGroupsArray = request().queryString().get("disabledForGroups");
        List<String> disabledForGroupsList = OpenAPIUtils.parametersToList("multi", disabledForGroupsArray);
        List<String> disabledForGroups = new ArrayList<String>();
        for (String curParam : disabledForGroupsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                disabledForGroups.add(curParam);
            }
        }
        ComAdobeCqExperiencelogImplExperienceLogConfigServletInfo obj = imp.comAdobeCqExperiencelogImplExperienceLogConfigServlet(post, apply, delete, action, $location, propertylist, enabled, disabledForGroups);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqHcContentPackagesHealthCheck() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuehcName = request().getQueryString("hc.name");
        String hcName;
        if (valuehcName != null) {
            hcName = valuehcName;
        } else {
            hcName = null;
        }
        String[] hcTagsArray = request().queryString().get("hc.tags");
        List<String> hcTagsList = OpenAPIUtils.parametersToList("multi", hcTagsArray);
        List<String> hcTags = new ArrayList<String>();
        for (String curParam : hcTagsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                hcTags.add(curParam);
            }
        }
        String valuehcMbeanName = request().getQueryString("hc.mbean.name");
        String hcMbeanName;
        if (valuehcMbeanName != null) {
            hcMbeanName = valuehcMbeanName;
        } else {
            hcMbeanName = null;
        }
        String[] packageNamesArray = request().queryString().get("package.names");
        List<String> packageNamesList = OpenAPIUtils.parametersToList("multi", packageNamesArray);
        List<String> packageNames = new ArrayList<String>();
        for (String curParam : packageNamesList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                packageNames.add(curParam);
            }
        }
        ComAdobeCqHcContentPackagesHealthCheckInfo obj = imp.comAdobeCqHcContentPackagesHealthCheck(post, apply, delete, action, $location, propertylist, hcName, hcTags, hcMbeanName, packageNames);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqHistoryImplHistoryRequestFilter() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] historyRequestFilterExcludedSelectorsArray = request().queryString().get("history.requestFilter.excludedSelectors");
        List<String> historyRequestFilterExcludedSelectorsList = OpenAPIUtils.parametersToList("multi", historyRequestFilterExcludedSelectorsArray);
        List<String> historyRequestFilterExcludedSelectors = new ArrayList<String>();
        for (String curParam : historyRequestFilterExcludedSelectorsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                historyRequestFilterExcludedSelectors.add(curParam);
            }
        }
        String[] historyRequestFilterExcludedExtensionsArray = request().queryString().get("history.requestFilter.excludedExtensions");
        List<String> historyRequestFilterExcludedExtensionsList = OpenAPIUtils.parametersToList("multi", historyRequestFilterExcludedExtensionsArray);
        List<String> historyRequestFilterExcludedExtensions = new ArrayList<String>();
        for (String curParam : historyRequestFilterExcludedExtensionsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                historyRequestFilterExcludedExtensions.add(curParam);
            }
        }
        ComAdobeCqHistoryImplHistoryRequestFilterInfo obj = imp.comAdobeCqHistoryImplHistoryRequestFilter(post, apply, delete, action, $location, propertylist, historyRequestFilterExcludedSelectors, historyRequestFilterExcludedExtensions);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqHistoryImplHistoryServiceImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] historyServiceResourceTypesArray = request().queryString().get("history.service.resourceTypes");
        List<String> historyServiceResourceTypesList = OpenAPIUtils.parametersToList("multi", historyServiceResourceTypesArray);
        List<String> historyServiceResourceTypes = new ArrayList<String>();
        for (String curParam : historyServiceResourceTypesList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                historyServiceResourceTypes.add(curParam);
            }
        }
        String[] historyServicePathFilterArray = request().queryString().get("history.service.pathFilter");
        List<String> historyServicePathFilterList = OpenAPIUtils.parametersToList("multi", historyServicePathFilterArray);
        List<String> historyServicePathFilter = new ArrayList<String>();
        for (String curParam : historyServicePathFilterList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                historyServicePathFilter.add(curParam);
            }
        }
        ComAdobeCqHistoryImplHistoryServiceImplInfo obj = imp.comAdobeCqHistoryImplHistoryServiceImpl(post, apply, delete, action, $location, propertylist, historyServiceResourceTypes, historyServicePathFilter);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqInboxImplTypeproviderItemTypeProvider() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] inboxImplTypeproviderRegistrypathsArray = request().queryString().get("inbox.impl.typeprovider.registrypaths");
        List<String> inboxImplTypeproviderRegistrypathsList = OpenAPIUtils.parametersToList("multi", inboxImplTypeproviderRegistrypathsArray);
        List<String> inboxImplTypeproviderRegistrypaths = new ArrayList<String>();
        for (String curParam : inboxImplTypeproviderRegistrypathsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                inboxImplTypeproviderRegistrypaths.add(curParam);
            }
        }
        String[] inboxImplTypeproviderLegacypathsArray = request().queryString().get("inbox.impl.typeprovider.legacypaths");
        List<String> inboxImplTypeproviderLegacypathsList = OpenAPIUtils.parametersToList("multi", inboxImplTypeproviderLegacypathsArray);
        List<String> inboxImplTypeproviderLegacypaths = new ArrayList<String>();
        for (String curParam : inboxImplTypeproviderLegacypathsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                inboxImplTypeproviderLegacypaths.add(curParam);
            }
        }
        String valueinboxImplTypeproviderDefaulturlFailureitem = request().getQueryString("inbox.impl.typeprovider.defaulturl.failureitem");
        String inboxImplTypeproviderDefaulturlFailureitem;
        if (valueinboxImplTypeproviderDefaulturlFailureitem != null) {
            inboxImplTypeproviderDefaulturlFailureitem = valueinboxImplTypeproviderDefaulturlFailureitem;
        } else {
            inboxImplTypeproviderDefaulturlFailureitem = null;
        }
        String valueinboxImplTypeproviderDefaulturlWorkitem = request().getQueryString("inbox.impl.typeprovider.defaulturl.workitem");
        String inboxImplTypeproviderDefaulturlWorkitem;
        if (valueinboxImplTypeproviderDefaulturlWorkitem != null) {
            inboxImplTypeproviderDefaulturlWorkitem = valueinboxImplTypeproviderDefaulturlWorkitem;
        } else {
            inboxImplTypeproviderDefaulturlWorkitem = null;
        }
        String valueinboxImplTypeproviderDefaulturlTask = request().getQueryString("inbox.impl.typeprovider.defaulturl.task");
        String inboxImplTypeproviderDefaulturlTask;
        if (valueinboxImplTypeproviderDefaulturlTask != null) {
            inboxImplTypeproviderDefaulturlTask = valueinboxImplTypeproviderDefaulturlTask;
        } else {
            inboxImplTypeproviderDefaulturlTask = null;
        }
        ComAdobeCqInboxImplTypeproviderItemTypeProviderInfo obj = imp.comAdobeCqInboxImplTypeproviderItemTypeProvider(post, apply, delete, action, $location, propertylist, inboxImplTypeproviderRegistrypaths, inboxImplTypeproviderLegacypaths, inboxImplTypeproviderDefaulturlFailureitem, inboxImplTypeproviderDefaulturlWorkitem, inboxImplTypeproviderDefaulturlTask);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqProjectsImplServletProjectImageServlet() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueimageQuality = request().getQueryString("image.quality");
        String imageQuality;
        if (valueimageQuality != null) {
            imageQuality = valueimageQuality;
        } else {
            imageQuality = null;
        }
        String valueimageSupportedResolutions = request().getQueryString("image.supported.resolutions");
        String imageSupportedResolutions;
        if (valueimageSupportedResolutions != null) {
            imageSupportedResolutions = valueimageSupportedResolutions;
        } else {
            imageSupportedResolutions = null;
        }
        ComAdobeCqProjectsImplServletProjectImageServletInfo obj = imp.comAdobeCqProjectsImplServletProjectImageServlet(post, apply, delete, action, $location, propertylist, imageQuality, imageSupportedResolutions);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqProjectsPurgeScheduler() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuescheduledpurgeName = request().getQueryString("scheduledpurge.name");
        String scheduledpurgeName;
        if (valuescheduledpurgeName != null) {
            scheduledpurgeName = valuescheduledpurgeName;
        } else {
            scheduledpurgeName = null;
        }
        String valuescheduledpurgePurgeActive = request().getQueryString("scheduledpurge.purgeActive");
        Boolean scheduledpurgePurgeActive;
        if (valuescheduledpurgePurgeActive != null) {
            scheduledpurgePurgeActive = Boolean.valueOf(valuescheduledpurgePurgeActive);
        } else {
            scheduledpurgePurgeActive = null;
        }
        String[] scheduledpurgeTemplatesArray = request().queryString().get("scheduledpurge.templates");
        List<String> scheduledpurgeTemplatesList = OpenAPIUtils.parametersToList("multi", scheduledpurgeTemplatesArray);
        List<String> scheduledpurgeTemplates = new ArrayList<String>();
        for (String curParam : scheduledpurgeTemplatesList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                scheduledpurgeTemplates.add(curParam);
            }
        }
        String valuescheduledpurgePurgeGroups = request().getQueryString("scheduledpurge.purgeGroups");
        Boolean scheduledpurgePurgeGroups;
        if (valuescheduledpurgePurgeGroups != null) {
            scheduledpurgePurgeGroups = Boolean.valueOf(valuescheduledpurgePurgeGroups);
        } else {
            scheduledpurgePurgeGroups = null;
        }
        String valuescheduledpurgePurgeAssets = request().getQueryString("scheduledpurge.purgeAssets");
        Boolean scheduledpurgePurgeAssets;
        if (valuescheduledpurgePurgeAssets != null) {
            scheduledpurgePurgeAssets = Boolean.valueOf(valuescheduledpurgePurgeAssets);
        } else {
            scheduledpurgePurgeAssets = null;
        }
        String valuescheduledpurgeTerminateRunningWorkflows = request().getQueryString("scheduledpurge.terminateRunningWorkflows");
        Boolean scheduledpurgeTerminateRunningWorkflows;
        if (valuescheduledpurgeTerminateRunningWorkflows != null) {
            scheduledpurgeTerminateRunningWorkflows = Boolean.valueOf(valuescheduledpurgeTerminateRunningWorkflows);
        } else {
            scheduledpurgeTerminateRunningWorkflows = null;
        }
        String valuescheduledpurgeDaysold = request().getQueryString("scheduledpurge.daysold");
        Integer scheduledpurgeDaysold;
        if (valuescheduledpurgeDaysold != null) {
            scheduledpurgeDaysold = Integer.parseInt(valuescheduledpurgeDaysold);
        } else {
            scheduledpurgeDaysold = null;
        }
        String valuescheduledpurgeSaveThreshold = request().getQueryString("scheduledpurge.saveThreshold");
        Integer scheduledpurgeSaveThreshold;
        if (valuescheduledpurgeSaveThreshold != null) {
            scheduledpurgeSaveThreshold = Integer.parseInt(valuescheduledpurgeSaveThreshold);
        } else {
            scheduledpurgeSaveThreshold = null;
        }
        ComAdobeCqProjectsPurgeSchedulerInfo obj = imp.comAdobeCqProjectsPurgeScheduler(post, apply, delete, action, $location, propertylist, scheduledpurgeName, scheduledpurgePurgeActive, scheduledpurgeTemplates, scheduledpurgePurgeGroups, scheduledpurgePurgeAssets, scheduledpurgeTerminateRunningWorkflows, scheduledpurgeDaysold, scheduledpurgeSaveThreshold);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqScheduledExporterImplScheduledExporterImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] includePathsArray = request().queryString().get("include.paths");
        List<String> includePathsList = OpenAPIUtils.parametersToList("multi", includePathsArray);
        List<String> includePaths = new ArrayList<String>();
        for (String curParam : includePathsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                includePaths.add(curParam);
            }
        }
        String valueexporterUser = request().getQueryString("exporter.user");
        String exporterUser;
        if (valueexporterUser != null) {
            exporterUser = valueexporterUser;
        } else {
            exporterUser = null;
        }
        ComAdobeCqScheduledExporterImplScheduledExporterImplInfo obj = imp.comAdobeCqScheduledExporterImplScheduledExporterImpl(post, apply, delete, action, $location, propertylist, includePaths, exporterUser);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuecomAdobeCqScreensAnalyticsImplUrl = request().getQueryString("com.adobe.cq.screens.analytics.impl.url");
        String comAdobeCqScreensAnalyticsImplUrl;
        if (valuecomAdobeCqScreensAnalyticsImplUrl != null) {
            comAdobeCqScreensAnalyticsImplUrl = valuecomAdobeCqScreensAnalyticsImplUrl;
        } else {
            comAdobeCqScreensAnalyticsImplUrl = null;
        }
        String valuecomAdobeCqScreensAnalyticsImplApikey = request().getQueryString("com.adobe.cq.screens.analytics.impl.apikey");
        String comAdobeCqScreensAnalyticsImplApikey;
        if (valuecomAdobeCqScreensAnalyticsImplApikey != null) {
            comAdobeCqScreensAnalyticsImplApikey = valuecomAdobeCqScreensAnalyticsImplApikey;
        } else {
            comAdobeCqScreensAnalyticsImplApikey = null;
        }
        String valuecomAdobeCqScreensAnalyticsImplProject = request().getQueryString("com.adobe.cq.screens.analytics.impl.project");
        String comAdobeCqScreensAnalyticsImplProject;
        if (valuecomAdobeCqScreensAnalyticsImplProject != null) {
            comAdobeCqScreensAnalyticsImplProject = valuecomAdobeCqScreensAnalyticsImplProject;
        } else {
            comAdobeCqScreensAnalyticsImplProject = null;
        }
        String valuecomAdobeCqScreensAnalyticsImplEnvironment = request().getQueryString("com.adobe.cq.screens.analytics.impl.environment");
        String comAdobeCqScreensAnalyticsImplEnvironment;
        if (valuecomAdobeCqScreensAnalyticsImplEnvironment != null) {
            comAdobeCqScreensAnalyticsImplEnvironment = valuecomAdobeCqScreensAnalyticsImplEnvironment;
        } else {
            comAdobeCqScreensAnalyticsImplEnvironment = null;
        }
        String valuecomAdobeCqScreensAnalyticsImplSendFrequency = request().getQueryString("com.adobe.cq.screens.analytics.impl.sendFrequency");
        Integer comAdobeCqScreensAnalyticsImplSendFrequency;
        if (valuecomAdobeCqScreensAnalyticsImplSendFrequency != null) {
            comAdobeCqScreensAnalyticsImplSendFrequency = Integer.parseInt(valuecomAdobeCqScreensAnalyticsImplSendFrequency);
        } else {
            comAdobeCqScreensAnalyticsImplSendFrequency = null;
        }
        ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplInfo obj = imp.comAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImpl(post, apply, delete, action, $location, propertylist, comAdobeCqScreensAnalyticsImplUrl, comAdobeCqScreensAnalyticsImplApikey, comAdobeCqScreensAnalyticsImplProject, comAdobeCqScreensAnalyticsImplEnvironment, comAdobeCqScreensAnalyticsImplSendFrequency);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqScreensDeviceImplDeviceService() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuecomAdobeAemScreensPlayerPingfrequency = request().getQueryString("com.adobe.aem.screens.player.pingfrequency");
        Integer comAdobeAemScreensPlayerPingfrequency;
        if (valuecomAdobeAemScreensPlayerPingfrequency != null) {
            comAdobeAemScreensPlayerPingfrequency = Integer.parseInt(valuecomAdobeAemScreensPlayerPingfrequency);
        } else {
            comAdobeAemScreensPlayerPingfrequency = null;
        }
        String valuecomAdobeAemScreensDevicePaswordSpecialchars = request().getQueryString("com.adobe.aem.screens.device.pasword.specialchars");
        String comAdobeAemScreensDevicePaswordSpecialchars;
        if (valuecomAdobeAemScreensDevicePaswordSpecialchars != null) {
            comAdobeAemScreensDevicePaswordSpecialchars = valuecomAdobeAemScreensDevicePaswordSpecialchars;
        } else {
            comAdobeAemScreensDevicePaswordSpecialchars = null;
        }
        String valuecomAdobeAemScreensDevicePaswordMinlowercasechars = request().getQueryString("com.adobe.aem.screens.device.pasword.minlowercasechars");
        Integer comAdobeAemScreensDevicePaswordMinlowercasechars;
        if (valuecomAdobeAemScreensDevicePaswordMinlowercasechars != null) {
            comAdobeAemScreensDevicePaswordMinlowercasechars = Integer.parseInt(valuecomAdobeAemScreensDevicePaswordMinlowercasechars);
        } else {
            comAdobeAemScreensDevicePaswordMinlowercasechars = null;
        }
        String valuecomAdobeAemScreensDevicePaswordMinuppercasechars = request().getQueryString("com.adobe.aem.screens.device.pasword.minuppercasechars");
        Integer comAdobeAemScreensDevicePaswordMinuppercasechars;
        if (valuecomAdobeAemScreensDevicePaswordMinuppercasechars != null) {
            comAdobeAemScreensDevicePaswordMinuppercasechars = Integer.parseInt(valuecomAdobeAemScreensDevicePaswordMinuppercasechars);
        } else {
            comAdobeAemScreensDevicePaswordMinuppercasechars = null;
        }
        String valuecomAdobeAemScreensDevicePaswordMinnumberchars = request().getQueryString("com.adobe.aem.screens.device.pasword.minnumberchars");
        Integer comAdobeAemScreensDevicePaswordMinnumberchars;
        if (valuecomAdobeAemScreensDevicePaswordMinnumberchars != null) {
            comAdobeAemScreensDevicePaswordMinnumberchars = Integer.parseInt(valuecomAdobeAemScreensDevicePaswordMinnumberchars);
        } else {
            comAdobeAemScreensDevicePaswordMinnumberchars = null;
        }
        String valuecomAdobeAemScreensDevicePaswordMinspecialchars = request().getQueryString("com.adobe.aem.screens.device.pasword.minspecialchars");
        Integer comAdobeAemScreensDevicePaswordMinspecialchars;
        if (valuecomAdobeAemScreensDevicePaswordMinspecialchars != null) {
            comAdobeAemScreensDevicePaswordMinspecialchars = Integer.parseInt(valuecomAdobeAemScreensDevicePaswordMinspecialchars);
        } else {
            comAdobeAemScreensDevicePaswordMinspecialchars = null;
        }
        String valuecomAdobeAemScreensDevicePaswordMinlength = request().getQueryString("com.adobe.aem.screens.device.pasword.minlength");
        Integer comAdobeAemScreensDevicePaswordMinlength;
        if (valuecomAdobeAemScreensDevicePaswordMinlength != null) {
            comAdobeAemScreensDevicePaswordMinlength = Integer.parseInt(valuecomAdobeAemScreensDevicePaswordMinlength);
        } else {
            comAdobeAemScreensDevicePaswordMinlength = null;
        }
        ComAdobeCqScreensDeviceImplDeviceServiceInfo obj = imp.comAdobeCqScreensDeviceImplDeviceService(post, apply, delete, action, $location, propertylist, comAdobeAemScreensPlayerPingfrequency, comAdobeAemScreensDevicePaswordSpecialchars, comAdobeAemScreensDevicePaswordMinlowercasechars, comAdobeAemScreensDevicePaswordMinuppercasechars, comAdobeAemScreensDevicePaswordMinnumberchars, comAdobeAemScreensDevicePaswordMinspecialchars, comAdobeAemScreensDevicePaswordMinlength);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqScreensDeviceRegistrationImplRegistrationServiceImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuedeviceRegistrationTimeout = request().getQueryString("deviceRegistrationTimeout");
        Integer deviceRegistrationTimeout;
        if (valuedeviceRegistrationTimeout != null) {
            deviceRegistrationTimeout = Integer.parseInt(valuedeviceRegistrationTimeout);
        } else {
            deviceRegistrationTimeout = null;
        }
        ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplInfo obj = imp.comAdobeCqScreensDeviceRegistrationImplRegistrationServiceImpl(post, apply, delete, action, $location, propertylist, deviceRegistrationTimeout);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqScreensImplHandlerChannelsUpdateHandler() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] cqPagesupdatehandlerImageresourcetypesArray = request().queryString().get("cq.pagesupdatehandler.imageresourcetypes");
        List<String> cqPagesupdatehandlerImageresourcetypesList = OpenAPIUtils.parametersToList("multi", cqPagesupdatehandlerImageresourcetypesArray);
        List<String> cqPagesupdatehandlerImageresourcetypes = new ArrayList<String>();
        for (String curParam : cqPagesupdatehandlerImageresourcetypesList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                cqPagesupdatehandlerImageresourcetypes.add(curParam);
            }
        }
        String[] cqPagesupdatehandlerProductresourcetypesArray = request().queryString().get("cq.pagesupdatehandler.productresourcetypes");
        List<String> cqPagesupdatehandlerProductresourcetypesList = OpenAPIUtils.parametersToList("multi", cqPagesupdatehandlerProductresourcetypesArray);
        List<String> cqPagesupdatehandlerProductresourcetypes = new ArrayList<String>();
        for (String curParam : cqPagesupdatehandlerProductresourcetypesList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                cqPagesupdatehandlerProductresourcetypes.add(curParam);
            }
        }
        String[] cqPagesupdatehandlerVideoresourcetypesArray = request().queryString().get("cq.pagesupdatehandler.videoresourcetypes");
        List<String> cqPagesupdatehandlerVideoresourcetypesList = OpenAPIUtils.parametersToList("multi", cqPagesupdatehandlerVideoresourcetypesArray);
        List<String> cqPagesupdatehandlerVideoresourcetypes = new ArrayList<String>();
        for (String curParam : cqPagesupdatehandlerVideoresourcetypesList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                cqPagesupdatehandlerVideoresourcetypes.add(curParam);
            }
        }
        String[] cqPagesupdatehandlerDynamicsequenceresourcetypesArray = request().queryString().get("cq.pagesupdatehandler.dynamicsequenceresourcetypes");
        List<String> cqPagesupdatehandlerDynamicsequenceresourcetypesList = OpenAPIUtils.parametersToList("multi", cqPagesupdatehandlerDynamicsequenceresourcetypesArray);
        List<String> cqPagesupdatehandlerDynamicsequenceresourcetypes = new ArrayList<String>();
        for (String curParam : cqPagesupdatehandlerDynamicsequenceresourcetypesList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                cqPagesupdatehandlerDynamicsequenceresourcetypes.add(curParam);
            }
        }
        String[] cqPagesupdatehandlerPreviewmodepathsArray = request().queryString().get("cq.pagesupdatehandler.previewmodepaths");
        List<String> cqPagesupdatehandlerPreviewmodepathsList = OpenAPIUtils.parametersToList("multi", cqPagesupdatehandlerPreviewmodepathsArray);
        List<String> cqPagesupdatehandlerPreviewmodepaths = new ArrayList<String>();
        for (String curParam : cqPagesupdatehandlerPreviewmodepathsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                cqPagesupdatehandlerPreviewmodepaths.add(curParam);
            }
        }
        ComAdobeCqScreensImplHandlerChannelsUpdateHandlerInfo obj = imp.comAdobeCqScreensImplHandlerChannelsUpdateHandler(post, apply, delete, action, $location, propertylist, cqPagesupdatehandlerImageresourcetypes, cqPagesupdatehandlerProductresourcetypes, cqPagesupdatehandlerVideoresourcetypes, cqPagesupdatehandlerDynamicsequenceresourcetypes, cqPagesupdatehandlerPreviewmodepaths);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJob() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueschedulerExpression = request().getQueryString("scheduler.expression");
        String schedulerExpression;
        if (valueschedulerExpression != null) {
            schedulerExpression = valueschedulerExpression;
        } else {
            schedulerExpression = null;
        }
        ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobInfo obj = imp.comAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJob(post, apply, delete, action, $location, propertylist, schedulerExpression);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqScreensImplRemoteImplDistributedHttpClientImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuecomAdobeAemScreensImplRemoteRequestTimeout = request().getQueryString("com.adobe.aem.screens.impl.remote.request_timeout");
        Integer comAdobeAemScreensImplRemoteRequestTimeout;
        if (valuecomAdobeAemScreensImplRemoteRequestTimeout != null) {
            comAdobeAemScreensImplRemoteRequestTimeout = Integer.parseInt(valuecomAdobeAemScreensImplRemoteRequestTimeout);
        } else {
            comAdobeAemScreensImplRemoteRequestTimeout = null;
        }
        ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplInfo obj = imp.comAdobeCqScreensImplRemoteImplDistributedHttpClientImpl(post, apply, delete, action, $location, propertylist, comAdobeAemScreensImplRemoteRequestTimeout);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqScreensImplScreensChannelPostProcessor() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] screensChannelsPropertiesToRemoveArray = request().queryString().get("screens.channels.properties.to.remove");
        List<String> screensChannelsPropertiesToRemoveList = OpenAPIUtils.parametersToList("multi", screensChannelsPropertiesToRemoveArray);
        List<String> screensChannelsPropertiesToRemove = new ArrayList<String>();
        for (String curParam : screensChannelsPropertiesToRemoveList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                screensChannelsPropertiesToRemove.add(curParam);
            }
        }
        ComAdobeCqScreensImplScreensChannelPostProcessorInfo obj = imp.comAdobeCqScreensImplScreensChannelPostProcessor(post, apply, delete, action, $location, propertylist, screensChannelsPropertiesToRemove);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqScreensMonitoringImplScreensMonitoringServiceImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProjectPathArray = request().queryString().get("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.projectPath");
        List<String> comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProjectPathList = OpenAPIUtils.parametersToList("multi", comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProjectPathArray);
        List<String> comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProjectPath = new ArrayList<String>();
        for (String curParam : comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProjectPathList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProjectPath.add(curParam);
            }
        }
        String valuecomAdobeCqScreensMonitoringImplScreensMonitoringServiceImplScheduleFrequency = request().getQueryString("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.scheduleFrequency");
        String comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplScheduleFrequency;
        if (valuecomAdobeCqScreensMonitoringImplScreensMonitoringServiceImplScheduleFrequency != null) {
            comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplScheduleFrequency = valuecomAdobeCqScreensMonitoringImplScreensMonitoringServiceImplScheduleFrequency;
        } else {
            comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplScheduleFrequency = null;
        }
        String valuecomAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPingTimeout = request().getQueryString("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.pingTimeout");
        Integer comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPingTimeout;
        if (valuecomAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPingTimeout != null) {
            comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPingTimeout = Integer.parseInt(valuecomAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPingTimeout);
        } else {
            comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPingTimeout = null;
        }
        String valuecomAdobeCqScreensMonitoringImplScreensMonitoringServiceImplRecipients = request().getQueryString("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.recipients");
        String comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplRecipients;
        if (valuecomAdobeCqScreensMonitoringImplScreensMonitoringServiceImplRecipients != null) {
            comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplRecipients = valuecomAdobeCqScreensMonitoringImplScreensMonitoringServiceImplRecipients;
        } else {
            comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplRecipients = null;
        }
        String valuecomAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpserver = request().getQueryString("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.smtpserver");
        String comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpserver;
        if (valuecomAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpserver != null) {
            comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpserver = valuecomAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpserver;
        } else {
            comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpserver = null;
        }
        String valuecomAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpport = request().getQueryString("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.smtpport");
        Integer comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpport;
        if (valuecomAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpport != null) {
            comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpport = Integer.parseInt(valuecomAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpport);
        } else {
            comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpport = null;
        }
        String valuecomAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsetls = request().getQueryString("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.usetls");
        Boolean comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsetls;
        if (valuecomAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsetls != null) {
            comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsetls = Boolean.valueOf(valuecomAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsetls);
        } else {
            comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsetls = null;
        }
        String valuecomAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsername = request().getQueryString("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.username");
        String comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsername;
        if (valuecomAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsername != null) {
            comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsername = valuecomAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsername;
        } else {
            comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsername = null;
        }
        String valuecomAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPassword = request().getQueryString("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.password");
        String comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPassword;
        if (valuecomAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPassword != null) {
            comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPassword = valuecomAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPassword;
        } else {
            comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPassword = null;
        }
        ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplInfo obj = imp.comAdobeCqScreensMonitoringImplScreensMonitoringServiceImpl(post, apply, delete, action, $location, propertylist, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProjectPath, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplScheduleFrequency, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPingTimeout, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplRecipients, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpserver, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpport, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsetls, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsername, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPassword);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqScreensMqActivemqImplArtemisJMSProvider() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueserviceRanking = request().getQueryString("service.ranking");
        Integer serviceRanking;
        if (valueserviceRanking != null) {
            serviceRanking = Integer.parseInt(valueserviceRanking);
        } else {
            serviceRanking = null;
        }
        String valueglobalSize = request().getQueryString("global.size");
        Integer globalSize;
        if (valueglobalSize != null) {
            globalSize = Integer.parseInt(valueglobalSize);
        } else {
            globalSize = null;
        }
        String valuemaxDiskUsage = request().getQueryString("max.disk.usage");
        Integer maxDiskUsage;
        if (valuemaxDiskUsage != null) {
            maxDiskUsage = Integer.parseInt(valuemaxDiskUsage);
        } else {
            maxDiskUsage = null;
        }
        String valuepersistenceEnabled = request().getQueryString("persistence.enabled");
        Boolean persistenceEnabled;
        if (valuepersistenceEnabled != null) {
            persistenceEnabled = Boolean.valueOf(valuepersistenceEnabled);
        } else {
            persistenceEnabled = null;
        }
        String valuethreadPoolMaxSize = request().getQueryString("thread.pool.max.size");
        Integer threadPoolMaxSize;
        if (valuethreadPoolMaxSize != null) {
            threadPoolMaxSize = Integer.parseInt(valuethreadPoolMaxSize);
        } else {
            threadPoolMaxSize = null;
        }
        String valuescheduledThreadPoolMaxSize = request().getQueryString("scheduled.thread.pool.max.size");
        Integer scheduledThreadPoolMaxSize;
        if (valuescheduledThreadPoolMaxSize != null) {
            scheduledThreadPoolMaxSize = Integer.parseInt(valuescheduledThreadPoolMaxSize);
        } else {
            scheduledThreadPoolMaxSize = null;
        }
        String valuegracefulShutdownTimeout = request().getQueryString("graceful.shutdown.timeout");
        Integer gracefulShutdownTimeout;
        if (valuegracefulShutdownTimeout != null) {
            gracefulShutdownTimeout = Integer.parseInt(valuegracefulShutdownTimeout);
        } else {
            gracefulShutdownTimeout = null;
        }
        String[] queuesArray = request().queryString().get("queues");
        List<String> queuesList = OpenAPIUtils.parametersToList("multi", queuesArray);
        List<String> queues = new ArrayList<String>();
        for (String curParam : queuesList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                queues.add(curParam);
            }
        }
        String[] topicsArray = request().queryString().get("topics");
        List<String> topicsList = OpenAPIUtils.parametersToList("multi", topicsArray);
        List<String> topics = new ArrayList<String>();
        for (String curParam : topicsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                topics.add(curParam);
            }
        }
        String valueaddressesMaxDeliveryAttempts = request().getQueryString("addresses.max.delivery.attempts");
        Integer addressesMaxDeliveryAttempts;
        if (valueaddressesMaxDeliveryAttempts != null) {
            addressesMaxDeliveryAttempts = Integer.parseInt(valueaddressesMaxDeliveryAttempts);
        } else {
            addressesMaxDeliveryAttempts = null;
        }
        String valueaddressesExpiryDelay = request().getQueryString("addresses.expiry.delay");
        Integer addressesExpiryDelay;
        if (valueaddressesExpiryDelay != null) {
            addressesExpiryDelay = Integer.parseInt(valueaddressesExpiryDelay);
        } else {
            addressesExpiryDelay = null;
        }
        String valueaddressesAddressFullMessagePolicy = request().getQueryString("addresses.address.full.message.policy");
        String addressesAddressFullMessagePolicy;
        if (valueaddressesAddressFullMessagePolicy != null) {
            addressesAddressFullMessagePolicy = valueaddressesAddressFullMessagePolicy;
        } else {
            addressesAddressFullMessagePolicy = null;
        }
        String valueaddressesMaxSizeBytes = request().getQueryString("addresses.max.size.bytes");
        Integer addressesMaxSizeBytes;
        if (valueaddressesMaxSizeBytes != null) {
            addressesMaxSizeBytes = Integer.parseInt(valueaddressesMaxSizeBytes);
        } else {
            addressesMaxSizeBytes = null;
        }
        String valueaddressesPageSizeBytes = request().getQueryString("addresses.page.size.bytes");
        Integer addressesPageSizeBytes;
        if (valueaddressesPageSizeBytes != null) {
            addressesPageSizeBytes = Integer.parseInt(valueaddressesPageSizeBytes);
        } else {
            addressesPageSizeBytes = null;
        }
        String valueaddressesPageCacheMaxSize = request().getQueryString("addresses.page.cache.max.size");
        Integer addressesPageCacheMaxSize;
        if (valueaddressesPageCacheMaxSize != null) {
            addressesPageCacheMaxSize = Integer.parseInt(valueaddressesPageCacheMaxSize);
        } else {
            addressesPageCacheMaxSize = null;
        }
        String valueclusterUser = request().getQueryString("cluster.user");
        String clusterUser;
        if (valueclusterUser != null) {
            clusterUser = valueclusterUser;
        } else {
            clusterUser = null;
        }
        String valueclusterPassword = request().getQueryString("cluster.password");
        String clusterPassword;
        if (valueclusterPassword != null) {
            clusterPassword = valueclusterPassword;
        } else {
            clusterPassword = null;
        }
        String valueclusterCallTimeout = request().getQueryString("cluster.call.timeout");
        Integer clusterCallTimeout;
        if (valueclusterCallTimeout != null) {
            clusterCallTimeout = Integer.parseInt(valueclusterCallTimeout);
        } else {
            clusterCallTimeout = null;
        }
        String valueclusterCallFailoverTimeout = request().getQueryString("cluster.call.failover.timeout");
        Integer clusterCallFailoverTimeout;
        if (valueclusterCallFailoverTimeout != null) {
            clusterCallFailoverTimeout = Integer.parseInt(valueclusterCallFailoverTimeout);
        } else {
            clusterCallFailoverTimeout = null;
        }
        String valueclusterClientFailureCheckPeriod = request().getQueryString("cluster.client.failure.check.period");
        Integer clusterClientFailureCheckPeriod;
        if (valueclusterClientFailureCheckPeriod != null) {
            clusterClientFailureCheckPeriod = Integer.parseInt(valueclusterClientFailureCheckPeriod);
        } else {
            clusterClientFailureCheckPeriod = null;
        }
        String valueclusterNotificationAttempts = request().getQueryString("cluster.notification.attempts");
        Integer clusterNotificationAttempts;
        if (valueclusterNotificationAttempts != null) {
            clusterNotificationAttempts = Integer.parseInt(valueclusterNotificationAttempts);
        } else {
            clusterNotificationAttempts = null;
        }
        String valueclusterNotificationInterval = request().getQueryString("cluster.notification.interval");
        Integer clusterNotificationInterval;
        if (valueclusterNotificationInterval != null) {
            clusterNotificationInterval = Integer.parseInt(valueclusterNotificationInterval);
        } else {
            clusterNotificationInterval = null;
        }
        String valueidCacheSize = request().getQueryString("id.cache.size");
        Integer idCacheSize;
        if (valueidCacheSize != null) {
            idCacheSize = Integer.parseInt(valueidCacheSize);
        } else {
            idCacheSize = null;
        }
        String valueclusterConfirmationWindowSize = request().getQueryString("cluster.confirmation.window.size");
        Integer clusterConfirmationWindowSize;
        if (valueclusterConfirmationWindowSize != null) {
            clusterConfirmationWindowSize = Integer.parseInt(valueclusterConfirmationWindowSize);
        } else {
            clusterConfirmationWindowSize = null;
        }
        String valueclusterConnectionTtl = request().getQueryString("cluster.connection.ttl");
        Integer clusterConnectionTtl;
        if (valueclusterConnectionTtl != null) {
            clusterConnectionTtl = Integer.parseInt(valueclusterConnectionTtl);
        } else {
            clusterConnectionTtl = null;
        }
        String valueclusterDuplicateDetection = request().getQueryString("cluster.duplicate.detection");
        Boolean clusterDuplicateDetection;
        if (valueclusterDuplicateDetection != null) {
            clusterDuplicateDetection = Boolean.valueOf(valueclusterDuplicateDetection);
        } else {
            clusterDuplicateDetection = null;
        }
        String valueclusterInitialConnectAttempts = request().getQueryString("cluster.initial.connect.attempts");
        Integer clusterInitialConnectAttempts;
        if (valueclusterInitialConnectAttempts != null) {
            clusterInitialConnectAttempts = Integer.parseInt(valueclusterInitialConnectAttempts);
        } else {
            clusterInitialConnectAttempts = null;
        }
        String valueclusterMaxRetryInterval = request().getQueryString("cluster.max.retry.interval");
        Integer clusterMaxRetryInterval;
        if (valueclusterMaxRetryInterval != null) {
            clusterMaxRetryInterval = Integer.parseInt(valueclusterMaxRetryInterval);
        } else {
            clusterMaxRetryInterval = null;
        }
        String valueclusterMinLargeMessageSize = request().getQueryString("cluster.min.large.message.size");
        Integer clusterMinLargeMessageSize;
        if (valueclusterMinLargeMessageSize != null) {
            clusterMinLargeMessageSize = Integer.parseInt(valueclusterMinLargeMessageSize);
        } else {
            clusterMinLargeMessageSize = null;
        }
        String valueclusterProducerWindowSize = request().getQueryString("cluster.producer.window.size");
        Integer clusterProducerWindowSize;
        if (valueclusterProducerWindowSize != null) {
            clusterProducerWindowSize = Integer.parseInt(valueclusterProducerWindowSize);
        } else {
            clusterProducerWindowSize = null;
        }
        String valueclusterReconnectAttempts = request().getQueryString("cluster.reconnect.attempts");
        Integer clusterReconnectAttempts;
        if (valueclusterReconnectAttempts != null) {
            clusterReconnectAttempts = Integer.parseInt(valueclusterReconnectAttempts);
        } else {
            clusterReconnectAttempts = null;
        }
        String valueclusterRetryInterval = request().getQueryString("cluster.retry.interval");
        Integer clusterRetryInterval;
        if (valueclusterRetryInterval != null) {
            clusterRetryInterval = Integer.parseInt(valueclusterRetryInterval);
        } else {
            clusterRetryInterval = null;
        }
        String valueclusterRetryIntervalMultiplier = request().getQueryString("cluster.retry.interval.multiplier");
        BigDecimal clusterRetryIntervalMultiplier;
        if (valueclusterRetryIntervalMultiplier != null) {
            clusterRetryIntervalMultiplier = Double.parseDouble(valueclusterRetryIntervalMultiplier);
        } else {
            clusterRetryIntervalMultiplier = null;
        }
        ComAdobeCqScreensMqActivemqImplArtemisJMSProviderInfo obj = imp.comAdobeCqScreensMqActivemqImplArtemisJMSProvider(post, apply, delete, action, $location, propertylist, serviceRanking, globalSize, maxDiskUsage, persistenceEnabled, threadPoolMaxSize, scheduledThreadPoolMaxSize, gracefulShutdownTimeout, queues, topics, addressesMaxDeliveryAttempts, addressesExpiryDelay, addressesAddressFullMessagePolicy, addressesMaxSizeBytes, addressesPageSizeBytes, addressesPageCacheMaxSize, clusterUser, clusterPassword, clusterCallTimeout, clusterCallFailoverTimeout, clusterClientFailureCheckPeriod, clusterNotificationAttempts, clusterNotificationInterval, idCacheSize, clusterConfirmationWindowSize, clusterConnectionTtl, clusterDuplicateDetection, clusterInitialConnectAttempts, clusterMaxRetryInterval, clusterMinLargeMessageSize, clusterProducerWindowSize, clusterReconnectAttempts, clusterRetryInterval, clusterRetryIntervalMultiplier);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProjectPathArray = request().queryString().get("com.adobe.cq.screens.offlinecontent.impl.BulkOfflineUpdateServiceImpl.projectPath");
        List<String> comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProjectPathList = OpenAPIUtils.parametersToList("multi", comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProjectPathArray);
        List<String> comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProjectPath = new ArrayList<String>();
        for (String curParam : comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProjectPathList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProjectPath.add(curParam);
            }
        }
        String valuecomAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplScheduleFrequency = request().getQueryString("com.adobe.cq.screens.offlinecontent.impl.BulkOfflineUpdateServiceImpl.scheduleFrequency");
        String comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplScheduleFrequency;
        if (valuecomAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplScheduleFrequency != null) {
            comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplScheduleFrequency = valuecomAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplScheduleFrequency;
        } else {
            comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplScheduleFrequency = null;
        }
        ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplInfo obj = imp.comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImpl(post, apply, delete, action, $location, propertylist, comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProjectPath, comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplScheduleFrequency);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqScreensOfflinecontentImplOfflineContentServiceImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuedisableSmartSync = request().getQueryString("disableSmartSync");
        Boolean disableSmartSync;
        if (valuedisableSmartSync != null) {
            disableSmartSync = Boolean.valueOf(valuedisableSmartSync);
        } else {
            disableSmartSync = null;
        }
        ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplInfo obj = imp.comAdobeCqScreensOfflinecontentImplOfflineContentServiceImpl(post, apply, delete, action, $location, propertylist, disableSmartSync);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqScreensSegmentationImplSegmentationFeatureFlag() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueenableDataTriggeredContent = request().getQueryString("enableDataTriggeredContent");
        Boolean enableDataTriggeredContent;
        if (valueenableDataTriggeredContent != null) {
            enableDataTriggeredContent = Boolean.valueOf(valueenableDataTriggeredContent);
        } else {
            enableDataTriggeredContent = null;
        }
        ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagInfo obj = imp.comAdobeCqScreensSegmentationImplSegmentationFeatureFlag(post, apply, delete, action, $location, propertylist, enableDataTriggeredContent);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthCh() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] hcTagsArray = request().queryString().get("hc.tags");
        List<String> hcTagsList = OpenAPIUtils.parametersToList("multi", hcTagsArray);
        List<String> hcTags = new ArrayList<String>();
        for (String curParam : hcTagsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                hcTags.add(curParam);
            }
        }
        ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChInfo obj = imp.comAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthCh(post, apply, delete, action, $location, propertylist, hcTags);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqSecurityHcBundlesImplWcmFilterHealthCheck() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] hcTagsArray = request().queryString().get("hc.tags");
        List<String> hcTagsList = OpenAPIUtils.parametersToList("multi", hcTagsArray);
        List<String> hcTags = new ArrayList<String>();
        for (String curParam : hcTagsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                hcTags.add(curParam);
            }
        }
        ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckInfo obj = imp.comAdobeCqSecurityHcBundlesImplWcmFilterHealthCheck(post, apply, delete, action, $location, propertylist, hcTags);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheck() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] hcTagsArray = request().queryString().get("hc.tags");
        List<String> hcTagsList = OpenAPIUtils.parametersToList("multi", hcTagsArray);
        List<String> hcTags = new ArrayList<String>();
        for (String curParam : hcTagsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                hcTags.add(curParam);
            }
        }
        String valuedispatcherAddress = request().getQueryString("dispatcher.address");
        String dispatcherAddress;
        if (valuedispatcherAddress != null) {
            dispatcherAddress = valuedispatcherAddress;
        } else {
            dispatcherAddress = null;
        }
        String[] dispatcherFilterAllowedArray = request().queryString().get("dispatcher.filter.allowed");
        List<String> dispatcherFilterAllowedList = OpenAPIUtils.parametersToList("multi", dispatcherFilterAllowedArray);
        List<String> dispatcherFilterAllowed = new ArrayList<String>();
        for (String curParam : dispatcherFilterAllowedList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                dispatcherFilterAllowed.add(curParam);
            }
        }
        String[] dispatcherFilterBlockedArray = request().queryString().get("dispatcher.filter.blocked");
        List<String> dispatcherFilterBlockedList = OpenAPIUtils.parametersToList("multi", dispatcherFilterBlockedArray);
        List<String> dispatcherFilterBlocked = new ArrayList<String>();
        for (String curParam : dispatcherFilterBlockedList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                dispatcherFilterBlocked.add(curParam);
            }
        }
        ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckInfo obj = imp.comAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheck(post, apply, delete, action, $location, propertylist, hcTags, dispatcherAddress, dispatcherFilterAllowed, dispatcherFilterBlocked);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqSecurityHcPackagesImplExampleContentHealthCheck() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] hcTagsArray = request().queryString().get("hc.tags");
        List<String> hcTagsList = OpenAPIUtils.parametersToList("multi", hcTagsArray);
        List<String> hcTags = new ArrayList<String>();
        for (String curParam : hcTagsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                hcTags.add(curParam);
            }
        }
        ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckInfo obj = imp.comAdobeCqSecurityHcPackagesImplExampleContentHealthCheck(post, apply, delete, action, $location, propertylist, hcTags);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqSecurityHcWebserverImplClickjackingHealthCheck() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] hcTagsArray = request().queryString().get("hc.tags");
        List<String> hcTagsList = OpenAPIUtils.parametersToList("multi", hcTagsArray);
        List<String> hcTags = new ArrayList<String>();
        for (String curParam : hcTagsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                hcTags.add(curParam);
            }
        }
        String valuewebserverAddress = request().getQueryString("webserver.address");
        String webserverAddress;
        if (valuewebserverAddress != null) {
            webserverAddress = valuewebserverAddress;
        } else {
            webserverAddress = null;
        }
        ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckInfo obj = imp.comAdobeCqSecurityHcWebserverImplClickjackingHealthCheck(post, apply, delete, action, $location, propertylist, hcTags, webserverAddress);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqSocialAccountverificationImplAccountManagementConfigIm() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueenable = request().getQueryString("enable");
        Boolean enable;
        if (valueenable != null) {
            enable = Boolean.valueOf(valueenable);
        } else {
            enable = null;
        }
        String valuettl1 = request().getQueryString("ttl1");
        Integer ttl1;
        if (valuettl1 != null) {
            ttl1 = Integer.parseInt(valuettl1);
        } else {
            ttl1 = null;
        }
        String valuettl2 = request().getQueryString("ttl2");
        Integer ttl2;
        if (valuettl2 != null) {
            ttl2 = Integer.parseInt(valuettl2);
        } else {
            ttl2 = null;
        }
        ComAdobeCqSocialAccountverificationImplAccountManagementConfigImInfo obj = imp.comAdobeCqSocialAccountverificationImplAccountManagementConfigIm(post, apply, delete, action, $location, propertylist, enable, ttl1, ttl2);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqSocialActivitystreamsClientImplSocialActivityComponen() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuepriority = request().getQueryString("priority");
        Integer priority;
        if (valuepriority != null) {
            priority = Integer.parseInt(valuepriority);
        } else {
            priority = null;
        }
        ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenInfo obj = imp.comAdobeCqSocialActivitystreamsClientImplSocialActivityComponen(post, apply, delete, action, $location, propertylist, priority);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCo() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuepriority = request().getQueryString("priority");
        Integer priority;
        if (valuepriority != null) {
            priority = Integer.parseInt(valuepriority);
        } else {
            priority = null;
        }
        ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoInfo obj = imp.comAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCo(post, apply, delete, action, $location, propertylist, priority);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqSocialActivitystreamsListenerImplEventListenerHandler() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueeventTopics = request().getQueryString("event.topics");
        String eventTopics;
        if (valueeventTopics != null) {
            eventTopics = valueeventTopics;
        } else {
            eventTopics = null;
        }
        String valueeventFilter = request().getQueryString("event.filter");
        String eventFilter;
        if (valueeventFilter != null) {
            eventFilter = valueeventFilter;
        } else {
            eventFilter = null;
        }
        ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerInfo obj = imp.comAdobeCqSocialActivitystreamsListenerImplEventListenerHandler(post, apply, delete, action, $location, propertylist, eventTopics, eventFilter);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqSocialActivitystreamsListenerImplModerationEventExten() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueaccepted = request().getQueryString("accepted");
        Boolean accepted;
        if (valueaccepted != null) {
            accepted = Boolean.valueOf(valueaccepted);
        } else {
            accepted = null;
        }
        String valueranked = request().getQueryString("ranked");
        Integer ranked;
        if (valueranked != null) {
            ranked = Integer.parseInt(valueranked);
        } else {
            ranked = null;
        }
        ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenInfo obj = imp.comAdobeCqSocialActivitystreamsListenerImplModerationEventExten(post, apply, delete, action, $location, propertylist, accepted, ranked);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqSocialActivitystreamsListenerImplRatingEventActivityS() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueranking = request().getQueryString("ranking");
        Integer ranking;
        if (valueranking != null) {
            ranking = Integer.parseInt(valueranking);
        } else {
            ranking = null;
        }
        String valueenable = request().getQueryString("enable");
        Boolean enable;
        if (valueenable != null) {
            enable = Boolean.valueOf(valueenable);
        } else {
            enable = null;
        }
        ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySInfo obj = imp.comAdobeCqSocialActivitystreamsListenerImplRatingEventActivityS(post, apply, delete, action, $location, propertylist, ranking, enable);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqSocialActivitystreamsListenerImplResourceActivityStre() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuestreamPath = request().getQueryString("streamPath");
        String streamPath;
        if (valuestreamPath != null) {
            streamPath = valuestreamPath;
        } else {
            streamPath = null;
        }
        String valuestreamName = request().getQueryString("streamName");
        String streamName;
        if (valuestreamName != null) {
            streamName = valuestreamName;
        } else {
            streamName = null;
        }
        ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreInfo obj = imp.comAdobeCqSocialActivitystreamsListenerImplResourceActivityStre(post, apply, delete, action, $location, propertylist, streamPath, streamName);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsI() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuemaxRetry = request().getQueryString("MaxRetry");
        Integer maxRetry;
        if (valuemaxRetry != null) {
            maxRetry = Integer.parseInt(valuemaxRetry);
        } else {
            maxRetry = null;
        }
        String[] fieldWhitelistArray = request().queryString().get("fieldWhitelist");
        List<String> fieldWhitelistList = OpenAPIUtils.parametersToList("multi", fieldWhitelistArray);
        List<String> fieldWhitelist = new ArrayList<String>();
        for (String curParam : fieldWhitelistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                fieldWhitelist.add(curParam);
            }
        }
        String[] attachmentTypeBlacklistArray = request().queryString().get("attachmentTypeBlacklist");
        List<String> attachmentTypeBlacklistList = OpenAPIUtils.parametersToList("multi", attachmentTypeBlacklistArray);
        List<String> attachmentTypeBlacklist = new ArrayList<String>();
        for (String curParam : attachmentTypeBlacklistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                attachmentTypeBlacklist.add(curParam);
            }
        }
        ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIInfo obj = imp.comAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsI(post, apply, delete, action, $location, propertylist, maxRetry, fieldWhitelist, attachmentTypeBlacklist);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqSocialCalendarClientOperationextensionsEventAttachmen() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueattachmentTypeBlacklist = request().getQueryString("attachmentTypeBlacklist");
        String attachmentTypeBlacklist;
        if (valueattachmentTypeBlacklist != null) {
            attachmentTypeBlacklist = valueattachmentTypeBlacklist;
        } else {
            attachmentTypeBlacklist = null;
        }
        String valueextensionOrder = request().getQueryString("extension.order");
        Integer extensionOrder;
        if (valueextensionOrder != null) {
            extensionOrder = Integer.parseInt(valueextensionOrder);
        } else {
            extensionOrder = null;
        }
        ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenInfo obj = imp.comAdobeCqSocialCalendarClientOperationextensionsEventAttachmen(post, apply, delete, action, $location, propertylist, attachmentTypeBlacklist, extensionOrder);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqSocialCalendarServletsTimeZoneServlet() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuetimezonesExpirytime = request().getQueryString("timezones.expirytime");
        Integer timezonesExpirytime;
        if (valuetimezonesExpirytime != null) {
            timezonesExpirytime = Integer.parseInt(valuetimezonesExpirytime);
        } else {
            timezonesExpirytime = null;
        }
        ComAdobeCqSocialCalendarServletsTimeZoneServletInfo obj = imp.comAdobeCqSocialCalendarServletsTimeZoneServlet(post, apply, delete, action, $location, propertylist, timezonesExpirytime);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEvent() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueranking = request().getQueryString("ranking");
        Integer ranking;
        if (valueranking != null) {
            ranking = Integer.parseInt(valueranking);
        } else {
            ranking = null;
        }
        ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventInfo obj = imp.comAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEvent(post, apply, delete, action, $location, propertylist, ranking);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSe() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] fieldWhitelistArray = request().queryString().get("fieldWhitelist");
        List<String> fieldWhitelistList = OpenAPIUtils.parametersToList("multi", fieldWhitelistArray);
        List<String> fieldWhitelist = new ArrayList<String>();
        for (String curParam : fieldWhitelistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                fieldWhitelist.add(curParam);
            }
        }
        String[] attachmentTypeBlacklistArray = request().queryString().get("attachmentTypeBlacklist");
        List<String> attachmentTypeBlacklistList = OpenAPIUtils.parametersToList("multi", attachmentTypeBlacklistArray);
        List<String> attachmentTypeBlacklist = new ArrayList<String>();
        for (String curParam : attachmentTypeBlacklistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                attachmentTypeBlacklist.add(curParam);
            }
        }
        ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeInfo obj = imp.comAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSe(post, apply, delete, action, $location, propertylist, fieldWhitelist, attachmentTypeBlacklist);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperati() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] fieldWhitelistArray = request().queryString().get("fieldWhitelist");
        List<String> fieldWhitelistList = OpenAPIUtils.parametersToList("multi", fieldWhitelistArray);
        List<String> fieldWhitelist = new ArrayList<String>();
        for (String curParam : fieldWhitelistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                fieldWhitelist.add(curParam);
            }
        }
        String[] attachmentTypeBlacklistArray = request().queryString().get("attachmentTypeBlacklist");
        List<String> attachmentTypeBlacklistList = OpenAPIUtils.parametersToList("multi", attachmentTypeBlacklistArray);
        List<String> attachmentTypeBlacklist = new ArrayList<String>();
        for (String curParam : attachmentTypeBlacklistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                attachmentTypeBlacklist.add(curParam);
            }
        }
        ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiInfo obj = imp.comAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperati(post, apply, delete, action, $location, propertylist, fieldWhitelist, attachmentTypeBlacklist);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialC() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuenumUserLimit = request().getQueryString("numUserLimit");
        Integer numUserLimit;
        if (valuenumUserLimit != null) {
            numUserLimit = Integer.parseInt(valuenumUserLimit);
        } else {
            numUserLimit = null;
        }
        ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCInfo obj = imp.comAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialC(post, apply, delete, action, $location, propertylist, numUserLimit);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPos() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueenableScheduledPostsSearch = request().getQueryString("enableScheduledPostsSearch");
        Boolean enableScheduledPostsSearch;
        if (valueenableScheduledPostsSearch != null) {
            enableScheduledPostsSearch = Boolean.valueOf(valueenableScheduledPostsSearch);
        } else {
            enableScheduledPostsSearch = null;
        }
        String valuenumberOfMinutes = request().getQueryString("numberOfMinutes");
        Integer numberOfMinutes;
        if (valuenumberOfMinutes != null) {
            numberOfMinutes = Integer.parseInt(valuenumberOfMinutes);
        } else {
            numberOfMinutes = null;
        }
        String valuemaxSearchLimit = request().getQueryString("maxSearchLimit");
        Integer maxSearchLimit;
        if (valuemaxSearchLimit != null) {
            maxSearchLimit = Integer.parseInt(valuemaxSearchLimit);
        } else {
            maxSearchLimit = null;
        }
        ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosInfo obj = imp.comAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPos(post, apply, delete, action, $location, propertylist, enableScheduledPostsSearch, numberOfMinutes, maxSearchLimit);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqSocialCommonsCorsCORSAuthenticationFilter() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuecorsEnabling = request().getQueryString("cors.enabling");
        Boolean corsEnabling;
        if (valuecorsEnabling != null) {
            corsEnabling = Boolean.valueOf(valuecorsEnabling);
        } else {
            corsEnabling = null;
        }
        ComAdobeCqSocialCommonsCorsCORSAuthenticationFilterInfo obj = imp.comAdobeCqSocialCommonsCorsCORSAuthenticationFilter(post, apply, delete, action, $location, propertylist, corsEnabling);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProvider() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuepriorityOrder = request().getQueryString("priorityOrder");
        Integer priorityOrder;
        if (valuepriorityOrder != null) {
            priorityOrder = Integer.parseInt(valuepriorityOrder);
        } else {
            priorityOrder = null;
        }
        String[] replyEmailPatternsArray = request().queryString().get("replyEmailPatterns");
        List<String> replyEmailPatternsList = OpenAPIUtils.parametersToList("multi", replyEmailPatternsArray);
        List<String> replyEmailPatterns = new ArrayList<String>();
        for (String curParam : replyEmailPatternsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                replyEmailPatterns.add(curParam);
            }
        }
        ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderInfo obj = imp.comAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProvider(post, apply, delete, action, $location, propertylist, priorityOrder, replyEmailPatterns);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuecontextPath = request().getQueryString("context.path");
        String contextPath;
        if (valuecontextPath != null) {
            contextPath = valuecontextPath;
        } else {
            contextPath = null;
        }
        ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplInfo obj = imp.comAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImpl(post, apply, delete, action, $location, propertylist, contextPath);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListener() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueeventTopics = request().getQueryString("event.topics");
        String eventTopics;
        if (valueeventTopics != null) {
            eventTopics = valueeventTopics;
        } else {
            eventTopics = null;
        }
        ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerInfo obj = imp.comAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListener(post, apply, delete, action, $location, propertylist, eventTopics);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProvider() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuepriorityOrder = request().getQueryString("priorityOrder");
        Integer priorityOrder;
        if (valuepriorityOrder != null) {
            priorityOrder = Integer.parseInt(valuepriorityOrder);
        } else {
            priorityOrder = null;
        }
        String[] replyEmailPatternsArray = request().queryString().get("replyEmailPatterns");
        List<String> replyEmailPatternsList = OpenAPIUtils.parametersToList("multi", replyEmailPatternsArray);
        List<String> replyEmailPatterns = new ArrayList<String>();
        for (String curParam : replyEmailPatternsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                replyEmailPatterns.add(curParam);
            }
        }
        ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderInfo obj = imp.comAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProvider(post, apply, delete, action, $location, propertylist, priorityOrder, replyEmailPatterns);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImp() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuepatternTime = request().getQueryString("pattern.time");
        String patternTime;
        if (valuepatternTime != null) {
            patternTime = valuepatternTime;
        } else {
            patternTime = null;
        }
        String valuepatternNewline = request().getQueryString("pattern.newline");
        String patternNewline;
        if (valuepatternNewline != null) {
            patternNewline = valuepatternNewline;
        } else {
            patternNewline = null;
        }
        String valuepatternDayOfMonth = request().getQueryString("pattern.dayOfMonth");
        String patternDayOfMonth;
        if (valuepatternDayOfMonth != null) {
            patternDayOfMonth = valuepatternDayOfMonth;
        } else {
            patternDayOfMonth = null;
        }
        String valuepatternMonth = request().getQueryString("pattern.month");
        String patternMonth;
        if (valuepatternMonth != null) {
            patternMonth = valuepatternMonth;
        } else {
            patternMonth = null;
        }
        String valuepatternYear = request().getQueryString("pattern.year");
        String patternYear;
        if (valuepatternYear != null) {
            patternYear = valuepatternYear;
        } else {
            patternYear = null;
        }
        String valuepatternDate = request().getQueryString("pattern.date");
        String patternDate;
        if (valuepatternDate != null) {
            patternDate = valuepatternDate;
        } else {
            patternDate = null;
        }
        String valuepatternDateTime = request().getQueryString("pattern.dateTime");
        String patternDateTime;
        if (valuepatternDateTime != null) {
            patternDateTime = valuepatternDateTime;
        } else {
            patternDateTime = null;
        }
        String valuepatternEmail = request().getQueryString("pattern.email");
        String patternEmail;
        if (valuepatternEmail != null) {
            patternEmail = valuepatternEmail;
        } else {
            patternEmail = null;
        }
        ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpInfo obj = imp.comAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImp(post, apply, delete, action, $location, propertylist, patternTime, patternNewline, patternDayOfMonth, patternMonth, patternYear, patternDate, patternDateTime, patternEmail);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImp() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueemailName = request().getQueryString("email.name");
        String emailName;
        if (valueemailName != null) {
            emailName = valueemailName;
        } else {
            emailName = null;
        }
        String valueemailCreatePostFromReply = request().getQueryString("email.createPostFromReply");
        Boolean emailCreatePostFromReply;
        if (valueemailCreatePostFromReply != null) {
            emailCreatePostFromReply = Boolean.valueOf(valueemailCreatePostFromReply);
        } else {
            emailCreatePostFromReply = null;
        }
        String valueemailAddCommentIdTo = request().getQueryString("email.addCommentIdTo");
        String emailAddCommentIdTo;
        if (valueemailAddCommentIdTo != null) {
            emailAddCommentIdTo = valueemailAddCommentIdTo;
        } else {
            emailAddCommentIdTo = null;
        }
        String valueemailSubjectMaximumLength = request().getQueryString("email.subjectMaximumLength");
        Integer emailSubjectMaximumLength;
        if (valueemailSubjectMaximumLength != null) {
            emailSubjectMaximumLength = Integer.parseInt(valueemailSubjectMaximumLength);
        } else {
            emailSubjectMaximumLength = null;
        }
        String valueemailReplyToAddress = request().getQueryString("email.replyToAddress");
        String emailReplyToAddress;
        if (valueemailReplyToAddress != null) {
            emailReplyToAddress = valueemailReplyToAddress;
        } else {
            emailReplyToAddress = null;
        }
        String valueemailReplyToDelimiter = request().getQueryString("email.replyToDelimiter");
        String emailReplyToDelimiter;
        if (valueemailReplyToDelimiter != null) {
            emailReplyToDelimiter = valueemailReplyToDelimiter;
        } else {
            emailReplyToDelimiter = null;
        }
        String valueemailTrackerIdPrefixInSubject = request().getQueryString("email.trackerIdPrefixInSubject");
        String emailTrackerIdPrefixInSubject;
        if (valueemailTrackerIdPrefixInSubject != null) {
            emailTrackerIdPrefixInSubject = valueemailTrackerIdPrefixInSubject;
        } else {
            emailTrackerIdPrefixInSubject = null;
        }
        String valueemailTrackerIdPrefixInBody = request().getQueryString("email.trackerIdPrefixInBody");
        String emailTrackerIdPrefixInBody;
        if (valueemailTrackerIdPrefixInBody != null) {
            emailTrackerIdPrefixInBody = valueemailTrackerIdPrefixInBody;
        } else {
            emailTrackerIdPrefixInBody = null;
        }
        String valueemailAsHTML = request().getQueryString("email.asHTML");
        Boolean emailAsHTML;
        if (valueemailAsHTML != null) {
            emailAsHTML = Boolean.valueOf(valueemailAsHTML);
        } else {
            emailAsHTML = null;
        }
        String valueemailDefaultUserName = request().getQueryString("email.defaultUserName");
        String emailDefaultUserName;
        if (valueemailDefaultUserName != null) {
            emailDefaultUserName = valueemailDefaultUserName;
        } else {
            emailDefaultUserName = null;
        }
        String valueemailTemplatesRootPath = request().getQueryString("email.templates.rootPath");
        String emailTemplatesRootPath;
        if (valueemailTemplatesRootPath != null) {
            emailTemplatesRootPath = valueemailTemplatesRootPath;
        } else {
            emailTemplatesRootPath = null;
        }
        ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpInfo obj = imp.comAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImp(post, apply, delete, action, $location, propertylist, emailName, emailCreatePostFromReply, emailAddCommentIdTo, emailSubjectMaximumLength, emailReplyToAddress, emailReplyToDelimiter, emailTrackerIdPrefixInSubject, emailTrackerIdPrefixInBody, emailAsHTML, emailDefaultUserName, emailTemplatesRootPath);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqSocialCommonsEmailreplyImplEmailReplyImporter() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueconnectProtocol = request().getQueryString("connectProtocol");
        String connectProtocol;
        if (valueconnectProtocol != null) {
            connectProtocol = valueconnectProtocol;
        } else {
            connectProtocol = null;
        }
        ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterInfo obj = imp.comAdobeCqSocialCommonsEmailreplyImplEmailReplyImporter(post, apply, delete, action, $location, propertylist, connectProtocol);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProvider() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuepriorityOrder = request().getQueryString("priorityOrder");
        Integer priorityOrder;
        if (valuepriorityOrder != null) {
            priorityOrder = Integer.parseInt(valuepriorityOrder);
        } else {
            priorityOrder = null;
        }
        String[] replyEmailPatternsArray = request().queryString().get("replyEmailPatterns");
        List<String> replyEmailPatternsList = OpenAPIUtils.parametersToList("multi", replyEmailPatternsArray);
        List<String> replyEmailPatterns = new ArrayList<String>();
        for (String curParam : replyEmailPatternsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                replyEmailPatterns.add(curParam);
            }
        }
        ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderInfo obj = imp.comAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProvider(post, apply, delete, action, $location, propertylist, priorityOrder, replyEmailPatterns);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProvider() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuepriorityOrder = request().getQueryString("priorityOrder");
        Integer priorityOrder;
        if (valuepriorityOrder != null) {
            priorityOrder = Integer.parseInt(valuepriorityOrder);
        } else {
            priorityOrder = null;
        }
        String[] replyEmailPatternsArray = request().queryString().get("replyEmailPatterns");
        List<String> replyEmailPatternsList = OpenAPIUtils.parametersToList("multi", replyEmailPatternsArray);
        List<String> replyEmailPatterns = new ArrayList<String>();
        for (String curParam : replyEmailPatternsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                replyEmailPatterns.add(curParam);
            }
        }
        ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderInfo obj = imp.comAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProvider(post, apply, delete, action, $location, propertylist, priorityOrder, replyEmailPatterns);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProvider() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuepriorityOrder = request().getQueryString("priorityOrder");
        Integer priorityOrder;
        if (valuepriorityOrder != null) {
            priorityOrder = Integer.parseInt(valuepriorityOrder);
        } else {
            priorityOrder = null;
        }
        String[] replyEmailPatternsArray = request().queryString().get("replyEmailPatterns");
        List<String> replyEmailPatternsList = OpenAPIUtils.parametersToList("multi", replyEmailPatternsArray);
        List<String> replyEmailPatterns = new ArrayList<String>();
        for (String curParam : replyEmailPatternsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                replyEmailPatterns.add(curParam);
            }
        }
        ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderInfo obj = imp.comAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProvider(post, apply, delete, action, $location, propertylist, priorityOrder, replyEmailPatterns);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProvider() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuepriorityOrder = request().getQueryString("priorityOrder");
        Integer priorityOrder;
        if (valuepriorityOrder != null) {
            priorityOrder = Integer.parseInt(valuepriorityOrder);
        } else {
            priorityOrder = null;
        }
        String[] replyEmailPatternsArray = request().queryString().get("replyEmailPatterns");
        List<String> replyEmailPatternsList = OpenAPIUtils.parametersToList("multi", replyEmailPatternsArray);
        List<String> replyEmailPatterns = new ArrayList<String>();
        for (String curParam : replyEmailPatternsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                replyEmailPatterns.add(curParam);
            }
        }
        ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderInfo obj = imp.comAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProvider(post, apply, delete, action, $location, propertylist, priorityOrder, replyEmailPatterns);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProvider() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] replyEmailPatternsArray = request().queryString().get("replyEmailPatterns");
        List<String> replyEmailPatternsList = OpenAPIUtils.parametersToList("multi", replyEmailPatternsArray);
        List<String> replyEmailPatterns = new ArrayList<String>();
        for (String curParam : replyEmailPatternsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                replyEmailPatterns.add(curParam);
            }
        }
        String valuepriorityOrder = request().getQueryString("priorityOrder");
        Integer priorityOrder;
        if (valuepriorityOrder != null) {
            priorityOrder = Integer.parseInt(valuepriorityOrder);
        } else {
            priorityOrder = null;
        }
        ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderInfo obj = imp.comAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProvider(post, apply, delete, action, $location, propertylist, replyEmailPatterns, priorityOrder);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProvider() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuepriorityOrder = request().getQueryString("priorityOrder");
        Integer priorityOrder;
        if (valuepriorityOrder != null) {
            priorityOrder = Integer.parseInt(valuepriorityOrder);
        } else {
            priorityOrder = null;
        }
        String[] replyEmailPatternsArray = request().queryString().get("replyEmailPatterns");
        List<String> replyEmailPatternsList = OpenAPIUtils.parametersToList("multi", replyEmailPatternsArray);
        List<String> replyEmailPatterns = new ArrayList<String>();
        for (String curParam : replyEmailPatternsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                replyEmailPatterns.add(curParam);
            }
        }
        ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderInfo obj = imp.comAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProvider(post, apply, delete, action, $location, propertylist, priorityOrder, replyEmailPatterns);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUpload() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuenumberOfDays = request().getQueryString("numberOfDays");
        Integer numberOfDays;
        if (valuenumberOfDays != null) {
            numberOfDays = Integer.parseInt(valuenumberOfDays);
        } else {
            numberOfDays = null;
        }
        String valueageOfFile = request().getQueryString("ageOfFile");
        Integer ageOfFile;
        if (valueageOfFile != null) {
            ageOfFile = Integer.parseInt(valueageOfFile);
        } else {
            ageOfFile = null;
        }
        ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadInfo obj = imp.comAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUpload(post, apply, delete, action, $location, propertylist, numberOfDays, ageOfFile);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueeventTopics = request().getQueryString("event.topics");
        String eventTopics;
        if (valueeventTopics != null) {
            eventTopics = valueeventTopics;
        } else {
            eventTopics = null;
        }
        String valueeventFilter = request().getQueryString("event.filter");
        String eventFilter;
        if (valueeventFilter != null) {
            eventFilter = valueeventFilter;
        } else {
            eventFilter = null;
        }
        String[] verbsArray = request().queryString().get("verbs");
        List<String> verbsList = OpenAPIUtils.parametersToList("multi", verbsArray);
        List<String> verbs = new ArrayList<String>();
        for (String curParam : verbsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                verbs.add(curParam);
            }
        }
        ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplInfo obj = imp.comAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImpl(post, apply, delete, action, $location, propertylist, eventTopics, eventFilter, verbs);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimit() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueenable = request().getQueryString("enable");
        Boolean enable;
        if (valueenable != null) {
            enable = Boolean.valueOf(valueenable);
        } else {
            enable = null;
        }
        String valueugCLimit = request().getQueryString("UGCLimit");
        Integer ugCLimit;
        if (valueugCLimit != null) {
            ugCLimit = Integer.parseInt(valueugCLimit);
        } else {
            ugCLimit = null;
        }
        String valueugcLimitDuration = request().getQueryString("ugcLimitDuration");
        Integer ugcLimitDuration;
        if (valueugcLimitDuration != null) {
            ugcLimitDuration = Integer.parseInt(valueugcLimitDuration);
        } else {
            ugcLimitDuration = null;
        }
        String[] domainsArray = request().queryString().get("domains");
        List<String> domainsList = OpenAPIUtils.parametersToList("multi", domainsArray);
        List<String> domains = new ArrayList<String>();
        for (String curParam : domainsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                domains.add(curParam);
            }
        }
        String[] toListArray = request().queryString().get("toList");
        List<String> toListList = OpenAPIUtils.parametersToList("multi", toListArray);
        List<String> toList = new ArrayList<String>();
        for (String curParam : toListList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                toList.add(curParam);
            }
        }
        ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitInfo obj = imp.comAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimit(post, apply, delete, action, $location, propertylist, enable, ugCLimit, ugcLimitDuration, domains, toList);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqSocialConnectOauthImplFacebookProviderImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueoauthProviderId = request().getQueryString("oauth.provider.id");
        String oauthProviderId;
        if (valueoauthProviderId != null) {
            oauthProviderId = valueoauthProviderId;
        } else {
            oauthProviderId = null;
        }
        String valueoauthCloudConfigRoot = request().getQueryString("oauth.cloud.config.root");
        String oauthCloudConfigRoot;
        if (valueoauthCloudConfigRoot != null) {
            oauthCloudConfigRoot = valueoauthCloudConfigRoot;
        } else {
            oauthCloudConfigRoot = null;
        }
        String valueproviderConfigRoot = request().getQueryString("provider.config.root");
        String providerConfigRoot;
        if (valueproviderConfigRoot != null) {
            providerConfigRoot = valueproviderConfigRoot;
        } else {
            providerConfigRoot = null;
        }
        String valueproviderConfigCreateTagsEnabled = request().getQueryString("provider.config.create.tags.enabled");
        Boolean providerConfigCreateTagsEnabled;
        if (valueproviderConfigCreateTagsEnabled != null) {
            providerConfigCreateTagsEnabled = Boolean.valueOf(valueproviderConfigCreateTagsEnabled);
        } else {
            providerConfigCreateTagsEnabled = null;
        }
        String valueproviderConfigUserFolder = request().getQueryString("provider.config.user.folder");
        String providerConfigUserFolder;
        if (valueproviderConfigUserFolder != null) {
            providerConfigUserFolder = valueproviderConfigUserFolder;
        } else {
            providerConfigUserFolder = null;
        }
        String valueproviderConfigFacebookFetchFields = request().getQueryString("provider.config.facebook.fetch.fields");
        Boolean providerConfigFacebookFetchFields;
        if (valueproviderConfigFacebookFetchFields != null) {
            providerConfigFacebookFetchFields = Boolean.valueOf(valueproviderConfigFacebookFetchFields);
        } else {
            providerConfigFacebookFetchFields = null;
        }
        String[] providerConfigFacebookFieldsArray = request().queryString().get("provider.config.facebook.fields");
        List<String> providerConfigFacebookFieldsList = OpenAPIUtils.parametersToList("multi", providerConfigFacebookFieldsArray);
        List<String> providerConfigFacebookFields = new ArrayList<String>();
        for (String curParam : providerConfigFacebookFieldsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                providerConfigFacebookFields.add(curParam);
            }
        }
        String valueproviderConfigRefreshUserdataEnabled = request().getQueryString("provider.config.refresh.userdata.enabled");
        Boolean providerConfigRefreshUserdataEnabled;
        if (valueproviderConfigRefreshUserdataEnabled != null) {
            providerConfigRefreshUserdataEnabled = Boolean.valueOf(valueproviderConfigRefreshUserdataEnabled);
        } else {
            providerConfigRefreshUserdataEnabled = null;
        }
        ComAdobeCqSocialConnectOauthImplFacebookProviderImplInfo obj = imp.comAdobeCqSocialConnectOauthImplFacebookProviderImpl(post, apply, delete, action, $location, propertylist, oauthProviderId, oauthCloudConfigRoot, providerConfigRoot, providerConfigCreateTagsEnabled, providerConfigUserFolder, providerConfigFacebookFetchFields, providerConfigFacebookFields, providerConfigRefreshUserdataEnabled);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandle() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] pathArray = request().queryString().get("path");
        List<String> pathList = OpenAPIUtils.parametersToList("multi", pathArray);
        List<String> path = new ArrayList<String>();
        for (String curParam : pathList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                path.add(curParam);
            }
        }
        String valueserviceRanking = request().getQueryString("service.ranking");
        Integer serviceRanking;
        if (valueserviceRanking != null) {
            serviceRanking = Integer.parseInt(valueserviceRanking);
        } else {
            serviceRanking = null;
        }
        ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleInfo obj = imp.comAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandle(post, apply, delete, action, $location, propertylist, path, serviceRanking);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapper() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] facebookArray = request().queryString().get("facebook");
        List<String> facebookList = OpenAPIUtils.parametersToList("multi", facebookArray);
        List<String> facebook = new ArrayList<String>();
        for (String curParam : facebookList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                facebook.add(curParam);
            }
        }
        String[] twitterArray = request().queryString().get("twitter");
        List<String> twitterList = OpenAPIUtils.parametersToList("multi", twitterArray);
        List<String> twitter = new ArrayList<String>();
        for (String curParam : twitterList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                twitter.add(curParam);
            }
        }
        String valueproviderConfigUserFolder = request().getQueryString("provider.config.user.folder");
        String providerConfigUserFolder;
        if (valueproviderConfigUserFolder != null) {
            providerConfigUserFolder = valueproviderConfigUserFolder;
        } else {
            providerConfigUserFolder = null;
        }
        ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperInfo obj = imp.comAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapper(post, apply, delete, action, $location, propertylist, facebook, twitter, providerConfigUserFolder);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqSocialConnectOauthImplTwitterProviderImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueoauthProviderId = request().getQueryString("oauth.provider.id");
        String oauthProviderId;
        if (valueoauthProviderId != null) {
            oauthProviderId = valueoauthProviderId;
        } else {
            oauthProviderId = null;
        }
        String valueoauthCloudConfigRoot = request().getQueryString("oauth.cloud.config.root");
        String oauthCloudConfigRoot;
        if (valueoauthCloudConfigRoot != null) {
            oauthCloudConfigRoot = valueoauthCloudConfigRoot;
        } else {
            oauthCloudConfigRoot = null;
        }
        String valueproviderConfigRoot = request().getQueryString("provider.config.root");
        String providerConfigRoot;
        if (valueproviderConfigRoot != null) {
            providerConfigRoot = valueproviderConfigRoot;
        } else {
            providerConfigRoot = null;
        }
        String valueproviderConfigUserFolder = request().getQueryString("provider.config.user.folder");
        String providerConfigUserFolder;
        if (valueproviderConfigUserFolder != null) {
            providerConfigUserFolder = valueproviderConfigUserFolder;
        } else {
            providerConfigUserFolder = null;
        }
        String valueproviderConfigTwitterEnableParams = request().getQueryString("provider.config.twitter.enable.params");
        Boolean providerConfigTwitterEnableParams;
        if (valueproviderConfigTwitterEnableParams != null) {
            providerConfigTwitterEnableParams = Boolean.valueOf(valueproviderConfigTwitterEnableParams);
        } else {
            providerConfigTwitterEnableParams = null;
        }
        String[] providerConfigTwitterParamsArray = request().queryString().get("provider.config.twitter.params");
        List<String> providerConfigTwitterParamsList = OpenAPIUtils.parametersToList("multi", providerConfigTwitterParamsArray);
        List<String> providerConfigTwitterParams = new ArrayList<String>();
        for (String curParam : providerConfigTwitterParamsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                providerConfigTwitterParams.add(curParam);
            }
        }
        String valueproviderConfigRefreshUserdataEnabled = request().getQueryString("provider.config.refresh.userdata.enabled");
        Boolean providerConfigRefreshUserdataEnabled;
        if (valueproviderConfigRefreshUserdataEnabled != null) {
            providerConfigRefreshUserdataEnabled = Boolean.valueOf(valueproviderConfigRefreshUserdataEnabled);
        } else {
            providerConfigRefreshUserdataEnabled = null;
        }
        ComAdobeCqSocialConnectOauthImplTwitterProviderImplInfo obj = imp.comAdobeCqSocialConnectOauthImplTwitterProviderImpl(post, apply, delete, action, $location, propertylist, oauthProviderId, oauthCloudConfigRoot, providerConfigRoot, providerConfigUserFolder, providerConfigTwitterEnableParams, providerConfigTwitterParams, providerConfigRefreshUserdataEnabled);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmen() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuecqSocialContentFragmentsServicesEnabled = request().getQueryString("cq.social.content.fragments.services.enabled");
        Boolean cqSocialContentFragmentsServicesEnabled;
        if (valuecqSocialContentFragmentsServicesEnabled != null) {
            cqSocialContentFragmentsServicesEnabled = Boolean.valueOf(valuecqSocialContentFragmentsServicesEnabled);
        } else {
            cqSocialContentFragmentsServicesEnabled = null;
        }
        String valuecqSocialContentFragmentsServicesWaitTimeSeconds = request().getQueryString("cq.social.content.fragments.services.waitTimeSeconds");
        Integer cqSocialContentFragmentsServicesWaitTimeSeconds;
        if (valuecqSocialContentFragmentsServicesWaitTimeSeconds != null) {
            cqSocialContentFragmentsServicesWaitTimeSeconds = Integer.parseInt(valuecqSocialContentFragmentsServicesWaitTimeSeconds);
        } else {
            cqSocialContentFragmentsServicesWaitTimeSeconds = null;
        }
        ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenInfo obj = imp.comAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmen(post, apply, delete, action, $location, propertylist, cqSocialContentFragmentsServicesEnabled, cqSocialContentFragmentsServicesWaitTimeSeconds);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqSocialDatastoreAsImplASResourceProviderFactory() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueversionId = request().getQueryString("version.id");
        String versionId;
        if (valueversionId != null) {
            versionId = valueversionId;
        } else {
            versionId = null;
        }
        String valuecacheOn = request().getQueryString("cache.on");
        Boolean cacheOn;
        if (valuecacheOn != null) {
            cacheOn = Boolean.valueOf(valuecacheOn);
        } else {
            cacheOn = null;
        }
        String valueconcurrencyLevel = request().getQueryString("concurrency.level");
        Integer concurrencyLevel;
        if (valueconcurrencyLevel != null) {
            concurrencyLevel = Integer.parseInt(valueconcurrencyLevel);
        } else {
            concurrencyLevel = null;
        }
        String valuecacheStartSize = request().getQueryString("cache.start.size");
        Integer cacheStartSize;
        if (valuecacheStartSize != null) {
            cacheStartSize = Integer.parseInt(valuecacheStartSize);
        } else {
            cacheStartSize = null;
        }
        String valuecacheTtl = request().getQueryString("cache.ttl");
        Integer cacheTtl;
        if (valuecacheTtl != null) {
            cacheTtl = Integer.parseInt(valuecacheTtl);
        } else {
            cacheTtl = null;
        }
        String valuecacheSize = request().getQueryString("cache.size");
        Integer cacheSize;
        if (valuecacheSize != null) {
            cacheSize = Integer.parseInt(valuecacheSize);
        } else {
            cacheSize = null;
        }
        String valuetimeLimit = request().getQueryString("time.limit");
        Integer timeLimit;
        if (valuetimeLimit != null) {
            timeLimit = Integer.parseInt(valuetimeLimit);
        } else {
            timeLimit = null;
        }
        ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryInfo obj = imp.comAdobeCqSocialDatastoreAsImplASResourceProviderFactory(post, apply, delete, action, $location, propertylist, versionId, cacheOn, concurrencyLevel, cacheStartSize, cacheTtl, cacheSize, timeLimit);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactory() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuesolrZkTimeout = request().getQueryString("solr.zk.timeout");
        String solrZkTimeout;
        if (valuesolrZkTimeout != null) {
            solrZkTimeout = valuesolrZkTimeout;
        } else {
            solrZkTimeout = null;
        }
        String valuesolrCommit = request().getQueryString("solr.commit");
        String solrCommit;
        if (valuesolrCommit != null) {
            solrCommit = valuesolrCommit;
        } else {
            solrCommit = null;
        }
        String valuecacheOn = request().getQueryString("cache.on");
        Boolean cacheOn;
        if (valuecacheOn != null) {
            cacheOn = Boolean.valueOf(valuecacheOn);
        } else {
            cacheOn = null;
        }
        String valueconcurrencyLevel = request().getQueryString("concurrency.level");
        Integer concurrencyLevel;
        if (valueconcurrencyLevel != null) {
            concurrencyLevel = Integer.parseInt(valueconcurrencyLevel);
        } else {
            concurrencyLevel = null;
        }
        String valuecacheStartSize = request().getQueryString("cache.start.size");
        Integer cacheStartSize;
        if (valuecacheStartSize != null) {
            cacheStartSize = Integer.parseInt(valuecacheStartSize);
        } else {
            cacheStartSize = null;
        }
        String valuecacheTtl = request().getQueryString("cache.ttl");
        Integer cacheTtl;
        if (valuecacheTtl != null) {
            cacheTtl = Integer.parseInt(valuecacheTtl);
        } else {
            cacheTtl = null;
        }
        String valuecacheSize = request().getQueryString("cache.size");
        Integer cacheSize;
        if (valuecacheSize != null) {
            cacheSize = Integer.parseInt(valuecacheSize);
        } else {
            cacheSize = null;
        }
        ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryInfo obj = imp.comAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactory(post, apply, delete, action, $location, propertylist, solrZkTimeout, solrCommit, cacheOn, concurrencyLevel, cacheStartSize, cacheTtl, cacheSize);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactor() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuesolrZkTimeout = request().getQueryString("solr.zk.timeout");
        String solrZkTimeout;
        if (valuesolrZkTimeout != null) {
            solrZkTimeout = valuesolrZkTimeout;
        } else {
            solrZkTimeout = null;
        }
        String valuesolrCommit = request().getQueryString("solr.commit");
        String solrCommit;
        if (valuesolrCommit != null) {
            solrCommit = valuesolrCommit;
        } else {
            solrCommit = null;
        }
        String valuecacheOn = request().getQueryString("cache.on");
        Boolean cacheOn;
        if (valuecacheOn != null) {
            cacheOn = Boolean.valueOf(valuecacheOn);
        } else {
            cacheOn = null;
        }
        String valueconcurrencyLevel = request().getQueryString("concurrency.level");
        Integer concurrencyLevel;
        if (valueconcurrencyLevel != null) {
            concurrencyLevel = Integer.parseInt(valueconcurrencyLevel);
        } else {
            concurrencyLevel = null;
        }
        String valuecacheStartSize = request().getQueryString("cache.start.size");
        Integer cacheStartSize;
        if (valuecacheStartSize != null) {
            cacheStartSize = Integer.parseInt(valuecacheStartSize);
        } else {
            cacheStartSize = null;
        }
        String valuecacheTtl = request().getQueryString("cache.ttl");
        Integer cacheTtl;
        if (valuecacheTtl != null) {
            cacheTtl = Integer.parseInt(valuecacheTtl);
        } else {
            cacheTtl = null;
        }
        String valuecacheSize = request().getQueryString("cache.size");
        Integer cacheSize;
        if (valuecacheSize != null) {
            cacheSize = Integer.parseInt(valuecacheSize);
        } else {
            cacheSize = null;
        }
        ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorInfo obj = imp.comAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactor(post, apply, delete, action, $location, propertylist, solrZkTimeout, solrCommit, cacheOn, concurrencyLevel, cacheStartSize, cacheTtl, cacheSize);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorF() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueisMemberCheck = request().getQueryString("isMemberCheck");
        Boolean isMemberCheck;
        if (valueisMemberCheck != null) {
            isMemberCheck = Boolean.valueOf(valueisMemberCheck);
        } else {
            isMemberCheck = null;
        }
        ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFInfo obj = imp.comAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorF(post, apply, delete, action, $location, propertylist, isMemberCheck);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFacto() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueisMemberCheck = request().getQueryString("isMemberCheck");
        Boolean isMemberCheck;
        if (valueisMemberCheck != null) {
            isMemberCheck = Boolean.valueOf(valueisMemberCheck);
        } else {
            isMemberCheck = null;
        }
        ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoInfo obj = imp.comAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFacto(post, apply, delete, action, $location, propertylist, isMemberCheck);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqSocialEnablementLearningpathEndpointsImplEnablementL() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] fieldWhitelistArray = request().queryString().get("fieldWhitelist");
        List<String> fieldWhitelistList = OpenAPIUtils.parametersToList("multi", fieldWhitelistArray);
        List<String> fieldWhitelist = new ArrayList<String>();
        for (String curParam : fieldWhitelistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                fieldWhitelist.add(curParam);
            }
        }
        ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLInfo obj = imp.comAdobeCqSocialEnablementLearningpathEndpointsImplEnablementL(post, apply, delete, action, $location, propertylist, fieldWhitelist);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqSocialEnablementResourceEndpointsImplEnablementResou() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] fieldWhitelistArray = request().queryString().get("fieldWhitelist");
        List<String> fieldWhitelistList = OpenAPIUtils.parametersToList("multi", fieldWhitelistArray);
        List<String> fieldWhitelist = new ArrayList<String>();
        for (String curParam : fieldWhitelistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                fieldWhitelist.add(curParam);
            }
        }
        ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouInfo obj = imp.comAdobeCqSocialEnablementResourceEndpointsImplEnablementResou(post, apply, delete, action, $location, propertylist, fieldWhitelist);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqSocialEnablementServicesImplAuthorMarkerImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueserviceRanking = request().getQueryString("service.ranking");
        Integer serviceRanking;
        if (valueserviceRanking != null) {
            serviceRanking = Integer.parseInt(valueserviceRanking);
        } else {
            serviceRanking = null;
        }
        ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplInfo obj = imp.comAdobeCqSocialEnablementServicesImplAuthorMarkerImpl(post, apply, delete, action, $location, propertylist, serviceRanking);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGe() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueslingServletSelectors = request().getQueryString("sling.servlet.selectors");
        String slingServletSelectors;
        if (valueslingServletSelectors != null) {
            slingServletSelectors = valueslingServletSelectors;
        } else {
            slingServletSelectors = null;
        }
        String valueslingServletExtensions = request().getQueryString("sling.servlet.extensions");
        String slingServletExtensions;
        if (valueslingServletExtensions != null) {
            slingServletExtensions = valueslingServletExtensions;
        } else {
            slingServletExtensions = null;
        }
        ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeInfo obj = imp.comAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGe(post, apply, delete, action, $location, propertylist, slingServletSelectors, slingServletExtensions);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOpera() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] fieldWhitelistArray = request().queryString().get("fieldWhitelist");
        List<String> fieldWhitelistList = OpenAPIUtils.parametersToList("multi", fieldWhitelistArray);
        List<String> fieldWhitelist = new ArrayList<String>();
        for (String curParam : fieldWhitelistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                fieldWhitelist.add(curParam);
            }
        }
        String[] attachmentTypeBlacklistArray = request().queryString().get("attachmentTypeBlacklist");
        List<String> attachmentTypeBlacklistList = OpenAPIUtils.parametersToList("multi", attachmentTypeBlacklistArray);
        List<String> attachmentTypeBlacklist = new ArrayList<String>();
        for (String curParam : attachmentTypeBlacklistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                attachmentTypeBlacklist.add(curParam);
            }
        }
        ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaInfo obj = imp.comAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOpera(post, apply, delete, action, $location, propertylist, fieldWhitelist, attachmentTypeBlacklist);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqSocialForumClientEndpointsImplForumOperationsService() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] fieldWhitelistArray = request().queryString().get("fieldWhitelist");
        List<String> fieldWhitelistList = OpenAPIUtils.parametersToList("multi", fieldWhitelistArray);
        List<String> fieldWhitelist = new ArrayList<String>();
        for (String curParam : fieldWhitelistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                fieldWhitelist.add(curParam);
            }
        }
        String[] attachmentTypeBlacklistArray = request().queryString().get("attachmentTypeBlacklist");
        List<String> attachmentTypeBlacklistList = OpenAPIUtils.parametersToList("multi", attachmentTypeBlacklistArray);
        List<String> attachmentTypeBlacklist = new ArrayList<String>();
        for (String curParam : attachmentTypeBlacklistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                attachmentTypeBlacklist.add(curParam);
            }
        }
        ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceInfo obj = imp.comAdobeCqSocialForumClientEndpointsImplForumOperationsService(post, apply, delete, action, $location, propertylist, fieldWhitelist, attachmentTypeBlacklist);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqSocialForumDispatcherImplFlushOperations() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueextensionOrder = request().getQueryString("extension.order");
        Integer extensionOrder;
        if (valueextensionOrder != null) {
            extensionOrder = Integer.parseInt(valueextensionOrder);
        } else {
            extensionOrder = null;
        }
        String valueflushForumontopic = request().getQueryString("flush.forumontopic");
        Boolean flushForumontopic;
        if (valueflushForumontopic != null) {
            flushForumontopic = Boolean.valueOf(valueflushForumontopic);
        } else {
            flushForumontopic = null;
        }
        ComAdobeCqSocialForumDispatcherImplFlushOperationsInfo obj = imp.comAdobeCqSocialForumDispatcherImplFlushOperations(post, apply, delete, action, $location, propertylist, extensionOrder, flushForumontopic);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqSocialGroupClientImplCommunityGroupCollectionComponen() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuegroupListingPaginationEnable = request().getQueryString("group.listing.pagination.enable");
        Boolean groupListingPaginationEnable;
        if (valuegroupListingPaginationEnable != null) {
            groupListingPaginationEnable = Boolean.valueOf(valuegroupListingPaginationEnable);
        } else {
            groupListingPaginationEnable = null;
        }
        String valuegroupListingLazyloadingEnable = request().getQueryString("group.listing.lazyloading.enable");
        Boolean groupListingLazyloadingEnable;
        if (valuegroupListingLazyloadingEnable != null) {
            groupListingLazyloadingEnable = Boolean.valueOf(valuegroupListingLazyloadingEnable);
        } else {
            groupListingLazyloadingEnable = null;
        }
        String valuepageSize = request().getQueryString("page.size");
        Integer pageSize;
        if (valuepageSize != null) {
            pageSize = Integer.parseInt(valuepageSize);
        } else {
            pageSize = null;
        }
        String valuepriority = request().getQueryString("priority");
        Integer priority;
        if (valuepriority != null) {
            priority = Integer.parseInt(valuepriority);
        } else {
            priority = null;
        }
        ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenInfo obj = imp.comAdobeCqSocialGroupClientImplCommunityGroupCollectionComponen(post, apply, delete, action, $location, propertylist, groupListingPaginationEnable, groupListingLazyloadingEnable, pageSize, priority);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqSocialGroupImplGroupServiceImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuemaxWaitTime = request().getQueryString("maxWaitTime");
        Integer maxWaitTime;
        if (valuemaxWaitTime != null) {
            maxWaitTime = Integer.parseInt(valuemaxWaitTime);
        } else {
            maxWaitTime = null;
        }
        String valueminWaitBetweenRetries = request().getQueryString("minWaitBetweenRetries");
        Integer minWaitBetweenRetries;
        if (valueminWaitBetweenRetries != null) {
            minWaitBetweenRetries = Integer.parseInt(valueminWaitBetweenRetries);
        } else {
            minWaitBetweenRetries = null;
        }
        ComAdobeCqSocialGroupImplGroupServiceImplInfo obj = imp.comAdobeCqSocialGroupImplGroupServiceImpl(post, apply, delete, action, $location, propertylist, maxWaitTime, minWaitBetweenRetries);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqSocialHandlebarsGuavaTemplateCacheImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueparameterGuavaCacheEnabled = request().getQueryString("parameter.guava.cache.enabled");
        Boolean parameterGuavaCacheEnabled;
        if (valueparameterGuavaCacheEnabled != null) {
            parameterGuavaCacheEnabled = Boolean.valueOf(valueparameterGuavaCacheEnabled);
        } else {
            parameterGuavaCacheEnabled = null;
        }
        String valueparameterGuavaCacheParams = request().getQueryString("parameter.guava.cache.params");
        String parameterGuavaCacheParams;
        if (valueparameterGuavaCacheParams != null) {
            parameterGuavaCacheParams = valueparameterGuavaCacheParams;
        } else {
            parameterGuavaCacheParams = null;
        }
        String valueparameterGuavaCacheReload = request().getQueryString("parameter.guava.cache.reload");
        Boolean parameterGuavaCacheReload;
        if (valueparameterGuavaCacheReload != null) {
            parameterGuavaCacheReload = Boolean.valueOf(valueparameterGuavaCacheReload);
        } else {
            parameterGuavaCacheReload = null;
        }
        String valueserviceRanking = request().getQueryString("service.ranking");
        Integer serviceRanking;
        if (valueserviceRanking != null) {
            serviceRanking = Integer.parseInt(valueserviceRanking);
        } else {
            serviceRanking = null;
        }
        ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplInfo obj = imp.comAdobeCqSocialHandlebarsGuavaTemplateCacheImpl(post, apply, delete, action, $location, propertylist, parameterGuavaCacheEnabled, parameterGuavaCacheParams, parameterGuavaCacheReload, serviceRanking);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsS() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] fieldWhitelistArray = request().queryString().get("fieldWhitelist");
        List<String> fieldWhitelistList = OpenAPIUtils.parametersToList("multi", fieldWhitelistArray);
        List<String> fieldWhitelist = new ArrayList<String>();
        for (String curParam : fieldWhitelistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                fieldWhitelist.add(curParam);
            }
        }
        String[] attachmentTypeBlacklistArray = request().queryString().get("attachmentTypeBlacklist");
        List<String> attachmentTypeBlacklistList = OpenAPIUtils.parametersToList("multi", attachmentTypeBlacklistArray);
        List<String> attachmentTypeBlacklist = new ArrayList<String>();
        for (String curParam : attachmentTypeBlacklistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                attachmentTypeBlacklist.add(curParam);
            }
        }
        ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSInfo obj = imp.comAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsS(post, apply, delete, action, $location, propertylist, fieldWhitelist, attachmentTypeBlacklist);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqSocialJournalClientEndpointsImplJournalOperationsSer() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] fieldWhitelistArray = request().queryString().get("fieldWhitelist");
        List<String> fieldWhitelistList = OpenAPIUtils.parametersToList("multi", fieldWhitelistArray);
        List<String> fieldWhitelist = new ArrayList<String>();
        for (String curParam : fieldWhitelistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                fieldWhitelist.add(curParam);
            }
        }
        String[] attachmentTypeBlacklistArray = request().queryString().get("attachmentTypeBlacklist");
        List<String> attachmentTypeBlacklistList = OpenAPIUtils.parametersToList("multi", attachmentTypeBlacklistArray);
        List<String> attachmentTypeBlacklist = new ArrayList<String>();
        for (String curParam : attachmentTypeBlacklistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                attachmentTypeBlacklist.add(curParam);
            }
        }
        ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerInfo obj = imp.comAdobeCqSocialJournalClientEndpointsImplJournalOperationsSer(post, apply, delete, action, $location, propertylist, fieldWhitelist, attachmentTypeBlacklist);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfile() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] fieldWhitelistArray = request().queryString().get("fieldWhitelist");
        List<String> fieldWhitelistList = OpenAPIUtils.parametersToList("multi", fieldWhitelistArray);
        List<String> fieldWhitelist = new ArrayList<String>();
        for (String curParam : fieldWhitelistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                fieldWhitelist.add(curParam);
            }
        }
        ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileInfo obj = imp.comAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfile(post, apply, delete, action, $location, propertylist, fieldWhitelist);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileO() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] fieldWhitelistArray = request().queryString().get("fieldWhitelist");
        List<String> fieldWhitelistList = OpenAPIUtils.parametersToList("multi", fieldWhitelistArray);
        List<String> fieldWhitelist = new ArrayList<String>();
        for (String curParam : fieldWhitelistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                fieldWhitelist.add(curParam);
            }
        }
        ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOInfo obj = imp.comAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileO(post, apply, delete, action, $location, propertylist, fieldWhitelist);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentF() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueeveryoneLimit = request().getQueryString("everyoneLimit");
        Integer everyoneLimit;
        if (valueeveryoneLimit != null) {
            everyoneLimit = Integer.parseInt(valueeveryoneLimit);
        } else {
            everyoneLimit = null;
        }
        String valuepriority = request().getQueryString("priority");
        Integer priority;
        if (valuepriority != null) {
            priority = Integer.parseInt(valuepriority);
        } else {
            priority = null;
        }
        ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFInfo obj = imp.comAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentF(post, apply, delete, action, $location, propertylist, everyoneLimit, priority);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqSocialMessagingClientEndpointsImplMessagingOperation() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] messagePropertiesArray = request().queryString().get("message.properties");
        List<String> messagePropertiesList = OpenAPIUtils.parametersToList("multi", messagePropertiesArray);
        List<String> messageProperties = new ArrayList<String>();
        for (String curParam : messagePropertiesList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                messageProperties.add(curParam);
            }
        }
        String valuemessageBoxSizeLimit = request().getQueryString("messageBoxSizeLimit");
        Integer messageBoxSizeLimit;
        if (valuemessageBoxSizeLimit != null) {
            messageBoxSizeLimit = Integer.parseInt(valuemessageBoxSizeLimit);
        } else {
            messageBoxSizeLimit = null;
        }
        String valuemessageCountLimit = request().getQueryString("messageCountLimit");
        Integer messageCountLimit;
        if (valuemessageCountLimit != null) {
            messageCountLimit = Integer.parseInt(valuemessageCountLimit);
        } else {
            messageCountLimit = null;
        }
        String valuenotifyFailure = request().getQueryString("notifyFailure");
        Boolean notifyFailure;
        if (valuenotifyFailure != null) {
            notifyFailure = Boolean.valueOf(valuenotifyFailure);
        } else {
            notifyFailure = null;
        }
        String valuefailureMessageFrom = request().getQueryString("failureMessageFrom");
        String failureMessageFrom;
        if (valuefailureMessageFrom != null) {
            failureMessageFrom = valuefailureMessageFrom;
        } else {
            failureMessageFrom = null;
        }
        String valuefailureTemplatePath = request().getQueryString("failureTemplatePath");
        String failureTemplatePath;
        if (valuefailureTemplatePath != null) {
            failureTemplatePath = valuefailureTemplatePath;
        } else {
            failureTemplatePath = null;
        }
        String valuemaxRetries = request().getQueryString("maxRetries");
        Integer maxRetries;
        if (valuemaxRetries != null) {
            maxRetries = Integer.parseInt(valuemaxRetries);
        } else {
            maxRetries = null;
        }
        String valueminWaitBetweenRetries = request().getQueryString("minWaitBetweenRetries");
        Integer minWaitBetweenRetries;
        if (valueminWaitBetweenRetries != null) {
            minWaitBetweenRetries = Integer.parseInt(valueminWaitBetweenRetries);
        } else {
            minWaitBetweenRetries = null;
        }
        String valuecountUpdatePoolSize = request().getQueryString("countUpdatePoolSize");
        Integer countUpdatePoolSize;
        if (valuecountUpdatePoolSize != null) {
            countUpdatePoolSize = Integer.parseInt(valuecountUpdatePoolSize);
        } else {
            countUpdatePoolSize = null;
        }
        String valueinboxPath = request().getQueryString("inbox.path");
        String inboxPath;
        if (valueinboxPath != null) {
            inboxPath = valueinboxPath;
        } else {
            inboxPath = null;
        }
        String valuesentitemsPath = request().getQueryString("sentitems.path");
        String sentitemsPath;
        if (valuesentitemsPath != null) {
            sentitemsPath = valuesentitemsPath;
        } else {
            sentitemsPath = null;
        }
        String valuesupportAttachments = request().getQueryString("supportAttachments");
        Boolean supportAttachments;
        if (valuesupportAttachments != null) {
            supportAttachments = Boolean.valueOf(valuesupportAttachments);
        } else {
            supportAttachments = null;
        }
        String valuesupportGroupMessaging = request().getQueryString("supportGroupMessaging");
        Boolean supportGroupMessaging;
        if (valuesupportGroupMessaging != null) {
            supportGroupMessaging = Boolean.valueOf(valuesupportGroupMessaging);
        } else {
            supportGroupMessaging = null;
        }
        String valuemaxTotalRecipients = request().getQueryString("maxTotalRecipients");
        Integer maxTotalRecipients;
        if (valuemaxTotalRecipients != null) {
            maxTotalRecipients = Integer.parseInt(valuemaxTotalRecipients);
        } else {
            maxTotalRecipients = null;
        }
        String valuebatchSize = request().getQueryString("batchSize");
        Integer batchSize;
        if (valuebatchSize != null) {
            batchSize = Integer.parseInt(valuebatchSize);
        } else {
            batchSize = null;
        }
        String valuemaxTotalAttachmentSize = request().getQueryString("maxTotalAttachmentSize");
        Integer maxTotalAttachmentSize;
        if (valuemaxTotalAttachmentSize != null) {
            maxTotalAttachmentSize = Integer.parseInt(valuemaxTotalAttachmentSize);
        } else {
            maxTotalAttachmentSize = null;
        }
        String[] attachmentTypeBlacklistArray = request().queryString().get("attachmentTypeBlacklist");
        List<String> attachmentTypeBlacklistList = OpenAPIUtils.parametersToList("multi", attachmentTypeBlacklistArray);
        List<String> attachmentTypeBlacklist = new ArrayList<String>();
        for (String curParam : attachmentTypeBlacklistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                attachmentTypeBlacklist.add(curParam);
            }
        }
        String[] allowedAttachmentTypesArray = request().queryString().get("allowedAttachmentTypes");
        List<String> allowedAttachmentTypesList = OpenAPIUtils.parametersToList("multi", allowedAttachmentTypesArray);
        List<String> allowedAttachmentTypes = new ArrayList<String>();
        for (String curParam : allowedAttachmentTypesList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                allowedAttachmentTypes.add(curParam);
            }
        }
        String valueserviceSelector = request().getQueryString("serviceSelector");
        String serviceSelector;
        if (valueserviceSelector != null) {
            serviceSelector = valueserviceSelector;
        } else {
            serviceSelector = null;
        }
        String[] fieldWhitelistArray = request().queryString().get("fieldWhitelist");
        List<String> fieldWhitelistList = OpenAPIUtils.parametersToList("multi", fieldWhitelistArray);
        List<String> fieldWhitelist = new ArrayList<String>();
        for (String curParam : fieldWhitelistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                fieldWhitelist.add(curParam);
            }
        }
        ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationInfo obj = imp.comAdobeCqSocialMessagingClientEndpointsImplMessagingOperation(post, apply, delete, action, $location, propertylist, messageProperties, messageBoxSizeLimit, messageCountLimit, notifyFailure, failureMessageFrom, failureTemplatePath, maxRetries, minWaitBetweenRetries, countUpdatePoolSize, inboxPath, sentitemsPath, supportAttachments, supportGroupMessaging, maxTotalRecipients, batchSize, maxTotalAttachmentSize, attachmentTypeBlacklist, allowedAttachmentTypes, serviceSelector, fieldWhitelist);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqSocialModerationDashboardApiFilterGroupSocialComponen() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] resourceTypeFiltersArray = request().queryString().get("resourceType.filters");
        List<String> resourceTypeFiltersList = OpenAPIUtils.parametersToList("multi", resourceTypeFiltersArray);
        List<String> resourceTypeFilters = new ArrayList<String>();
        for (String curParam : resourceTypeFiltersList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                resourceTypeFilters.add(curParam);
            }
        }
        String valuepriority = request().getQueryString("priority");
        Integer priority;
        if (valuepriority != null) {
            priority = Integer.parseInt(valuepriority);
        } else {
            priority = null;
        }
        ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenInfo obj = imp.comAdobeCqSocialModerationDashboardApiFilterGroupSocialComponen(post, apply, delete, action, $location, propertylist, resourceTypeFilters, priority);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqSocialModerationDashboardApiModerationDashboardSocial() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuepriority = request().getQueryString("priority");
        Integer priority;
        if (valuepriority != null) {
            priority = Integer.parseInt(valuepriority);
        } else {
            priority = null;
        }
        ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialInfo obj = imp.comAdobeCqSocialModerationDashboardApiModerationDashboardSocial(post, apply, delete, action, $location, propertylist, priority);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqSocialModerationDashboardApiUserDetailsSocialComponen() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuepriority = request().getQueryString("priority");
        Integer priority;
        if (valuepriority != null) {
            priority = Integer.parseInt(valuepriority);
        } else {
            priority = null;
        }
        ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenInfo obj = imp.comAdobeCqSocialModerationDashboardApiUserDetailsSocialComponen(post, apply, delete, action, $location, propertylist, priority);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqSocialModerationDashboardInternalImplFilterGroupSoci() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] resourceTypeFiltersArray = request().queryString().get("resourceType.filters");
        List<String> resourceTypeFiltersList = OpenAPIUtils.parametersToList("multi", resourceTypeFiltersArray);
        List<String> resourceTypeFilters = new ArrayList<String>();
        for (String curParam : resourceTypeFiltersList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                resourceTypeFilters.add(curParam);
            }
        }
        String valuepriority = request().getQueryString("priority");
        Integer priority;
        if (valuepriority != null) {
            priority = Integer.parseInt(valuepriority);
        } else {
            priority = null;
        }
        ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociInfo obj = imp.comAdobeCqSocialModerationDashboardInternalImplFilterGroupSoci(post, apply, delete, action, $location, propertylist, resourceTypeFilters, priority);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqSocialNotificationsImplMentionsRouter() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueeventTopics = request().getQueryString("event.topics");
        String eventTopics;
        if (valueeventTopics != null) {
            eventTopics = valueeventTopics;
        } else {
            eventTopics = null;
        }
        String valueeventFilter = request().getQueryString("event.filter");
        String eventFilter;
        if (valueeventFilter != null) {
            eventFilter = valueeventFilter;
        } else {
            eventFilter = null;
        }
        ComAdobeCqSocialNotificationsImplMentionsRouterInfo obj = imp.comAdobeCqSocialNotificationsImplMentionsRouter(post, apply, delete, action, $location, propertylist, eventTopics, eventFilter);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqSocialNotificationsImplNotificationManagerImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuemaxUnreadNotificationCount = request().getQueryString("max.unread.notification.count");
        Integer maxUnreadNotificationCount;
        if (valuemaxUnreadNotificationCount != null) {
            maxUnreadNotificationCount = Integer.parseInt(valuemaxUnreadNotificationCount);
        } else {
            maxUnreadNotificationCount = null;
        }
        ComAdobeCqSocialNotificationsImplNotificationManagerImplInfo obj = imp.comAdobeCqSocialNotificationsImplNotificationManagerImpl(post, apply, delete, action, $location, propertylist, maxUnreadNotificationCount);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqSocialNotificationsImplNotificationsRouter() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueeventTopics = request().getQueryString("event.topics");
        String eventTopics;
        if (valueeventTopics != null) {
            eventTopics = valueeventTopics;
        } else {
            eventTopics = null;
        }
        String valueeventFilter = request().getQueryString("event.filter");
        String eventFilter;
        if (valueeventFilter != null) {
            eventFilter = valueeventFilter;
        } else {
            eventFilter = null;
        }
        ComAdobeCqSocialNotificationsImplNotificationsRouterInfo obj = imp.comAdobeCqSocialNotificationsImplNotificationsRouter(post, apply, delete, action, $location, propertylist, eventTopics, eventFilter);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServic() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] fieldWhitelistArray = request().queryString().get("fieldWhitelist");
        List<String> fieldWhitelistList = OpenAPIUtils.parametersToList("multi", fieldWhitelistArray);
        List<String> fieldWhitelist = new ArrayList<String>();
        for (String curParam : fieldWhitelistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                fieldWhitelist.add(curParam);
            }
        }
        String[] attachmentTypeBlacklistArray = request().queryString().get("attachmentTypeBlacklist");
        List<String> attachmentTypeBlacklistList = OpenAPIUtils.parametersToList("multi", attachmentTypeBlacklistArray);
        List<String> attachmentTypeBlacklist = new ArrayList<String>();
        for (String curParam : attachmentTypeBlacklistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                attachmentTypeBlacklist.add(curParam);
            }
        }
        ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicInfo obj = imp.comAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServic(post, apply, delete, action, $location, propertylist, fieldWhitelist, attachmentTypeBlacklist);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportI() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuecqSocialReportingAnalyticsPollingImporterInterval = request().getQueryString("cq.social.reporting.analytics.polling.importer.interval");
        Integer cqSocialReportingAnalyticsPollingImporterInterval;
        if (valuecqSocialReportingAnalyticsPollingImporterInterval != null) {
            cqSocialReportingAnalyticsPollingImporterInterval = Integer.parseInt(valuecqSocialReportingAnalyticsPollingImporterInterval);
        } else {
            cqSocialReportingAnalyticsPollingImporterInterval = null;
        }
        String valuecqSocialReportingAnalyticsPollingImporterPageSize = request().getQueryString("cq.social.reporting.analytics.polling.importer.pageSize");
        Integer cqSocialReportingAnalyticsPollingImporterPageSize;
        if (valuecqSocialReportingAnalyticsPollingImporterPageSize != null) {
            cqSocialReportingAnalyticsPollingImporterPageSize = Integer.parseInt(valuecqSocialReportingAnalyticsPollingImporterPageSize);
        } else {
            cqSocialReportingAnalyticsPollingImporterPageSize = null;
        }
        ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIInfo obj = imp.comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportI(post, apply, delete, action, $location, propertylist, cqSocialReportingAnalyticsPollingImporterInterval, cqSocialReportingAnalyticsPollingImporterPageSize);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportM() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuereportFetchDelay = request().getQueryString("report.fetch.delay");
        Integer reportFetchDelay;
        if (valuereportFetchDelay != null) {
            reportFetchDelay = Integer.parseInt(valuereportFetchDelay);
        } else {
            reportFetchDelay = null;
        }
        ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMInfo obj = imp.comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportM(post, apply, delete, action, $location, propertylist, reportFetchDelay);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportS() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] cqSocialConsoleAnalyticsSitesMappingArray = request().queryString().get("cq.social.console.analytics.sites.mapping");
        List<String> cqSocialConsoleAnalyticsSitesMappingList = OpenAPIUtils.parametersToList("multi", cqSocialConsoleAnalyticsSitesMappingArray);
        List<String> cqSocialConsoleAnalyticsSitesMapping = new ArrayList<String>();
        for (String curParam : cqSocialConsoleAnalyticsSitesMappingList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                cqSocialConsoleAnalyticsSitesMapping.add(curParam);
            }
        }
        String valuepriority = request().getQueryString("priority");
        Integer priority;
        if (valuepriority != null) {
            priority = Integer.parseInt(valuepriority);
        } else {
            priority = null;
        }
        ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSInfo obj = imp.comAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportS(post, apply, delete, action, $location, propertylist, cqSocialConsoleAnalyticsSitesMapping, priority);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqSocialReviewClientEndpointsImplReviewOperationsServi() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] fieldWhitelistArray = request().queryString().get("fieldWhitelist");
        List<String> fieldWhitelistList = OpenAPIUtils.parametersToList("multi", fieldWhitelistArray);
        List<String> fieldWhitelist = new ArrayList<String>();
        for (String curParam : fieldWhitelistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                fieldWhitelist.add(curParam);
            }
        }
        String[] attachmentTypeBlacklistArray = request().queryString().get("attachmentTypeBlacklist");
        List<String> attachmentTypeBlacklistList = OpenAPIUtils.parametersToList("multi", attachmentTypeBlacklistArray);
        List<String> attachmentTypeBlacklist = new ArrayList<String>();
        for (String curParam : attachmentTypeBlacklistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                attachmentTypeBlacklist.add(curParam);
            }
        }
        ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiInfo obj = imp.comAdobeCqSocialReviewClientEndpointsImplReviewOperationsServi(post, apply, delete, action, $location, propertylist, fieldWhitelist, attachmentTypeBlacklist);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqSocialScfCoreOperationsImplSocialOperationsServlet() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueslingServletSelectors = request().getQueryString("sling.servlet.selectors");
        String slingServletSelectors;
        if (valueslingServletSelectors != null) {
            slingServletSelectors = valueslingServletSelectors;
        } else {
            slingServletSelectors = null;
        }
        String valueslingServletExtensions = request().getQueryString("sling.servlet.extensions");
        String slingServletExtensions;
        if (valueslingServletExtensions != null) {
            slingServletExtensions = valueslingServletExtensions;
        } else {
            slingServletExtensions = null;
        }
        ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletInfo obj = imp.comAdobeCqSocialScfCoreOperationsImplSocialOperationsServlet(post, apply, delete, action, $location, propertylist, slingServletSelectors, slingServletExtensions);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqSocialScfEndpointsImplDefaultSocialGetServlet() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] slingServletSelectorsArray = request().queryString().get("sling.servlet.selectors");
        List<String> slingServletSelectorsList = OpenAPIUtils.parametersToList("multi", slingServletSelectorsArray);
        List<String> slingServletSelectors = new ArrayList<String>();
        for (String curParam : slingServletSelectorsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                slingServletSelectors.add(curParam);
            }
        }
        String valueslingServletExtensions = request().getQueryString("sling.servlet.extensions");
        String slingServletExtensions;
        if (valueslingServletExtensions != null) {
            slingServletExtensions = valueslingServletExtensions;
        } else {
            slingServletExtensions = null;
        }
        ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletInfo obj = imp.comAdobeCqSocialScfEndpointsImplDefaultSocialGetServlet(post, apply, delete, action, $location, propertylist, slingServletSelectors, slingServletExtensions);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqSocialScoringImplScoringEventListener() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueeventTopics = request().getQueryString("event.topics");
        String eventTopics;
        if (valueeventTopics != null) {
            eventTopics = valueeventTopics;
        } else {
            eventTopics = null;
        }
        String valueeventFilter = request().getQueryString("event.filter");
        String eventFilter;
        if (valueeventFilter != null) {
            eventFilter = valueeventFilter;
        } else {
            eventFilter = null;
        }
        ComAdobeCqSocialScoringImplScoringEventListenerInfo obj = imp.comAdobeCqSocialScoringImplScoringEventListener(post, apply, delete, action, $location, propertylist, eventTopics, eventFilter);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqSocialServiceusersInternalImplServiceUserWrapperImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueenableFallback = request().getQueryString("enableFallback");
        Boolean enableFallback;
        if (valueenableFallback != null) {
            enableFallback = Boolean.valueOf(valueenableFallback);
        } else {
            enableFallback = null;
        }
        ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplInfo obj = imp.comAdobeCqSocialServiceusersInternalImplServiceUserWrapperImpl(post, apply, delete, action, $location, propertylist, enableFallback);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqSocialSiteEndpointsImplSiteOperationService() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] fieldWhitelistArray = request().queryString().get("fieldWhitelist");
        List<String> fieldWhitelistList = OpenAPIUtils.parametersToList("multi", fieldWhitelistArray);
        List<String> fieldWhitelist = new ArrayList<String>();
        for (String curParam : fieldWhitelistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                fieldWhitelist.add(curParam);
            }
        }
        String[] sitePathFiltersArray = request().queryString().get("sitePathFilters");
        List<String> sitePathFiltersList = OpenAPIUtils.parametersToList("multi", sitePathFiltersArray);
        List<String> sitePathFilters = new ArrayList<String>();
        for (String curParam : sitePathFiltersList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                sitePathFilters.add(curParam);
            }
        }
        String valuesitePackageGroup = request().getQueryString("sitePackageGroup");
        String sitePackageGroup;
        if (valuesitePackageGroup != null) {
            sitePackageGroup = valuesitePackageGroup;
        } else {
            sitePackageGroup = null;
        }
        ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceInfo obj = imp.comAdobeCqSocialSiteEndpointsImplSiteOperationService(post, apply, delete, action, $location, propertylist, fieldWhitelist, sitePathFilters, sitePackageGroup);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceIm() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] cqSocialConsoleAnalyticsComponentsArray = request().queryString().get("cq.social.console.analytics.components");
        List<String> cqSocialConsoleAnalyticsComponentsList = OpenAPIUtils.parametersToList("multi", cqSocialConsoleAnalyticsComponentsArray);
        List<String> cqSocialConsoleAnalyticsComponents = new ArrayList<String>();
        for (String curParam : cqSocialConsoleAnalyticsComponentsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                cqSocialConsoleAnalyticsComponents.add(curParam);
            }
        }
        ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImInfo obj = imp.comAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceIm(post, apply, delete, action, $location, propertylist, cqSocialConsoleAnalyticsComponents);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqSocialSiteImplSiteConfiguratorImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] componentsUsingTagsArray = request().queryString().get("componentsUsingTags");
        List<String> componentsUsingTagsList = OpenAPIUtils.parametersToList("multi", componentsUsingTagsArray);
        List<String> componentsUsingTags = new ArrayList<String>();
        for (String curParam : componentsUsingTagsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                componentsUsingTags.add(curParam);
            }
        }
        ComAdobeCqSocialSiteImplSiteConfiguratorImplInfo obj = imp.comAdobeCqSocialSiteImplSiteConfiguratorImpl(post, apply, delete, action, $location, propertylist, componentsUsingTags);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqSocialSrpImplSocialSolrConnector() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuesrpType = request().getQueryString("srp.type");
        String srpType;
        if (valuesrpType != null) {
            srpType = valuesrpType;
        } else {
            srpType = null;
        }
        ComAdobeCqSocialSrpImplSocialSolrConnectorInfo obj = imp.comAdobeCqSocialSrpImplSocialSolrConnector(post, apply, delete, action, $location, propertylist, srpType);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqSocialSyncImplDiffChangesObserver() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueenabled = request().getQueryString("enabled");
        Boolean enabled;
        if (valueenabled != null) {
            enabled = Boolean.valueOf(valueenabled);
        } else {
            enabled = null;
        }
        String valueagentName = request().getQueryString("agentName");
        String agentName;
        if (valueagentName != null) {
            agentName = valueagentName;
        } else {
            agentName = null;
        }
        String valuediffPath = request().getQueryString("diffPath");
        String diffPath;
        if (valuediffPath != null) {
            diffPath = valuediffPath;
        } else {
            diffPath = null;
        }
        String valuepropertyNames = request().getQueryString("propertyNames");
        String propertyNames;
        if (valuepropertyNames != null) {
            propertyNames = valuepropertyNames;
        } else {
            propertyNames = null;
        }
        ComAdobeCqSocialSyncImplDiffChangesObserverInfo obj = imp.comAdobeCqSocialSyncImplDiffChangesObserver(post, apply, delete, action, $location, propertylist, enabled, agentName, diffPath, propertyNames);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqSocialSyncImplGroupSyncListenerImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] nodetypesArray = request().queryString().get("nodetypes");
        List<String> nodetypesList = OpenAPIUtils.parametersToList("multi", nodetypesArray);
        List<String> nodetypes = new ArrayList<String>();
        for (String curParam : nodetypesList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                nodetypes.add(curParam);
            }
        }
        String[] ignorablepropsArray = request().queryString().get("ignorableprops");
        List<String> ignorablepropsList = OpenAPIUtils.parametersToList("multi", ignorablepropsArray);
        List<String> ignorableprops = new ArrayList<String>();
        for (String curParam : ignorablepropsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                ignorableprops.add(curParam);
            }
        }
        String valueignorablenodes = request().getQueryString("ignorablenodes");
        String ignorablenodes;
        if (valueignorablenodes != null) {
            ignorablenodes = valueignorablenodes;
        } else {
            ignorablenodes = null;
        }
        String valueenabled = request().getQueryString("enabled");
        Boolean enabled;
        if (valueenabled != null) {
            enabled = Boolean.valueOf(valueenabled);
        } else {
            enabled = null;
        }
        String valuedistfolders = request().getQueryString("distfolders");
        String distfolders;
        if (valuedistfolders != null) {
            distfolders = valuedistfolders;
        } else {
            distfolders = null;
        }
        ComAdobeCqSocialSyncImplGroupSyncListenerImplInfo obj = imp.comAdobeCqSocialSyncImplGroupSyncListenerImpl(post, apply, delete, action, $location, propertylist, nodetypes, ignorableprops, ignorablenodes, enabled, distfolders);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqSocialSyncImplPublisherSyncServiceImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] activeRunModesArray = request().queryString().get("activeRunModes");
        List<String> activeRunModesList = OpenAPIUtils.parametersToList("multi", activeRunModesArray);
        List<String> activeRunModes = new ArrayList<String>();
        for (String curParam : activeRunModesList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                activeRunModes.add(curParam);
            }
        }
        ComAdobeCqSocialSyncImplPublisherSyncServiceImplInfo obj = imp.comAdobeCqSocialSyncImplPublisherSyncServiceImpl(post, apply, delete, action, $location, propertylist, activeRunModes);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqSocialSyncImplUserSyncListenerImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] nodetypesArray = request().queryString().get("nodetypes");
        List<String> nodetypesList = OpenAPIUtils.parametersToList("multi", nodetypesArray);
        List<String> nodetypes = new ArrayList<String>();
        for (String curParam : nodetypesList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                nodetypes.add(curParam);
            }
        }
        String[] ignorablepropsArray = request().queryString().get("ignorableprops");
        List<String> ignorablepropsList = OpenAPIUtils.parametersToList("multi", ignorablepropsArray);
        List<String> ignorableprops = new ArrayList<String>();
        for (String curParam : ignorablepropsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                ignorableprops.add(curParam);
            }
        }
        String[] ignorablenodesArray = request().queryString().get("ignorablenodes");
        List<String> ignorablenodesList = OpenAPIUtils.parametersToList("multi", ignorablenodesArray);
        List<String> ignorablenodes = new ArrayList<String>();
        for (String curParam : ignorablenodesList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                ignorablenodes.add(curParam);
            }
        }
        String valueenabled = request().getQueryString("enabled");
        Boolean enabled;
        if (valueenabled != null) {
            enabled = Boolean.valueOf(valueenabled);
        } else {
            enabled = null;
        }
        String[] distfoldersArray = request().queryString().get("distfolders");
        List<String> distfoldersList = OpenAPIUtils.parametersToList("multi", distfoldersArray);
        List<String> distfolders = new ArrayList<String>();
        for (String curParam : distfoldersList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                distfolders.add(curParam);
            }
        }
        ComAdobeCqSocialSyncImplUserSyncListenerImplInfo obj = imp.comAdobeCqSocialSyncImplUserSyncListenerImpl(post, apply, delete, action, $location, propertylist, nodetypes, ignorableprops, ignorablenodes, enabled, distfolders);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqSocialTranslationImplTranslationServiceConfigManager() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuetranslateLanguage = request().getQueryString("translate.language");
        String translateLanguage;
        if (valuetranslateLanguage != null) {
            translateLanguage = valuetranslateLanguage;
        } else {
            translateLanguage = null;
        }
        String valuetranslateDisplay = request().getQueryString("translate.display");
        String translateDisplay;
        if (valuetranslateDisplay != null) {
            translateDisplay = valuetranslateDisplay;
        } else {
            translateDisplay = null;
        }
        String valuetranslateAttribution = request().getQueryString("translate.attribution");
        Boolean translateAttribution;
        if (valuetranslateAttribution != null) {
            translateAttribution = Boolean.valueOf(valuetranslateAttribution);
        } else {
            translateAttribution = null;
        }
        String valuetranslateCaching = request().getQueryString("translate.caching");
        String translateCaching;
        if (valuetranslateCaching != null) {
            translateCaching = valuetranslateCaching;
        } else {
            translateCaching = null;
        }
        String valuetranslateSmartRendering = request().getQueryString("translate.smart.rendering");
        String translateSmartRendering;
        if (valuetranslateSmartRendering != null) {
            translateSmartRendering = valuetranslateSmartRendering;
        } else {
            translateSmartRendering = null;
        }
        String valuetranslateCachingDuration = request().getQueryString("translate.caching.duration");
        String translateCachingDuration;
        if (valuetranslateCachingDuration != null) {
            translateCachingDuration = valuetranslateCachingDuration;
        } else {
            translateCachingDuration = null;
        }
        String valuetranslateSessionSaveInterval = request().getQueryString("translate.session.save.interval");
        String translateSessionSaveInterval;
        if (valuetranslateSessionSaveInterval != null) {
            translateSessionSaveInterval = valuetranslateSessionSaveInterval;
        } else {
            translateSessionSaveInterval = null;
        }
        String valuetranslateSessionSaveBatchLimit = request().getQueryString("translate.session.save.batchLimit");
        String translateSessionSaveBatchLimit;
        if (valuetranslateSessionSaveBatchLimit != null) {
            translateSessionSaveBatchLimit = valuetranslateSessionSaveBatchLimit;
        } else {
            translateSessionSaveBatchLimit = null;
        }
        ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerInfo obj = imp.comAdobeCqSocialTranslationImplTranslationServiceConfigManager(post, apply, delete, action, $location, propertylist, translateLanguage, translateDisplay, translateAttribution, translateCaching, translateSmartRendering, translateCachingDuration, translateSessionSaveInterval, translateSessionSaveBatchLimit);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqSocialTranslationImplUGCLanguageDetector() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueeventTopics = request().getQueryString("event.topics");
        String eventTopics;
        if (valueeventTopics != null) {
            eventTopics = valueeventTopics;
        } else {
            eventTopics = null;
        }
        String valueeventFilter = request().getQueryString("event.filter");
        String eventFilter;
        if (valueeventFilter != null) {
            eventFilter = valueeventFilter;
        } else {
            eventFilter = null;
        }
        String[] translateListenerTypeArray = request().queryString().get("translate.listener.type");
        List<String> translateListenerTypeList = OpenAPIUtils.parametersToList("multi", translateListenerTypeArray);
        List<String> translateListenerType = new ArrayList<String>();
        for (String curParam : translateListenerTypeList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                translateListenerType.add(curParam);
            }
        }
        String[] translatePropertyListArray = request().queryString().get("translate.property.list");
        List<String> translatePropertyListList = OpenAPIUtils.parametersToList("multi", translatePropertyListArray);
        List<String> translatePropertyList = new ArrayList<String>();
        for (String curParam : translatePropertyListList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                translatePropertyList.add(curParam);
            }
        }
        String valuepoolSize = request().getQueryString("poolSize");
        Integer poolSize;
        if (valuepoolSize != null) {
            poolSize = Integer.parseInt(valuepoolSize);
        } else {
            poolSize = null;
        }
        String valuemaxPoolSize = request().getQueryString("maxPoolSize");
        Integer maxPoolSize;
        if (valuemaxPoolSize != null) {
            maxPoolSize = Integer.parseInt(valuemaxPoolSize);
        } else {
            maxPoolSize = null;
        }
        String valuequeueSize = request().getQueryString("queueSize");
        Integer queueSize;
        if (valuequeueSize != null) {
            queueSize = Integer.parseInt(valuequeueSize);
        } else {
            queueSize = null;
        }
        String valuekeepAliveTime = request().getQueryString("keepAliveTime");
        Integer keepAliveTime;
        if (valuekeepAliveTime != null) {
            keepAliveTime = Integer.parseInt(valuekeepAliveTime);
        } else {
            keepAliveTime = null;
        }
        ComAdobeCqSocialTranslationImplUGCLanguageDetectorInfo obj = imp.comAdobeCqSocialTranslationImplUGCLanguageDetector(post, apply, delete, action, $location, propertylist, eventTopics, eventFilter, translateListenerType, translatePropertyList, poolSize, maxPoolSize, queueSize, keepAliveTime);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqSocialUgcbaseDispatcherImplFlushServiceImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuethreadPoolSize = request().getQueryString("threadPoolSize");
        Integer threadPoolSize;
        if (valuethreadPoolSize != null) {
            threadPoolSize = Integer.parseInt(valuethreadPoolSize);
        } else {
            threadPoolSize = null;
        }
        String valuedelayTime = request().getQueryString("delayTime");
        Integer delayTime;
        if (valuedelayTime != null) {
            delayTime = Integer.parseInt(valuedelayTime);
        } else {
            delayTime = null;
        }
        String valueworkerSleepTime = request().getQueryString("workerSleepTime");
        Integer workerSleepTime;
        if (valueworkerSleepTime != null) {
            workerSleepTime = Integer.parseInt(valueworkerSleepTime);
        } else {
            workerSleepTime = null;
        }
        ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplInfo obj = imp.comAdobeCqSocialUgcbaseDispatcherImplFlushServiceImpl(post, apply, delete, action, $location, propertylist, threadPoolSize, delayTime, workerSleepTime);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqSocialUgcbaseImplAysncReverseReplicatorImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuepoolSize = request().getQueryString("poolSize");
        Integer poolSize;
        if (valuepoolSize != null) {
            poolSize = Integer.parseInt(valuepoolSize);
        } else {
            poolSize = null;
        }
        String valuemaxPoolSize = request().getQueryString("maxPoolSize");
        Integer maxPoolSize;
        if (valuemaxPoolSize != null) {
            maxPoolSize = Integer.parseInt(valuemaxPoolSize);
        } else {
            maxPoolSize = null;
        }
        String valuequeueSize = request().getQueryString("queueSize");
        Integer queueSize;
        if (valuequeueSize != null) {
            queueSize = Integer.parseInt(valuequeueSize);
        } else {
            queueSize = null;
        }
        String valuekeepAliveTime = request().getQueryString("keepAliveTime");
        Integer keepAliveTime;
        if (valuekeepAliveTime != null) {
            keepAliveTime = Integer.parseInt(valuekeepAliveTime);
        } else {
            keepAliveTime = null;
        }
        ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplInfo obj = imp.comAdobeCqSocialUgcbaseImplAysncReverseReplicatorImpl(post, apply, delete, action, $location, propertylist, poolSize, maxPoolSize, queueSize, keepAliveTime);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqSocialUgcbaseImplPublisherConfigurationImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueisPrimaryPublisher = request().getQueryString("isPrimaryPublisher");
        Boolean isPrimaryPublisher;
        if (valueisPrimaryPublisher != null) {
            isPrimaryPublisher = Boolean.valueOf(valueisPrimaryPublisher);
        } else {
            isPrimaryPublisher = null;
        }
        ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplInfo obj = imp.comAdobeCqSocialUgcbaseImplPublisherConfigurationImpl(post, apply, delete, action, $location, propertylist, isPrimaryPublisher);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqSocialUgcbaseImplSocialUtilsImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuelegacyCloudUGCPathMapping = request().getQueryString("legacyCloudUGCPathMapping");
        Boolean legacyCloudUGCPathMapping;
        if (valuelegacyCloudUGCPathMapping != null) {
            legacyCloudUGCPathMapping = Boolean.valueOf(valuelegacyCloudUGCPathMapping);
        } else {
            legacyCloudUGCPathMapping = null;
        }
        ComAdobeCqSocialUgcbaseImplSocialUtilsImplInfo obj = imp.comAdobeCqSocialUgcbaseImplSocialUtilsImpl(post, apply, delete, action, $location, propertylist, legacyCloudUGCPathMapping);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqSocialUgcbaseModerationImplAutoModerationImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] automoderationSequenceArray = request().queryString().get("automoderation.sequence");
        List<String> automoderationSequenceList = OpenAPIUtils.parametersToList("multi", automoderationSequenceArray);
        List<String> automoderationSequence = new ArrayList<String>();
        for (String curParam : automoderationSequenceList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                automoderationSequence.add(curParam);
            }
        }
        String valueautomoderationOnfailurestop = request().getQueryString("automoderation.onfailurestop");
        Boolean automoderationOnfailurestop;
        if (valueautomoderationOnfailurestop != null) {
            automoderationOnfailurestop = Boolean.valueOf(valueautomoderationOnfailurestop);
        } else {
            automoderationOnfailurestop = null;
        }
        ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplInfo obj = imp.comAdobeCqSocialUgcbaseModerationImplAutoModerationImpl(post, apply, delete, action, $location, propertylist, automoderationSequence, automoderationOnfailurestop);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqSocialUgcbaseModerationImplSentimentProcess() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] watchwordsPositiveArray = request().queryString().get("watchwords.positive");
        List<String> watchwordsPositiveList = OpenAPIUtils.parametersToList("multi", watchwordsPositiveArray);
        List<String> watchwordsPositive = new ArrayList<String>();
        for (String curParam : watchwordsPositiveList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                watchwordsPositive.add(curParam);
            }
        }
        String[] watchwordsNegativeArray = request().queryString().get("watchwords.negative");
        List<String> watchwordsNegativeList = OpenAPIUtils.parametersToList("multi", watchwordsNegativeArray);
        List<String> watchwordsNegative = new ArrayList<String>();
        for (String curParam : watchwordsNegativeList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                watchwordsNegative.add(curParam);
            }
        }
        String valuewatchwordsPath = request().getQueryString("watchwords.path");
        String watchwordsPath;
        if (valuewatchwordsPath != null) {
            watchwordsPath = valuewatchwordsPath;
        } else {
            watchwordsPath = null;
        }
        String valuesentimentPath = request().getQueryString("sentiment.path");
        String sentimentPath;
        if (valuesentimentPath != null) {
            sentimentPath = valuesentimentPath;
        } else {
            sentimentPath = null;
        }
        ComAdobeCqSocialUgcbaseModerationImplSentimentProcessInfo obj = imp.comAdobeCqSocialUgcbaseModerationImplSentimentProcess(post, apply, delete, action, $location, propertylist, watchwordsPositive, watchwordsNegative, watchwordsPath, sentimentPath);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackli() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] defaultAttachmentTypeBlacklistArray = request().queryString().get("default.attachment.type.blacklist");
        List<String> defaultAttachmentTypeBlacklistList = OpenAPIUtils.parametersToList("multi", defaultAttachmentTypeBlacklistArray);
        List<String> defaultAttachmentTypeBlacklist = new ArrayList<String>();
        for (String curParam : defaultAttachmentTypeBlacklistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                defaultAttachmentTypeBlacklist.add(curParam);
            }
        }
        String[] baselineAttachmentTypeBlacklistArray = request().queryString().get("baseline.attachment.type.blacklist");
        List<String> baselineAttachmentTypeBlacklistList = OpenAPIUtils.parametersToList("multi", baselineAttachmentTypeBlacklistArray);
        List<String> baselineAttachmentTypeBlacklist = new ArrayList<String>();
        for (String curParam : baselineAttachmentTypeBlacklistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                baselineAttachmentTypeBlacklist.add(curParam);
            }
        }
        ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliInfo obj = imp.comAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackli(post, apply, delete, action, $location, propertylist, defaultAttachmentTypeBlacklist, baselineAttachmentTypeBlacklist);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] parameterWhitelistArray = request().queryString().get("parameter.whitelist");
        List<String> parameterWhitelistList = OpenAPIUtils.parametersToList("multi", parameterWhitelistArray);
        List<String> parameterWhitelist = new ArrayList<String>();
        for (String curParam : parameterWhitelistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                parameterWhitelist.add(curParam);
            }
        }
        String[] parameterWhitelistPrefixesArray = request().queryString().get("parameter.whitelist.prefixes");
        List<String> parameterWhitelistPrefixesList = OpenAPIUtils.parametersToList("multi", parameterWhitelistPrefixesArray);
        List<String> parameterWhitelistPrefixes = new ArrayList<String>();
        for (String curParam : parameterWhitelistPrefixesList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                parameterWhitelistPrefixes.add(curParam);
            }
        }
        String[] binaryParameterWhitelistArray = request().queryString().get("binary.parameter.whitelist");
        List<String> binaryParameterWhitelistList = OpenAPIUtils.parametersToList("multi", binaryParameterWhitelistArray);
        List<String> binaryParameterWhitelist = new ArrayList<String>();
        for (String curParam : binaryParameterWhitelistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                binaryParameterWhitelist.add(curParam);
            }
        }
        String[] modifierWhitelistArray = request().queryString().get("modifier.whitelist");
        List<String> modifierWhitelistList = OpenAPIUtils.parametersToList("multi", modifierWhitelistArray);
        List<String> modifierWhitelist = new ArrayList<String>();
        for (String curParam : modifierWhitelistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                modifierWhitelist.add(curParam);
            }
        }
        String[] operationWhitelistArray = request().queryString().get("operation.whitelist");
        List<String> operationWhitelistList = OpenAPIUtils.parametersToList("multi", operationWhitelistArray);
        List<String> operationWhitelist = new ArrayList<String>();
        for (String curParam : operationWhitelistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                operationWhitelist.add(curParam);
            }
        }
        String[] operationWhitelistPrefixesArray = request().queryString().get("operation.whitelist.prefixes");
        List<String> operationWhitelistPrefixesList = OpenAPIUtils.parametersToList("multi", operationWhitelistPrefixesArray);
        List<String> operationWhitelistPrefixes = new ArrayList<String>();
        for (String curParam : operationWhitelistPrefixesList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                operationWhitelistPrefixes.add(curParam);
            }
        }
        String[] typehintWhitelistArray = request().queryString().get("typehint.whitelist");
        List<String> typehintWhitelistList = OpenAPIUtils.parametersToList("multi", typehintWhitelistArray);
        List<String> typehintWhitelist = new ArrayList<String>();
        for (String curParam : typehintWhitelistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                typehintWhitelist.add(curParam);
            }
        }
        String[] resourcetypeWhitelistArray = request().queryString().get("resourcetype.whitelist");
        List<String> resourcetypeWhitelistList = OpenAPIUtils.parametersToList("multi", resourcetypeWhitelistArray);
        List<String> resourcetypeWhitelist = new ArrayList<String>();
        for (String curParam : resourcetypeWhitelistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                resourcetypeWhitelist.add(curParam);
            }
        }
        ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplInfo obj = imp.comAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImpl(post, apply, delete, action, $location, propertylist, parameterWhitelist, parameterWhitelistPrefixes, binaryParameterWhitelist, modifierWhitelist, operationWhitelist, operationWhitelistPrefixes, typehintWhitelist, resourcetypeWhitelist);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServlet() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueslingServletExtensions = request().getQueryString("sling.servlet.extensions");
        String slingServletExtensions;
        if (valueslingServletExtensions != null) {
            slingServletExtensions = valueslingServletExtensions;
        } else {
            slingServletExtensions = null;
        }
        String valueslingServletPaths = request().getQueryString("sling.servlet.paths");
        String slingServletPaths;
        if (valueslingServletPaths != null) {
            slingServletPaths = valueslingServletPaths;
        } else {
            slingServletPaths = null;
        }
        String valueslingServletMethods = request().getQueryString("sling.servlet.methods");
        String slingServletMethods;
        if (valueslingServletMethods != null) {
            slingServletMethods = valueslingServletMethods;
        } else {
            slingServletMethods = null;
        }
        ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletInfo obj = imp.comAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServlet(post, apply, delete, action, $location, propertylist, slingServletExtensions, slingServletPaths, slingServletMethods);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqSocialUserImplTransportHttpToPublisher() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueenable = request().getQueryString("enable");
        Boolean enable;
        if (valueenable != null) {
            enable = Boolean.valueOf(valueenable);
        } else {
            enable = null;
        }
        String[] agentConfigurationArray = request().queryString().get("agent.configuration");
        List<String> agentConfigurationList = OpenAPIUtils.parametersToList("multi", agentConfigurationArray);
        List<String> agentConfiguration = new ArrayList<String>();
        for (String curParam : agentConfigurationList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                agentConfiguration.add(curParam);
            }
        }
        String valuecontextPath = request().getQueryString("context.path");
        String contextPath;
        if (valuecontextPath != null) {
            contextPath = valuecontextPath;
        } else {
            contextPath = null;
        }
        String[] disabledCipherSuitesArray = request().queryString().get("disabled.cipher.suites");
        List<String> disabledCipherSuitesList = OpenAPIUtils.parametersToList("multi", disabledCipherSuitesArray);
        List<String> disabledCipherSuites = new ArrayList<String>();
        for (String curParam : disabledCipherSuitesList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                disabledCipherSuites.add(curParam);
            }
        }
        String[] enabledCipherSuitesArray = request().queryString().get("enabled.cipher.suites");
        List<String> enabledCipherSuitesList = OpenAPIUtils.parametersToList("multi", enabledCipherSuitesArray);
        List<String> enabledCipherSuites = new ArrayList<String>();
        for (String curParam : enabledCipherSuitesList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                enabledCipherSuites.add(curParam);
            }
        }
        ComAdobeCqSocialUserImplTransportHttpToPublisherInfo obj = imp.comAdobeCqSocialUserImplTransportHttpToPublisher(post, apply, delete, action, $location, propertylist, enable, agentConfiguration, contextPath, disabledCipherSuites, enabledCipherSuites);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFact() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] resourceTypesArray = request().queryString().get("resource.types");
        List<String> resourceTypesList = OpenAPIUtils.parametersToList("multi", resourceTypesArray);
        List<String> resourceTypes = new ArrayList<String>();
        for (String curParam : resourceTypesList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                resourceTypes.add(curParam);
            }
        }
        ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactInfo obj = imp.comAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFact(post, apply, delete, action, $location, propertylist, resourceTypes);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqUpgradesCleanupImplUpgradeContentCleanup() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] deletePathRegexpsArray = request().queryString().get("delete.path.regexps");
        List<String> deletePathRegexpsList = OpenAPIUtils.parametersToList("multi", deletePathRegexpsArray);
        List<String> deletePathRegexps = new ArrayList<String>();
        for (String curParam : deletePathRegexpsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                deletePathRegexps.add(curParam);
            }
        }
        String valuedeleteSql2Query = request().getQueryString("delete.sql2.query");
        String deleteSql2Query;
        if (valuedeleteSql2Query != null) {
            deleteSql2Query = valuedeleteSql2Query;
        } else {
            deleteSql2Query = null;
        }
        ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupInfo obj = imp.comAdobeCqUpgradesCleanupImplUpgradeContentCleanup(post, apply, delete, action, $location, propertylist, deletePathRegexps, deleteSql2Query);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanup() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] deleteNameRegexpsArray = request().queryString().get("delete.name.regexps");
        List<String> deleteNameRegexpsList = OpenAPIUtils.parametersToList("multi", deleteNameRegexpsArray);
        List<String> deleteNameRegexps = new ArrayList<String>();
        for (String curParam : deleteNameRegexpsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                deleteNameRegexps.add(curParam);
            }
        }
        ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupInfo obj = imp.comAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanup(post, apply, delete, action, $location, propertylist, deleteNameRegexps);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderService() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuethreshold = request().getQueryString("threshold");
        Integer threshold;
        if (valuethreshold != null) {
            threshold = Integer.parseInt(valuethreshold);
        } else {
            threshold = null;
        }
        String valuejobTopicName = request().getQueryString("jobTopicName");
        String jobTopicName;
        if (valuejobTopicName != null) {
            jobTopicName = valuejobTopicName;
        } else {
            jobTopicName = null;
        }
        String valueemailEnabled = request().getQueryString("emailEnabled");
        Boolean emailEnabled;
        if (valueemailEnabled != null) {
            emailEnabled = Boolean.valueOf(valueemailEnabled);
        } else {
            emailEnabled = null;
        }
        ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceInfo obj = imp.comAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderService(post, apply, delete, action, $location, propertylist, threshold, jobTopicName, emailEnabled);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTask() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueschedulerExpression = request().getQueryString("scheduler.expression");
        String schedulerExpression;
        if (valueschedulerExpression != null) {
            schedulerExpression = valueschedulerExpression;
        } else {
            schedulerExpression = null;
        }
        String valuejobPurgeThreshold = request().getQueryString("job.purge.threshold");
        Integer jobPurgeThreshold;
        if (valuejobPurgeThreshold != null) {
            jobPurgeThreshold = Integer.parseInt(valuejobPurgeThreshold);
        } else {
            jobPurgeThreshold = null;
        }
        String valuejobPurgeMaxJobs = request().getQueryString("job.purge.max.jobs");
        Integer jobPurgeMaxJobs;
        if (valuejobPurgeMaxJobs != null) {
            jobPurgeMaxJobs = Integer.parseInt(valuejobPurgeMaxJobs);
        } else {
            jobPurgeMaxJobs = null;
        }
        ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskInfo obj = imp.comAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTask(post, apply, delete, action, $location, propertylist, schedulerExpression, jobPurgeThreshold, jobPurgeMaxJobs);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderService() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuethreshold = request().getQueryString("threshold");
        Integer threshold;
        if (valuethreshold != null) {
            threshold = Integer.parseInt(valuethreshold);
        } else {
            threshold = null;
        }
        String valuejobTopicName = request().getQueryString("jobTopicName");
        String jobTopicName;
        if (valuejobTopicName != null) {
            jobTopicName = valuejobTopicName;
        } else {
            jobTopicName = null;
        }
        String valueemailEnabled = request().getQueryString("emailEnabled");
        Boolean emailEnabled;
        if (valueemailEnabled != null) {
            emailEnabled = Boolean.valueOf(valueemailEnabled);
        } else {
            emailEnabled = null;
        }
        ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceInfo obj = imp.comAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderService(post, apply, delete, action, $location, propertylist, threshold, jobTopicName, emailEnabled);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderService() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuethreshold = request().getQueryString("threshold");
        Integer threshold;
        if (valuethreshold != null) {
            threshold = Integer.parseInt(valuethreshold);
        } else {
            threshold = null;
        }
        String valuejobTopicName = request().getQueryString("jobTopicName");
        String jobTopicName;
        if (valuejobTopicName != null) {
            jobTopicName = valuejobTopicName;
        } else {
            jobTopicName = null;
        }
        String valueemailEnabled = request().getQueryString("emailEnabled");
        Boolean emailEnabled;
        if (valueemailEnabled != null) {
            emailEnabled = Boolean.valueOf(valueemailEnabled);
        } else {
            emailEnabled = null;
        }
        ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceInfo obj = imp.comAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderService(post, apply, delete, action, $location, propertylist, threshold, jobTopicName, emailEnabled);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqWcmLaunchesImplLaunchesEventHandler() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueeventFilter = request().getQueryString("event.filter");
        String eventFilter;
        if (valueeventFilter != null) {
            eventFilter = valueeventFilter;
        } else {
            eventFilter = null;
        }
        String valuelaunchesEventhandlerThreadpoolMaxsize = request().getQueryString("launches.eventhandler.threadpool.maxsize");
        Integer launchesEventhandlerThreadpoolMaxsize;
        if (valuelaunchesEventhandlerThreadpoolMaxsize != null) {
            launchesEventhandlerThreadpoolMaxsize = Integer.parseInt(valuelaunchesEventhandlerThreadpoolMaxsize);
        } else {
            launchesEventhandlerThreadpoolMaxsize = null;
        }
        String valuelaunchesEventhandlerThreadpoolPriority = request().getQueryString("launches.eventhandler.threadpool.priority");
        String launchesEventhandlerThreadpoolPriority;
        if (valuelaunchesEventhandlerThreadpoolPriority != null) {
            launchesEventhandlerThreadpoolPriority = valuelaunchesEventhandlerThreadpoolPriority;
        } else {
            launchesEventhandlerThreadpoolPriority = null;
        }
        String valuelaunchesEventhandlerUpdatelastmodification = request().getQueryString("launches.eventhandler.updatelastmodification");
        Boolean launchesEventhandlerUpdatelastmodification;
        if (valuelaunchesEventhandlerUpdatelastmodification != null) {
            launchesEventhandlerUpdatelastmodification = Boolean.valueOf(valuelaunchesEventhandlerUpdatelastmodification);
        } else {
            launchesEventhandlerUpdatelastmodification = null;
        }
        ComAdobeCqWcmLaunchesImplLaunchesEventHandlerInfo obj = imp.comAdobeCqWcmLaunchesImplLaunchesEventHandler(post, apply, delete, action, $location, propertylist, eventFilter, launchesEventhandlerThreadpoolMaxsize, launchesEventhandlerThreadpoolPriority, launchesEventhandlerUpdatelastmodification);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqWcmMobileQrcodeServletQRCodeImageGenerator() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] cqWcmQrcodeServletWhitelistArray = request().queryString().get("cq.wcm.qrcode.servlet.whitelist");
        List<String> cqWcmQrcodeServletWhitelistList = OpenAPIUtils.parametersToList("multi", cqWcmQrcodeServletWhitelistArray);
        List<String> cqWcmQrcodeServletWhitelist = new ArrayList<String>();
        for (String curParam : cqWcmQrcodeServletWhitelistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                cqWcmQrcodeServletWhitelist.add(curParam);
            }
        }
        ComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorInfo obj = imp.comAdobeCqWcmMobileQrcodeServletQRCodeImageGenerator(post, apply, delete, action, $location, propertylist, cqWcmQrcodeServletWhitelist);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqWcmStyleInternalComponentStyleInfoCacheImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuesize = request().getQueryString("size");
        Integer size;
        if (valuesize != null) {
            size = Integer.parseInt(valuesize);
        } else {
            size = null;
        }
        ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplInfo obj = imp.comAdobeCqWcmStyleInternalComponentStyleInfoCacheImpl(post, apply, delete, action, $location, propertylist, size);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeCqWcmTranslationImplTranslationPlatformConfigurationImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuesyncTranslationStateSchedulingFormat = request().getQueryString("syncTranslationState.schedulingFormat");
        String syncTranslationStateSchedulingFormat;
        if (valuesyncTranslationStateSchedulingFormat != null) {
            syncTranslationStateSchedulingFormat = valuesyncTranslationStateSchedulingFormat;
        } else {
            syncTranslationStateSchedulingFormat = null;
        }
        String valueschedulingRepeatTranslationSchedulingFormat = request().getQueryString("schedulingRepeatTranslation.schedulingFormat");
        String schedulingRepeatTranslationSchedulingFormat;
        if (valueschedulingRepeatTranslationSchedulingFormat != null) {
            schedulingRepeatTranslationSchedulingFormat = valueschedulingRepeatTranslationSchedulingFormat;
        } else {
            schedulingRepeatTranslationSchedulingFormat = null;
        }
        String valuesyncTranslationStateLockTimeoutInMinutes = request().getQueryString("syncTranslationState.lockTimeoutInMinutes");
        String syncTranslationStateLockTimeoutInMinutes;
        if (valuesyncTranslationStateLockTimeoutInMinutes != null) {
            syncTranslationStateLockTimeoutInMinutes = valuesyncTranslationStateLockTimeoutInMinutes;
        } else {
            syncTranslationStateLockTimeoutInMinutes = null;
        }
        String valueexportFormat = request().getQueryString("export.format");
        String exportFormat;
        if (valueexportFormat != null) {
            exportFormat = valueexportFormat;
        } else {
            exportFormat = null;
        }
        ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplInfo obj = imp.comAdobeCqWcmTranslationImplTranslationPlatformConfigurationImpl(post, apply, delete, action, $location, propertylist, syncTranslationStateSchedulingFormat, schedulingRepeatTranslationSchedulingFormat, syncTranslationStateLockTimeoutInMinutes, exportFormat);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigService() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] portalOutboxesArray = request().queryString().get("portal.outboxes");
        List<String> portalOutboxesList = OpenAPIUtils.parametersToList("multi", portalOutboxesArray);
        List<String> portalOutboxes = new ArrayList<String>();
        for (String curParam : portalOutboxesList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                portalOutboxes.add(curParam);
            }
        }
        String valuedraftDataService = request().getQueryString("draft.data.service");
        String draftDataService;
        if (valuedraftDataService != null) {
            draftDataService = valuedraftDataService;
        } else {
            draftDataService = null;
        }
        String valuedraftMetadataService = request().getQueryString("draft.metadata.service");
        String draftMetadataService;
        if (valuedraftMetadataService != null) {
            draftMetadataService = valuedraftMetadataService;
        } else {
            draftMetadataService = null;
        }
        String valuesubmitDataService = request().getQueryString("submit.data.service");
        String submitDataService;
        if (valuesubmitDataService != null) {
            submitDataService = valuesubmitDataService;
        } else {
            submitDataService = null;
        }
        String valuesubmitMetadataService = request().getQueryString("submit.metadata.service");
        String submitMetadataService;
        if (valuesubmitMetadataService != null) {
            submitMetadataService = valuesubmitMetadataService;
        } else {
            submitMetadataService = null;
        }
        String valuependingSignDataService = request().getQueryString("pendingSign.data.service");
        String pendingSignDataService;
        if (valuependingSignDataService != null) {
            pendingSignDataService = valuependingSignDataService;
        } else {
            pendingSignDataService = null;
        }
        String valuependingSignMetadataService = request().getQueryString("pendingSign.metadata.service");
        String pendingSignMetadataService;
        if (valuependingSignMetadataService != null) {
            pendingSignMetadataService = valuependingSignMetadataService;
        } else {
            pendingSignMetadataService = null;
        }
        ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceInfo obj = imp.comAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigService(post, apply, delete, action, $location, propertylist, portalOutboxes, draftDataService, draftMetadataService, submitDataService, submitMetadataService, pendingSignDataService, pendingSignMetadataService);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeFdFpConfigFormsPortalSchedulerService() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueformportalInterval = request().getQueryString("formportal.interval");
        String formportalInterval;
        if (valueformportalInterval != null) {
            formportalInterval = valueformportalInterval;
        } else {
            formportalInterval = null;
        }
        ComAdobeFdFpConfigFormsPortalSchedulerServiceInfo obj = imp.comAdobeFdFpConfigFormsPortalSchedulerService(post, apply, delete, action, $location, propertylist, formportalInterval);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeFormsCommonServiceImplDefaultDataProvider() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] alloweddataFileLocationsArray = request().queryString().get("alloweddataFileLocations");
        List<String> alloweddataFileLocationsList = OpenAPIUtils.parametersToList("multi", alloweddataFileLocationsArray);
        List<String> alloweddataFileLocations = new ArrayList<String>();
        for (String curParam : alloweddataFileLocationsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                alloweddataFileLocations.add(curParam);
            }
        }
        ComAdobeFormsCommonServiceImplDefaultDataProviderInfo obj = imp.comAdobeFormsCommonServiceImplDefaultDataProvider(post, apply, delete, action, $location, propertylist, alloweddataFileLocations);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImp() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuetempStorageConfig = request().getQueryString("tempStorageConfig");
        String tempStorageConfig;
        if (valuetempStorageConfig != null) {
            tempStorageConfig = valuetempStorageConfig;
        } else {
            tempStorageConfig = null;
        }
        ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpInfo obj = imp.comAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImp(post, apply, delete, action, $location, propertylist, tempStorageConfig);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeFormsCommonServletTempCleanUpTask() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueschedulerExpression = request().getQueryString("scheduler.expression");
        String schedulerExpression;
        if (valueschedulerExpression != null) {
            schedulerExpression = valueschedulerExpression;
        } else {
            schedulerExpression = null;
        }
        String valuedurationForTemporaryStorage = request().getQueryString("Duration for Temporary Storage");
        String durationForTemporaryStorage;
        if (valuedurationForTemporaryStorage != null) {
            durationForTemporaryStorage = valuedurationForTemporaryStorage;
        } else {
            durationForTemporaryStorage = null;
        }
        String valuedurationForAnonymousStorage = request().getQueryString("Duration for Anonymous Storage");
        String durationForAnonymousStorage;
        if (valuedurationForAnonymousStorage != null) {
            durationForAnonymousStorage = valuedurationForAnonymousStorage;
        } else {
            durationForAnonymousStorage = null;
        }
        ComAdobeFormsCommonServletTempCleanUpTaskInfo obj = imp.comAdobeFormsCommonServletTempCleanUpTask(post, apply, delete, action, $location, propertylist, schedulerExpression, durationForTemporaryStorage, durationForAnonymousStorage);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeGraniteAcpPlatformPlatformServlet() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuequeryLimit = request().getQueryString("query.limit");
        Integer queryLimit;
        if (valuequeryLimit != null) {
            queryLimit = Integer.parseInt(valuequeryLimit);
        } else {
            queryLimit = null;
        }
        String[] fileTypeExtensionMapArray = request().queryString().get("file.type.extension.map");
        List<String> fileTypeExtensionMapList = OpenAPIUtils.parametersToList("multi", fileTypeExtensionMapArray);
        List<String> fileTypeExtensionMap = new ArrayList<String>();
        for (String curParam : fileTypeExtensionMapList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                fileTypeExtensionMap.add(curParam);
            }
        }
        ComAdobeGraniteAcpPlatformPlatformServletInfo obj = imp.comAdobeGraniteAcpPlatformPlatformServlet(post, apply, delete, action, $location, propertylist, queryLimit, fileTypeExtensionMap);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeGraniteActivitystreamsImplActivityManagerImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] aggregateRelationshipsArray = request().queryString().get("aggregate.relationships");
        List<String> aggregateRelationshipsList = OpenAPIUtils.parametersToList("multi", aggregateRelationshipsArray);
        List<String> aggregateRelationships = new ArrayList<String>();
        for (String curParam : aggregateRelationshipsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                aggregateRelationships.add(curParam);
            }
        }
        String valueaggregateDescendVirtual = request().getQueryString("aggregate.descend.virtual");
        Boolean aggregateDescendVirtual;
        if (valueaggregateDescendVirtual != null) {
            aggregateDescendVirtual = Boolean.valueOf(valueaggregateDescendVirtual);
        } else {
            aggregateDescendVirtual = null;
        }
        ComAdobeGraniteActivitystreamsImplActivityManagerImplInfo obj = imp.comAdobeGraniteActivitystreamsImplActivityManagerImpl(post, apply, delete, action, $location, propertylist, aggregateRelationships, aggregateDescendVirtual);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeGraniteAnalyzerBaseSystemStatusServlet() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuedisabled = request().getQueryString("disabled");
        Boolean disabled;
        if (valuedisabled != null) {
            disabled = Boolean.valueOf(valuedisabled);
        } else {
            disabled = null;
        }
        ComAdobeGraniteAnalyzerBaseSystemStatusServletInfo obj = imp.comAdobeGraniteAnalyzerBaseSystemStatusServlet(post, apply, delete, action, $location, propertylist, disabled);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServlet() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuedisabled = request().getQueryString("disabled");
        Boolean disabled;
        if (valuedisabled != null) {
            disabled = Boolean.valueOf(valuedisabled);
        } else {
            disabled = null;
        }
        ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletInfo obj = imp.comAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServlet(post, apply, delete, action, $location, propertylist, disabled);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeGraniteApicontrollerFilterResolverHookFactory() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuecomAdobeCqCdnCdnRewriter = request().getQueryString("com.adobe.cq.cdn.cdn-rewriter");
        String comAdobeCqCdnCdnRewriter;
        if (valuecomAdobeCqCdnCdnRewriter != null) {
            comAdobeCqCdnCdnRewriter = valuecomAdobeCqCdnCdnRewriter;
        } else {
            comAdobeCqCdnCdnRewriter = null;
        }
        String valuecomAdobeCqCloudConfigComponents = request().getQueryString("com.adobe.cq.cloud-config.components");
        String comAdobeCqCloudConfigComponents;
        if (valuecomAdobeCqCloudConfigComponents != null) {
            comAdobeCqCloudConfigComponents = valuecomAdobeCqCloudConfigComponents;
        } else {
            comAdobeCqCloudConfigComponents = null;
        }
        String valuecomAdobeCqCloudConfigCore = request().getQueryString("com.adobe.cq.cloud-config.core");
        String comAdobeCqCloudConfigCore;
        if (valuecomAdobeCqCloudConfigCore != null) {
            comAdobeCqCloudConfigCore = valuecomAdobeCqCloudConfigCore;
        } else {
            comAdobeCqCloudConfigCore = null;
        }
        String valuecomAdobeCqCloudConfigUi = request().getQueryString("com.adobe.cq.cloud-config.ui");
        String comAdobeCqCloudConfigUi;
        if (valuecomAdobeCqCloudConfigUi != null) {
            comAdobeCqCloudConfigUi = valuecomAdobeCqCloudConfigUi;
        } else {
            comAdobeCqCloudConfigUi = null;
        }
        String valuecomAdobeCqComAdobeCqEditor = request().getQueryString("com.adobe.cq.com.adobe.cq.editor");
        String comAdobeCqComAdobeCqEditor;
        if (valuecomAdobeCqComAdobeCqEditor != null) {
            comAdobeCqComAdobeCqEditor = valuecomAdobeCqComAdobeCqEditor;
        } else {
            comAdobeCqComAdobeCqEditor = null;
        }
        String valuecomAdobeCqComAdobeCqProjectsCore = request().getQueryString("com.adobe.cq.com.adobe.cq.projects.core");
        String comAdobeCqComAdobeCqProjectsCore;
        if (valuecomAdobeCqComAdobeCqProjectsCore != null) {
            comAdobeCqComAdobeCqProjectsCore = valuecomAdobeCqComAdobeCqProjectsCore;
        } else {
            comAdobeCqComAdobeCqProjectsCore = null;
        }
        String valuecomAdobeCqComAdobeCqProjectsWcmCore = request().getQueryString("com.adobe.cq.com.adobe.cq.projects.wcm.core");
        String comAdobeCqComAdobeCqProjectsWcmCore;
        if (valuecomAdobeCqComAdobeCqProjectsWcmCore != null) {
            comAdobeCqComAdobeCqProjectsWcmCore = valuecomAdobeCqComAdobeCqProjectsWcmCore;
        } else {
            comAdobeCqComAdobeCqProjectsWcmCore = null;
        }
        String valuecomAdobeCqComAdobeCqUiCommons = request().getQueryString("com.adobe.cq.com.adobe.cq.ui.commons");
        String comAdobeCqComAdobeCqUiCommons;
        if (valuecomAdobeCqComAdobeCqUiCommons != null) {
            comAdobeCqComAdobeCqUiCommons = valuecomAdobeCqComAdobeCqUiCommons;
        } else {
            comAdobeCqComAdobeCqUiCommons = null;
        }
        String valuecomAdobeCqComAdobeCqWcmStyle = request().getQueryString("com.adobe.cq.com.adobe.cq.wcm.style");
        String comAdobeCqComAdobeCqWcmStyle;
        if (valuecomAdobeCqComAdobeCqWcmStyle != null) {
            comAdobeCqComAdobeCqWcmStyle = valuecomAdobeCqComAdobeCqWcmStyle;
        } else {
            comAdobeCqComAdobeCqWcmStyle = null;
        }
        String valuecomAdobeCqCqActivitymapIntegration = request().getQueryString("com.adobe.cq.cq-activitymap-integration");
        String comAdobeCqCqActivitymapIntegration;
        if (valuecomAdobeCqCqActivitymapIntegration != null) {
            comAdobeCqCqActivitymapIntegration = valuecomAdobeCqCqActivitymapIntegration;
        } else {
            comAdobeCqCqActivitymapIntegration = null;
        }
        String valuecomAdobeCqCqContexthubCommons = request().getQueryString("com.adobe.cq.cq-contexthub-commons");
        String comAdobeCqCqContexthubCommons;
        if (valuecomAdobeCqCqContexthubCommons != null) {
            comAdobeCqCqContexthubCommons = valuecomAdobeCqCqContexthubCommons;
        } else {
            comAdobeCqCqContexthubCommons = null;
        }
        String valuecomAdobeCqCqDtm = request().getQueryString("com.adobe.cq.cq-dtm");
        String comAdobeCqCqDtm;
        if (valuecomAdobeCqCqDtm != null) {
            comAdobeCqCqDtm = valuecomAdobeCqCqDtm;
        } else {
            comAdobeCqCqDtm = null;
        }
        String valuecomAdobeCqCqHealthcheck = request().getQueryString("com.adobe.cq.cq-healthcheck");
        String comAdobeCqCqHealthcheck;
        if (valuecomAdobeCqCqHealthcheck != null) {
            comAdobeCqCqHealthcheck = valuecomAdobeCqCqHealthcheck;
        } else {
            comAdobeCqCqHealthcheck = null;
        }
        String valuecomAdobeCqCqMultisiteTargeting = request().getQueryString("com.adobe.cq.cq-multisite-targeting");
        String comAdobeCqCqMultisiteTargeting;
        if (valuecomAdobeCqCqMultisiteTargeting != null) {
            comAdobeCqCqMultisiteTargeting = valuecomAdobeCqCqMultisiteTargeting;
        } else {
            comAdobeCqCqMultisiteTargeting = null;
        }
        String valuecomAdobeCqCqPreUpgradeCleanup = request().getQueryString("com.adobe.cq.cq-pre-upgrade-cleanup");
        String comAdobeCqCqPreUpgradeCleanup;
        if (valuecomAdobeCqCqPreUpgradeCleanup != null) {
            comAdobeCqCqPreUpgradeCleanup = valuecomAdobeCqCqPreUpgradeCleanup;
        } else {
            comAdobeCqCqPreUpgradeCleanup = null;
        }
        String valuecomAdobeCqCqProductInfoProvider = request().getQueryString("com.adobe.cq.cq-product-info-provider");
        String comAdobeCqCqProductInfoProvider;
        if (valuecomAdobeCqCqProductInfoProvider != null) {
            comAdobeCqCqProductInfoProvider = valuecomAdobeCqCqProductInfoProvider;
        } else {
            comAdobeCqCqProductInfoProvider = null;
        }
        String valuecomAdobeCqCqRestSites = request().getQueryString("com.adobe.cq.cq-rest-sites");
        String comAdobeCqCqRestSites;
        if (valuecomAdobeCqCqRestSites != null) {
            comAdobeCqCqRestSites = valuecomAdobeCqCqRestSites;
        } else {
            comAdobeCqCqRestSites = null;
        }
        String valuecomAdobeCqCqSecurityHc = request().getQueryString("com.adobe.cq.cq-security-hc");
        String comAdobeCqCqSecurityHc;
        if (valuecomAdobeCqCqSecurityHc != null) {
            comAdobeCqCqSecurityHc = valuecomAdobeCqCqSecurityHc;
        } else {
            comAdobeCqCqSecurityHc = null;
        }
        String valuecomAdobeCqDamCqDamSvgHandler = request().getQueryString("com.adobe.cq.dam.cq-dam-svg-handler");
        String comAdobeCqDamCqDamSvgHandler;
        if (valuecomAdobeCqDamCqDamSvgHandler != null) {
            comAdobeCqDamCqDamSvgHandler = valuecomAdobeCqDamCqDamSvgHandler;
        } else {
            comAdobeCqDamCqDamSvgHandler = null;
        }
        String valuecomAdobeCqDamCqScene7Imaging = request().getQueryString("com.adobe.cq.dam.cq-scene7-imaging");
        String comAdobeCqDamCqScene7Imaging;
        if (valuecomAdobeCqDamCqScene7Imaging != null) {
            comAdobeCqDamCqScene7Imaging = valuecomAdobeCqDamCqScene7Imaging;
        } else {
            comAdobeCqDamCqScene7Imaging = null;
        }
        String valuecomAdobeCqDtmReactorCore = request().getQueryString("com.adobe.cq.dtm-reactor.core");
        String comAdobeCqDtmReactorCore;
        if (valuecomAdobeCqDtmReactorCore != null) {
            comAdobeCqDtmReactorCore = valuecomAdobeCqDtmReactorCore;
        } else {
            comAdobeCqDtmReactorCore = null;
        }
        String valuecomAdobeCqDtmReactorUi = request().getQueryString("com.adobe.cq.dtm-reactor.ui");
        String comAdobeCqDtmReactorUi;
        if (valuecomAdobeCqDtmReactorUi != null) {
            comAdobeCqDtmReactorUi = valuecomAdobeCqDtmReactorUi;
        } else {
            comAdobeCqDtmReactorUi = null;
        }
        String valuecomAdobeCqExpJspelResolver = request().getQueryString("com.adobe.cq.exp-jspel-resolver");
        String comAdobeCqExpJspelResolver;
        if (valuecomAdobeCqExpJspelResolver != null) {
            comAdobeCqExpJspelResolver = valuecomAdobeCqExpJspelResolver;
        } else {
            comAdobeCqExpJspelResolver = null;
        }
        String valuecomAdobeCqInboxCqInbox = request().getQueryString("com.adobe.cq.inbox.cq-inbox");
        String comAdobeCqInboxCqInbox;
        if (valuecomAdobeCqInboxCqInbox != null) {
            comAdobeCqInboxCqInbox = valuecomAdobeCqInboxCqInbox;
        } else {
            comAdobeCqInboxCqInbox = null;
        }
        String valuecomAdobeCqJsonSchemaParser = request().getQueryString("com.adobe.cq.json-schema-parser");
        String comAdobeCqJsonSchemaParser;
        if (valuecomAdobeCqJsonSchemaParser != null) {
            comAdobeCqJsonSchemaParser = valuecomAdobeCqJsonSchemaParser;
        } else {
            comAdobeCqJsonSchemaParser = null;
        }
        String valuecomAdobeCqMediaCqMediaPublishingDpsFpCore = request().getQueryString("com.adobe.cq.media.cq-media-publishing-dps-fp-core");
        String comAdobeCqMediaCqMediaPublishingDpsFpCore;
        if (valuecomAdobeCqMediaCqMediaPublishingDpsFpCore != null) {
            comAdobeCqMediaCqMediaPublishingDpsFpCore = valuecomAdobeCqMediaCqMediaPublishingDpsFpCore;
        } else {
            comAdobeCqMediaCqMediaPublishingDpsFpCore = null;
        }
        String valuecomAdobeCqMobileCqMobileCaas = request().getQueryString("com.adobe.cq.mobile.cq-mobile-caas");
        String comAdobeCqMobileCqMobileCaas;
        if (valuecomAdobeCqMobileCqMobileCaas != null) {
            comAdobeCqMobileCqMobileCaas = valuecomAdobeCqMobileCqMobileCaas;
        } else {
            comAdobeCqMobileCqMobileCaas = null;
        }
        String valuecomAdobeCqMobileCqMobileIndexBuilder = request().getQueryString("com.adobe.cq.mobile.cq-mobile-index-builder");
        String comAdobeCqMobileCqMobileIndexBuilder;
        if (valuecomAdobeCqMobileCqMobileIndexBuilder != null) {
            comAdobeCqMobileCqMobileIndexBuilder = valuecomAdobeCqMobileCqMobileIndexBuilder;
        } else {
            comAdobeCqMobileCqMobileIndexBuilder = null;
        }
        String valuecomAdobeCqMobileCqMobilePhonegapBuild = request().getQueryString("com.adobe.cq.mobile.cq-mobile-phonegap-build");
        String comAdobeCqMobileCqMobilePhonegapBuild;
        if (valuecomAdobeCqMobileCqMobilePhonegapBuild != null) {
            comAdobeCqMobileCqMobilePhonegapBuild = valuecomAdobeCqMobileCqMobilePhonegapBuild;
        } else {
            comAdobeCqMobileCqMobilePhonegapBuild = null;
        }
        String valuecomAdobeCqMyspell = request().getQueryString("com.adobe.cq.myspell");
        String comAdobeCqMyspell;
        if (valuecomAdobeCqMyspell != null) {
            comAdobeCqMyspell = valuecomAdobeCqMyspell;
        } else {
            comAdobeCqMyspell = null;
        }
        String valuecomAdobeCqSampleWeRetailCore = request().getQueryString("com.adobe.cq.sample.we.retail.core");
        String comAdobeCqSampleWeRetailCore;
        if (valuecomAdobeCqSampleWeRetailCore != null) {
            comAdobeCqSampleWeRetailCore = valuecomAdobeCqSampleWeRetailCore;
        } else {
            comAdobeCqSampleWeRetailCore = null;
        }
        String valuecomAdobeCqScreensComAdobeCqScreensDcc = request().getQueryString("com.adobe.cq.screens.com.adobe.cq.screens.dcc");
        String comAdobeCqScreensComAdobeCqScreensDcc;
        if (valuecomAdobeCqScreensComAdobeCqScreensDcc != null) {
            comAdobeCqScreensComAdobeCqScreensDcc = valuecomAdobeCqScreensComAdobeCqScreensDcc;
        } else {
            comAdobeCqScreensComAdobeCqScreensDcc = null;
        }
        String valuecomAdobeCqScreensComAdobeCqScreensMqCore = request().getQueryString("com.adobe.cq.screens.com.adobe.cq.screens.mq.core");
        String comAdobeCqScreensComAdobeCqScreensMqCore;
        if (valuecomAdobeCqScreensComAdobeCqScreensMqCore != null) {
            comAdobeCqScreensComAdobeCqScreensMqCore = valuecomAdobeCqScreensComAdobeCqScreensMqCore;
        } else {
            comAdobeCqScreensComAdobeCqScreensMqCore = null;
        }
        String valuecomAdobeCqSocialCqSocialAsProvider = request().getQueryString("com.adobe.cq.social.cq-social-as-provider");
        String comAdobeCqSocialCqSocialAsProvider;
        if (valuecomAdobeCqSocialCqSocialAsProvider != null) {
            comAdobeCqSocialCqSocialAsProvider = valuecomAdobeCqSocialCqSocialAsProvider;
        } else {
            comAdobeCqSocialCqSocialAsProvider = null;
        }
        String valuecomAdobeCqSocialCqSocialBadgingBasicImpl = request().getQueryString("com.adobe.cq.social.cq-social-badging-basic-impl");
        String comAdobeCqSocialCqSocialBadgingBasicImpl;
        if (valuecomAdobeCqSocialCqSocialBadgingBasicImpl != null) {
            comAdobeCqSocialCqSocialBadgingBasicImpl = valuecomAdobeCqSocialCqSocialBadgingBasicImpl;
        } else {
            comAdobeCqSocialCqSocialBadgingBasicImpl = null;
        }
        String valuecomAdobeCqSocialCqSocialBadgingImpl = request().getQueryString("com.adobe.cq.social.cq-social-badging-impl");
        String comAdobeCqSocialCqSocialBadgingImpl;
        if (valuecomAdobeCqSocialCqSocialBadgingImpl != null) {
            comAdobeCqSocialCqSocialBadgingImpl = valuecomAdobeCqSocialCqSocialBadgingImpl;
        } else {
            comAdobeCqSocialCqSocialBadgingImpl = null;
        }
        String valuecomAdobeCqSocialCqSocialCalendarImpl = request().getQueryString("com.adobe.cq.social.cq-social-calendar-impl");
        String comAdobeCqSocialCqSocialCalendarImpl;
        if (valuecomAdobeCqSocialCqSocialCalendarImpl != null) {
            comAdobeCqSocialCqSocialCalendarImpl = valuecomAdobeCqSocialCqSocialCalendarImpl;
        } else {
            comAdobeCqSocialCqSocialCalendarImpl = null;
        }
        String valuecomAdobeCqSocialCqSocialContentFragmentsImpl = request().getQueryString("com.adobe.cq.social.cq-social-content-fragments-impl");
        String comAdobeCqSocialCqSocialContentFragmentsImpl;
        if (valuecomAdobeCqSocialCqSocialContentFragmentsImpl != null) {
            comAdobeCqSocialCqSocialContentFragmentsImpl = valuecomAdobeCqSocialCqSocialContentFragmentsImpl;
        } else {
            comAdobeCqSocialCqSocialContentFragmentsImpl = null;
        }
        String valuecomAdobeCqSocialCqSocialEnablementImpl = request().getQueryString("com.adobe.cq.social.cq-social-enablement-impl");
        String comAdobeCqSocialCqSocialEnablementImpl;
        if (valuecomAdobeCqSocialCqSocialEnablementImpl != null) {
            comAdobeCqSocialCqSocialEnablementImpl = valuecomAdobeCqSocialCqSocialEnablementImpl;
        } else {
            comAdobeCqSocialCqSocialEnablementImpl = null;
        }
        String valuecomAdobeCqSocialCqSocialGraphImpl = request().getQueryString("com.adobe.cq.social.cq-social-graph-impl");
        String comAdobeCqSocialCqSocialGraphImpl;
        if (valuecomAdobeCqSocialCqSocialGraphImpl != null) {
            comAdobeCqSocialCqSocialGraphImpl = valuecomAdobeCqSocialCqSocialGraphImpl;
        } else {
            comAdobeCqSocialCqSocialGraphImpl = null;
        }
        String valuecomAdobeCqSocialCqSocialIdeationImpl = request().getQueryString("com.adobe.cq.social.cq-social-ideation-impl");
        String comAdobeCqSocialCqSocialIdeationImpl;
        if (valuecomAdobeCqSocialCqSocialIdeationImpl != null) {
            comAdobeCqSocialCqSocialIdeationImpl = valuecomAdobeCqSocialCqSocialIdeationImpl;
        } else {
            comAdobeCqSocialCqSocialIdeationImpl = null;
        }
        String valuecomAdobeCqSocialCqSocialJcrProvider = request().getQueryString("com.adobe.cq.social.cq-social-jcr-provider");
        String comAdobeCqSocialCqSocialJcrProvider;
        if (valuecomAdobeCqSocialCqSocialJcrProvider != null) {
            comAdobeCqSocialCqSocialJcrProvider = valuecomAdobeCqSocialCqSocialJcrProvider;
        } else {
            comAdobeCqSocialCqSocialJcrProvider = null;
        }
        String valuecomAdobeCqSocialCqSocialMembersImpl = request().getQueryString("com.adobe.cq.social.cq-social-members-impl");
        String comAdobeCqSocialCqSocialMembersImpl;
        if (valuecomAdobeCqSocialCqSocialMembersImpl != null) {
            comAdobeCqSocialCqSocialMembersImpl = valuecomAdobeCqSocialCqSocialMembersImpl;
        } else {
            comAdobeCqSocialCqSocialMembersImpl = null;
        }
        String valuecomAdobeCqSocialCqSocialMsProvider = request().getQueryString("com.adobe.cq.social.cq-social-ms-provider");
        String comAdobeCqSocialCqSocialMsProvider;
        if (valuecomAdobeCqSocialCqSocialMsProvider != null) {
            comAdobeCqSocialCqSocialMsProvider = valuecomAdobeCqSocialCqSocialMsProvider;
        } else {
            comAdobeCqSocialCqSocialMsProvider = null;
        }
        String valuecomAdobeCqSocialCqSocialNotificationsChannelsWeb = request().getQueryString("com.adobe.cq.social.cq-social-notifications-channels-web");
        String comAdobeCqSocialCqSocialNotificationsChannelsWeb;
        if (valuecomAdobeCqSocialCqSocialNotificationsChannelsWeb != null) {
            comAdobeCqSocialCqSocialNotificationsChannelsWeb = valuecomAdobeCqSocialCqSocialNotificationsChannelsWeb;
        } else {
            comAdobeCqSocialCqSocialNotificationsChannelsWeb = null;
        }
        String valuecomAdobeCqSocialCqSocialNotificationsImpl = request().getQueryString("com.adobe.cq.social.cq-social-notifications-impl");
        String comAdobeCqSocialCqSocialNotificationsImpl;
        if (valuecomAdobeCqSocialCqSocialNotificationsImpl != null) {
            comAdobeCqSocialCqSocialNotificationsImpl = valuecomAdobeCqSocialCqSocialNotificationsImpl;
        } else {
            comAdobeCqSocialCqSocialNotificationsImpl = null;
        }
        String valuecomAdobeCqSocialCqSocialRdbProvider = request().getQueryString("com.adobe.cq.social.cq-social-rdb-provider");
        String comAdobeCqSocialCqSocialRdbProvider;
        if (valuecomAdobeCqSocialCqSocialRdbProvider != null) {
            comAdobeCqSocialCqSocialRdbProvider = valuecomAdobeCqSocialCqSocialRdbProvider;
        } else {
            comAdobeCqSocialCqSocialRdbProvider = null;
        }
        String valuecomAdobeCqSocialCqSocialScfImpl = request().getQueryString("com.adobe.cq.social.cq-social-scf-impl");
        String comAdobeCqSocialCqSocialScfImpl;
        if (valuecomAdobeCqSocialCqSocialScfImpl != null) {
            comAdobeCqSocialCqSocialScfImpl = valuecomAdobeCqSocialCqSocialScfImpl;
        } else {
            comAdobeCqSocialCqSocialScfImpl = null;
        }
        String valuecomAdobeCqSocialCqSocialScoringBasicImpl = request().getQueryString("com.adobe.cq.social.cq-social-scoring-basic-impl");
        String comAdobeCqSocialCqSocialScoringBasicImpl;
        if (valuecomAdobeCqSocialCqSocialScoringBasicImpl != null) {
            comAdobeCqSocialCqSocialScoringBasicImpl = valuecomAdobeCqSocialCqSocialScoringBasicImpl;
        } else {
            comAdobeCqSocialCqSocialScoringBasicImpl = null;
        }
        String valuecomAdobeCqSocialCqSocialScoringImpl = request().getQueryString("com.adobe.cq.social.cq-social-scoring-impl");
        String comAdobeCqSocialCqSocialScoringImpl;
        if (valuecomAdobeCqSocialCqSocialScoringImpl != null) {
            comAdobeCqSocialCqSocialScoringImpl = valuecomAdobeCqSocialCqSocialScoringImpl;
        } else {
            comAdobeCqSocialCqSocialScoringImpl = null;
        }
        String valuecomAdobeCqSocialCqSocialServiceusersImpl = request().getQueryString("com.adobe.cq.social.cq-social-serviceusers-impl");
        String comAdobeCqSocialCqSocialServiceusersImpl;
        if (valuecomAdobeCqSocialCqSocialServiceusersImpl != null) {
            comAdobeCqSocialCqSocialServiceusersImpl = valuecomAdobeCqSocialCqSocialServiceusersImpl;
        } else {
            comAdobeCqSocialCqSocialServiceusersImpl = null;
        }
        String valuecomAdobeCqSocialCqSocialSrpImpl = request().getQueryString("com.adobe.cq.social.cq-social-srp-impl");
        String comAdobeCqSocialCqSocialSrpImpl;
        if (valuecomAdobeCqSocialCqSocialSrpImpl != null) {
            comAdobeCqSocialCqSocialSrpImpl = valuecomAdobeCqSocialCqSocialSrpImpl;
        } else {
            comAdobeCqSocialCqSocialSrpImpl = null;
        }
        String valuecomAdobeCqSocialCqSocialUgcbaseImpl = request().getQueryString("com.adobe.cq.social.cq-social-ugcbase-impl");
        String comAdobeCqSocialCqSocialUgcbaseImpl;
        if (valuecomAdobeCqSocialCqSocialUgcbaseImpl != null) {
            comAdobeCqSocialCqSocialUgcbaseImpl = valuecomAdobeCqSocialCqSocialUgcbaseImpl;
        } else {
            comAdobeCqSocialCqSocialUgcbaseImpl = null;
        }
        String valuecomAdobeDamCqDamCfmImpl = request().getQueryString("com.adobe.dam.cq-dam-cfm-impl");
        String comAdobeDamCqDamCfmImpl;
        if (valuecomAdobeDamCqDamCfmImpl != null) {
            comAdobeDamCqDamCfmImpl = valuecomAdobeDamCqDamCfmImpl;
        } else {
            comAdobeDamCqDamCfmImpl = null;
        }
        String valuecomAdobeFormsFoundationFormsFoundationBase = request().getQueryString("com.adobe.forms.foundation-forms-foundation-base");
        String comAdobeFormsFoundationFormsFoundationBase;
        if (valuecomAdobeFormsFoundationFormsFoundationBase != null) {
            comAdobeFormsFoundationFormsFoundationBase = valuecomAdobeFormsFoundationFormsFoundationBase;
        } else {
            comAdobeFormsFoundationFormsFoundationBase = null;
        }
        String valuecomAdobeGraniteApicontroller = request().getQueryString("com.adobe.granite.apicontroller");
        String comAdobeGraniteApicontroller;
        if (valuecomAdobeGraniteApicontroller != null) {
            comAdobeGraniteApicontroller = valuecomAdobeGraniteApicontroller;
        } else {
            comAdobeGraniteApicontroller = null;
        }
        String valuecomAdobeGraniteAssetCore = request().getQueryString("com.adobe.granite.asset.core");
        String comAdobeGraniteAssetCore;
        if (valuecomAdobeGraniteAssetCore != null) {
            comAdobeGraniteAssetCore = valuecomAdobeGraniteAssetCore;
        } else {
            comAdobeGraniteAssetCore = null;
        }
        String valuecomAdobeGraniteAuthSso = request().getQueryString("com.adobe.granite.auth.sso");
        String comAdobeGraniteAuthSso;
        if (valuecomAdobeGraniteAuthSso != null) {
            comAdobeGraniteAuthSso = valuecomAdobeGraniteAuthSso;
        } else {
            comAdobeGraniteAuthSso = null;
        }
        String valuecomAdobeGraniteBundlesHcImpl = request().getQueryString("com.adobe.granite.bundles.hc.impl");
        String comAdobeGraniteBundlesHcImpl;
        if (valuecomAdobeGraniteBundlesHcImpl != null) {
            comAdobeGraniteBundlesHcImpl = valuecomAdobeGraniteBundlesHcImpl;
        } else {
            comAdobeGraniteBundlesHcImpl = null;
        }
        String valuecomAdobeGraniteCompatRouter = request().getQueryString("com.adobe.granite.compat-router");
        String comAdobeGraniteCompatRouter;
        if (valuecomAdobeGraniteCompatRouter != null) {
            comAdobeGraniteCompatRouter = valuecomAdobeGraniteCompatRouter;
        } else {
            comAdobeGraniteCompatRouter = null;
        }
        String valuecomAdobeGraniteConf = request().getQueryString("com.adobe.granite.conf");
        String comAdobeGraniteConf;
        if (valuecomAdobeGraniteConf != null) {
            comAdobeGraniteConf = valuecomAdobeGraniteConf;
        } else {
            comAdobeGraniteConf = null;
        }
        String valuecomAdobeGraniteConfUiCore = request().getQueryString("com.adobe.granite.conf.ui.core");
        String comAdobeGraniteConfUiCore;
        if (valuecomAdobeGraniteConfUiCore != null) {
            comAdobeGraniteConfUiCore = valuecomAdobeGraniteConfUiCore;
        } else {
            comAdobeGraniteConfUiCore = null;
        }
        String valuecomAdobeGraniteCors = request().getQueryString("com.adobe.granite.cors");
        String comAdobeGraniteCors;
        if (valuecomAdobeGraniteCors != null) {
            comAdobeGraniteCors = valuecomAdobeGraniteCors;
        } else {
            comAdobeGraniteCors = null;
        }
        String valuecomAdobeGraniteCrxExplorer = request().getQueryString("com.adobe.granite.crx-explorer");
        String comAdobeGraniteCrxExplorer;
        if (valuecomAdobeGraniteCrxExplorer != null) {
            comAdobeGraniteCrxExplorer = valuecomAdobeGraniteCrxExplorer;
        } else {
            comAdobeGraniteCrxExplorer = null;
        }
        String valuecomAdobeGraniteCrxdeLite = request().getQueryString("com.adobe.granite.crxde-lite");
        String comAdobeGraniteCrxdeLite;
        if (valuecomAdobeGraniteCrxdeLite != null) {
            comAdobeGraniteCrxdeLite = valuecomAdobeGraniteCrxdeLite;
        } else {
            comAdobeGraniteCrxdeLite = null;
        }
        String valuecomAdobeGraniteCryptoConfig = request().getQueryString("com.adobe.granite.crypto.config");
        String comAdobeGraniteCryptoConfig;
        if (valuecomAdobeGraniteCryptoConfig != null) {
            comAdobeGraniteCryptoConfig = valuecomAdobeGraniteCryptoConfig;
        } else {
            comAdobeGraniteCryptoConfig = null;
        }
        String valuecomAdobeGraniteCryptoExtension = request().getQueryString("com.adobe.granite.crypto.extension");
        String comAdobeGraniteCryptoExtension;
        if (valuecomAdobeGraniteCryptoExtension != null) {
            comAdobeGraniteCryptoExtension = valuecomAdobeGraniteCryptoExtension;
        } else {
            comAdobeGraniteCryptoExtension = null;
        }
        String valuecomAdobeGraniteCryptoFile = request().getQueryString("com.adobe.granite.crypto.file");
        String comAdobeGraniteCryptoFile;
        if (valuecomAdobeGraniteCryptoFile != null) {
            comAdobeGraniteCryptoFile = valuecomAdobeGraniteCryptoFile;
        } else {
            comAdobeGraniteCryptoFile = null;
        }
        String valuecomAdobeGraniteCryptoJcr = request().getQueryString("com.adobe.granite.crypto.jcr");
        String comAdobeGraniteCryptoJcr;
        if (valuecomAdobeGraniteCryptoJcr != null) {
            comAdobeGraniteCryptoJcr = valuecomAdobeGraniteCryptoJcr;
        } else {
            comAdobeGraniteCryptoJcr = null;
        }
        String valuecomAdobeGraniteCsrf = request().getQueryString("com.adobe.granite.csrf");
        String comAdobeGraniteCsrf;
        if (valuecomAdobeGraniteCsrf != null) {
            comAdobeGraniteCsrf = valuecomAdobeGraniteCsrf;
        } else {
            comAdobeGraniteCsrf = null;
        }
        String valuecomAdobeGraniteDistributionCore = request().getQueryString("com.adobe.granite.distribution.core");
        String comAdobeGraniteDistributionCore;
        if (valuecomAdobeGraniteDistributionCore != null) {
            comAdobeGraniteDistributionCore = valuecomAdobeGraniteDistributionCore;
        } else {
            comAdobeGraniteDistributionCore = null;
        }
        String valuecomAdobeGraniteDropwizardMetrics = request().getQueryString("com.adobe.granite.dropwizard.metrics");
        String comAdobeGraniteDropwizardMetrics;
        if (valuecomAdobeGraniteDropwizardMetrics != null) {
            comAdobeGraniteDropwizardMetrics = valuecomAdobeGraniteDropwizardMetrics;
        } else {
            comAdobeGraniteDropwizardMetrics = null;
        }
        String valuecomAdobeGraniteFragsImpl = request().getQueryString("com.adobe.granite.frags.impl");
        String comAdobeGraniteFragsImpl;
        if (valuecomAdobeGraniteFragsImpl != null) {
            comAdobeGraniteFragsImpl = valuecomAdobeGraniteFragsImpl;
        } else {
            comAdobeGraniteFragsImpl = null;
        }
        String valuecomAdobeGraniteGibson = request().getQueryString("com.adobe.granite.gibson");
        String comAdobeGraniteGibson;
        if (valuecomAdobeGraniteGibson != null) {
            comAdobeGraniteGibson = valuecomAdobeGraniteGibson;
        } else {
            comAdobeGraniteGibson = null;
        }
        String valuecomAdobeGraniteInfocollector = request().getQueryString("com.adobe.granite.infocollector");
        String comAdobeGraniteInfocollector;
        if (valuecomAdobeGraniteInfocollector != null) {
            comAdobeGraniteInfocollector = valuecomAdobeGraniteInfocollector;
        } else {
            comAdobeGraniteInfocollector = null;
        }
        String valuecomAdobeGraniteInstallerFactoryPackages = request().getQueryString("com.adobe.granite.installer.factory.packages");
        String comAdobeGraniteInstallerFactoryPackages;
        if (valuecomAdobeGraniteInstallerFactoryPackages != null) {
            comAdobeGraniteInstallerFactoryPackages = valuecomAdobeGraniteInstallerFactoryPackages;
        } else {
            comAdobeGraniteInstallerFactoryPackages = null;
        }
        String valuecomAdobeGraniteJettySsl = request().getQueryString("com.adobe.granite.jetty.ssl");
        String comAdobeGraniteJettySsl;
        if (valuecomAdobeGraniteJettySsl != null) {
            comAdobeGraniteJettySsl = valuecomAdobeGraniteJettySsl;
        } else {
            comAdobeGraniteJettySsl = null;
        }
        String valuecomAdobeGraniteJobsAsync = request().getQueryString("com.adobe.granite.jobs.async");
        String comAdobeGraniteJobsAsync;
        if (valuecomAdobeGraniteJobsAsync != null) {
            comAdobeGraniteJobsAsync = valuecomAdobeGraniteJobsAsync;
        } else {
            comAdobeGraniteJobsAsync = null;
        }
        String valuecomAdobeGraniteMaintenanceOak = request().getQueryString("com.adobe.granite.maintenance.oak");
        String comAdobeGraniteMaintenanceOak;
        if (valuecomAdobeGraniteMaintenanceOak != null) {
            comAdobeGraniteMaintenanceOak = valuecomAdobeGraniteMaintenanceOak;
        } else {
            comAdobeGraniteMaintenanceOak = null;
        }
        String valuecomAdobeGraniteMonitoringCore = request().getQueryString("com.adobe.granite.monitoring.core");
        String comAdobeGraniteMonitoringCore;
        if (valuecomAdobeGraniteMonitoringCore != null) {
            comAdobeGraniteMonitoringCore = valuecomAdobeGraniteMonitoringCore;
        } else {
            comAdobeGraniteMonitoringCore = null;
        }
        String valuecomAdobeGraniteQueries = request().getQueryString("com.adobe.granite.queries");
        String comAdobeGraniteQueries;
        if (valuecomAdobeGraniteQueries != null) {
            comAdobeGraniteQueries = valuecomAdobeGraniteQueries;
        } else {
            comAdobeGraniteQueries = null;
        }
        String valuecomAdobeGraniteReplicationHcImpl = request().getQueryString("com.adobe.granite.replication.hc.impl");
        String comAdobeGraniteReplicationHcImpl;
        if (valuecomAdobeGraniteReplicationHcImpl != null) {
            comAdobeGraniteReplicationHcImpl = valuecomAdobeGraniteReplicationHcImpl;
        } else {
            comAdobeGraniteReplicationHcImpl = null;
        }
        String valuecomAdobeGraniteRepositoryChecker = request().getQueryString("com.adobe.granite.repository.checker");
        String comAdobeGraniteRepositoryChecker;
        if (valuecomAdobeGraniteRepositoryChecker != null) {
            comAdobeGraniteRepositoryChecker = valuecomAdobeGraniteRepositoryChecker;
        } else {
            comAdobeGraniteRepositoryChecker = null;
        }
        String valuecomAdobeGraniteRepositoryHcImpl = request().getQueryString("com.adobe.granite.repository.hc.impl");
        String comAdobeGraniteRepositoryHcImpl;
        if (valuecomAdobeGraniteRepositoryHcImpl != null) {
            comAdobeGraniteRepositoryHcImpl = valuecomAdobeGraniteRepositoryHcImpl;
        } else {
            comAdobeGraniteRepositoryHcImpl = null;
        }
        String valuecomAdobeGraniteRestAssets = request().getQueryString("com.adobe.granite.rest.assets");
        String comAdobeGraniteRestAssets;
        if (valuecomAdobeGraniteRestAssets != null) {
            comAdobeGraniteRestAssets = valuecomAdobeGraniteRestAssets;
        } else {
            comAdobeGraniteRestAssets = null;
        }
        String valuecomAdobeGraniteSecurityUi = request().getQueryString("com.adobe.granite.security.ui");
        String comAdobeGraniteSecurityUi;
        if (valuecomAdobeGraniteSecurityUi != null) {
            comAdobeGraniteSecurityUi = valuecomAdobeGraniteSecurityUi;
        } else {
            comAdobeGraniteSecurityUi = null;
        }
        String valuecomAdobeGraniteStartup = request().getQueryString("com.adobe.granite.startup");
        String comAdobeGraniteStartup;
        if (valuecomAdobeGraniteStartup != null) {
            comAdobeGraniteStartup = valuecomAdobeGraniteStartup;
        } else {
            comAdobeGraniteStartup = null;
        }
        String valuecomAdobeGraniteTagsoup = request().getQueryString("com.adobe.granite.tagsoup");
        String comAdobeGraniteTagsoup;
        if (valuecomAdobeGraniteTagsoup != null) {
            comAdobeGraniteTagsoup = valuecomAdobeGraniteTagsoup;
        } else {
            comAdobeGraniteTagsoup = null;
        }
        String valuecomAdobeGraniteTaskmanagementCore = request().getQueryString("com.adobe.granite.taskmanagement.core");
        String comAdobeGraniteTaskmanagementCore;
        if (valuecomAdobeGraniteTaskmanagementCore != null) {
            comAdobeGraniteTaskmanagementCore = valuecomAdobeGraniteTaskmanagementCore;
        } else {
            comAdobeGraniteTaskmanagementCore = null;
        }
        String valuecomAdobeGraniteTaskmanagementWorkflow = request().getQueryString("com.adobe.granite.taskmanagement.workflow");
        String comAdobeGraniteTaskmanagementWorkflow;
        if (valuecomAdobeGraniteTaskmanagementWorkflow != null) {
            comAdobeGraniteTaskmanagementWorkflow = valuecomAdobeGraniteTaskmanagementWorkflow;
        } else {
            comAdobeGraniteTaskmanagementWorkflow = null;
        }
        String valuecomAdobeGraniteUiClientlibsCompilerLess = request().getQueryString("com.adobe.granite.ui.clientlibs.compiler.less");
        String comAdobeGraniteUiClientlibsCompilerLess;
        if (valuecomAdobeGraniteUiClientlibsCompilerLess != null) {
            comAdobeGraniteUiClientlibsCompilerLess = valuecomAdobeGraniteUiClientlibsCompilerLess;
        } else {
            comAdobeGraniteUiClientlibsCompilerLess = null;
        }
        String valuecomAdobeGraniteUiClientlibsProcessorGcc = request().getQueryString("com.adobe.granite.ui.clientlibs.processor.gcc");
        String comAdobeGraniteUiClientlibsProcessorGcc;
        if (valuecomAdobeGraniteUiClientlibsProcessorGcc != null) {
            comAdobeGraniteUiClientlibsProcessorGcc = valuecomAdobeGraniteUiClientlibsProcessorGcc;
        } else {
            comAdobeGraniteUiClientlibsProcessorGcc = null;
        }
        String valuecomAdobeGraniteWebconsolePlugins = request().getQueryString("com.adobe.granite.webconsole.plugins");
        String comAdobeGraniteWebconsolePlugins;
        if (valuecomAdobeGraniteWebconsolePlugins != null) {
            comAdobeGraniteWebconsolePlugins = valuecomAdobeGraniteWebconsolePlugins;
        } else {
            comAdobeGraniteWebconsolePlugins = null;
        }
        String valuecomAdobeGraniteWorkflowConsole = request().getQueryString("com.adobe.granite.workflow.console");
        String comAdobeGraniteWorkflowConsole;
        if (valuecomAdobeGraniteWorkflowConsole != null) {
            comAdobeGraniteWorkflowConsole = valuecomAdobeGraniteWorkflowConsole;
        } else {
            comAdobeGraniteWorkflowConsole = null;
        }
        String valuecomAdobeXmpWorkerFilesNativeFragmentLinux = request().getQueryString("com.adobe.xmp.worker.files.native.fragment.linux");
        String comAdobeXmpWorkerFilesNativeFragmentLinux;
        if (valuecomAdobeXmpWorkerFilesNativeFragmentLinux != null) {
            comAdobeXmpWorkerFilesNativeFragmentLinux = valuecomAdobeXmpWorkerFilesNativeFragmentLinux;
        } else {
            comAdobeXmpWorkerFilesNativeFragmentLinux = null;
        }
        String valuecomAdobeXmpWorkerFilesNativeFragmentMacosx = request().getQueryString("com.adobe.xmp.worker.files.native.fragment.macosx");
        String comAdobeXmpWorkerFilesNativeFragmentMacosx;
        if (valuecomAdobeXmpWorkerFilesNativeFragmentMacosx != null) {
            comAdobeXmpWorkerFilesNativeFragmentMacosx = valuecomAdobeXmpWorkerFilesNativeFragmentMacosx;
        } else {
            comAdobeXmpWorkerFilesNativeFragmentMacosx = null;
        }
        String valuecomAdobeXmpWorkerFilesNativeFragmentWin = request().getQueryString("com.adobe.xmp.worker.files.native.fragment.win");
        String comAdobeXmpWorkerFilesNativeFragmentWin;
        if (valuecomAdobeXmpWorkerFilesNativeFragmentWin != null) {
            comAdobeXmpWorkerFilesNativeFragmentWin = valuecomAdobeXmpWorkerFilesNativeFragmentWin;
        } else {
            comAdobeXmpWorkerFilesNativeFragmentWin = null;
        }
        String valuecomDayCommonsOsgiWrapperSimpleJndi = request().getQueryString("com.day.commons.osgi.wrapper.simple-jndi");
        String comDayCommonsOsgiWrapperSimpleJndi;
        if (valuecomDayCommonsOsgiWrapperSimpleJndi != null) {
            comDayCommonsOsgiWrapperSimpleJndi = valuecomDayCommonsOsgiWrapperSimpleJndi;
        } else {
            comDayCommonsOsgiWrapperSimpleJndi = null;
        }
        String valuecomDayCqCqAuthhandler = request().getQueryString("com.day.cq.cq-authhandler");
        String comDayCqCqAuthhandler;
        if (valuecomDayCqCqAuthhandler != null) {
            comDayCqCqAuthhandler = valuecomDayCqCqAuthhandler;
        } else {
            comDayCqCqAuthhandler = null;
        }
        String valuecomDayCqCqCompatConfigupdate = request().getQueryString("com.day.cq.cq-compat-configupdate");
        String comDayCqCqCompatConfigupdate;
        if (valuecomDayCqCqCompatConfigupdate != null) {
            comDayCqCqCompatConfigupdate = valuecomDayCqCqCompatConfigupdate;
        } else {
            comDayCqCqCompatConfigupdate = null;
        }
        String valuecomDayCqCqLicensebranding = request().getQueryString("com.day.cq.cq-licensebranding");
        String comDayCqCqLicensebranding;
        if (valuecomDayCqCqLicensebranding != null) {
            comDayCqCqLicensebranding = valuecomDayCqCqLicensebranding;
        } else {
            comDayCqCqLicensebranding = null;
        }
        String valuecomDayCqCqNotifcationImpl = request().getQueryString("com.day.cq.cq-notifcation-impl");
        String comDayCqCqNotifcationImpl;
        if (valuecomDayCqCqNotifcationImpl != null) {
            comDayCqCqNotifcationImpl = valuecomDayCqCqNotifcationImpl;
        } else {
            comDayCqCqNotifcationImpl = null;
        }
        String valuecomDayCqCqReplicationAudit = request().getQueryString("com.day.cq.cq-replication-audit");
        String comDayCqCqReplicationAudit;
        if (valuecomDayCqCqReplicationAudit != null) {
            comDayCqCqReplicationAudit = valuecomDayCqCqReplicationAudit;
        } else {
            comDayCqCqReplicationAudit = null;
        }
        String valuecomDayCqCqSearchExt = request().getQueryString("com.day.cq.cq-search-ext");
        String comDayCqCqSearchExt;
        if (valuecomDayCqCqSearchExt != null) {
            comDayCqCqSearchExt = valuecomDayCqCqSearchExt;
        } else {
            comDayCqCqSearchExt = null;
        }
        String valuecomDayCqDamCqDamAnnotationPrint = request().getQueryString("com.day.cq.dam.cq-dam-annotation-print");
        String comDayCqDamCqDamAnnotationPrint;
        if (valuecomDayCqDamCqDamAnnotationPrint != null) {
            comDayCqDamCqDamAnnotationPrint = valuecomDayCqDamCqDamAnnotationPrint;
        } else {
            comDayCqDamCqDamAnnotationPrint = null;
        }
        String valuecomDayCqDamCqDamAssetUsage = request().getQueryString("com.day.cq.dam.cq-dam-asset-usage");
        String comDayCqDamCqDamAssetUsage;
        if (valuecomDayCqDamCqDamAssetUsage != null) {
            comDayCqDamCqDamAssetUsage = valuecomDayCqDamCqDamAssetUsage;
        } else {
            comDayCqDamCqDamAssetUsage = null;
        }
        String valuecomDayCqDamCqDamS7dam = request().getQueryString("com.day.cq.dam.cq-dam-s7dam");
        String comDayCqDamCqDamS7dam;
        if (valuecomDayCqDamCqDamS7dam != null) {
            comDayCqDamCqDamS7dam = valuecomDayCqDamCqDamS7dam;
        } else {
            comDayCqDamCqDamS7dam = null;
        }
        String valuecomDayCqDamCqDamSimilaritysearch = request().getQueryString("com.day.cq.dam.cq-dam-similaritysearch");
        String comDayCqDamCqDamSimilaritysearch;
        if (valuecomDayCqDamCqDamSimilaritysearch != null) {
            comDayCqDamCqDamSimilaritysearch = valuecomDayCqDamCqDamSimilaritysearch;
        } else {
            comDayCqDamCqDamSimilaritysearch = null;
        }
        String valuecomDayCqDamDamWebdavSupport = request().getQueryString("com.day.cq.dam.dam-webdav-support");
        String comDayCqDamDamWebdavSupport;
        if (valuecomDayCqDamDamWebdavSupport != null) {
            comDayCqDamDamWebdavSupport = valuecomDayCqDamDamWebdavSupport;
        } else {
            comDayCqDamDamWebdavSupport = null;
        }
        String valuecomDayCqPreUpgradeTasks = request().getQueryString("com.day.cq.pre-upgrade-tasks");
        String comDayCqPreUpgradeTasks;
        if (valuecomDayCqPreUpgradeTasks != null) {
            comDayCqPreUpgradeTasks = valuecomDayCqPreUpgradeTasks;
        } else {
            comDayCqPreUpgradeTasks = null;
        }
        String valuecomDayCqReplicationExtensions = request().getQueryString("com.day.cq.replication.extensions");
        String comDayCqReplicationExtensions;
        if (valuecomDayCqReplicationExtensions != null) {
            comDayCqReplicationExtensions = valuecomDayCqReplicationExtensions;
        } else {
            comDayCqReplicationExtensions = null;
        }
        String valuecomDayCqWcmCqMsmCore = request().getQueryString("com.day.cq.wcm.cq-msm-core");
        String comDayCqWcmCqMsmCore;
        if (valuecomDayCqWcmCqMsmCore != null) {
            comDayCqWcmCqMsmCore = valuecomDayCqWcmCqMsmCore;
        } else {
            comDayCqWcmCqMsmCore = null;
        }
        String valuecomDayCqWcmCqWcmTranslation = request().getQueryString("com.day.cq.wcm.cq-wcm-translation");
        String comDayCqWcmCqWcmTranslation;
        if (valuecomDayCqWcmCqWcmTranslation != null) {
            comDayCqWcmCqWcmTranslation = valuecomDayCqWcmCqWcmTranslation;
        } else {
            comDayCqWcmCqWcmTranslation = null;
        }
        String valuedayCommonsJrawio = request().getQueryString("day-commons-jrawio");
        String dayCommonsJrawio;
        if (valuedayCommonsJrawio != null) {
            dayCommonsJrawio = valuedayCommonsJrawio;
        } else {
            dayCommonsJrawio = null;
        }
        String valueorgApacheAriesJmxWhiteboard = request().getQueryString("org.apache.aries.jmx.whiteboard");
        String orgApacheAriesJmxWhiteboard;
        if (valueorgApacheAriesJmxWhiteboard != null) {
            orgApacheAriesJmxWhiteboard = valueorgApacheAriesJmxWhiteboard;
        } else {
            orgApacheAriesJmxWhiteboard = null;
        }
        String valueorgApacheFelixHttpSslfilter = request().getQueryString("org.apache.felix.http.sslfilter");
        String orgApacheFelixHttpSslfilter;
        if (valueorgApacheFelixHttpSslfilter != null) {
            orgApacheFelixHttpSslfilter = valueorgApacheFelixHttpSslfilter;
        } else {
            orgApacheFelixHttpSslfilter = null;
        }
        String valueorgApacheFelixOrgApacheFelixThreaddump = request().getQueryString("org.apache.felix.org.apache.felix.threaddump");
        String orgApacheFelixOrgApacheFelixThreaddump;
        if (valueorgApacheFelixOrgApacheFelixThreaddump != null) {
            orgApacheFelixOrgApacheFelixThreaddump = valueorgApacheFelixOrgApacheFelixThreaddump;
        } else {
            orgApacheFelixOrgApacheFelixThreaddump = null;
        }
        String valueorgApacheFelixWebconsolePluginsDs = request().getQueryString("org.apache.felix.webconsole.plugins.ds");
        String orgApacheFelixWebconsolePluginsDs;
        if (valueorgApacheFelixWebconsolePluginsDs != null) {
            orgApacheFelixWebconsolePluginsDs = valueorgApacheFelixWebconsolePluginsDs;
        } else {
            orgApacheFelixWebconsolePluginsDs = null;
        }
        String valueorgApacheFelixWebconsolePluginsEvent = request().getQueryString("org.apache.felix.webconsole.plugins.event");
        String orgApacheFelixWebconsolePluginsEvent;
        if (valueorgApacheFelixWebconsolePluginsEvent != null) {
            orgApacheFelixWebconsolePluginsEvent = valueorgApacheFelixWebconsolePluginsEvent;
        } else {
            orgApacheFelixWebconsolePluginsEvent = null;
        }
        String valueorgApacheFelixWebconsolePluginsMemoryusage = request().getQueryString("org.apache.felix.webconsole.plugins.memoryusage");
        String orgApacheFelixWebconsolePluginsMemoryusage;
        if (valueorgApacheFelixWebconsolePluginsMemoryusage != null) {
            orgApacheFelixWebconsolePluginsMemoryusage = valueorgApacheFelixWebconsolePluginsMemoryusage;
        } else {
            orgApacheFelixWebconsolePluginsMemoryusage = null;
        }
        String valueorgApacheFelixWebconsolePluginsPackageadmin = request().getQueryString("org.apache.felix.webconsole.plugins.packageadmin");
        String orgApacheFelixWebconsolePluginsPackageadmin;
        if (valueorgApacheFelixWebconsolePluginsPackageadmin != null) {
            orgApacheFelixWebconsolePluginsPackageadmin = valueorgApacheFelixWebconsolePluginsPackageadmin;
        } else {
            orgApacheFelixWebconsolePluginsPackageadmin = null;
        }
        String valueorgApacheJackrabbitOakAuthLdap = request().getQueryString("org.apache.jackrabbit.oak-auth-ldap");
        String orgApacheJackrabbitOakAuthLdap;
        if (valueorgApacheJackrabbitOakAuthLdap != null) {
            orgApacheJackrabbitOakAuthLdap = valueorgApacheJackrabbitOakAuthLdap;
        } else {
            orgApacheJackrabbitOakAuthLdap = null;
        }
        String valueorgApacheJackrabbitOakSegmentTar = request().getQueryString("org.apache.jackrabbit.oak-segment-tar");
        String orgApacheJackrabbitOakSegmentTar;
        if (valueorgApacheJackrabbitOakSegmentTar != null) {
            orgApacheJackrabbitOakSegmentTar = valueorgApacheJackrabbitOakSegmentTar;
        } else {
            orgApacheJackrabbitOakSegmentTar = null;
        }
        String valueorgApacheJackrabbitOakSolrOsgi = request().getQueryString("org.apache.jackrabbit.oak-solr-osgi");
        String orgApacheJackrabbitOakSolrOsgi;
        if (valueorgApacheJackrabbitOakSolrOsgi != null) {
            orgApacheJackrabbitOakSolrOsgi = valueorgApacheJackrabbitOakSolrOsgi;
        } else {
            orgApacheJackrabbitOakSolrOsgi = null;
        }
        String valueorgApacheSlingBundleresourceImpl = request().getQueryString("org.apache.sling.bundleresource.impl");
        String orgApacheSlingBundleresourceImpl;
        if (valueorgApacheSlingBundleresourceImpl != null) {
            orgApacheSlingBundleresourceImpl = valueorgApacheSlingBundleresourceImpl;
        } else {
            orgApacheSlingBundleresourceImpl = null;
        }
        String valueorgApacheSlingCommonsFsclassloader = request().getQueryString("org.apache.sling.commons.fsclassloader");
        String orgApacheSlingCommonsFsclassloader;
        if (valueorgApacheSlingCommonsFsclassloader != null) {
            orgApacheSlingCommonsFsclassloader = valueorgApacheSlingCommonsFsclassloader;
        } else {
            orgApacheSlingCommonsFsclassloader = null;
        }
        String valueorgApacheSlingCommonsLogWebconsole = request().getQueryString("org.apache.sling.commons.log.webconsole");
        String orgApacheSlingCommonsLogWebconsole;
        if (valueorgApacheSlingCommonsLogWebconsole != null) {
            orgApacheSlingCommonsLogWebconsole = valueorgApacheSlingCommonsLogWebconsole;
        } else {
            orgApacheSlingCommonsLogWebconsole = null;
        }
        String valueorgApacheSlingDatasource = request().getQueryString("org.apache.sling.datasource");
        String orgApacheSlingDatasource;
        if (valueorgApacheSlingDatasource != null) {
            orgApacheSlingDatasource = valueorgApacheSlingDatasource;
        } else {
            orgApacheSlingDatasource = null;
        }
        String valueorgApacheSlingDiscoveryBase = request().getQueryString("org.apache.sling.discovery.base");
        String orgApacheSlingDiscoveryBase;
        if (valueorgApacheSlingDiscoveryBase != null) {
            orgApacheSlingDiscoveryBase = valueorgApacheSlingDiscoveryBase;
        } else {
            orgApacheSlingDiscoveryBase = null;
        }
        String valueorgApacheSlingDiscoveryOak = request().getQueryString("org.apache.sling.discovery.oak");
        String orgApacheSlingDiscoveryOak;
        if (valueorgApacheSlingDiscoveryOak != null) {
            orgApacheSlingDiscoveryOak = valueorgApacheSlingDiscoveryOak;
        } else {
            orgApacheSlingDiscoveryOak = null;
        }
        String valueorgApacheSlingDiscoverySupport = request().getQueryString("org.apache.sling.discovery.support");
        String orgApacheSlingDiscoverySupport;
        if (valueorgApacheSlingDiscoverySupport != null) {
            orgApacheSlingDiscoverySupport = valueorgApacheSlingDiscoverySupport;
        } else {
            orgApacheSlingDiscoverySupport = null;
        }
        String valueorgApacheSlingDistributionApi = request().getQueryString("org.apache.sling.distribution.api");
        String orgApacheSlingDistributionApi;
        if (valueorgApacheSlingDistributionApi != null) {
            orgApacheSlingDistributionApi = valueorgApacheSlingDistributionApi;
        } else {
            orgApacheSlingDistributionApi = null;
        }
        String valueorgApacheSlingDistributionCore = request().getQueryString("org.apache.sling.distribution.core");
        String orgApacheSlingDistributionCore;
        if (valueorgApacheSlingDistributionCore != null) {
            orgApacheSlingDistributionCore = valueorgApacheSlingDistributionCore;
        } else {
            orgApacheSlingDistributionCore = null;
        }
        String valueorgApacheSlingExtensionsWebconsolesecurityprovider = request().getQueryString("org.apache.sling.extensions.webconsolesecurityprovider");
        String orgApacheSlingExtensionsWebconsolesecurityprovider;
        if (valueorgApacheSlingExtensionsWebconsolesecurityprovider != null) {
            orgApacheSlingExtensionsWebconsolesecurityprovider = valueorgApacheSlingExtensionsWebconsolesecurityprovider;
        } else {
            orgApacheSlingExtensionsWebconsolesecurityprovider = null;
        }
        String valueorgApacheSlingHcWebconsole = request().getQueryString("org.apache.sling.hc.webconsole");
        String orgApacheSlingHcWebconsole;
        if (valueorgApacheSlingHcWebconsole != null) {
            orgApacheSlingHcWebconsole = valueorgApacheSlingHcWebconsole;
        } else {
            orgApacheSlingHcWebconsole = null;
        }
        String valueorgApacheSlingInstallerConsole = request().getQueryString("org.apache.sling.installer.console");
        String orgApacheSlingInstallerConsole;
        if (valueorgApacheSlingInstallerConsole != null) {
            orgApacheSlingInstallerConsole = valueorgApacheSlingInstallerConsole;
        } else {
            orgApacheSlingInstallerConsole = null;
        }
        String valueorgApacheSlingInstallerProviderFile = request().getQueryString("org.apache.sling.installer.provider.file");
        String orgApacheSlingInstallerProviderFile;
        if (valueorgApacheSlingInstallerProviderFile != null) {
            orgApacheSlingInstallerProviderFile = valueorgApacheSlingInstallerProviderFile;
        } else {
            orgApacheSlingInstallerProviderFile = null;
        }
        String valueorgApacheSlingInstallerProviderJcr = request().getQueryString("org.apache.sling.installer.provider.jcr");
        String orgApacheSlingInstallerProviderJcr;
        if (valueorgApacheSlingInstallerProviderJcr != null) {
            orgApacheSlingInstallerProviderJcr = valueorgApacheSlingInstallerProviderJcr;
        } else {
            orgApacheSlingInstallerProviderJcr = null;
        }
        String valueorgApacheSlingJcrDavex = request().getQueryString("org.apache.sling.jcr.davex");
        String orgApacheSlingJcrDavex;
        if (valueorgApacheSlingJcrDavex != null) {
            orgApacheSlingJcrDavex = valueorgApacheSlingJcrDavex;
        } else {
            orgApacheSlingJcrDavex = null;
        }
        String valueorgApacheSlingJcrResourcesecurity = request().getQueryString("org.apache.sling.jcr.resourcesecurity");
        String orgApacheSlingJcrResourcesecurity;
        if (valueorgApacheSlingJcrResourcesecurity != null) {
            orgApacheSlingJcrResourcesecurity = valueorgApacheSlingJcrResourcesecurity;
        } else {
            orgApacheSlingJcrResourcesecurity = null;
        }
        String valueorgApacheSlingJmxProvider = request().getQueryString("org.apache.sling.jmx.provider");
        String orgApacheSlingJmxProvider;
        if (valueorgApacheSlingJmxProvider != null) {
            orgApacheSlingJmxProvider = valueorgApacheSlingJmxProvider;
        } else {
            orgApacheSlingJmxProvider = null;
        }
        String valueorgApacheSlingLaunchpadInstaller = request().getQueryString("org.apache.sling.launchpad.installer");
        String orgApacheSlingLaunchpadInstaller;
        if (valueorgApacheSlingLaunchpadInstaller != null) {
            orgApacheSlingLaunchpadInstaller = valueorgApacheSlingLaunchpadInstaller;
        } else {
            orgApacheSlingLaunchpadInstaller = null;
        }
        String valueorgApacheSlingModelsImpl = request().getQueryString("org.apache.sling.models.impl");
        String orgApacheSlingModelsImpl;
        if (valueorgApacheSlingModelsImpl != null) {
            orgApacheSlingModelsImpl = valueorgApacheSlingModelsImpl;
        } else {
            orgApacheSlingModelsImpl = null;
        }
        String valueorgApacheSlingRepoinitParser = request().getQueryString("org.apache.sling.repoinit.parser");
        String orgApacheSlingRepoinitParser;
        if (valueorgApacheSlingRepoinitParser != null) {
            orgApacheSlingRepoinitParser = valueorgApacheSlingRepoinitParser;
        } else {
            orgApacheSlingRepoinitParser = null;
        }
        String valueorgApacheSlingResourceInventory = request().getQueryString("org.apache.sling.resource.inventory");
        String orgApacheSlingResourceInventory;
        if (valueorgApacheSlingResourceInventory != null) {
            orgApacheSlingResourceInventory = valueorgApacheSlingResourceInventory;
        } else {
            orgApacheSlingResourceInventory = null;
        }
        String valueorgApacheSlingResourceresolver = request().getQueryString("org.apache.sling.resourceresolver");
        String orgApacheSlingResourceresolver;
        if (valueorgApacheSlingResourceresolver != null) {
            orgApacheSlingResourceresolver = valueorgApacheSlingResourceresolver;
        } else {
            orgApacheSlingResourceresolver = null;
        }
        String valueorgApacheSlingScriptingJavascript = request().getQueryString("org.apache.sling.scripting.javascript");
        String orgApacheSlingScriptingJavascript;
        if (valueorgApacheSlingScriptingJavascript != null) {
            orgApacheSlingScriptingJavascript = valueorgApacheSlingScriptingJavascript;
        } else {
            orgApacheSlingScriptingJavascript = null;
        }
        String valueorgApacheSlingScriptingJst = request().getQueryString("org.apache.sling.scripting.jst");
        String orgApacheSlingScriptingJst;
        if (valueorgApacheSlingScriptingJst != null) {
            orgApacheSlingScriptingJst = valueorgApacheSlingScriptingJst;
        } else {
            orgApacheSlingScriptingJst = null;
        }
        String valueorgApacheSlingScriptingSightlyJsProvider = request().getQueryString("org.apache.sling.scripting.sightly.js.provider");
        String orgApacheSlingScriptingSightlyJsProvider;
        if (valueorgApacheSlingScriptingSightlyJsProvider != null) {
            orgApacheSlingScriptingSightlyJsProvider = valueorgApacheSlingScriptingSightlyJsProvider;
        } else {
            orgApacheSlingScriptingSightlyJsProvider = null;
        }
        String valueorgApacheSlingScriptingSightlyModelsProvider = request().getQueryString("org.apache.sling.scripting.sightly.models.provider");
        String orgApacheSlingScriptingSightlyModelsProvider;
        if (valueorgApacheSlingScriptingSightlyModelsProvider != null) {
            orgApacheSlingScriptingSightlyModelsProvider = valueorgApacheSlingScriptingSightlyModelsProvider;
        } else {
            orgApacheSlingScriptingSightlyModelsProvider = null;
        }
        String valueorgApacheSlingSecurity = request().getQueryString("org.apache.sling.security");
        String orgApacheSlingSecurity;
        if (valueorgApacheSlingSecurity != null) {
            orgApacheSlingSecurity = valueorgApacheSlingSecurity;
        } else {
            orgApacheSlingSecurity = null;
        }
        String valueorgApacheSlingServletsCompat = request().getQueryString("org.apache.sling.servlets.compat");
        String orgApacheSlingServletsCompat;
        if (valueorgApacheSlingServletsCompat != null) {
            orgApacheSlingServletsCompat = valueorgApacheSlingServletsCompat;
        } else {
            orgApacheSlingServletsCompat = null;
        }
        String valueorgApacheSlingServletsGet = request().getQueryString("org.apache.sling.servlets.get");
        String orgApacheSlingServletsGet;
        if (valueorgApacheSlingServletsGet != null) {
            orgApacheSlingServletsGet = valueorgApacheSlingServletsGet;
        } else {
            orgApacheSlingServletsGet = null;
        }
        String valueorgApacheSlingStartupfilterDisabler = request().getQueryString("org.apache.sling.startupfilter.disabler");
        String orgApacheSlingStartupfilterDisabler;
        if (valueorgApacheSlingStartupfilterDisabler != null) {
            orgApacheSlingStartupfilterDisabler = valueorgApacheSlingStartupfilterDisabler;
        } else {
            orgApacheSlingStartupfilterDisabler = null;
        }
        String valueorgApacheSlingTracer = request().getQueryString("org.apache.sling.tracer");
        String orgApacheSlingTracer;
        if (valueorgApacheSlingTracer != null) {
            orgApacheSlingTracer = valueorgApacheSlingTracer;
        } else {
            orgApacheSlingTracer = null;
        }
        String valueweRetailClientAppCore = request().getQueryString("we.retail.client.app.core");
        String weRetailClientAppCore;
        if (valueweRetailClientAppCore != null) {
            weRetailClientAppCore = valueweRetailClientAppCore;
        } else {
            weRetailClientAppCore = null;
        }
        ComAdobeGraniteApicontrollerFilterResolverHookFactoryInfo obj = imp.comAdobeGraniteApicontrollerFilterResolverHookFactory(post, apply, delete, action, $location, propertylist, comAdobeCqCdnCdnRewriter, comAdobeCqCloudConfigComponents, comAdobeCqCloudConfigCore, comAdobeCqCloudConfigUi, comAdobeCqComAdobeCqEditor, comAdobeCqComAdobeCqProjectsCore, comAdobeCqComAdobeCqProjectsWcmCore, comAdobeCqComAdobeCqUiCommons, comAdobeCqComAdobeCqWcmStyle, comAdobeCqCqActivitymapIntegration, comAdobeCqCqContexthubCommons, comAdobeCqCqDtm, comAdobeCqCqHealthcheck, comAdobeCqCqMultisiteTargeting, comAdobeCqCqPreUpgradeCleanup, comAdobeCqCqProductInfoProvider, comAdobeCqCqRestSites, comAdobeCqCqSecurityHc, comAdobeCqDamCqDamSvgHandler, comAdobeCqDamCqScene7Imaging, comAdobeCqDtmReactorCore, comAdobeCqDtmReactorUi, comAdobeCqExpJspelResolver, comAdobeCqInboxCqInbox, comAdobeCqJsonSchemaParser, comAdobeCqMediaCqMediaPublishingDpsFpCore, comAdobeCqMobileCqMobileCaas, comAdobeCqMobileCqMobileIndexBuilder, comAdobeCqMobileCqMobilePhonegapBuild, comAdobeCqMyspell, comAdobeCqSampleWeRetailCore, comAdobeCqScreensComAdobeCqScreensDcc, comAdobeCqScreensComAdobeCqScreensMqCore, comAdobeCqSocialCqSocialAsProvider, comAdobeCqSocialCqSocialBadgingBasicImpl, comAdobeCqSocialCqSocialBadgingImpl, comAdobeCqSocialCqSocialCalendarImpl, comAdobeCqSocialCqSocialContentFragmentsImpl, comAdobeCqSocialCqSocialEnablementImpl, comAdobeCqSocialCqSocialGraphImpl, comAdobeCqSocialCqSocialIdeationImpl, comAdobeCqSocialCqSocialJcrProvider, comAdobeCqSocialCqSocialMembersImpl, comAdobeCqSocialCqSocialMsProvider, comAdobeCqSocialCqSocialNotificationsChannelsWeb, comAdobeCqSocialCqSocialNotificationsImpl, comAdobeCqSocialCqSocialRdbProvider, comAdobeCqSocialCqSocialScfImpl, comAdobeCqSocialCqSocialScoringBasicImpl, comAdobeCqSocialCqSocialScoringImpl, comAdobeCqSocialCqSocialServiceusersImpl, comAdobeCqSocialCqSocialSrpImpl, comAdobeCqSocialCqSocialUgcbaseImpl, comAdobeDamCqDamCfmImpl, comAdobeFormsFoundationFormsFoundationBase, comAdobeGraniteApicontroller, comAdobeGraniteAssetCore, comAdobeGraniteAuthSso, comAdobeGraniteBundlesHcImpl, comAdobeGraniteCompatRouter, comAdobeGraniteConf, comAdobeGraniteConfUiCore, comAdobeGraniteCors, comAdobeGraniteCrxExplorer, comAdobeGraniteCrxdeLite, comAdobeGraniteCryptoConfig, comAdobeGraniteCryptoExtension, comAdobeGraniteCryptoFile, comAdobeGraniteCryptoJcr, comAdobeGraniteCsrf, comAdobeGraniteDistributionCore, comAdobeGraniteDropwizardMetrics, comAdobeGraniteFragsImpl, comAdobeGraniteGibson, comAdobeGraniteInfocollector, comAdobeGraniteInstallerFactoryPackages, comAdobeGraniteJettySsl, comAdobeGraniteJobsAsync, comAdobeGraniteMaintenanceOak, comAdobeGraniteMonitoringCore, comAdobeGraniteQueries, comAdobeGraniteReplicationHcImpl, comAdobeGraniteRepositoryChecker, comAdobeGraniteRepositoryHcImpl, comAdobeGraniteRestAssets, comAdobeGraniteSecurityUi, comAdobeGraniteStartup, comAdobeGraniteTagsoup, comAdobeGraniteTaskmanagementCore, comAdobeGraniteTaskmanagementWorkflow, comAdobeGraniteUiClientlibsCompilerLess, comAdobeGraniteUiClientlibsProcessorGcc, comAdobeGraniteWebconsolePlugins, comAdobeGraniteWorkflowConsole, comAdobeXmpWorkerFilesNativeFragmentLinux, comAdobeXmpWorkerFilesNativeFragmentMacosx, comAdobeXmpWorkerFilesNativeFragmentWin, comDayCommonsOsgiWrapperSimpleJndi, comDayCqCqAuthhandler, comDayCqCqCompatConfigupdate, comDayCqCqLicensebranding, comDayCqCqNotifcationImpl, comDayCqCqReplicationAudit, comDayCqCqSearchExt, comDayCqDamCqDamAnnotationPrint, comDayCqDamCqDamAssetUsage, comDayCqDamCqDamS7dam, comDayCqDamCqDamSimilaritysearch, comDayCqDamDamWebdavSupport, comDayCqPreUpgradeTasks, comDayCqReplicationExtensions, comDayCqWcmCqMsmCore, comDayCqWcmCqWcmTranslation, dayCommonsJrawio, orgApacheAriesJmxWhiteboard, orgApacheFelixHttpSslfilter, orgApacheFelixOrgApacheFelixThreaddump, orgApacheFelixWebconsolePluginsDs, orgApacheFelixWebconsolePluginsEvent, orgApacheFelixWebconsolePluginsMemoryusage, orgApacheFelixWebconsolePluginsPackageadmin, orgApacheJackrabbitOakAuthLdap, orgApacheJackrabbitOakSegmentTar, orgApacheJackrabbitOakSolrOsgi, orgApacheSlingBundleresourceImpl, orgApacheSlingCommonsFsclassloader, orgApacheSlingCommonsLogWebconsole, orgApacheSlingDatasource, orgApacheSlingDiscoveryBase, orgApacheSlingDiscoveryOak, orgApacheSlingDiscoverySupport, orgApacheSlingDistributionApi, orgApacheSlingDistributionCore, orgApacheSlingExtensionsWebconsolesecurityprovider, orgApacheSlingHcWebconsole, orgApacheSlingInstallerConsole, orgApacheSlingInstallerProviderFile, orgApacheSlingInstallerProviderJcr, orgApacheSlingJcrDavex, orgApacheSlingJcrResourcesecurity, orgApacheSlingJmxProvider, orgApacheSlingLaunchpadInstaller, orgApacheSlingModelsImpl, orgApacheSlingRepoinitParser, orgApacheSlingResourceInventory, orgApacheSlingResourceresolver, orgApacheSlingScriptingJavascript, orgApacheSlingScriptingJst, orgApacheSlingScriptingSightlyJsProvider, orgApacheSlingScriptingSightlyModelsProvider, orgApacheSlingSecurity, orgApacheSlingServletsCompat, orgApacheSlingServletsGet, orgApacheSlingStartupfilterDisabler, orgApacheSlingTracer, weRetailClientAppCore);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeGraniteAuthCertImplClientCertAuthHandler() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuepath = request().getQueryString("path");
        String path;
        if (valuepath != null) {
            path = valuepath;
        } else {
            path = null;
        }
        String valueserviceRanking = request().getQueryString("service.ranking");
        Integer serviceRanking;
        if (valueserviceRanking != null) {
            serviceRanking = Integer.parseInt(valueserviceRanking);
        } else {
            serviceRanking = null;
        }
        ComAdobeGraniteAuthCertImplClientCertAuthHandlerInfo obj = imp.comAdobeGraniteAuthCertImplClientCertAuthHandler(post, apply, delete, action, $location, propertylist, path, serviceRanking);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeGraniteAuthIms() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueconfigid = request().getQueryString("configid");
        String configid;
        if (valueconfigid != null) {
            configid = valueconfigid;
        } else {
            configid = null;
        }
        String valuescope = request().getQueryString("scope");
        String scope;
        if (valuescope != null) {
            scope = valuescope;
        } else {
            scope = null;
        }
        ComAdobeGraniteAuthImsInfo obj = imp.comAdobeGraniteAuthIms(post, apply, delete, action, $location, propertylist, configid, scope);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtension() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueoauthProviderId = request().getQueryString("oauth.provider.id");
        String oauthProviderId;
        if (valueoauthProviderId != null) {
            oauthProviderId = valueoauthProviderId;
        } else {
            oauthProviderId = null;
        }
        ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionInfo obj = imp.comAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtension(post, apply, delete, action, $location, propertylist, oauthProviderId);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueauthImsClientSecret = request().getQueryString("auth.ims.client.secret");
        String authImsClientSecret;
        if (valueauthImsClientSecret != null) {
            authImsClientSecret = valueauthImsClientSecret;
        } else {
            authImsClientSecret = null;
        }
        String valuecustomizerType = request().getQueryString("customizer.type");
        String customizerType;
        if (valuecustomizerType != null) {
            customizerType = valuecustomizerType;
        } else {
            customizerType = null;
        }
        ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplInfo obj = imp.comAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImpl(post, apply, delete, action, $location, propertylist, authImsClientSecret, customizerType);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeGraniteAuthImsImplIMSInstanceCredentialsValidator() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueoauthProviderId = request().getQueryString("oauth.provider.id");
        String oauthProviderId;
        if (valueoauthProviderId != null) {
            oauthProviderId = valueoauthProviderId;
        } else {
            oauthProviderId = null;
        }
        ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorInfo obj = imp.comAdobeGraniteAuthImsImplIMSInstanceCredentialsValidator(post, apply, delete, action, $location, propertylist, oauthProviderId);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeGraniteAuthImsImplIMSProviderImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueoauthProviderId = request().getQueryString("oauth.provider.id");
        String oauthProviderId;
        if (valueoauthProviderId != null) {
            oauthProviderId = valueoauthProviderId;
        } else {
            oauthProviderId = null;
        }
        String valueoauthProviderImsAuthorizationUrl = request().getQueryString("oauth.provider.ims.authorization.url");
        String oauthProviderImsAuthorizationUrl;
        if (valueoauthProviderImsAuthorizationUrl != null) {
            oauthProviderImsAuthorizationUrl = valueoauthProviderImsAuthorizationUrl;
        } else {
            oauthProviderImsAuthorizationUrl = null;
        }
        String valueoauthProviderImsTokenUrl = request().getQueryString("oauth.provider.ims.token.url");
        String oauthProviderImsTokenUrl;
        if (valueoauthProviderImsTokenUrl != null) {
            oauthProviderImsTokenUrl = valueoauthProviderImsTokenUrl;
        } else {
            oauthProviderImsTokenUrl = null;
        }
        String valueoauthProviderImsProfileUrl = request().getQueryString("oauth.provider.ims.profile.url");
        String oauthProviderImsProfileUrl;
        if (valueoauthProviderImsProfileUrl != null) {
            oauthProviderImsProfileUrl = valueoauthProviderImsProfileUrl;
        } else {
            oauthProviderImsProfileUrl = null;
        }
        String[] oauthProviderImsExtendedDetailsUrlsArray = request().queryString().get("oauth.provider.ims.extended.details.urls");
        List<String> oauthProviderImsExtendedDetailsUrlsList = OpenAPIUtils.parametersToList("multi", oauthProviderImsExtendedDetailsUrlsArray);
        List<String> oauthProviderImsExtendedDetailsUrls = new ArrayList<String>();
        for (String curParam : oauthProviderImsExtendedDetailsUrlsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                oauthProviderImsExtendedDetailsUrls.add(curParam);
            }
        }
        String valueoauthProviderImsValidateTokenUrl = request().getQueryString("oauth.provider.ims.validate.token.url");
        String oauthProviderImsValidateTokenUrl;
        if (valueoauthProviderImsValidateTokenUrl != null) {
            oauthProviderImsValidateTokenUrl = valueoauthProviderImsValidateTokenUrl;
        } else {
            oauthProviderImsValidateTokenUrl = null;
        }
        String valueoauthProviderImsSessionProperty = request().getQueryString("oauth.provider.ims.session.property");
        String oauthProviderImsSessionProperty;
        if (valueoauthProviderImsSessionProperty != null) {
            oauthProviderImsSessionProperty = valueoauthProviderImsSessionProperty;
        } else {
            oauthProviderImsSessionProperty = null;
        }
        String valueoauthProviderImsServiceTokenClientId = request().getQueryString("oauth.provider.ims.service.token.client.id");
        String oauthProviderImsServiceTokenClientId;
        if (valueoauthProviderImsServiceTokenClientId != null) {
            oauthProviderImsServiceTokenClientId = valueoauthProviderImsServiceTokenClientId;
        } else {
            oauthProviderImsServiceTokenClientId = null;
        }
        String valueoauthProviderImsServiceTokenClientSecret = request().getQueryString("oauth.provider.ims.service.token.client.secret");
        String oauthProviderImsServiceTokenClientSecret;
        if (valueoauthProviderImsServiceTokenClientSecret != null) {
            oauthProviderImsServiceTokenClientSecret = valueoauthProviderImsServiceTokenClientSecret;
        } else {
            oauthProviderImsServiceTokenClientSecret = null;
        }
        String valueoauthProviderImsServiceToken = request().getQueryString("oauth.provider.ims.service.token");
        String oauthProviderImsServiceToken;
        if (valueoauthProviderImsServiceToken != null) {
            oauthProviderImsServiceToken = valueoauthProviderImsServiceToken;
        } else {
            oauthProviderImsServiceToken = null;
        }
        String valueimsOrgRef = request().getQueryString("ims.org.ref");
        String imsOrgRef;
        if (valueimsOrgRef != null) {
            imsOrgRef = valueimsOrgRef;
        } else {
            imsOrgRef = null;
        }
        String[] imsGroupMappingArray = request().queryString().get("ims.group.mapping");
        List<String> imsGroupMappingList = OpenAPIUtils.parametersToList("multi", imsGroupMappingArray);
        List<String> imsGroupMapping = new ArrayList<String>();
        for (String curParam : imsGroupMappingList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                imsGroupMapping.add(curParam);
            }
        }
        String valueoauthProviderImsOnlyLicenseGroup = request().getQueryString("oauth.provider.ims.only.license.group");
        Boolean oauthProviderImsOnlyLicenseGroup;
        if (valueoauthProviderImsOnlyLicenseGroup != null) {
            oauthProviderImsOnlyLicenseGroup = Boolean.valueOf(valueoauthProviderImsOnlyLicenseGroup);
        } else {
            oauthProviderImsOnlyLicenseGroup = null;
        }
        ComAdobeGraniteAuthImsImplIMSProviderImplInfo obj = imp.comAdobeGraniteAuthImsImplIMSProviderImpl(post, apply, delete, action, $location, propertylist, oauthProviderId, oauthProviderImsAuthorizationUrl, oauthProviderImsTokenUrl, oauthProviderImsProfileUrl, oauthProviderImsExtendedDetailsUrls, oauthProviderImsValidateTokenUrl, oauthProviderImsSessionProperty, oauthProviderImsServiceTokenClientId, oauthProviderImsServiceTokenClientSecret, oauthProviderImsServiceToken, imsOrgRef, imsGroupMapping, oauthProviderImsOnlyLicenseGroup);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeGraniteAuthImsImplImsConfigProviderImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueoauthConfigmanagerImsConfigid = request().getQueryString("oauth.configmanager.ims.configid");
        String oauthConfigmanagerImsConfigid;
        if (valueoauthConfigmanagerImsConfigid != null) {
            oauthConfigmanagerImsConfigid = valueoauthConfigmanagerImsConfigid;
        } else {
            oauthConfigmanagerImsConfigid = null;
        }
        String valueimsOwningEntity = request().getQueryString("ims.owningEntity");
        String imsOwningEntity;
        if (valueimsOwningEntity != null) {
            imsOwningEntity = valueimsOwningEntity;
        } else {
            imsOwningEntity = null;
        }
        String valueaemInstanceId = request().getQueryString("aem.instanceId");
        String aemInstanceId;
        if (valueaemInstanceId != null) {
            aemInstanceId = valueaemInstanceId;
        } else {
            aemInstanceId = null;
        }
        String valueimsServiceCode = request().getQueryString("ims.serviceCode");
        String imsServiceCode;
        if (valueimsServiceCode != null) {
            imsServiceCode = valueimsServiceCode;
        } else {
            imsServiceCode = null;
        }
        ComAdobeGraniteAuthImsImplImsConfigProviderImplInfo obj = imp.comAdobeGraniteAuthImsImplImsConfigProviderImpl(post, apply, delete, action, $location, propertylist, oauthConfigmanagerImsConfigid, imsOwningEntity, aemInstanceId, imsServiceCode);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeGraniteAuthOauthAccesstokenProvider() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuename = request().getQueryString("name");
        String name;
        if (valuename != null) {
            name = valuename;
        } else {
            name = null;
        }
        String valueauthTokenProviderTitle = request().getQueryString("auth.token.provider.title");
        String authTokenProviderTitle;
        if (valueauthTokenProviderTitle != null) {
            authTokenProviderTitle = valueauthTokenProviderTitle;
        } else {
            authTokenProviderTitle = null;
        }
        String[] authTokenProviderDefaultClaimsArray = request().queryString().get("auth.token.provider.default.claims");
        List<String> authTokenProviderDefaultClaimsList = OpenAPIUtils.parametersToList("multi", authTokenProviderDefaultClaimsArray);
        List<String> authTokenProviderDefaultClaims = new ArrayList<String>();
        for (String curParam : authTokenProviderDefaultClaimsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                authTokenProviderDefaultClaims.add(curParam);
            }
        }
        String valueauthTokenProviderEndpoint = request().getQueryString("auth.token.provider.endpoint");
        String authTokenProviderEndpoint;
        if (valueauthTokenProviderEndpoint != null) {
            authTokenProviderEndpoint = valueauthTokenProviderEndpoint;
        } else {
            authTokenProviderEndpoint = null;
        }
        String valueauthAccessTokenRequest = request().getQueryString("auth.access.token.request");
        String authAccessTokenRequest;
        if (valueauthAccessTokenRequest != null) {
            authAccessTokenRequest = valueauthAccessTokenRequest;
        } else {
            authAccessTokenRequest = null;
        }
        String valueauthTokenProviderKeypairAlias = request().getQueryString("auth.token.provider.keypair.alias");
        String authTokenProviderKeypairAlias;
        if (valueauthTokenProviderKeypairAlias != null) {
            authTokenProviderKeypairAlias = valueauthTokenProviderKeypairAlias;
        } else {
            authTokenProviderKeypairAlias = null;
        }
        String valueauthTokenProviderConnTimeout = request().getQueryString("auth.token.provider.conn.timeout");
        Integer authTokenProviderConnTimeout;
        if (valueauthTokenProviderConnTimeout != null) {
            authTokenProviderConnTimeout = Integer.parseInt(valueauthTokenProviderConnTimeout);
        } else {
            authTokenProviderConnTimeout = null;
        }
        String valueauthTokenProviderSoTimeout = request().getQueryString("auth.token.provider.so.timeout");
        Integer authTokenProviderSoTimeout;
        if (valueauthTokenProviderSoTimeout != null) {
            authTokenProviderSoTimeout = Integer.parseInt(valueauthTokenProviderSoTimeout);
        } else {
            authTokenProviderSoTimeout = null;
        }
        String valueauthTokenProviderClientId = request().getQueryString("auth.token.provider.client.id");
        String authTokenProviderClientId;
        if (valueauthTokenProviderClientId != null) {
            authTokenProviderClientId = valueauthTokenProviderClientId;
        } else {
            authTokenProviderClientId = null;
        }
        String valueauthTokenProviderScope = request().getQueryString("auth.token.provider.scope");
        String authTokenProviderScope;
        if (valueauthTokenProviderScope != null) {
            authTokenProviderScope = valueauthTokenProviderScope;
        } else {
            authTokenProviderScope = null;
        }
        String valueauthTokenProviderReuseAccessToken = request().getQueryString("auth.token.provider.reuse.access.token");
        Boolean authTokenProviderReuseAccessToken;
        if (valueauthTokenProviderReuseAccessToken != null) {
            authTokenProviderReuseAccessToken = Boolean.valueOf(valueauthTokenProviderReuseAccessToken);
        } else {
            authTokenProviderReuseAccessToken = null;
        }
        String valueauthTokenProviderRelaxedSsl = request().getQueryString("auth.token.provider.relaxed.ssl");
        Boolean authTokenProviderRelaxedSsl;
        if (valueauthTokenProviderRelaxedSsl != null) {
            authTokenProviderRelaxedSsl = Boolean.valueOf(valueauthTokenProviderRelaxedSsl);
        } else {
            authTokenProviderRelaxedSsl = null;
        }
        String valuetokenRequestCustomizerType = request().getQueryString("token.request.customizer.type");
        String tokenRequestCustomizerType;
        if (valuetokenRequestCustomizerType != null) {
            tokenRequestCustomizerType = valuetokenRequestCustomizerType;
        } else {
            tokenRequestCustomizerType = null;
        }
        String valueauthTokenValidatorType = request().getQueryString("auth.token.validator.type");
        String authTokenValidatorType;
        if (valueauthTokenValidatorType != null) {
            authTokenValidatorType = valueauthTokenValidatorType;
        } else {
            authTokenValidatorType = null;
        }
        ComAdobeGraniteAuthOauthAccesstokenProviderInfo obj = imp.comAdobeGraniteAuthOauthAccesstokenProvider(post, apply, delete, action, $location, propertylist, name, authTokenProviderTitle, authTokenProviderDefaultClaims, authTokenProviderEndpoint, authAccessTokenRequest, authTokenProviderKeypairAlias, authTokenProviderConnTimeout, authTokenProviderSoTimeout, authTokenProviderClientId, authTokenProviderScope, authTokenProviderReuseAccessToken, authTokenProviderRelaxedSsl, tokenRequestCustomizerType, authTokenValidatorType);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeGraniteAuthOauthImplBearerAuthenticationHandler() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuepath = request().getQueryString("path");
        String path;
        if (valuepath != null) {
            path = valuepath;
        } else {
            path = null;
        }
        String[] oauthClientIdsAllowedArray = request().queryString().get("oauth.clientIds.allowed");
        List<String> oauthClientIdsAllowedList = OpenAPIUtils.parametersToList("multi", oauthClientIdsAllowedArray);
        List<String> oauthClientIdsAllowed = new ArrayList<String>();
        for (String curParam : oauthClientIdsAllowedList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                oauthClientIdsAllowed.add(curParam);
            }
        }
        String valueauthBearerSyncIms = request().getQueryString("auth.bearer.sync.ims");
        Boolean authBearerSyncIms;
        if (valueauthBearerSyncIms != null) {
            authBearerSyncIms = Boolean.valueOf(valueauthBearerSyncIms);
        } else {
            authBearerSyncIms = null;
        }
        String valueauthTokenRequestParameter = request().getQueryString("auth.tokenRequestParameter");
        String authTokenRequestParameter;
        if (valueauthTokenRequestParameter != null) {
            authTokenRequestParameter = valueauthTokenRequestParameter;
        } else {
            authTokenRequestParameter = null;
        }
        String valueoauthBearerConfigid = request().getQueryString("oauth.bearer.configid");
        String oauthBearerConfigid;
        if (valueoauthBearerConfigid != null) {
            oauthBearerConfigid = valueoauthBearerConfigid;
        } else {
            oauthBearerConfigid = null;
        }
        String valueoauthJwtSupport = request().getQueryString("oauth.jwt.support");
        Boolean oauthJwtSupport;
        if (valueoauthJwtSupport != null) {
            oauthJwtSupport = Boolean.valueOf(valueoauthJwtSupport);
        } else {
            oauthJwtSupport = null;
        }
        ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerInfo obj = imp.comAdobeGraniteAuthOauthImplBearerAuthenticationHandler(post, apply, delete, action, $location, propertylist, path, oauthClientIdsAllowed, authBearerSyncIms, authTokenRequestParameter, oauthBearerConfigid, oauthJwtSupport);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeGraniteAuthOauthImplDefaultTokenValidatorImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueauthTokenValidatorType = request().getQueryString("auth.token.validator.type");
        String authTokenValidatorType;
        if (valueauthTokenValidatorType != null) {
            authTokenValidatorType = valueauthTokenValidatorType;
        } else {
            authTokenValidatorType = null;
        }
        ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplInfo obj = imp.comAdobeGraniteAuthOauthImplDefaultTokenValidatorImpl(post, apply, delete, action, $location, propertylist, authTokenValidatorType);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeGraniteAuthOauthImplFacebookProviderImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueoauthProviderId = request().getQueryString("oauth.provider.id");
        String oauthProviderId;
        if (valueoauthProviderId != null) {
            oauthProviderId = valueoauthProviderId;
        } else {
            oauthProviderId = null;
        }
        ComAdobeGraniteAuthOauthImplFacebookProviderImplInfo obj = imp.comAdobeGraniteAuthOauthImplFacebookProviderImpl(post, apply, delete, action, $location, propertylist, oauthProviderId);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeGraniteAuthOauthImplGithubProviderImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueoauthProviderId = request().getQueryString("oauth.provider.id");
        String oauthProviderId;
        if (valueoauthProviderId != null) {
            oauthProviderId = valueoauthProviderId;
        } else {
            oauthProviderId = null;
        }
        String valueoauthProviderGithubAuthorizationUrl = request().getQueryString("oauth.provider.github.authorization.url");
        String oauthProviderGithubAuthorizationUrl;
        if (valueoauthProviderGithubAuthorizationUrl != null) {
            oauthProviderGithubAuthorizationUrl = valueoauthProviderGithubAuthorizationUrl;
        } else {
            oauthProviderGithubAuthorizationUrl = null;
        }
        String valueoauthProviderGithubTokenUrl = request().getQueryString("oauth.provider.github.token.url");
        String oauthProviderGithubTokenUrl;
        if (valueoauthProviderGithubTokenUrl != null) {
            oauthProviderGithubTokenUrl = valueoauthProviderGithubTokenUrl;
        } else {
            oauthProviderGithubTokenUrl = null;
        }
        String valueoauthProviderGithubProfileUrl = request().getQueryString("oauth.provider.github.profile.url");
        String oauthProviderGithubProfileUrl;
        if (valueoauthProviderGithubProfileUrl != null) {
            oauthProviderGithubProfileUrl = valueoauthProviderGithubProfileUrl;
        } else {
            oauthProviderGithubProfileUrl = null;
        }
        ComAdobeGraniteAuthOauthImplGithubProviderImplInfo obj = imp.comAdobeGraniteAuthOauthImplGithubProviderImpl(post, apply, delete, action, $location, propertylist, oauthProviderId, oauthProviderGithubAuthorizationUrl, oauthProviderGithubTokenUrl, oauthProviderGithubProfileUrl);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeGraniteAuthOauthImplGraniteProvider() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueoauthProviderId = request().getQueryString("oauth.provider.id");
        String oauthProviderId;
        if (valueoauthProviderId != null) {
            oauthProviderId = valueoauthProviderId;
        } else {
            oauthProviderId = null;
        }
        String valueoauthProviderGraniteAuthorizationUrl = request().getQueryString("oauth.provider.granite.authorization.url");
        String oauthProviderGraniteAuthorizationUrl;
        if (valueoauthProviderGraniteAuthorizationUrl != null) {
            oauthProviderGraniteAuthorizationUrl = valueoauthProviderGraniteAuthorizationUrl;
        } else {
            oauthProviderGraniteAuthorizationUrl = null;
        }
        String valueoauthProviderGraniteTokenUrl = request().getQueryString("oauth.provider.granite.token.url");
        String oauthProviderGraniteTokenUrl;
        if (valueoauthProviderGraniteTokenUrl != null) {
            oauthProviderGraniteTokenUrl = valueoauthProviderGraniteTokenUrl;
        } else {
            oauthProviderGraniteTokenUrl = null;
        }
        String valueoauthProviderGraniteProfileUrl = request().getQueryString("oauth.provider.granite.profile.url");
        String oauthProviderGraniteProfileUrl;
        if (valueoauthProviderGraniteProfileUrl != null) {
            oauthProviderGraniteProfileUrl = valueoauthProviderGraniteProfileUrl;
        } else {
            oauthProviderGraniteProfileUrl = null;
        }
        String valueoauthProviderGraniteExtendedDetailsUrls = request().getQueryString("oauth.provider.granite.extended.details.urls");
        String oauthProviderGraniteExtendedDetailsUrls;
        if (valueoauthProviderGraniteExtendedDetailsUrls != null) {
            oauthProviderGraniteExtendedDetailsUrls = valueoauthProviderGraniteExtendedDetailsUrls;
        } else {
            oauthProviderGraniteExtendedDetailsUrls = null;
        }
        ComAdobeGraniteAuthOauthImplGraniteProviderInfo obj = imp.comAdobeGraniteAuthOauthImplGraniteProvider(post, apply, delete, action, $location, propertylist, oauthProviderId, oauthProviderGraniteAuthorizationUrl, oauthProviderGraniteTokenUrl, oauthProviderGraniteProfileUrl, oauthProviderGraniteExtendedDetailsUrls);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeGraniteAuthOauthImplHelperProviderConfigManager() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueoauthCookieLoginTimeout = request().getQueryString("oauth.cookie.login.timeout");
        String oauthCookieLoginTimeout;
        if (valueoauthCookieLoginTimeout != null) {
            oauthCookieLoginTimeout = valueoauthCookieLoginTimeout;
        } else {
            oauthCookieLoginTimeout = null;
        }
        String valueoauthCookieMaxAge = request().getQueryString("oauth.cookie.max.age");
        String oauthCookieMaxAge;
        if (valueoauthCookieMaxAge != null) {
            oauthCookieMaxAge = valueoauthCookieMaxAge;
        } else {
            oauthCookieMaxAge = null;
        }
        ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInfo obj = imp.comAdobeGraniteAuthOauthImplHelperProviderConfigManager(post, apply, delete, action, $location, propertylist, oauthCookieLoginTimeout, oauthCookieMaxAge);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternal() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueoauthCookieLoginTimeout = request().getQueryString("oauth.cookie.login.timeout");
        String oauthCookieLoginTimeout;
        if (valueoauthCookieLoginTimeout != null) {
            oauthCookieLoginTimeout = valueoauthCookieLoginTimeout;
        } else {
            oauthCookieLoginTimeout = null;
        }
        String valueoauthCookieMaxAge = request().getQueryString("oauth.cookie.max.age");
        String oauthCookieMaxAge;
        if (valueoauthCookieMaxAge != null) {
            oauthCookieMaxAge = valueoauthCookieMaxAge;
        } else {
            oauthCookieMaxAge = null;
        }
        ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalInfo obj = imp.comAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternal(post, apply, delete, action, $location, propertylist, oauthCookieLoginTimeout, oauthCookieMaxAge);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeGraniteAuthOauthImplOAuthAuthenticationHandler() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuepath = request().getQueryString("path");
        String path;
        if (valuepath != null) {
            path = valuepath;
        } else {
            path = null;
        }
        ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerInfo obj = imp.comAdobeGraniteAuthOauthImplOAuthAuthenticationHandler(post, apply, delete, action, $location, propertylist, path);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeGraniteAuthOauthImplTwitterProviderImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueoauthProviderId = request().getQueryString("oauth.provider.id");
        String oauthProviderId;
        if (valueoauthProviderId != null) {
            oauthProviderId = valueoauthProviderId;
        } else {
            oauthProviderId = null;
        }
        ComAdobeGraniteAuthOauthImplTwitterProviderImplInfo obj = imp.comAdobeGraniteAuthOauthImplTwitterProviderImpl(post, apply, delete, action, $location, propertylist, oauthProviderId);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeGraniteAuthOauthProvider() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueoauthConfigId = request().getQueryString("oauth.config.id");
        String oauthConfigId;
        if (valueoauthConfigId != null) {
            oauthConfigId = valueoauthConfigId;
        } else {
            oauthConfigId = null;
        }
        String valueoauthClientId = request().getQueryString("oauth.client.id");
        String oauthClientId;
        if (valueoauthClientId != null) {
            oauthClientId = valueoauthClientId;
        } else {
            oauthClientId = null;
        }
        String valueoauthClientSecret = request().getQueryString("oauth.client.secret");
        String oauthClientSecret;
        if (valueoauthClientSecret != null) {
            oauthClientSecret = valueoauthClientSecret;
        } else {
            oauthClientSecret = null;
        }
        String[] oauthScopeArray = request().queryString().get("oauth.scope");
        List<String> oauthScopeList = OpenAPIUtils.parametersToList("multi", oauthScopeArray);
        List<String> oauthScope = new ArrayList<String>();
        for (String curParam : oauthScopeList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                oauthScope.add(curParam);
            }
        }
        String valueoauthConfigProviderId = request().getQueryString("oauth.config.provider.id");
        String oauthConfigProviderId;
        if (valueoauthConfigProviderId != null) {
            oauthConfigProviderId = valueoauthConfigProviderId;
        } else {
            oauthConfigProviderId = null;
        }
        String valueoauthCreateUsers = request().getQueryString("oauth.create.users");
        Boolean oauthCreateUsers;
        if (valueoauthCreateUsers != null) {
            oauthCreateUsers = Boolean.valueOf(valueoauthCreateUsers);
        } else {
            oauthCreateUsers = null;
        }
        String valueoauthUseridProperty = request().getQueryString("oauth.userid.property");
        String oauthUseridProperty;
        if (valueoauthUseridProperty != null) {
            oauthUseridProperty = valueoauthUseridProperty;
        } else {
            oauthUseridProperty = null;
        }
        String valueforceStrictUsernameMatching = request().getQueryString("force.strict.username.matching");
        Boolean forceStrictUsernameMatching;
        if (valueforceStrictUsernameMatching != null) {
            forceStrictUsernameMatching = Boolean.valueOf(valueforceStrictUsernameMatching);
        } else {
            forceStrictUsernameMatching = null;
        }
        String valueoauthEncodeUserids = request().getQueryString("oauth.encode.userids");
        Boolean oauthEncodeUserids;
        if (valueoauthEncodeUserids != null) {
            oauthEncodeUserids = Boolean.valueOf(valueoauthEncodeUserids);
        } else {
            oauthEncodeUserids = null;
        }
        String valueoauthHashUserids = request().getQueryString("oauth.hash.userids");
        Boolean oauthHashUserids;
        if (valueoauthHashUserids != null) {
            oauthHashUserids = Boolean.valueOf(valueoauthHashUserids);
        } else {
            oauthHashUserids = null;
        }
        String valueoauthCallBackUrl = request().getQueryString("oauth.callBackUrl");
        String oauthCallBackUrl;
        if (valueoauthCallBackUrl != null) {
            oauthCallBackUrl = valueoauthCallBackUrl;
        } else {
            oauthCallBackUrl = null;
        }
        String valueoauthAccessTokenPersist = request().getQueryString("oauth.access.token.persist");
        Boolean oauthAccessTokenPersist;
        if (valueoauthAccessTokenPersist != null) {
            oauthAccessTokenPersist = Boolean.valueOf(valueoauthAccessTokenPersist);
        } else {
            oauthAccessTokenPersist = null;
        }
        String valueoauthAccessTokenPersistCookie = request().getQueryString("oauth.access.token.persist.cookie");
        Boolean oauthAccessTokenPersistCookie;
        if (valueoauthAccessTokenPersistCookie != null) {
            oauthAccessTokenPersistCookie = Boolean.valueOf(valueoauthAccessTokenPersistCookie);
        } else {
            oauthAccessTokenPersistCookie = null;
        }
        String valueoauthCsrfStateProtection = request().getQueryString("oauth.csrf.state.protection");
        Boolean oauthCsrfStateProtection;
        if (valueoauthCsrfStateProtection != null) {
            oauthCsrfStateProtection = Boolean.valueOf(valueoauthCsrfStateProtection);
        } else {
            oauthCsrfStateProtection = null;
        }
        String valueoauthRedirectRequestParams = request().getQueryString("oauth.redirect.request.params");
        Boolean oauthRedirectRequestParams;
        if (valueoauthRedirectRequestParams != null) {
            oauthRedirectRequestParams = Boolean.valueOf(valueoauthRedirectRequestParams);
        } else {
            oauthRedirectRequestParams = null;
        }
        String valueoauthConfigSiblingsAllow = request().getQueryString("oauth.config.siblings.allow");
        Boolean oauthConfigSiblingsAllow;
        if (valueoauthConfigSiblingsAllow != null) {
            oauthConfigSiblingsAllow = Boolean.valueOf(valueoauthConfigSiblingsAllow);
        } else {
            oauthConfigSiblingsAllow = null;
        }
        ComAdobeGraniteAuthOauthProviderInfo obj = imp.comAdobeGraniteAuthOauthProvider(post, apply, delete, action, $location, propertylist, oauthConfigId, oauthClientId, oauthClientSecret, oauthScope, oauthConfigProviderId, oauthCreateUsers, oauthUseridProperty, forceStrictUsernameMatching, oauthEncodeUserids, oauthHashUserids, oauthCallBackUrl, oauthAccessTokenPersist, oauthAccessTokenPersistCookie, oauthCsrfStateProtection, oauthRedirectRequestParams, oauthConfigSiblingsAllow);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeGraniteAuthRequirementImplDefaultRequirementHandler() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] supportedPathsArray = request().queryString().get("supportedPaths");
        List<String> supportedPathsList = OpenAPIUtils.parametersToList("multi", supportedPathsArray);
        List<String> supportedPaths = new ArrayList<String>();
        for (String curParam : supportedPathsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                supportedPaths.add(curParam);
            }
        }
        ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerInfo obj = imp.comAdobeGraniteAuthRequirementImplDefaultRequirementHandler(post, apply, delete, action, $location, propertylist, supportedPaths);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeGraniteAuthSamlSamlAuthenticationHandler() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] pathArray = request().queryString().get("path");
        List<String> pathList = OpenAPIUtils.parametersToList("multi", pathArray);
        List<String> path = new ArrayList<String>();
        for (String curParam : pathList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                path.add(curParam);
            }
        }
        String valueserviceRanking = request().getQueryString("service.ranking");
        Integer serviceRanking;
        if (valueserviceRanking != null) {
            serviceRanking = Integer.parseInt(valueserviceRanking);
        } else {
            serviceRanking = null;
        }
        String valueidpUrl = request().getQueryString("idpUrl");
        String idpUrl;
        if (valueidpUrl != null) {
            idpUrl = valueidpUrl;
        } else {
            idpUrl = null;
        }
        String valueidpCertAlias = request().getQueryString("idpCertAlias");
        String idpCertAlias;
        if (valueidpCertAlias != null) {
            idpCertAlias = valueidpCertAlias;
        } else {
            idpCertAlias = null;
        }
        String valueidpHttpRedirect = request().getQueryString("idpHttpRedirect");
        Boolean idpHttpRedirect;
        if (valueidpHttpRedirect != null) {
            idpHttpRedirect = Boolean.valueOf(valueidpHttpRedirect);
        } else {
            idpHttpRedirect = null;
        }
        String valueserviceProviderEntityId = request().getQueryString("serviceProviderEntityId");
        String serviceProviderEntityId;
        if (valueserviceProviderEntityId != null) {
            serviceProviderEntityId = valueserviceProviderEntityId;
        } else {
            serviceProviderEntityId = null;
        }
        String valueassertionConsumerServiceURL = request().getQueryString("assertionConsumerServiceURL");
        String assertionConsumerServiceURL;
        if (valueassertionConsumerServiceURL != null) {
            assertionConsumerServiceURL = valueassertionConsumerServiceURL;
        } else {
            assertionConsumerServiceURL = null;
        }
        String valuespPrivateKeyAlias = request().getQueryString("spPrivateKeyAlias");
        String spPrivateKeyAlias;
        if (valuespPrivateKeyAlias != null) {
            spPrivateKeyAlias = valuespPrivateKeyAlias;
        } else {
            spPrivateKeyAlias = null;
        }
        String valuekeyStorePassword = request().getQueryString("keyStorePassword");
        String keyStorePassword;
        if (valuekeyStorePassword != null) {
            keyStorePassword = valuekeyStorePassword;
        } else {
            keyStorePassword = null;
        }
        String valuedefaultRedirectUrl = request().getQueryString("defaultRedirectUrl");
        String defaultRedirectUrl;
        if (valuedefaultRedirectUrl != null) {
            defaultRedirectUrl = valuedefaultRedirectUrl;
        } else {
            defaultRedirectUrl = null;
        }
        String valueuserIDAttribute = request().getQueryString("userIDAttribute");
        String userIDAttribute;
        if (valueuserIDAttribute != null) {
            userIDAttribute = valueuserIDAttribute;
        } else {
            userIDAttribute = null;
        }
        String valueuseEncryption = request().getQueryString("useEncryption");
        Boolean useEncryption;
        if (valueuseEncryption != null) {
            useEncryption = Boolean.valueOf(valueuseEncryption);
        } else {
            useEncryption = null;
        }
        String valuecreateUser = request().getQueryString("createUser");
        Boolean createUser;
        if (valuecreateUser != null) {
            createUser = Boolean.valueOf(valuecreateUser);
        } else {
            createUser = null;
        }
        String valueuserIntermediatePath = request().getQueryString("userIntermediatePath");
        String userIntermediatePath;
        if (valueuserIntermediatePath != null) {
            userIntermediatePath = valueuserIntermediatePath;
        } else {
            userIntermediatePath = null;
        }
        String valueaddGroupMemberships = request().getQueryString("addGroupMemberships");
        Boolean addGroupMemberships;
        if (valueaddGroupMemberships != null) {
            addGroupMemberships = Boolean.valueOf(valueaddGroupMemberships);
        } else {
            addGroupMemberships = null;
        }
        String valuegroupMembershipAttribute = request().getQueryString("groupMembershipAttribute");
        String groupMembershipAttribute;
        if (valuegroupMembershipAttribute != null) {
            groupMembershipAttribute = valuegroupMembershipAttribute;
        } else {
            groupMembershipAttribute = null;
        }
        String[] defaultGroupsArray = request().queryString().get("defaultGroups");
        List<String> defaultGroupsList = OpenAPIUtils.parametersToList("multi", defaultGroupsArray);
        List<String> defaultGroups = new ArrayList<String>();
        for (String curParam : defaultGroupsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                defaultGroups.add(curParam);
            }
        }
        String valuenameIdFormat = request().getQueryString("nameIdFormat");
        String nameIdFormat;
        if (valuenameIdFormat != null) {
            nameIdFormat = valuenameIdFormat;
        } else {
            nameIdFormat = null;
        }
        String[] synchronizeAttributesArray = request().queryString().get("synchronizeAttributes");
        List<String> synchronizeAttributesList = OpenAPIUtils.parametersToList("multi", synchronizeAttributesArray);
        List<String> synchronizeAttributes = new ArrayList<String>();
        for (String curParam : synchronizeAttributesList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                synchronizeAttributes.add(curParam);
            }
        }
        String valuehandleLogout = request().getQueryString("handleLogout");
        Boolean handleLogout;
        if (valuehandleLogout != null) {
            handleLogout = Boolean.valueOf(valuehandleLogout);
        } else {
            handleLogout = null;
        }
        String valuelogoutUrl = request().getQueryString("logoutUrl");
        String logoutUrl;
        if (valuelogoutUrl != null) {
            logoutUrl = valuelogoutUrl;
        } else {
            logoutUrl = null;
        }
        String valueclockTolerance = request().getQueryString("clockTolerance");
        Integer clockTolerance;
        if (valueclockTolerance != null) {
            clockTolerance = Integer.parseInt(valueclockTolerance);
        } else {
            clockTolerance = null;
        }
        String valuedigestMethod = request().getQueryString("digestMethod");
        String digestMethod;
        if (valuedigestMethod != null) {
            digestMethod = valuedigestMethod;
        } else {
            digestMethod = null;
        }
        String valuesignatureMethod = request().getQueryString("signatureMethod");
        String signatureMethod;
        if (valuesignatureMethod != null) {
            signatureMethod = valuesignatureMethod;
        } else {
            signatureMethod = null;
        }
        String valueidentitySyncType = request().getQueryString("identitySyncType");
        String identitySyncType;
        if (valueidentitySyncType != null) {
            identitySyncType = valueidentitySyncType;
        } else {
            identitySyncType = null;
        }
        String valueidpIdentifier = request().getQueryString("idpIdentifier");
        String idpIdentifier;
        if (valueidpIdentifier != null) {
            idpIdentifier = valueidpIdentifier;
        } else {
            idpIdentifier = null;
        }
        ComAdobeGraniteAuthSamlSamlAuthenticationHandlerInfo obj = imp.comAdobeGraniteAuthSamlSamlAuthenticationHandler(post, apply, delete, action, $location, propertylist, path, serviceRanking, idpUrl, idpCertAlias, idpHttpRedirect, serviceProviderEntityId, assertionConsumerServiceURL, spPrivateKeyAlias, keyStorePassword, defaultRedirectUrl, userIDAttribute, useEncryption, createUser, userIntermediatePath, addGroupMemberships, groupMembershipAttribute, defaultGroups, nameIdFormat, synchronizeAttributes, handleLogout, logoutUrl, clockTolerance, digestMethod, signatureMethod, identitySyncType, idpIdentifier);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeGraniteAuthSsoImplSsoAuthenticationHandler() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuepath = request().getQueryString("path");
        String path;
        if (valuepath != null) {
            path = valuepath;
        } else {
            path = null;
        }
        String valueserviceRanking = request().getQueryString("service.ranking");
        Integer serviceRanking;
        if (valueserviceRanking != null) {
            serviceRanking = Integer.parseInt(valueserviceRanking);
        } else {
            serviceRanking = null;
        }
        String valuejaasControlFlag = request().getQueryString("jaas.controlFlag");
        String jaasControlFlag;
        if (valuejaasControlFlag != null) {
            jaasControlFlag = valuejaasControlFlag;
        } else {
            jaasControlFlag = null;
        }
        String valuejaasRealmName = request().getQueryString("jaas.realmName");
        String jaasRealmName;
        if (valuejaasRealmName != null) {
            jaasRealmName = valuejaasRealmName;
        } else {
            jaasRealmName = null;
        }
        String valuejaasRanking = request().getQueryString("jaas.ranking");
        Integer jaasRanking;
        if (valuejaasRanking != null) {
            jaasRanking = Integer.parseInt(valuejaasRanking);
        } else {
            jaasRanking = null;
        }
        String[] headersArray = request().queryString().get("headers");
        List<String> headersList = OpenAPIUtils.parametersToList("multi", headersArray);
        List<String> headers = new ArrayList<String>();
        for (String curParam : headersList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                headers.add(curParam);
            }
        }
        String[] cookiesArray = request().queryString().get("cookies");
        List<String> cookiesList = OpenAPIUtils.parametersToList("multi", cookiesArray);
        List<String> cookies = new ArrayList<String>();
        for (String curParam : cookiesList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                cookies.add(curParam);
            }
        }
        String[] parametersArray = request().queryString().get("parameters");
        List<String> parametersList = OpenAPIUtils.parametersToList("multi", parametersArray);
        List<String> parameters = new ArrayList<String>();
        for (String curParam : parametersList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                parameters.add(curParam);
            }
        }
        String[] usermapArray = request().queryString().get("usermap");
        List<String> usermapList = OpenAPIUtils.parametersToList("multi", usermapArray);
        List<String> usermap = new ArrayList<String>();
        for (String curParam : usermapList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                usermap.add(curParam);
            }
        }
        String valueformat = request().getQueryString("format");
        String format;
        if (valueformat != null) {
            format = valueformat;
        } else {
            format = null;
        }
        String valuetrustedCredentialsAttribute = request().getQueryString("trustedCredentialsAttribute");
        String trustedCredentialsAttribute;
        if (valuetrustedCredentialsAttribute != null) {
            trustedCredentialsAttribute = valuetrustedCredentialsAttribute;
        } else {
            trustedCredentialsAttribute = null;
        }
        ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerInfo obj = imp.comAdobeGraniteAuthSsoImplSsoAuthenticationHandler(post, apply, delete, action, $location, propertylist, path, serviceRanking, jaasControlFlag, jaasRealmName, jaasRanking, headers, cookies, parameters, usermap, format, trustedCredentialsAttribute);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeGraniteBundlesHcImplCodeCacheHealthCheck() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] hcTagsArray = request().queryString().get("hc.tags");
        List<String> hcTagsList = OpenAPIUtils.parametersToList("multi", hcTagsArray);
        List<String> hcTags = new ArrayList<String>();
        for (String curParam : hcTagsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                hcTags.add(curParam);
            }
        }
        String valueminimumCodeCacheSize = request().getQueryString("minimum.code.cache.size");
        Integer minimumCodeCacheSize;
        if (valueminimumCodeCacheSize != null) {
            minimumCodeCacheSize = Integer.parseInt(valueminimumCodeCacheSize);
        } else {
            minimumCodeCacheSize = null;
        }
        ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckInfo obj = imp.comAdobeGraniteBundlesHcImplCodeCacheHealthCheck(post, apply, delete, action, $location, propertylist, hcTags, minimumCodeCacheSize);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheck() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] hcTagsArray = request().queryString().get("hc.tags");
        List<String> hcTagsList = OpenAPIUtils.parametersToList("multi", hcTagsArray);
        List<String> hcTags = new ArrayList<String>();
        for (String curParam : hcTagsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                hcTags.add(curParam);
            }
        }
        ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckInfo obj = imp.comAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheck(post, apply, delete, action, $location, propertylist, hcTags);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeGraniteBundlesHcImplDavExBundleHealthCheck() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] hcTagsArray = request().queryString().get("hc.tags");
        List<String> hcTagsList = OpenAPIUtils.parametersToList("multi", hcTagsArray);
        List<String> hcTags = new ArrayList<String>();
        for (String curParam : hcTagsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                hcTags.add(curParam);
            }
        }
        ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckInfo obj = imp.comAdobeGraniteBundlesHcImplDavExBundleHealthCheck(post, apply, delete, action, $location, propertylist, hcTags);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeGraniteBundlesHcImplInactiveBundlesHealthCheck() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] hcTagsArray = request().queryString().get("hc.tags");
        List<String> hcTagsList = OpenAPIUtils.parametersToList("multi", hcTagsArray);
        List<String> hcTags = new ArrayList<String>();
        for (String curParam : hcTagsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                hcTags.add(curParam);
            }
        }
        String[] ignoredBundlesArray = request().queryString().get("ignored.bundles");
        List<String> ignoredBundlesList = OpenAPIUtils.parametersToList("multi", ignoredBundlesArray);
        List<String> ignoredBundles = new ArrayList<String>();
        for (String curParam : ignoredBundlesList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                ignoredBundles.add(curParam);
            }
        }
        ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckInfo obj = imp.comAdobeGraniteBundlesHcImplInactiveBundlesHealthCheck(post, apply, delete, action, $location, propertylist, hcTags, ignoredBundles);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeGraniteBundlesHcImplJobsHealthCheck() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] hcTagsArray = request().queryString().get("hc.tags");
        List<String> hcTagsList = OpenAPIUtils.parametersToList("multi", hcTagsArray);
        List<String> hcTags = new ArrayList<String>();
        for (String curParam : hcTagsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                hcTags.add(curParam);
            }
        }
        String valuemaxQueuedJobs = request().getQueryString("max.queued.jobs");
        Integer maxQueuedJobs;
        if (valuemaxQueuedJobs != null) {
            maxQueuedJobs = Integer.parseInt(valuemaxQueuedJobs);
        } else {
            maxQueuedJobs = null;
        }
        ComAdobeGraniteBundlesHcImplJobsHealthCheckInfo obj = imp.comAdobeGraniteBundlesHcImplJobsHealthCheck(post, apply, delete, action, $location, propertylist, hcTags, maxQueuedJobs);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeGraniteBundlesHcImplSlingGetServletHealthCheck() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] hcTagsArray = request().queryString().get("hc.tags");
        List<String> hcTagsList = OpenAPIUtils.parametersToList("multi", hcTagsArray);
        List<String> hcTags = new ArrayList<String>();
        for (String curParam : hcTagsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                hcTags.add(curParam);
            }
        }
        ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckInfo obj = imp.comAdobeGraniteBundlesHcImplSlingGetServletHealthCheck(post, apply, delete, action, $location, propertylist, hcTags);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheck() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] hcTagsArray = request().queryString().get("hc.tags");
        List<String> hcTagsList = OpenAPIUtils.parametersToList("multi", hcTagsArray);
        List<String> hcTags = new ArrayList<String>();
        for (String curParam : hcTagsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                hcTags.add(curParam);
            }
        }
        ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckInfo obj = imp.comAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheck(post, apply, delete, action, $location, propertylist, hcTags);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheck() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] hcTagsArray = request().queryString().get("hc.tags");
        List<String> hcTagsList = OpenAPIUtils.parametersToList("multi", hcTagsArray);
        List<String> hcTags = new ArrayList<String>();
        for (String curParam : hcTagsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                hcTags.add(curParam);
            }
        }
        ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckInfo obj = imp.comAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheck(post, apply, delete, action, $location, propertylist, hcTags);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheck() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] hcTagsArray = request().queryString().get("hc.tags");
        List<String> hcTagsList = OpenAPIUtils.parametersToList("multi", hcTagsArray);
        List<String> hcTags = new ArrayList<String>();
        for (String curParam : hcTagsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                hcTags.add(curParam);
            }
        }
        ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckInfo obj = imp.comAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheck(post, apply, delete, action, $location, propertylist, hcTags);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeGraniteBundlesHcImplWebDavBundleHealthCheck() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] hcTagsArray = request().queryString().get("hc.tags");
        List<String> hcTagsList = OpenAPIUtils.parametersToList("multi", hcTagsArray);
        List<String> hcTags = new ArrayList<String>();
        for (String curParam : hcTagsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                hcTags.add(curParam);
            }
        }
        ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckInfo obj = imp.comAdobeGraniteBundlesHcImplWebDavBundleHealthCheck(post, apply, delete, action, $location, propertylist, hcTags);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeGraniteCommentsInternalCommentReplicationContentFilterFac() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] replicateCommentResourceTypesArray = request().queryString().get("replicate.comment.resourceTypes");
        List<String> replicateCommentResourceTypesList = OpenAPIUtils.parametersToList("multi", replicateCommentResourceTypesArray);
        List<String> replicateCommentResourceTypes = new ArrayList<String>();
        for (String curParam : replicateCommentResourceTypesList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                replicateCommentResourceTypes.add(curParam);
            }
        }
        ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacInfo obj = imp.comAdobeGraniteCommentsInternalCommentReplicationContentFilterFac(post, apply, delete, action, $location, propertylist, replicateCommentResourceTypes);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeGraniteCompatrouterImplCompatSwitchingServiceImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] compatgroupsArray = request().queryString().get("compatgroups");
        List<String> compatgroupsList = OpenAPIUtils.parametersToList("multi", compatgroupsArray);
        List<String> compatgroups = new ArrayList<String>();
        for (String curParam : compatgroupsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                compatgroups.add(curParam);
            }
        }
        String valueenabled = request().getQueryString("enabled");
        Boolean enabled;
        if (valueenabled != null) {
            enabled = Boolean.valueOf(valueenabled);
        } else {
            enabled = null;
        }
        ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplInfo obj = imp.comAdobeGraniteCompatrouterImplCompatSwitchingServiceImpl(post, apply, delete, action, $location, propertylist, compatgroups, enabled);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeGraniteCompatrouterImplRoutingConfig() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueid = request().getQueryString("id");
        String id;
        if (valueid != null) {
            id = valueid;
        } else {
            id = null;
        }
        String valuecompatPath = request().getQueryString("compatPath");
        String compatPath;
        if (valuecompatPath != null) {
            compatPath = valuecompatPath;
        } else {
            compatPath = null;
        }
        String valuenewPath = request().getQueryString("newPath");
        String newPath;
        if (valuenewPath != null) {
            newPath = valuenewPath;
        } else {
            newPath = null;
        }
        ComAdobeGraniteCompatrouterImplRoutingConfigInfo obj = imp.comAdobeGraniteCompatrouterImplRoutingConfig(post, apply, delete, action, $location, propertylist, id, compatPath, newPath);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeGraniteCompatrouterImplSwitchMappingConfig() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuegroup = request().getQueryString("group");
        String group;
        if (valuegroup != null) {
            group = valuegroup;
        } else {
            group = null;
        }
        String[] idsArray = request().queryString().get("ids");
        List<String> idsList = OpenAPIUtils.parametersToList("multi", idsArray);
        List<String> ids = new ArrayList<String>();
        for (String curParam : idsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                ids.add(curParam);
            }
        }
        ComAdobeGraniteCompatrouterImplSwitchMappingConfigInfo obj = imp.comAdobeGraniteCompatrouterImplSwitchMappingConfig(post, apply, delete, action, $location, propertylist, group, ids);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolving() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueenabled = request().getQueryString("enabled");
        Boolean enabled;
        if (valueenabled != null) {
            enabled = Boolean.valueOf(valueenabled);
        } else {
            enabled = null;
        }
        String[] fallbackPathsArray = request().queryString().get("fallbackPaths");
        List<String> fallbackPathsList = OpenAPIUtils.parametersToList("multi", fallbackPathsArray);
        List<String> fallbackPaths = new ArrayList<String>();
        for (String curParam : fallbackPathsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                fallbackPaths.add(curParam);
            }
        }
        ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingInfo obj = imp.comAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolving(post, apply, delete, action, $location, propertylist, enabled, fallbackPaths);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeGraniteContexthubImplContextHubImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuecomAdobeGraniteContexthubSilentMode = request().getQueryString("com.adobe.granite.contexthub.silent_mode");
        Boolean comAdobeGraniteContexthubSilentMode;
        if (valuecomAdobeGraniteContexthubSilentMode != null) {
            comAdobeGraniteContexthubSilentMode = Boolean.valueOf(valuecomAdobeGraniteContexthubSilentMode);
        } else {
            comAdobeGraniteContexthubSilentMode = null;
        }
        String valuecomAdobeGraniteContexthubShowUi = request().getQueryString("com.adobe.granite.contexthub.show_ui");
        Boolean comAdobeGraniteContexthubShowUi;
        if (valuecomAdobeGraniteContexthubShowUi != null) {
            comAdobeGraniteContexthubShowUi = Boolean.valueOf(valuecomAdobeGraniteContexthubShowUi);
        } else {
            comAdobeGraniteContexthubShowUi = null;
        }
        ComAdobeGraniteContexthubImplContextHubImplInfo obj = imp.comAdobeGraniteContexthubImplContextHubImpl(post, apply, delete, action, $location, propertylist, comAdobeGraniteContexthubSilentMode, comAdobeGraniteContexthubShowUi);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeGraniteCorsImplCORSPolicyImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] alloworiginArray = request().queryString().get("alloworigin");
        List<String> alloworiginList = OpenAPIUtils.parametersToList("multi", alloworiginArray);
        List<String> alloworigin = new ArrayList<String>();
        for (String curParam : alloworiginList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                alloworigin.add(curParam);
            }
        }
        String[] alloworiginregexpArray = request().queryString().get("alloworiginregexp");
        List<String> alloworiginregexpList = OpenAPIUtils.parametersToList("multi", alloworiginregexpArray);
        List<String> alloworiginregexp = new ArrayList<String>();
        for (String curParam : alloworiginregexpList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                alloworiginregexp.add(curParam);
            }
        }
        String[] allowedpathsArray = request().queryString().get("allowedpaths");
        List<String> allowedpathsList = OpenAPIUtils.parametersToList("multi", allowedpathsArray);
        List<String> allowedpaths = new ArrayList<String>();
        for (String curParam : allowedpathsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                allowedpaths.add(curParam);
            }
        }
        String[] exposedheadersArray = request().queryString().get("exposedheaders");
        List<String> exposedheadersList = OpenAPIUtils.parametersToList("multi", exposedheadersArray);
        List<String> exposedheaders = new ArrayList<String>();
        for (String curParam : exposedheadersList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                exposedheaders.add(curParam);
            }
        }
        String valuemaxage = request().getQueryString("maxage");
        Integer maxage;
        if (valuemaxage != null) {
            maxage = Integer.parseInt(valuemaxage);
        } else {
            maxage = null;
        }
        String[] supportedheadersArray = request().queryString().get("supportedheaders");
        List<String> supportedheadersList = OpenAPIUtils.parametersToList("multi", supportedheadersArray);
        List<String> supportedheaders = new ArrayList<String>();
        for (String curParam : supportedheadersList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                supportedheaders.add(curParam);
            }
        }
        String[] supportedmethodsArray = request().queryString().get("supportedmethods");
        List<String> supportedmethodsList = OpenAPIUtils.parametersToList("multi", supportedmethodsArray);
        List<String> supportedmethods = new ArrayList<String>();
        for (String curParam : supportedmethodsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                supportedmethods.add(curParam);
            }
        }
        String valuesupportscredentials = request().getQueryString("supportscredentials");
        Boolean supportscredentials;
        if (valuesupportscredentials != null) {
            supportscredentials = Boolean.valueOf(valuesupportscredentials);
        } else {
            supportscredentials = null;
        }
        ComAdobeGraniteCorsImplCORSPolicyImplInfo obj = imp.comAdobeGraniteCorsImplCORSPolicyImpl(post, apply, delete, action, $location, propertylist, alloworigin, alloworiginregexp, allowedpaths, exposedheaders, maxage, supportedheaders, supportedmethods, supportscredentials);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeGraniteCsrfImplCSRFFilter() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] filterMethodsArray = request().queryString().get("filter.methods");
        List<String> filterMethodsList = OpenAPIUtils.parametersToList("multi", filterMethodsArray);
        List<String> filterMethods = new ArrayList<String>();
        for (String curParam : filterMethodsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                filterMethods.add(curParam);
            }
        }
        String valuefilterEnableSafeUserAgents = request().getQueryString("filter.enable.safe.user.agents");
        Boolean filterEnableSafeUserAgents;
        if (valuefilterEnableSafeUserAgents != null) {
            filterEnableSafeUserAgents = Boolean.valueOf(valuefilterEnableSafeUserAgents);
        } else {
            filterEnableSafeUserAgents = null;
        }
        String[] filterSafeUserAgentsArray = request().queryString().get("filter.safe.user.agents");
        List<String> filterSafeUserAgentsList = OpenAPIUtils.parametersToList("multi", filterSafeUserAgentsArray);
        List<String> filterSafeUserAgents = new ArrayList<String>();
        for (String curParam : filterSafeUserAgentsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                filterSafeUserAgents.add(curParam);
            }
        }
        String[] filterExcludedPathsArray = request().queryString().get("filter.excluded.paths");
        List<String> filterExcludedPathsList = OpenAPIUtils.parametersToList("multi", filterExcludedPathsArray);
        List<String> filterExcludedPaths = new ArrayList<String>();
        for (String curParam : filterExcludedPathsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                filterExcludedPaths.add(curParam);
            }
        }
        ComAdobeGraniteCsrfImplCSRFFilterInfo obj = imp.comAdobeGraniteCsrfImplCSRFFilter(post, apply, delete, action, $location, propertylist, filterMethods, filterEnableSafeUserAgents, filterSafeUserAgents, filterExcludedPaths);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeGraniteCsrfImplCSRFServlet() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuecsrfTokenExpiresIn = request().getQueryString("csrf.token.expires.in");
        Integer csrfTokenExpiresIn;
        if (valuecsrfTokenExpiresIn != null) {
            csrfTokenExpiresIn = Integer.parseInt(valuecsrfTokenExpiresIn);
        } else {
            csrfTokenExpiresIn = null;
        }
        String valueslingAuthRequirements = request().getQueryString("sling.auth.requirements");
        String slingAuthRequirements;
        if (valueslingAuthRequirements != null) {
            slingAuthRequirements = valueslingAuthRequirements;
        } else {
            slingAuthRequirements = null;
        }
        ComAdobeGraniteCsrfImplCSRFServletInfo obj = imp.comAdobeGraniteCsrfImplCSRFServlet(post, apply, delete, action, $location, propertylist, csrfTokenExpiresIn, slingAuthRequirements);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeGraniteDistributionCoreImplCryptoDistributionTransportSe() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuename = request().getQueryString("name");
        String name;
        if (valuename != null) {
            name = valuename;
        } else {
            name = null;
        }
        String valueusername = request().getQueryString("username");
        String username;
        if (valueusername != null) {
            username = valueusername;
        } else {
            username = null;
        }
        String valueencryptedPassword = request().getQueryString("encryptedPassword");
        String encryptedPassword;
        if (valueencryptedPassword != null) {
            encryptedPassword = valueencryptedPassword;
        } else {
            encryptedPassword = null;
        }
        ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeInfo obj = imp.comAdobeGraniteDistributionCoreImplCryptoDistributionTransportSe(post, apply, delete, action, $location, propertylist, name, username, encryptedPassword);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeGraniteDistributionCoreImplDiffDiffChangesObserver() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueenabled = request().getQueryString("enabled");
        Boolean enabled;
        if (valueenabled != null) {
            enabled = Boolean.valueOf(valueenabled);
        } else {
            enabled = null;
        }
        String valueagentName = request().getQueryString("agentName");
        String agentName;
        if (valueagentName != null) {
            agentName = valueagentName;
        } else {
            agentName = null;
        }
        String valuediffPath = request().getQueryString("diffPath");
        String diffPath;
        if (valuediffPath != null) {
            diffPath = valuediffPath;
        } else {
            diffPath = null;
        }
        String valueobservedPath = request().getQueryString("observedPath");
        String observedPath;
        if (valueobservedPath != null) {
            observedPath = valueobservedPath;
        } else {
            observedPath = null;
        }
        String valueserviceName = request().getQueryString("serviceName");
        String serviceName;
        if (valueserviceName != null) {
            serviceName = valueserviceName;
        } else {
            serviceName = null;
        }
        String valuepropertyNames = request().getQueryString("propertyNames");
        String propertyNames;
        if (valuepropertyNames != null) {
            propertyNames = valuepropertyNames;
        } else {
            propertyNames = null;
        }
        String valuedistributionDelay = request().getQueryString("distributionDelay");
        Integer distributionDelay;
        if (valuedistributionDelay != null) {
            distributionDelay = Integer.parseInt(valuedistributionDelay);
        } else {
            distributionDelay = null;
        }
        String valueserviceUserTarget = request().getQueryString("serviceUser.target");
        String serviceUserTarget;
        if (valueserviceUserTarget != null) {
            serviceUserTarget = valueserviceUserTarget;
        } else {
            serviceUserTarget = null;
        }
        ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverInfo obj = imp.comAdobeGraniteDistributionCoreImplDiffDiffChangesObserver(post, apply, delete, action, $location, propertylist, enabled, agentName, diffPath, observedPath, serviceName, propertyNames, distributionDelay, serviceUserTarget);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeGraniteDistributionCoreImplDiffDiffEventListener() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuediffPath = request().getQueryString("diffPath");
        String diffPath;
        if (valuediffPath != null) {
            diffPath = valuediffPath;
        } else {
            diffPath = null;
        }
        String valueserviceName = request().getQueryString("serviceName");
        String serviceName;
        if (valueserviceName != null) {
            serviceName = valueserviceName;
        } else {
            serviceName = null;
        }
        String valueserviceUserTarget = request().getQueryString("serviceUser.target");
        String serviceUserTarget;
        if (valueserviceUserTarget != null) {
            serviceUserTarget = valueserviceUserTarget;
        } else {
            serviceUserTarget = null;
        }
        ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerInfo obj = imp.comAdobeGraniteDistributionCoreImplDiffDiffEventListener(post, apply, delete, action, $location, propertylist, diffPath, serviceName, serviceUserTarget);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeGraniteDistributionCoreImplDistributionToReplicationEven() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] importerNameArray = request().queryString().get("importer.name");
        List<String> importerNameList = OpenAPIUtils.parametersToList("multi", importerNameArray);
        List<String> importerName = new ArrayList<String>();
        for (String curParam : importerNameList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                importerName.add(curParam);
            }
        }
        ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenInfo obj = imp.comAdobeGraniteDistributionCoreImplDistributionToReplicationEven(post, apply, delete, action, $location, propertylist, importerName);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeGraniteDistributionCoreImplReplicationAdaptersReplicat() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueproviderName = request().getQueryString("providerName");
        String providerName;
        if (valueproviderName != null) {
            providerName = valueproviderName;
        } else {
            providerName = null;
        }
        String valueforwardRequests = request().getQueryString("forward.requests");
        Boolean forwardRequests;
        if (valueforwardRequests != null) {
            forwardRequests = Boolean.valueOf(valueforwardRequests);
        } else {
            forwardRequests = null;
        }
        ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatInfo obj = imp.comAdobeGraniteDistributionCoreImplReplicationAdaptersReplicat(post, apply, delete, action, $location, propertylist, providerName, forwardRequests);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeGraniteDistributionCoreImplReplicationDistributionTrans() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueforwardRequests = request().getQueryString("forward.requests");
        Boolean forwardRequests;
        if (valueforwardRequests != null) {
            forwardRequests = Boolean.valueOf(valueforwardRequests);
        } else {
            forwardRequests = null;
        }
        ComAdobeGraniteDistributionCoreImplReplicationDistributionTransInfo obj = imp.comAdobeGraniteDistributionCoreImplReplicationDistributionTrans(post, apply, delete, action, $location, propertylist, forwardRequests);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeGraniteDistributionCoreImplTransportAccessTokenDistribu() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuename = request().getQueryString("name");
        String name;
        if (valuename != null) {
            name = valuename;
        } else {
            name = null;
        }
        String valueserviceName = request().getQueryString("serviceName");
        String serviceName;
        if (valueserviceName != null) {
            serviceName = valueserviceName;
        } else {
            serviceName = null;
        }
        String valueuserId = request().getQueryString("userId");
        String userId;
        if (valueuserId != null) {
            userId = valueuserId;
        } else {
            userId = null;
        }
        String valueaccessTokenProviderTarget = request().getQueryString("accessTokenProvider.target");
        String accessTokenProviderTarget;
        if (valueaccessTokenProviderTarget != null) {
            accessTokenProviderTarget = valueaccessTokenProviderTarget;
        } else {
            accessTokenProviderTarget = null;
        }
        ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuInfo obj = imp.comAdobeGraniteDistributionCoreImplTransportAccessTokenDistribu(post, apply, delete, action, $location, propertylist, name, serviceName, userId, accessTokenProviderTarget);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeGraniteFragsImplCheckHttpHeaderFlag() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuefeatureName = request().getQueryString("feature.name");
        String featureName;
        if (valuefeatureName != null) {
            featureName = valuefeatureName;
        } else {
            featureName = null;
        }
        String valuefeatureDescription = request().getQueryString("feature.description");
        String featureDescription;
        if (valuefeatureDescription != null) {
            featureDescription = valuefeatureDescription;
        } else {
            featureDescription = null;
        }
        String valuehttpHeaderName = request().getQueryString("http.header.name");
        String httpHeaderName;
        if (valuehttpHeaderName != null) {
            httpHeaderName = valuehttpHeaderName;
        } else {
            httpHeaderName = null;
        }
        String valuehttpHeaderValuepattern = request().getQueryString("http.header.valuepattern");
        String httpHeaderValuepattern;
        if (valuehttpHeaderValuepattern != null) {
            httpHeaderValuepattern = valuehttpHeaderValuepattern;
        } else {
            httpHeaderValuepattern = null;
        }
        ComAdobeGraniteFragsImplCheckHttpHeaderFlagInfo obj = imp.comAdobeGraniteFragsImplCheckHttpHeaderFlag(post, apply, delete, action, $location, propertylist, featureName, featureDescription, httpHeaderName, httpHeaderValuepattern);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeGraniteFragsImplRandomFeature() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuefeatureName = request().getQueryString("feature.name");
        String featureName;
        if (valuefeatureName != null) {
            featureName = valuefeatureName;
        } else {
            featureName = null;
        }
        String valuefeatureDescription = request().getQueryString("feature.description");
        String featureDescription;
        if (valuefeatureDescription != null) {
            featureDescription = valuefeatureDescription;
        } else {
            featureDescription = null;
        }
        String valueactivePercentage = request().getQueryString("active.percentage");
        String activePercentage;
        if (valueactivePercentage != null) {
            activePercentage = valueactivePercentage;
        } else {
            activePercentage = null;
        }
        String valuecookieName = request().getQueryString("cookie.name");
        String cookieName;
        if (valuecookieName != null) {
            cookieName = valuecookieName;
        } else {
            cookieName = null;
        }
        String valuecookieMaxAge = request().getQueryString("cookie.maxAge");
        Integer cookieMaxAge;
        if (valuecookieMaxAge != null) {
            cookieMaxAge = Integer.parseInt(valuecookieMaxAge);
        } else {
            cookieMaxAge = null;
        }
        ComAdobeGraniteFragsImplRandomFeatureInfo obj = imp.comAdobeGraniteFragsImplRandomFeature(post, apply, delete, action, $location, propertylist, featureName, featureDescription, activePercentage, cookieName, cookieMaxAge);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeGraniteHttpcacheFileFileCacheStore() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuecomAdobeGraniteHttpcacheFileDocumentRoot = request().getQueryString("com.adobe.granite.httpcache.file.documentRoot");
        String comAdobeGraniteHttpcacheFileDocumentRoot;
        if (valuecomAdobeGraniteHttpcacheFileDocumentRoot != null) {
            comAdobeGraniteHttpcacheFileDocumentRoot = valuecomAdobeGraniteHttpcacheFileDocumentRoot;
        } else {
            comAdobeGraniteHttpcacheFileDocumentRoot = null;
        }
        String valuecomAdobeGraniteHttpcacheFileIncludeHost = request().getQueryString("com.adobe.granite.httpcache.file.includeHost");
        String comAdobeGraniteHttpcacheFileIncludeHost;
        if (valuecomAdobeGraniteHttpcacheFileIncludeHost != null) {
            comAdobeGraniteHttpcacheFileIncludeHost = valuecomAdobeGraniteHttpcacheFileIncludeHost;
        } else {
            comAdobeGraniteHttpcacheFileIncludeHost = null;
        }
        ComAdobeGraniteHttpcacheFileFileCacheStoreInfo obj = imp.comAdobeGraniteHttpcacheFileFileCacheStore(post, apply, delete, action, $location, propertylist, comAdobeGraniteHttpcacheFileDocumentRoot, comAdobeGraniteHttpcacheFileIncludeHost);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeGraniteHttpcacheImplOuterCacheFilter() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] comAdobeGraniteHttpcacheUrlPathsArray = request().queryString().get("com.adobe.granite.httpcache.url.paths");
        List<String> comAdobeGraniteHttpcacheUrlPathsList = OpenAPIUtils.parametersToList("multi", comAdobeGraniteHttpcacheUrlPathsArray);
        List<String> comAdobeGraniteHttpcacheUrlPaths = new ArrayList<String>();
        for (String curParam : comAdobeGraniteHttpcacheUrlPathsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                comAdobeGraniteHttpcacheUrlPaths.add(curParam);
            }
        }
        ComAdobeGraniteHttpcacheImplOuterCacheFilterInfo obj = imp.comAdobeGraniteHttpcacheImplOuterCacheFilter(post, apply, delete, action, $location, propertylist, comAdobeGraniteHttpcacheUrlPaths);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeGraniteI18nImplBundlePseudoTranslations() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] pseudoPatternsArray = request().queryString().get("pseudo.patterns");
        List<String> pseudoPatternsList = OpenAPIUtils.parametersToList("multi", pseudoPatternsArray);
        List<String> pseudoPatterns = new ArrayList<String>();
        for (String curParam : pseudoPatternsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                pseudoPatterns.add(curParam);
            }
        }
        ComAdobeGraniteI18nImplBundlePseudoTranslationsInfo obj = imp.comAdobeGraniteI18nImplBundlePseudoTranslations(post, apply, delete, action, $location, propertylist, pseudoPatterns);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeGraniteI18nImplPreferencesLocaleResolverService() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuesecurityPreferencesName = request().getQueryString("security.preferences.name");
        String securityPreferencesName;
        if (valuesecurityPreferencesName != null) {
            securityPreferencesName = valuesecurityPreferencesName;
        } else {
            securityPreferencesName = null;
        }
        ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceInfo obj = imp.comAdobeGraniteI18nImplPreferencesLocaleResolverService(post, apply, delete, action, $location, propertylist, securityPreferencesName);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeGraniteInfocollectorInfoCollector() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuegraniteInfocollectorIncludeThreadDumps = request().getQueryString("granite.infocollector.includeThreadDumps");
        Boolean graniteInfocollectorIncludeThreadDumps;
        if (valuegraniteInfocollectorIncludeThreadDumps != null) {
            graniteInfocollectorIncludeThreadDumps = Boolean.valueOf(valuegraniteInfocollectorIncludeThreadDumps);
        } else {
            graniteInfocollectorIncludeThreadDumps = null;
        }
        String valuegraniteInfocollectorIncludeHeapDump = request().getQueryString("granite.infocollector.includeHeapDump");
        Boolean graniteInfocollectorIncludeHeapDump;
        if (valuegraniteInfocollectorIncludeHeapDump != null) {
            graniteInfocollectorIncludeHeapDump = Boolean.valueOf(valuegraniteInfocollectorIncludeHeapDump);
        } else {
            graniteInfocollectorIncludeHeapDump = null;
        }
        ComAdobeGraniteInfocollectorInfoCollectorInfo obj = imp.comAdobeGraniteInfocollectorInfoCollector(post, apply, delete, action, $location, propertylist, graniteInfocollectorIncludeThreadDumps, graniteInfocollectorIncludeHeapDump);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeGraniteJettySslInternalGraniteSslConnectorFactory() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuecomAdobeGraniteJettySslPort = request().getQueryString("com.adobe.granite.jetty.ssl.port");
        Integer comAdobeGraniteJettySslPort;
        if (valuecomAdobeGraniteJettySslPort != null) {
            comAdobeGraniteJettySslPort = Integer.parseInt(valuecomAdobeGraniteJettySslPort);
        } else {
            comAdobeGraniteJettySslPort = null;
        }
        String valuecomAdobeGraniteJettySslKeystoreUser = request().getQueryString("com.adobe.granite.jetty.ssl.keystore.user");
        String comAdobeGraniteJettySslKeystoreUser;
        if (valuecomAdobeGraniteJettySslKeystoreUser != null) {
            comAdobeGraniteJettySslKeystoreUser = valuecomAdobeGraniteJettySslKeystoreUser;
        } else {
            comAdobeGraniteJettySslKeystoreUser = null;
        }
        String valuecomAdobeGraniteJettySslKeystorePassword = request().getQueryString("com.adobe.granite.jetty.ssl.keystore.password");
        String comAdobeGraniteJettySslKeystorePassword;
        if (valuecomAdobeGraniteJettySslKeystorePassword != null) {
            comAdobeGraniteJettySslKeystorePassword = valuecomAdobeGraniteJettySslKeystorePassword;
        } else {
            comAdobeGraniteJettySslKeystorePassword = null;
        }
        String[] comAdobeGraniteJettySslCiphersuitesExcludedArray = request().queryString().get("com.adobe.granite.jetty.ssl.ciphersuites.excluded");
        List<String> comAdobeGraniteJettySslCiphersuitesExcludedList = OpenAPIUtils.parametersToList("multi", comAdobeGraniteJettySslCiphersuitesExcludedArray);
        List<String> comAdobeGraniteJettySslCiphersuitesExcluded = new ArrayList<String>();
        for (String curParam : comAdobeGraniteJettySslCiphersuitesExcludedList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                comAdobeGraniteJettySslCiphersuitesExcluded.add(curParam);
            }
        }
        String[] comAdobeGraniteJettySslCiphersuitesIncludedArray = request().queryString().get("com.adobe.granite.jetty.ssl.ciphersuites.included");
        List<String> comAdobeGraniteJettySslCiphersuitesIncludedList = OpenAPIUtils.parametersToList("multi", comAdobeGraniteJettySslCiphersuitesIncludedArray);
        List<String> comAdobeGraniteJettySslCiphersuitesIncluded = new ArrayList<String>();
        for (String curParam : comAdobeGraniteJettySslCiphersuitesIncludedList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                comAdobeGraniteJettySslCiphersuitesIncluded.add(curParam);
            }
        }
        String valuecomAdobeGraniteJettySslClientCertificate = request().getQueryString("com.adobe.granite.jetty.ssl.client.certificate");
        String comAdobeGraniteJettySslClientCertificate;
        if (valuecomAdobeGraniteJettySslClientCertificate != null) {
            comAdobeGraniteJettySslClientCertificate = valuecomAdobeGraniteJettySslClientCertificate;
        } else {
            comAdobeGraniteJettySslClientCertificate = null;
        }
        ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryInfo obj = imp.comAdobeGraniteJettySslInternalGraniteSslConnectorFactory(post, apply, delete, action, $location, propertylist, comAdobeGraniteJettySslPort, comAdobeGraniteJettySslKeystoreUser, comAdobeGraniteJettySslKeystorePassword, comAdobeGraniteJettySslCiphersuitesExcluded, comAdobeGraniteJettySslCiphersuitesIncluded, comAdobeGraniteJettySslClientCertificate);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeGraniteLicenseImplLicenseCheckFilter() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuecheckInternval = request().getQueryString("checkInternval");
        Integer checkInternval;
        if (valuecheckInternval != null) {
            checkInternval = Integer.parseInt(valuecheckInternval);
        } else {
            checkInternval = null;
        }
        String[] excludeIdsArray = request().queryString().get("excludeIds");
        List<String> excludeIdsList = OpenAPIUtils.parametersToList("multi", excludeIdsArray);
        List<String> excludeIds = new ArrayList<String>();
        for (String curParam : excludeIdsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                excludeIds.add(curParam);
            }
        }
        String valueencryptPing = request().getQueryString("encryptPing");
        Boolean encryptPing;
        if (valueencryptPing != null) {
            encryptPing = Boolean.valueOf(valueencryptPing);
        } else {
            encryptPing = null;
        }
        ComAdobeGraniteLicenseImplLicenseCheckFilterInfo obj = imp.comAdobeGraniteLicenseImplLicenseCheckFilter(post, apply, delete, action, $location, propertylist, checkInternval, excludeIds, encryptPing);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeGraniteLoggingImplLogAnalyserImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuemessagesQueueSize = request().getQueryString("messages.queue.size");
        Integer messagesQueueSize;
        if (valuemessagesQueueSize != null) {
            messagesQueueSize = Integer.parseInt(valuemessagesQueueSize);
        } else {
            messagesQueueSize = null;
        }
        String[] loggerConfigArray = request().queryString().get("logger.config");
        List<String> loggerConfigList = OpenAPIUtils.parametersToList("multi", loggerConfigArray);
        List<String> loggerConfig = new ArrayList<String>();
        for (String curParam : loggerConfigList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                loggerConfig.add(curParam);
            }
        }
        String valuemessagesSize = request().getQueryString("messages.size");
        Integer messagesSize;
        if (valuemessagesSize != null) {
            messagesSize = Integer.parseInt(valuemessagesSize);
        } else {
            messagesSize = null;
        }
        ComAdobeGraniteLoggingImplLogAnalyserImplInfo obj = imp.comAdobeGraniteLoggingImplLogAnalyserImpl(post, apply, delete, action, $location, propertylist, messagesQueueSize, loggerConfig, messagesSize);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeGraniteLoggingImplLogErrorHealthCheck() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] hcTagsArray = request().queryString().get("hc.tags");
        List<String> hcTagsList = OpenAPIUtils.parametersToList("multi", hcTagsArray);
        List<String> hcTags = new ArrayList<String>();
        for (String curParam : hcTagsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                hcTags.add(curParam);
            }
        }
        ComAdobeGraniteLoggingImplLogErrorHealthCheckInfo obj = imp.comAdobeGraniteLoggingImplLogErrorHealthCheck(post, apply, delete, action, $location, propertylist, hcTags);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTask() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuegraniteMaintenanceMandatory = request().getQueryString("granite.maintenance.mandatory");
        Boolean graniteMaintenanceMandatory;
        if (valuegraniteMaintenanceMandatory != null) {
            graniteMaintenanceMandatory = Boolean.valueOf(valuegraniteMaintenanceMandatory);
        } else {
            graniteMaintenanceMandatory = null;
        }
        String valuejobTopics = request().getQueryString("job.topics");
        String jobTopics;
        if (valuejobTopics != null) {
            jobTopics = valuejobTopics;
        } else {
            jobTopics = null;
        }
        ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskInfo obj = imp.comAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTask(post, apply, delete, action, $location, propertylist, graniteMaintenanceMandatory, jobTopics);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTask() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuejobTopics = request().getQueryString("job.topics");
        String jobTopics;
        if (valuejobTopics != null) {
            jobTopics = valuejobTopics;
        } else {
            jobTopics = null;
        }
        ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskInfo obj = imp.comAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTask(post, apply, delete, action, $location, propertylist, jobTopics);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeGraniteMaintenanceCrxImplRevisionCleanupTask() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] fullGcDaysArray = request().queryString().get("full.gc.days");
        List<String> fullGcDaysList = OpenAPIUtils.parametersToList("multi", fullGcDaysArray);
        List<String> fullGcDays = new ArrayList<String>();
        for (String curParam : fullGcDaysList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                fullGcDays.add(curParam);
            }
        }
        ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskInfo obj = imp.comAdobeGraniteMaintenanceCrxImplRevisionCleanupTask(post, apply, delete, action, $location, propertylist, fullGcDays);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeGraniteMonitoringImplScriptConfigImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuescriptFilename = request().getQueryString("script.filename");
        String scriptFilename;
        if (valuescriptFilename != null) {
            scriptFilename = valuescriptFilename;
        } else {
            scriptFilename = null;
        }
        String valuescriptDisplay = request().getQueryString("script.display");
        String scriptDisplay;
        if (valuescriptDisplay != null) {
            scriptDisplay = valuescriptDisplay;
        } else {
            scriptDisplay = null;
        }
        String valuescriptPath = request().getQueryString("script.path");
        String scriptPath;
        if (valuescriptPath != null) {
            scriptPath = valuescriptPath;
        } else {
            scriptPath = null;
        }
        String[] scriptPlatformArray = request().queryString().get("script.platform");
        List<String> scriptPlatformList = OpenAPIUtils.parametersToList("multi", scriptPlatformArray);
        List<String> scriptPlatform = new ArrayList<String>();
        for (String curParam : scriptPlatformList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                scriptPlatform.add(curParam);
            }
        }
        String valueinterval = request().getQueryString("interval");
        Integer interval;
        if (valueinterval != null) {
            interval = Integer.parseInt(valueinterval);
        } else {
            interval = null;
        }
        String valuejmxdomain = request().getQueryString("jmxdomain");
        String jmxdomain;
        if (valuejmxdomain != null) {
            jmxdomain = valuejmxdomain;
        } else {
            jmxdomain = null;
        }
        ComAdobeGraniteMonitoringImplScriptConfigImplInfo obj = imp.comAdobeGraniteMonitoringImplScriptConfigImpl(post, apply, delete, action, $location, propertylist, scriptFilename, scriptDisplay, scriptPath, scriptPlatform, interval, jmxdomain);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHan() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuepath = request().getQueryString("path");
        String path;
        if (valuepath != null) {
            path = valuepath;
        } else {
            path = null;
        }
        String valuejaasControlFlag = request().getQueryString("jaas.controlFlag");
        String jaasControlFlag;
        if (valuejaasControlFlag != null) {
            jaasControlFlag = valuejaasControlFlag;
        } else {
            jaasControlFlag = null;
        }
        String valuejaasRealmName = request().getQueryString("jaas.realmName");
        String jaasRealmName;
        if (valuejaasRealmName != null) {
            jaasRealmName = valuejaasRealmName;
        } else {
            jaasRealmName = null;
        }
        String valuejaasRanking = request().getQueryString("jaas.ranking");
        Integer jaasRanking;
        if (valuejaasRanking != null) {
            jaasRanking = Integer.parseInt(valuejaasRanking);
        } else {
            jaasRanking = null;
        }
        String valueoauthOfflineValidation = request().getQueryString("oauth.offline.validation");
        Boolean oauthOfflineValidation;
        if (valueoauthOfflineValidation != null) {
            oauthOfflineValidation = Boolean.valueOf(valueoauthOfflineValidation);
        } else {
            oauthOfflineValidation = null;
        }
        ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanInfo obj = imp.comAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHan(post, apply, delete, action, $location, propertylist, path, jaasControlFlag, jaasRealmName, jaasRanking, oauthOfflineValidation);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeGraniteOauthServerImplAccessTokenCleanupTask() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueschedulerExpression = request().getQueryString("scheduler.expression");
        String schedulerExpression;
        if (valueschedulerExpression != null) {
            schedulerExpression = valueschedulerExpression;
        } else {
            schedulerExpression = null;
        }
        ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskInfo obj = imp.comAdobeGraniteOauthServerImplAccessTokenCleanupTask(post, apply, delete, action, $location, propertylist, schedulerExpression);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeGraniteOauthServerImplOAuth2ClientRevocationServlet() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueoauthClientRevocationActive = request().getQueryString("oauth.client.revocation.active");
        Boolean oauthClientRevocationActive;
        if (valueoauthClientRevocationActive != null) {
            oauthClientRevocationActive = Boolean.valueOf(valueoauthClientRevocationActive);
        } else {
            oauthClientRevocationActive = null;
        }
        ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletInfo obj = imp.comAdobeGraniteOauthServerImplOAuth2ClientRevocationServlet(post, apply, delete, action, $location, propertylist, oauthClientRevocationActive);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeGraniteOauthServerImplOAuth2RevocationEndpointServlet() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueslingServletPaths = request().getQueryString("sling.servlet.paths");
        String slingServletPaths;
        if (valueslingServletPaths != null) {
            slingServletPaths = valueslingServletPaths;
        } else {
            slingServletPaths = null;
        }
        String valueoauthRevocationActive = request().getQueryString("oauth.revocation.active");
        Boolean oauthRevocationActive;
        if (valueoauthRevocationActive != null) {
            oauthRevocationActive = Boolean.valueOf(valueoauthRevocationActive);
        } else {
            oauthRevocationActive = null;
        }
        ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletInfo obj = imp.comAdobeGraniteOauthServerImplOAuth2RevocationEndpointServlet(post, apply, delete, action, $location, propertylist, slingServletPaths, oauthRevocationActive);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeGraniteOauthServerImplOAuth2TokenEndpointServlet() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueoauthIssuer = request().getQueryString("oauth.issuer");
        String oauthIssuer;
        if (valueoauthIssuer != null) {
            oauthIssuer = valueoauthIssuer;
        } else {
            oauthIssuer = null;
        }
        String valueoauthAccessTokenExpiresIn = request().getQueryString("oauth.access.token.expires.in");
        String oauthAccessTokenExpiresIn;
        if (valueoauthAccessTokenExpiresIn != null) {
            oauthAccessTokenExpiresIn = valueoauthAccessTokenExpiresIn;
        } else {
            oauthAccessTokenExpiresIn = null;
        }
        String valueosgiHttpWhiteboardServletPattern = request().getQueryString("osgi.http.whiteboard.servlet.pattern");
        String osgiHttpWhiteboardServletPattern;
        if (valueosgiHttpWhiteboardServletPattern != null) {
            osgiHttpWhiteboardServletPattern = valueosgiHttpWhiteboardServletPattern;
        } else {
            osgiHttpWhiteboardServletPattern = null;
        }
        String valueosgiHttpWhiteboardContextSelect = request().getQueryString("osgi.http.whiteboard.context.select");
        String osgiHttpWhiteboardContextSelect;
        if (valueosgiHttpWhiteboardContextSelect != null) {
            osgiHttpWhiteboardContextSelect = valueosgiHttpWhiteboardContextSelect;
        } else {
            osgiHttpWhiteboardContextSelect = null;
        }
        ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletInfo obj = imp.comAdobeGraniteOauthServerImplOAuth2TokenEndpointServlet(post, apply, delete, action, $location, propertylist, oauthIssuer, oauthAccessTokenExpiresIn, osgiHttpWhiteboardServletPattern, osgiHttpWhiteboardContextSelect);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeGraniteOauthServerImplOAuth2TokenRevocationServlet() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueoauthTokenRevocationActive = request().getQueryString("oauth.token.revocation.active");
        Boolean oauthTokenRevocationActive;
        if (valueoauthTokenRevocationActive != null) {
            oauthTokenRevocationActive = Boolean.valueOf(valueoauthTokenRevocationActive);
        } else {
            oauthTokenRevocationActive = null;
        }
        ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletInfo obj = imp.comAdobeGraniteOauthServerImplOAuth2TokenRevocationServlet(post, apply, delete, action, $location, propertylist, oauthTokenRevocationActive);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeGraniteOffloadingImplOffloadingConfigurator() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueoffloadingTransporter = request().getQueryString("offloading.transporter");
        String offloadingTransporter;
        if (valueoffloadingTransporter != null) {
            offloadingTransporter = valueoffloadingTransporter;
        } else {
            offloadingTransporter = null;
        }
        String valueoffloadingCleanupPayload = request().getQueryString("offloading.cleanup.payload");
        Boolean offloadingCleanupPayload;
        if (valueoffloadingCleanupPayload != null) {
            offloadingCleanupPayload = Boolean.valueOf(valueoffloadingCleanupPayload);
        } else {
            offloadingCleanupPayload = null;
        }
        ComAdobeGraniteOffloadingImplOffloadingConfiguratorInfo obj = imp.comAdobeGraniteOffloadingImplOffloadingConfigurator(post, apply, delete, action, $location, propertylist, offloadingTransporter, offloadingCleanupPayload);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeGraniteOffloadingImplOffloadingJobCloner() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueoffloadingJobclonerEnabled = request().getQueryString("offloading.jobcloner.enabled");
        Boolean offloadingJobclonerEnabled;
        if (valueoffloadingJobclonerEnabled != null) {
            offloadingJobclonerEnabled = Boolean.valueOf(valueoffloadingJobclonerEnabled);
        } else {
            offloadingJobclonerEnabled = null;
        }
        ComAdobeGraniteOffloadingImplOffloadingJobClonerInfo obj = imp.comAdobeGraniteOffloadingImplOffloadingJobCloner(post, apply, delete, action, $location, propertylist, offloadingJobclonerEnabled);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeGraniteOffloadingImplOffloadingJobOffloader() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueoffloadingOffloaderEnabled = request().getQueryString("offloading.offloader.enabled");
        Boolean offloadingOffloaderEnabled;
        if (valueoffloadingOffloaderEnabled != null) {
            offloadingOffloaderEnabled = Boolean.valueOf(valueoffloadingOffloaderEnabled);
        } else {
            offloadingOffloaderEnabled = null;
        }
        ComAdobeGraniteOffloadingImplOffloadingJobOffloaderInfo obj = imp.comAdobeGraniteOffloadingImplOffloadingJobOffloader(post, apply, delete, action, $location, propertylist, offloadingOffloaderEnabled);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeGraniteOffloadingImplTransporterOffloadingAgentManager() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueoffloadingAgentmanagerEnabled = request().getQueryString("offloading.agentmanager.enabled");
        Boolean offloadingAgentmanagerEnabled;
        if (valueoffloadingAgentmanagerEnabled != null) {
            offloadingAgentmanagerEnabled = Boolean.valueOf(valueoffloadingAgentmanagerEnabled);
        } else {
            offloadingAgentmanagerEnabled = null;
        }
        ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerInfo obj = imp.comAdobeGraniteOffloadingImplTransporterOffloadingAgentManager(post, apply, delete, action, $location, propertylist, offloadingAgentmanagerEnabled);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspo() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuedefaultTransportAgentToWorkerPrefix = request().getQueryString("default.transport.agent-to-worker.prefix");
        String defaultTransportAgentToWorkerPrefix;
        if (valuedefaultTransportAgentToWorkerPrefix != null) {
            defaultTransportAgentToWorkerPrefix = valuedefaultTransportAgentToWorkerPrefix;
        } else {
            defaultTransportAgentToWorkerPrefix = null;
        }
        String valuedefaultTransportAgentToMasterPrefix = request().getQueryString("default.transport.agent-to-master.prefix");
        String defaultTransportAgentToMasterPrefix;
        if (valuedefaultTransportAgentToMasterPrefix != null) {
            defaultTransportAgentToMasterPrefix = valuedefaultTransportAgentToMasterPrefix;
        } else {
            defaultTransportAgentToMasterPrefix = null;
        }
        String valuedefaultTransportInputPackage = request().getQueryString("default.transport.input.package");
        String defaultTransportInputPackage;
        if (valuedefaultTransportInputPackage != null) {
            defaultTransportInputPackage = valuedefaultTransportInputPackage;
        } else {
            defaultTransportInputPackage = null;
        }
        String valuedefaultTransportOutputPackage = request().getQueryString("default.transport.output.package");
        String defaultTransportOutputPackage;
        if (valuedefaultTransportOutputPackage != null) {
            defaultTransportOutputPackage = valuedefaultTransportOutputPackage;
        } else {
            defaultTransportOutputPackage = null;
        }
        String valuedefaultTransportReplicationSynchronous = request().getQueryString("default.transport.replication.synchronous");
        Boolean defaultTransportReplicationSynchronous;
        if (valuedefaultTransportReplicationSynchronous != null) {
            defaultTransportReplicationSynchronous = Boolean.valueOf(valuedefaultTransportReplicationSynchronous);
        } else {
            defaultTransportReplicationSynchronous = null;
        }
        String valuedefaultTransportContentpackage = request().getQueryString("default.transport.contentpackage");
        Boolean defaultTransportContentpackage;
        if (valuedefaultTransportContentpackage != null) {
            defaultTransportContentpackage = Boolean.valueOf(valuedefaultTransportContentpackage);
        } else {
            defaultTransportContentpackage = null;
        }
        String valueoffloadingTransporterDefaultEnabled = request().getQueryString("offloading.transporter.default.enabled");
        Boolean offloadingTransporterDefaultEnabled;
        if (valueoffloadingTransporterDefaultEnabled != null) {
            offloadingTransporterDefaultEnabled = Boolean.valueOf(valueoffloadingTransporterDefaultEnabled);
        } else {
            offloadingTransporterDefaultEnabled = null;
        }
        ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoInfo obj = imp.comAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspo(post, apply, delete, action, $location, propertylist, defaultTransportAgentToWorkerPrefix, defaultTransportAgentToMasterPrefix, defaultTransportInputPackage, defaultTransportOutputPackage, defaultTransportReplicationSynchronous, defaultTransportContentpackage, offloadingTransporterDefaultEnabled);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeGraniteOmnisearchImplCoreOmniSearchServiceImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueomnisearchSuggestionRequiretextMin = request().getQueryString("omnisearch.suggestion.requiretext.min");
        Integer omnisearchSuggestionRequiretextMin;
        if (valueomnisearchSuggestionRequiretextMin != null) {
            omnisearchSuggestionRequiretextMin = Integer.parseInt(valueomnisearchSuggestionRequiretextMin);
        } else {
            omnisearchSuggestionRequiretextMin = null;
        }
        String valueomnisearchSuggestionSpellcheckRequire = request().getQueryString("omnisearch.suggestion.spellcheck.require");
        Boolean omnisearchSuggestionSpellcheckRequire;
        if (valueomnisearchSuggestionSpellcheckRequire != null) {
            omnisearchSuggestionSpellcheckRequire = Boolean.valueOf(valueomnisearchSuggestionSpellcheckRequire);
        } else {
            omnisearchSuggestionSpellcheckRequire = null;
        }
        ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplInfo obj = imp.comAdobeGraniteOmnisearchImplCoreOmniSearchServiceImpl(post, apply, delete, action, $location, propertylist, omnisearchSuggestionRequiretextMin, omnisearchSuggestionSpellcheckRequire);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeGraniteOptoutImplOptOutServiceImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] optoutCookiesArray = request().queryString().get("optout.cookies");
        List<String> optoutCookiesList = OpenAPIUtils.parametersToList("multi", optoutCookiesArray);
        List<String> optoutCookies = new ArrayList<String>();
        for (String curParam : optoutCookiesList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                optoutCookies.add(curParam);
            }
        }
        String[] optoutHeadersArray = request().queryString().get("optout.headers");
        List<String> optoutHeadersList = OpenAPIUtils.parametersToList("multi", optoutHeadersArray);
        List<String> optoutHeaders = new ArrayList<String>();
        for (String curParam : optoutHeadersList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                optoutHeaders.add(curParam);
            }
        }
        String[] optoutWhitelistCookiesArray = request().queryString().get("optout.whitelist.cookies");
        List<String> optoutWhitelistCookiesList = OpenAPIUtils.parametersToList("multi", optoutWhitelistCookiesArray);
        List<String> optoutWhitelistCookies = new ArrayList<String>();
        for (String curParam : optoutWhitelistCookiesList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                optoutWhitelistCookies.add(curParam);
            }
        }
        ComAdobeGraniteOptoutImplOptOutServiceImplInfo obj = imp.comAdobeGraniteOptoutImplOptOutServiceImpl(post, apply, delete, action, $location, propertylist, optoutCookies, optoutHeaders, optoutWhitelistCookies);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeGraniteQueriesImplHcAsyncIndexHealthCheck() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueindexingCriticalThreshold = request().getQueryString("indexing.critical.threshold");
        Integer indexingCriticalThreshold;
        if (valueindexingCriticalThreshold != null) {
            indexingCriticalThreshold = Integer.parseInt(valueindexingCriticalThreshold);
        } else {
            indexingCriticalThreshold = null;
        }
        String valueindexingWarnThreshold = request().getQueryString("indexing.warn.threshold");
        Integer indexingWarnThreshold;
        if (valueindexingWarnThreshold != null) {
            indexingWarnThreshold = Integer.parseInt(valueindexingWarnThreshold);
        } else {
            indexingWarnThreshold = null;
        }
        String[] hcTagsArray = request().queryString().get("hc.tags");
        List<String> hcTagsList = OpenAPIUtils.parametersToList("multi", hcTagsArray);
        List<String> hcTags = new ArrayList<String>();
        for (String curParam : hcTagsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                hcTags.add(curParam);
            }
        }
        ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckInfo obj = imp.comAdobeGraniteQueriesImplHcAsyncIndexHealthCheck(post, apply, delete, action, $location, propertylist, indexingCriticalThreshold, indexingWarnThreshold, hcTags);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeGraniteQueriesImplHcLargeIndexHealthCheck() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuelargeIndexCriticalThreshold = request().getQueryString("large.index.critical.threshold");
        Integer largeIndexCriticalThreshold;
        if (valuelargeIndexCriticalThreshold != null) {
            largeIndexCriticalThreshold = Integer.parseInt(valuelargeIndexCriticalThreshold);
        } else {
            largeIndexCriticalThreshold = null;
        }
        String valuelargeIndexWarnThreshold = request().getQueryString("large.index.warn.threshold");
        Integer largeIndexWarnThreshold;
        if (valuelargeIndexWarnThreshold != null) {
            largeIndexWarnThreshold = Integer.parseInt(valuelargeIndexWarnThreshold);
        } else {
            largeIndexWarnThreshold = null;
        }
        String[] hcTagsArray = request().queryString().get("hc.tags");
        List<String> hcTagsList = OpenAPIUtils.parametersToList("multi", hcTagsArray);
        List<String> hcTags = new ArrayList<String>();
        for (String curParam : hcTagsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                hcTags.add(curParam);
            }
        }
        ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckInfo obj = imp.comAdobeGraniteQueriesImplHcLargeIndexHealthCheck(post, apply, delete, action, $location, propertylist, largeIndexCriticalThreshold, largeIndexWarnThreshold, hcTags);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeGraniteQueriesImplHcQueriesStatusHealthCheck() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] hcTagsArray = request().queryString().get("hc.tags");
        List<String> hcTagsList = OpenAPIUtils.parametersToList("multi", hcTagsArray);
        List<String> hcTags = new ArrayList<String>();
        for (String curParam : hcTagsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                hcTags.add(curParam);
            }
        }
        ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckInfo obj = imp.comAdobeGraniteQueriesImplHcQueriesStatusHealthCheck(post, apply, delete, action, $location, propertylist, hcTags);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeGraniteQueriesImplHcQueryHealthCheckMetrics() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuegetPeriod = request().getQueryString("getPeriod");
        Integer getPeriod;
        if (valuegetPeriod != null) {
            getPeriod = Integer.parseInt(valuegetPeriod);
        } else {
            getPeriod = null;
        }
        ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsInfo obj = imp.comAdobeGraniteQueriesImplHcQueryHealthCheckMetrics(post, apply, delete, action, $location, propertylist, getPeriod);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeGraniteQueriesImplHcQueryLimitsHealthCheck() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] hcTagsArray = request().queryString().get("hc.tags");
        List<String> hcTagsList = OpenAPIUtils.parametersToList("multi", hcTagsArray);
        List<String> hcTags = new ArrayList<String>();
        for (String curParam : hcTagsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                hcTags.add(curParam);
            }
        }
        ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckInfo obj = imp.comAdobeGraniteQueriesImplHcQueryLimitsHealthCheck(post, apply, delete, action, $location, propertylist, hcTags);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeGraniteReplicationHcImplReplicationQueueHealthCheck() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuenumberOfRetriesAllowed = request().getQueryString("number.of.retries.allowed");
        Integer numberOfRetriesAllowed;
        if (valuenumberOfRetriesAllowed != null) {
            numberOfRetriesAllowed = Integer.parseInt(valuenumberOfRetriesAllowed);
        } else {
            numberOfRetriesAllowed = null;
        }
        String[] hcTagsArray = request().queryString().get("hc.tags");
        List<String> hcTagsList = OpenAPIUtils.parametersToList("multi", hcTagsArray);
        List<String> hcTags = new ArrayList<String>();
        for (String curParam : hcTagsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                hcTags.add(curParam);
            }
        }
        ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckInfo obj = imp.comAdobeGraniteReplicationHcImplReplicationQueueHealthCheck(post, apply, delete, action, $location, propertylist, numberOfRetriesAllowed, hcTags);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeGraniteReplicationHcImplReplicationTransportUsersHealthC() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] hcTagsArray = request().queryString().get("hc.tags");
        List<String> hcTagsList = OpenAPIUtils.parametersToList("multi", hcTagsArray);
        List<String> hcTags = new ArrayList<String>();
        for (String curParam : hcTagsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                hcTags.add(curParam);
            }
        }
        ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCInfo obj = imp.comAdobeGraniteReplicationHcImplReplicationTransportUsersHealthC(post, apply, delete, action, $location, propertylist, hcTags);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheck() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] hcTagsArray = request().queryString().get("hc.tags");
        List<String> hcTagsList = OpenAPIUtils.parametersToList("multi", hcTagsArray);
        List<String> hcTags = new ArrayList<String>();
        for (String curParam : hcTagsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                hcTags.add(curParam);
            }
        }
        ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckInfo obj = imp.comAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheck(post, apply, delete, action, $location, propertylist, hcTags);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthC() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] hcTagsArray = request().queryString().get("hc.tags");
        List<String> hcTagsList = OpenAPIUtils.parametersToList("multi", hcTagsArray);
        List<String> hcTags = new ArrayList<String>();
        for (String curParam : hcTagsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                hcTags.add(curParam);
            }
        }
        String[] excludeSearchPathArray = request().queryString().get("exclude.search.path");
        List<String> excludeSearchPathList = OpenAPIUtils.parametersToList("multi", excludeSearchPathArray);
        List<String> excludeSearchPath = new ArrayList<String>();
        for (String curParam : excludeSearchPathList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                excludeSearchPath.add(curParam);
            }
        }
        ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCInfo obj = imp.comAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthC(post, apply, delete, action, $location, propertylist, hcTags, excludeSearchPath);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeGraniteRepositoryHcImplContinuousRGCHealthCheck() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] hcTagsArray = request().queryString().get("hc.tags");
        List<String> hcTagsList = OpenAPIUtils.parametersToList("multi", hcTagsArray);
        List<String> hcTags = new ArrayList<String>();
        for (String curParam : hcTagsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                hcTags.add(curParam);
            }
        }
        ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckInfo obj = imp.comAdobeGraniteRepositoryHcImplContinuousRGCHealthCheck(post, apply, delete, action, $location, propertylist, hcTags);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthChe() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] hcTagsArray = request().queryString().get("hc.tags");
        List<String> hcTagsList = OpenAPIUtils.parametersToList("multi", hcTagsArray);
        List<String> hcTags = new ArrayList<String>();
        for (String curParam : hcTagsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                hcTags.add(curParam);
            }
        }
        ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheInfo obj = imp.comAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthChe(post, apply, delete, action, $location, propertylist, hcTags);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheck() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] hcTagsArray = request().queryString().get("hc.tags");
        List<String> hcTagsList = OpenAPIUtils.parametersToList("multi", hcTagsArray);
        List<String> hcTags = new ArrayList<String>();
        for (String curParam : hcTagsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                hcTags.add(curParam);
            }
        }
        String[] accountLoginsArray = request().queryString().get("account.logins");
        List<String> accountLoginsList = OpenAPIUtils.parametersToList("multi", accountLoginsArray);
        List<String> accountLogins = new ArrayList<String>();
        for (String curParam : accountLoginsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                accountLogins.add(curParam);
            }
        }
        String[] consoleLoginsArray = request().queryString().get("console.logins");
        List<String> consoleLoginsList = OpenAPIUtils.parametersToList("multi", consoleLoginsArray);
        List<String> consoleLogins = new ArrayList<String>();
        for (String curParam : consoleLoginsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                consoleLogins.add(curParam);
            }
        }
        ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckInfo obj = imp.comAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheck(post, apply, delete, action, $location, propertylist, hcTags, accountLogins, consoleLogins);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeGraniteRepositoryHcImplDiskSpaceHealthCheck() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] hcTagsArray = request().queryString().get("hc.tags");
        List<String> hcTagsList = OpenAPIUtils.parametersToList("multi", hcTagsArray);
        List<String> hcTags = new ArrayList<String>();
        for (String curParam : hcTagsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                hcTags.add(curParam);
            }
        }
        String valuediskSpaceWarnThreshold = request().getQueryString("disk.space.warn.threshold");
        Integer diskSpaceWarnThreshold;
        if (valuediskSpaceWarnThreshold != null) {
            diskSpaceWarnThreshold = Integer.parseInt(valuediskSpaceWarnThreshold);
        } else {
            diskSpaceWarnThreshold = null;
        }
        String valuediskSpaceErrorThreshold = request().getQueryString("disk.space.error.threshold");
        Integer diskSpaceErrorThreshold;
        if (valuediskSpaceErrorThreshold != null) {
            diskSpaceErrorThreshold = Integer.parseInt(valuediskSpaceErrorThreshold);
        } else {
            diskSpaceErrorThreshold = null;
        }
        ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckInfo obj = imp.comAdobeGraniteRepositoryHcImplDiskSpaceHealthCheck(post, apply, delete, action, $location, propertylist, hcTags, diskSpaceWarnThreshold, diskSpaceErrorThreshold);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheck() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] hcTagsArray = request().queryString().get("hc.tags");
        List<String> hcTagsList = OpenAPIUtils.parametersToList("multi", hcTagsArray);
        List<String> hcTags = new ArrayList<String>();
        for (String curParam : hcTagsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                hcTags.add(curParam);
            }
        }
        ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckInfo obj = imp.comAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheck(post, apply, delete, action, $location, propertylist, hcTags);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeGraniteRepositoryImplCommitStatsConfig() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueenabled = request().getQueryString("enabled");
        Boolean enabled;
        if (valueenabled != null) {
            enabled = Boolean.valueOf(valueenabled);
        } else {
            enabled = null;
        }
        String valueintervalSeconds = request().getQueryString("intervalSeconds");
        Integer intervalSeconds;
        if (valueintervalSeconds != null) {
            intervalSeconds = Integer.parseInt(valueintervalSeconds);
        } else {
            intervalSeconds = null;
        }
        String valuecommitsPerIntervalThreshold = request().getQueryString("commitsPerIntervalThreshold");
        Integer commitsPerIntervalThreshold;
        if (valuecommitsPerIntervalThreshold != null) {
            commitsPerIntervalThreshold = Integer.parseInt(valuecommitsPerIntervalThreshold);
        } else {
            commitsPerIntervalThreshold = null;
        }
        String valuemaxLocationLength = request().getQueryString("maxLocationLength");
        Integer maxLocationLength;
        if (valuemaxLocationLength != null) {
            maxLocationLength = Integer.parseInt(valuemaxLocationLength);
        } else {
            maxLocationLength = null;
        }
        String valuemaxDetailsShown = request().getQueryString("maxDetailsShown");
        Integer maxDetailsShown;
        if (valuemaxDetailsShown != null) {
            maxDetailsShown = Integer.parseInt(valuemaxDetailsShown);
        } else {
            maxDetailsShown = null;
        }
        String valueminDetailsPercentage = request().getQueryString("minDetailsPercentage");
        Integer minDetailsPercentage;
        if (valueminDetailsPercentage != null) {
            minDetailsPercentage = Integer.parseInt(valueminDetailsPercentage);
        } else {
            minDetailsPercentage = null;
        }
        String[] threadMatchersArray = request().queryString().get("threadMatchers");
        List<String> threadMatchersList = OpenAPIUtils.parametersToList("multi", threadMatchersArray);
        List<String> threadMatchers = new ArrayList<String>();
        for (String curParam : threadMatchersList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                threadMatchers.add(curParam);
            }
        }
        String valuemaxGreedyDepth = request().getQueryString("maxGreedyDepth");
        Integer maxGreedyDepth;
        if (valuemaxGreedyDepth != null) {
            maxGreedyDepth = Integer.parseInt(valuemaxGreedyDepth);
        } else {
            maxGreedyDepth = null;
        }
        String valuegreedyStackMatchers = request().getQueryString("greedyStackMatchers");
        String greedyStackMatchers;
        if (valuegreedyStackMatchers != null) {
            greedyStackMatchers = valuegreedyStackMatchers;
        } else {
            greedyStackMatchers = null;
        }
        String[] stackFiltersArray = request().queryString().get("stackFilters");
        List<String> stackFiltersList = OpenAPIUtils.parametersToList("multi", stackFiltersArray);
        List<String> stackFilters = new ArrayList<String>();
        for (String curParam : stackFiltersList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                stackFilters.add(curParam);
            }
        }
        String[] stackMatchersArray = request().queryString().get("stackMatchers");
        List<String> stackMatchersList = OpenAPIUtils.parametersToList("multi", stackMatchersArray);
        List<String> stackMatchers = new ArrayList<String>();
        for (String curParam : stackMatchersList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                stackMatchers.add(curParam);
            }
        }
        String[] stackCategorizersArray = request().queryString().get("stackCategorizers");
        List<String> stackCategorizersList = OpenAPIUtils.parametersToList("multi", stackCategorizersArray);
        List<String> stackCategorizers = new ArrayList<String>();
        for (String curParam : stackCategorizersList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                stackCategorizers.add(curParam);
            }
        }
        String[] stackShortenersArray = request().queryString().get("stackShorteners");
        List<String> stackShortenersList = OpenAPIUtils.parametersToList("multi", stackShortenersArray);
        List<String> stackShorteners = new ArrayList<String>();
        for (String curParam : stackShortenersList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                stackShorteners.add(curParam);
            }
        }
        ComAdobeGraniteRepositoryImplCommitStatsConfigInfo obj = imp.comAdobeGraniteRepositoryImplCommitStatsConfig(post, apply, delete, action, $location, propertylist, enabled, intervalSeconds, commitsPerIntervalThreshold, maxLocationLength, maxDetailsShown, minDetailsPercentage, threadMatchers, maxGreedyDepth, greedyStackMatchers, stackFilters, stackMatchers, stackCategorizers, stackShorteners);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeGraniteRepositoryServiceUserConfiguration() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueserviceRanking = request().getQueryString("service.ranking");
        Integer serviceRanking;
        if (valueserviceRanking != null) {
            serviceRanking = Integer.parseInt(valueserviceRanking);
        } else {
            serviceRanking = null;
        }
        String valueserviceusersSimpleSubjectPopulation = request().getQueryString("serviceusers.simpleSubjectPopulation");
        Boolean serviceusersSimpleSubjectPopulation;
        if (valueserviceusersSimpleSubjectPopulation != null) {
            serviceusersSimpleSubjectPopulation = Boolean.valueOf(valueserviceusersSimpleSubjectPopulation);
        } else {
            serviceusersSimpleSubjectPopulation = null;
        }
        String[] serviceusersListArray = request().queryString().get("serviceusers.list");
        List<String> serviceusersListList = OpenAPIUtils.parametersToList("multi", serviceusersListArray);
        List<String> serviceusersList = new ArrayList<String>();
        for (String curParam : serviceusersListList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                serviceusersList.add(curParam);
            }
        }
        ComAdobeGraniteRepositoryServiceUserConfigurationInfo obj = imp.comAdobeGraniteRepositoryServiceUserConfiguration(post, apply, delete, action, $location, propertylist, serviceRanking, serviceusersSimpleSubjectPopulation, serviceusersList);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckIm() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] hcTagsArray = request().queryString().get("hc.tags");
        List<String> hcTagsList = OpenAPIUtils.parametersToList("multi", hcTagsArray);
        List<String> hcTags = new ArrayList<String>();
        for (String curParam : hcTagsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                hcTags.add(curParam);
            }
        }
        ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImInfo obj = imp.comAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckIm(post, apply, delete, action, $location, propertylist, hcTags);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeGraniteResourcestatusImplCompositeStatusType() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuename = request().getQueryString("name");
        String name;
        if (valuename != null) {
            name = valuename;
        } else {
            name = null;
        }
        String[] typesArray = request().queryString().get("types");
        List<String> typesList = OpenAPIUtils.parametersToList("multi", typesArray);
        List<String> types = new ArrayList<String>();
        for (String curParam : typesList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                types.add(curParam);
            }
        }
        ComAdobeGraniteResourcestatusImplCompositeStatusTypeInfo obj = imp.comAdobeGraniteResourcestatusImplCompositeStatusType(post, apply, delete, action, $location, propertylist, name, types);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeGraniteResourcestatusImplStatusResourceProviderImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueproviderRoot = request().getQueryString("provider.root");
        String providerRoot;
        if (valueproviderRoot != null) {
            providerRoot = valueproviderRoot;
        } else {
            providerRoot = null;
        }
        ComAdobeGraniteResourcestatusImplStatusResourceProviderImplInfo obj = imp.comAdobeGraniteResourcestatusImplStatusResourceProviderImpl(post, apply, delete, action, $location, propertylist, providerRoot);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeGraniteRestAssetsImplAssetContentDispositionFilter() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuemimeAllowEmpty = request().getQueryString("mime.allowEmpty");
        Boolean mimeAllowEmpty;
        if (valuemimeAllowEmpty != null) {
            mimeAllowEmpty = Boolean.valueOf(valuemimeAllowEmpty);
        } else {
            mimeAllowEmpty = null;
        }
        String[] mimeAllowedArray = request().queryString().get("mime.allowed");
        List<String> mimeAllowedList = OpenAPIUtils.parametersToList("multi", mimeAllowedArray);
        List<String> mimeAllowed = new ArrayList<String>();
        for (String curParam : mimeAllowedList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                mimeAllowed.add(curParam);
            }
        }
        ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterInfo obj = imp.comAdobeGraniteRestAssetsImplAssetContentDispositionFilter(post, apply, delete, action, $location, propertylist, mimeAllowEmpty, mimeAllowed);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeGraniteRestImplApiEndpointResourceProviderFactoryImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueproviderRoots = request().getQueryString("provider.roots");
        String providerRoots;
        if (valueproviderRoots != null) {
            providerRoots = valueproviderRoots;
        } else {
            providerRoots = null;
        }
        ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplInfo obj = imp.comAdobeGraniteRestImplApiEndpointResourceProviderFactoryImpl(post, apply, delete, action, $location, propertylist, providerRoots);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeGraniteRestImplServletDefaultGETServlet() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuedefaultLimit = request().getQueryString("default.limit");
        Integer defaultLimit;
        if (valuedefaultLimit != null) {
            defaultLimit = Integer.parseInt(valuedefaultLimit);
        } else {
            defaultLimit = null;
        }
        String valueuseAbsoluteUri = request().getQueryString("use.absolute.uri");
        Boolean useAbsoluteUri;
        if (valueuseAbsoluteUri != null) {
            useAbsoluteUri = Boolean.valueOf(valueuseAbsoluteUri);
        } else {
            useAbsoluteUri = null;
        }
        ComAdobeGraniteRestImplServletDefaultGETServletInfo obj = imp.comAdobeGraniteRestImplServletDefaultGETServlet(post, apply, delete, action, $location, propertylist, defaultLimit, useAbsoluteUri);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationS() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] hcTagsArray = request().queryString().get("hc.tags");
        List<String> hcTagsList = OpenAPIUtils.parametersToList("multi", hcTagsArray);
        List<String> hcTags = new ArrayList<String>();
        for (String curParam : hcTagsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                hcTags.add(curParam);
            }
        }
        ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSInfo obj = imp.comAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationS(post, apply, delete, action, $location, propertylist, hcTags);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeGraniteSecurityUserUserPropertiesService() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueadapterCondition = request().getQueryString("adapter.condition");
        String adapterCondition;
        if (valueadapterCondition != null) {
            adapterCondition = valueadapterCondition;
        } else {
            adapterCondition = null;
        }
        String[] graniteUserpropertiesNodetypesArray = request().queryString().get("granite.userproperties.nodetypes");
        List<String> graniteUserpropertiesNodetypesList = OpenAPIUtils.parametersToList("multi", graniteUserpropertiesNodetypesArray);
        List<String> graniteUserpropertiesNodetypes = new ArrayList<String>();
        for (String curParam : graniteUserpropertiesNodetypesList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                graniteUserpropertiesNodetypes.add(curParam);
            }
        }
        String[] graniteUserpropertiesResourcetypesArray = request().queryString().get("granite.userproperties.resourcetypes");
        List<String> graniteUserpropertiesResourcetypesList = OpenAPIUtils.parametersToList("multi", graniteUserpropertiesResourcetypesArray);
        List<String> graniteUserpropertiesResourcetypes = new ArrayList<String>();
        for (String curParam : graniteUserpropertiesResourcetypesList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                graniteUserpropertiesResourcetypes.add(curParam);
            }
        }
        ComAdobeGraniteSecurityUserUserPropertiesServiceInfo obj = imp.comAdobeGraniteSecurityUserUserPropertiesService(post, apply, delete, action, $location, propertylist, adapterCondition, graniteUserpropertiesNodetypes, graniteUserpropertiesResourcetypes);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeGraniteSocialgraphImplSocialGraphFactoryImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuegroup2memberRelationshipOutgoing = request().getQueryString("group2member.relationship.outgoing");
        String group2memberRelationshipOutgoing;
        if (valuegroup2memberRelationshipOutgoing != null) {
            group2memberRelationshipOutgoing = valuegroup2memberRelationshipOutgoing;
        } else {
            group2memberRelationshipOutgoing = null;
        }
        String[] group2memberExcludedOutgoingArray = request().queryString().get("group2member.excluded.outgoing");
        List<String> group2memberExcludedOutgoingList = OpenAPIUtils.parametersToList("multi", group2memberExcludedOutgoingArray);
        List<String> group2memberExcludedOutgoing = new ArrayList<String>();
        for (String curParam : group2memberExcludedOutgoingList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                group2memberExcludedOutgoing.add(curParam);
            }
        }
        String valuegroup2memberRelationshipIncoming = request().getQueryString("group2member.relationship.incoming");
        String group2memberRelationshipIncoming;
        if (valuegroup2memberRelationshipIncoming != null) {
            group2memberRelationshipIncoming = valuegroup2memberRelationshipIncoming;
        } else {
            group2memberRelationshipIncoming = null;
        }
        String[] group2memberExcludedIncomingArray = request().queryString().get("group2member.excluded.incoming");
        List<String> group2memberExcludedIncomingList = OpenAPIUtils.parametersToList("multi", group2memberExcludedIncomingArray);
        List<String> group2memberExcludedIncoming = new ArrayList<String>();
        for (String curParam : group2memberExcludedIncomingList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                group2memberExcludedIncoming.add(curParam);
            }
        }
        ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplInfo obj = imp.comAdobeGraniteSocialgraphImplSocialGraphFactoryImpl(post, apply, delete, action, $location, propertylist, group2memberRelationshipOutgoing, group2memberExcludedOutgoing, group2memberRelationshipIncoming, group2memberExcludedIncoming);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeGraniteSystemMonitoringImplSystemStatsMBeanImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueschedulerExpression = request().getQueryString("scheduler.expression");
        String schedulerExpression;
        if (valueschedulerExpression != null) {
            schedulerExpression = valueschedulerExpression;
        } else {
            schedulerExpression = null;
        }
        String valuejmxObjectname = request().getQueryString("jmx.objectname");
        String jmxObjectname;
        if (valuejmxObjectname != null) {
            jmxObjectname = valuejmxObjectname;
        } else {
            jmxObjectname = null;
        }
        ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplInfo obj = imp.comAdobeGraniteSystemMonitoringImplSystemStatsMBeanImpl(post, apply, delete, action, $location, propertylist, schedulerExpression, jmxObjectname);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeGraniteTaskmanagementImplJcrTaskAdapterFactory() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueadapterCondition = request().getQueryString("adapter.condition");
        String adapterCondition;
        if (valueadapterCondition != null) {
            adapterCondition = valueadapterCondition;
        } else {
            adapterCondition = null;
        }
        ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryInfo obj = imp.comAdobeGraniteTaskmanagementImplJcrTaskAdapterFactory(post, apply, delete, action, $location, propertylist, adapterCondition);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeGraniteTaskmanagementImplJcrTaskArchiveService() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuearchivingEnabled = request().getQueryString("archiving.enabled");
        Boolean archivingEnabled;
        if (valuearchivingEnabled != null) {
            archivingEnabled = Boolean.valueOf(valuearchivingEnabled);
        } else {
            archivingEnabled = null;
        }
        String valueschedulerExpression = request().getQueryString("scheduler.expression");
        String schedulerExpression;
        if (valueschedulerExpression != null) {
            schedulerExpression = valueschedulerExpression;
        } else {
            schedulerExpression = null;
        }
        String valuearchiveSinceDaysCompleted = request().getQueryString("archive.since.days.completed");
        Integer archiveSinceDaysCompleted;
        if (valuearchiveSinceDaysCompleted != null) {
            archiveSinceDaysCompleted = Integer.parseInt(valuearchiveSinceDaysCompleted);
        } else {
            archiveSinceDaysCompleted = null;
        }
        ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceInfo obj = imp.comAdobeGraniteTaskmanagementImplJcrTaskArchiveService(post, apply, delete, action, $location, propertylist, archivingEnabled, schedulerExpression, archiveSinceDaysCompleted);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTask() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuepurgeCompleted = request().getQueryString("purgeCompleted");
        Boolean purgeCompleted;
        if (valuepurgeCompleted != null) {
            purgeCompleted = Boolean.valueOf(valuepurgeCompleted);
        } else {
            purgeCompleted = null;
        }
        String valuecompletedAge = request().getQueryString("completedAge");
        Integer completedAge;
        if (valuecompletedAge != null) {
            completedAge = Integer.parseInt(valuecompletedAge);
        } else {
            completedAge = null;
        }
        String valuepurgeActive = request().getQueryString("purgeActive");
        Boolean purgeActive;
        if (valuepurgeActive != null) {
            purgeActive = Boolean.valueOf(valuepurgeActive);
        } else {
            purgeActive = null;
        }
        String valueactiveAge = request().getQueryString("activeAge");
        Integer activeAge;
        if (valueactiveAge != null) {
            activeAge = Integer.parseInt(valueactiveAge);
        } else {
            activeAge = null;
        }
        String valuesaveThreshold = request().getQueryString("saveThreshold");
        Integer saveThreshold;
        if (valuesaveThreshold != null) {
            saveThreshold = Integer.parseInt(valuesaveThreshold);
        } else {
            saveThreshold = null;
        }
        ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskInfo obj = imp.comAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTask(post, apply, delete, action, $location, propertylist, purgeCompleted, completedAge, purgeActive, activeAge, saveThreshold);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactor() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueadapterCondition = request().getQueryString("adapter.condition");
        String adapterCondition;
        if (valueadapterCondition != null) {
            adapterCondition = valueadapterCondition;
        } else {
            adapterCondition = null;
        }
        String[] taskmanagerAdmingroupsArray = request().queryString().get("taskmanager.admingroups");
        List<String> taskmanagerAdmingroupsList = OpenAPIUtils.parametersToList("multi", taskmanagerAdmingroupsArray);
        List<String> taskmanagerAdmingroups = new ArrayList<String>();
        for (String curParam : taskmanagerAdmingroupsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                taskmanagerAdmingroups.add(curParam);
            }
        }
        ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorInfo obj = imp.comAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactor(post, apply, delete, action, $location, propertylist, adapterCondition, taskmanagerAdmingroups);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeGraniteThreaddumpThreadDumpCollector() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueschedulerPeriod = request().getQueryString("scheduler.period");
        Integer schedulerPeriod;
        if (valueschedulerPeriod != null) {
            schedulerPeriod = Integer.parseInt(valueschedulerPeriod);
        } else {
            schedulerPeriod = null;
        }
        String valueschedulerRunOn = request().getQueryString("scheduler.runOn");
        String schedulerRunOn;
        if (valueschedulerRunOn != null) {
            schedulerRunOn = valueschedulerRunOn;
        } else {
            schedulerRunOn = null;
        }
        String valuegraniteThreaddumpEnabled = request().getQueryString("granite.threaddump.enabled");
        Boolean graniteThreaddumpEnabled;
        if (valuegraniteThreaddumpEnabled != null) {
            graniteThreaddumpEnabled = Boolean.valueOf(valuegraniteThreaddumpEnabled);
        } else {
            graniteThreaddumpEnabled = null;
        }
        String valuegraniteThreaddumpDumpsPerFile = request().getQueryString("granite.threaddump.dumpsPerFile");
        Integer graniteThreaddumpDumpsPerFile;
        if (valuegraniteThreaddumpDumpsPerFile != null) {
            graniteThreaddumpDumpsPerFile = Integer.parseInt(valuegraniteThreaddumpDumpsPerFile);
        } else {
            graniteThreaddumpDumpsPerFile = null;
        }
        String valuegraniteThreaddumpEnableGzipCompression = request().getQueryString("granite.threaddump.enableGzipCompression");
        Boolean graniteThreaddumpEnableGzipCompression;
        if (valuegraniteThreaddumpEnableGzipCompression != null) {
            graniteThreaddumpEnableGzipCompression = Boolean.valueOf(valuegraniteThreaddumpEnableGzipCompression);
        } else {
            graniteThreaddumpEnableGzipCompression = null;
        }
        String valuegraniteThreaddumpEnableDirectoriesCompression = request().getQueryString("granite.threaddump.enableDirectoriesCompression");
        Boolean graniteThreaddumpEnableDirectoriesCompression;
        if (valuegraniteThreaddumpEnableDirectoriesCompression != null) {
            graniteThreaddumpEnableDirectoriesCompression = Boolean.valueOf(valuegraniteThreaddumpEnableDirectoriesCompression);
        } else {
            graniteThreaddumpEnableDirectoriesCompression = null;
        }
        String valuegraniteThreaddumpEnableJStack = request().getQueryString("granite.threaddump.enableJStack");
        Boolean graniteThreaddumpEnableJStack;
        if (valuegraniteThreaddumpEnableJStack != null) {
            graniteThreaddumpEnableJStack = Boolean.valueOf(valuegraniteThreaddumpEnableJStack);
        } else {
            graniteThreaddumpEnableJStack = null;
        }
        String valuegraniteThreaddumpMaxBackupDays = request().getQueryString("granite.threaddump.maxBackupDays");
        Integer graniteThreaddumpMaxBackupDays;
        if (valuegraniteThreaddumpMaxBackupDays != null) {
            graniteThreaddumpMaxBackupDays = Integer.parseInt(valuegraniteThreaddumpMaxBackupDays);
        } else {
            graniteThreaddumpMaxBackupDays = null;
        }
        String valuegraniteThreaddumpBackupCleanTrigger = request().getQueryString("granite.threaddump.backupCleanTrigger");
        String graniteThreaddumpBackupCleanTrigger;
        if (valuegraniteThreaddumpBackupCleanTrigger != null) {
            graniteThreaddumpBackupCleanTrigger = valuegraniteThreaddumpBackupCleanTrigger;
        } else {
            graniteThreaddumpBackupCleanTrigger = null;
        }
        ComAdobeGraniteThreaddumpThreadDumpCollectorInfo obj = imp.comAdobeGraniteThreaddumpThreadDumpCollector(post, apply, delete, action, $location, propertylist, schedulerPeriod, schedulerRunOn, graniteThreaddumpEnabled, graniteThreaddumpDumpsPerFile, graniteThreaddumpEnableGzipCompression, graniteThreaddumpEnableDirectoriesCompression, graniteThreaddumpEnableJStack, graniteThreaddumpMaxBackupDays, graniteThreaddumpBackupCleanTrigger);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTransl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuetranslationFactory = request().getQueryString("translationFactory");
        String translationFactory;
        if (valuetranslationFactory != null) {
            translationFactory = valuetranslationFactory;
        } else {
            translationFactory = null;
        }
        String valuedefaultConnectorLabel = request().getQueryString("defaultConnectorLabel");
        String defaultConnectorLabel;
        if (valuedefaultConnectorLabel != null) {
            defaultConnectorLabel = valuedefaultConnectorLabel;
        } else {
            defaultConnectorLabel = null;
        }
        String valuedefaultConnectorAttribution = request().getQueryString("defaultConnectorAttribution");
        String defaultConnectorAttribution;
        if (valuedefaultConnectorAttribution != null) {
            defaultConnectorAttribution = valuedefaultConnectorAttribution;
        } else {
            defaultConnectorAttribution = null;
        }
        String valuedefaultConnectorWorkspaceId = request().getQueryString("defaultConnectorWorkspaceId");
        String defaultConnectorWorkspaceId;
        if (valuedefaultConnectorWorkspaceId != null) {
            defaultConnectorWorkspaceId = valuedefaultConnectorWorkspaceId;
        } else {
            defaultConnectorWorkspaceId = null;
        }
        String valuedefaultConnectorSubscriptionKey = request().getQueryString("defaultConnectorSubscriptionKey");
        String defaultConnectorSubscriptionKey;
        if (valuedefaultConnectorSubscriptionKey != null) {
            defaultConnectorSubscriptionKey = valuedefaultConnectorSubscriptionKey;
        } else {
            defaultConnectorSubscriptionKey = null;
        }
        String valuelanguageMapLocation = request().getQueryString("languageMapLocation");
        String languageMapLocation;
        if (valuelanguageMapLocation != null) {
            languageMapLocation = valuelanguageMapLocation;
        } else {
            languageMapLocation = null;
        }
        String valuecategoryMapLocation = request().getQueryString("categoryMapLocation");
        String categoryMapLocation;
        if (valuecategoryMapLocation != null) {
            categoryMapLocation = valuecategoryMapLocation;
        } else {
            categoryMapLocation = null;
        }
        String valueretryAttempts = request().getQueryString("retryAttempts");
        Integer retryAttempts;
        if (valueretryAttempts != null) {
            retryAttempts = Integer.parseInt(valueretryAttempts);
        } else {
            retryAttempts = null;
        }
        String valuetimeoutCount = request().getQueryString("timeoutCount");
        Integer timeoutCount;
        if (valuetimeoutCount != null) {
            timeoutCount = Integer.parseInt(valuetimeoutCount);
        } else {
            timeoutCount = null;
        }
        ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslInfo obj = imp.comAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTransl(post, apply, delete, action, $location, propertylist, translationFactory, defaultConnectorLabel, defaultConnectorAttribution, defaultConnectorWorkspaceId, defaultConnectorSubscriptionKey, languageMapLocation, categoryMapLocation, retryAttempts, timeoutCount);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeGraniteTranslationCoreImplTranslationManagerImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuedefaultConnectorName = request().getQueryString("defaultConnectorName");
        String defaultConnectorName;
        if (valuedefaultConnectorName != null) {
            defaultConnectorName = valuedefaultConnectorName;
        } else {
            defaultConnectorName = null;
        }
        String valuedefaultCategory = request().getQueryString("defaultCategory");
        String defaultCategory;
        if (valuedefaultCategory != null) {
            defaultCategory = valuedefaultCategory;
        } else {
            defaultCategory = null;
        }
        ComAdobeGraniteTranslationCoreImplTranslationManagerImplInfo obj = imp.comAdobeGraniteTranslationCoreImplTranslationManagerImpl(post, apply, delete, action, $location, propertylist, defaultConnectorName, defaultCategory);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeGraniteUiClientlibsImplHtmlLibraryManagerImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuehtmllibmanagerTiming = request().getQueryString("htmllibmanager.timing");
        Boolean htmllibmanagerTiming;
        if (valuehtmllibmanagerTiming != null) {
            htmllibmanagerTiming = Boolean.valueOf(valuehtmllibmanagerTiming);
        } else {
            htmllibmanagerTiming = null;
        }
        String valuehtmllibmanagerDebugInitJs = request().getQueryString("htmllibmanager.debug.init.js");
        String htmllibmanagerDebugInitJs;
        if (valuehtmllibmanagerDebugInitJs != null) {
            htmllibmanagerDebugInitJs = valuehtmllibmanagerDebugInitJs;
        } else {
            htmllibmanagerDebugInitJs = null;
        }
        String valuehtmllibmanagerMinify = request().getQueryString("htmllibmanager.minify");
        Boolean htmllibmanagerMinify;
        if (valuehtmllibmanagerMinify != null) {
            htmllibmanagerMinify = Boolean.valueOf(valuehtmllibmanagerMinify);
        } else {
            htmllibmanagerMinify = null;
        }
        String valuehtmllibmanagerDebug = request().getQueryString("htmllibmanager.debug");
        Boolean htmllibmanagerDebug;
        if (valuehtmllibmanagerDebug != null) {
            htmllibmanagerDebug = Boolean.valueOf(valuehtmllibmanagerDebug);
        } else {
            htmllibmanagerDebug = null;
        }
        String valuehtmllibmanagerGzip = request().getQueryString("htmllibmanager.gzip");
        Boolean htmllibmanagerGzip;
        if (valuehtmllibmanagerGzip != null) {
            htmllibmanagerGzip = Boolean.valueOf(valuehtmllibmanagerGzip);
        } else {
            htmllibmanagerGzip = null;
        }
        String valuehtmllibmanagerMaxDataUriSize = request().getQueryString("htmllibmanager.maxDataUriSize");
        Integer htmllibmanagerMaxDataUriSize;
        if (valuehtmllibmanagerMaxDataUriSize != null) {
            htmllibmanagerMaxDataUriSize = Integer.parseInt(valuehtmllibmanagerMaxDataUriSize);
        } else {
            htmllibmanagerMaxDataUriSize = null;
        }
        String valuehtmllibmanagerMaxage = request().getQueryString("htmllibmanager.maxage");
        Integer htmllibmanagerMaxage;
        if (valuehtmllibmanagerMaxage != null) {
            htmllibmanagerMaxage = Integer.parseInt(valuehtmllibmanagerMaxage);
        } else {
            htmllibmanagerMaxage = null;
        }
        String valuehtmllibmanagerForceCQUrlInfo = request().getQueryString("htmllibmanager.forceCQUrlInfo");
        Boolean htmllibmanagerForceCQUrlInfo;
        if (valuehtmllibmanagerForceCQUrlInfo != null) {
            htmllibmanagerForceCQUrlInfo = Boolean.valueOf(valuehtmllibmanagerForceCQUrlInfo);
        } else {
            htmllibmanagerForceCQUrlInfo = null;
        }
        String valuehtmllibmanagerDefaultthemename = request().getQueryString("htmllibmanager.defaultthemename");
        String htmllibmanagerDefaultthemename;
        if (valuehtmllibmanagerDefaultthemename != null) {
            htmllibmanagerDefaultthemename = valuehtmllibmanagerDefaultthemename;
        } else {
            htmllibmanagerDefaultthemename = null;
        }
        String valuehtmllibmanagerDefaultuserthemename = request().getQueryString("htmllibmanager.defaultuserthemename");
        String htmllibmanagerDefaultuserthemename;
        if (valuehtmllibmanagerDefaultuserthemename != null) {
            htmllibmanagerDefaultuserthemename = valuehtmllibmanagerDefaultuserthemename;
        } else {
            htmllibmanagerDefaultuserthemename = null;
        }
        String valuehtmllibmanagerClientmanager = request().getQueryString("htmllibmanager.clientmanager");
        String htmllibmanagerClientmanager;
        if (valuehtmllibmanagerClientmanager != null) {
            htmllibmanagerClientmanager = valuehtmllibmanagerClientmanager;
        } else {
            htmllibmanagerClientmanager = null;
        }
        String[] htmllibmanagerPathListArray = request().queryString().get("htmllibmanager.path.list");
        List<String> htmllibmanagerPathListList = OpenAPIUtils.parametersToList("multi", htmllibmanagerPathListArray);
        List<String> htmllibmanagerPathList = new ArrayList<String>();
        for (String curParam : htmllibmanagerPathListList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                htmllibmanagerPathList.add(curParam);
            }
        }
        String[] htmllibmanagerExcludedPathListArray = request().queryString().get("htmllibmanager.excluded.path.list");
        List<String> htmllibmanagerExcludedPathListList = OpenAPIUtils.parametersToList("multi", htmllibmanagerExcludedPathListArray);
        List<String> htmllibmanagerExcludedPathList = new ArrayList<String>();
        for (String curParam : htmllibmanagerExcludedPathListList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                htmllibmanagerExcludedPathList.add(curParam);
            }
        }
        String[] htmllibmanagerProcessorJsArray = request().queryString().get("htmllibmanager.processor.js");
        List<String> htmllibmanagerProcessorJsList = OpenAPIUtils.parametersToList("multi", htmllibmanagerProcessorJsArray);
        List<String> htmllibmanagerProcessorJs = new ArrayList<String>();
        for (String curParam : htmllibmanagerProcessorJsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                htmllibmanagerProcessorJs.add(curParam);
            }
        }
        String[] htmllibmanagerProcessorCssArray = request().queryString().get("htmllibmanager.processor.css");
        List<String> htmllibmanagerProcessorCssList = OpenAPIUtils.parametersToList("multi", htmllibmanagerProcessorCssArray);
        List<String> htmllibmanagerProcessorCss = new ArrayList<String>();
        for (String curParam : htmllibmanagerProcessorCssList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                htmllibmanagerProcessorCss.add(curParam);
            }
        }
        String[] htmllibmanagerLongcachePatternsArray = request().queryString().get("htmllibmanager.longcache.patterns");
        List<String> htmllibmanagerLongcachePatternsList = OpenAPIUtils.parametersToList("multi", htmllibmanagerLongcachePatternsArray);
        List<String> htmllibmanagerLongcachePatterns = new ArrayList<String>();
        for (String curParam : htmllibmanagerLongcachePatternsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                htmllibmanagerLongcachePatterns.add(curParam);
            }
        }
        String valuehtmllibmanagerLongcacheFormat = request().getQueryString("htmllibmanager.longcache.format");
        String htmllibmanagerLongcacheFormat;
        if (valuehtmllibmanagerLongcacheFormat != null) {
            htmllibmanagerLongcacheFormat = valuehtmllibmanagerLongcacheFormat;
        } else {
            htmllibmanagerLongcacheFormat = null;
        }
        String valuehtmllibmanagerUseFileSystemOutputCache = request().getQueryString("htmllibmanager.useFileSystemOutputCache");
        Boolean htmllibmanagerUseFileSystemOutputCache;
        if (valuehtmllibmanagerUseFileSystemOutputCache != null) {
            htmllibmanagerUseFileSystemOutputCache = Boolean.valueOf(valuehtmllibmanagerUseFileSystemOutputCache);
        } else {
            htmllibmanagerUseFileSystemOutputCache = null;
        }
        String valuehtmllibmanagerFileSystemOutputCacheLocation = request().getQueryString("htmllibmanager.fileSystemOutputCacheLocation");
        String htmllibmanagerFileSystemOutputCacheLocation;
        if (valuehtmllibmanagerFileSystemOutputCacheLocation != null) {
            htmllibmanagerFileSystemOutputCacheLocation = valuehtmllibmanagerFileSystemOutputCacheLocation;
        } else {
            htmllibmanagerFileSystemOutputCacheLocation = null;
        }
        String[] htmllibmanagerDisableReplacementArray = request().queryString().get("htmllibmanager.disable.replacement");
        List<String> htmllibmanagerDisableReplacementList = OpenAPIUtils.parametersToList("multi", htmllibmanagerDisableReplacementArray);
        List<String> htmllibmanagerDisableReplacement = new ArrayList<String>();
        for (String curParam : htmllibmanagerDisableReplacementList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                htmllibmanagerDisableReplacement.add(curParam);
            }
        }
        ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplInfo obj = imp.comAdobeGraniteUiClientlibsImplHtmlLibraryManagerImpl(post, apply, delete, action, $location, propertylist, htmllibmanagerTiming, htmllibmanagerDebugInitJs, htmllibmanagerMinify, htmllibmanagerDebug, htmllibmanagerGzip, htmllibmanagerMaxDataUriSize, htmllibmanagerMaxage, htmllibmanagerForceCQUrlInfo, htmllibmanagerDefaultthemename, htmllibmanagerDefaultuserthemename, htmllibmanagerClientmanager, htmllibmanagerPathList, htmllibmanagerExcludedPathList, htmllibmanagerProcessorJs, htmllibmanagerProcessorCss, htmllibmanagerLongcachePatterns, htmllibmanagerLongcacheFormat, htmllibmanagerUseFileSystemOutputCache, htmllibmanagerFileSystemOutputCacheLocation, htmllibmanagerDisableReplacement);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeature() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueenabled = request().getQueryString("enabled");
        Boolean enabled;
        if (valueenabled != null) {
            enabled = Boolean.valueOf(valueenabled);
        } else {
            enabled = null;
        }
        ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureInfo obj = imp.comAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeature(post, apply, delete, action, $location, propertylist, enabled);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeGraniteWorkflowConsolePublishWorkflowPublishEventService() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuegraniteWorkflowWorkflowPublishEventServiceEnabled = request().getQueryString("granite.workflow.WorkflowPublishEventService.enabled");
        Boolean graniteWorkflowWorkflowPublishEventServiceEnabled;
        if (valuegraniteWorkflowWorkflowPublishEventServiceEnabled != null) {
            graniteWorkflowWorkflowPublishEventServiceEnabled = Boolean.valueOf(valuegraniteWorkflowWorkflowPublishEventServiceEnabled);
        } else {
            graniteWorkflowWorkflowPublishEventServiceEnabled = null;
        }
        ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceInfo obj = imp.comAdobeGraniteWorkflowConsolePublishWorkflowPublishEventService(post, apply, delete, action, $location, propertylist, graniteWorkflowWorkflowPublishEventServiceEnabled);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeGraniteWorkflowCoreJcrWorkflowBucketManager() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuebucketSize = request().getQueryString("bucketSize");
        Integer bucketSize;
        if (valuebucketSize != null) {
            bucketSize = Integer.parseInt(valuebucketSize);
        } else {
            bucketSize = null;
        }
        ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerInfo obj = imp.comAdobeGraniteWorkflowCoreJcrWorkflowBucketManager(post, apply, delete, action, $location, propertylist, bucketSize);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeGraniteWorkflowCoreJobExternalProcessJobHandler() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuedefaultTimeout = request().getQueryString("default.timeout");
        Integer defaultTimeout;
        if (valuedefaultTimeout != null) {
            defaultTimeout = Integer.parseInt(valuedefaultTimeout);
        } else {
            defaultTimeout = null;
        }
        String valuemaxTimeout = request().getQueryString("max.timeout");
        Integer maxTimeout;
        if (valuemaxTimeout != null) {
            maxTimeout = Integer.parseInt(valuemaxTimeout);
        } else {
            maxTimeout = null;
        }
        String valuedefaultPeriod = request().getQueryString("default.period");
        Integer defaultPeriod;
        if (valuedefaultPeriod != null) {
            defaultPeriod = Integer.parseInt(valuedefaultPeriod);
        } else {
            defaultPeriod = null;
        }
        ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerInfo obj = imp.comAdobeGraniteWorkflowCoreJobExternalProcessJobHandler(post, apply, delete, action, $location, propertylist, defaultTimeout, maxTimeout, defaultPeriod);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeGraniteWorkflowCoreJobJobHandler() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] jobTopicsArray = request().queryString().get("job.topics");
        List<String> jobTopicsList = OpenAPIUtils.parametersToList("multi", jobTopicsArray);
        List<String> jobTopics = new ArrayList<String>();
        for (String curParam : jobTopicsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                jobTopics.add(curParam);
            }
        }
        String valueallowSelfProcessTermination = request().getQueryString("allow.self.process.termination");
        Boolean allowSelfProcessTermination;
        if (valueallowSelfProcessTermination != null) {
            allowSelfProcessTermination = Boolean.valueOf(valueallowSelfProcessTermination);
        } else {
            allowSelfProcessTermination = null;
        }
        ComAdobeGraniteWorkflowCoreJobJobHandlerInfo obj = imp.comAdobeGraniteWorkflowCoreJobJobHandler(post, apply, delete, action, $location, propertylist, jobTopics, allowSelfProcessTermination);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsum() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuejobTopics = request().getQueryString("job.topics");
        String jobTopics;
        if (valuejobTopics != null) {
            jobTopics = valuejobTopics;
        } else {
            jobTopics = null;
        }
        ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumInfo obj = imp.comAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsum(post, apply, delete, action, $location, propertylist, jobTopics);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeGraniteWorkflowCorePayloadMapCache() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] getSystemWorkflowModelsArray = request().queryString().get("getSystemWorkflowModels");
        List<String> getSystemWorkflowModelsList = OpenAPIUtils.parametersToList("multi", getSystemWorkflowModelsArray);
        List<String> getSystemWorkflowModels = new ArrayList<String>();
        for (String curParam : getSystemWorkflowModelsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                getSystemWorkflowModels.add(curParam);
            }
        }
        String valuegetPackageRootPath = request().getQueryString("getPackageRootPath");
        String getPackageRootPath;
        if (valuegetPackageRootPath != null) {
            getPackageRootPath = valuegetPackageRootPath;
        } else {
            getPackageRootPath = null;
        }
        ComAdobeGraniteWorkflowCorePayloadMapCacheInfo obj = imp.comAdobeGraniteWorkflowCorePayloadMapCache(post, apply, delete, action, $location, propertylist, getSystemWorkflowModels, getPackageRootPath);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeGraniteWorkflowCorePayloadmapPayloadMoveListener() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] payloadMoveWhiteListArray = request().queryString().get("payload.move.white.list");
        List<String> payloadMoveWhiteListList = OpenAPIUtils.parametersToList("multi", payloadMoveWhiteListArray);
        List<String> payloadMoveWhiteList = new ArrayList<String>();
        for (String curParam : payloadMoveWhiteListList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                payloadMoveWhiteList.add(curParam);
            }
        }
        String valuepayloadMoveHandleFromWorkflowProcess = request().getQueryString("payload.move.handle.from.workflow.process");
        Boolean payloadMoveHandleFromWorkflowProcess;
        if (valuepayloadMoveHandleFromWorkflowProcess != null) {
            payloadMoveHandleFromWorkflowProcess = Boolean.valueOf(valuepayloadMoveHandleFromWorkflowProcess);
        } else {
            payloadMoveHandleFromWorkflowProcess = null;
        }
        ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerInfo obj = imp.comAdobeGraniteWorkflowCorePayloadmapPayloadMoveListener(post, apply, delete, action, $location, propertylist, payloadMoveWhiteList, payloadMoveHandleFromWorkflowProcess);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeGraniteWorkflowCoreWorkflowConfig() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] cqWorkflowConfigWorkflowPackagesRootPathArray = request().queryString().get("cq.workflow.config.workflow.packages.root.path");
        List<String> cqWorkflowConfigWorkflowPackagesRootPathList = OpenAPIUtils.parametersToList("multi", cqWorkflowConfigWorkflowPackagesRootPathArray);
        List<String> cqWorkflowConfigWorkflowPackagesRootPath = new ArrayList<String>();
        for (String curParam : cqWorkflowConfigWorkflowPackagesRootPathList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                cqWorkflowConfigWorkflowPackagesRootPath.add(curParam);
            }
        }
        String valuecqWorkflowConfigWorkflowProcessLegacyMode = request().getQueryString("cq.workflow.config.workflow.process.legacy.mode");
        Boolean cqWorkflowConfigWorkflowProcessLegacyMode;
        if (valuecqWorkflowConfigWorkflowProcessLegacyMode != null) {
            cqWorkflowConfigWorkflowProcessLegacyMode = Boolean.valueOf(valuecqWorkflowConfigWorkflowProcessLegacyMode);
        } else {
            cqWorkflowConfigWorkflowProcessLegacyMode = null;
        }
        String valuecqWorkflowConfigAllowLocking = request().getQueryString("cq.workflow.config.allow.locking");
        Boolean cqWorkflowConfigAllowLocking;
        if (valuecqWorkflowConfigAllowLocking != null) {
            cqWorkflowConfigAllowLocking = Boolean.valueOf(valuecqWorkflowConfigAllowLocking);
        } else {
            cqWorkflowConfigAllowLocking = null;
        }
        ComAdobeGraniteWorkflowCoreWorkflowConfigInfo obj = imp.comAdobeGraniteWorkflowCoreWorkflowConfig(post, apply, delete, action, $location, propertylist, cqWorkflowConfigWorkflowPackagesRootPath, cqWorkflowConfigWorkflowProcessLegacyMode, cqWorkflowConfigAllowLocking);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeGraniteWorkflowCoreWorkflowSessionFactory() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuegraniteWorkflowinboxSortPropertyName = request().getQueryString("granite.workflowinbox.sort.propertyName");
        String graniteWorkflowinboxSortPropertyName;
        if (valuegraniteWorkflowinboxSortPropertyName != null) {
            graniteWorkflowinboxSortPropertyName = valuegraniteWorkflowinboxSortPropertyName;
        } else {
            graniteWorkflowinboxSortPropertyName = null;
        }
        String valuegraniteWorkflowinboxSortOrder = request().getQueryString("granite.workflowinbox.sort.order");
        String graniteWorkflowinboxSortOrder;
        if (valuegraniteWorkflowinboxSortOrder != null) {
            graniteWorkflowinboxSortOrder = valuegraniteWorkflowinboxSortOrder;
        } else {
            graniteWorkflowinboxSortOrder = null;
        }
        String valuecqWorkflowJobRetry = request().getQueryString("cq.workflow.job.retry");
        Integer cqWorkflowJobRetry;
        if (valuecqWorkflowJobRetry != null) {
            cqWorkflowJobRetry = Integer.parseInt(valuecqWorkflowJobRetry);
        } else {
            cqWorkflowJobRetry = null;
        }
        String[] cqWorkflowSuperuserArray = request().queryString().get("cq.workflow.superuser");
        List<String> cqWorkflowSuperuserList = OpenAPIUtils.parametersToList("multi", cqWorkflowSuperuserArray);
        List<String> cqWorkflowSuperuser = new ArrayList<String>();
        for (String curParam : cqWorkflowSuperuserList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                cqWorkflowSuperuser.add(curParam);
            }
        }
        String valuegraniteWorkflowInboxQuerySize = request().getQueryString("granite.workflow.inboxQuerySize");
        Integer graniteWorkflowInboxQuerySize;
        if (valuegraniteWorkflowInboxQuerySize != null) {
            graniteWorkflowInboxQuerySize = Integer.parseInt(valuegraniteWorkflowInboxQuerySize);
        } else {
            graniteWorkflowInboxQuerySize = null;
        }
        String valuegraniteWorkflowAdminUserGroupFilter = request().getQueryString("granite.workflow.adminUserGroupFilter");
        Boolean graniteWorkflowAdminUserGroupFilter;
        if (valuegraniteWorkflowAdminUserGroupFilter != null) {
            graniteWorkflowAdminUserGroupFilter = Boolean.valueOf(valuegraniteWorkflowAdminUserGroupFilter);
        } else {
            graniteWorkflowAdminUserGroupFilter = null;
        }
        String valuegraniteWorkflowEnforceWorkitemAssigneePermissions = request().getQueryString("granite.workflow.enforceWorkitemAssigneePermissions");
        Boolean graniteWorkflowEnforceWorkitemAssigneePermissions;
        if (valuegraniteWorkflowEnforceWorkitemAssigneePermissions != null) {
            graniteWorkflowEnforceWorkitemAssigneePermissions = Boolean.valueOf(valuegraniteWorkflowEnforceWorkitemAssigneePermissions);
        } else {
            graniteWorkflowEnforceWorkitemAssigneePermissions = null;
        }
        String valuegraniteWorkflowEnforceWorkflowInitiatorPermissions = request().getQueryString("granite.workflow.enforceWorkflowInitiatorPermissions");
        Boolean graniteWorkflowEnforceWorkflowInitiatorPermissions;
        if (valuegraniteWorkflowEnforceWorkflowInitiatorPermissions != null) {
            graniteWorkflowEnforceWorkflowInitiatorPermissions = Boolean.valueOf(valuegraniteWorkflowEnforceWorkflowInitiatorPermissions);
        } else {
            graniteWorkflowEnforceWorkflowInitiatorPermissions = null;
        }
        String valuegraniteWorkflowInjectTenantIdInJobTopics = request().getQueryString("granite.workflow.injectTenantIdInJobTopics");
        Boolean graniteWorkflowInjectTenantIdInJobTopics;
        if (valuegraniteWorkflowInjectTenantIdInJobTopics != null) {
            graniteWorkflowInjectTenantIdInJobTopics = Boolean.valueOf(valuegraniteWorkflowInjectTenantIdInJobTopics);
        } else {
            graniteWorkflowInjectTenantIdInJobTopics = null;
        }
        String valuegraniteWorkflowMaxPurgeSaveThreshold = request().getQueryString("granite.workflow.maxPurgeSaveThreshold");
        Integer graniteWorkflowMaxPurgeSaveThreshold;
        if (valuegraniteWorkflowMaxPurgeSaveThreshold != null) {
            graniteWorkflowMaxPurgeSaveThreshold = Integer.parseInt(valuegraniteWorkflowMaxPurgeSaveThreshold);
        } else {
            graniteWorkflowMaxPurgeSaveThreshold = null;
        }
        String valuegraniteWorkflowMaxPurgeQueryCount = request().getQueryString("granite.workflow.maxPurgeQueryCount");
        Integer graniteWorkflowMaxPurgeQueryCount;
        if (valuegraniteWorkflowMaxPurgeQueryCount != null) {
            graniteWorkflowMaxPurgeQueryCount = Integer.parseInt(valuegraniteWorkflowMaxPurgeQueryCount);
        } else {
            graniteWorkflowMaxPurgeQueryCount = null;
        }
        ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryInfo obj = imp.comAdobeGraniteWorkflowCoreWorkflowSessionFactory(post, apply, delete, action, $location, propertylist, graniteWorkflowinboxSortPropertyName, graniteWorkflowinboxSortOrder, cqWorkflowJobRetry, cqWorkflowSuperuser, graniteWorkflowInboxQuerySize, graniteWorkflowAdminUserGroupFilter, graniteWorkflowEnforceWorkitemAssigneePermissions, graniteWorkflowEnforceWorkflowInitiatorPermissions, graniteWorkflowInjectTenantIdInJobTopics, graniteWorkflowMaxPurgeSaveThreshold, graniteWorkflowMaxPurgeQueryCount);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeGraniteWorkflowPurgeScheduler() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuescheduledpurgeName = request().getQueryString("scheduledpurge.name");
        String scheduledpurgeName;
        if (valuescheduledpurgeName != null) {
            scheduledpurgeName = valuescheduledpurgeName;
        } else {
            scheduledpurgeName = null;
        }
        String valuescheduledpurgeWorkflowStatus = request().getQueryString("scheduledpurge.workflowStatus");
        String scheduledpurgeWorkflowStatus;
        if (valuescheduledpurgeWorkflowStatus != null) {
            scheduledpurgeWorkflowStatus = valuescheduledpurgeWorkflowStatus;
        } else {
            scheduledpurgeWorkflowStatus = null;
        }
        String[] scheduledpurgeModelIdsArray = request().queryString().get("scheduledpurge.modelIds");
        List<String> scheduledpurgeModelIdsList = OpenAPIUtils.parametersToList("multi", scheduledpurgeModelIdsArray);
        List<String> scheduledpurgeModelIds = new ArrayList<String>();
        for (String curParam : scheduledpurgeModelIdsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                scheduledpurgeModelIds.add(curParam);
            }
        }
        String valuescheduledpurgeDaysold = request().getQueryString("scheduledpurge.daysold");
        Integer scheduledpurgeDaysold;
        if (valuescheduledpurgeDaysold != null) {
            scheduledpurgeDaysold = Integer.parseInt(valuescheduledpurgeDaysold);
        } else {
            scheduledpurgeDaysold = null;
        }
        ComAdobeGraniteWorkflowPurgeSchedulerInfo obj = imp.comAdobeGraniteWorkflowPurgeScheduler(post, apply, delete, action, $location, propertylist, scheduledpurgeName, scheduledpurgeWorkflowStatus, scheduledpurgeModelIds, scheduledpurgeDaysold);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeOctopusNcommBootstrap() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuemaxConnections = request().getQueryString("maxConnections");
        Integer maxConnections;
        if (valuemaxConnections != null) {
            maxConnections = Integer.parseInt(valuemaxConnections);
        } else {
            maxConnections = null;
        }
        String valuemaxRequests = request().getQueryString("maxRequests");
        Integer maxRequests;
        if (valuemaxRequests != null) {
            maxRequests = Integer.parseInt(valuemaxRequests);
        } else {
            maxRequests = null;
        }
        String valuerequestTimeout = request().getQueryString("requestTimeout");
        Integer requestTimeout;
        if (valuerequestTimeout != null) {
            requestTimeout = Integer.parseInt(valuerequestTimeout);
        } else {
            requestTimeout = null;
        }
        String valuerequestRetries = request().getQueryString("requestRetries");
        Integer requestRetries;
        if (valuerequestRetries != null) {
            requestRetries = Integer.parseInt(valuerequestRetries);
        } else {
            requestRetries = null;
        }
        String valuelaunchTimeout = request().getQueryString("launchTimeout");
        Integer launchTimeout;
        if (valuelaunchTimeout != null) {
            launchTimeout = Integer.parseInt(valuelaunchTimeout);
        } else {
            launchTimeout = null;
        }
        ComAdobeOctopusNcommBootstrapInfo obj = imp.comAdobeOctopusNcommBootstrap(post, apply, delete, action, $location, propertylist, maxConnections, maxRequests, requestTimeout, requestRetries, launchTimeout);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullS() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuecommunitiesIntegrationLivefyreSlingEventFilter = request().getQueryString("communities.integration.livefyre.sling.event.filter");
        String communitiesIntegrationLivefyreSlingEventFilter;
        if (valuecommunitiesIntegrationLivefyreSlingEventFilter != null) {
            communitiesIntegrationLivefyreSlingEventFilter = valuecommunitiesIntegrationLivefyreSlingEventFilter;
        } else {
            communitiesIntegrationLivefyreSlingEventFilter = null;
        }
        ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSInfo obj = imp.comAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullS(post, apply, delete, action, $location, propertylist, communitiesIntegrationLivefyreSlingEventFilter);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comAdobeXmpWorkerFilesNcommXMPFilesNComm() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuemaxConnections = request().getQueryString("maxConnections");
        String maxConnections;
        if (valuemaxConnections != null) {
            maxConnections = valuemaxConnections;
        } else {
            maxConnections = null;
        }
        String valuemaxRequests = request().getQueryString("maxRequests");
        String maxRequests;
        if (valuemaxRequests != null) {
            maxRequests = valuemaxRequests;
        } else {
            maxRequests = null;
        }
        String valuerequestTimeout = request().getQueryString("requestTimeout");
        String requestTimeout;
        if (valuerequestTimeout != null) {
            requestTimeout = valuerequestTimeout;
        } else {
            requestTimeout = null;
        }
        String valuelogDir = request().getQueryString("logDir");
        String logDir;
        if (valuelogDir != null) {
            logDir = valuelogDir;
        } else {
            logDir = null;
        }
        ComAdobeXmpWorkerFilesNcommXMPFilesNCommInfo obj = imp.comAdobeXmpWorkerFilesNcommXMPFilesNComm(post, apply, delete, action, $location, propertylist, maxConnections, maxRequests, requestTimeout, logDir);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCommonsDatasourceJdbcpoolJdbcPoolService() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuejdbcDriverClass = request().getQueryString("jdbc.driver.class");
        String jdbcDriverClass;
        if (valuejdbcDriverClass != null) {
            jdbcDriverClass = valuejdbcDriverClass;
        } else {
            jdbcDriverClass = null;
        }
        String valuejdbcConnectionUri = request().getQueryString("jdbc.connection.uri");
        String jdbcConnectionUri;
        if (valuejdbcConnectionUri != null) {
            jdbcConnectionUri = valuejdbcConnectionUri;
        } else {
            jdbcConnectionUri = null;
        }
        String valuejdbcUsername = request().getQueryString("jdbc.username");
        String jdbcUsername;
        if (valuejdbcUsername != null) {
            jdbcUsername = valuejdbcUsername;
        } else {
            jdbcUsername = null;
        }
        String valuejdbcPassword = request().getQueryString("jdbc.password");
        String jdbcPassword;
        if (valuejdbcPassword != null) {
            jdbcPassword = valuejdbcPassword;
        } else {
            jdbcPassword = null;
        }
        String valuejdbcValidationQuery = request().getQueryString("jdbc.validation.query");
        String jdbcValidationQuery;
        if (valuejdbcValidationQuery != null) {
            jdbcValidationQuery = valuejdbcValidationQuery;
        } else {
            jdbcValidationQuery = null;
        }
        String valuedefaultReadonly = request().getQueryString("default.readonly");
        Boolean defaultReadonly;
        if (valuedefaultReadonly != null) {
            defaultReadonly = Boolean.valueOf(valuedefaultReadonly);
        } else {
            defaultReadonly = null;
        }
        String valuedefaultAutocommit = request().getQueryString("default.autocommit");
        Boolean defaultAutocommit;
        if (valuedefaultAutocommit != null) {
            defaultAutocommit = Boolean.valueOf(valuedefaultAutocommit);
        } else {
            defaultAutocommit = null;
        }
        String valuepoolSize = request().getQueryString("pool.size");
        Integer poolSize;
        if (valuepoolSize != null) {
            poolSize = Integer.parseInt(valuepoolSize);
        } else {
            poolSize = null;
        }
        String valuepoolMaxWaitMsec = request().getQueryString("pool.max.wait.msec");
        Integer poolMaxWaitMsec;
        if (valuepoolMaxWaitMsec != null) {
            poolMaxWaitMsec = Integer.parseInt(valuepoolMaxWaitMsec);
        } else {
            poolMaxWaitMsec = null;
        }
        String valuedatasourceName = request().getQueryString("datasource.name");
        String datasourceName;
        if (valuedatasourceName != null) {
            datasourceName = valuedatasourceName;
        } else {
            datasourceName = null;
        }
        String[] datasourceSvcPropertiesArray = request().queryString().get("datasource.svc.properties");
        List<String> datasourceSvcPropertiesList = OpenAPIUtils.parametersToList("multi", datasourceSvcPropertiesArray);
        List<String> datasourceSvcProperties = new ArrayList<String>();
        for (String curParam : datasourceSvcPropertiesList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                datasourceSvcProperties.add(curParam);
            }
        }
        ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceInfo obj = imp.comDayCommonsDatasourceJdbcpoolJdbcPoolService(post, apply, delete, action, $location, propertylist, jdbcDriverClass, jdbcConnectionUri, jdbcUsername, jdbcPassword, jdbcValidationQuery, defaultReadonly, defaultAutocommit, poolSize, poolMaxWaitMsec, datasourceName, datasourceSvcProperties);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCommonsHttpclient() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueproxyEnabled = request().getQueryString("proxy.enabled");
        Boolean proxyEnabled;
        if (valueproxyEnabled != null) {
            proxyEnabled = Boolean.valueOf(valueproxyEnabled);
        } else {
            proxyEnabled = null;
        }
        String valueproxyHost = request().getQueryString("proxy.host");
        String proxyHost;
        if (valueproxyHost != null) {
            proxyHost = valueproxyHost;
        } else {
            proxyHost = null;
        }
        String valueproxyUser = request().getQueryString("proxy.user");
        String proxyUser;
        if (valueproxyUser != null) {
            proxyUser = valueproxyUser;
        } else {
            proxyUser = null;
        }
        String valueproxyPassword = request().getQueryString("proxy.password");
        String proxyPassword;
        if (valueproxyPassword != null) {
            proxyPassword = valueproxyPassword;
        } else {
            proxyPassword = null;
        }
        String valueproxyNtlmHost = request().getQueryString("proxy.ntlm.host");
        String proxyNtlmHost;
        if (valueproxyNtlmHost != null) {
            proxyNtlmHost = valueproxyNtlmHost;
        } else {
            proxyNtlmHost = null;
        }
        String valueproxyNtlmDomain = request().getQueryString("proxy.ntlm.domain");
        String proxyNtlmDomain;
        if (valueproxyNtlmDomain != null) {
            proxyNtlmDomain = valueproxyNtlmDomain;
        } else {
            proxyNtlmDomain = null;
        }
        String[] proxyExceptionsArray = request().queryString().get("proxy.exceptions");
        List<String> proxyExceptionsList = OpenAPIUtils.parametersToList("multi", proxyExceptionsArray);
        List<String> proxyExceptions = new ArrayList<String>();
        for (String curParam : proxyExceptionsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                proxyExceptions.add(curParam);
            }
        }
        ComDayCommonsHttpclientInfo obj = imp.comDayCommonsHttpclient(post, apply, delete, action, $location, propertylist, proxyEnabled, proxyHost, proxyUser, proxyPassword, proxyNtlmHost, proxyNtlmDomain, proxyExceptions);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqAnalyticsImplStorePropertiesChangeListener() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] cqStoreListenerAdditionalStorePathsArray = request().queryString().get("cq.store.listener.additionalStorePaths");
        List<String> cqStoreListenerAdditionalStorePathsList = OpenAPIUtils.parametersToList("multi", cqStoreListenerAdditionalStorePathsArray);
        List<String> cqStoreListenerAdditionalStorePaths = new ArrayList<String>();
        for (String curParam : cqStoreListenerAdditionalStorePathsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                cqStoreListenerAdditionalStorePaths.add(curParam);
            }
        }
        ComDayCqAnalyticsImplStorePropertiesChangeListenerInfo obj = imp.comDayCqAnalyticsImplStorePropertiesChangeListener(post, apply, delete, action, $location, propertylist, cqStoreListenerAdditionalStorePaths);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqAnalyticsSitecatalystImplExporterClassificationsExporte() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] allowedPathsArray = request().queryString().get("allowed.paths");
        List<String> allowedPathsList = OpenAPIUtils.parametersToList("multi", allowedPathsArray);
        List<String> allowedPaths = new ArrayList<String>();
        for (String curParam : allowedPathsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                allowedPaths.add(curParam);
            }
        }
        String valuecqAnalyticsSaintExporterPagesize = request().getQueryString("cq.analytics.saint.exporter.pagesize");
        Integer cqAnalyticsSaintExporterPagesize;
        if (valuecqAnalyticsSaintExporterPagesize != null) {
            cqAnalyticsSaintExporterPagesize = Integer.parseInt(valuecqAnalyticsSaintExporterPagesize);
        } else {
            cqAnalyticsSaintExporterPagesize = null;
        }
        ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteInfo obj = imp.comDayCqAnalyticsSitecatalystImplExporterClassificationsExporte(post, apply, delete, action, $location, propertylist, allowedPaths, cqAnalyticsSaintExporterPagesize);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqAnalyticsSitecatalystImplImporterReportImporter() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuereportFetchAttempts = request().getQueryString("report.fetch.attempts");
        Integer reportFetchAttempts;
        if (valuereportFetchAttempts != null) {
            reportFetchAttempts = Integer.parseInt(valuereportFetchAttempts);
        } else {
            reportFetchAttempts = null;
        }
        String valuereportFetchDelay = request().getQueryString("report.fetch.delay");
        Integer reportFetchDelay;
        if (valuereportFetchDelay != null) {
            reportFetchDelay = Integer.parseInt(valuereportFetchDelay);
        } else {
            reportFetchDelay = null;
        }
        ComDayCqAnalyticsSitecatalystImplImporterReportImporterInfo obj = imp.comDayCqAnalyticsSitecatalystImplImporterReportImporter(post, apply, delete, action, $location, propertylist, reportFetchAttempts, reportFetchDelay);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactory() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] cqAnalyticsAdapterfactoryContextstoresArray = request().queryString().get("cq.analytics.adapterfactory.contextstores");
        List<String> cqAnalyticsAdapterfactoryContextstoresList = OpenAPIUtils.parametersToList("multi", cqAnalyticsAdapterfactoryContextstoresArray);
        List<String> cqAnalyticsAdapterfactoryContextstores = new ArrayList<String>();
        for (String curParam : cqAnalyticsAdapterfactoryContextstoresList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                cqAnalyticsAdapterfactoryContextstores.add(curParam);
            }
        }
        ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryInfo obj = imp.comDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactory(post, apply, delete, action, $location, propertylist, cqAnalyticsAdapterfactoryContextstores);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] cqAnalyticsSitecatalystServiceDatacenterUrlArray = request().queryString().get("cq.analytics.sitecatalyst.service.datacenter.url");
        List<String> cqAnalyticsSitecatalystServiceDatacenterUrlList = OpenAPIUtils.parametersToList("multi", cqAnalyticsSitecatalystServiceDatacenterUrlArray);
        List<String> cqAnalyticsSitecatalystServiceDatacenterUrl = new ArrayList<String>();
        for (String curParam : cqAnalyticsSitecatalystServiceDatacenterUrlList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                cqAnalyticsSitecatalystServiceDatacenterUrl.add(curParam);
            }
        }
        String[] devhostnamepatternsArray = request().queryString().get("devhostnamepatterns");
        List<String> devhostnamepatternsList = OpenAPIUtils.parametersToList("multi", devhostnamepatternsArray);
        List<String> devhostnamepatterns = new ArrayList<String>();
        for (String curParam : devhostnamepatternsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                devhostnamepatterns.add(curParam);
            }
        }
        String valueconnectionTimeout = request().getQueryString("connection.timeout");
        Integer connectionTimeout;
        if (valueconnectionTimeout != null) {
            connectionTimeout = Integer.parseInt(valueconnectionTimeout);
        } else {
            connectionTimeout = null;
        }
        String valuesocketTimeout = request().getQueryString("socket.timeout");
        Integer socketTimeout;
        if (valuesocketTimeout != null) {
            socketTimeout = Integer.parseInt(valuesocketTimeout);
        } else {
            socketTimeout = null;
        }
        ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplInfo obj = imp.comDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImpl(post, apply, delete, action, $location, propertylist, cqAnalyticsSitecatalystServiceDatacenterUrl, devhostnamepatterns, connectionTimeout, socketTimeout);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqAnalyticsTestandtargetImplAccountOptionsUpdater() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuecqAnalyticsTestandtargetAccountoptionsupdaterEnabled = request().getQueryString("cq.analytics.testandtarget.accountoptionsupdater.enabled");
        Boolean cqAnalyticsTestandtargetAccountoptionsupdaterEnabled;
        if (valuecqAnalyticsTestandtargetAccountoptionsupdaterEnabled != null) {
            cqAnalyticsTestandtargetAccountoptionsupdaterEnabled = Boolean.valueOf(valuecqAnalyticsTestandtargetAccountoptionsupdaterEnabled);
        } else {
            cqAnalyticsTestandtargetAccountoptionsupdaterEnabled = null;
        }
        ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterInfo obj = imp.comDayCqAnalyticsTestandtargetImplAccountOptionsUpdater(post, apply, delete, action, $location, propertylist, cqAnalyticsTestandtargetAccountoptionsupdaterEnabled);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListener() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuecqAnalyticsTestandtargetDeleteauthoractivitylistenerEnabled = request().getQueryString("cq.analytics.testandtarget.deleteauthoractivitylistener.enabled");
        Boolean cqAnalyticsTestandtargetDeleteauthoractivitylistenerEnabled;
        if (valuecqAnalyticsTestandtargetDeleteauthoractivitylistenerEnabled != null) {
            cqAnalyticsTestandtargetDeleteauthoractivitylistenerEnabled = Boolean.valueOf(valuecqAnalyticsTestandtargetDeleteauthoractivitylistenerEnabled);
        } else {
            cqAnalyticsTestandtargetDeleteauthoractivitylistenerEnabled = null;
        }
        ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerInfo obj = imp.comDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListener(post, apply, delete, action, $location, propertylist, cqAnalyticsTestandtargetDeleteauthoractivitylistenerEnabled);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListener() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuecqAnalyticsTestandtargetPushauthorcampaignpagelistenerEnabled = request().getQueryString("cq.analytics.testandtarget.pushauthorcampaignpagelistener.enabled");
        Boolean cqAnalyticsTestandtargetPushauthorcampaignpagelistenerEnabled;
        if (valuecqAnalyticsTestandtargetPushauthorcampaignpagelistenerEnabled != null) {
            cqAnalyticsTestandtargetPushauthorcampaignpagelistenerEnabled = Boolean.valueOf(valuecqAnalyticsTestandtargetPushauthorcampaignpagelistenerEnabled);
        } else {
            cqAnalyticsTestandtargetPushauthorcampaignpagelistenerEnabled = null;
        }
        ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerInfo obj = imp.comDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListener(post, apply, delete, action, $location, propertylist, cqAnalyticsTestandtargetPushauthorcampaignpagelistenerEnabled);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqAnalyticsTestandtargetImplSegmentImporter() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuecqAnalyticsTestandtargetSegmentimporterEnabled = request().getQueryString("cq.analytics.testandtarget.segmentimporter.enabled");
        Boolean cqAnalyticsTestandtargetSegmentimporterEnabled;
        if (valuecqAnalyticsTestandtargetSegmentimporterEnabled != null) {
            cqAnalyticsTestandtargetSegmentimporterEnabled = Boolean.valueOf(valuecqAnalyticsTestandtargetSegmentimporterEnabled);
        } else {
            cqAnalyticsTestandtargetSegmentimporterEnabled = null;
        }
        ComDayCqAnalyticsTestandtargetImplSegmentImporterInfo obj = imp.comDayCqAnalyticsTestandtargetImplSegmentImporter(post, apply, delete, action, $location, propertylist, cqAnalyticsTestandtargetSegmentimporterEnabled);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqAnalyticsTestandtargetImplServiceWebServiceImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueendpointUri = request().getQueryString("endpointUri");
        String endpointUri;
        if (valueendpointUri != null) {
            endpointUri = valueendpointUri;
        } else {
            endpointUri = null;
        }
        String valueconnectionTimeout = request().getQueryString("connectionTimeout");
        Integer connectionTimeout;
        if (valueconnectionTimeout != null) {
            connectionTimeout = Integer.parseInt(valueconnectionTimeout);
        } else {
            connectionTimeout = null;
        }
        String valuesocketTimeout = request().getQueryString("socketTimeout");
        Integer socketTimeout;
        if (valuesocketTimeout != null) {
            socketTimeout = Integer.parseInt(valuesocketTimeout);
        } else {
            socketTimeout = null;
        }
        ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplInfo obj = imp.comDayCqAnalyticsTestandtargetImplServiceWebServiceImpl(post, apply, delete, action, $location, propertylist, endpointUri, connectionTimeout, socketTimeout);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqAnalyticsTestandtargetImplServletsAdminServerServlet() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuetestandtargetEndpointUrl = request().getQueryString("testandtarget.endpoint.url");
        String testandtargetEndpointUrl;
        if (valuetestandtargetEndpointUrl != null) {
            testandtargetEndpointUrl = valuetestandtargetEndpointUrl;
        } else {
            testandtargetEndpointUrl = null;
        }
        ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletInfo obj = imp.comDayCqAnalyticsTestandtargetImplServletsAdminServerServlet(post, apply, delete, action, $location, propertylist, testandtargetEndpointUrl);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuecqAnalyticsTestandtargetApiUrl = request().getQueryString("cq.analytics.testandtarget.api.url");
        String cqAnalyticsTestandtargetApiUrl;
        if (valuecqAnalyticsTestandtargetApiUrl != null) {
            cqAnalyticsTestandtargetApiUrl = valuecqAnalyticsTestandtargetApiUrl;
        } else {
            cqAnalyticsTestandtargetApiUrl = null;
        }
        String valuecqAnalyticsTestandtargetTimeout = request().getQueryString("cq.analytics.testandtarget.timeout");
        Integer cqAnalyticsTestandtargetTimeout;
        if (valuecqAnalyticsTestandtargetTimeout != null) {
            cqAnalyticsTestandtargetTimeout = Integer.parseInt(valuecqAnalyticsTestandtargetTimeout);
        } else {
            cqAnalyticsTestandtargetTimeout = null;
        }
        String valuecqAnalyticsTestandtargetSockettimeout = request().getQueryString("cq.analytics.testandtarget.sockettimeout");
        Integer cqAnalyticsTestandtargetSockettimeout;
        if (valuecqAnalyticsTestandtargetSockettimeout != null) {
            cqAnalyticsTestandtargetSockettimeout = Integer.parseInt(valuecqAnalyticsTestandtargetSockettimeout);
        } else {
            cqAnalyticsTestandtargetSockettimeout = null;
        }
        String valuecqAnalyticsTestandtargetRecommendationsUrlReplace = request().getQueryString("cq.analytics.testandtarget.recommendations.url.replace");
        String cqAnalyticsTestandtargetRecommendationsUrlReplace;
        if (valuecqAnalyticsTestandtargetRecommendationsUrlReplace != null) {
            cqAnalyticsTestandtargetRecommendationsUrlReplace = valuecqAnalyticsTestandtargetRecommendationsUrlReplace;
        } else {
            cqAnalyticsTestandtargetRecommendationsUrlReplace = null;
        }
        String valuecqAnalyticsTestandtargetRecommendationsUrlReplacewith = request().getQueryString("cq.analytics.testandtarget.recommendations.url.replacewith");
        String cqAnalyticsTestandtargetRecommendationsUrlReplacewith;
        if (valuecqAnalyticsTestandtargetRecommendationsUrlReplacewith != null) {
            cqAnalyticsTestandtargetRecommendationsUrlReplacewith = valuecqAnalyticsTestandtargetRecommendationsUrlReplacewith;
        } else {
            cqAnalyticsTestandtargetRecommendationsUrlReplacewith = null;
        }
        ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplInfo obj = imp.comDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImpl(post, apply, delete, action, $location, propertylist, cqAnalyticsTestandtargetApiUrl, cqAnalyticsTestandtargetTimeout, cqAnalyticsTestandtargetSockettimeout, cqAnalyticsTestandtargetRecommendationsUrlReplace, cqAnalyticsTestandtargetRecommendationsUrlReplacewith);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqAuthImplCugCugSupportImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] cugExemptedPrincipalsArray = request().queryString().get("cug.exempted.principals");
        List<String> cugExemptedPrincipalsList = OpenAPIUtils.parametersToList("multi", cugExemptedPrincipalsArray);
        List<String> cugExemptedPrincipals = new ArrayList<String>();
        for (String curParam : cugExemptedPrincipalsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                cugExemptedPrincipals.add(curParam);
            }
        }
        String valuecugEnabled = request().getQueryString("cug.enabled");
        Boolean cugEnabled;
        if (valuecugEnabled != null) {
            cugEnabled = Boolean.valueOf(valuecugEnabled);
        } else {
            cugEnabled = null;
        }
        String valuecugPrincipalsRegex = request().getQueryString("cug.principals.regex");
        String cugPrincipalsRegex;
        if (valuecugPrincipalsRegex != null) {
            cugPrincipalsRegex = valuecugPrincipalsRegex;
        } else {
            cugPrincipalsRegex = null;
        }
        String valuecugPrincipalsReplacement = request().getQueryString("cug.principals.replacement");
        String cugPrincipalsReplacement;
        if (valuecugPrincipalsReplacement != null) {
            cugPrincipalsReplacement = valuecugPrincipalsReplacement;
        } else {
            cugPrincipalsReplacement = null;
        }
        ComDayCqAuthImplCugCugSupportImplInfo obj = imp.comDayCqAuthImplCugCugSupportImpl(post, apply, delete, action, $location, propertylist, cugExemptedPrincipals, cugEnabled, cugPrincipalsRegex, cugPrincipalsReplacement);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqAuthImplLoginSelectorHandler() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuepath = request().getQueryString("path");
        String path;
        if (valuepath != null) {
            path = valuepath;
        } else {
            path = null;
        }
        String valueserviceRanking = request().getQueryString("service.ranking");
        Integer serviceRanking;
        if (valueserviceRanking != null) {
            serviceRanking = Integer.parseInt(valueserviceRanking);
        } else {
            serviceRanking = null;
        }
        String[] authLoginselectorMappingsArray = request().queryString().get("auth.loginselector.mappings");
        List<String> authLoginselectorMappingsList = OpenAPIUtils.parametersToList("multi", authLoginselectorMappingsArray);
        List<String> authLoginselectorMappings = new ArrayList<String>();
        for (String curParam : authLoginselectorMappingsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                authLoginselectorMappings.add(curParam);
            }
        }
        String[] authLoginselectorChangepwMappingsArray = request().queryString().get("auth.loginselector.changepw.mappings");
        List<String> authLoginselectorChangepwMappingsList = OpenAPIUtils.parametersToList("multi", authLoginselectorChangepwMappingsArray);
        List<String> authLoginselectorChangepwMappings = new ArrayList<String>();
        for (String curParam : authLoginselectorChangepwMappingsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                authLoginselectorChangepwMappings.add(curParam);
            }
        }
        String valueauthLoginselectorDefaultloginpage = request().getQueryString("auth.loginselector.defaultloginpage");
        String authLoginselectorDefaultloginpage;
        if (valueauthLoginselectorDefaultloginpage != null) {
            authLoginselectorDefaultloginpage = valueauthLoginselectorDefaultloginpage;
        } else {
            authLoginselectorDefaultloginpage = null;
        }
        String valueauthLoginselectorDefaultchangepwpage = request().getQueryString("auth.loginselector.defaultchangepwpage");
        String authLoginselectorDefaultchangepwpage;
        if (valueauthLoginselectorDefaultchangepwpage != null) {
            authLoginselectorDefaultchangepwpage = valueauthLoginselectorDefaultchangepwpage;
        } else {
            authLoginselectorDefaultchangepwpage = null;
        }
        String[] authLoginselectorHandleArray = request().queryString().get("auth.loginselector.handle");
        List<String> authLoginselectorHandleList = OpenAPIUtils.parametersToList("multi", authLoginselectorHandleArray);
        List<String> authLoginselectorHandle = new ArrayList<String>();
        for (String curParam : authLoginselectorHandleList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                authLoginselectorHandle.add(curParam);
            }
        }
        String valueauthLoginselectorHandleAllExtensions = request().getQueryString("auth.loginselector.handle.all.extensions");
        Boolean authLoginselectorHandleAllExtensions;
        if (valueauthLoginselectorHandleAllExtensions != null) {
            authLoginselectorHandleAllExtensions = Boolean.valueOf(valueauthLoginselectorHandleAllExtensions);
        } else {
            authLoginselectorHandleAllExtensions = null;
        }
        ComDayCqAuthImplLoginSelectorHandlerInfo obj = imp.comDayCqAuthImplLoginSelectorHandler(post, apply, delete, action, $location, propertylist, path, serviceRanking, authLoginselectorMappings, authLoginselectorChangepwMappings, authLoginselectorDefaultloginpage, authLoginselectorDefaultchangepwpage, authLoginselectorHandle, authLoginselectorHandleAllExtensions);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqCommonsImplExternalizerImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] externalizerDomainsArray = request().queryString().get("externalizer.domains");
        List<String> externalizerDomainsList = OpenAPIUtils.parametersToList("multi", externalizerDomainsArray);
        List<String> externalizerDomains = new ArrayList<String>();
        for (String curParam : externalizerDomainsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                externalizerDomains.add(curParam);
            }
        }
        String valueexternalizerHost = request().getQueryString("externalizer.host");
        String externalizerHost;
        if (valueexternalizerHost != null) {
            externalizerHost = valueexternalizerHost;
        } else {
            externalizerHost = null;
        }
        String valueexternalizerContextpath = request().getQueryString("externalizer.contextpath");
        String externalizerContextpath;
        if (valueexternalizerContextpath != null) {
            externalizerContextpath = valueexternalizerContextpath;
        } else {
            externalizerContextpath = null;
        }
        String valueexternalizerEncodedpath = request().getQueryString("externalizer.encodedpath");
        Boolean externalizerEncodedpath;
        if (valueexternalizerEncodedpath != null) {
            externalizerEncodedpath = Boolean.valueOf(valueexternalizerEncodedpath);
        } else {
            externalizerEncodedpath = null;
        }
        ComDayCqCommonsImplExternalizerImplInfo obj = imp.comDayCqCommonsImplExternalizerImpl(post, apply, delete, action, $location, propertylist, externalizerDomains, externalizerHost, externalizerContextpath, externalizerEncodedpath);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqCommonsServletsRootMappingServlet() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuerootmappingTarget = request().getQueryString("rootmapping.target");
        String rootmappingTarget;
        if (valuerootmappingTarget != null) {
            rootmappingTarget = valuerootmappingTarget;
        } else {
            rootmappingTarget = null;
        }
        ComDayCqCommonsServletsRootMappingServletInfo obj = imp.comDayCqCommonsServletsRootMappingServlet(post, apply, delete, action, $location, propertylist, rootmappingTarget);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionChecke() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] codeupgradetasksArray = request().queryString().get("codeupgradetasks");
        List<String> codeupgradetasksList = OpenAPIUtils.parametersToList("multi", codeupgradetasksArray);
        List<String> codeupgradetasks = new ArrayList<String>();
        for (String curParam : codeupgradetasksList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                codeupgradetasks.add(curParam);
            }
        }
        String[] codeupgradetaskfiltersArray = request().queryString().get("codeupgradetaskfilters");
        List<String> codeupgradetaskfiltersList = OpenAPIUtils.parametersToList("multi", codeupgradetaskfiltersArray);
        List<String> codeupgradetaskfilters = new ArrayList<String>();
        for (String curParam : codeupgradetaskfiltersList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                codeupgradetaskfilters.add(curParam);
            }
        }
        ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfo obj = imp.comDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionChecke(post, apply, delete, action, $location, propertylist, codeupgradetasks, codeupgradetaskfilters);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqCompatCodeupgradeImplUpgradeTaskIgnoreList() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] upgradeTaskIgnoreListArray = request().queryString().get("upgradeTaskIgnoreList");
        List<String> upgradeTaskIgnoreListList = OpenAPIUtils.parametersToList("multi", upgradeTaskIgnoreListArray);
        List<String> upgradeTaskIgnoreList = new ArrayList<String>();
        for (String curParam : upgradeTaskIgnoreListList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                upgradeTaskIgnoreList.add(curParam);
            }
        }
        ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListInfo obj = imp.comDayCqCompatCodeupgradeImplUpgradeTaskIgnoreList(post, apply, delete, action, $location, propertylist, upgradeTaskIgnoreList);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelist() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueeffectiveBundleListPath = request().getQueryString("effectiveBundleListPath");
        String effectiveBundleListPath;
        if (valueeffectiveBundleListPath != null) {
            effectiveBundleListPath = valueeffectiveBundleListPath;
        } else {
            effectiveBundleListPath = null;
        }
        ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistInfo obj = imp.comDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelist(post, apply, delete, action, $location, propertylist, effectiveBundleListPath);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqContentsyncImplContentSyncManagerImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuecontentsyncFallbackAuthorizable = request().getQueryString("contentsync.fallback.authorizable");
        String contentsyncFallbackAuthorizable;
        if (valuecontentsyncFallbackAuthorizable != null) {
            contentsyncFallbackAuthorizable = valuecontentsyncFallbackAuthorizable;
        } else {
            contentsyncFallbackAuthorizable = null;
        }
        String valuecontentsyncFallbackUpdateuser = request().getQueryString("contentsync.fallback.updateuser");
        String contentsyncFallbackUpdateuser;
        if (valuecontentsyncFallbackUpdateuser != null) {
            contentsyncFallbackUpdateuser = valuecontentsyncFallbackUpdateuser;
        } else {
            contentsyncFallbackUpdateuser = null;
        }
        ComDayCqContentsyncImplContentSyncManagerImplInfo obj = imp.comDayCqContentsyncImplContentSyncManagerImpl(post, apply, delete, action, $location, propertylist, contentsyncFallbackAuthorizable, contentsyncFallbackUpdateuser);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqDamCommonsHandlerStandardImageHandler() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuelargeFileThreshold = request().getQueryString("large_file_threshold");
        Integer largeFileThreshold;
        if (valuelargeFileThreshold != null) {
            largeFileThreshold = Integer.parseInt(valuelargeFileThreshold);
        } else {
            largeFileThreshold = null;
        }
        String valuelargeCommentThreshold = request().getQueryString("large_comment_threshold");
        Integer largeCommentThreshold;
        if (valuelargeCommentThreshold != null) {
            largeCommentThreshold = Integer.parseInt(valuelargeCommentThreshold);
        } else {
            largeCommentThreshold = null;
        }
        String valuecqDamEnableExtMetaExtraction = request().getQueryString("cq.dam.enable.ext.meta.extraction");
        Boolean cqDamEnableExtMetaExtraction;
        if (valuecqDamEnableExtMetaExtraction != null) {
            cqDamEnableExtMetaExtraction = Boolean.valueOf(valuecqDamEnableExtMetaExtraction);
        } else {
            cqDamEnableExtMetaExtraction = null;
        }
        ComDayCqDamCommonsHandlerStandardImageHandlerInfo obj = imp.comDayCqDamCommonsHandlerStandardImageHandler(post, apply, delete, action, $location, propertylist, largeFileThreshold, largeCommentThreshold, cqDamEnableExtMetaExtraction);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqDamCommonsMetadataXmpFilterBlackWhite() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuexmpFilterApplyWhitelist = request().getQueryString("xmp.filter.apply_whitelist");
        Boolean xmpFilterApplyWhitelist;
        if (valuexmpFilterApplyWhitelist != null) {
            xmpFilterApplyWhitelist = Boolean.valueOf(valuexmpFilterApplyWhitelist);
        } else {
            xmpFilterApplyWhitelist = null;
        }
        String[] xmpFilterWhitelistArray = request().queryString().get("xmp.filter.whitelist");
        List<String> xmpFilterWhitelistList = OpenAPIUtils.parametersToList("multi", xmpFilterWhitelistArray);
        List<String> xmpFilterWhitelist = new ArrayList<String>();
        for (String curParam : xmpFilterWhitelistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                xmpFilterWhitelist.add(curParam);
            }
        }
        String valuexmpFilterApplyBlacklist = request().getQueryString("xmp.filter.apply_blacklist");
        Boolean xmpFilterApplyBlacklist;
        if (valuexmpFilterApplyBlacklist != null) {
            xmpFilterApplyBlacklist = Boolean.valueOf(valuexmpFilterApplyBlacklist);
        } else {
            xmpFilterApplyBlacklist = null;
        }
        String[] xmpFilterBlacklistArray = request().queryString().get("xmp.filter.blacklist");
        List<String> xmpFilterBlacklistList = OpenAPIUtils.parametersToList("multi", xmpFilterBlacklistArray);
        List<String> xmpFilterBlacklist = new ArrayList<String>();
        for (String curParam : xmpFilterBlacklistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                xmpFilterBlacklist.add(curParam);
            }
        }
        ComDayCqDamCommonsMetadataXmpFilterBlackWhiteInfo obj = imp.comDayCqDamCommonsMetadataXmpFilterBlackWhite(post, apply, delete, action, $location, propertylist, xmpFilterApplyWhitelist, xmpFilterWhitelist, xmpFilterApplyBlacklist, xmpFilterBlacklist);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqDamCommonsUtilImplAssetCacheImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuelargeFileMin = request().getQueryString("large.file.min");
        Integer largeFileMin;
        if (valuelargeFileMin != null) {
            largeFileMin = Integer.parseInt(valuelargeFileMin);
        } else {
            largeFileMin = null;
        }
        String valuecacheApply = request().getQueryString("cache.apply");
        Boolean cacheApply;
        if (valuecacheApply != null) {
            cacheApply = Boolean.valueOf(valuecacheApply);
        } else {
            cacheApply = null;
        }
        String[] mimeTypesArray = request().queryString().get("mime.types");
        List<String> mimeTypesList = OpenAPIUtils.parametersToList("multi", mimeTypesArray);
        List<String> mimeTypes = new ArrayList<String>();
        for (String curParam : mimeTypesList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                mimeTypes.add(curParam);
            }
        }
        ComDayCqDamCommonsUtilImplAssetCacheImplInfo obj = imp.comDayCqDamCommonsUtilImplAssetCacheImpl(post, apply, delete, action, $location, propertylist, largeFileMin, cacheApply, mimeTypes);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqDamCoreImplAnnotationPdfAnnotationPdfConfig() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuecqDamConfigAnnotationPdfDocumentWidth = request().getQueryString("cq.dam.config.annotation.pdf.document.width");
        Integer cqDamConfigAnnotationPdfDocumentWidth;
        if (valuecqDamConfigAnnotationPdfDocumentWidth != null) {
            cqDamConfigAnnotationPdfDocumentWidth = Integer.parseInt(valuecqDamConfigAnnotationPdfDocumentWidth);
        } else {
            cqDamConfigAnnotationPdfDocumentWidth = null;
        }
        String valuecqDamConfigAnnotationPdfDocumentHeight = request().getQueryString("cq.dam.config.annotation.pdf.document.height");
        Integer cqDamConfigAnnotationPdfDocumentHeight;
        if (valuecqDamConfigAnnotationPdfDocumentHeight != null) {
            cqDamConfigAnnotationPdfDocumentHeight = Integer.parseInt(valuecqDamConfigAnnotationPdfDocumentHeight);
        } else {
            cqDamConfigAnnotationPdfDocumentHeight = null;
        }
        String valuecqDamConfigAnnotationPdfDocumentPaddingHorizontal = request().getQueryString("cq.dam.config.annotation.pdf.document.padding.horizontal");
        Integer cqDamConfigAnnotationPdfDocumentPaddingHorizontal;
        if (valuecqDamConfigAnnotationPdfDocumentPaddingHorizontal != null) {
            cqDamConfigAnnotationPdfDocumentPaddingHorizontal = Integer.parseInt(valuecqDamConfigAnnotationPdfDocumentPaddingHorizontal);
        } else {
            cqDamConfigAnnotationPdfDocumentPaddingHorizontal = null;
        }
        String valuecqDamConfigAnnotationPdfDocumentPaddingVertical = request().getQueryString("cq.dam.config.annotation.pdf.document.padding.vertical");
        Integer cqDamConfigAnnotationPdfDocumentPaddingVertical;
        if (valuecqDamConfigAnnotationPdfDocumentPaddingVertical != null) {
            cqDamConfigAnnotationPdfDocumentPaddingVertical = Integer.parseInt(valuecqDamConfigAnnotationPdfDocumentPaddingVertical);
        } else {
            cqDamConfigAnnotationPdfDocumentPaddingVertical = null;
        }
        String valuecqDamConfigAnnotationPdfFontSize = request().getQueryString("cq.dam.config.annotation.pdf.font.size");
        Integer cqDamConfigAnnotationPdfFontSize;
        if (valuecqDamConfigAnnotationPdfFontSize != null) {
            cqDamConfigAnnotationPdfFontSize = Integer.parseInt(valuecqDamConfigAnnotationPdfFontSize);
        } else {
            cqDamConfigAnnotationPdfFontSize = null;
        }
        String valuecqDamConfigAnnotationPdfFontColor = request().getQueryString("cq.dam.config.annotation.pdf.font.color");
        String cqDamConfigAnnotationPdfFontColor;
        if (valuecqDamConfigAnnotationPdfFontColor != null) {
            cqDamConfigAnnotationPdfFontColor = valuecqDamConfigAnnotationPdfFontColor;
        } else {
            cqDamConfigAnnotationPdfFontColor = null;
        }
        String valuecqDamConfigAnnotationPdfFontFamily = request().getQueryString("cq.dam.config.annotation.pdf.font.family");
        String cqDamConfigAnnotationPdfFontFamily;
        if (valuecqDamConfigAnnotationPdfFontFamily != null) {
            cqDamConfigAnnotationPdfFontFamily = valuecqDamConfigAnnotationPdfFontFamily;
        } else {
            cqDamConfigAnnotationPdfFontFamily = null;
        }
        String valuecqDamConfigAnnotationPdfFontLight = request().getQueryString("cq.dam.config.annotation.pdf.font.light");
        String cqDamConfigAnnotationPdfFontLight;
        if (valuecqDamConfigAnnotationPdfFontLight != null) {
            cqDamConfigAnnotationPdfFontLight = valuecqDamConfigAnnotationPdfFontLight;
        } else {
            cqDamConfigAnnotationPdfFontLight = null;
        }
        String valuecqDamConfigAnnotationPdfMarginTextImage = request().getQueryString("cq.dam.config.annotation.pdf.marginTextImage");
        Integer cqDamConfigAnnotationPdfMarginTextImage;
        if (valuecqDamConfigAnnotationPdfMarginTextImage != null) {
            cqDamConfigAnnotationPdfMarginTextImage = Integer.parseInt(valuecqDamConfigAnnotationPdfMarginTextImage);
        } else {
            cqDamConfigAnnotationPdfMarginTextImage = null;
        }
        String valuecqDamConfigAnnotationPdfMinImageHeight = request().getQueryString("cq.dam.config.annotation.pdf.minImageHeight");
        Integer cqDamConfigAnnotationPdfMinImageHeight;
        if (valuecqDamConfigAnnotationPdfMinImageHeight != null) {
            cqDamConfigAnnotationPdfMinImageHeight = Integer.parseInt(valuecqDamConfigAnnotationPdfMinImageHeight);
        } else {
            cqDamConfigAnnotationPdfMinImageHeight = null;
        }
        String valuecqDamConfigAnnotationPdfReviewStatusWidth = request().getQueryString("cq.dam.config.annotation.pdf.reviewStatus.width");
        Integer cqDamConfigAnnotationPdfReviewStatusWidth;
        if (valuecqDamConfigAnnotationPdfReviewStatusWidth != null) {
            cqDamConfigAnnotationPdfReviewStatusWidth = Integer.parseInt(valuecqDamConfigAnnotationPdfReviewStatusWidth);
        } else {
            cqDamConfigAnnotationPdfReviewStatusWidth = null;
        }
        String valuecqDamConfigAnnotationPdfReviewStatusColorApproved = request().getQueryString("cq.dam.config.annotation.pdf.reviewStatus.color.approved");
        String cqDamConfigAnnotationPdfReviewStatusColorApproved;
        if (valuecqDamConfigAnnotationPdfReviewStatusColorApproved != null) {
            cqDamConfigAnnotationPdfReviewStatusColorApproved = valuecqDamConfigAnnotationPdfReviewStatusColorApproved;
        } else {
            cqDamConfigAnnotationPdfReviewStatusColorApproved = null;
        }
        String valuecqDamConfigAnnotationPdfReviewStatusColorRejected = request().getQueryString("cq.dam.config.annotation.pdf.reviewStatus.color.rejected");
        String cqDamConfigAnnotationPdfReviewStatusColorRejected;
        if (valuecqDamConfigAnnotationPdfReviewStatusColorRejected != null) {
            cqDamConfigAnnotationPdfReviewStatusColorRejected = valuecqDamConfigAnnotationPdfReviewStatusColorRejected;
        } else {
            cqDamConfigAnnotationPdfReviewStatusColorRejected = null;
        }
        String valuecqDamConfigAnnotationPdfReviewStatusColorChangesRequested = request().getQueryString("cq.dam.config.annotation.pdf.reviewStatus.color.changesRequested");
        String cqDamConfigAnnotationPdfReviewStatusColorChangesRequested;
        if (valuecqDamConfigAnnotationPdfReviewStatusColorChangesRequested != null) {
            cqDamConfigAnnotationPdfReviewStatusColorChangesRequested = valuecqDamConfigAnnotationPdfReviewStatusColorChangesRequested;
        } else {
            cqDamConfigAnnotationPdfReviewStatusColorChangesRequested = null;
        }
        String valuecqDamConfigAnnotationPdfAnnotationMarkerWidth = request().getQueryString("cq.dam.config.annotation.pdf.annotationMarker.width");
        Integer cqDamConfigAnnotationPdfAnnotationMarkerWidth;
        if (valuecqDamConfigAnnotationPdfAnnotationMarkerWidth != null) {
            cqDamConfigAnnotationPdfAnnotationMarkerWidth = Integer.parseInt(valuecqDamConfigAnnotationPdfAnnotationMarkerWidth);
        } else {
            cqDamConfigAnnotationPdfAnnotationMarkerWidth = null;
        }
        String valuecqDamConfigAnnotationPdfAssetMinheight = request().getQueryString("cq.dam.config.annotation.pdf.asset.minheight");
        Integer cqDamConfigAnnotationPdfAssetMinheight;
        if (valuecqDamConfigAnnotationPdfAssetMinheight != null) {
            cqDamConfigAnnotationPdfAssetMinheight = Integer.parseInt(valuecqDamConfigAnnotationPdfAssetMinheight);
        } else {
            cqDamConfigAnnotationPdfAssetMinheight = null;
        }
        ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigInfo obj = imp.comDayCqDamCoreImplAnnotationPdfAnnotationPdfConfig(post, apply, delete, action, $location, propertylist, cqDamConfigAnnotationPdfDocumentWidth, cqDamConfigAnnotationPdfDocumentHeight, cqDamConfigAnnotationPdfDocumentPaddingHorizontal, cqDamConfigAnnotationPdfDocumentPaddingVertical, cqDamConfigAnnotationPdfFontSize, cqDamConfigAnnotationPdfFontColor, cqDamConfigAnnotationPdfFontFamily, cqDamConfigAnnotationPdfFontLight, cqDamConfigAnnotationPdfMarginTextImage, cqDamConfigAnnotationPdfMinImageHeight, cqDamConfigAnnotationPdfReviewStatusWidth, cqDamConfigAnnotationPdfReviewStatusColorApproved, cqDamConfigAnnotationPdfReviewStatusColorRejected, cqDamConfigAnnotationPdfReviewStatusColorChangesRequested, cqDamConfigAnnotationPdfAnnotationMarkerWidth, cqDamConfigAnnotationPdfAssetMinheight);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqDamCoreImplAssetMoveListener() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueenabled = request().getQueryString("enabled");
        Boolean enabled;
        if (valueenabled != null) {
            enabled = Boolean.valueOf(valueenabled);
        } else {
            enabled = null;
        }
        ComDayCqDamCoreImplAssetMoveListenerInfo obj = imp.comDayCqDamCoreImplAssetMoveListener(post, apply, delete, action, $location, propertylist, enabled);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqDamCoreImplAssethomeAssetHomePageConfiguration() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueisEnabled = request().getQueryString("isEnabled");
        Boolean isEnabled;
        if (valueisEnabled != null) {
            isEnabled = Boolean.valueOf(valueisEnabled);
        } else {
            isEnabled = null;
        }
        ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationInfo obj = imp.comDayCqDamCoreImplAssethomeAssetHomePageConfiguration(post, apply, delete, action, $location, propertylist, isEnabled);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServlet() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuecqDamAdhocAssetSharePrezipMaxcontentsize = request().getQueryString("cq.dam.adhoc.asset.share.prezip.maxcontentsize");
        Integer cqDamAdhocAssetSharePrezipMaxcontentsize;
        if (valuecqDamAdhocAssetSharePrezipMaxcontentsize != null) {
            cqDamAdhocAssetSharePrezipMaxcontentsize = Integer.parseInt(valuecqDamAdhocAssetSharePrezipMaxcontentsize);
        } else {
            cqDamAdhocAssetSharePrezipMaxcontentsize = null;
        }
        ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletInfo obj = imp.comDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServlet(post, apply, delete, action, $location, propertylist, cqDamAdhocAssetSharePrezipMaxcontentsize);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqDamCoreImplCacheCQBufferedImageCache() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuecqDamImageCacheMaxMemory = request().getQueryString("cq.dam.image.cache.max.memory");
        Integer cqDamImageCacheMaxMemory;
        if (valuecqDamImageCacheMaxMemory != null) {
            cqDamImageCacheMaxMemory = Integer.parseInt(valuecqDamImageCacheMaxMemory);
        } else {
            cqDamImageCacheMaxMemory = null;
        }
        String valuecqDamImageCacheMaxAge = request().getQueryString("cq.dam.image.cache.max.age");
        Integer cqDamImageCacheMaxAge;
        if (valuecqDamImageCacheMaxAge != null) {
            cqDamImageCacheMaxAge = Integer.parseInt(valuecqDamImageCacheMaxAge);
        } else {
            cqDamImageCacheMaxAge = null;
        }
        String valuecqDamImageCacheMaxDimension = request().getQueryString("cq.dam.image.cache.max.dimension");
        String cqDamImageCacheMaxDimension;
        if (valuecqDamImageCacheMaxDimension != null) {
            cqDamImageCacheMaxDimension = valuecqDamImageCacheMaxDimension;
        } else {
            cqDamImageCacheMaxDimension = null;
        }
        ComDayCqDamCoreImplCacheCQBufferedImageCacheInfo obj = imp.comDayCqDamCoreImplCacheCQBufferedImageCache(post, apply, delete, action, $location, propertylist, cqDamImageCacheMaxMemory, cqDamImageCacheMaxAge, cqDamImageCacheMaxDimension);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqDamCoreImplDamChangeEventListener() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] changeeventlistenerObservedPathsArray = request().queryString().get("changeeventlistener.observed.paths");
        List<String> changeeventlistenerObservedPathsList = OpenAPIUtils.parametersToList("multi", changeeventlistenerObservedPathsArray);
        List<String> changeeventlistenerObservedPaths = new ArrayList<String>();
        for (String curParam : changeeventlistenerObservedPathsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                changeeventlistenerObservedPaths.add(curParam);
            }
        }
        ComDayCqDamCoreImplDamChangeEventListenerInfo obj = imp.comDayCqDamCoreImplDamChangeEventListener(post, apply, delete, action, $location, propertylist, changeeventlistenerObservedPaths);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqDamCoreImplDamEventPurgeService() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueschedulerExpression = request().getQueryString("scheduler.expression");
        String schedulerExpression;
        if (valueschedulerExpression != null) {
            schedulerExpression = valueschedulerExpression;
        } else {
            schedulerExpression = null;
        }
        String valuemaxSavedActivities = request().getQueryString("maxSavedActivities");
        Integer maxSavedActivities;
        if (valuemaxSavedActivities != null) {
            maxSavedActivities = Integer.parseInt(valuemaxSavedActivities);
        } else {
            maxSavedActivities = null;
        }
        String valuesaveInterval = request().getQueryString("saveInterval");
        Integer saveInterval;
        if (valuesaveInterval != null) {
            saveInterval = Integer.parseInt(valuesaveInterval);
        } else {
            saveInterval = null;
        }
        String valueenableActivityPurge = request().getQueryString("enableActivityPurge");
        Boolean enableActivityPurge;
        if (valueenableActivityPurge != null) {
            enableActivityPurge = Boolean.valueOf(valueenableActivityPurge);
        } else {
            enableActivityPurge = null;
        }
        String valueeventTypes = request().getQueryString("eventTypes");
        String eventTypes;
        if (valueeventTypes != null) {
            eventTypes = valueeventTypes;
        } else {
            eventTypes = null;
        }
        ComDayCqDamCoreImplDamEventPurgeServiceInfo obj = imp.comDayCqDamCoreImplDamEventPurgeService(post, apply, delete, action, $location, propertylist, schedulerExpression, maxSavedActivities, saveInterval, enableActivityPurge, eventTypes);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqDamCoreImplDamEventRecorderImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueeventFilter = request().getQueryString("event.filter");
        String eventFilter;
        if (valueeventFilter != null) {
            eventFilter = valueeventFilter;
        } else {
            eventFilter = null;
        }
        String valueeventQueueLength = request().getQueryString("event.queue.length");
        Integer eventQueueLength;
        if (valueeventQueueLength != null) {
            eventQueueLength = Integer.parseInt(valueeventQueueLength);
        } else {
            eventQueueLength = null;
        }
        String valueeventrecorderEnabled = request().getQueryString("eventrecorder.enabled");
        Boolean eventrecorderEnabled;
        if (valueeventrecorderEnabled != null) {
            eventrecorderEnabled = Boolean.valueOf(valueeventrecorderEnabled);
        } else {
            eventrecorderEnabled = null;
        }
        String[] eventrecorderBlacklistArray = request().queryString().get("eventrecorder.blacklist");
        List<String> eventrecorderBlacklistList = OpenAPIUtils.parametersToList("multi", eventrecorderBlacklistArray);
        List<String> eventrecorderBlacklist = new ArrayList<String>();
        for (String curParam : eventrecorderBlacklistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                eventrecorderBlacklist.add(curParam);
            }
        }
        String valueeventrecorderEventtypes = request().getQueryString("eventrecorder.eventtypes");
        String eventrecorderEventtypes;
        if (valueeventrecorderEventtypes != null) {
            eventrecorderEventtypes = valueeventrecorderEventtypes;
        } else {
            eventrecorderEventtypes = null;
        }
        ComDayCqDamCoreImplDamEventRecorderImplInfo obj = imp.comDayCqDamCoreImplDamEventRecorderImpl(post, apply, delete, action, $location, propertylist, eventFilter, eventQueueLength, eventrecorderEnabled, eventrecorderBlacklist, eventrecorderEventtypes);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqDamCoreImplEventDamEventAuditListener() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueeventFilter = request().getQueryString("event.filter");
        String eventFilter;
        if (valueeventFilter != null) {
            eventFilter = valueeventFilter;
        } else {
            eventFilter = null;
        }
        String valueenabled = request().getQueryString("enabled");
        Boolean enabled;
        if (valueenabled != null) {
            enabled = Boolean.valueOf(valueenabled);
        } else {
            enabled = null;
        }
        ComDayCqDamCoreImplEventDamEventAuditListenerInfo obj = imp.comDayCqDamCoreImplEventDamEventAuditListener(post, apply, delete, action, $location, propertylist, eventFilter, enabled);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqDamCoreImplExpiryNotificationJobImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuecqDamExpiryNotificationSchedulerIstimebased = request().getQueryString("cq.dam.expiry.notification.scheduler.istimebased");
        Boolean cqDamExpiryNotificationSchedulerIstimebased;
        if (valuecqDamExpiryNotificationSchedulerIstimebased != null) {
            cqDamExpiryNotificationSchedulerIstimebased = Boolean.valueOf(valuecqDamExpiryNotificationSchedulerIstimebased);
        } else {
            cqDamExpiryNotificationSchedulerIstimebased = null;
        }
        String valuecqDamExpiryNotificationSchedulerTimebasedRule = request().getQueryString("cq.dam.expiry.notification.scheduler.timebased.rule");
        String cqDamExpiryNotificationSchedulerTimebasedRule;
        if (valuecqDamExpiryNotificationSchedulerTimebasedRule != null) {
            cqDamExpiryNotificationSchedulerTimebasedRule = valuecqDamExpiryNotificationSchedulerTimebasedRule;
        } else {
            cqDamExpiryNotificationSchedulerTimebasedRule = null;
        }
        String valuecqDamExpiryNotificationSchedulerPeriodRule = request().getQueryString("cq.dam.expiry.notification.scheduler.period.rule");
        Integer cqDamExpiryNotificationSchedulerPeriodRule;
        if (valuecqDamExpiryNotificationSchedulerPeriodRule != null) {
            cqDamExpiryNotificationSchedulerPeriodRule = Integer.parseInt(valuecqDamExpiryNotificationSchedulerPeriodRule);
        } else {
            cqDamExpiryNotificationSchedulerPeriodRule = null;
        }
        String valuesendEmail = request().getQueryString("send_email");
        Boolean sendEmail;
        if (valuesendEmail != null) {
            sendEmail = Boolean.valueOf(valuesendEmail);
        } else {
            sendEmail = null;
        }
        String valueassetExpiredLimit = request().getQueryString("asset_expired_limit");
        Integer assetExpiredLimit;
        if (valueassetExpiredLimit != null) {
            assetExpiredLimit = Integer.parseInt(valueassetExpiredLimit);
        } else {
            assetExpiredLimit = null;
        }
        String valuepriorNotificationSeconds = request().getQueryString("prior_notification_seconds");
        Integer priorNotificationSeconds;
        if (valuepriorNotificationSeconds != null) {
            priorNotificationSeconds = Integer.parseInt(valuepriorNotificationSeconds);
        } else {
            priorNotificationSeconds = null;
        }
        String valuecqDamExpiryNotificationUrlProtocol = request().getQueryString("cq.dam.expiry.notification.url.protocol");
        String cqDamExpiryNotificationUrlProtocol;
        if (valuecqDamExpiryNotificationUrlProtocol != null) {
            cqDamExpiryNotificationUrlProtocol = valuecqDamExpiryNotificationUrlProtocol;
        } else {
            cqDamExpiryNotificationUrlProtocol = null;
        }
        ComDayCqDamCoreImplExpiryNotificationJobImplInfo obj = imp.comDayCqDamCoreImplExpiryNotificationJobImpl(post, apply, delete, action, $location, propertylist, cqDamExpiryNotificationSchedulerIstimebased, cqDamExpiryNotificationSchedulerTimebasedRule, cqDamExpiryNotificationSchedulerPeriodRule, sendEmail, assetExpiredLimit, priorNotificationSeconds, cqDamExpiryNotificationUrlProtocol);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeat() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueisEnabled = request().getQueryString("isEnabled");
        Boolean isEnabled;
        if (valueisEnabled != null) {
            isEnabled = Boolean.valueOf(valueisEnabled);
        } else {
            isEnabled = null;
        }
        ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatInfo obj = imp.comDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeat(post, apply, delete, action, $location, propertylist, isEnabled);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqDamCoreImplGfxCommonsGfxRenderer() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueskipBufferedcache = request().getQueryString("skip.bufferedcache");
        Boolean skipBufferedcache;
        if (valueskipBufferedcache != null) {
            skipBufferedcache = Boolean.valueOf(valueskipBufferedcache);
        } else {
            skipBufferedcache = null;
        }
        ComDayCqDamCoreImplGfxCommonsGfxRendererInfo obj = imp.comDayCqDamCoreImplGfxCommonsGfxRenderer(post, apply, delete, action, $location, propertylist, skipBufferedcache);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqDamCoreImplHandlerEPSFormatHandler() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuemimetype = request().getQueryString("mimetype");
        String mimetype;
        if (valuemimetype != null) {
            mimetype = valuemimetype;
        } else {
            mimetype = null;
        }
        ComDayCqDamCoreImplHandlerEPSFormatHandlerInfo obj = imp.comDayCqDamCoreImplHandlerEPSFormatHandler(post, apply, delete, action, $location, propertylist, mimetype);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqDamCoreImplHandlerIndesignFormatHandler() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] mimetypeArray = request().queryString().get("mimetype");
        List<String> mimetypeList = OpenAPIUtils.parametersToList("multi", mimetypeArray);
        List<String> mimetype = new ArrayList<String>();
        for (String curParam : mimetypeList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                mimetype.add(curParam);
            }
        }
        ComDayCqDamCoreImplHandlerIndesignFormatHandlerInfo obj = imp.comDayCqDamCoreImplHandlerIndesignFormatHandler(post, apply, delete, action, $location, propertylist, mimetype);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqDamCoreImplHandlerJpegHandler() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuecqDamEnableExtMetaExtraction = request().getQueryString("cq.dam.enable.ext.meta.extraction");
        Boolean cqDamEnableExtMetaExtraction;
        if (valuecqDamEnableExtMetaExtraction != null) {
            cqDamEnableExtMetaExtraction = Boolean.valueOf(valuecqDamEnableExtMetaExtraction);
        } else {
            cqDamEnableExtMetaExtraction = null;
        }
        String valuelargeFileThreshold = request().getQueryString("large_file_threshold");
        Integer largeFileThreshold;
        if (valuelargeFileThreshold != null) {
            largeFileThreshold = Integer.parseInt(valuelargeFileThreshold);
        } else {
            largeFileThreshold = null;
        }
        String valuelargeCommentThreshold = request().getQueryString("large_comment_threshold");
        Integer largeCommentThreshold;
        if (valuelargeCommentThreshold != null) {
            largeCommentThreshold = Integer.parseInt(valuelargeCommentThreshold);
        } else {
            largeCommentThreshold = null;
        }
        ComDayCqDamCoreImplHandlerJpegHandlerInfo obj = imp.comDayCqDamCoreImplHandlerJpegHandler(post, apply, delete, action, $location, propertylist, cqDamEnableExtMetaExtraction, largeFileThreshold, largeCommentThreshold);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqDamCoreImplHandlerXmpNCommXMPHandler() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] xmphandlerCqFormatsArray = request().queryString().get("xmphandler.cq.formats");
        List<String> xmphandlerCqFormatsList = OpenAPIUtils.parametersToList("multi", xmphandlerCqFormatsArray);
        List<String> xmphandlerCqFormats = new ArrayList<String>();
        for (String curParam : xmphandlerCqFormatsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                xmphandlerCqFormats.add(curParam);
            }
        }
        ComDayCqDamCoreImplHandlerXmpNCommXMPHandlerInfo obj = imp.comDayCqDamCoreImplHandlerXmpNCommXMPHandler(post, apply, delete, action, $location, propertylist, xmphandlerCqFormats);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqDamCoreImplJmxAssetIndexUpdateMonitor() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuejmxObjectname = request().getQueryString("jmx.objectname");
        String jmxObjectname;
        if (valuejmxObjectname != null) {
            jmxObjectname = valuejmxObjectname;
        } else {
            jmxObjectname = null;
        }
        String valuepropertyMeasureEnabled = request().getQueryString("property.measure.enabled");
        Boolean propertyMeasureEnabled;
        if (valuepropertyMeasureEnabled != null) {
            propertyMeasureEnabled = Boolean.valueOf(valuepropertyMeasureEnabled);
        } else {
            propertyMeasureEnabled = null;
        }
        String valuepropertyName = request().getQueryString("property.name");
        String propertyName;
        if (valuepropertyName != null) {
            propertyName = valuepropertyName;
        } else {
            propertyName = null;
        }
        String valuepropertyMaxWaitMs = request().getQueryString("property.max.wait.ms");
        Integer propertyMaxWaitMs;
        if (valuepropertyMaxWaitMs != null) {
            propertyMaxWaitMs = Integer.parseInt(valuepropertyMaxWaitMs);
        } else {
            propertyMaxWaitMs = null;
        }
        String valuepropertyMaxRate = request().getQueryString("property.max.rate");
        BigDecimal propertyMaxRate;
        if (valuepropertyMaxRate != null) {
            propertyMaxRate = Double.parseDouble(valuepropertyMaxRate);
        } else {
            propertyMaxRate = null;
        }
        String valuefulltextMeasureEnabled = request().getQueryString("fulltext.measure.enabled");
        Boolean fulltextMeasureEnabled;
        if (valuefulltextMeasureEnabled != null) {
            fulltextMeasureEnabled = Boolean.valueOf(valuefulltextMeasureEnabled);
        } else {
            fulltextMeasureEnabled = null;
        }
        String valuefulltextName = request().getQueryString("fulltext.name");
        String fulltextName;
        if (valuefulltextName != null) {
            fulltextName = valuefulltextName;
        } else {
            fulltextName = null;
        }
        String valuefulltextMaxWaitMs = request().getQueryString("fulltext.max.wait.ms");
        Integer fulltextMaxWaitMs;
        if (valuefulltextMaxWaitMs != null) {
            fulltextMaxWaitMs = Integer.parseInt(valuefulltextMaxWaitMs);
        } else {
            fulltextMaxWaitMs = null;
        }
        String valuefulltextMaxRate = request().getQueryString("fulltext.max.rate");
        BigDecimal fulltextMaxRate;
        if (valuefulltextMaxRate != null) {
            fulltextMaxRate = Double.parseDouble(valuefulltextMaxRate);
        } else {
            fulltextMaxRate = null;
        }
        ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorInfo obj = imp.comDayCqDamCoreImplJmxAssetIndexUpdateMonitor(post, apply, delete, action, $location, propertylist, jmxObjectname, propertyMeasureEnabled, propertyName, propertyMaxWaitMs, propertyMaxRate, fulltextMeasureEnabled, fulltextName, fulltextMaxWaitMs, fulltextMaxRate);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqDamCoreImplJmxAssetMigrationMBeanImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuejmxObjectname = request().getQueryString("jmx.objectname");
        String jmxObjectname;
        if (valuejmxObjectname != null) {
            jmxObjectname = valuejmxObjectname;
        } else {
            jmxObjectname = null;
        }
        ComDayCqDamCoreImplJmxAssetMigrationMBeanImplInfo obj = imp.comDayCqDamCoreImplJmxAssetMigrationMBeanImpl(post, apply, delete, action, $location, propertylist, jmxObjectname);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqDamCoreImplJmxAssetUpdateMonitorImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuejmxObjectname = request().getQueryString("jmx.objectname");
        String jmxObjectname;
        if (valuejmxObjectname != null) {
            jmxObjectname = valuejmxObjectname;
        } else {
            jmxObjectname = null;
        }
        String valueactive = request().getQueryString("active");
        Boolean active;
        if (valueactive != null) {
            active = Boolean.valueOf(valueactive);
        } else {
            active = null;
        }
        ComDayCqDamCoreImplJmxAssetUpdateMonitorImplInfo obj = imp.comDayCqDamCoreImplJmxAssetUpdateMonitorImpl(post, apply, delete, action, $location, propertylist, jmxObjectname, active);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfig() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueoperation = request().getQueryString("operation");
        String operation;
        if (valueoperation != null) {
            operation = valueoperation;
        } else {
            operation = null;
        }
        String valueemailEnabled = request().getQueryString("emailEnabled");
        Boolean emailEnabled;
        if (valueemailEnabled != null) {
            emailEnabled = Boolean.valueOf(valueemailEnabled);
        } else {
            emailEnabled = null;
        }
        ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigInfo obj = imp.comDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfig(post, apply, delete, action, $location, propertylist, operation, emailEnabled);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfig() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueoperation = request().getQueryString("operation");
        String operation;
        if (valueoperation != null) {
            operation = valueoperation;
        } else {
            operation = null;
        }
        String valueoperationIcon = request().getQueryString("operationIcon");
        String operationIcon;
        if (valueoperationIcon != null) {
            operationIcon = valueoperationIcon;
        } else {
            operationIcon = null;
        }
        String valuetopicName = request().getQueryString("topicName");
        String topicName;
        if (valuetopicName != null) {
            topicName = valuetopicName;
        } else {
            topicName = null;
        }
        String valueemailEnabled = request().getQueryString("emailEnabled");
        Boolean emailEnabled;
        if (valueemailEnabled != null) {
            emailEnabled = Boolean.valueOf(valueemailEnabled);
        } else {
            emailEnabled = null;
        }
        ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigInfo obj = imp.comDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfig(post, apply, delete, action, $location, propertylist, operation, operationIcon, topicName, emailEnabled);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqDamCoreImplLightboxLightboxServlet() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueslingServletPaths = request().getQueryString("sling.servlet.paths");
        String slingServletPaths;
        if (valueslingServletPaths != null) {
            slingServletPaths = valueslingServletPaths;
        } else {
            slingServletPaths = null;
        }
        String[] slingServletMethodsArray = request().queryString().get("sling.servlet.methods");
        List<String> slingServletMethodsList = OpenAPIUtils.parametersToList("multi", slingServletMethodsArray);
        List<String> slingServletMethods = new ArrayList<String>();
        for (String curParam : slingServletMethodsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                slingServletMethods.add(curParam);
            }
        }
        String valuecqDamEnableAnonymous = request().getQueryString("cq.dam.enable.anonymous");
        Boolean cqDamEnableAnonymous;
        if (valuecqDamEnableAnonymous != null) {
            cqDamEnableAnonymous = Boolean.valueOf(valuecqDamEnableAnonymous);
        } else {
            cqDamEnableAnonymous = null;
        }
        ComDayCqDamCoreImplLightboxLightboxServletInfo obj = imp.comDayCqDamCoreImplLightboxLightboxServlet(post, apply, delete, action, $location, propertylist, slingServletPaths, slingServletMethods, cqDamEnableAnonymous);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqDamCoreImplMetadataEditorSelectComponentHandler() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] graniteColonDataArray = request().queryString().get("granite:data");
        List<String> graniteColonDataList = OpenAPIUtils.parametersToList("multi", graniteColonDataArray);
        List<String> graniteColonData = new ArrayList<String>();
        for (String curParam : graniteColonDataList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                graniteColonData.add(curParam);
            }
        }
        ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerInfo obj = imp.comDayCqDamCoreImplMetadataEditorSelectComponentHandler(post, apply, delete, action, $location, propertylist, graniteColonData);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelper() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuecqDamAllowAllMime = request().getQueryString("cq.dam.allow.all.mime");
        Boolean cqDamAllowAllMime;
        if (valuecqDamAllowAllMime != null) {
            cqDamAllowAllMime = Boolean.valueOf(valuecqDamAllowAllMime);
        } else {
            cqDamAllowAllMime = null;
        }
        String[] cqDamAllowedAssetMimesArray = request().queryString().get("cq.dam.allowed.asset.mimes");
        List<String> cqDamAllowedAssetMimesList = OpenAPIUtils.parametersToList("multi", cqDamAllowedAssetMimesArray);
        List<String> cqDamAllowedAssetMimes = new ArrayList<String>();
        for (String curParam : cqDamAllowedAssetMimesList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                cqDamAllowedAssetMimes.add(curParam);
            }
        }
        ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperInfo obj = imp.comDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelper(post, apply, delete, action, $location, propertylist, cqDamAllowAllMime, cqDamAllowedAssetMimes);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqDamCoreImplMimeTypeDamMimeTypeServiceImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuecqDamDetectAssetMimeFromContent = request().getQueryString("cq.dam.detect.asset.mime.from.content");
        Boolean cqDamDetectAssetMimeFromContent;
        if (valuecqDamDetectAssetMimeFromContent != null) {
            cqDamDetectAssetMimeFromContent = Boolean.valueOf(valuecqDamDetectAssetMimeFromContent);
        } else {
            cqDamDetectAssetMimeFromContent = null;
        }
        ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplInfo obj = imp.comDayCqDamCoreImplMimeTypeDamMimeTypeServiceImpl(post, apply, delete, action, $location, propertylist, cqDamDetectAssetMimeFromContent);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqDamCoreImplMissingMetadataNotificationJob() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuecqDamMissingmetadataNotificationSchedulerIstimebased = request().getQueryString("cq.dam.missingmetadata.notification.scheduler.istimebased");
        Boolean cqDamMissingmetadataNotificationSchedulerIstimebased;
        if (valuecqDamMissingmetadataNotificationSchedulerIstimebased != null) {
            cqDamMissingmetadataNotificationSchedulerIstimebased = Boolean.valueOf(valuecqDamMissingmetadataNotificationSchedulerIstimebased);
        } else {
            cqDamMissingmetadataNotificationSchedulerIstimebased = null;
        }
        String valuecqDamMissingmetadataNotificationSchedulerTimebasedRule = request().getQueryString("cq.dam.missingmetadata.notification.scheduler.timebased.rule");
        String cqDamMissingmetadataNotificationSchedulerTimebasedRule;
        if (valuecqDamMissingmetadataNotificationSchedulerTimebasedRule != null) {
            cqDamMissingmetadataNotificationSchedulerTimebasedRule = valuecqDamMissingmetadataNotificationSchedulerTimebasedRule;
        } else {
            cqDamMissingmetadataNotificationSchedulerTimebasedRule = null;
        }
        String valuecqDamMissingmetadataNotificationSchedulerPeriodRule = request().getQueryString("cq.dam.missingmetadata.notification.scheduler.period.rule");
        Integer cqDamMissingmetadataNotificationSchedulerPeriodRule;
        if (valuecqDamMissingmetadataNotificationSchedulerPeriodRule != null) {
            cqDamMissingmetadataNotificationSchedulerPeriodRule = Integer.parseInt(valuecqDamMissingmetadataNotificationSchedulerPeriodRule);
        } else {
            cqDamMissingmetadataNotificationSchedulerPeriodRule = null;
        }
        String valuecqDamMissingmetadataNotificationRecipient = request().getQueryString("cq.dam.missingmetadata.notification.recipient");
        String cqDamMissingmetadataNotificationRecipient;
        if (valuecqDamMissingmetadataNotificationRecipient != null) {
            cqDamMissingmetadataNotificationRecipient = valuecqDamMissingmetadataNotificationRecipient;
        } else {
            cqDamMissingmetadataNotificationRecipient = null;
        }
        ComDayCqDamCoreImplMissingMetadataNotificationJobInfo obj = imp.comDayCqDamCoreImplMissingMetadataNotificationJob(post, apply, delete, action, $location, propertylist, cqDamMissingmetadataNotificationSchedulerIstimebased, cqDamMissingmetadataNotificationSchedulerTimebasedRule, cqDamMissingmetadataNotificationSchedulerPeriodRule, cqDamMissingmetadataNotificationRecipient);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPr() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueprocessLabel = request().getQueryString("process.label");
        String processLabel;
        if (valueprocessLabel != null) {
            processLabel = valueprocessLabel;
        } else {
            processLabel = null;
        }
        String valuenotifyOnComplete = request().getQueryString("Notify on Complete");
        Boolean notifyOnComplete;
        if (valuenotifyOnComplete != null) {
            notifyOnComplete = Boolean.valueOf(valuenotifyOnComplete);
        } else {
            notifyOnComplete = null;
        }
        ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrInfo obj = imp.comDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPr(post, apply, delete, action, $location, propertylist, processLabel, notifyOnComplete);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqDamCoreImplProcessTextExtractionProcess() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] mimeTypesArray = request().queryString().get("mimeTypes");
        List<String> mimeTypesList = OpenAPIUtils.parametersToList("multi", mimeTypesArray);
        List<String> mimeTypes = new ArrayList<String>();
        for (String curParam : mimeTypesList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                mimeTypes.add(curParam);
            }
        }
        String valuemaxExtract = request().getQueryString("maxExtract");
        Integer maxExtract;
        if (valuemaxExtract != null) {
            maxExtract = Integer.parseInt(valuemaxExtract);
        } else {
            maxExtract = null;
        }
        ComDayCqDamCoreImplProcessTextExtractionProcessInfo obj = imp.comDayCqDamCoreImplProcessTextExtractionProcess(post, apply, delete, action, $location, propertylist, mimeTypes, maxExtract);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqDamCoreImplRenditionMakerImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuexmpPropagate = request().getQueryString("xmp.propagate");
        Boolean xmpPropagate;
        if (valuexmpPropagate != null) {
            xmpPropagate = Boolean.valueOf(valuexmpPropagate);
        } else {
            xmpPropagate = null;
        }
        String[] xmpExcludesArray = request().queryString().get("xmp.excludes");
        List<String> xmpExcludesList = OpenAPIUtils.parametersToList("multi", xmpExcludesArray);
        List<String> xmpExcludes = new ArrayList<String>();
        for (String curParam : xmpExcludesList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                xmpExcludes.add(curParam);
            }
        }
        ComDayCqDamCoreImplRenditionMakerImplInfo obj = imp.comDayCqDamCoreImplRenditionMakerImpl(post, apply, delete, action, $location, propertylist, xmpPropagate, xmpExcludes);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqDamCoreImplReportsReportExportService() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuequeryBatchSize = request().getQueryString("queryBatchSize");
        Integer queryBatchSize;
        if (valuequeryBatchSize != null) {
            queryBatchSize = Integer.parseInt(valuequeryBatchSize);
        } else {
            queryBatchSize = null;
        }
        ComDayCqDamCoreImplReportsReportExportServiceInfo obj = imp.comDayCqDamCoreImplReportsReportExportService(post, apply, delete, action, $location, propertylist, queryBatchSize);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqDamCoreImplReportsReportPurgeService() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueschedulerExpression = request().getQueryString("scheduler.expression");
        String schedulerExpression;
        if (valueschedulerExpression != null) {
            schedulerExpression = valueschedulerExpression;
        } else {
            schedulerExpression = null;
        }
        String valuemaxSavedReports = request().getQueryString("maxSavedReports");
        Integer maxSavedReports;
        if (valuemaxSavedReports != null) {
            maxSavedReports = Integer.parseInt(valuemaxSavedReports);
        } else {
            maxSavedReports = null;
        }
        String valuetimeDuration = request().getQueryString("timeDuration");
        Integer timeDuration;
        if (valuetimeDuration != null) {
            timeDuration = Integer.parseInt(valuetimeDuration);
        } else {
            timeDuration = null;
        }
        String valueenableReportPurge = request().getQueryString("enableReportPurge");
        Boolean enableReportPurge;
        if (valueenableReportPurge != null) {
            enableReportPurge = Boolean.valueOf(valueenableReportPurge);
        } else {
            enableReportPurge = null;
        }
        ComDayCqDamCoreImplReportsReportPurgeServiceInfo obj = imp.comDayCqDamCoreImplReportsReportPurgeService(post, apply, delete, action, $location, propertylist, schedulerExpression, maxSavedReports, timeDuration, enableReportPurge);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqDamCoreImplServletAssetDownloadServlet() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueenabled = request().getQueryString("enabled");
        Boolean enabled;
        if (valueenabled != null) {
            enabled = Boolean.valueOf(valueenabled);
        } else {
            enabled = null;
        }
        ComDayCqDamCoreImplServletAssetDownloadServletInfo obj = imp.comDayCqDamCoreImplServletAssetDownloadServlet(post, apply, delete, action, $location, propertylist, enabled);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqDamCoreImplServletAssetStatusServlet() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuecqDamBatchStatusMaxassets = request().getQueryString("cq.dam.batch.status.maxassets");
        Integer cqDamBatchStatusMaxassets;
        if (valuecqDamBatchStatusMaxassets != null) {
            cqDamBatchStatusMaxassets = Integer.parseInt(valuecqDamBatchStatusMaxassets);
        } else {
            cqDamBatchStatusMaxassets = null;
        }
        ComDayCqDamCoreImplServletAssetStatusServletInfo obj = imp.comDayCqDamCoreImplServletAssetStatusServlet(post, apply, delete, action, $location, propertylist, cqDamBatchStatusMaxassets);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqDamCoreImplServletAssetXMPSearchServlet() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuecqDamBatchIndesignMaxassets = request().getQueryString("cq.dam.batch.indesign.maxassets");
        Integer cqDamBatchIndesignMaxassets;
        if (valuecqDamBatchIndesignMaxassets != null) {
            cqDamBatchIndesignMaxassets = Integer.parseInt(valuecqDamBatchIndesignMaxassets);
        } else {
            cqDamBatchIndesignMaxassets = null;
        }
        ComDayCqDamCoreImplServletAssetXMPSearchServletInfo obj = imp.comDayCqDamCoreImplServletAssetXMPSearchServlet(post, apply, delete, action, $location, propertylist, cqDamBatchIndesignMaxassets);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqDamCoreImplServletBatchMetadataServlet() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] cqDamBatchMetadataAssetDefaultArray = request().queryString().get("cq.dam.batch.metadata.asset.default");
        List<String> cqDamBatchMetadataAssetDefaultList = OpenAPIUtils.parametersToList("multi", cqDamBatchMetadataAssetDefaultArray);
        List<String> cqDamBatchMetadataAssetDefault = new ArrayList<String>();
        for (String curParam : cqDamBatchMetadataAssetDefaultList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                cqDamBatchMetadataAssetDefault.add(curParam);
            }
        }
        String[] cqDamBatchMetadataCollectionDefaultArray = request().queryString().get("cq.dam.batch.metadata.collection.default");
        List<String> cqDamBatchMetadataCollectionDefaultList = OpenAPIUtils.parametersToList("multi", cqDamBatchMetadataCollectionDefaultArray);
        List<String> cqDamBatchMetadataCollectionDefault = new ArrayList<String>();
        for (String curParam : cqDamBatchMetadataCollectionDefaultList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                cqDamBatchMetadataCollectionDefault.add(curParam);
            }
        }
        String valuecqDamBatchMetadataMaxresources = request().getQueryString("cq.dam.batch.metadata.maxresources");
        Integer cqDamBatchMetadataMaxresources;
        if (valuecqDamBatchMetadataMaxresources != null) {
            cqDamBatchMetadataMaxresources = Integer.parseInt(valuecqDamBatchMetadataMaxresources);
        } else {
            cqDamBatchMetadataMaxresources = null;
        }
        ComDayCqDamCoreImplServletBatchMetadataServletInfo obj = imp.comDayCqDamCoreImplServletBatchMetadataServlet(post, apply, delete, action, $location, propertylist, cqDamBatchMetadataAssetDefault, cqDamBatchMetadataCollectionDefault, cqDamBatchMetadataMaxresources);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqDamCoreImplServletBinaryProviderServlet() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] slingServletResourceTypesArray = request().queryString().get("sling.servlet.resourceTypes");
        List<String> slingServletResourceTypesList = OpenAPIUtils.parametersToList("multi", slingServletResourceTypesArray);
        List<String> slingServletResourceTypes = new ArrayList<String>();
        for (String curParam : slingServletResourceTypesList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                slingServletResourceTypes.add(curParam);
            }
        }
        String[] slingServletMethodsArray = request().queryString().get("sling.servlet.methods");
        List<String> slingServletMethodsList = OpenAPIUtils.parametersToList("multi", slingServletMethodsArray);
        List<String> slingServletMethods = new ArrayList<String>();
        for (String curParam : slingServletMethodsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                slingServletMethods.add(curParam);
            }
        }
        String valuecqDamDrmEnable = request().getQueryString("cq.dam.drm.enable");
        Boolean cqDamDrmEnable;
        if (valuecqDamDrmEnable != null) {
            cqDamDrmEnable = Boolean.valueOf(valuecqDamDrmEnable);
        } else {
            cqDamDrmEnable = null;
        }
        ComDayCqDamCoreImplServletBinaryProviderServletInfo obj = imp.comDayCqDamCoreImplServletBinaryProviderServlet(post, apply, delete, action, $location, propertylist, slingServletResourceTypes, slingServletMethods, cqDamDrmEnable);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqDamCoreImplServletCollectionServlet() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] cqDamBatchCollectionPropertiesArray = request().queryString().get("cq.dam.batch.collection.properties");
        List<String> cqDamBatchCollectionPropertiesList = OpenAPIUtils.parametersToList("multi", cqDamBatchCollectionPropertiesArray);
        List<String> cqDamBatchCollectionProperties = new ArrayList<String>();
        for (String curParam : cqDamBatchCollectionPropertiesList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                cqDamBatchCollectionProperties.add(curParam);
            }
        }
        String valuecqDamBatchCollectionMaxcollections = request().getQueryString("cq.dam.batch.collection.maxcollections");
        Integer cqDamBatchCollectionMaxcollections;
        if (valuecqDamBatchCollectionMaxcollections != null) {
            cqDamBatchCollectionMaxcollections = Integer.parseInt(valuecqDamBatchCollectionMaxcollections);
        } else {
            cqDamBatchCollectionMaxcollections = null;
        }
        ComDayCqDamCoreImplServletCollectionServletInfo obj = imp.comDayCqDamCoreImplServletCollectionServlet(post, apply, delete, action, $location, propertylist, cqDamBatchCollectionProperties, cqDamBatchCollectionMaxcollections);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqDamCoreImplServletCollectionsServlet() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] cqDamBatchCollectionsPropertiesArray = request().queryString().get("cq.dam.batch.collections.properties");
        List<String> cqDamBatchCollectionsPropertiesList = OpenAPIUtils.parametersToList("multi", cqDamBatchCollectionsPropertiesArray);
        List<String> cqDamBatchCollectionsProperties = new ArrayList<String>();
        for (String curParam : cqDamBatchCollectionsPropertiesList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                cqDamBatchCollectionsProperties.add(curParam);
            }
        }
        String valuecqDamBatchCollectionsLimit = request().getQueryString("cq.dam.batch.collections.limit");
        Integer cqDamBatchCollectionsLimit;
        if (valuecqDamBatchCollectionsLimit != null) {
            cqDamBatchCollectionsLimit = Integer.parseInt(valuecqDamBatchCollectionsLimit);
        } else {
            cqDamBatchCollectionsLimit = null;
        }
        ComDayCqDamCoreImplServletCollectionsServletInfo obj = imp.comDayCqDamCoreImplServletCollectionsServlet(post, apply, delete, action, $location, propertylist, cqDamBatchCollectionsProperties, cqDamBatchCollectionsLimit);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqDamCoreImplServletCompanionServlet() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuemoreInfo = request().getQueryString("More Info");
        String moreInfo;
        if (valuemoreInfo != null) {
            moreInfo = valuemoreInfo;
        } else {
            moreInfo = null;
        }
        String valueslashMntSlashOverlaySlashDamSlashGuiSlashContentSlashAssetsSlashMoreinfoHtmlSlash$LeftCurlyBracketPathRightCurlyBracket = request().getQueryString("/mnt/overlay/dam/gui/content/assets/moreinfo.html/${path}");
        String slashMntSlashOverlaySlashDamSlashGuiSlashContentSlashAssetsSlashMoreinfoHtmlSlash$LeftCurlyBracketPathRightCurlyBracket;
        if (valueslashMntSlashOverlaySlashDamSlashGuiSlashContentSlashAssetsSlashMoreinfoHtmlSlash$LeftCurlyBracketPathRightCurlyBracket != null) {
            slashMntSlashOverlaySlashDamSlashGuiSlashContentSlashAssetsSlashMoreinfoHtmlSlash$LeftCurlyBracketPathRightCurlyBracket = valueslashMntSlashOverlaySlashDamSlashGuiSlashContentSlashAssetsSlashMoreinfoHtmlSlash$LeftCurlyBracketPathRightCurlyBracket;
        } else {
            slashMntSlashOverlaySlashDamSlashGuiSlashContentSlashAssetsSlashMoreinfoHtmlSlash$LeftCurlyBracketPathRightCurlyBracket = null;
        }
        ComDayCqDamCoreImplServletCompanionServletInfo obj = imp.comDayCqDamCoreImplServletCompanionServlet(post, apply, delete, action, $location, propertylist, moreInfo, slashMntSlashOverlaySlashDamSlashGuiSlashContentSlashAssetsSlashMoreinfoHtmlSlash$LeftCurlyBracketPathRightCurlyBracket);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqDamCoreImplServletCreateAssetServlet() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuedetectDuplicate = request().getQueryString("detect_duplicate");
        Boolean detectDuplicate;
        if (valuedetectDuplicate != null) {
            detectDuplicate = Boolean.valueOf(valuedetectDuplicate);
        } else {
            detectDuplicate = null;
        }
        ComDayCqDamCoreImplServletCreateAssetServletInfo obj = imp.comDayCqDamCoreImplServletCreateAssetServlet(post, apply, delete, action, $location, propertylist, detectDuplicate);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqDamCoreImplServletDamContentDispositionFilter() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] cqMimeTypeBlacklistArray = request().queryString().get("cq.mime.type.blacklist");
        List<String> cqMimeTypeBlacklistList = OpenAPIUtils.parametersToList("multi", cqMimeTypeBlacklistArray);
        List<String> cqMimeTypeBlacklist = new ArrayList<String>();
        for (String curParam : cqMimeTypeBlacklistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                cqMimeTypeBlacklist.add(curParam);
            }
        }
        String valuecqDamEmptyMime = request().getQueryString("cq.dam.empty.mime");
        Boolean cqDamEmptyMime;
        if (valuecqDamEmptyMime != null) {
            cqDamEmptyMime = Boolean.valueOf(valuecqDamEmptyMime);
        } else {
            cqDamEmptyMime = null;
        }
        ComDayCqDamCoreImplServletDamContentDispositionFilterInfo obj = imp.comDayCqDamCoreImplServletDamContentDispositionFilter(post, apply, delete, action, $location, propertylist, cqMimeTypeBlacklist, cqDamEmptyMime);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqDamCoreImplServletGuidLookupFilter() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuecqDamCoreGuidlookupfilterEnabled = request().getQueryString("cq.dam.core.guidlookupfilter.enabled");
        Boolean cqDamCoreGuidlookupfilterEnabled;
        if (valuecqDamCoreGuidlookupfilterEnabled != null) {
            cqDamCoreGuidlookupfilterEnabled = Boolean.valueOf(valuecqDamCoreGuidlookupfilterEnabled);
        } else {
            cqDamCoreGuidlookupfilterEnabled = null;
        }
        ComDayCqDamCoreImplServletGuidLookupFilterInfo obj = imp.comDayCqDamCoreImplServletGuidLookupFilter(post, apply, delete, action, $location, propertylist, cqDamCoreGuidlookupfilterEnabled);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqDamCoreImplServletHealthCheckServlet() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuecqDamSyncWorkflowId = request().getQueryString("cq.dam.sync.workflow.id");
        String cqDamSyncWorkflowId;
        if (valuecqDamSyncWorkflowId != null) {
            cqDamSyncWorkflowId = valuecqDamSyncWorkflowId;
        } else {
            cqDamSyncWorkflowId = null;
        }
        String[] cqDamSyncFolderTypesArray = request().queryString().get("cq.dam.sync.folder.types");
        List<String> cqDamSyncFolderTypesList = OpenAPIUtils.parametersToList("multi", cqDamSyncFolderTypesArray);
        List<String> cqDamSyncFolderTypes = new ArrayList<String>();
        for (String curParam : cqDamSyncFolderTypesList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                cqDamSyncFolderTypes.add(curParam);
            }
        }
        ComDayCqDamCoreImplServletHealthCheckServletInfo obj = imp.comDayCqDamCoreImplServletHealthCheckServlet(post, apply, delete, action, $location, propertylist, cqDamSyncWorkflowId, cqDamSyncFolderTypes);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqDamCoreImplServletMetadataGetServlet() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueslingServletResourceTypes = request().getQueryString("sling.servlet.resourceTypes");
        String slingServletResourceTypes;
        if (valueslingServletResourceTypes != null) {
            slingServletResourceTypes = valueslingServletResourceTypes;
        } else {
            slingServletResourceTypes = null;
        }
        String valueslingServletMethods = request().getQueryString("sling.servlet.methods");
        String slingServletMethods;
        if (valueslingServletMethods != null) {
            slingServletMethods = valueslingServletMethods;
        } else {
            slingServletMethods = null;
        }
        String valueslingServletExtensions = request().getQueryString("sling.servlet.extensions");
        String slingServletExtensions;
        if (valueslingServletExtensions != null) {
            slingServletExtensions = valueslingServletExtensions;
        } else {
            slingServletExtensions = null;
        }
        String valueslingServletSelectors = request().getQueryString("sling.servlet.selectors");
        String slingServletSelectors;
        if (valueslingServletSelectors != null) {
            slingServletSelectors = valueslingServletSelectors;
        } else {
            slingServletSelectors = null;
        }
        ComDayCqDamCoreImplServletMetadataGetServletInfo obj = imp.comDayCqDamCoreImplServletMetadataGetServlet(post, apply, delete, action, $location, propertylist, slingServletResourceTypes, slingServletMethods, slingServletExtensions, slingServletSelectors);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqDamCoreImplServletMultipleLicenseAcceptServlet() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuecqDamDrmEnable = request().getQueryString("cq.dam.drm.enable");
        Boolean cqDamDrmEnable;
        if (valuecqDamDrmEnable != null) {
            cqDamDrmEnable = Boolean.valueOf(valuecqDamDrmEnable);
        } else {
            cqDamDrmEnable = null;
        }
        ComDayCqDamCoreImplServletMultipleLicenseAcceptServletInfo obj = imp.comDayCqDamCoreImplServletMultipleLicenseAcceptServlet(post, apply, delete, action, $location, propertylist, cqDamDrmEnable);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqDamCoreImplServletResourceCollectionServlet() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] slingServletResourceTypesArray = request().queryString().get("sling.servlet.resourceTypes");
        List<String> slingServletResourceTypesList = OpenAPIUtils.parametersToList("multi", slingServletResourceTypesArray);
        List<String> slingServletResourceTypes = new ArrayList<String>();
        for (String curParam : slingServletResourceTypesList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                slingServletResourceTypes.add(curParam);
            }
        }
        String valueslingServletMethods = request().getQueryString("sling.servlet.methods");
        String slingServletMethods;
        if (valueslingServletMethods != null) {
            slingServletMethods = valueslingServletMethods;
        } else {
            slingServletMethods = null;
        }
        String valueslingServletSelectors = request().getQueryString("sling.servlet.selectors");
        String slingServletSelectors;
        if (valueslingServletSelectors != null) {
            slingServletSelectors = valueslingServletSelectors;
        } else {
            slingServletSelectors = null;
        }
        String valuedownloadConfig = request().getQueryString("download.config");
        String downloadConfig;
        if (valuedownloadConfig != null) {
            downloadConfig = valuedownloadConfig;
        } else {
            downloadConfig = null;
        }
        String valueviewSelector = request().getQueryString("view.selector");
        String viewSelector;
        if (valueviewSelector != null) {
            viewSelector = valueviewSelector;
        } else {
            viewSelector = null;
        }
        String valuesendEmail = request().getQueryString("send_email");
        Boolean sendEmail;
        if (valuesendEmail != null) {
            sendEmail = Boolean.valueOf(valuesendEmail);
        } else {
            sendEmail = null;
        }
        ComDayCqDamCoreImplServletResourceCollectionServletInfo obj = imp.comDayCqDamCoreImplServletResourceCollectionServlet(post, apply, delete, action, $location, propertylist, slingServletResourceTypes, slingServletMethods, slingServletSelectors, downloadConfig, viewSelector, sendEmail);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuecreatePreviewEnabled = request().getQueryString("createPreviewEnabled");
        Boolean createPreviewEnabled;
        if (valuecreatePreviewEnabled != null) {
            createPreviewEnabled = Boolean.valueOf(valuecreatePreviewEnabled);
        } else {
            createPreviewEnabled = null;
        }
        String valueupdatePreviewEnabled = request().getQueryString("updatePreviewEnabled");
        Boolean updatePreviewEnabled;
        if (valueupdatePreviewEnabled != null) {
            updatePreviewEnabled = Boolean.valueOf(valueupdatePreviewEnabled);
        } else {
            updatePreviewEnabled = null;
        }
        String valuequeueSize = request().getQueryString("queueSize");
        Integer queueSize;
        if (valuequeueSize != null) {
            queueSize = Integer.parseInt(valuequeueSize);
        } else {
            queueSize = null;
        }
        String valuefolderPreviewRenditionRegex = request().getQueryString("folderPreviewRenditionRegex");
        String folderPreviewRenditionRegex;
        if (valuefolderPreviewRenditionRegex != null) {
            folderPreviewRenditionRegex = valuefolderPreviewRenditionRegex;
        } else {
            folderPreviewRenditionRegex = null;
        }
        ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplInfo obj = imp.comDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImpl(post, apply, delete, action, $location, propertylist, createPreviewEnabled, updatePreviewEnabled, queueSize, folderPreviewRenditionRegex);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqDamCoreImplUnzipUnzipConfig() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuecqDamConfigUnzipMaxuncompressedsize = request().getQueryString("cq.dam.config.unzip.maxuncompressedsize");
        Integer cqDamConfigUnzipMaxuncompressedsize;
        if (valuecqDamConfigUnzipMaxuncompressedsize != null) {
            cqDamConfigUnzipMaxuncompressedsize = Integer.parseInt(valuecqDamConfigUnzipMaxuncompressedsize);
        } else {
            cqDamConfigUnzipMaxuncompressedsize = null;
        }
        String valuecqDamConfigUnzipEncoding = request().getQueryString("cq.dam.config.unzip.encoding");
        String cqDamConfigUnzipEncoding;
        if (valuecqDamConfigUnzipEncoding != null) {
            cqDamConfigUnzipEncoding = valuecqDamConfigUnzipEncoding;
        } else {
            cqDamConfigUnzipEncoding = null;
        }
        ComDayCqDamCoreImplUnzipUnzipConfigInfo obj = imp.comDayCqDamCoreImplUnzipUnzipConfig(post, apply, delete, action, $location, propertylist, cqDamConfigUnzipMaxuncompressedsize, cqDamConfigUnzipEncoding);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqDamCoreProcessExifToolExtractMetadataProcess() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueprocessLabel = request().getQueryString("process.label");
        String processLabel;
        if (valueprocessLabel != null) {
            processLabel = valueprocessLabel;
        } else {
            processLabel = null;
        }
        String valuecqDamEnableSha1 = request().getQueryString("cq.dam.enable.sha1");
        Boolean cqDamEnableSha1;
        if (valuecqDamEnableSha1 != null) {
            cqDamEnableSha1 = Boolean.valueOf(valuecqDamEnableSha1);
        } else {
            cqDamEnableSha1 = null;
        }
        ComDayCqDamCoreProcessExifToolExtractMetadataProcessInfo obj = imp.comDayCqDamCoreProcessExifToolExtractMetadataProcess(post, apply, delete, action, $location, propertylist, processLabel, cqDamEnableSha1);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqDamCoreProcessExtractMetadataProcess() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueprocessLabel = request().getQueryString("process.label");
        String processLabel;
        if (valueprocessLabel != null) {
            processLabel = valueprocessLabel;
        } else {
            processLabel = null;
        }
        String valuecqDamEnableSha1 = request().getQueryString("cq.dam.enable.sha1");
        Boolean cqDamEnableSha1;
        if (valuecqDamEnableSha1 != null) {
            cqDamEnableSha1 = Boolean.valueOf(valuecqDamEnableSha1);
        } else {
            cqDamEnableSha1 = null;
        }
        ComDayCqDamCoreProcessExtractMetadataProcessInfo obj = imp.comDayCqDamCoreProcessExtractMetadataProcess(post, apply, delete, action, $location, propertylist, processLabel, cqDamEnableSha1);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqDamCoreProcessMetadataProcessorProcess() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueprocessLabel = request().getQueryString("process.label");
        String processLabel;
        if (valueprocessLabel != null) {
            processLabel = valueprocessLabel;
        } else {
            processLabel = null;
        }
        String valuecqDamEnableSha1 = request().getQueryString("cq.dam.enable.sha1");
        Boolean cqDamEnableSha1;
        if (valuecqDamEnableSha1 != null) {
            cqDamEnableSha1 = Boolean.valueOf(valuecqDamEnableSha1);
        } else {
            cqDamEnableSha1 = null;
        }
        String[] cqDamMetadataXssprotectedPropertiesArray = request().queryString().get("cq.dam.metadata.xssprotected.properties");
        List<String> cqDamMetadataXssprotectedPropertiesList = OpenAPIUtils.parametersToList("multi", cqDamMetadataXssprotectedPropertiesArray);
        List<String> cqDamMetadataXssprotectedProperties = new ArrayList<String>();
        for (String curParam : cqDamMetadataXssprotectedPropertiesList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                cqDamMetadataXssprotectedProperties.add(curParam);
            }
        }
        ComDayCqDamCoreProcessMetadataProcessorProcessInfo obj = imp.comDayCqDamCoreProcessMetadataProcessorProcess(post, apply, delete, action, $location, propertylist, processLabel, cqDamEnableSha1, cqDamMetadataXssprotectedProperties);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqDamHandlerFfmpegLocatorImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] executableSearchpathArray = request().queryString().get("executable.searchpath");
        List<String> executableSearchpathList = OpenAPIUtils.parametersToList("multi", executableSearchpathArray);
        List<String> executableSearchpath = new ArrayList<String>();
        for (String curParam : executableSearchpathList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                executableSearchpath.add(curParam);
            }
        }
        ComDayCqDamHandlerFfmpegLocatorImplInfo obj = imp.comDayCqDamHandlerFfmpegLocatorImpl(post, apply, delete, action, $location, propertylist, executableSearchpath);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueeventFilter = request().getQueryString("event.filter");
        String eventFilter;
        if (valueeventFilter != null) {
            eventFilter = valueeventFilter;
        } else {
            eventFilter = null;
        }
        String[] fontmgrSystemFontDirArray = request().queryString().get("fontmgr.system.font.dir");
        List<String> fontmgrSystemFontDirList = OpenAPIUtils.parametersToList("multi", fontmgrSystemFontDirArray);
        List<String> fontmgrSystemFontDir = new ArrayList<String>();
        for (String curParam : fontmgrSystemFontDirList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                fontmgrSystemFontDir.add(curParam);
            }
        }
        String valuefontmgrAdobeFontDir = request().getQueryString("fontmgr.adobe.font.dir");
        String fontmgrAdobeFontDir;
        if (valuefontmgrAdobeFontDir != null) {
            fontmgrAdobeFontDir = valuefontmgrAdobeFontDir;
        } else {
            fontmgrAdobeFontDir = null;
        }
        String valuefontmgrCustomerFontDir = request().getQueryString("fontmgr.customer.font.dir");
        String fontmgrCustomerFontDir;
        if (valuefontmgrCustomerFontDir != null) {
            fontmgrCustomerFontDir = valuefontmgrCustomerFontDir;
        } else {
            fontmgrCustomerFontDir = null;
        }
        ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplInfo obj = imp.comDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImpl(post, apply, delete, action, $location, propertylist, eventFilter, fontmgrSystemFontDir, fontmgrAdobeFontDir, fontmgrCustomerFontDir);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqDamHandlerStandardPdfPdfHandler() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuerasterAnnotation = request().getQueryString("raster.annotation");
        Boolean rasterAnnotation;
        if (valuerasterAnnotation != null) {
            rasterAnnotation = Boolean.valueOf(valuerasterAnnotation);
        } else {
            rasterAnnotation = null;
        }
        ComDayCqDamHandlerStandardPdfPdfHandlerInfo obj = imp.comDayCqDamHandlerStandardPdfPdfHandler(post, apply, delete, action, $location, propertylist, rasterAnnotation);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqDamHandlerStandardPsPostScriptHandler() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuerasterAnnotation = request().getQueryString("raster.annotation");
        Boolean rasterAnnotation;
        if (valuerasterAnnotation != null) {
            rasterAnnotation = Boolean.valueOf(valuerasterAnnotation);
        } else {
            rasterAnnotation = null;
        }
        ComDayCqDamHandlerStandardPsPostScriptHandlerInfo obj = imp.comDayCqDamHandlerStandardPsPostScriptHandler(post, apply, delete, action, $location, propertylist, rasterAnnotation);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqDamHandlerStandardPsdPsdHandler() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuelargeFileThreshold = request().getQueryString("large_file_threshold");
        Integer largeFileThreshold;
        if (valuelargeFileThreshold != null) {
            largeFileThreshold = Integer.parseInt(valuelargeFileThreshold);
        } else {
            largeFileThreshold = null;
        }
        ComDayCqDamHandlerStandardPsdPsdHandlerInfo obj = imp.comDayCqDamHandlerStandardPsdPsdHandler(post, apply, delete, action, $location, propertylist, largeFileThreshold);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqDamIdsImplIDSJobProcessor() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueenableMultisession = request().getQueryString("enable.multisession");
        Boolean enableMultisession;
        if (valueenableMultisession != null) {
            enableMultisession = Boolean.valueOf(valueenableMultisession);
        } else {
            enableMultisession = null;
        }
        String valueidsCcEnable = request().getQueryString("ids.cc.enable");
        Boolean idsCcEnable;
        if (valueidsCcEnable != null) {
            idsCcEnable = Boolean.valueOf(valueidsCcEnable);
        } else {
            idsCcEnable = null;
        }
        String valueenableRetry = request().getQueryString("enable.retry");
        Boolean enableRetry;
        if (valueenableRetry != null) {
            enableRetry = Boolean.valueOf(valueenableRetry);
        } else {
            enableRetry = null;
        }
        String valueenableRetryScripterror = request().getQueryString("enable.retry.scripterror");
        Boolean enableRetryScripterror;
        if (valueenableRetryScripterror != null) {
            enableRetryScripterror = Boolean.valueOf(valueenableRetryScripterror);
        } else {
            enableRetryScripterror = null;
        }
        String valueexternalizerDomainCqhost = request().getQueryString("externalizer.domain.cqhost");
        String externalizerDomainCqhost;
        if (valueexternalizerDomainCqhost != null) {
            externalizerDomainCqhost = valueexternalizerDomainCqhost;
        } else {
            externalizerDomainCqhost = null;
        }
        String valueexternalizerDomainHttp = request().getQueryString("externalizer.domain.http");
        String externalizerDomainHttp;
        if (valueexternalizerDomainHttp != null) {
            externalizerDomainHttp = valueexternalizerDomainHttp;
        } else {
            externalizerDomainHttp = null;
        }
        ComDayCqDamIdsImplIDSJobProcessorInfo obj = imp.comDayCqDamIdsImplIDSJobProcessor(post, apply, delete, action, $location, propertylist, enableMultisession, idsCcEnable, enableRetry, enableRetryScripterror, externalizerDomainCqhost, externalizerDomainHttp);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqDamIdsImplIDSPoolManagerImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuemaxErrorsToBlacklist = request().getQueryString("max.errors.to.blacklist");
        Integer maxErrorsToBlacklist;
        if (valuemaxErrorsToBlacklist != null) {
            maxErrorsToBlacklist = Integer.parseInt(valuemaxErrorsToBlacklist);
        } else {
            maxErrorsToBlacklist = null;
        }
        String valueretryIntervalToWhitelist = request().getQueryString("retry.interval.to.whitelist");
        Integer retryIntervalToWhitelist;
        if (valueretryIntervalToWhitelist != null) {
            retryIntervalToWhitelist = Integer.parseInt(valueretryIntervalToWhitelist);
        } else {
            retryIntervalToWhitelist = null;
        }
        String valueconnectTimeout = request().getQueryString("connect.timeout");
        Integer connectTimeout;
        if (valueconnectTimeout != null) {
            connectTimeout = Integer.parseInt(valueconnectTimeout);
        } else {
            connectTimeout = null;
        }
        String valuesocketTimeout = request().getQueryString("socket.timeout");
        Integer socketTimeout;
        if (valuesocketTimeout != null) {
            socketTimeout = Integer.parseInt(valuesocketTimeout);
        } else {
            socketTimeout = null;
        }
        String valueprocessLabel = request().getQueryString("process.label");
        String processLabel;
        if (valueprocessLabel != null) {
            processLabel = valueprocessLabel;
        } else {
            processLabel = null;
        }
        String valueconnectionUseMax = request().getQueryString("connection.use.max");
        Integer connectionUseMax;
        if (valueconnectionUseMax != null) {
            connectionUseMax = Integer.parseInt(valueconnectionUseMax);
        } else {
            connectionUseMax = null;
        }
        ComDayCqDamIdsImplIDSPoolManagerImplInfo obj = imp.comDayCqDamIdsImplIDSPoolManagerImpl(post, apply, delete, action, $location, propertylist, maxErrorsToBlacklist, retryIntervalToWhitelist, connectTimeout, socketTimeout, processLabel, connectionUseMax);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqDamInddImplHandlerIndesignXMPHandler() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueprocessLabel = request().getQueryString("process.label");
        String processLabel;
        if (valueprocessLabel != null) {
            processLabel = valueprocessLabel;
        } else {
            processLabel = null;
        }
        String valueextractPages = request().getQueryString("extract.pages");
        Boolean extractPages;
        if (valueextractPages != null) {
            extractPages = Boolean.valueOf(valueextractPages);
        } else {
            extractPages = null;
        }
        ComDayCqDamInddImplHandlerIndesignXMPHandlerInfo obj = imp.comDayCqDamInddImplHandlerIndesignXMPHandler(post, apply, delete, action, $location, propertylist, processLabel, extractPages);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqDamInddImplServletSnippetCreationServlet() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuesnippetcreationMaxcollections = request().getQueryString("snippetcreation.maxcollections");
        Integer snippetcreationMaxcollections;
        if (valuesnippetcreationMaxcollections != null) {
            snippetcreationMaxcollections = Integer.parseInt(valuesnippetcreationMaxcollections);
        } else {
            snippetcreationMaxcollections = null;
        }
        ComDayCqDamInddImplServletSnippetCreationServletInfo obj = imp.comDayCqDamInddImplServletSnippetCreationServlet(post, apply, delete, action, $location, propertylist, snippetcreationMaxcollections);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqDamInddProcessINDDMediaExtractProcess() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueprocessLabel = request().getQueryString("process.label");
        String processLabel;
        if (valueprocessLabel != null) {
            processLabel = valueprocessLabel;
        } else {
            processLabel = null;
        }
        String valuecqDamInddPagesRegex = request().getQueryString("cq.dam.indd.pages.regex");
        String cqDamInddPagesRegex;
        if (valuecqDamInddPagesRegex != null) {
            cqDamInddPagesRegex = valuecqDamInddPagesRegex;
        } else {
            cqDamInddPagesRegex = null;
        }
        String valueidsJobDecoupled = request().getQueryString("ids.job.decoupled");
        Boolean idsJobDecoupled;
        if (valueidsJobDecoupled != null) {
            idsJobDecoupled = Boolean.valueOf(valueidsJobDecoupled);
        } else {
            idsJobDecoupled = null;
        }
        String valueidsJobWorkflowModel = request().getQueryString("ids.job.workflow.model");
        String idsJobWorkflowModel;
        if (valueidsJobWorkflowModel != null) {
            idsJobWorkflowModel = valueidsJobWorkflowModel;
        } else {
            idsJobWorkflowModel = null;
        }
        ComDayCqDamInddProcessINDDMediaExtractProcessInfo obj = imp.comDayCqDamInddProcessINDDMediaExtractProcess(post, apply, delete, action, $location, propertylist, processLabel, cqDamInddPagesRegex, idsJobDecoupled, idsJobWorkflowModel);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqDamPerformanceInternalAssetPerformanceDataHandlerImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuebatchCommitSize = request().getQueryString("batch.commit.size");
        Integer batchCommitSize;
        if (valuebatchCommitSize != null) {
            batchCommitSize = Integer.parseInt(valuebatchCommitSize);
        } else {
            batchCommitSize = null;
        }
        ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplInfo obj = imp.comDayCqDamPerformanceInternalAssetPerformanceDataHandlerImpl(post, apply, delete, action, $location, propertylist, batchCommitSize);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqDamPerformanceInternalAssetPerformanceReportSyncJob() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueschedulerExpression = request().getQueryString("scheduler.expression");
        String schedulerExpression;
        if (valueschedulerExpression != null) {
            schedulerExpression = valueschedulerExpression;
        } else {
            schedulerExpression = null;
        }
        ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobInfo obj = imp.comDayCqDamPerformanceInternalAssetPerformanceReportSyncJob(post, apply, delete, action, $location, propertylist, schedulerExpression);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqDamPimImplSourcingUploadProcessProductAssetsUploadPro() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuedeleteZipFile = request().getQueryString("delete.zip.file");
        Boolean deleteZipFile;
        if (valuedeleteZipFile != null) {
            deleteZipFile = Boolean.valueOf(valuedeleteZipFile);
        } else {
            deleteZipFile = null;
        }
        ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProInfo obj = imp.comDayCqDamPimImplSourcingUploadProcessProductAssetsUploadPro(post, apply, delete, action, $location, propertylist, deleteZipFile);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEven() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuecqDamS7damDynamicmediaconfigeventlistenerEnabled = request().getQueryString("cq.dam.s7dam.dynamicmediaconfigeventlistener.enabled");
        Boolean cqDamS7damDynamicmediaconfigeventlistenerEnabled;
        if (valuecqDamS7damDynamicmediaconfigeventlistenerEnabled != null) {
            cqDamS7damDynamicmediaconfigeventlistenerEnabled = Boolean.valueOf(valuecqDamS7damDynamicmediaconfigeventlistenerEnabled);
        } else {
            cqDamS7damDynamicmediaconfigeventlistenerEnabled = null;
        }
        ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenInfo obj = imp.comDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEven(post, apply, delete, action, $location, propertylist, cqDamS7damDynamicmediaconfigeventlistenerEnabled);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunner() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueschedulerExpression = request().getQueryString("scheduler.expression");
        String schedulerExpression;
        if (valueschedulerExpression != null) {
            schedulerExpression = valueschedulerExpression;
        } else {
            schedulerExpression = null;
        }
        String valueschedulerConcurrent = request().getQueryString("scheduler.concurrent");
        Boolean schedulerConcurrent;
        if (valueschedulerConcurrent != null) {
            schedulerConcurrent = Boolean.valueOf(valueschedulerConcurrent);
        } else {
            schedulerConcurrent = null;
        }
        ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerInfo obj = imp.comDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunner(post, apply, delete, action, $location, propertylist, schedulerExpression, schedulerConcurrent);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqDamS7damCommonPostServletsSetCreateHandler() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueslingPostOperation = request().getQueryString("sling.post.operation");
        String slingPostOperation;
        if (valueslingPostOperation != null) {
            slingPostOperation = valueslingPostOperation;
        } else {
            slingPostOperation = null;
        }
        String valueslingServletMethods = request().getQueryString("sling.servlet.methods");
        String slingServletMethods;
        if (valueslingServletMethods != null) {
            slingServletMethods = valueslingServletMethods;
        } else {
            slingServletMethods = null;
        }
        ComDayCqDamS7damCommonPostServletsSetCreateHandlerInfo obj = imp.comDayCqDamS7damCommonPostServletsSetCreateHandler(post, apply, delete, action, $location, propertylist, slingPostOperation, slingServletMethods);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqDamS7damCommonPostServletsSetModifyHandler() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueslingPostOperation = request().getQueryString("sling.post.operation");
        String slingPostOperation;
        if (valueslingPostOperation != null) {
            slingPostOperation = valueslingPostOperation;
        } else {
            slingPostOperation = null;
        }
        String valueslingServletMethods = request().getQueryString("sling.servlet.methods");
        String slingServletMethods;
        if (valueslingServletMethods != null) {
            slingServletMethods = valueslingServletMethods;
        } else {
            slingServletMethods = null;
        }
        ComDayCqDamS7damCommonPostServletsSetModifyHandlerInfo obj = imp.comDayCqDamS7damCommonPostServletsSetModifyHandler(post, apply, delete, action, $location, propertylist, slingPostOperation, slingServletMethods);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqDamS7damCommonProcessVideoThumbnailDownloadProcess() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueprocessLabel = request().getQueryString("process.label");
        String processLabel;
        if (valueprocessLabel != null) {
            processLabel = valueprocessLabel;
        } else {
            processLabel = null;
        }
        ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessInfo obj = imp.comDayCqDamS7damCommonProcessVideoThumbnailDownloadProcess(post, apply, delete, action, $location, propertylist, processLabel);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqDamS7damCommonS7damDamChangeEventListener() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuecqDamS7damDamchangeeventlistenerEnabled = request().getQueryString("cq.dam.s7dam.damchangeeventlistener.enabled");
        Boolean cqDamS7damDamchangeeventlistenerEnabled;
        if (valuecqDamS7damDamchangeeventlistenerEnabled != null) {
            cqDamS7damDamchangeeventlistenerEnabled = Boolean.valueOf(valuecqDamS7damDamchangeeventlistenerEnabled);
        } else {
            cqDamS7damDamchangeeventlistenerEnabled = null;
        }
        ComDayCqDamS7damCommonS7damDamChangeEventListenerInfo obj = imp.comDayCqDamS7damCommonS7damDamChangeEventListener(post, apply, delete, action, $location, propertylist, cqDamS7damDamchangeeventlistenerEnabled);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqDamS7damCommonServletsS7damProductInfoServlet() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueslingServletPaths = request().getQueryString("sling.servlet.paths");
        String slingServletPaths;
        if (valueslingServletPaths != null) {
            slingServletPaths = valueslingServletPaths;
        } else {
            slingServletPaths = null;
        }
        String valueslingServletMethods = request().getQueryString("sling.servlet.methods");
        String slingServletMethods;
        if (valueslingServletMethods != null) {
            slingServletMethods = valueslingServletMethods;
        } else {
            slingServletMethods = null;
        }
        ComDayCqDamS7damCommonServletsS7damProductInfoServletInfo obj = imp.comDayCqDamS7damCommonServletsS7damProductInfoServlet(post, apply, delete, action, $location, propertylist, slingServletPaths, slingServletMethods);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqDamS7damCommonVideoImplVideoProxyClientServiceImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuecqDamS7damVideoproxyclientserviceMultipartuploadMinsizeName = request().getQueryString("cq.dam.s7dam.videoproxyclientservice.multipartupload.minsize.name");
        Integer cqDamS7damVideoproxyclientserviceMultipartuploadMinsizeName;
        if (valuecqDamS7damVideoproxyclientserviceMultipartuploadMinsizeName != null) {
            cqDamS7damVideoproxyclientserviceMultipartuploadMinsizeName = Integer.parseInt(valuecqDamS7damVideoproxyclientserviceMultipartuploadMinsizeName);
        } else {
            cqDamS7damVideoproxyclientserviceMultipartuploadMinsizeName = null;
        }
        String valuecqDamS7damVideoproxyclientserviceMultipartuploadPartsizeName = request().getQueryString("cq.dam.s7dam.videoproxyclientservice.multipartupload.partsize.name");
        Integer cqDamS7damVideoproxyclientserviceMultipartuploadPartsizeName;
        if (valuecqDamS7damVideoproxyclientserviceMultipartuploadPartsizeName != null) {
            cqDamS7damVideoproxyclientserviceMultipartuploadPartsizeName = Integer.parseInt(valuecqDamS7damVideoproxyclientserviceMultipartuploadPartsizeName);
        } else {
            cqDamS7damVideoproxyclientserviceMultipartuploadPartsizeName = null;
        }
        String valuecqDamS7damVideoproxyclientserviceMultipartuploadNumthreadName = request().getQueryString("cq.dam.s7dam.videoproxyclientservice.multipartupload.numthread.name");
        Integer cqDamS7damVideoproxyclientserviceMultipartuploadNumthreadName;
        if (valuecqDamS7damVideoproxyclientserviceMultipartuploadNumthreadName != null) {
            cqDamS7damVideoproxyclientserviceMultipartuploadNumthreadName = Integer.parseInt(valuecqDamS7damVideoproxyclientserviceMultipartuploadNumthreadName);
        } else {
            cqDamS7damVideoproxyclientserviceMultipartuploadNumthreadName = null;
        }
        String valuecqDamS7damVideoproxyclientserviceHttpReadtimeoutName = request().getQueryString("cq.dam.s7dam.videoproxyclientservice.http.readtimeout.name");
        Integer cqDamS7damVideoproxyclientserviceHttpReadtimeoutName;
        if (valuecqDamS7damVideoproxyclientserviceHttpReadtimeoutName != null) {
            cqDamS7damVideoproxyclientserviceHttpReadtimeoutName = Integer.parseInt(valuecqDamS7damVideoproxyclientserviceHttpReadtimeoutName);
        } else {
            cqDamS7damVideoproxyclientserviceHttpReadtimeoutName = null;
        }
        String valuecqDamS7damVideoproxyclientserviceHttpConnectiontimeoutName = request().getQueryString("cq.dam.s7dam.videoproxyclientservice.http.connectiontimeout.name");
        Integer cqDamS7damVideoproxyclientserviceHttpConnectiontimeoutName;
        if (valuecqDamS7damVideoproxyclientserviceHttpConnectiontimeoutName != null) {
            cqDamS7damVideoproxyclientserviceHttpConnectiontimeoutName = Integer.parseInt(valuecqDamS7damVideoproxyclientserviceHttpConnectiontimeoutName);
        } else {
            cqDamS7damVideoproxyclientserviceHttpConnectiontimeoutName = null;
        }
        String valuecqDamS7damVideoproxyclientserviceHttpMaxretrycountName = request().getQueryString("cq.dam.s7dam.videoproxyclientservice.http.maxretrycount.name");
        Integer cqDamS7damVideoproxyclientserviceHttpMaxretrycountName;
        if (valuecqDamS7damVideoproxyclientserviceHttpMaxretrycountName != null) {
            cqDamS7damVideoproxyclientserviceHttpMaxretrycountName = Integer.parseInt(valuecqDamS7damVideoproxyclientserviceHttpMaxretrycountName);
        } else {
            cqDamS7damVideoproxyclientserviceHttpMaxretrycountName = null;
        }
        String valuecqDamS7damVideoproxyclientserviceUploadprogressIntervalName = request().getQueryString("cq.dam.s7dam.videoproxyclientservice.uploadprogress.interval.name");
        Integer cqDamS7damVideoproxyclientserviceUploadprogressIntervalName;
        if (valuecqDamS7damVideoproxyclientserviceUploadprogressIntervalName != null) {
            cqDamS7damVideoproxyclientserviceUploadprogressIntervalName = Integer.parseInt(valuecqDamS7damVideoproxyclientserviceUploadprogressIntervalName);
        } else {
            cqDamS7damVideoproxyclientserviceUploadprogressIntervalName = null;
        }
        ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplInfo obj = imp.comDayCqDamS7damCommonVideoImplVideoProxyClientServiceImpl(post, apply, delete, action, $location, propertylist, cqDamS7damVideoproxyclientserviceMultipartuploadMinsizeName, cqDamS7damVideoproxyclientserviceMultipartuploadPartsizeName, cqDamS7damVideoproxyclientserviceMultipartuploadNumthreadName, cqDamS7damVideoproxyclientserviceHttpReadtimeoutName, cqDamS7damVideoproxyclientserviceHttpConnectiontimeoutName, cqDamS7damVideoproxyclientserviceHttpMaxretrycountName, cqDamS7damVideoproxyclientserviceUploadprogressIntervalName);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqDamScene7ImplScene7APIClientImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuecqDamScene7ApiclientRecordsperpageNofilterName = request().getQueryString("cq.dam.scene7.apiclient.recordsperpage.nofilter.name");
        Integer cqDamScene7ApiclientRecordsperpageNofilterName;
        if (valuecqDamScene7ApiclientRecordsperpageNofilterName != null) {
            cqDamScene7ApiclientRecordsperpageNofilterName = Integer.parseInt(valuecqDamScene7ApiclientRecordsperpageNofilterName);
        } else {
            cqDamScene7ApiclientRecordsperpageNofilterName = null;
        }
        String valuecqDamScene7ApiclientRecordsperpageWithfilterName = request().getQueryString("cq.dam.scene7.apiclient.recordsperpage.withfilter.name");
        Integer cqDamScene7ApiclientRecordsperpageWithfilterName;
        if (valuecqDamScene7ApiclientRecordsperpageWithfilterName != null) {
            cqDamScene7ApiclientRecordsperpageWithfilterName = Integer.parseInt(valuecqDamScene7ApiclientRecordsperpageWithfilterName);
        } else {
            cqDamScene7ApiclientRecordsperpageWithfilterName = null;
        }
        ComDayCqDamScene7ImplScene7APIClientImplInfo obj = imp.comDayCqDamScene7ImplScene7APIClientImpl(post, apply, delete, action, $location, propertylist, cqDamScene7ApiclientRecordsperpageNofilterName, cqDamScene7ApiclientRecordsperpageWithfilterName);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqDamScene7ImplScene7AssetMimeTypeServiceImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] cqDamScene7AssetmimetypeserviceMappingArray = request().queryString().get("cq.dam.scene7.assetmimetypeservice.mapping");
        List<String> cqDamScene7AssetmimetypeserviceMappingList = OpenAPIUtils.parametersToList("multi", cqDamScene7AssetmimetypeserviceMappingArray);
        List<String> cqDamScene7AssetmimetypeserviceMapping = new ArrayList<String>();
        for (String curParam : cqDamScene7AssetmimetypeserviceMappingList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                cqDamScene7AssetmimetypeserviceMapping.add(curParam);
            }
        }
        ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplInfo obj = imp.comDayCqDamScene7ImplScene7AssetMimeTypeServiceImpl(post, apply, delete, action, $location, propertylist, cqDamScene7AssetmimetypeserviceMapping);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqDamScene7ImplScene7ConfigurationEventListener() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuecqDamScene7ConfigurationeventlistenerEnabled = request().getQueryString("cq.dam.scene7.configurationeventlistener.enabled");
        Boolean cqDamScene7ConfigurationeventlistenerEnabled;
        if (valuecqDamScene7ConfigurationeventlistenerEnabled != null) {
            cqDamScene7ConfigurationeventlistenerEnabled = Boolean.valueOf(valuecqDamScene7ConfigurationeventlistenerEnabled);
        } else {
            cqDamScene7ConfigurationeventlistenerEnabled = null;
        }
        ComDayCqDamScene7ImplScene7ConfigurationEventListenerInfo obj = imp.comDayCqDamScene7ImplScene7ConfigurationEventListener(post, apply, delete, action, $location, propertylist, cqDamScene7ConfigurationeventlistenerEnabled);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqDamScene7ImplScene7DamChangeEventListener() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuecqDamScene7DamchangeeventlistenerEnabled = request().getQueryString("cq.dam.scene7.damchangeeventlistener.enabled");
        Boolean cqDamScene7DamchangeeventlistenerEnabled;
        if (valuecqDamScene7DamchangeeventlistenerEnabled != null) {
            cqDamScene7DamchangeeventlistenerEnabled = Boolean.valueOf(valuecqDamScene7DamchangeeventlistenerEnabled);
        } else {
            cqDamScene7DamchangeeventlistenerEnabled = null;
        }
        String[] cqDamScene7DamchangeeventlistenerObservedPathsArray = request().queryString().get("cq.dam.scene7.damchangeeventlistener.observed.paths");
        List<String> cqDamScene7DamchangeeventlistenerObservedPathsList = OpenAPIUtils.parametersToList("multi", cqDamScene7DamchangeeventlistenerObservedPathsArray);
        List<String> cqDamScene7DamchangeeventlistenerObservedPaths = new ArrayList<String>();
        for (String curParam : cqDamScene7DamchangeeventlistenerObservedPathsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                cqDamScene7DamchangeeventlistenerObservedPaths.add(curParam);
            }
        }
        ComDayCqDamScene7ImplScene7DamChangeEventListenerInfo obj = imp.comDayCqDamScene7ImplScene7DamChangeEventListener(post, apply, delete, action, $location, propertylist, cqDamScene7DamchangeeventlistenerEnabled, cqDamScene7DamchangeeventlistenerObservedPaths);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqDamScene7ImplScene7FlashTemplatesServiceImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuescene7FlashTemplatesRti = request().getQueryString("scene7FlashTemplates.rti");
        String scene7FlashTemplatesRti;
        if (valuescene7FlashTemplatesRti != null) {
            scene7FlashTemplatesRti = valuescene7FlashTemplatesRti;
        } else {
            scene7FlashTemplatesRti = null;
        }
        String valuescene7FlashTemplatesRsi = request().getQueryString("scene7FlashTemplates.rsi");
        String scene7FlashTemplatesRsi;
        if (valuescene7FlashTemplatesRsi != null) {
            scene7FlashTemplatesRsi = valuescene7FlashTemplatesRsi;
        } else {
            scene7FlashTemplatesRsi = null;
        }
        String valuescene7FlashTemplatesRb = request().getQueryString("scene7FlashTemplates.rb");
        String scene7FlashTemplatesRb;
        if (valuescene7FlashTemplatesRb != null) {
            scene7FlashTemplatesRb = valuescene7FlashTemplatesRb;
        } else {
            scene7FlashTemplatesRb = null;
        }
        String valuescene7FlashTemplatesRurl = request().getQueryString("scene7FlashTemplates.rurl");
        String scene7FlashTemplatesRurl;
        if (valuescene7FlashTemplatesRurl != null) {
            scene7FlashTemplatesRurl = valuescene7FlashTemplatesRurl;
        } else {
            scene7FlashTemplatesRurl = null;
        }
        String valuescene7FlashTemplateUrlFormatParameter = request().getQueryString("scene7FlashTemplate.urlFormatParameter");
        String scene7FlashTemplateUrlFormatParameter;
        if (valuescene7FlashTemplateUrlFormatParameter != null) {
            scene7FlashTemplateUrlFormatParameter = valuescene7FlashTemplateUrlFormatParameter;
        } else {
            scene7FlashTemplateUrlFormatParameter = null;
        }
        ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplInfo obj = imp.comDayCqDamScene7ImplScene7FlashTemplatesServiceImpl(post, apply, delete, action, $location, propertylist, scene7FlashTemplatesRti, scene7FlashTemplatesRsi, scene7FlashTemplatesRb, scene7FlashTemplatesRurl, scene7FlashTemplateUrlFormatParameter);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqDamScene7ImplScene7UploadServiceImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuecqDamScene7UploadserviceActivejobtimeoutLabel = request().getQueryString("cq.dam.scene7.uploadservice.activejobtimeout.label");
        Integer cqDamScene7UploadserviceActivejobtimeoutLabel;
        if (valuecqDamScene7UploadserviceActivejobtimeoutLabel != null) {
            cqDamScene7UploadserviceActivejobtimeoutLabel = Integer.parseInt(valuecqDamScene7UploadserviceActivejobtimeoutLabel);
        } else {
            cqDamScene7UploadserviceActivejobtimeoutLabel = null;
        }
        String valuecqDamScene7UploadserviceConnectionmaxperrouteLabel = request().getQueryString("cq.dam.scene7.uploadservice.connectionmaxperroute.label");
        Integer cqDamScene7UploadserviceConnectionmaxperrouteLabel;
        if (valuecqDamScene7UploadserviceConnectionmaxperrouteLabel != null) {
            cqDamScene7UploadserviceConnectionmaxperrouteLabel = Integer.parseInt(valuecqDamScene7UploadserviceConnectionmaxperrouteLabel);
        } else {
            cqDamScene7UploadserviceConnectionmaxperrouteLabel = null;
        }
        ComDayCqDamScene7ImplScene7UploadServiceImplInfo obj = imp.comDayCqDamScene7ImplScene7UploadServiceImpl(post, apply, delete, action, $location, propertylist, cqDamScene7UploadserviceActivejobtimeoutLabel, cqDamScene7UploadserviceConnectionmaxperrouteLabel);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqDamStockIntegrationImplCacheStockCacheConfigurationSer() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuegetCacheExpirationUnit = request().getQueryString("getCacheExpirationUnit");
        String getCacheExpirationUnit;
        if (valuegetCacheExpirationUnit != null) {
            getCacheExpirationUnit = valuegetCacheExpirationUnit;
        } else {
            getCacheExpirationUnit = null;
        }
        String valuegetCacheExpirationValue = request().getQueryString("getCacheExpirationValue");
        Integer getCacheExpirationValue;
        if (valuegetCacheExpirationValue != null) {
            getCacheExpirationValue = Integer.parseInt(valuegetCacheExpirationValue);
        } else {
            getCacheExpirationValue = null;
        }
        ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerInfo obj = imp.comDayCqDamStockIntegrationImplCacheStockCacheConfigurationSer(post, apply, delete, action, $location, propertylist, getCacheExpirationUnit, getCacheExpirationValue);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqDamStockIntegrationImplConfigurationStockConfiguration() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuename = request().getQueryString("name");
        String name;
        if (valuename != null) {
            name = valuename;
        } else {
            name = null;
        }
        String valuelocale = request().getQueryString("locale");
        String locale;
        if (valuelocale != null) {
            locale = valuelocale;
        } else {
            locale = null;
        }
        String valueimsConfig = request().getQueryString("imsConfig");
        String imsConfig;
        if (valueimsConfig != null) {
            imsConfig = valueimsConfig;
        } else {
            imsConfig = null;
        }
        ComDayCqDamStockIntegrationImplConfigurationStockConfigurationInfo obj = imp.comDayCqDamStockIntegrationImplConfigurationStockConfiguration(post, apply, delete, action, $location, propertylist, name, locale, imsConfig);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqDamVideoImplServletVideoTestServlet() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueenabled = request().getQueryString("enabled");
        Boolean enabled;
        if (valueenabled != null) {
            enabled = Boolean.valueOf(valueenabled);
        } else {
            enabled = null;
        }
        ComDayCqDamVideoImplServletVideoTestServletInfo obj = imp.comDayCqDamVideoImplServletVideoTestServlet(post, apply, delete, action, $location, propertylist, enabled);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqExtwidgetServletsImageSpriteServlet() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuemaxWidth = request().getQueryString("maxWidth");
        Integer maxWidth;
        if (valuemaxWidth != null) {
            maxWidth = Integer.parseInt(valuemaxWidth);
        } else {
            maxWidth = null;
        }
        String valuemaxHeight = request().getQueryString("maxHeight");
        Integer maxHeight;
        if (valuemaxHeight != null) {
            maxHeight = Integer.parseInt(valuemaxHeight);
        } else {
            maxHeight = null;
        }
        ComDayCqExtwidgetServletsImageSpriteServletInfo obj = imp.comDayCqExtwidgetServletsImageSpriteServlet(post, apply, delete, action, $location, propertylist, maxWidth, maxHeight);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqImageInternalFontFontHelper() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] fontpathArray = request().queryString().get("fontpath");
        List<String> fontpathList = OpenAPIUtils.parametersToList("multi", fontpathArray);
        List<String> fontpath = new ArrayList<String>();
        for (String curParam : fontpathList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                fontpath.add(curParam);
            }
        }
        String valueoversamplingFactor = request().getQueryString("oversamplingFactor");
        Integer oversamplingFactor;
        if (valueoversamplingFactor != null) {
            oversamplingFactor = Integer.parseInt(valueoversamplingFactor);
        } else {
            oversamplingFactor = null;
        }
        ComDayCqImageInternalFontFontHelperInfo obj = imp.comDayCqImageInternalFontFontHelper(post, apply, delete, action, $location, propertylist, fontpath, oversamplingFactor);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqJcrclustersupportClusterStartLevelController() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueclusterLevelEnable = request().getQueryString("cluster.level.enable");
        Boolean clusterLevelEnable;
        if (valueclusterLevelEnable != null) {
            clusterLevelEnable = Boolean.valueOf(valueclusterLevelEnable);
        } else {
            clusterLevelEnable = null;
        }
        String valueclusterMasterLevel = request().getQueryString("cluster.master.level");
        Integer clusterMasterLevel;
        if (valueclusterMasterLevel != null) {
            clusterMasterLevel = Integer.parseInt(valueclusterMasterLevel);
        } else {
            clusterMasterLevel = null;
        }
        String valueclusterSlaveLevel = request().getQueryString("cluster.slave.level");
        Integer clusterSlaveLevel;
        if (valueclusterSlaveLevel != null) {
            clusterSlaveLevel = Integer.parseInt(valueclusterSlaveLevel);
        } else {
            clusterSlaveLevel = null;
        }
        ComDayCqJcrclustersupportClusterStartLevelControllerInfo obj = imp.comDayCqJcrclustersupportClusterStartLevelController(post, apply, delete, action, $location, propertylist, clusterLevelEnable, clusterMasterLevel, clusterSlaveLevel);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqMailerDefaultMailService() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuesmtpHost = request().getQueryString("smtp.host");
        String smtpHost;
        if (valuesmtpHost != null) {
            smtpHost = valuesmtpHost;
        } else {
            smtpHost = null;
        }
        String valuesmtpPort = request().getQueryString("smtp.port");
        Integer smtpPort;
        if (valuesmtpPort != null) {
            smtpPort = Integer.parseInt(valuesmtpPort);
        } else {
            smtpPort = null;
        }
        String valuesmtpUser = request().getQueryString("smtp.user");
        String smtpUser;
        if (valuesmtpUser != null) {
            smtpUser = valuesmtpUser;
        } else {
            smtpUser = null;
        }
        String valuesmtpPassword = request().getQueryString("smtp.password");
        String smtpPassword;
        if (valuesmtpPassword != null) {
            smtpPassword = valuesmtpPassword;
        } else {
            smtpPassword = null;
        }
        String valuefromAddress = request().getQueryString("from.address");
        String fromAddress;
        if (valuefromAddress != null) {
            fromAddress = valuefromAddress;
        } else {
            fromAddress = null;
        }
        String valuesmtpSsl = request().getQueryString("smtp.ssl");
        Boolean smtpSsl;
        if (valuesmtpSsl != null) {
            smtpSsl = Boolean.valueOf(valuesmtpSsl);
        } else {
            smtpSsl = null;
        }
        String valuesmtpStarttls = request().getQueryString("smtp.starttls");
        Boolean smtpStarttls;
        if (valuesmtpStarttls != null) {
            smtpStarttls = Boolean.valueOf(valuesmtpStarttls);
        } else {
            smtpStarttls = null;
        }
        String valuedebugEmail = request().getQueryString("debug.email");
        Boolean debugEmail;
        if (valuedebugEmail != null) {
            debugEmail = Boolean.valueOf(valuedebugEmail);
        } else {
            debugEmail = null;
        }
        ComDayCqMailerDefaultMailServiceInfo obj = imp.comDayCqMailerDefaultMailService(post, apply, delete, action, $location, propertylist, smtpHost, smtpPort, smtpUser, smtpPassword, fromAddress, smtpSsl, smtpStarttls, debugEmail);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqMailerImplCqMailingService() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuemaxRecipientCount = request().getQueryString("max.recipient.count");
        String maxRecipientCount;
        if (valuemaxRecipientCount != null) {
            maxRecipientCount = valuemaxRecipientCount;
        } else {
            maxRecipientCount = null;
        }
        ComDayCqMailerImplCqMailingServiceInfo obj = imp.comDayCqMailerImplCqMailingService(post, apply, delete, action, $location, propertylist, maxRecipientCount);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqMailerImplEmailCqEmailTemplateFactory() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuemailerEmailCharset = request().getQueryString("mailer.email.charset");
        String mailerEmailCharset;
        if (valuemailerEmailCharset != null) {
            mailerEmailCharset = valuemailerEmailCharset;
        } else {
            mailerEmailCharset = null;
        }
        ComDayCqMailerImplEmailCqEmailTemplateFactoryInfo obj = imp.comDayCqMailerImplEmailCqEmailTemplateFactory(post, apply, delete, action, $location, propertylist, mailerEmailCharset);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqMailerImplEmailCqRetrieverTemplateFactory() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuemailerEmailEmbed = request().getQueryString("mailer.email.embed");
        Boolean mailerEmailEmbed;
        if (valuemailerEmailEmbed != null) {
            mailerEmailEmbed = Boolean.valueOf(valuemailerEmailEmbed);
        } else {
            mailerEmailEmbed = null;
        }
        String valuemailerEmailCharset = request().getQueryString("mailer.email.charset");
        String mailerEmailCharset;
        if (valuemailerEmailCharset != null) {
            mailerEmailCharset = valuemailerEmailCharset;
        } else {
            mailerEmailCharset = null;
        }
        String valuemailerEmailRetrieverUserID = request().getQueryString("mailer.email.retrieverUserID");
        String mailerEmailRetrieverUserID;
        if (valuemailerEmailRetrieverUserID != null) {
            mailerEmailRetrieverUserID = valuemailerEmailRetrieverUserID;
        } else {
            mailerEmailRetrieverUserID = null;
        }
        String valuemailerEmailRetrieverUserPWD = request().getQueryString("mailer.email.retrieverUserPWD");
        String mailerEmailRetrieverUserPWD;
        if (valuemailerEmailRetrieverUserPWD != null) {
            mailerEmailRetrieverUserPWD = valuemailerEmailRetrieverUserPWD;
        } else {
            mailerEmailRetrieverUserPWD = null;
        }
        ComDayCqMailerImplEmailCqRetrieverTemplateFactoryInfo obj = imp.comDayCqMailerImplEmailCqRetrieverTemplateFactory(post, apply, delete, action, $location, propertylist, mailerEmailEmbed, mailerEmailCharset, mailerEmailRetrieverUserID, mailerEmailRetrieverUserPWD);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqMcmCampaignImplIntegrationConfigImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] aemMcmCampaignFormConstraintsArray = request().queryString().get("aem.mcm.campaign.formConstraints");
        List<String> aemMcmCampaignFormConstraintsList = OpenAPIUtils.parametersToList("multi", aemMcmCampaignFormConstraintsArray);
        List<String> aemMcmCampaignFormConstraints = new ArrayList<String>();
        for (String curParam : aemMcmCampaignFormConstraintsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                aemMcmCampaignFormConstraints.add(curParam);
            }
        }
        String valueaemMcmCampaignPublicUrl = request().getQueryString("aem.mcm.campaign.publicUrl");
        String aemMcmCampaignPublicUrl;
        if (valueaemMcmCampaignPublicUrl != null) {
            aemMcmCampaignPublicUrl = valueaemMcmCampaignPublicUrl;
        } else {
            aemMcmCampaignPublicUrl = null;
        }
        String valueaemMcmCampaignRelaxedSSL = request().getQueryString("aem.mcm.campaign.relaxedSSL");
        Boolean aemMcmCampaignRelaxedSSL;
        if (valueaemMcmCampaignRelaxedSSL != null) {
            aemMcmCampaignRelaxedSSL = Boolean.valueOf(valueaemMcmCampaignRelaxedSSL);
        } else {
            aemMcmCampaignRelaxedSSL = null;
        }
        ComDayCqMcmCampaignImplIntegrationConfigImplInfo obj = imp.comDayCqMcmCampaignImplIntegrationConfigImpl(post, apply, delete, action, $location, propertylist, aemMcmCampaignFormConstraints, aemMcmCampaignPublicUrl, aemMcmCampaignRelaxedSSL);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqMcmCampaignImporterPersonalizedTextHandlerFactory() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueserviceRanking = request().getQueryString("service.ranking");
        Integer serviceRanking;
        if (valueserviceRanking != null) {
            serviceRanking = Integer.parseInt(valueserviceRanking);
        } else {
            serviceRanking = null;
        }
        String valuetagpattern = request().getQueryString("tagpattern");
        String tagpattern;
        if (valuetagpattern != null) {
            tagpattern = valuetagpattern;
        } else {
            tagpattern = null;
        }
        ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryInfo obj = imp.comDayCqMcmCampaignImporterPersonalizedTextHandlerFactory(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqMcmCoreNewsletterNewsletterEmailServiceImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuefromAddress = request().getQueryString("from.address");
        String fromAddress;
        if (valuefromAddress != null) {
            fromAddress = valuefromAddress;
        } else {
            fromAddress = null;
        }
        String valuesenderHost = request().getQueryString("sender.host");
        String senderHost;
        if (valuesenderHost != null) {
            senderHost = valuesenderHost;
        } else {
            senderHost = null;
        }
        String valuemaxBounceCount = request().getQueryString("max.bounce.count");
        String maxBounceCount;
        if (valuemaxBounceCount != null) {
            maxBounceCount = valuemaxBounceCount;
        } else {
            maxBounceCount = null;
        }
        ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplInfo obj = imp.comDayCqMcmCoreNewsletterNewsletterEmailServiceImpl(post, apply, delete, action, $location, propertylist, fromAddress, senderHost, maxBounceCount);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqMcmImplMCMConfiguration() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] experienceIndirectionArray = request().queryString().get("experience.indirection");
        List<String> experienceIndirectionList = OpenAPIUtils.parametersToList("multi", experienceIndirectionArray);
        List<String> experienceIndirection = new ArrayList<String>();
        for (String curParam : experienceIndirectionList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                experienceIndirection.add(curParam);
            }
        }
        String[] touchpointIndirectionArray = request().queryString().get("touchpoint.indirection");
        List<String> touchpointIndirectionList = OpenAPIUtils.parametersToList("multi", touchpointIndirectionArray);
        List<String> touchpointIndirection = new ArrayList<String>();
        for (String curParam : touchpointIndirectionList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                touchpointIndirection.add(curParam);
            }
        }
        ComDayCqMcmImplMCMConfigurationInfo obj = imp.comDayCqMcmImplMCMConfiguration(post, apply, delete, action, $location, propertylist, experienceIndirection, touchpointIndirection);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponen() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueserviceRanking = request().getQueryString("service.ranking");
        Integer serviceRanking;
        if (valueserviceRanking != null) {
            serviceRanking = Integer.parseInt(valueserviceRanking);
        } else {
            serviceRanking = null;
        }
        String valuetagpattern = request().getQueryString("tagpattern");
        String tagpattern;
        if (valuetagpattern != null) {
            tagpattern = valuetagpattern;
        } else {
            tagpattern = null;
        }
        String valuecomponentResourceType = request().getQueryString("component.resourceType");
        String componentResourceType;
        if (valuecomponentResourceType != null) {
            componentResourceType = valuecomponentResourceType;
        } else {
            componentResourceType = null;
        }
        ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenInfo obj = imp.comDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponen(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern, componentResourceType);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThroug() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueserviceRanking = request().getQueryString("service.ranking");
        Integer serviceRanking;
        if (valueserviceRanking != null) {
            serviceRanking = Integer.parseInt(valueserviceRanking);
        } else {
            serviceRanking = null;
        }
        String valuetagpattern = request().getQueryString("tagpattern");
        String tagpattern;
        if (valuetagpattern != null) {
            tagpattern = valuetagpattern;
        } else {
            tagpattern = null;
        }
        String valuecomponentResourceType = request().getQueryString("component.resourceType");
        String componentResourceType;
        if (valuecomponentResourceType != null) {
            componentResourceType = valuecomponentResourceType;
        } else {
            componentResourceType = null;
        }
        ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougInfo obj = imp.comDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThroug(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern, componentResourceType);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponent() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueserviceRanking = request().getQueryString("service.ranking");
        Integer serviceRanking;
        if (valueserviceRanking != null) {
            serviceRanking = Integer.parseInt(valueserviceRanking);
        } else {
            serviceRanking = null;
        }
        String valuetagpattern = request().getQueryString("tagpattern");
        String tagpattern;
        if (valuetagpattern != null) {
            tagpattern = valuetagpattern;
        } else {
            tagpattern = null;
        }
        ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentInfo obj = imp.comDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponent(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHa() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueserviceRanking = request().getQueryString("service.ranking");
        Integer serviceRanking;
        if (valueserviceRanking != null) {
            serviceRanking = Integer.parseInt(valueserviceRanking);
        } else {
            serviceRanking = null;
        }
        String valuetagpattern = request().getQueryString("tagpattern");
        String tagpattern;
        if (valuetagpattern != null) {
            tagpattern = valuetagpattern;
        } else {
            tagpattern = null;
        }
        ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaInfo obj = imp.comDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHa(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagH() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueserviceRanking = request().getQueryString("service.ranking");
        Integer serviceRanking;
        if (valueserviceRanking != null) {
            serviceRanking = Integer.parseInt(valueserviceRanking);
        } else {
            serviceRanking = null;
        }
        String valuetagpattern = request().getQueryString("tagpattern");
        String tagpattern;
        if (valuetagpattern != null) {
            tagpattern = valuetagpattern;
        } else {
            tagpattern = null;
        }
        String valuecomponentResourceType = request().getQueryString("component.resourceType");
        String componentResourceType;
        if (valuecomponentResourceType != null) {
            componentResourceType = valuecomponentResourceType;
        } else {
            componentResourceType = null;
        }
        ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHInfo obj = imp.comDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagH(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern, componentResourceType);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqNotificationImplNotificationServiceImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueeventFilter = request().getQueryString("event.filter");
        String eventFilter;
        if (valueeventFilter != null) {
            eventFilter = valueeventFilter;
        } else {
            eventFilter = null;
        }
        ComDayCqNotificationImplNotificationServiceImplInfo obj = imp.comDayCqNotificationImplNotificationServiceImpl(post, apply, delete, action, $location, propertylist, eventFilter);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqPersonalizationImplServletsTargetingConfigurationServlet() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueforcelocation = request().getQueryString("forcelocation");
        Boolean forcelocation;
        if (valueforcelocation != null) {
            forcelocation = Boolean.valueOf(valueforcelocation);
        } else {
            forcelocation = null;
        }
        ComDayCqPersonalizationImplServletsTargetingConfigurationServletInfo obj = imp.comDayCqPersonalizationImplServletsTargetingConfigurationServlet(post, apply, delete, action, $location, propertylist, forcelocation);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqPollingImporterImplManagedPollConfigImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueid = request().getQueryString("id");
        String id;
        if (valueid != null) {
            id = valueid;
        } else {
            id = null;
        }
        String valueenabled = request().getQueryString("enabled");
        Boolean enabled;
        if (valueenabled != null) {
            enabled = Boolean.valueOf(valueenabled);
        } else {
            enabled = null;
        }
        String valuereference = request().getQueryString("reference");
        Boolean reference;
        if (valuereference != null) {
            reference = Boolean.valueOf(valuereference);
        } else {
            reference = null;
        }
        String valueinterval = request().getQueryString("interval");
        Integer interval;
        if (valueinterval != null) {
            interval = Integer.parseInt(valueinterval);
        } else {
            interval = null;
        }
        String valueexpression = request().getQueryString("expression");
        String expression;
        if (valueexpression != null) {
            expression = valueexpression;
        } else {
            expression = null;
        }
        String valuesource = request().getQueryString("source");
        String source;
        if (valuesource != null) {
            source = valuesource;
        } else {
            source = null;
        }
        String valuetarget = request().getQueryString("target");
        String target;
        if (valuetarget != null) {
            target = valuetarget;
        } else {
            target = null;
        }
        String valuelogin = request().getQueryString("login");
        String login;
        if (valuelogin != null) {
            login = valuelogin;
        } else {
            login = null;
        }
        String valuepassword = request().getQueryString("password");
        String password;
        if (valuepassword != null) {
            password = valuepassword;
        } else {
            password = null;
        }
        ComDayCqPollingImporterImplManagedPollConfigImplInfo obj = imp.comDayCqPollingImporterImplManagedPollConfigImpl(post, apply, delete, action, $location, propertylist, id, enabled, reference, interval, expression, source, target, login, password);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqPollingImporterImplManagedPollingImporterImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueimporterUser = request().getQueryString("importer.user");
        String importerUser;
        if (valueimporterUser != null) {
            importerUser = valueimporterUser;
        } else {
            importerUser = null;
        }
        ComDayCqPollingImporterImplManagedPollingImporterImplInfo obj = imp.comDayCqPollingImporterImplManagedPollingImporterImpl(post, apply, delete, action, $location, propertylist, importerUser);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqPollingImporterImplPollingImporterImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueimporterMinInterval = request().getQueryString("importer.min.interval");
        Integer importerMinInterval;
        if (valueimporterMinInterval != null) {
            importerMinInterval = Integer.parseInt(valueimporterMinInterval);
        } else {
            importerMinInterval = null;
        }
        String valueimporterUser = request().getQueryString("importer.user");
        String importerUser;
        if (valueimporterUser != null) {
            importerUser = valueimporterUser;
        } else {
            importerUser = null;
        }
        String[] excludePathsArray = request().queryString().get("exclude.paths");
        List<String> excludePathsList = OpenAPIUtils.parametersToList("multi", excludePathsArray);
        List<String> excludePaths = new ArrayList<String>();
        for (String curParam : excludePathsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                excludePaths.add(curParam);
            }
        }
        String[] includePathsArray = request().queryString().get("include.paths");
        List<String> includePathsList = OpenAPIUtils.parametersToList("multi", includePathsArray);
        List<String> includePaths = new ArrayList<String>();
        for (String curParam : includePathsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                includePaths.add(curParam);
            }
        }
        ComDayCqPollingImporterImplPollingImporterImplInfo obj = imp.comDayCqPollingImporterImplPollingImporterImpl(post, apply, delete, action, $location, propertylist, importerMinInterval, importerUser, excludePaths, includePaths);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqReplicationAuditReplicationEventListener() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueserviceRanking = request().getQueryString("service.ranking");
        Integer serviceRanking;
        if (valueserviceRanking != null) {
            serviceRanking = Integer.parseInt(valueserviceRanking);
        } else {
            serviceRanking = null;
        }
        ComDayCqReplicationAuditReplicationEventListenerInfo obj = imp.comDayCqReplicationAuditReplicationEventListener(post, apply, delete, action, $location, propertylist, serviceRanking);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqReplicationContentStaticContentBuilder() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuehost = request().getQueryString("host");
        String host;
        if (valuehost != null) {
            host = valuehost;
        } else {
            host = null;
        }
        String valueport = request().getQueryString("port");
        Integer port;
        if (valueport != null) {
            port = Integer.parseInt(valueport);
        } else {
            port = null;
        }
        ComDayCqReplicationContentStaticContentBuilderInfo obj = imp.comDayCqReplicationContentStaticContentBuilder(post, apply, delete, action, $location, propertylist, host, port);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqReplicationImplAgentManagerImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuejobTopics = request().getQueryString("job.topics");
        String jobTopics;
        if (valuejobTopics != null) {
            jobTopics = valuejobTopics;
        } else {
            jobTopics = null;
        }
        String valueserviceUserTarget = request().getQueryString("serviceUser.target");
        String serviceUserTarget;
        if (valueserviceUserTarget != null) {
            serviceUserTarget = valueserviceUserTarget;
        } else {
            serviceUserTarget = null;
        }
        String valueagentProviderTarget = request().getQueryString("agentProvider.target");
        String agentProviderTarget;
        if (valueagentProviderTarget != null) {
            agentProviderTarget = valueagentProviderTarget;
        } else {
            agentProviderTarget = null;
        }
        ComDayCqReplicationImplAgentManagerImplInfo obj = imp.comDayCqReplicationImplAgentManagerImpl(post, apply, delete, action, $location, propertylist, jobTopics, serviceUserTarget, agentProviderTarget);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqReplicationImplContentDurboBinaryLessContentBuilder() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuebinaryThreshold = request().getQueryString("binary.threshold");
        Integer binaryThreshold;
        if (valuebinaryThreshold != null) {
            binaryThreshold = Integer.parseInt(valuebinaryThreshold);
        } else {
            binaryThreshold = null;
        }
        ComDayCqReplicationImplContentDurboBinaryLessContentBuilderInfo obj = imp.comDayCqReplicationImplContentDurboBinaryLessContentBuilder(post, apply, delete, action, $location, propertylist, binaryThreshold);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqReplicationImplContentDurboDurboImportConfigurationProv() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuepreserveHierarchyNodes = request().getQueryString("preserve.hierarchy.nodes");
        Boolean preserveHierarchyNodes;
        if (valuepreserveHierarchyNodes != null) {
            preserveHierarchyNodes = Boolean.valueOf(valuepreserveHierarchyNodes);
        } else {
            preserveHierarchyNodes = null;
        }
        String valueignoreVersioning = request().getQueryString("ignore.versioning");
        Boolean ignoreVersioning;
        if (valueignoreVersioning != null) {
            ignoreVersioning = Boolean.valueOf(valueignoreVersioning);
        } else {
            ignoreVersioning = null;
        }
        String valueimportAcl = request().getQueryString("import.acl");
        Boolean importAcl;
        if (valueimportAcl != null) {
            importAcl = Boolean.valueOf(valueimportAcl);
        } else {
            importAcl = null;
        }
        String valuesaveThreshold = request().getQueryString("save.threshold");
        Integer saveThreshold;
        if (valuesaveThreshold != null) {
            saveThreshold = Integer.parseInt(valuesaveThreshold);
        } else {
            saveThreshold = null;
        }
        String valuepreserveUserPaths = request().getQueryString("preserve.user.paths");
        Boolean preserveUserPaths;
        if (valuepreserveUserPaths != null) {
            preserveUserPaths = Boolean.valueOf(valuepreserveUserPaths);
        } else {
            preserveUserPaths = null;
        }
        String valuepreserveUuid = request().getQueryString("preserve.uuid");
        Boolean preserveUuid;
        if (valuepreserveUuid != null) {
            preserveUuid = Boolean.valueOf(valuepreserveUuid);
        } else {
            preserveUuid = null;
        }
        String[] preserveUuidNodetypesArray = request().queryString().get("preserve.uuid.nodetypes");
        List<String> preserveUuidNodetypesList = OpenAPIUtils.parametersToList("multi", preserveUuidNodetypesArray);
        List<String> preserveUuidNodetypes = new ArrayList<String>();
        for (String curParam : preserveUuidNodetypesList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                preserveUuidNodetypes.add(curParam);
            }
        }
        String[] preserveUuidSubtreesArray = request().queryString().get("preserve.uuid.subtrees");
        List<String> preserveUuidSubtreesList = OpenAPIUtils.parametersToList("multi", preserveUuidSubtreesArray);
        List<String> preserveUuidSubtrees = new ArrayList<String>();
        for (String curParam : preserveUuidSubtreesList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                preserveUuidSubtrees.add(curParam);
            }
        }
        String valueautoCommit = request().getQueryString("auto.commit");
        Boolean autoCommit;
        if (valueautoCommit != null) {
            autoCommit = Boolean.valueOf(valueautoCommit);
        } else {
            autoCommit = null;
        }
        ComDayCqReplicationImplContentDurboDurboImportConfigurationProvInfo obj = imp.comDayCqReplicationImplContentDurboDurboImportConfigurationProv(post, apply, delete, action, $location, propertylist, preserveHierarchyNodes, ignoreVersioning, importAcl, saveThreshold, preserveUserPaths, preserveUuid, preserveUuidNodetypes, preserveUuidSubtrees, autoCommit);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqReplicationImplReplicationContentFactoryProviderImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuereplicationContentUseFileStorage = request().getQueryString("replication.content.useFileStorage");
        Boolean replicationContentUseFileStorage;
        if (valuereplicationContentUseFileStorage != null) {
            replicationContentUseFileStorage = Boolean.valueOf(valuereplicationContentUseFileStorage);
        } else {
            replicationContentUseFileStorage = null;
        }
        String valuereplicationContentMaxCommitAttempts = request().getQueryString("replication.content.maxCommitAttempts");
        Integer replicationContentMaxCommitAttempts;
        if (valuereplicationContentMaxCommitAttempts != null) {
            replicationContentMaxCommitAttempts = Integer.parseInt(valuereplicationContentMaxCommitAttempts);
        } else {
            replicationContentMaxCommitAttempts = null;
        }
        ComDayCqReplicationImplReplicationContentFactoryProviderImplInfo obj = imp.comDayCqReplicationImplReplicationContentFactoryProviderImpl(post, apply, delete, action, $location, propertylist, replicationContentUseFileStorage, replicationContentMaxCommitAttempts);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqReplicationImplReplicationReceiverImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuereceiverTmpfileThreshold = request().getQueryString("receiver.tmpfile.threshold");
        Integer receiverTmpfileThreshold;
        if (valuereceiverTmpfileThreshold != null) {
            receiverTmpfileThreshold = Integer.parseInt(valuereceiverTmpfileThreshold);
        } else {
            receiverTmpfileThreshold = null;
        }
        String valuereceiverPackagesUseInstall = request().getQueryString("receiver.packages.use.install");
        Boolean receiverPackagesUseInstall;
        if (valuereceiverPackagesUseInstall != null) {
            receiverPackagesUseInstall = Boolean.valueOf(valuereceiverPackagesUseInstall);
        } else {
            receiverPackagesUseInstall = null;
        }
        ComDayCqReplicationImplReplicationReceiverImplInfo obj = imp.comDayCqReplicationImplReplicationReceiverImpl(post, apply, delete, action, $location, propertylist, receiverTmpfileThreshold, receiverPackagesUseInstall);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqReplicationImplReplicatorImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuedistributeEvents = request().getQueryString("distribute_events");
        Boolean distributeEvents;
        if (valuedistributeEvents != null) {
            distributeEvents = Boolean.valueOf(valuedistributeEvents);
        } else {
            distributeEvents = null;
        }
        ComDayCqReplicationImplReplicatorImplInfo obj = imp.comDayCqReplicationImplReplicatorImpl(post, apply, delete, action, $location, propertylist, distributeEvents);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqReplicationImplReverseReplicator() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueschedulerPeriod = request().getQueryString("scheduler.period");
        Integer schedulerPeriod;
        if (valueschedulerPeriod != null) {
            schedulerPeriod = Integer.parseInt(valueschedulerPeriod);
        } else {
            schedulerPeriod = null;
        }
        ComDayCqReplicationImplReverseReplicatorInfo obj = imp.comDayCqReplicationImplReverseReplicator(post, apply, delete, action, $location, propertylist, schedulerPeriod);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqReplicationImplTransportBinaryLessTransportHandler() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] disabledCipherSuitesArray = request().queryString().get("disabled.cipher.suites");
        List<String> disabledCipherSuitesList = OpenAPIUtils.parametersToList("multi", disabledCipherSuitesArray);
        List<String> disabledCipherSuites = new ArrayList<String>();
        for (String curParam : disabledCipherSuitesList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                disabledCipherSuites.add(curParam);
            }
        }
        String[] enabledCipherSuitesArray = request().queryString().get("enabled.cipher.suites");
        List<String> enabledCipherSuitesList = OpenAPIUtils.parametersToList("multi", enabledCipherSuitesArray);
        List<String> enabledCipherSuites = new ArrayList<String>();
        for (String curParam : enabledCipherSuitesList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                enabledCipherSuites.add(curParam);
            }
        }
        ComDayCqReplicationImplTransportBinaryLessTransportHandlerInfo obj = imp.comDayCqReplicationImplTransportBinaryLessTransportHandler(post, apply, delete, action, $location, propertylist, disabledCipherSuites, enabledCipherSuites);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqReplicationImplTransportHttp() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] disabledCipherSuitesArray = request().queryString().get("disabled.cipher.suites");
        List<String> disabledCipherSuitesList = OpenAPIUtils.parametersToList("multi", disabledCipherSuitesArray);
        List<String> disabledCipherSuites = new ArrayList<String>();
        for (String curParam : disabledCipherSuitesList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                disabledCipherSuites.add(curParam);
            }
        }
        String[] enabledCipherSuitesArray = request().queryString().get("enabled.cipher.suites");
        List<String> enabledCipherSuitesList = OpenAPIUtils.parametersToList("multi", enabledCipherSuitesArray);
        List<String> enabledCipherSuites = new ArrayList<String>();
        for (String curParam : enabledCipherSuitesList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                enabledCipherSuites.add(curParam);
            }
        }
        ComDayCqReplicationImplTransportHttpInfo obj = imp.comDayCqReplicationImplTransportHttp(post, apply, delete, action, $location, propertylist, disabledCipherSuites, enabledCipherSuites);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqReportingImplCacheCacheImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuerepcacheEnable = request().getQueryString("repcache.enable");
        Boolean repcacheEnable;
        if (valuerepcacheEnable != null) {
            repcacheEnable = Boolean.valueOf(valuerepcacheEnable);
        } else {
            repcacheEnable = null;
        }
        String valuerepcacheTtl = request().getQueryString("repcache.ttl");
        Integer repcacheTtl;
        if (valuerepcacheTtl != null) {
            repcacheTtl = Integer.parseInt(valuerepcacheTtl);
        } else {
            repcacheTtl = null;
        }
        String valuerepcacheMax = request().getQueryString("repcache.max");
        Integer repcacheMax;
        if (valuerepcacheMax != null) {
            repcacheMax = Integer.parseInt(valuerepcacheMax);
        } else {
            repcacheMax = null;
        }
        ComDayCqReportingImplCacheCacheImplInfo obj = imp.comDayCqReportingImplCacheCacheImpl(post, apply, delete, action, $location, propertylist, repcacheEnable, repcacheTtl, repcacheMax);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqReportingImplConfigServiceImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuerepconfTimezone = request().getQueryString("repconf.timezone");
        String repconfTimezone;
        if (valuerepconfTimezone != null) {
            repconfTimezone = valuerepconfTimezone;
        } else {
            repconfTimezone = null;
        }
        String valuerepconfLocale = request().getQueryString("repconf.locale");
        String repconfLocale;
        if (valuerepconfLocale != null) {
            repconfLocale = valuerepconfLocale;
        } else {
            repconfLocale = null;
        }
        String valuerepconfSnapshots = request().getQueryString("repconf.snapshots");
        String repconfSnapshots;
        if (valuerepconfSnapshots != null) {
            repconfSnapshots = valuerepconfSnapshots;
        } else {
            repconfSnapshots = null;
        }
        String valuerepconfRepdir = request().getQueryString("repconf.repdir");
        String repconfRepdir;
        if (valuerepconfRepdir != null) {
            repconfRepdir = valuerepconfRepdir;
        } else {
            repconfRepdir = null;
        }
        String valuerepconfHourofday = request().getQueryString("repconf.hourofday");
        Integer repconfHourofday;
        if (valuerepconfHourofday != null) {
            repconfHourofday = Integer.parseInt(valuerepconfHourofday);
        } else {
            repconfHourofday = null;
        }
        String valuerepconfMinofhour = request().getQueryString("repconf.minofhour");
        Integer repconfMinofhour;
        if (valuerepconfMinofhour != null) {
            repconfMinofhour = Integer.parseInt(valuerepconfMinofhour);
        } else {
            repconfMinofhour = null;
        }
        String valuerepconfMaxrows = request().getQueryString("repconf.maxrows");
        Integer repconfMaxrows;
        if (valuerepconfMaxrows != null) {
            repconfMaxrows = Integer.parseInt(valuerepconfMaxrows);
        } else {
            repconfMaxrows = null;
        }
        String valuerepconfFakedata = request().getQueryString("repconf.fakedata");
        Boolean repconfFakedata;
        if (valuerepconfFakedata != null) {
            repconfFakedata = Boolean.valueOf(valuerepconfFakedata);
        } else {
            repconfFakedata = null;
        }
        String valuerepconfSnapshotuser = request().getQueryString("repconf.snapshotuser");
        String repconfSnapshotuser;
        if (valuerepconfSnapshotuser != null) {
            repconfSnapshotuser = valuerepconfSnapshotuser;
        } else {
            repconfSnapshotuser = null;
        }
        String valuerepconfEnforcesnapshotuser = request().getQueryString("repconf.enforcesnapshotuser");
        Boolean repconfEnforcesnapshotuser;
        if (valuerepconfEnforcesnapshotuser != null) {
            repconfEnforcesnapshotuser = Boolean.valueOf(valuerepconfEnforcesnapshotuser);
        } else {
            repconfEnforcesnapshotuser = null;
        }
        ComDayCqReportingImplConfigServiceImplInfo obj = imp.comDayCqReportingImplConfigServiceImpl(post, apply, delete, action, $location, propertylist, repconfTimezone, repconfLocale, repconfSnapshots, repconfRepdir, repconfHourofday, repconfMinofhour, repconfMaxrows, repconfFakedata, repconfSnapshotuser, repconfEnforcesnapshotuser);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqReportingImplRLogAnalyzer() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuerequestLogOutput = request().getQueryString("request.log.output");
        String requestLogOutput;
        if (valuerequestLogOutput != null) {
            requestLogOutput = valuerequestLogOutput;
        } else {
            requestLogOutput = null;
        }
        ComDayCqReportingImplRLogAnalyzerInfo obj = imp.comDayCqReportingImplRLogAnalyzer(post, apply, delete, action, $location, propertylist, requestLogOutput);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqRewriterLinkcheckerImplLinkCheckerImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueschedulerPeriod = request().getQueryString("scheduler.period");
        Integer schedulerPeriod;
        if (valueschedulerPeriod != null) {
            schedulerPeriod = Integer.parseInt(valueschedulerPeriod);
        } else {
            schedulerPeriod = null;
        }
        String valueschedulerConcurrent = request().getQueryString("scheduler.concurrent");
        Boolean schedulerConcurrent;
        if (valueschedulerConcurrent != null) {
            schedulerConcurrent = Boolean.valueOf(valueschedulerConcurrent);
        } else {
            schedulerConcurrent = null;
        }
        String valueserviceBadLinkToleranceInterval = request().getQueryString("service.bad_link_tolerance_interval");
        Integer serviceBadLinkToleranceInterval;
        if (valueserviceBadLinkToleranceInterval != null) {
            serviceBadLinkToleranceInterval = Integer.parseInt(valueserviceBadLinkToleranceInterval);
        } else {
            serviceBadLinkToleranceInterval = null;
        }
        String[] serviceCheckOverridePatternsArray = request().queryString().get("service.check_override_patterns");
        List<String> serviceCheckOverridePatternsList = OpenAPIUtils.parametersToList("multi", serviceCheckOverridePatternsArray);
        List<String> serviceCheckOverridePatterns = new ArrayList<String>();
        for (String curParam : serviceCheckOverridePatternsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                serviceCheckOverridePatterns.add(curParam);
            }
        }
        String valueserviceCacheBrokenInternalLinks = request().getQueryString("service.cache_broken_internal_links");
        Boolean serviceCacheBrokenInternalLinks;
        if (valueserviceCacheBrokenInternalLinks != null) {
            serviceCacheBrokenInternalLinks = Boolean.valueOf(valueserviceCacheBrokenInternalLinks);
        } else {
            serviceCacheBrokenInternalLinks = null;
        }
        String[] serviceSpecialLinkPrefixArray = request().queryString().get("service.special_link_prefix");
        List<String> serviceSpecialLinkPrefixList = OpenAPIUtils.parametersToList("multi", serviceSpecialLinkPrefixArray);
        List<String> serviceSpecialLinkPrefix = new ArrayList<String>();
        for (String curParam : serviceSpecialLinkPrefixList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                serviceSpecialLinkPrefix.add(curParam);
            }
        }
        String[] serviceSpecialLinkPatternsArray = request().queryString().get("service.special_link_patterns");
        List<String> serviceSpecialLinkPatternsList = OpenAPIUtils.parametersToList("multi", serviceSpecialLinkPatternsArray);
        List<String> serviceSpecialLinkPatterns = new ArrayList<String>();
        for (String curParam : serviceSpecialLinkPatternsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                serviceSpecialLinkPatterns.add(curParam);
            }
        }
        ComDayCqRewriterLinkcheckerImplLinkCheckerImplInfo obj = imp.comDayCqRewriterLinkcheckerImplLinkCheckerImpl(post, apply, delete, action, $location, propertylist, schedulerPeriod, schedulerConcurrent, serviceBadLinkToleranceInterval, serviceCheckOverridePatterns, serviceCacheBrokenInternalLinks, serviceSpecialLinkPrefix, serviceSpecialLinkPatterns);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqRewriterLinkcheckerImplLinkCheckerTask() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueschedulerPeriod = request().getQueryString("scheduler.period");
        Integer schedulerPeriod;
        if (valueschedulerPeriod != null) {
            schedulerPeriod = Integer.parseInt(valueschedulerPeriod);
        } else {
            schedulerPeriod = null;
        }
        String valueschedulerConcurrent = request().getQueryString("scheduler.concurrent");
        Boolean schedulerConcurrent;
        if (valueschedulerConcurrent != null) {
            schedulerConcurrent = Boolean.valueOf(valueschedulerConcurrent);
        } else {
            schedulerConcurrent = null;
        }
        String valuegoodLinkTestInterval = request().getQueryString("good_link_test_interval");
        Integer goodLinkTestInterval;
        if (valuegoodLinkTestInterval != null) {
            goodLinkTestInterval = Integer.parseInt(valuegoodLinkTestInterval);
        } else {
            goodLinkTestInterval = null;
        }
        String valuebadLinkTestInterval = request().getQueryString("bad_link_test_interval");
        Integer badLinkTestInterval;
        if (valuebadLinkTestInterval != null) {
            badLinkTestInterval = Integer.parseInt(valuebadLinkTestInterval);
        } else {
            badLinkTestInterval = null;
        }
        String valuelinkUnusedInterval = request().getQueryString("link_unused_interval");
        Integer linkUnusedInterval;
        if (valuelinkUnusedInterval != null) {
            linkUnusedInterval = Integer.parseInt(valuelinkUnusedInterval);
        } else {
            linkUnusedInterval = null;
        }
        String valueconnectionTimeout = request().getQueryString("connection.timeout");
        Integer connectionTimeout;
        if (valueconnectionTimeout != null) {
            connectionTimeout = Integer.parseInt(valueconnectionTimeout);
        } else {
            connectionTimeout = null;
        }
        ComDayCqRewriterLinkcheckerImplLinkCheckerTaskInfo obj = imp.comDayCqRewriterLinkcheckerImplLinkCheckerTask(post, apply, delete, action, $location, propertylist, schedulerPeriod, schedulerConcurrent, goodLinkTestInterval, badLinkTestInterval, linkUnusedInterval, connectionTimeout);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactory() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuelinkcheckertransformerDisableRewriting = request().getQueryString("linkcheckertransformer.disableRewriting");
        Boolean linkcheckertransformerDisableRewriting;
        if (valuelinkcheckertransformerDisableRewriting != null) {
            linkcheckertransformerDisableRewriting = Boolean.valueOf(valuelinkcheckertransformerDisableRewriting);
        } else {
            linkcheckertransformerDisableRewriting = null;
        }
        String valuelinkcheckertransformerDisableChecking = request().getQueryString("linkcheckertransformer.disableChecking");
        Boolean linkcheckertransformerDisableChecking;
        if (valuelinkcheckertransformerDisableChecking != null) {
            linkcheckertransformerDisableChecking = Boolean.valueOf(valuelinkcheckertransformerDisableChecking);
        } else {
            linkcheckertransformerDisableChecking = null;
        }
        String valuelinkcheckertransformerMapCacheSize = request().getQueryString("linkcheckertransformer.mapCacheSize");
        Integer linkcheckertransformerMapCacheSize;
        if (valuelinkcheckertransformerMapCacheSize != null) {
            linkcheckertransformerMapCacheSize = Integer.parseInt(valuelinkcheckertransformerMapCacheSize);
        } else {
            linkcheckertransformerMapCacheSize = null;
        }
        String valuelinkcheckertransformerStrictExtensionCheck = request().getQueryString("linkcheckertransformer.strictExtensionCheck");
        Boolean linkcheckertransformerStrictExtensionCheck;
        if (valuelinkcheckertransformerStrictExtensionCheck != null) {
            linkcheckertransformerStrictExtensionCheck = Boolean.valueOf(valuelinkcheckertransformerStrictExtensionCheck);
        } else {
            linkcheckertransformerStrictExtensionCheck = null;
        }
        String valuelinkcheckertransformerStripHtmltExtension = request().getQueryString("linkcheckertransformer.stripHtmltExtension");
        Boolean linkcheckertransformerStripHtmltExtension;
        if (valuelinkcheckertransformerStripHtmltExtension != null) {
            linkcheckertransformerStripHtmltExtension = Boolean.valueOf(valuelinkcheckertransformerStripHtmltExtension);
        } else {
            linkcheckertransformerStripHtmltExtension = null;
        }
        String[] linkcheckertransformerRewriteElementsArray = request().queryString().get("linkcheckertransformer.rewriteElements");
        List<String> linkcheckertransformerRewriteElementsList = OpenAPIUtils.parametersToList("multi", linkcheckertransformerRewriteElementsArray);
        List<String> linkcheckertransformerRewriteElements = new ArrayList<String>();
        for (String curParam : linkcheckertransformerRewriteElementsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                linkcheckertransformerRewriteElements.add(curParam);
            }
        }
        String[] linkcheckertransformerStripExtensionPathBlacklistArray = request().queryString().get("linkcheckertransformer.stripExtensionPathBlacklist");
        List<String> linkcheckertransformerStripExtensionPathBlacklistList = OpenAPIUtils.parametersToList("multi", linkcheckertransformerStripExtensionPathBlacklistArray);
        List<String> linkcheckertransformerStripExtensionPathBlacklist = new ArrayList<String>();
        for (String curParam : linkcheckertransformerStripExtensionPathBlacklistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                linkcheckertransformerStripExtensionPathBlacklist.add(curParam);
            }
        }
        ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryInfo obj = imp.comDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactory(post, apply, delete, action, $location, propertylist, linkcheckertransformerDisableRewriting, linkcheckertransformerDisableChecking, linkcheckertransformerMapCacheSize, linkcheckertransformerStrictExtensionCheck, linkcheckertransformerStripHtmltExtension, linkcheckertransformerRewriteElements, linkcheckertransformerStripExtensionPathBlacklist);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqRewriterLinkcheckerImplLinkInfoStorageImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueserviceMaxLinksPerHost = request().getQueryString("service.max_links_per_host");
        Integer serviceMaxLinksPerHost;
        if (valueserviceMaxLinksPerHost != null) {
            serviceMaxLinksPerHost = Integer.parseInt(valueserviceMaxLinksPerHost);
        } else {
            serviceMaxLinksPerHost = null;
        }
        String valueserviceSaveExternalLinkReferences = request().getQueryString("service.save_external_link_references");
        Boolean serviceSaveExternalLinkReferences;
        if (valueserviceSaveExternalLinkReferences != null) {
            serviceSaveExternalLinkReferences = Boolean.valueOf(valueserviceSaveExternalLinkReferences);
        } else {
            serviceSaveExternalLinkReferences = null;
        }
        ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplInfo obj = imp.comDayCqRewriterLinkcheckerImplLinkInfoStorageImpl(post, apply, delete, action, $location, propertylist, serviceMaxLinksPerHost, serviceSaveExternalLinkReferences);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqRewriterProcessorImplHtmlParserFactory() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] htmlparserProcessTagsArray = request().queryString().get("htmlparser.processTags");
        List<String> htmlparserProcessTagsList = OpenAPIUtils.parametersToList("multi", htmlparserProcessTagsArray);
        List<String> htmlparserProcessTags = new ArrayList<String>();
        for (String curParam : htmlparserProcessTagsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                htmlparserProcessTags.add(curParam);
            }
        }
        String valuehtmlparserPreserveCamelCase = request().getQueryString("htmlparser.preserveCamelCase");
        Boolean htmlparserPreserveCamelCase;
        if (valuehtmlparserPreserveCamelCase != null) {
            htmlparserPreserveCamelCase = Boolean.valueOf(valuehtmlparserPreserveCamelCase);
        } else {
            htmlparserPreserveCamelCase = null;
        }
        ComDayCqRewriterProcessorImplHtmlParserFactoryInfo obj = imp.comDayCqRewriterProcessorImplHtmlParserFactory(post, apply, delete, action, $location, propertylist, htmlparserProcessTags, htmlparserPreserveCamelCase);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqSearchImplBuilderQueryBuilderImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] excerptPropertiesArray = request().queryString().get("excerpt.properties");
        List<String> excerptPropertiesList = OpenAPIUtils.parametersToList("multi", excerptPropertiesArray);
        List<String> excerptProperties = new ArrayList<String>();
        for (String curParam : excerptPropertiesList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                excerptProperties.add(curParam);
            }
        }
        String valuecacheMaxEntries = request().getQueryString("cache.max.entries");
        Integer cacheMaxEntries;
        if (valuecacheMaxEntries != null) {
            cacheMaxEntries = Integer.parseInt(valuecacheMaxEntries);
        } else {
            cacheMaxEntries = null;
        }
        String valuecacheEntryLifetime = request().getQueryString("cache.entry.lifetime");
        Integer cacheEntryLifetime;
        if (valuecacheEntryLifetime != null) {
            cacheEntryLifetime = Integer.parseInt(valuecacheEntryLifetime);
        } else {
            cacheEntryLifetime = null;
        }
        String valuexpathUnion = request().getQueryString("xpath.union");
        Boolean xpathUnion;
        if (valuexpathUnion != null) {
            xpathUnion = Boolean.valueOf(valuexpathUnion);
        } else {
            xpathUnion = null;
        }
        ComDayCqSearchImplBuilderQueryBuilderImplInfo obj = imp.comDayCqSearchImplBuilderQueryBuilderImpl(post, apply, delete, action, $location, propertylist, excerptProperties, cacheMaxEntries, cacheEntryLifetime, xpathUnion);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqSearchSuggestImplSuggestionIndexManagerImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuepathBuilderTarget = request().getQueryString("pathBuilder.target");
        String pathBuilderTarget;
        if (valuepathBuilderTarget != null) {
            pathBuilderTarget = valuepathBuilderTarget;
        } else {
            pathBuilderTarget = null;
        }
        String valuesuggestBasepath = request().getQueryString("suggest.basepath");
        String suggestBasepath;
        if (valuesuggestBasepath != null) {
            suggestBasepath = valuesuggestBasepath;
        } else {
            suggestBasepath = null;
        }
        ComDayCqSearchSuggestImplSuggestionIndexManagerImplInfo obj = imp.comDayCqSearchSuggestImplSuggestionIndexManagerImpl(post, apply, delete, action, $location, propertylist, pathBuilderTarget, suggestBasepath);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqSearchpromoteImplPublishSearchPromoteConfigHandler() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuecqSearchpromoteConfighandlerEnabled = request().getQueryString("cq.searchpromote.confighandler.enabled");
        Boolean cqSearchpromoteConfighandlerEnabled;
        if (valuecqSearchpromoteConfighandlerEnabled != null) {
            cqSearchpromoteConfighandlerEnabled = Boolean.valueOf(valuecqSearchpromoteConfighandlerEnabled);
        } else {
            cqSearchpromoteConfighandlerEnabled = null;
        }
        ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerInfo obj = imp.comDayCqSearchpromoteImplPublishSearchPromoteConfigHandler(post, apply, delete, action, $location, propertylist, cqSearchpromoteConfighandlerEnabled);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqSearchpromoteImplSearchPromoteServiceImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuecqSearchpromoteConfigurationServerUri = request().getQueryString("cq.searchpromote.configuration.server.uri");
        String cqSearchpromoteConfigurationServerUri;
        if (valuecqSearchpromoteConfigurationServerUri != null) {
            cqSearchpromoteConfigurationServerUri = valuecqSearchpromoteConfigurationServerUri;
        } else {
            cqSearchpromoteConfigurationServerUri = null;
        }
        String valuecqSearchpromoteConfigurationEnvironment = request().getQueryString("cq.searchpromote.configuration.environment");
        String cqSearchpromoteConfigurationEnvironment;
        if (valuecqSearchpromoteConfigurationEnvironment != null) {
            cqSearchpromoteConfigurationEnvironment = valuecqSearchpromoteConfigurationEnvironment;
        } else {
            cqSearchpromoteConfigurationEnvironment = null;
        }
        String valueconnectionTimeout = request().getQueryString("connection.timeout");
        Integer connectionTimeout;
        if (valueconnectionTimeout != null) {
            connectionTimeout = Integer.parseInt(valueconnectionTimeout);
        } else {
            connectionTimeout = null;
        }
        String valuesocketTimeout = request().getQueryString("socket.timeout");
        Integer socketTimeout;
        if (valuesocketTimeout != null) {
            socketTimeout = Integer.parseInt(valuesocketTimeout);
        } else {
            socketTimeout = null;
        }
        ComDayCqSearchpromoteImplSearchPromoteServiceImplInfo obj = imp.comDayCqSearchpromoteImplSearchPromoteServiceImpl(post, apply, delete, action, $location, propertylist, cqSearchpromoteConfigurationServerUri, cqSearchpromoteConfigurationEnvironment, connectionTimeout, socketTimeout);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqSecurityACLSetup() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] cqAclsetupRulesArray = request().queryString().get("cq.aclsetup.rules");
        List<String> cqAclsetupRulesList = OpenAPIUtils.parametersToList("multi", cqAclsetupRulesArray);
        List<String> cqAclsetupRules = new ArrayList<String>();
        for (String curParam : cqAclsetupRulesList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                cqAclsetupRules.add(curParam);
            }
        }
        ComDayCqSecurityACLSetupInfo obj = imp.comDayCqSecurityACLSetup(post, apply, delete, action, $location, propertylist, cqAclsetupRules);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqStatisticsImplStatisticsServiceImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueschedulerPeriod = request().getQueryString("scheduler.period");
        Integer schedulerPeriod;
        if (valueschedulerPeriod != null) {
            schedulerPeriod = Integer.parseInt(valueschedulerPeriod);
        } else {
            schedulerPeriod = null;
        }
        String valueschedulerConcurrent = request().getQueryString("scheduler.concurrent");
        Boolean schedulerConcurrent;
        if (valueschedulerConcurrent != null) {
            schedulerConcurrent = Boolean.valueOf(valueschedulerConcurrent);
        } else {
            schedulerConcurrent = null;
        }
        String valuepath = request().getQueryString("path");
        String path;
        if (valuepath != null) {
            path = valuepath;
        } else {
            path = null;
        }
        String valueworkspace = request().getQueryString("workspace");
        String workspace;
        if (valueworkspace != null) {
            workspace = valueworkspace;
        } else {
            workspace = null;
        }
        String valuekeywordsPath = request().getQueryString("keywordsPath");
        String keywordsPath;
        if (valuekeywordsPath != null) {
            keywordsPath = valuekeywordsPath;
        } else {
            keywordsPath = null;
        }
        String valueasyncEntries = request().getQueryString("asyncEntries");
        Boolean asyncEntries;
        if (valueasyncEntries != null) {
            asyncEntries = Boolean.valueOf(valueasyncEntries);
        } else {
            asyncEntries = null;
        }
        ComDayCqStatisticsImplStatisticsServiceImplInfo obj = imp.comDayCqStatisticsImplStatisticsServiceImpl(post, apply, delete, action, $location, propertylist, schedulerPeriod, schedulerConcurrent, path, workspace, keywordsPath, asyncEntries);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqTaggingImplJcrTagManagerFactoryImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuevalidationEnabled = request().getQueryString("validation.enabled");
        Boolean validationEnabled;
        if (valuevalidationEnabled != null) {
            validationEnabled = Boolean.valueOf(valuevalidationEnabled);
        } else {
            validationEnabled = null;
        }
        ComDayCqTaggingImplJcrTagManagerFactoryImplInfo obj = imp.comDayCqTaggingImplJcrTagManagerFactoryImpl(post, apply, delete, action, $location, propertylist, validationEnabled);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqTaggingImplSearchTagPredicateEvaluator() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueignorePath = request().getQueryString("ignore_path");
        Boolean ignorePath;
        if (valueignorePath != null) {
            ignorePath = Boolean.valueOf(valueignorePath);
        } else {
            ignorePath = null;
        }
        ComDayCqTaggingImplSearchTagPredicateEvaluatorInfo obj = imp.comDayCqTaggingImplSearchTagPredicateEvaluator(post, apply, delete, action, $location, propertylist, ignorePath);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqTaggingImplTagGarbageCollector() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueschedulerExpression = request().getQueryString("scheduler.expression");
        String schedulerExpression;
        if (valueschedulerExpression != null) {
            schedulerExpression = valueschedulerExpression;
        } else {
            schedulerExpression = null;
        }
        ComDayCqTaggingImplTagGarbageCollectorInfo obj = imp.comDayCqTaggingImplTagGarbageCollector(post, apply, delete, action, $location, propertylist, schedulerExpression);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqWcmContentsyncImplHandlerPagesUpdateHandler() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] cqPagesupdatehandlerImageresourcetypesArray = request().queryString().get("cq.pagesupdatehandler.imageresourcetypes");
        List<String> cqPagesupdatehandlerImageresourcetypesList = OpenAPIUtils.parametersToList("multi", cqPagesupdatehandlerImageresourcetypesArray);
        List<String> cqPagesupdatehandlerImageresourcetypes = new ArrayList<String>();
        for (String curParam : cqPagesupdatehandlerImageresourcetypesList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                cqPagesupdatehandlerImageresourcetypes.add(curParam);
            }
        }
        ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerInfo obj = imp.comDayCqWcmContentsyncImplHandlerPagesUpdateHandler(post, apply, delete, action, $location, propertylist, cqPagesupdatehandlerImageresourcetypes);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactor() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] cqContentsyncPathrewritertransformerMappingLinksArray = request().queryString().get("cq.contentsync.pathrewritertransformer.mapping.links");
        List<String> cqContentsyncPathrewritertransformerMappingLinksList = OpenAPIUtils.parametersToList("multi", cqContentsyncPathrewritertransformerMappingLinksArray);
        List<String> cqContentsyncPathrewritertransformerMappingLinks = new ArrayList<String>();
        for (String curParam : cqContentsyncPathrewritertransformerMappingLinksList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                cqContentsyncPathrewritertransformerMappingLinks.add(curParam);
            }
        }
        String[] cqContentsyncPathrewritertransformerMappingClientlibsArray = request().queryString().get("cq.contentsync.pathrewritertransformer.mapping.clientlibs");
        List<String> cqContentsyncPathrewritertransformerMappingClientlibsList = OpenAPIUtils.parametersToList("multi", cqContentsyncPathrewritertransformerMappingClientlibsArray);
        List<String> cqContentsyncPathrewritertransformerMappingClientlibs = new ArrayList<String>();
        for (String curParam : cqContentsyncPathrewritertransformerMappingClientlibsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                cqContentsyncPathrewritertransformerMappingClientlibs.add(curParam);
            }
        }
        String[] cqContentsyncPathrewritertransformerMappingImagesArray = request().queryString().get("cq.contentsync.pathrewritertransformer.mapping.images");
        List<String> cqContentsyncPathrewritertransformerMappingImagesList = OpenAPIUtils.parametersToList("multi", cqContentsyncPathrewritertransformerMappingImagesArray);
        List<String> cqContentsyncPathrewritertransformerMappingImages = new ArrayList<String>();
        for (String curParam : cqContentsyncPathrewritertransformerMappingImagesList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                cqContentsyncPathrewritertransformerMappingImages.add(curParam);
            }
        }
        String valuecqContentsyncPathrewritertransformerAttributePattern = request().getQueryString("cq.contentsync.pathrewritertransformer.attribute.pattern");
        String cqContentsyncPathrewritertransformerAttributePattern;
        if (valuecqContentsyncPathrewritertransformerAttributePattern != null) {
            cqContentsyncPathrewritertransformerAttributePattern = valuecqContentsyncPathrewritertransformerAttributePattern;
        } else {
            cqContentsyncPathrewritertransformerAttributePattern = null;
        }
        String valuecqContentsyncPathrewritertransformerClientlibraryPattern = request().getQueryString("cq.contentsync.pathrewritertransformer.clientlibrary.pattern");
        String cqContentsyncPathrewritertransformerClientlibraryPattern;
        if (valuecqContentsyncPathrewritertransformerClientlibraryPattern != null) {
            cqContentsyncPathrewritertransformerClientlibraryPattern = valuecqContentsyncPathrewritertransformerClientlibraryPattern;
        } else {
            cqContentsyncPathrewritertransformerClientlibraryPattern = null;
        }
        String valuecqContentsyncPathrewritertransformerClientlibraryReplace = request().getQueryString("cq.contentsync.pathrewritertransformer.clientlibrary.replace");
        String cqContentsyncPathrewritertransformerClientlibraryReplace;
        if (valuecqContentsyncPathrewritertransformerClientlibraryReplace != null) {
            cqContentsyncPathrewritertransformerClientlibraryReplace = valuecqContentsyncPathrewritertransformerClientlibraryReplace;
        } else {
            cqContentsyncPathrewritertransformerClientlibraryReplace = null;
        }
        ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorInfo obj = imp.comDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactor(post, apply, delete, action, $location, propertylist, cqContentsyncPathrewritertransformerMappingLinks, cqContentsyncPathrewritertransformerMappingClientlibs, cqContentsyncPathrewritertransformerMappingImages, cqContentsyncPathrewritertransformerAttributePattern, cqContentsyncPathrewritertransformerClientlibraryPattern, cqContentsyncPathrewritertransformerClientlibraryReplace);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqWcmCoreImplAuthoringUIModeServiceImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueauthoringUIModeServiceDefault = request().getQueryString("authoringUIModeService.default");
        String authoringUIModeServiceDefault;
        if (valueauthoringUIModeServiceDefault != null) {
            authoringUIModeServiceDefault = valueauthoringUIModeServiceDefault;
        } else {
            authoringUIModeServiceDefault = null;
        }
        ComDayCqWcmCoreImplAuthoringUIModeServiceImplInfo obj = imp.comDayCqWcmCoreImplAuthoringUIModeServiceImpl(post, apply, delete, action, $location, propertylist, authoringUIModeServiceDefault);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqWcmCoreImplCommandsWCMCommandServlet() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] wcmcommandservletDeleteWhitelistArray = request().queryString().get("wcmcommandservlet.delete_whitelist");
        List<String> wcmcommandservletDeleteWhitelistList = OpenAPIUtils.parametersToList("multi", wcmcommandservletDeleteWhitelistArray);
        List<String> wcmcommandservletDeleteWhitelist = new ArrayList<String>();
        for (String curParam : wcmcommandservletDeleteWhitelistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                wcmcommandservletDeleteWhitelist.add(curParam);
            }
        }
        ComDayCqWcmCoreImplCommandsWCMCommandServletInfo obj = imp.comDayCqWcmCoreImplCommandsWCMCommandServlet(post, apply, delete, action, $location, propertylist, wcmcommandservletDeleteWhitelist);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuedimDefaultMode = request().getQueryString("dim.default.mode");
        String dimDefaultMode;
        if (valuedimDefaultMode != null) {
            dimDefaultMode = valuedimDefaultMode;
        } else {
            dimDefaultMode = null;
        }
        String valuedimAppcacheEnabled = request().getQueryString("dim.appcache.enabled");
        Boolean dimAppcacheEnabled;
        if (valuedimAppcacheEnabled != null) {
            dimAppcacheEnabled = Boolean.valueOf(valuedimAppcacheEnabled);
        } else {
            dimAppcacheEnabled = null;
        }
        ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplInfo obj = imp.comDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImpl(post, apply, delete, action, $location, propertylist, dimDefaultMode, dimAppcacheEnabled);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqWcmCoreImplEventPageEventAuditListener() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueconfigured = request().getQueryString("configured");
        String configured;
        if (valueconfigured != null) {
            configured = valueconfigured;
        } else {
            configured = null;
        }
        ComDayCqWcmCoreImplEventPageEventAuditListenerInfo obj = imp.comDayCqWcmCoreImplEventPageEventAuditListener(post, apply, delete, action, $location, propertylist, configured);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqWcmCoreImplEventPagePostProcessor() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] pathsArray = request().queryString().get("paths");
        List<String> pathsList = OpenAPIUtils.parametersToList("multi", pathsArray);
        List<String> paths = new ArrayList<String>();
        for (String curParam : pathsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                paths.add(curParam);
            }
        }
        ComDayCqWcmCoreImplEventPagePostProcessorInfo obj = imp.comDayCqWcmCoreImplEventPagePostProcessor(post, apply, delete, action, $location, propertylist, paths);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqWcmCoreImplEventRepositoryChangeEventListener() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] pathsArray = request().queryString().get("paths");
        List<String> pathsList = OpenAPIUtils.parametersToList("multi", pathsArray);
        List<String> paths = new ArrayList<String>();
        for (String curParam : pathsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                paths.add(curParam);
            }
        }
        String[] excludedPathsArray = request().queryString().get("excludedPaths");
        List<String> excludedPathsList = OpenAPIUtils.parametersToList("multi", excludedPathsArray);
        List<String> excludedPaths = new ArrayList<String>();
        for (String curParam : excludedPathsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                excludedPaths.add(curParam);
            }
        }
        ComDayCqWcmCoreImplEventRepositoryChangeEventListenerInfo obj = imp.comDayCqWcmCoreImplEventRepositoryChangeEventListener(post, apply, delete, action, $location, propertylist, paths, excludedPaths);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqWcmCoreImplEventTemplatePostProcessor() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuepaths = request().getQueryString("paths");
        String paths;
        if (valuepaths != null) {
            paths = valuepaths;
        } else {
            paths = null;
        }
        ComDayCqWcmCoreImplEventTemplatePostProcessorInfo obj = imp.comDayCqWcmCoreImplEventTemplatePostProcessor(post, apply, delete, action, $location, propertylist, paths);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqWcmCoreImplLanguageManagerImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuelangmgrListPath = request().getQueryString("langmgr.list.path");
        String langmgrListPath;
        if (valuelangmgrListPath != null) {
            langmgrListPath = valuelangmgrListPath;
        } else {
            langmgrListPath = null;
        }
        String[] langmgrCountryDefaultArray = request().queryString().get("langmgr.country.default");
        List<String> langmgrCountryDefaultList = OpenAPIUtils.parametersToList("multi", langmgrCountryDefaultArray);
        List<String> langmgrCountryDefault = new ArrayList<String>();
        for (String curParam : langmgrCountryDefaultList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                langmgrCountryDefault.add(curParam);
            }
        }
        ComDayCqWcmCoreImplLanguageManagerImplInfo obj = imp.comDayCqWcmCoreImplLanguageManagerImpl(post, apply, delete, action, $location, propertylist, langmgrListPath, langmgrCountryDefault);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqWcmCoreImplLinkCheckerConfigurationFactoryImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuelinkExpiredPrefix = request().getQueryString("link.expired.prefix");
        String linkExpiredPrefix;
        if (valuelinkExpiredPrefix != null) {
            linkExpiredPrefix = valuelinkExpiredPrefix;
        } else {
            linkExpiredPrefix = null;
        }
        String valuelinkExpiredRemove = request().getQueryString("link.expired.remove");
        Boolean linkExpiredRemove;
        if (valuelinkExpiredRemove != null) {
            linkExpiredRemove = Boolean.valueOf(valuelinkExpiredRemove);
        } else {
            linkExpiredRemove = null;
        }
        String valuelinkExpiredSuffix = request().getQueryString("link.expired.suffix");
        String linkExpiredSuffix;
        if (valuelinkExpiredSuffix != null) {
            linkExpiredSuffix = valuelinkExpiredSuffix;
        } else {
            linkExpiredSuffix = null;
        }
        String valuelinkInvalidPrefix = request().getQueryString("link.invalid.prefix");
        String linkInvalidPrefix;
        if (valuelinkInvalidPrefix != null) {
            linkInvalidPrefix = valuelinkInvalidPrefix;
        } else {
            linkInvalidPrefix = null;
        }
        String valuelinkInvalidRemove = request().getQueryString("link.invalid.remove");
        Boolean linkInvalidRemove;
        if (valuelinkInvalidRemove != null) {
            linkInvalidRemove = Boolean.valueOf(valuelinkInvalidRemove);
        } else {
            linkInvalidRemove = null;
        }
        String valuelinkInvalidSuffix = request().getQueryString("link.invalid.suffix");
        String linkInvalidSuffix;
        if (valuelinkInvalidSuffix != null) {
            linkInvalidSuffix = valuelinkInvalidSuffix;
        } else {
            linkInvalidSuffix = null;
        }
        String valuelinkPredatedPrefix = request().getQueryString("link.predated.prefix");
        String linkPredatedPrefix;
        if (valuelinkPredatedPrefix != null) {
            linkPredatedPrefix = valuelinkPredatedPrefix;
        } else {
            linkPredatedPrefix = null;
        }
        String valuelinkPredatedRemove = request().getQueryString("link.predated.remove");
        Boolean linkPredatedRemove;
        if (valuelinkPredatedRemove != null) {
            linkPredatedRemove = Boolean.valueOf(valuelinkPredatedRemove);
        } else {
            linkPredatedRemove = null;
        }
        String valuelinkPredatedSuffix = request().getQueryString("link.predated.suffix");
        String linkPredatedSuffix;
        if (valuelinkPredatedSuffix != null) {
            linkPredatedSuffix = valuelinkPredatedSuffix;
        } else {
            linkPredatedSuffix = null;
        }
        String[] linkWcmmodesArray = request().queryString().get("link.wcmmodes");
        List<String> linkWcmmodesList = OpenAPIUtils.parametersToList("multi", linkWcmmodesArray);
        List<String> linkWcmmodes = new ArrayList<String>();
        for (String curParam : linkWcmmodesList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                linkWcmmodes.add(curParam);
            }
        }
        ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplInfo obj = imp.comDayCqWcmCoreImplLinkCheckerConfigurationFactoryImpl(post, apply, delete, action, $location, propertylist, linkExpiredPrefix, linkExpiredRemove, linkExpiredSuffix, linkInvalidPrefix, linkInvalidRemove, linkInvalidSuffix, linkPredatedPrefix, linkPredatedRemove, linkPredatedSuffix, linkWcmmodes);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqWcmCoreImplPagePageInfoAggregatorImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuepageInfoProviderPropertyRegexDefault = request().getQueryString("page.info.provider.property.regex.default");
        String pageInfoProviderPropertyRegexDefault;
        if (valuepageInfoProviderPropertyRegexDefault != null) {
            pageInfoProviderPropertyRegexDefault = valuepageInfoProviderPropertyRegexDefault;
        } else {
            pageInfoProviderPropertyRegexDefault = null;
        }
        String valuepageInfoProviderPropertyName = request().getQueryString("page.info.provider.property.name");
        String pageInfoProviderPropertyName;
        if (valuepageInfoProviderPropertyName != null) {
            pageInfoProviderPropertyName = valuepageInfoProviderPropertyName;
        } else {
            pageInfoProviderPropertyName = null;
        }
        ComDayCqWcmCoreImplPagePageInfoAggregatorImplInfo obj = imp.comDayCqWcmCoreImplPagePageInfoAggregatorImpl(post, apply, delete, action, $location, propertylist, pageInfoProviderPropertyRegexDefault, pageInfoProviderPropertyName);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqWcmCoreImplPagePageManagerFactoryImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueillegalCharMapping = request().getQueryString("illegalCharMapping");
        String illegalCharMapping;
        if (valueillegalCharMapping != null) {
            illegalCharMapping = valueillegalCharMapping;
        } else {
            illegalCharMapping = null;
        }
        String valuepageSubTreeActivationCheck = request().getQueryString("pageSubTreeActivationCheck");
        Boolean pageSubTreeActivationCheck;
        if (valuepageSubTreeActivationCheck != null) {
            pageSubTreeActivationCheck = Boolean.valueOf(valuepageSubTreeActivationCheck);
        } else {
            pageSubTreeActivationCheck = null;
        }
        ComDayCqWcmCoreImplPagePageManagerFactoryImplInfo obj = imp.comDayCqWcmCoreImplPagePageManagerFactoryImpl(post, apply, delete, action, $location, propertylist, illegalCharMapping, pageSubTreeActivationCheck);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqWcmCoreImplReferencesContentContentReferenceConfig() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] contentReferenceConfigResourceTypesArray = request().queryString().get("contentReferenceConfig.resourceTypes");
        List<String> contentReferenceConfigResourceTypesList = OpenAPIUtils.parametersToList("multi", contentReferenceConfigResourceTypesArray);
        List<String> contentReferenceConfigResourceTypes = new ArrayList<String>();
        for (String curParam : contentReferenceConfigResourceTypesList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                contentReferenceConfigResourceTypes.add(curParam);
            }
        }
        ComDayCqWcmCoreImplReferencesContentContentReferenceConfigInfo obj = imp.comDayCqWcmCoreImplReferencesContentContentReferenceConfig(post, apply, delete, action, $location, propertylist, contentReferenceConfigResourceTypes);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqWcmCoreImplServletsContentfinderAssetViewHandler() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuedamShowexpired = request().getQueryString("dam.showexpired");
        Boolean damShowexpired;
        if (valuedamShowexpired != null) {
            damShowexpired = Boolean.valueOf(valuedamShowexpired);
        } else {
            damShowexpired = null;
        }
        String valuedamShowhidden = request().getQueryString("dam.showhidden");
        Boolean damShowhidden;
        if (valuedamShowhidden != null) {
            damShowhidden = Boolean.valueOf(valuedamShowhidden);
        } else {
            damShowhidden = null;
        }
        String valuetagTitleSearch = request().getQueryString("tagTitleSearch");
        Boolean tagTitleSearch;
        if (valuetagTitleSearch != null) {
            tagTitleSearch = Boolean.valueOf(valuetagTitleSearch);
        } else {
            tagTitleSearch = null;
        }
        String valueguessTotal = request().getQueryString("guessTotal");
        String guessTotal;
        if (valueguessTotal != null) {
            guessTotal = valueguessTotal;
        } else {
            guessTotal = null;
        }
        String valuedamExpiryProperty = request().getQueryString("dam.expiryProperty");
        String damExpiryProperty;
        if (valuedamExpiryProperty != null) {
            damExpiryProperty = valuedamExpiryProperty;
        } else {
            damExpiryProperty = null;
        }
        ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerInfo obj = imp.comDayCqWcmCoreImplServletsContentfinderAssetViewHandler(post, apply, delete, action, $location, propertylist, damShowexpired, damShowhidden, tagTitleSearch, guessTotal, damExpiryProperty);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqWcmCoreImplServletsContentfinderConnectorConnectorVie() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] itemResourceTypesArray = request().queryString().get("item.resource.types");
        List<String> itemResourceTypesList = OpenAPIUtils.parametersToList("multi", itemResourceTypesArray);
        List<String> itemResourceTypes = new ArrayList<String>();
        for (String curParam : itemResourceTypesList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                itemResourceTypes.add(curParam);
            }
        }
        ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieInfo obj = imp.comDayCqWcmCoreImplServletsContentfinderConnectorConnectorVie(post, apply, delete, action, $location, propertylist, itemResourceTypes);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqWcmCoreImplServletsContentfinderPageViewHandler() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueguessTotal = request().getQueryString("guessTotal");
        String guessTotal;
        if (valueguessTotal != null) {
            guessTotal = valueguessTotal;
        } else {
            guessTotal = null;
        }
        String valuetagTitleSearch = request().getQueryString("tagTitleSearch");
        Boolean tagTitleSearch;
        if (valuetagTitleSearch != null) {
            tagTitleSearch = Boolean.valueOf(valuetagTitleSearch);
        } else {
            tagTitleSearch = null;
        }
        ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerInfo obj = imp.comDayCqWcmCoreImplServletsContentfinderPageViewHandler(post, apply, delete, action, $location, propertylist, guessTotal, tagTitleSearch);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqWcmCoreImplServletsFindReplaceServlet() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] scopeArray = request().queryString().get("scope");
        List<String> scopeList = OpenAPIUtils.parametersToList("multi", scopeArray);
        List<String> scope = new ArrayList<String>();
        for (String curParam : scopeList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                scope.add(curParam);
            }
        }
        ComDayCqWcmCoreImplServletsFindReplaceServletInfo obj = imp.comDayCqWcmCoreImplServletsFindReplaceServlet(post, apply, delete, action, $location, propertylist, scope);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqWcmCoreImplServletsReferenceSearchServlet() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuereferencesearchservletMaxReferencesPerPage = request().getQueryString("referencesearchservlet.maxReferencesPerPage");
        Integer referencesearchservletMaxReferencesPerPage;
        if (valuereferencesearchservletMaxReferencesPerPage != null) {
            referencesearchservletMaxReferencesPerPage = Integer.parseInt(valuereferencesearchservletMaxReferencesPerPage);
        } else {
            referencesearchservletMaxReferencesPerPage = null;
        }
        String valuereferencesearchservletMaxPages = request().getQueryString("referencesearchservlet.maxPages");
        Integer referencesearchservletMaxPages;
        if (valuereferencesearchservletMaxPages != null) {
            referencesearchservletMaxPages = Integer.parseInt(valuereferencesearchservletMaxPages);
        } else {
            referencesearchservletMaxPages = null;
        }
        ComDayCqWcmCoreImplServletsReferenceSearchServletInfo obj = imp.comDayCqWcmCoreImplServletsReferenceSearchServlet(post, apply, delete, action, $location, propertylist, referencesearchservletMaxReferencesPerPage, referencesearchservletMaxPages);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqWcmCoreImplServletsThumbnailServlet() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueworkspace = request().getQueryString("workspace");
        String workspace;
        if (valueworkspace != null) {
            workspace = valueworkspace;
        } else {
            workspace = null;
        }
        String[] dimensionsArray = request().queryString().get("dimensions");
        List<String> dimensionsList = OpenAPIUtils.parametersToList("multi", dimensionsArray);
        List<String> dimensions = new ArrayList<String>();
        for (String curParam : dimensionsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                dimensions.add(curParam);
            }
        }
        ComDayCqWcmCoreImplServletsThumbnailServletInfo obj = imp.comDayCqWcmCoreImplServletsThumbnailServlet(post, apply, delete, action, $location, propertylist, workspace, dimensions);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqWcmCoreImplUtilsDefaultPageNameValidator() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuenonValidChars = request().getQueryString("nonValidChars");
        String nonValidChars;
        if (valuenonValidChars != null) {
            nonValidChars = valuenonValidChars;
        } else {
            nonValidChars = null;
        }
        ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorInfo obj = imp.comDayCqWcmCoreImplUtilsDefaultPageNameValidator(post, apply, delete, action, $location, propertylist, nonValidChars);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqWcmCoreImplVariantsPageVariantsProviderImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuedefaultExternalizerDomain = request().getQueryString("default.externalizer.domain");
        String defaultExternalizerDomain;
        if (valuedefaultExternalizerDomain != null) {
            defaultExternalizerDomain = valuedefaultExternalizerDomain;
        } else {
            defaultExternalizerDomain = null;
        }
        ComDayCqWcmCoreImplVariantsPageVariantsProviderImplInfo obj = imp.comDayCqWcmCoreImplVariantsPageVariantsProviderImpl(post, apply, delete, action, $location, propertylist, defaultExternalizerDomain);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqWcmCoreImplVersionManagerImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueversionmanagerCreateVersionOnActivation = request().getQueryString("versionmanager.createVersionOnActivation");
        Boolean versionmanagerCreateVersionOnActivation;
        if (valueversionmanagerCreateVersionOnActivation != null) {
            versionmanagerCreateVersionOnActivation = Boolean.valueOf(valueversionmanagerCreateVersionOnActivation);
        } else {
            versionmanagerCreateVersionOnActivation = null;
        }
        String valueversionmanagerPurgingEnabled = request().getQueryString("versionmanager.purgingEnabled");
        Boolean versionmanagerPurgingEnabled;
        if (valueversionmanagerPurgingEnabled != null) {
            versionmanagerPurgingEnabled = Boolean.valueOf(valueversionmanagerPurgingEnabled);
        } else {
            versionmanagerPurgingEnabled = null;
        }
        String[] versionmanagerPurgePathsArray = request().queryString().get("versionmanager.purgePaths");
        List<String> versionmanagerPurgePathsList = OpenAPIUtils.parametersToList("multi", versionmanagerPurgePathsArray);
        List<String> versionmanagerPurgePaths = new ArrayList<String>();
        for (String curParam : versionmanagerPurgePathsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                versionmanagerPurgePaths.add(curParam);
            }
        }
        String[] versionmanagerIvPathsArray = request().queryString().get("versionmanager.ivPaths");
        List<String> versionmanagerIvPathsList = OpenAPIUtils.parametersToList("multi", versionmanagerIvPathsArray);
        List<String> versionmanagerIvPaths = new ArrayList<String>();
        for (String curParam : versionmanagerIvPathsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                versionmanagerIvPaths.add(curParam);
            }
        }
        String valueversionmanagerMaxAgeDays = request().getQueryString("versionmanager.maxAgeDays");
        Integer versionmanagerMaxAgeDays;
        if (valueversionmanagerMaxAgeDays != null) {
            versionmanagerMaxAgeDays = Integer.parseInt(valueversionmanagerMaxAgeDays);
        } else {
            versionmanagerMaxAgeDays = null;
        }
        String valueversionmanagerMaxNumberVersions = request().getQueryString("versionmanager.maxNumberVersions");
        Integer versionmanagerMaxNumberVersions;
        if (valueversionmanagerMaxNumberVersions != null) {
            versionmanagerMaxNumberVersions = Integer.parseInt(valueversionmanagerMaxNumberVersions);
        } else {
            versionmanagerMaxNumberVersions = null;
        }
        String valueversionmanagerMinNumberVersions = request().getQueryString("versionmanager.minNumberVersions");
        Integer versionmanagerMinNumberVersions;
        if (valueversionmanagerMinNumberVersions != null) {
            versionmanagerMinNumberVersions = Integer.parseInt(valueversionmanagerMinNumberVersions);
        } else {
            versionmanagerMinNumberVersions = null;
        }
        ComDayCqWcmCoreImplVersionManagerImplInfo obj = imp.comDayCqWcmCoreImplVersionManagerImpl(post, apply, delete, action, $location, propertylist, versionmanagerCreateVersionOnActivation, versionmanagerPurgingEnabled, versionmanagerPurgePaths, versionmanagerIvPaths, versionmanagerMaxAgeDays, versionmanagerMaxNumberVersions, versionmanagerMinNumberVersions);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqWcmCoreImplVersionPurgeTask() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] versionpurgePathsArray = request().queryString().get("versionpurge.paths");
        List<String> versionpurgePathsList = OpenAPIUtils.parametersToList("multi", versionpurgePathsArray);
        List<String> versionpurgePaths = new ArrayList<String>();
        for (String curParam : versionpurgePathsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                versionpurgePaths.add(curParam);
            }
        }
        String valueversionpurgeRecursive = request().getQueryString("versionpurge.recursive");
        Boolean versionpurgeRecursive;
        if (valueversionpurgeRecursive != null) {
            versionpurgeRecursive = Boolean.valueOf(valueversionpurgeRecursive);
        } else {
            versionpurgeRecursive = null;
        }
        String valueversionpurgeMaxVersions = request().getQueryString("versionpurge.maxVersions");
        Integer versionpurgeMaxVersions;
        if (valueversionpurgeMaxVersions != null) {
            versionpurgeMaxVersions = Integer.parseInt(valueversionpurgeMaxVersions);
        } else {
            versionpurgeMaxVersions = null;
        }
        String valueversionpurgeMinVersions = request().getQueryString("versionpurge.minVersions");
        Integer versionpurgeMinVersions;
        if (valueversionpurgeMinVersions != null) {
            versionpurgeMinVersions = Integer.parseInt(valueversionpurgeMinVersions);
        } else {
            versionpurgeMinVersions = null;
        }
        String valueversionpurgeMaxAgeDays = request().getQueryString("versionpurge.maxAgeDays");
        Integer versionpurgeMaxAgeDays;
        if (valueversionpurgeMaxAgeDays != null) {
            versionpurgeMaxAgeDays = Integer.parseInt(valueversionpurgeMaxAgeDays);
        } else {
            versionpurgeMaxAgeDays = null;
        }
        ComDayCqWcmCoreImplVersionPurgeTaskInfo obj = imp.comDayCqWcmCoreImplVersionPurgeTask(post, apply, delete, action, $location, propertylist, versionpurgePaths, versionpurgeRecursive, versionpurgeMaxVersions, versionpurgeMinVersions, versionpurgeMaxAgeDays);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqWcmCoreImplWCMDebugFilter() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuewcmdbgfilterEnabled = request().getQueryString("wcmdbgfilter.enabled");
        Boolean wcmdbgfilterEnabled;
        if (valuewcmdbgfilterEnabled != null) {
            wcmdbgfilterEnabled = Boolean.valueOf(valuewcmdbgfilterEnabled);
        } else {
            wcmdbgfilterEnabled = null;
        }
        String valuewcmdbgfilterJspDebug = request().getQueryString("wcmdbgfilter.jspDebug");
        Boolean wcmdbgfilterJspDebug;
        if (valuewcmdbgfilterJspDebug != null) {
            wcmdbgfilterJspDebug = Boolean.valueOf(valuewcmdbgfilterJspDebug);
        } else {
            wcmdbgfilterJspDebug = null;
        }
        ComDayCqWcmCoreImplWCMDebugFilterInfo obj = imp.comDayCqWcmCoreImplWCMDebugFilter(post, apply, delete, action, $location, propertylist, wcmdbgfilterEnabled, wcmdbgfilterJspDebug);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqWcmCoreImplWCMDeveloperModeFilter() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuewcmdevmodefilterEnabled = request().getQueryString("wcmdevmodefilter.enabled");
        Boolean wcmdevmodefilterEnabled;
        if (valuewcmdevmodefilterEnabled != null) {
            wcmdevmodefilterEnabled = Boolean.valueOf(valuewcmdevmodefilterEnabled);
        } else {
            wcmdevmodefilterEnabled = null;
        }
        ComDayCqWcmCoreImplWCMDeveloperModeFilterInfo obj = imp.comDayCqWcmCoreImplWCMDeveloperModeFilter(post, apply, delete, action, $location, propertylist, wcmdevmodefilterEnabled);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqWcmCoreImplWarpTimeWarpFilter() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuefilterOrder = request().getQueryString("filter.order");
        String filterOrder;
        if (valuefilterOrder != null) {
            filterOrder = valuefilterOrder;
        } else {
            filterOrder = null;
        }
        String valuefilterScope = request().getQueryString("filter.scope");
        String filterScope;
        if (valuefilterScope != null) {
            filterScope = valuefilterScope;
        } else {
            filterScope = null;
        }
        ComDayCqWcmCoreImplWarpTimeWarpFilterInfo obj = imp.comDayCqWcmCoreImplWarpTimeWarpFilter(post, apply, delete, action, $location, propertylist, filterOrder, filterScope);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqWcmCoreMvtMVTStatisticsImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuemvtstatisticsTrackingurl = request().getQueryString("mvtstatistics.trackingurl");
        String mvtstatisticsTrackingurl;
        if (valuemvtstatisticsTrackingurl != null) {
            mvtstatisticsTrackingurl = valuemvtstatisticsTrackingurl;
        } else {
            mvtstatisticsTrackingurl = null;
        }
        ComDayCqWcmCoreMvtMVTStatisticsImplInfo obj = imp.comDayCqWcmCoreMvtMVTStatisticsImpl(post, apply, delete, action, $location, propertylist, mvtstatisticsTrackingurl);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqWcmCoreStatsPageViewStatisticsImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuepageviewstatisticsTrackingurl = request().getQueryString("pageviewstatistics.trackingurl");
        String pageviewstatisticsTrackingurl;
        if (valuepageviewstatisticsTrackingurl != null) {
            pageviewstatisticsTrackingurl = valuepageviewstatisticsTrackingurl;
        } else {
            pageviewstatisticsTrackingurl = null;
        }
        String valuepageviewstatisticsTrackingscriptEnabled = request().getQueryString("pageviewstatistics.trackingscript.enabled");
        String pageviewstatisticsTrackingscriptEnabled;
        if (valuepageviewstatisticsTrackingscriptEnabled != null) {
            pageviewstatisticsTrackingscriptEnabled = valuepageviewstatisticsTrackingscriptEnabled;
        } else {
            pageviewstatisticsTrackingscriptEnabled = null;
        }
        ComDayCqWcmCoreStatsPageViewStatisticsImplInfo obj = imp.comDayCqWcmCoreStatsPageViewStatisticsImpl(post, apply, delete, action, $location, propertylist, pageviewstatisticsTrackingurl, pageviewstatisticsTrackingscriptEnabled);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqWcmCoreWCMRequestFilter() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuewcmfilterMode = request().getQueryString("wcmfilter.mode");
        String wcmfilterMode;
        if (valuewcmfilterMode != null) {
            wcmfilterMode = valuewcmfilterMode;
        } else {
            wcmfilterMode = null;
        }
        ComDayCqWcmCoreWCMRequestFilterInfo obj = imp.comDayCqWcmCoreWCMRequestFilter(post, apply, delete, action, $location, propertylist, wcmfilterMode);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqWcmDesignimporterDesignPackageImporter() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] extractFilterArray = request().queryString().get("extract.filter");
        List<String> extractFilterList = OpenAPIUtils.parametersToList("multi", extractFilterArray);
        List<String> extractFilter = new ArrayList<String>();
        for (String curParam : extractFilterList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                extractFilter.add(curParam);
            }
        }
        ComDayCqWcmDesignimporterDesignPackageImporterInfo obj = imp.comDayCqWcmDesignimporterDesignPackageImporter(post, apply, delete, action, $location, propertylist, extractFilter);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqWcmDesignimporterImplCanvasBuilderImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuefilepattern = request().getQueryString("filepattern");
        String filepattern;
        if (valuefilepattern != null) {
            filepattern = valuefilepattern;
        } else {
            filepattern = null;
        }
        String valuebuildPageNodes = request().getQueryString("build.page.nodes");
        Boolean buildPageNodes;
        if (valuebuildPageNodes != null) {
            buildPageNodes = Boolean.valueOf(valuebuildPageNodes);
        } else {
            buildPageNodes = null;
        }
        String valuebuildClientLibs = request().getQueryString("build.client.libs");
        Boolean buildClientLibs;
        if (valuebuildClientLibs != null) {
            buildClientLibs = Boolean.valueOf(valuebuildClientLibs);
        } else {
            buildClientLibs = null;
        }
        String valuebuildCanvasComponent = request().getQueryString("build.canvas.component");
        Boolean buildCanvasComponent;
        if (valuebuildCanvasComponent != null) {
            buildCanvasComponent = Boolean.valueOf(valuebuildCanvasComponent);
        } else {
            buildCanvasComponent = null;
        }
        ComDayCqWcmDesignimporterImplCanvasBuilderImplInfo obj = imp.comDayCqWcmDesignimporterImplCanvasBuilderImpl(post, apply, delete, action, $location, propertylist, filepattern, buildPageNodes, buildClientLibs, buildCanvasComponent);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqWcmDesignimporterImplCanvasPageDeleteHandler() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueminThreadPoolSize = request().getQueryString("minThreadPoolSize");
        Integer minThreadPoolSize;
        if (valueminThreadPoolSize != null) {
            minThreadPoolSize = Integer.parseInt(valueminThreadPoolSize);
        } else {
            minThreadPoolSize = null;
        }
        String valuemaxThreadPoolSize = request().getQueryString("maxThreadPoolSize");
        Integer maxThreadPoolSize;
        if (valuemaxThreadPoolSize != null) {
            maxThreadPoolSize = Integer.parseInt(valuemaxThreadPoolSize);
        } else {
            maxThreadPoolSize = null;
        }
        ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerInfo obj = imp.comDayCqWcmDesignimporterImplCanvasPageDeleteHandler(post, apply, delete, action, $location, propertylist, minThreadPoolSize, maxThreadPoolSize);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqWcmDesignimporterImplEntryPreprocessorImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuesearchPattern = request().getQueryString("search.pattern");
        String searchPattern;
        if (valuesearchPattern != null) {
            searchPattern = valuesearchPattern;
        } else {
            searchPattern = null;
        }
        String valuereplacePattern = request().getQueryString("replace.pattern");
        String replacePattern;
        if (valuereplacePattern != null) {
            replacePattern = valuereplacePattern;
        } else {
            replacePattern = null;
        }
        ComDayCqWcmDesignimporterImplEntryPreprocessorImplInfo obj = imp.comDayCqWcmDesignimporterImplEntryPreprocessorImpl(post, apply, delete, action, $location, propertylist, searchPattern, replacePattern);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqWcmDesignimporterImplMobileCanvasBuilderImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuefilepattern = request().getQueryString("filepattern");
        String filepattern;
        if (valuefilepattern != null) {
            filepattern = valuefilepattern;
        } else {
            filepattern = null;
        }
        String[] deviceGroupsArray = request().queryString().get("device.groups");
        List<String> deviceGroupsList = OpenAPIUtils.parametersToList("multi", deviceGroupsArray);
        List<String> deviceGroups = new ArrayList<String>();
        for (String curParam : deviceGroupsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                deviceGroups.add(curParam);
            }
        }
        String valuebuildPageNodes = request().getQueryString("build.page.nodes");
        Boolean buildPageNodes;
        if (valuebuildPageNodes != null) {
            buildPageNodes = Boolean.valueOf(valuebuildPageNodes);
        } else {
            buildPageNodes = null;
        }
        String valuebuildClientLibs = request().getQueryString("build.client.libs");
        Boolean buildClientLibs;
        if (valuebuildClientLibs != null) {
            buildClientLibs = Boolean.valueOf(valuebuildClientLibs);
        } else {
            buildClientLibs = null;
        }
        String valuebuildCanvasComponent = request().getQueryString("build.canvas.component");
        Boolean buildCanvasComponent;
        if (valuebuildCanvasComponent != null) {
            buildCanvasComponent = Boolean.valueOf(valuebuildCanvasComponent);
        } else {
            buildCanvasComponent = null;
        }
        ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplInfo obj = imp.comDayCqWcmDesignimporterImplMobileCanvasBuilderImpl(post, apply, delete, action, $location, propertylist, filepattern, deviceGroups, buildPageNodes, buildClientLibs, buildCanvasComponent);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqWcmDesignimporterParserTaghandlersFactoryCanvasCompone() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueserviceRanking = request().getQueryString("service.ranking");
        Integer serviceRanking;
        if (valueserviceRanking != null) {
            serviceRanking = Integer.parseInt(valueserviceRanking);
        } else {
            serviceRanking = null;
        }
        String valuetagpattern = request().getQueryString("tagpattern");
        String tagpattern;
        if (valuetagpattern != null) {
            tagpattern = valuetagpattern;
        } else {
            tagpattern = null;
        }
        ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeInfo obj = imp.comDayCqWcmDesignimporterParserTaghandlersFactoryCanvasCompone(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultCompon() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueserviceRanking = request().getQueryString("service.ranking");
        Integer serviceRanking;
        if (valueserviceRanking != null) {
            serviceRanking = Integer.parseInt(valueserviceRanking);
        } else {
            serviceRanking = null;
        }
        String valuetagpattern = request().getQueryString("tagpattern");
        String tagpattern;
        if (valuetagpattern != null) {
            tagpattern = valuetagpattern;
        } else {
            tagpattern = null;
        }
        ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponInfo obj = imp.comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultCompon(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHan() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueserviceRanking = request().getQueryString("service.ranking");
        Integer serviceRanking;
        if (valueserviceRanking != null) {
            serviceRanking = Integer.parseInt(valueserviceRanking);
        } else {
            serviceRanking = null;
        }
        String valuetagpattern = request().getQueryString("tagpattern");
        String tagpattern;
        if (valuetagpattern != null) {
            tagpattern = valuetagpattern;
        } else {
            tagpattern = null;
        }
        ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanInfo obj = imp.comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHan(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandle() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueserviceRanking = request().getQueryString("service.ranking");
        Integer serviceRanking;
        if (valueserviceRanking != null) {
            serviceRanking = Integer.parseInt(valueserviceRanking);
        } else {
            serviceRanking = null;
        }
        String valuetagpattern = request().getQueryString("tagpattern");
        String tagpattern;
        if (valuetagpattern != null) {
            tagpattern = valuetagpattern;
        } else {
            tagpattern = null;
        }
        ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleInfo obj = imp.comDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandle(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHand() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueserviceRanking = request().getQueryString("service.ranking");
        Integer serviceRanking;
        if (valueserviceRanking != null) {
            serviceRanking = Integer.parseInt(valueserviceRanking);
        } else {
            serviceRanking = null;
        }
        String valuetagpattern = request().getQueryString("tagpattern");
        String tagpattern;
        if (valuetagpattern != null) {
            tagpattern = valuetagpattern;
        } else {
            tagpattern = null;
        }
        ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandInfo obj = imp.comDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHand(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqWcmDesignimporterParserTaghandlersFactoryImageComponen() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueserviceRanking = request().getQueryString("service.ranking");
        Integer serviceRanking;
        if (valueserviceRanking != null) {
            serviceRanking = Integer.parseInt(valueserviceRanking);
        } else {
            serviceRanking = null;
        }
        String valuetagpattern = request().getQueryString("tagpattern");
        String tagpattern;
        if (valuetagpattern != null) {
            tagpattern = valuetagpattern;
        } else {
            tagpattern = null;
        }
        String valuecomponentResourceType = request().getQueryString("component.resourceType");
        String componentResourceType;
        if (valuecomponentResourceType != null) {
            componentResourceType = valuecomponentResourceType;
        } else {
            componentResourceType = null;
        }
        ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenInfo obj = imp.comDayCqWcmDesignimporterParserTaghandlersFactoryImageComponen(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern, componentResourceType);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandler() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueserviceRanking = request().getQueryString("service.ranking");
        Integer serviceRanking;
        if (valueserviceRanking != null) {
            serviceRanking = Integer.parseInt(valueserviceRanking);
        } else {
            serviceRanking = null;
        }
        String valuetagpattern = request().getQueryString("tagpattern");
        String tagpattern;
        if (valuetagpattern != null) {
            tagpattern = valuetagpattern;
        } else {
            tagpattern = null;
        }
        ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerInfo obj = imp.comDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandler(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptT() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueserviceRanking = request().getQueryString("service.ranking");
        Integer serviceRanking;
        if (valueserviceRanking != null) {
            serviceRanking = Integer.parseInt(valueserviceRanking);
        } else {
            serviceRanking = null;
        }
        String valuetagpattern = request().getQueryString("tagpattern");
        String tagpattern;
        if (valuetagpattern != null) {
            tagpattern = valuetagpattern;
        } else {
            tagpattern = null;
        }
        ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTInfo obj = imp.comDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptT(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandle() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueserviceRanking = request().getQueryString("service.ranking");
        Integer serviceRanking;
        if (valueserviceRanking != null) {
            serviceRanking = Integer.parseInt(valueserviceRanking);
        } else {
            serviceRanking = null;
        }
        String valuetagpattern = request().getQueryString("tagpattern");
        String tagpattern;
        if (valuetagpattern != null) {
            tagpattern = valuetagpattern;
        } else {
            tagpattern = null;
        }
        ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleInfo obj = imp.comDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandle(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandle() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueserviceRanking = request().getQueryString("service.ranking");
        Integer serviceRanking;
        if (valueserviceRanking != null) {
            serviceRanking = Integer.parseInt(valueserviceRanking);
        } else {
            serviceRanking = null;
        }
        String valuetagpattern = request().getQueryString("tagpattern");
        String tagpattern;
        if (valuetagpattern != null) {
            tagpattern = valuetagpattern;
        } else {
            tagpattern = null;
        }
        ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleInfo obj = imp.comDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandle(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagH() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueserviceRanking = request().getQueryString("service.ranking");
        Integer serviceRanking;
        if (valueserviceRanking != null) {
            serviceRanking = Integer.parseInt(valueserviceRanking);
        } else {
            serviceRanking = null;
        }
        String valuetagpattern = request().getQueryString("tagpattern");
        String tagpattern;
        if (valuetagpattern != null) {
            tagpattern = valuetagpattern;
        } else {
            tagpattern = null;
        }
        ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHInfo obj = imp.comDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagH(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqWcmDesignimporterParserTaghandlersFactoryParsysCompone() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueserviceRanking = request().getQueryString("service.ranking");
        Integer serviceRanking;
        if (valueserviceRanking != null) {
            serviceRanking = Integer.parseInt(valueserviceRanking);
        } else {
            serviceRanking = null;
        }
        String valuetagpattern = request().getQueryString("tagpattern");
        String tagpattern;
        if (valuetagpattern != null) {
            tagpattern = valuetagpattern;
        } else {
            tagpattern = null;
        }
        String valuecomponentResourceType = request().getQueryString("component.resourceType");
        String componentResourceType;
        if (valuecomponentResourceType != null) {
            componentResourceType = valuecomponentResourceType;
        } else {
            componentResourceType = null;
        }
        ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeInfo obj = imp.comDayCqWcmDesignimporterParserTaghandlersFactoryParsysCompone(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern, componentResourceType);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHand() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueserviceRanking = request().getQueryString("service.ranking");
        Integer serviceRanking;
        if (valueserviceRanking != null) {
            serviceRanking = Integer.parseInt(valueserviceRanking);
        } else {
            serviceRanking = null;
        }
        String valuetagpattern = request().getQueryString("tagpattern");
        String tagpattern;
        if (valuetagpattern != null) {
            tagpattern = valuetagpattern;
        } else {
            tagpattern = null;
        }
        ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandInfo obj = imp.comDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHand(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueserviceRanking = request().getQueryString("service.ranking");
        Integer serviceRanking;
        if (valueserviceRanking != null) {
            serviceRanking = Integer.parseInt(valueserviceRanking);
        } else {
            serviceRanking = null;
        }
        String valuetagpattern = request().getQueryString("tagpattern");
        String tagpattern;
        if (valuetagpattern != null) {
            tagpattern = valuetagpattern;
        } else {
            tagpattern = null;
        }
        ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlInfo obj = imp.comDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandl(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqWcmDesignimporterParserTaghandlersFactoryTextComponent() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueserviceRanking = request().getQueryString("service.ranking");
        Integer serviceRanking;
        if (valueserviceRanking != null) {
            serviceRanking = Integer.parseInt(valueserviceRanking);
        } else {
            serviceRanking = null;
        }
        String valuetagpattern = request().getQueryString("tagpattern");
        String tagpattern;
        if (valuetagpattern != null) {
            tagpattern = valuetagpattern;
        } else {
            tagpattern = null;
        }
        String valuecomponentResourceType = request().getQueryString("component.resourceType");
        String componentResourceType;
        if (valuecomponentResourceType != null) {
            componentResourceType = valuecomponentResourceType;
        } else {
            componentResourceType = null;
        }
        ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentInfo obj = imp.comDayCqWcmDesignimporterParserTaghandlersFactoryTextComponent(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern, componentResourceType);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponen() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueserviceRanking = request().getQueryString("service.ranking");
        Integer serviceRanking;
        if (valueserviceRanking != null) {
            serviceRanking = Integer.parseInt(valueserviceRanking);
        } else {
            serviceRanking = null;
        }
        String valuetagpattern = request().getQueryString("tagpattern");
        String tagpattern;
        if (valuetagpattern != null) {
            tagpattern = valuetagpattern;
        } else {
            tagpattern = null;
        }
        String valuecomponentResourceType = request().getQueryString("component.resourceType");
        String componentResourceType;
        if (valuecomponentResourceType != null) {
            componentResourceType = valuecomponentResourceType;
        } else {
            componentResourceType = null;
        }
        ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenInfo obj = imp.comDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponen(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern, componentResourceType);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueserviceRanking = request().getQueryString("service.ranking");
        Integer serviceRanking;
        if (valueserviceRanking != null) {
            serviceRanking = Integer.parseInt(valueserviceRanking);
        } else {
            serviceRanking = null;
        }
        String valuetagpattern = request().getQueryString("tagpattern");
        String tagpattern;
        if (valuetagpattern != null) {
            tagpattern = valuetagpattern;
        } else {
            tagpattern = null;
        }
        ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlInfo obj = imp.comDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandl(post, apply, delete, action, $location, propertylist, serviceRanking, tagpattern);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqWcmFoundationFormsImplFormChooserServlet() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueserviceName = request().getQueryString("service.name");
        String serviceName;
        if (valueserviceName != null) {
            serviceName = valueserviceName;
        } else {
            serviceName = null;
        }
        String valueslingServletResourceTypes = request().getQueryString("sling.servlet.resourceTypes");
        String slingServletResourceTypes;
        if (valueslingServletResourceTypes != null) {
            slingServletResourceTypes = valueslingServletResourceTypes;
        } else {
            slingServletResourceTypes = null;
        }
        String valueslingServletSelectors = request().getQueryString("sling.servlet.selectors");
        String slingServletSelectors;
        if (valueslingServletSelectors != null) {
            slingServletSelectors = valueslingServletSelectors;
        } else {
            slingServletSelectors = null;
        }
        String[] slingServletMethodsArray = request().queryString().get("sling.servlet.methods");
        List<String> slingServletMethodsList = OpenAPIUtils.parametersToList("multi", slingServletMethodsArray);
        List<String> slingServletMethods = new ArrayList<String>();
        for (String curParam : slingServletMethodsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                slingServletMethods.add(curParam);
            }
        }
        String valueformsFormchooserservletAdvansesearchRequire = request().getQueryString("forms.formchooserservlet.advansesearch.require");
        Boolean formsFormchooserservletAdvansesearchRequire;
        if (valueformsFormchooserservletAdvansesearchRequire != null) {
            formsFormchooserservletAdvansesearchRequire = Boolean.valueOf(valueformsFormchooserservletAdvansesearchRequire);
        } else {
            formsFormchooserservletAdvansesearchRequire = null;
        }
        ComDayCqWcmFoundationFormsImplFormChooserServletInfo obj = imp.comDayCqWcmFoundationFormsImplFormChooserServlet(post, apply, delete, action, $location, propertylist, serviceName, slingServletResourceTypes, slingServletSelectors, slingServletMethods, formsFormchooserservletAdvansesearchRequire);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqWcmFoundationFormsImplFormParagraphPostProcessor() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueformsFormparagraphpostprocessorEnabled = request().getQueryString("forms.formparagraphpostprocessor.enabled");
        Boolean formsFormparagraphpostprocessorEnabled;
        if (valueformsFormparagraphpostprocessorEnabled != null) {
            formsFormparagraphpostprocessorEnabled = Boolean.valueOf(valueformsFormparagraphpostprocessorEnabled);
        } else {
            formsFormparagraphpostprocessorEnabled = null;
        }
        String[] formsFormparagraphpostprocessorFormresourcetypesArray = request().queryString().get("forms.formparagraphpostprocessor.formresourcetypes");
        List<String> formsFormparagraphpostprocessorFormresourcetypesList = OpenAPIUtils.parametersToList("multi", formsFormparagraphpostprocessorFormresourcetypesArray);
        List<String> formsFormparagraphpostprocessorFormresourcetypes = new ArrayList<String>();
        for (String curParam : formsFormparagraphpostprocessorFormresourcetypesList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                formsFormparagraphpostprocessorFormresourcetypes.add(curParam);
            }
        }
        ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorInfo obj = imp.comDayCqWcmFoundationFormsImplFormParagraphPostProcessor(post, apply, delete, action, $location, propertylist, formsFormparagraphpostprocessorEnabled, formsFormparagraphpostprocessorFormresourcetypes);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqWcmFoundationFormsImplFormsHandlingServlet() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuenameWhitelist = request().getQueryString("name.whitelist");
        String nameWhitelist;
        if (valuenameWhitelist != null) {
            nameWhitelist = valuenameWhitelist;
        } else {
            nameWhitelist = null;
        }
        String valueallowExpressions = request().getQueryString("allow.expressions");
        Boolean allowExpressions;
        if (valueallowExpressions != null) {
            allowExpressions = Boolean.valueOf(valueallowExpressions);
        } else {
            allowExpressions = null;
        }
        ComDayCqWcmFoundationFormsImplFormsHandlingServletInfo obj = imp.comDayCqWcmFoundationFormsImplFormsHandlingServlet(post, apply, delete, action, $location, propertylist, nameWhitelist, allowExpressions);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqWcmFoundationFormsImplMailServlet() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueslingServletResourceTypes = request().getQueryString("sling.servlet.resourceTypes");
        String slingServletResourceTypes;
        if (valueslingServletResourceTypes != null) {
            slingServletResourceTypes = valueslingServletResourceTypes;
        } else {
            slingServletResourceTypes = null;
        }
        String valueslingServletSelectors = request().getQueryString("sling.servlet.selectors");
        String slingServletSelectors;
        if (valueslingServletSelectors != null) {
            slingServletSelectors = valueslingServletSelectors;
        } else {
            slingServletSelectors = null;
        }
        String[] resourceWhitelistArray = request().queryString().get("resource.whitelist");
        List<String> resourceWhitelistList = OpenAPIUtils.parametersToList("multi", resourceWhitelistArray);
        List<String> resourceWhitelist = new ArrayList<String>();
        for (String curParam : resourceWhitelistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                resourceWhitelist.add(curParam);
            }
        }
        String valueresourceBlacklist = request().getQueryString("resource.blacklist");
        String resourceBlacklist;
        if (valueresourceBlacklist != null) {
            resourceBlacklist = valueresourceBlacklist;
        } else {
            resourceBlacklist = null;
        }
        ComDayCqWcmFoundationFormsImplMailServletInfo obj = imp.comDayCqWcmFoundationFormsImplMailServlet(post, apply, delete, action, $location, propertylist, slingServletResourceTypes, slingServletSelectors, resourceWhitelist, resourceBlacklist);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqWcmFoundationImplAdaptiveImageComponentServlet() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] adaptSupportedWidthsArray = request().queryString().get("adapt.supported.widths");
        List<String> adaptSupportedWidthsList = OpenAPIUtils.parametersToList("multi", adaptSupportedWidthsArray);
        List<String> adaptSupportedWidths = new ArrayList<String>();
        for (String curParam : adaptSupportedWidthsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                adaptSupportedWidths.add(curParam);
            }
        }
        ComDayCqWcmFoundationImplAdaptiveImageComponentServletInfo obj = imp.comDayCqWcmFoundationImplAdaptiveImageComponentServlet(post, apply, delete, action, $location, propertylist, adaptSupportedWidths);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqWcmFoundationImplHTTPAuthHandler() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuepath = request().getQueryString("path");
        String path;
        if (valuepath != null) {
            path = valuepath;
        } else {
            path = null;
        }
        String valueauthHttpNologin = request().getQueryString("auth.http.nologin");
        Boolean authHttpNologin;
        if (valueauthHttpNologin != null) {
            authHttpNologin = Boolean.valueOf(valueauthHttpNologin);
        } else {
            authHttpNologin = null;
        }
        String valueauthHttpRealm = request().getQueryString("auth.http.realm");
        String authHttpRealm;
        if (valueauthHttpRealm != null) {
            authHttpRealm = valueauthHttpRealm;
        } else {
            authHttpRealm = null;
        }
        String valueauthDefaultLoginpage = request().getQueryString("auth.default.loginpage");
        String authDefaultLoginpage;
        if (valueauthDefaultLoginpage != null) {
            authDefaultLoginpage = valueauthDefaultLoginpage;
        } else {
            authDefaultLoginpage = null;
        }
        String[] authCredFormArray = request().queryString().get("auth.cred.form");
        List<String> authCredFormList = OpenAPIUtils.parametersToList("multi", authCredFormArray);
        List<String> authCredForm = new ArrayList<String>();
        for (String curParam : authCredFormList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                authCredForm.add(curParam);
            }
        }
        String[] authCredUtf8Array = request().queryString().get("auth.cred.utf8");
        List<String> authCredUtf8List = OpenAPIUtils.parametersToList("multi", authCredUtf8Array);
        List<String> authCredUtf8 = new ArrayList<String>();
        for (String curParam : authCredUtf8List) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                authCredUtf8.add(curParam);
            }
        }
        ComDayCqWcmFoundationImplHTTPAuthHandlerInfo obj = imp.comDayCqWcmFoundationImplHTTPAuthHandler(post, apply, delete, action, $location, propertylist, path, authHttpNologin, authHttpRealm, authDefaultLoginpage, authCredForm, authCredUtf8);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqWcmFoundationImplPageImpressionsTracker() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueslingAuthRequirements = request().getQueryString("sling.auth.requirements");
        String slingAuthRequirements;
        if (valueslingAuthRequirements != null) {
            slingAuthRequirements = valueslingAuthRequirements;
        } else {
            slingAuthRequirements = null;
        }
        ComDayCqWcmFoundationImplPageImpressionsTrackerInfo obj = imp.comDayCqWcmFoundationImplPageImpressionsTracker(post, apply, delete, action, $location, propertylist, slingAuthRequirements);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqWcmFoundationImplPageRedirectServlet() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] excludedResourceTypesArray = request().queryString().get("excluded.resource.types");
        List<String> excludedResourceTypesList = OpenAPIUtils.parametersToList("multi", excludedResourceTypesArray);
        List<String> excludedResourceTypes = new ArrayList<String>();
        for (String curParam : excludedResourceTypesList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                excludedResourceTypes.add(curParam);
            }
        }
        ComDayCqWcmFoundationImplPageRedirectServletInfo obj = imp.comDayCqWcmFoundationImplPageRedirectServlet(post, apply, delete, action, $location, propertylist, excludedResourceTypes);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklist() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] defaultAttachmentTypeBlacklistArray = request().queryString().get("default.attachment.type.blacklist");
        List<String> defaultAttachmentTypeBlacklistList = OpenAPIUtils.parametersToList("multi", defaultAttachmentTypeBlacklistArray);
        List<String> defaultAttachmentTypeBlacklist = new ArrayList<String>();
        for (String curParam : defaultAttachmentTypeBlacklistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                defaultAttachmentTypeBlacklist.add(curParam);
            }
        }
        String[] baselineAttachmentTypeBlacklistArray = request().queryString().get("baseline.attachment.type.blacklist");
        List<String> baselineAttachmentTypeBlacklistList = OpenAPIUtils.parametersToList("multi", baselineAttachmentTypeBlacklistArray);
        List<String> baselineAttachmentTypeBlacklist = new ArrayList<String>();
        for (String curParam : baselineAttachmentTypeBlacklistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                baselineAttachmentTypeBlacklist.add(curParam);
            }
        }
        ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistInfo obj = imp.comDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklist(post, apply, delete, action, $location, propertylist, defaultAttachmentTypeBlacklist, baselineAttachmentTypeBlacklist);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] parameterWhitelistArray = request().queryString().get("parameter.whitelist");
        List<String> parameterWhitelistList = OpenAPIUtils.parametersToList("multi", parameterWhitelistArray);
        List<String> parameterWhitelist = new ArrayList<String>();
        for (String curParam : parameterWhitelistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                parameterWhitelist.add(curParam);
            }
        }
        String[] parameterWhitelistPrefixesArray = request().queryString().get("parameter.whitelist.prefixes");
        List<String> parameterWhitelistPrefixesList = OpenAPIUtils.parametersToList("multi", parameterWhitelistPrefixesArray);
        List<String> parameterWhitelistPrefixes = new ArrayList<String>();
        for (String curParam : parameterWhitelistPrefixesList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                parameterWhitelistPrefixes.add(curParam);
            }
        }
        String[] binaryParameterWhitelistArray = request().queryString().get("binary.parameter.whitelist");
        List<String> binaryParameterWhitelistList = OpenAPIUtils.parametersToList("multi", binaryParameterWhitelistArray);
        List<String> binaryParameterWhitelist = new ArrayList<String>();
        for (String curParam : binaryParameterWhitelistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                binaryParameterWhitelist.add(curParam);
            }
        }
        String[] modifierWhitelistArray = request().queryString().get("modifier.whitelist");
        List<String> modifierWhitelistList = OpenAPIUtils.parametersToList("multi", modifierWhitelistArray);
        List<String> modifierWhitelist = new ArrayList<String>();
        for (String curParam : modifierWhitelistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                modifierWhitelist.add(curParam);
            }
        }
        String[] operationWhitelistArray = request().queryString().get("operation.whitelist");
        List<String> operationWhitelistList = OpenAPIUtils.parametersToList("multi", operationWhitelistArray);
        List<String> operationWhitelist = new ArrayList<String>();
        for (String curParam : operationWhitelistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                operationWhitelist.add(curParam);
            }
        }
        String[] operationWhitelistPrefixesArray = request().queryString().get("operation.whitelist.prefixes");
        List<String> operationWhitelistPrefixesList = OpenAPIUtils.parametersToList("multi", operationWhitelistPrefixesArray);
        List<String> operationWhitelistPrefixes = new ArrayList<String>();
        for (String curParam : operationWhitelistPrefixesList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                operationWhitelistPrefixes.add(curParam);
            }
        }
        String[] typehintWhitelistArray = request().queryString().get("typehint.whitelist");
        List<String> typehintWhitelistList = OpenAPIUtils.parametersToList("multi", typehintWhitelistArray);
        List<String> typehintWhitelist = new ArrayList<String>();
        for (String curParam : typehintWhitelistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                typehintWhitelist.add(curParam);
            }
        }
        String[] resourcetypeWhitelistArray = request().queryString().get("resourcetype.whitelist");
        List<String> resourcetypeWhitelistList = OpenAPIUtils.parametersToList("multi", resourcetypeWhitelistArray);
        List<String> resourcetypeWhitelist = new ArrayList<String>();
        for (String curParam : resourcetypeWhitelistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                resourcetypeWhitelist.add(curParam);
            }
        }
        ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplInfo obj = imp.comDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImpl(post, apply, delete, action, $location, propertylist, parameterWhitelist, parameterWhitelistPrefixes, binaryParameterWhitelist, modifierWhitelist, operationWhitelist, operationWhitelistPrefixes, typehintWhitelist, resourcetypeWhitelist);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactory() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuedeviceInfoTransformerEnabled = request().getQueryString("device.info.transformer.enabled");
        Boolean deviceInfoTransformerEnabled;
        if (valuedeviceInfoTransformerEnabled != null) {
            deviceInfoTransformerEnabled = Boolean.valueOf(valuedeviceInfoTransformerEnabled);
        } else {
            deviceInfoTransformerEnabled = null;
        }
        String valuedeviceInfoTransformerCssStyle = request().getQueryString("device.info.transformer.css.style");
        String deviceInfoTransformerCssStyle;
        if (valuedeviceInfoTransformerCssStyle != null) {
            deviceInfoTransformerCssStyle = valuedeviceInfoTransformerCssStyle;
        } else {
            deviceInfoTransformerCssStyle = null;
        }
        ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo obj = imp.comDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactory(post, apply, delete, action, $location, propertylist, deviceInfoTransformerEnabled, deviceInfoTransformerCssStyle);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqWcmMobileCoreImplRedirectRedirectFilter() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueredirectEnabled = request().getQueryString("redirect.enabled");
        Boolean redirectEnabled;
        if (valueredirectEnabled != null) {
            redirectEnabled = Boolean.valueOf(valueredirectEnabled);
        } else {
            redirectEnabled = null;
        }
        String valueredirectStatsEnabled = request().getQueryString("redirect.stats.enabled");
        Boolean redirectStatsEnabled;
        if (valueredirectStatsEnabled != null) {
            redirectStatsEnabled = Boolean.valueOf(valueredirectStatsEnabled);
        } else {
            redirectStatsEnabled = null;
        }
        String[] redirectExtensionsArray = request().queryString().get("redirect.extensions");
        List<String> redirectExtensionsList = OpenAPIUtils.parametersToList("multi", redirectExtensionsArray);
        List<String> redirectExtensions = new ArrayList<String>();
        for (String curParam : redirectExtensionsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                redirectExtensions.add(curParam);
            }
        }
        String[] redirectPathsArray = request().queryString().get("redirect.paths");
        List<String> redirectPathsList = OpenAPIUtils.parametersToList("multi", redirectPathsArray);
        List<String> redirectPaths = new ArrayList<String>();
        for (String curParam : redirectPathsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                redirectPaths.add(curParam);
            }
        }
        ComDayCqWcmMobileCoreImplRedirectRedirectFilterInfo obj = imp.comDayCqWcmMobileCoreImplRedirectRedirectFilter(post, apply, delete, action, $location, propertylist, redirectEnabled, redirectStatsEnabled, redirectExtensions, redirectPaths);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqWcmMsmImplActionsContentCopyActionFactory() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] cqWcmMsmActionExcludednodetypesArray = request().queryString().get("cq.wcm.msm.action.excludednodetypes");
        List<String> cqWcmMsmActionExcludednodetypesList = OpenAPIUtils.parametersToList("multi", cqWcmMsmActionExcludednodetypesArray);
        List<String> cqWcmMsmActionExcludednodetypes = new ArrayList<String>();
        for (String curParam : cqWcmMsmActionExcludednodetypesList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                cqWcmMsmActionExcludednodetypes.add(curParam);
            }
        }
        String[] cqWcmMsmActionExcludedparagraphitemsArray = request().queryString().get("cq.wcm.msm.action.excludedparagraphitems");
        List<String> cqWcmMsmActionExcludedparagraphitemsList = OpenAPIUtils.parametersToList("multi", cqWcmMsmActionExcludedparagraphitemsArray);
        List<String> cqWcmMsmActionExcludedparagraphitems = new ArrayList<String>();
        for (String curParam : cqWcmMsmActionExcludedparagraphitemsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                cqWcmMsmActionExcludedparagraphitems.add(curParam);
            }
        }
        String[] cqWcmMsmActionExcludedpropsArray = request().queryString().get("cq.wcm.msm.action.excludedprops");
        List<String> cqWcmMsmActionExcludedpropsList = OpenAPIUtils.parametersToList("multi", cqWcmMsmActionExcludedpropsArray);
        List<String> cqWcmMsmActionExcludedprops = new ArrayList<String>();
        for (String curParam : cqWcmMsmActionExcludedpropsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                cqWcmMsmActionExcludedprops.add(curParam);
            }
        }
        String valuecontentcopyactionOrderStyle = request().getQueryString("contentcopyaction.order.style");
        String contentcopyactionOrderStyle;
        if (valuecontentcopyactionOrderStyle != null) {
            contentcopyactionOrderStyle = valuecontentcopyactionOrderStyle;
        } else {
            contentcopyactionOrderStyle = null;
        }
        ComDayCqWcmMsmImplActionsContentCopyActionFactoryInfo obj = imp.comDayCqWcmMsmImplActionsContentCopyActionFactory(post, apply, delete, action, $location, propertylist, cqWcmMsmActionExcludednodetypes, cqWcmMsmActionExcludedparagraphitems, cqWcmMsmActionExcludedprops, contentcopyactionOrderStyle);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqWcmMsmImplActionsContentDeleteActionFactory() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] cqWcmMsmActionExcludednodetypesArray = request().queryString().get("cq.wcm.msm.action.excludednodetypes");
        List<String> cqWcmMsmActionExcludednodetypesList = OpenAPIUtils.parametersToList("multi", cqWcmMsmActionExcludednodetypesArray);
        List<String> cqWcmMsmActionExcludednodetypes = new ArrayList<String>();
        for (String curParam : cqWcmMsmActionExcludednodetypesList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                cqWcmMsmActionExcludednodetypes.add(curParam);
            }
        }
        String[] cqWcmMsmActionExcludedparagraphitemsArray = request().queryString().get("cq.wcm.msm.action.excludedparagraphitems");
        List<String> cqWcmMsmActionExcludedparagraphitemsList = OpenAPIUtils.parametersToList("multi", cqWcmMsmActionExcludedparagraphitemsArray);
        List<String> cqWcmMsmActionExcludedparagraphitems = new ArrayList<String>();
        for (String curParam : cqWcmMsmActionExcludedparagraphitemsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                cqWcmMsmActionExcludedparagraphitems.add(curParam);
            }
        }
        String[] cqWcmMsmActionExcludedpropsArray = request().queryString().get("cq.wcm.msm.action.excludedprops");
        List<String> cqWcmMsmActionExcludedpropsList = OpenAPIUtils.parametersToList("multi", cqWcmMsmActionExcludedpropsArray);
        List<String> cqWcmMsmActionExcludedprops = new ArrayList<String>();
        for (String curParam : cqWcmMsmActionExcludedpropsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                cqWcmMsmActionExcludedprops.add(curParam);
            }
        }
        ComDayCqWcmMsmImplActionsContentDeleteActionFactoryInfo obj = imp.comDayCqWcmMsmImplActionsContentDeleteActionFactory(post, apply, delete, action, $location, propertylist, cqWcmMsmActionExcludednodetypes, cqWcmMsmActionExcludedparagraphitems, cqWcmMsmActionExcludedprops);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqWcmMsmImplActionsContentUpdateActionFactory() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] cqWcmMsmActionExcludednodetypesArray = request().queryString().get("cq.wcm.msm.action.excludednodetypes");
        List<String> cqWcmMsmActionExcludednodetypesList = OpenAPIUtils.parametersToList("multi", cqWcmMsmActionExcludednodetypesArray);
        List<String> cqWcmMsmActionExcludednodetypes = new ArrayList<String>();
        for (String curParam : cqWcmMsmActionExcludednodetypesList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                cqWcmMsmActionExcludednodetypes.add(curParam);
            }
        }
        String[] cqWcmMsmActionExcludedparagraphitemsArray = request().queryString().get("cq.wcm.msm.action.excludedparagraphitems");
        List<String> cqWcmMsmActionExcludedparagraphitemsList = OpenAPIUtils.parametersToList("multi", cqWcmMsmActionExcludedparagraphitemsArray);
        List<String> cqWcmMsmActionExcludedparagraphitems = new ArrayList<String>();
        for (String curParam : cqWcmMsmActionExcludedparagraphitemsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                cqWcmMsmActionExcludedparagraphitems.add(curParam);
            }
        }
        String[] cqWcmMsmActionExcludedpropsArray = request().queryString().get("cq.wcm.msm.action.excludedprops");
        List<String> cqWcmMsmActionExcludedpropsList = OpenAPIUtils.parametersToList("multi", cqWcmMsmActionExcludedpropsArray);
        List<String> cqWcmMsmActionExcludedprops = new ArrayList<String>();
        for (String curParam : cqWcmMsmActionExcludedpropsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                cqWcmMsmActionExcludedprops.add(curParam);
            }
        }
        String[] cqWcmMsmActionIgnoredMixinArray = request().queryString().get("cq.wcm.msm.action.ignoredMixin");
        List<String> cqWcmMsmActionIgnoredMixinList = OpenAPIUtils.parametersToList("multi", cqWcmMsmActionIgnoredMixinArray);
        List<String> cqWcmMsmActionIgnoredMixin = new ArrayList<String>();
        for (String curParam : cqWcmMsmActionIgnoredMixinList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                cqWcmMsmActionIgnoredMixin.add(curParam);
            }
        }
        ComDayCqWcmMsmImplActionsContentUpdateActionFactoryInfo obj = imp.comDayCqWcmMsmImplActionsContentUpdateActionFactory(post, apply, delete, action, $location, propertylist, cqWcmMsmActionExcludednodetypes, cqWcmMsmActionExcludedparagraphitems, cqWcmMsmActionExcludedprops, cqWcmMsmActionIgnoredMixin);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqWcmMsmImplActionsOrderChildrenActionFactory() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] cqWcmMsmActionExcludednodetypesArray = request().queryString().get("cq.wcm.msm.action.excludednodetypes");
        List<String> cqWcmMsmActionExcludednodetypesList = OpenAPIUtils.parametersToList("multi", cqWcmMsmActionExcludednodetypesArray);
        List<String> cqWcmMsmActionExcludednodetypes = new ArrayList<String>();
        for (String curParam : cqWcmMsmActionExcludednodetypesList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                cqWcmMsmActionExcludednodetypes.add(curParam);
            }
        }
        String[] cqWcmMsmActionExcludedparagraphitemsArray = request().queryString().get("cq.wcm.msm.action.excludedparagraphitems");
        List<String> cqWcmMsmActionExcludedparagraphitemsList = OpenAPIUtils.parametersToList("multi", cqWcmMsmActionExcludedparagraphitemsArray);
        List<String> cqWcmMsmActionExcludedparagraphitems = new ArrayList<String>();
        for (String curParam : cqWcmMsmActionExcludedparagraphitemsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                cqWcmMsmActionExcludedparagraphitems.add(curParam);
            }
        }
        String[] cqWcmMsmActionExcludedpropsArray = request().queryString().get("cq.wcm.msm.action.excludedprops");
        List<String> cqWcmMsmActionExcludedpropsList = OpenAPIUtils.parametersToList("multi", cqWcmMsmActionExcludedpropsArray);
        List<String> cqWcmMsmActionExcludedprops = new ArrayList<String>();
        for (String curParam : cqWcmMsmActionExcludedpropsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                cqWcmMsmActionExcludedprops.add(curParam);
            }
        }
        ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryInfo obj = imp.comDayCqWcmMsmImplActionsOrderChildrenActionFactory(post, apply, delete, action, $location, propertylist, cqWcmMsmActionExcludednodetypes, cqWcmMsmActionExcludedparagraphitems, cqWcmMsmActionExcludedprops);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqWcmMsmImplActionsPageMoveActionFactory() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] cqWcmMsmActionExcludednodetypesArray = request().queryString().get("cq.wcm.msm.action.excludednodetypes");
        List<String> cqWcmMsmActionExcludednodetypesList = OpenAPIUtils.parametersToList("multi", cqWcmMsmActionExcludednodetypesArray);
        List<String> cqWcmMsmActionExcludednodetypes = new ArrayList<String>();
        for (String curParam : cqWcmMsmActionExcludednodetypesList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                cqWcmMsmActionExcludednodetypes.add(curParam);
            }
        }
        String[] cqWcmMsmActionExcludedparagraphitemsArray = request().queryString().get("cq.wcm.msm.action.excludedparagraphitems");
        List<String> cqWcmMsmActionExcludedparagraphitemsList = OpenAPIUtils.parametersToList("multi", cqWcmMsmActionExcludedparagraphitemsArray);
        List<String> cqWcmMsmActionExcludedparagraphitems = new ArrayList<String>();
        for (String curParam : cqWcmMsmActionExcludedparagraphitemsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                cqWcmMsmActionExcludedparagraphitems.add(curParam);
            }
        }
        String[] cqWcmMsmActionExcludedpropsArray = request().queryString().get("cq.wcm.msm.action.excludedprops");
        List<String> cqWcmMsmActionExcludedpropsList = OpenAPIUtils.parametersToList("multi", cqWcmMsmActionExcludedpropsArray);
        List<String> cqWcmMsmActionExcludedprops = new ArrayList<String>();
        for (String curParam : cqWcmMsmActionExcludedpropsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                cqWcmMsmActionExcludedprops.add(curParam);
            }
        }
        String valuecqWcmMsmImplActionsPagemovePropReferenceUpdate = request().getQueryString("cq.wcm.msm.impl.actions.pagemove.prop_referenceUpdate");
        Boolean cqWcmMsmImplActionsPagemovePropReferenceUpdate;
        if (valuecqWcmMsmImplActionsPagemovePropReferenceUpdate != null) {
            cqWcmMsmImplActionsPagemovePropReferenceUpdate = Boolean.valueOf(valuecqWcmMsmImplActionsPagemovePropReferenceUpdate);
        } else {
            cqWcmMsmImplActionsPagemovePropReferenceUpdate = null;
        }
        ComDayCqWcmMsmImplActionsPageMoveActionFactoryInfo obj = imp.comDayCqWcmMsmImplActionsPageMoveActionFactory(post, apply, delete, action, $location, propertylist, cqWcmMsmActionExcludednodetypes, cqWcmMsmActionExcludedparagraphitems, cqWcmMsmActionExcludedprops, cqWcmMsmImplActionsPagemovePropReferenceUpdate);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqWcmMsmImplActionsReferencesUpdateActionFactory() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] cqWcmMsmActionExcludednodetypesArray = request().queryString().get("cq.wcm.msm.action.excludednodetypes");
        List<String> cqWcmMsmActionExcludednodetypesList = OpenAPIUtils.parametersToList("multi", cqWcmMsmActionExcludednodetypesArray);
        List<String> cqWcmMsmActionExcludednodetypes = new ArrayList<String>();
        for (String curParam : cqWcmMsmActionExcludednodetypesList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                cqWcmMsmActionExcludednodetypes.add(curParam);
            }
        }
        String[] cqWcmMsmActionExcludedparagraphitemsArray = request().queryString().get("cq.wcm.msm.action.excludedparagraphitems");
        List<String> cqWcmMsmActionExcludedparagraphitemsList = OpenAPIUtils.parametersToList("multi", cqWcmMsmActionExcludedparagraphitemsArray);
        List<String> cqWcmMsmActionExcludedparagraphitems = new ArrayList<String>();
        for (String curParam : cqWcmMsmActionExcludedparagraphitemsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                cqWcmMsmActionExcludedparagraphitems.add(curParam);
            }
        }
        String[] cqWcmMsmActionExcludedpropsArray = request().queryString().get("cq.wcm.msm.action.excludedprops");
        List<String> cqWcmMsmActionExcludedpropsList = OpenAPIUtils.parametersToList("multi", cqWcmMsmActionExcludedpropsArray);
        List<String> cqWcmMsmActionExcludedprops = new ArrayList<String>();
        for (String curParam : cqWcmMsmActionExcludedpropsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                cqWcmMsmActionExcludedprops.add(curParam);
            }
        }
        String valuecqWcmMsmImplActionReferencesupdatePropUpdateNested = request().getQueryString("cq.wcm.msm.impl.action.referencesupdate.prop_updateNested");
        Boolean cqWcmMsmImplActionReferencesupdatePropUpdateNested;
        if (valuecqWcmMsmImplActionReferencesupdatePropUpdateNested != null) {
            cqWcmMsmImplActionReferencesupdatePropUpdateNested = Boolean.valueOf(valuecqWcmMsmImplActionReferencesupdatePropUpdateNested);
        } else {
            cqWcmMsmImplActionReferencesupdatePropUpdateNested = null;
        }
        ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryInfo obj = imp.comDayCqWcmMsmImplActionsReferencesUpdateActionFactory(post, apply, delete, action, $location, propertylist, cqWcmMsmActionExcludednodetypes, cqWcmMsmActionExcludedparagraphitems, cqWcmMsmActionExcludedprops, cqWcmMsmImplActionReferencesupdatePropUpdateNested);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqWcmMsmImplActionsVersionCopyActionFactory() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] cqWcmMsmActionExcludednodetypesArray = request().queryString().get("cq.wcm.msm.action.excludednodetypes");
        List<String> cqWcmMsmActionExcludednodetypesList = OpenAPIUtils.parametersToList("multi", cqWcmMsmActionExcludednodetypesArray);
        List<String> cqWcmMsmActionExcludednodetypes = new ArrayList<String>();
        for (String curParam : cqWcmMsmActionExcludednodetypesList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                cqWcmMsmActionExcludednodetypes.add(curParam);
            }
        }
        String[] cqWcmMsmActionExcludedparagraphitemsArray = request().queryString().get("cq.wcm.msm.action.excludedparagraphitems");
        List<String> cqWcmMsmActionExcludedparagraphitemsList = OpenAPIUtils.parametersToList("multi", cqWcmMsmActionExcludedparagraphitemsArray);
        List<String> cqWcmMsmActionExcludedparagraphitems = new ArrayList<String>();
        for (String curParam : cqWcmMsmActionExcludedparagraphitemsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                cqWcmMsmActionExcludedparagraphitems.add(curParam);
            }
        }
        String[] cqWcmMsmActionExcludedpropsArray = request().queryString().get("cq.wcm.msm.action.excludedprops");
        List<String> cqWcmMsmActionExcludedpropsList = OpenAPIUtils.parametersToList("multi", cqWcmMsmActionExcludedpropsArray);
        List<String> cqWcmMsmActionExcludedprops = new ArrayList<String>();
        for (String curParam : cqWcmMsmActionExcludedpropsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                cqWcmMsmActionExcludedprops.add(curParam);
            }
        }
        ComDayCqWcmMsmImplActionsVersionCopyActionFactoryInfo obj = imp.comDayCqWcmMsmImplActionsVersionCopyActionFactory(post, apply, delete, action, $location, propertylist, cqWcmMsmActionExcludednodetypes, cqWcmMsmActionExcludedparagraphitems, cqWcmMsmActionExcludedprops);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqWcmMsmImplLiveRelationshipManagerImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueliverelationshipmgrRelationsconfigDefault = request().getQueryString("liverelationshipmgr.relationsconfig.default");
        String liverelationshipmgrRelationsconfigDefault;
        if (valueliverelationshipmgrRelationsconfigDefault != null) {
            liverelationshipmgrRelationsconfigDefault = valueliverelationshipmgrRelationsconfigDefault;
        } else {
            liverelationshipmgrRelationsconfigDefault = null;
        }
        ComDayCqWcmMsmImplLiveRelationshipManagerImplInfo obj = imp.comDayCqWcmMsmImplLiveRelationshipManagerImpl(post, apply, delete, action, $location, propertylist, liverelationshipmgrRelationsconfigDefault);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqWcmMsmImplRolloutManagerImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueeventFilter = request().getQueryString("event.filter");
        String eventFilter;
        if (valueeventFilter != null) {
            eventFilter = valueeventFilter;
        } else {
            eventFilter = null;
        }
        String[] rolloutmgrExcludedpropsDefaultArray = request().queryString().get("rolloutmgr.excludedprops.default");
        List<String> rolloutmgrExcludedpropsDefaultList = OpenAPIUtils.parametersToList("multi", rolloutmgrExcludedpropsDefaultArray);
        List<String> rolloutmgrExcludedpropsDefault = new ArrayList<String>();
        for (String curParam : rolloutmgrExcludedpropsDefaultList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                rolloutmgrExcludedpropsDefault.add(curParam);
            }
        }
        String[] rolloutmgrExcludedparagraphpropsDefaultArray = request().queryString().get("rolloutmgr.excludedparagraphprops.default");
        List<String> rolloutmgrExcludedparagraphpropsDefaultList = OpenAPIUtils.parametersToList("multi", rolloutmgrExcludedparagraphpropsDefaultArray);
        List<String> rolloutmgrExcludedparagraphpropsDefault = new ArrayList<String>();
        for (String curParam : rolloutmgrExcludedparagraphpropsDefaultList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                rolloutmgrExcludedparagraphpropsDefault.add(curParam);
            }
        }
        String[] rolloutmgrExcludednodetypesDefaultArray = request().queryString().get("rolloutmgr.excludednodetypes.default");
        List<String> rolloutmgrExcludednodetypesDefaultList = OpenAPIUtils.parametersToList("multi", rolloutmgrExcludednodetypesDefaultArray);
        List<String> rolloutmgrExcludednodetypesDefault = new ArrayList<String>();
        for (String curParam : rolloutmgrExcludednodetypesDefaultList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                rolloutmgrExcludednodetypesDefault.add(curParam);
            }
        }
        String valuerolloutmgrThreadpoolMaxsize = request().getQueryString("rolloutmgr.threadpool.maxsize");
        Integer rolloutmgrThreadpoolMaxsize;
        if (valuerolloutmgrThreadpoolMaxsize != null) {
            rolloutmgrThreadpoolMaxsize = Integer.parseInt(valuerolloutmgrThreadpoolMaxsize);
        } else {
            rolloutmgrThreadpoolMaxsize = null;
        }
        String valuerolloutmgrThreadpoolMaxshutdowntime = request().getQueryString("rolloutmgr.threadpool.maxshutdowntime");
        Integer rolloutmgrThreadpoolMaxshutdowntime;
        if (valuerolloutmgrThreadpoolMaxshutdowntime != null) {
            rolloutmgrThreadpoolMaxshutdowntime = Integer.parseInt(valuerolloutmgrThreadpoolMaxshutdowntime);
        } else {
            rolloutmgrThreadpoolMaxshutdowntime = null;
        }
        String valuerolloutmgrThreadpoolPriority = request().getQueryString("rolloutmgr.threadpool.priority");
        String rolloutmgrThreadpoolPriority;
        if (valuerolloutmgrThreadpoolPriority != null) {
            rolloutmgrThreadpoolPriority = valuerolloutmgrThreadpoolPriority;
        } else {
            rolloutmgrThreadpoolPriority = null;
        }
        String valuerolloutmgrCommitSize = request().getQueryString("rolloutmgr.commit.size");
        Integer rolloutmgrCommitSize;
        if (valuerolloutmgrCommitSize != null) {
            rolloutmgrCommitSize = Integer.parseInt(valuerolloutmgrCommitSize);
        } else {
            rolloutmgrCommitSize = null;
        }
        String valuerolloutmgrConflicthandlingEnabled = request().getQueryString("rolloutmgr.conflicthandling.enabled");
        Boolean rolloutmgrConflicthandlingEnabled;
        if (valuerolloutmgrConflicthandlingEnabled != null) {
            rolloutmgrConflicthandlingEnabled = Boolean.valueOf(valuerolloutmgrConflicthandlingEnabled);
        } else {
            rolloutmgrConflicthandlingEnabled = null;
        }
        ComDayCqWcmMsmImplRolloutManagerImplInfo obj = imp.comDayCqWcmMsmImplRolloutManagerImpl(post, apply, delete, action, $location, propertylist, eventFilter, rolloutmgrExcludedpropsDefault, rolloutmgrExcludedparagraphpropsDefault, rolloutmgrExcludednodetypesDefault, rolloutmgrThreadpoolMaxsize, rolloutmgrThreadpoolMaxshutdowntime, rolloutmgrThreadpoolPriority, rolloutmgrCommitSize, rolloutmgrConflicthandlingEnabled);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqWcmMsmImplServletsAuditLogServlet() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueauditlogservletDefaultEventsCount = request().getQueryString("auditlogservlet.default.events.count");
        Integer auditlogservletDefaultEventsCount;
        if (valueauditlogservletDefaultEventsCount != null) {
            auditlogservletDefaultEventsCount = Integer.parseInt(valueauditlogservletDefaultEventsCount);
        } else {
            auditlogservletDefaultEventsCount = null;
        }
        String valueauditlogservletDefaultPath = request().getQueryString("auditlogservlet.default.path");
        String auditlogservletDefaultPath;
        if (valueauditlogservletDefaultPath != null) {
            auditlogservletDefaultPath = valueauditlogservletDefaultPath;
        } else {
            auditlogservletDefaultPath = null;
        }
        ComDayCqWcmMsmImplServletsAuditLogServletInfo obj = imp.comDayCqWcmMsmImplServletsAuditLogServlet(post, apply, delete, action, $location, propertylist, auditlogservletDefaultEventsCount, auditlogservletDefaultPath);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqWcmNotificationEmailImplEmailChannel() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueemailFrom = request().getQueryString("email.from");
        String emailFrom;
        if (valueemailFrom != null) {
            emailFrom = valueemailFrom;
        } else {
            emailFrom = null;
        }
        ComDayCqWcmNotificationEmailImplEmailChannelInfo obj = imp.comDayCqWcmNotificationEmailImplEmailChannel(post, apply, delete, action, $location, propertylist, emailFrom);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqWcmNotificationImplNotificationManagerImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] eventTopicsArray = request().queryString().get("event.topics");
        List<String> eventTopicsList = OpenAPIUtils.parametersToList("multi", eventTopicsArray);
        List<String> eventTopics = new ArrayList<String>();
        for (String curParam : eventTopicsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                eventTopics.add(curParam);
            }
        }
        ComDayCqWcmNotificationImplNotificationManagerImplInfo obj = imp.comDayCqWcmNotificationImplNotificationManagerImpl(post, apply, delete, action, $location, propertylist, eventTopics);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqWcmScriptingImplBVPManager() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] comDayCqWcmScriptingBvpScriptEnginesArray = request().queryString().get("com.day.cq.wcm.scripting.bvp.script.engines");
        List<String> comDayCqWcmScriptingBvpScriptEnginesList = OpenAPIUtils.parametersToList("multi", comDayCqWcmScriptingBvpScriptEnginesArray);
        List<String> comDayCqWcmScriptingBvpScriptEngines = new ArrayList<String>();
        for (String curParam : comDayCqWcmScriptingBvpScriptEnginesList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                comDayCqWcmScriptingBvpScriptEngines.add(curParam);
            }
        }
        ComDayCqWcmScriptingImplBVPManagerInfo obj = imp.comDayCqWcmScriptingImplBVPManager(post, apply, delete, action, $location, propertylist, comDayCqWcmScriptingBvpScriptEngines);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqWcmUndoUndoConfig() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuecqWcmUndoEnabled = request().getQueryString("cq.wcm.undo.enabled");
        Boolean cqWcmUndoEnabled;
        if (valuecqWcmUndoEnabled != null) {
            cqWcmUndoEnabled = Boolean.valueOf(valuecqWcmUndoEnabled);
        } else {
            cqWcmUndoEnabled = null;
        }
        String valuecqWcmUndoPath = request().getQueryString("cq.wcm.undo.path");
        String cqWcmUndoPath;
        if (valuecqWcmUndoPath != null) {
            cqWcmUndoPath = valuecqWcmUndoPath;
        } else {
            cqWcmUndoPath = null;
        }
        String valuecqWcmUndoValidity = request().getQueryString("cq.wcm.undo.validity");
        Integer cqWcmUndoValidity;
        if (valuecqWcmUndoValidity != null) {
            cqWcmUndoValidity = Integer.parseInt(valuecqWcmUndoValidity);
        } else {
            cqWcmUndoValidity = null;
        }
        String valuecqWcmUndoSteps = request().getQueryString("cq.wcm.undo.steps");
        Integer cqWcmUndoSteps;
        if (valuecqWcmUndoSteps != null) {
            cqWcmUndoSteps = Integer.parseInt(valuecqWcmUndoSteps);
        } else {
            cqWcmUndoSteps = null;
        }
        String valuecqWcmUndoPersistence = request().getQueryString("cq.wcm.undo.persistence");
        String cqWcmUndoPersistence;
        if (valuecqWcmUndoPersistence != null) {
            cqWcmUndoPersistence = valuecqWcmUndoPersistence;
        } else {
            cqWcmUndoPersistence = null;
        }
        String valuecqWcmUndoPersistenceMode = request().getQueryString("cq.wcm.undo.persistence.mode");
        Boolean cqWcmUndoPersistenceMode;
        if (valuecqWcmUndoPersistenceMode != null) {
            cqWcmUndoPersistenceMode = Boolean.valueOf(valuecqWcmUndoPersistenceMode);
        } else {
            cqWcmUndoPersistenceMode = null;
        }
        String valuecqWcmUndoMarkermode = request().getQueryString("cq.wcm.undo.markermode");
        String cqWcmUndoMarkermode;
        if (valuecqWcmUndoMarkermode != null) {
            cqWcmUndoMarkermode = valuecqWcmUndoMarkermode;
        } else {
            cqWcmUndoMarkermode = null;
        }
        String[] cqWcmUndoWhitelistArray = request().queryString().get("cq.wcm.undo.whitelist");
        List<String> cqWcmUndoWhitelistList = OpenAPIUtils.parametersToList("multi", cqWcmUndoWhitelistArray);
        List<String> cqWcmUndoWhitelist = new ArrayList<String>();
        for (String curParam : cqWcmUndoWhitelistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                cqWcmUndoWhitelist.add(curParam);
            }
        }
        String[] cqWcmUndoBlacklistArray = request().queryString().get("cq.wcm.undo.blacklist");
        List<String> cqWcmUndoBlacklistList = OpenAPIUtils.parametersToList("multi", cqWcmUndoBlacklistArray);
        List<String> cqWcmUndoBlacklist = new ArrayList<String>();
        for (String curParam : cqWcmUndoBlacklistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                cqWcmUndoBlacklist.add(curParam);
            }
        }
        ComDayCqWcmUndoUndoConfigInfo obj = imp.comDayCqWcmUndoUndoConfig(post, apply, delete, action, $location, propertylist, cqWcmUndoEnabled, cqWcmUndoPath, cqWcmUndoValidity, cqWcmUndoSteps, cqWcmUndoPersistence, cqWcmUndoPersistenceMode, cqWcmUndoMarkermode, cqWcmUndoWhitelist, cqWcmUndoBlacklist);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqWcmWebservicesupportImplReplicationEventListener() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] flushAgentsArray = request().queryString().get("Flush agents");
        List<String> flushAgentsList = OpenAPIUtils.parametersToList("multi", flushAgentsArray);
        List<String> flushAgents = new ArrayList<String>();
        for (String curParam : flushAgentsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                flushAgents.add(curParam);
            }
        }
        ComDayCqWcmWebservicesupportImplReplicationEventListenerInfo obj = imp.comDayCqWcmWebservicesupportImplReplicationEventListener(post, apply, delete, action, $location, propertylist, flushAgents);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqWcmWorkflowImplWcmWorkflowServiceImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueeventFilter = request().getQueryString("event.filter");
        String eventFilter;
        if (valueeventFilter != null) {
            eventFilter = valueeventFilter;
        } else {
            eventFilter = null;
        }
        String valueminThreadPoolSize = request().getQueryString("minThreadPoolSize");
        Integer minThreadPoolSize;
        if (valueminThreadPoolSize != null) {
            minThreadPoolSize = Integer.parseInt(valueminThreadPoolSize);
        } else {
            minThreadPoolSize = null;
        }
        String valuemaxThreadPoolSize = request().getQueryString("maxThreadPoolSize");
        Integer maxThreadPoolSize;
        if (valuemaxThreadPoolSize != null) {
            maxThreadPoolSize = Integer.parseInt(valuemaxThreadPoolSize);
        } else {
            maxThreadPoolSize = null;
        }
        String valuecqWcmWorkflowTerminateOnActivate = request().getQueryString("cq.wcm.workflow.terminate.on.activate");
        Boolean cqWcmWorkflowTerminateOnActivate;
        if (valuecqWcmWorkflowTerminateOnActivate != null) {
            cqWcmWorkflowTerminateOnActivate = Boolean.valueOf(valuecqWcmWorkflowTerminateOnActivate);
        } else {
            cqWcmWorkflowTerminateOnActivate = null;
        }
        String[] cqWcmWorklfowTerminateExclusionListArray = request().queryString().get("cq.wcm.worklfow.terminate.exclusion.list");
        List<String> cqWcmWorklfowTerminateExclusionListList = OpenAPIUtils.parametersToList("multi", cqWcmWorklfowTerminateExclusionListArray);
        List<String> cqWcmWorklfowTerminateExclusionList = new ArrayList<String>();
        for (String curParam : cqWcmWorklfowTerminateExclusionListList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                cqWcmWorklfowTerminateExclusionList.add(curParam);
            }
        }
        ComDayCqWcmWorkflowImplWcmWorkflowServiceImplInfo obj = imp.comDayCqWcmWorkflowImplWcmWorkflowServiceImpl(post, apply, delete, action, $location, propertylist, eventFilter, minThreadPoolSize, maxThreadPoolSize, cqWcmWorkflowTerminateOnActivate, cqWcmWorklfowTerminateExclusionList);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqWcmWorkflowImplWorkflowPackageInfoProvider() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] workflowpackageinfoproviderFilterArray = request().queryString().get("workflowpackageinfoprovider.filter");
        List<String> workflowpackageinfoproviderFilterList = OpenAPIUtils.parametersToList("multi", workflowpackageinfoproviderFilterArray);
        List<String> workflowpackageinfoproviderFilter = new ArrayList<String>();
        for (String curParam : workflowpackageinfoproviderFilterList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                workflowpackageinfoproviderFilter.add(curParam);
            }
        }
        String valueworkflowpackageinfoproviderFilterRootpath = request().getQueryString("workflowpackageinfoprovider.filter.rootpath");
        String workflowpackageinfoproviderFilterRootpath;
        if (valueworkflowpackageinfoproviderFilterRootpath != null) {
            workflowpackageinfoproviderFilterRootpath = valueworkflowpackageinfoproviderFilterRootpath;
        } else {
            workflowpackageinfoproviderFilterRootpath = null;
        }
        ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderInfo obj = imp.comDayCqWcmWorkflowImplWorkflowPackageInfoProvider(post, apply, delete, action, $location, propertylist, workflowpackageinfoproviderFilter, workflowpackageinfoproviderFilterRootpath);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqWidgetImplHtmlLibraryManagerImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuehtmllibmanagerClientmanager = request().getQueryString("htmllibmanager.clientmanager");
        String htmllibmanagerClientmanager;
        if (valuehtmllibmanagerClientmanager != null) {
            htmllibmanagerClientmanager = valuehtmllibmanagerClientmanager;
        } else {
            htmllibmanagerClientmanager = null;
        }
        String valuehtmllibmanagerDebug = request().getQueryString("htmllibmanager.debug");
        Boolean htmllibmanagerDebug;
        if (valuehtmllibmanagerDebug != null) {
            htmllibmanagerDebug = Boolean.valueOf(valuehtmllibmanagerDebug);
        } else {
            htmllibmanagerDebug = null;
        }
        String valuehtmllibmanagerDebugConsole = request().getQueryString("htmllibmanager.debug.console");
        Boolean htmllibmanagerDebugConsole;
        if (valuehtmllibmanagerDebugConsole != null) {
            htmllibmanagerDebugConsole = Boolean.valueOf(valuehtmllibmanagerDebugConsole);
        } else {
            htmllibmanagerDebugConsole = null;
        }
        String valuehtmllibmanagerDebugInitJs = request().getQueryString("htmllibmanager.debug.init.js");
        String htmllibmanagerDebugInitJs;
        if (valuehtmllibmanagerDebugInitJs != null) {
            htmllibmanagerDebugInitJs = valuehtmllibmanagerDebugInitJs;
        } else {
            htmllibmanagerDebugInitJs = null;
        }
        String valuehtmllibmanagerDefaultthemename = request().getQueryString("htmllibmanager.defaultthemename");
        String htmllibmanagerDefaultthemename;
        if (valuehtmllibmanagerDefaultthemename != null) {
            htmllibmanagerDefaultthemename = valuehtmllibmanagerDefaultthemename;
        } else {
            htmllibmanagerDefaultthemename = null;
        }
        String valuehtmllibmanagerDefaultuserthemename = request().getQueryString("htmllibmanager.defaultuserthemename");
        String htmllibmanagerDefaultuserthemename;
        if (valuehtmllibmanagerDefaultuserthemename != null) {
            htmllibmanagerDefaultuserthemename = valuehtmllibmanagerDefaultuserthemename;
        } else {
            htmllibmanagerDefaultuserthemename = null;
        }
        String valuehtmllibmanagerFirebuglitePath = request().getQueryString("htmllibmanager.firebuglite.path");
        String htmllibmanagerFirebuglitePath;
        if (valuehtmllibmanagerFirebuglitePath != null) {
            htmllibmanagerFirebuglitePath = valuehtmllibmanagerFirebuglitePath;
        } else {
            htmllibmanagerFirebuglitePath = null;
        }
        String valuehtmllibmanagerForceCQUrlInfo = request().getQueryString("htmllibmanager.forceCQUrlInfo");
        Boolean htmllibmanagerForceCQUrlInfo;
        if (valuehtmllibmanagerForceCQUrlInfo != null) {
            htmllibmanagerForceCQUrlInfo = Boolean.valueOf(valuehtmllibmanagerForceCQUrlInfo);
        } else {
            htmllibmanagerForceCQUrlInfo = null;
        }
        String valuehtmllibmanagerGzip = request().getQueryString("htmllibmanager.gzip");
        Boolean htmllibmanagerGzip;
        if (valuehtmllibmanagerGzip != null) {
            htmllibmanagerGzip = Boolean.valueOf(valuehtmllibmanagerGzip);
        } else {
            htmllibmanagerGzip = null;
        }
        String valuehtmllibmanagerMaxage = request().getQueryString("htmllibmanager.maxage");
        Integer htmllibmanagerMaxage;
        if (valuehtmllibmanagerMaxage != null) {
            htmllibmanagerMaxage = Integer.parseInt(valuehtmllibmanagerMaxage);
        } else {
            htmllibmanagerMaxage = null;
        }
        String valuehtmllibmanagerMaxDataUriSize = request().getQueryString("htmllibmanager.maxDataUriSize");
        Integer htmllibmanagerMaxDataUriSize;
        if (valuehtmllibmanagerMaxDataUriSize != null) {
            htmllibmanagerMaxDataUriSize = Integer.parseInt(valuehtmllibmanagerMaxDataUriSize);
        } else {
            htmllibmanagerMaxDataUriSize = null;
        }
        String valuehtmllibmanagerMinify = request().getQueryString("htmllibmanager.minify");
        Boolean htmllibmanagerMinify;
        if (valuehtmllibmanagerMinify != null) {
            htmllibmanagerMinify = Boolean.valueOf(valuehtmllibmanagerMinify);
        } else {
            htmllibmanagerMinify = null;
        }
        String[] htmllibmanagerPathListArray = request().queryString().get("htmllibmanager.path.list");
        List<String> htmllibmanagerPathListList = OpenAPIUtils.parametersToList("multi", htmllibmanagerPathListArray);
        List<String> htmllibmanagerPathList = new ArrayList<String>();
        for (String curParam : htmllibmanagerPathListList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                htmllibmanagerPathList.add(curParam);
            }
        }
        String valuehtmllibmanagerTiming = request().getQueryString("htmllibmanager.timing");
        Boolean htmllibmanagerTiming;
        if (valuehtmllibmanagerTiming != null) {
            htmllibmanagerTiming = Boolean.valueOf(valuehtmllibmanagerTiming);
        } else {
            htmllibmanagerTiming = null;
        }
        ComDayCqWidgetImplHtmlLibraryManagerImplInfo obj = imp.comDayCqWidgetImplHtmlLibraryManagerImpl(post, apply, delete, action, $location, propertylist, htmllibmanagerClientmanager, htmllibmanagerDebug, htmllibmanagerDebugConsole, htmllibmanagerDebugInitJs, htmllibmanagerDefaultthemename, htmllibmanagerDefaultuserthemename, htmllibmanagerFirebuglitePath, htmllibmanagerForceCQUrlInfo, htmllibmanagerGzip, htmllibmanagerMaxage, htmllibmanagerMaxDataUriSize, htmllibmanagerMinify, htmllibmanagerPathList, htmllibmanagerTiming);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqWidgetImplWidgetExtensionProviderImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] extendableWidgetsArray = request().queryString().get("extendable.widgets");
        List<String> extendableWidgetsList = OpenAPIUtils.parametersToList("multi", extendableWidgetsArray);
        List<String> extendableWidgets = new ArrayList<String>();
        for (String curParam : extendableWidgetsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                extendableWidgets.add(curParam);
            }
        }
        String valuewidgetextensionproviderDebug = request().getQueryString("widgetextensionprovider.debug");
        Boolean widgetextensionproviderDebug;
        if (valuewidgetextensionproviderDebug != null) {
            widgetextensionproviderDebug = Boolean.valueOf(valuewidgetextensionproviderDebug);
        } else {
            widgetextensionproviderDebug = null;
        }
        ComDayCqWidgetImplWidgetExtensionProviderImplInfo obj = imp.comDayCqWidgetImplWidgetExtensionProviderImpl(post, apply, delete, action, $location, propertylist, extendableWidgets, widgetextensionproviderDebug);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqWorkflowImplEmailEMailNotificationService() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuefromAddress = request().getQueryString("from.address");
        String fromAddress;
        if (valuefromAddress != null) {
            fromAddress = valuefromAddress;
        } else {
            fromAddress = null;
        }
        String valuehostPrefix = request().getQueryString("host.prefix");
        String hostPrefix;
        if (valuehostPrefix != null) {
            hostPrefix = valuehostPrefix;
        } else {
            hostPrefix = null;
        }
        String valuenotifyOnabort = request().getQueryString("notify.onabort");
        Boolean notifyOnabort;
        if (valuenotifyOnabort != null) {
            notifyOnabort = Boolean.valueOf(valuenotifyOnabort);
        } else {
            notifyOnabort = null;
        }
        String valuenotifyOncomplete = request().getQueryString("notify.oncomplete");
        Boolean notifyOncomplete;
        if (valuenotifyOncomplete != null) {
            notifyOncomplete = Boolean.valueOf(valuenotifyOncomplete);
        } else {
            notifyOncomplete = null;
        }
        String valuenotifyOncontainercomplete = request().getQueryString("notify.oncontainercomplete");
        Boolean notifyOncontainercomplete;
        if (valuenotifyOncontainercomplete != null) {
            notifyOncontainercomplete = Boolean.valueOf(valuenotifyOncontainercomplete);
        } else {
            notifyOncontainercomplete = null;
        }
        String valuenotifyUseronly = request().getQueryString("notify.useronly");
        Boolean notifyUseronly;
        if (valuenotifyUseronly != null) {
            notifyUseronly = Boolean.valueOf(valuenotifyUseronly);
        } else {
            notifyUseronly = null;
        }
        ComDayCqWorkflowImplEmailEMailNotificationServiceInfo obj = imp.comDayCqWorkflowImplEmailEMailNotificationService(post, apply, delete, action, $location, propertylist, fromAddress, hostPrefix, notifyOnabort, notifyOncomplete, notifyOncontainercomplete, notifyUseronly);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCqWorkflowImplEmailTaskEMailNotificationService() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuenotifyOnupdate = request().getQueryString("notify.onupdate");
        Boolean notifyOnupdate;
        if (valuenotifyOnupdate != null) {
            notifyOnupdate = Boolean.valueOf(valuenotifyOnupdate);
        } else {
            notifyOnupdate = null;
        }
        String valuenotifyOncomplete = request().getQueryString("notify.oncomplete");
        Boolean notifyOncomplete;
        if (valuenotifyOncomplete != null) {
            notifyOncomplete = Boolean.valueOf(valuenotifyOncomplete);
        } else {
            notifyOncomplete = null;
        }
        ComDayCqWorkflowImplEmailTaskEMailNotificationServiceInfo obj = imp.comDayCqWorkflowImplEmailTaskEMailNotificationService(post, apply, delete, action, $location, propertylist, notifyOnupdate, notifyOncomplete);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCrxSecurityTokenImplImplTokenAuthenticationHandler() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuepath = request().getQueryString("path");
        String path;
        if (valuepath != null) {
            path = valuepath;
        } else {
            path = null;
        }
        String valuetokenRequiredAttr = request().getQueryString("token.required.attr");
        String tokenRequiredAttr;
        if (valuetokenRequiredAttr != null) {
            tokenRequiredAttr = valuetokenRequiredAttr;
        } else {
            tokenRequiredAttr = null;
        }
        String valuetokenAlternateUrl = request().getQueryString("token.alternate.url");
        String tokenAlternateUrl;
        if (valuetokenAlternateUrl != null) {
            tokenAlternateUrl = valuetokenAlternateUrl;
        } else {
            tokenAlternateUrl = null;
        }
        String valuetokenEncapsulated = request().getQueryString("token.encapsulated");
        Boolean tokenEncapsulated;
        if (valuetokenEncapsulated != null) {
            tokenEncapsulated = Boolean.valueOf(valuetokenEncapsulated);
        } else {
            tokenEncapsulated = null;
        }
        String[] skipTokenRefreshArray = request().queryString().get("skip.token.refresh");
        List<String> skipTokenRefreshList = OpenAPIUtils.parametersToList("multi", skipTokenRefreshArray);
        List<String> skipTokenRefresh = new ArrayList<String>();
        for (String curParam : skipTokenRefreshList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                skipTokenRefresh.add(curParam);
            }
        }
        ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerInfo obj = imp.comDayCrxSecurityTokenImplImplTokenAuthenticationHandler(post, apply, delete, action, $location, propertylist, path, tokenRequiredAttr, tokenAlternateUrl, tokenEncapsulated, skipTokenRefresh);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result comDayCrxSecurityTokenImplTokenCleanupTask() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueenableTokenCleanupTask = request().getQueryString("enable.token.cleanup.task");
        Boolean enableTokenCleanupTask;
        if (valueenableTokenCleanupTask != null) {
            enableTokenCleanupTask = Boolean.valueOf(valueenableTokenCleanupTask);
        } else {
            enableTokenCleanupTask = null;
        }
        String valueschedulerExpression = request().getQueryString("scheduler.expression");
        String schedulerExpression;
        if (valueschedulerExpression != null) {
            schedulerExpression = valueschedulerExpression;
        } else {
            schedulerExpression = null;
        }
        String valuebatchSize = request().getQueryString("batch.size");
        Integer batchSize;
        if (valuebatchSize != null) {
            batchSize = Integer.parseInt(valuebatchSize);
        } else {
            batchSize = null;
        }
        ComDayCrxSecurityTokenImplTokenCleanupTaskInfo obj = imp.comDayCrxSecurityTokenImplTokenCleanupTask(post, apply, delete, action, $location, propertylist, enableTokenCleanupTask, schedulerExpression, batchSize);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result guideLocalizationService() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] supportedLocalesArray = request().queryString().get("supportedLocales");
        List<String> supportedLocalesList = OpenAPIUtils.parametersToList("multi", supportedLocalesArray);
        List<String> supportedLocales = new ArrayList<String>();
        for (String curParam : supportedLocalesList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                supportedLocales.add(curParam);
            }
        }
        String[] localizablePropertiesArray = request().queryString().get("Localizable Properties");
        List<String> localizablePropertiesList = OpenAPIUtils.parametersToList("multi", localizablePropertiesArray);
        List<String> localizableProperties = new ArrayList<String>();
        for (String curParam : localizablePropertiesList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                localizableProperties.add(curParam);
            }
        }
        GuideLocalizationServiceInfo obj = imp.guideLocalizationService(post, apply, delete, action, $location, propertylist, supportedLocales, localizableProperties);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result messagingUserComponentFactory() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuepriority = request().getQueryString("priority");
        Integer priority;
        if (valuepriority != null) {
            priority = Integer.parseInt(valuepriority);
        } else {
            priority = null;
        }
        MessagingUserComponentFactoryInfo obj = imp.messagingUserComponentFactory(post, apply, delete, action, $location, propertylist, priority);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheAriesJmxFrameworkStateConfig() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueattributeChangeNotificationEnabled = request().getQueryString("attributeChangeNotificationEnabled");
        Boolean attributeChangeNotificationEnabled;
        if (valueattributeChangeNotificationEnabled != null) {
            attributeChangeNotificationEnabled = Boolean.valueOf(valueattributeChangeNotificationEnabled);
        } else {
            attributeChangeNotificationEnabled = null;
        }
        OrgApacheAriesJmxFrameworkStateConfigInfo obj = imp.orgApacheAriesJmxFrameworkStateConfig(post, apply, delete, action, $location, propertylist, attributeChangeNotificationEnabled);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheFelixEventadminImplEventAdmin() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueorgApacheFelixEventadminThreadPoolSize = request().getQueryString("org.apache.felix.eventadmin.ThreadPoolSize");
        Integer orgApacheFelixEventadminThreadPoolSize;
        if (valueorgApacheFelixEventadminThreadPoolSize != null) {
            orgApacheFelixEventadminThreadPoolSize = Integer.parseInt(valueorgApacheFelixEventadminThreadPoolSize);
        } else {
            orgApacheFelixEventadminThreadPoolSize = null;
        }
        String valueorgApacheFelixEventadminAsyncToSyncThreadRatio = request().getQueryString("org.apache.felix.eventadmin.AsyncToSyncThreadRatio");
        BigDecimal orgApacheFelixEventadminAsyncToSyncThreadRatio;
        if (valueorgApacheFelixEventadminAsyncToSyncThreadRatio != null) {
            orgApacheFelixEventadminAsyncToSyncThreadRatio = Double.parseDouble(valueorgApacheFelixEventadminAsyncToSyncThreadRatio);
        } else {
            orgApacheFelixEventadminAsyncToSyncThreadRatio = null;
        }
        String valueorgApacheFelixEventadminTimeout = request().getQueryString("org.apache.felix.eventadmin.Timeout");
        Integer orgApacheFelixEventadminTimeout;
        if (valueorgApacheFelixEventadminTimeout != null) {
            orgApacheFelixEventadminTimeout = Integer.parseInt(valueorgApacheFelixEventadminTimeout);
        } else {
            orgApacheFelixEventadminTimeout = null;
        }
        String valueorgApacheFelixEventadminRequireTopic = request().getQueryString("org.apache.felix.eventadmin.RequireTopic");
        Boolean orgApacheFelixEventadminRequireTopic;
        if (valueorgApacheFelixEventadminRequireTopic != null) {
            orgApacheFelixEventadminRequireTopic = Boolean.valueOf(valueorgApacheFelixEventadminRequireTopic);
        } else {
            orgApacheFelixEventadminRequireTopic = null;
        }
        String[] orgApacheFelixEventadminIgnoreTimeoutArray = request().queryString().get("org.apache.felix.eventadmin.IgnoreTimeout");
        List<String> orgApacheFelixEventadminIgnoreTimeoutList = OpenAPIUtils.parametersToList("multi", orgApacheFelixEventadminIgnoreTimeoutArray);
        List<String> orgApacheFelixEventadminIgnoreTimeout = new ArrayList<String>();
        for (String curParam : orgApacheFelixEventadminIgnoreTimeoutList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                orgApacheFelixEventadminIgnoreTimeout.add(curParam);
            }
        }
        String[] orgApacheFelixEventadminIgnoreTopicArray = request().queryString().get("org.apache.felix.eventadmin.IgnoreTopic");
        List<String> orgApacheFelixEventadminIgnoreTopicList = OpenAPIUtils.parametersToList("multi", orgApacheFelixEventadminIgnoreTopicArray);
        List<String> orgApacheFelixEventadminIgnoreTopic = new ArrayList<String>();
        for (String curParam : orgApacheFelixEventadminIgnoreTopicList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                orgApacheFelixEventadminIgnoreTopic.add(curParam);
            }
        }
        OrgApacheFelixEventadminImplEventAdminInfo obj = imp.orgApacheFelixEventadminImplEventAdmin(post, apply, delete, action, $location, propertylist, orgApacheFelixEventadminThreadPoolSize, orgApacheFelixEventadminAsyncToSyncThreadRatio, orgApacheFelixEventadminTimeout, orgApacheFelixEventadminRequireTopic, orgApacheFelixEventadminIgnoreTimeout, orgApacheFelixEventadminIgnoreTopic);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheFelixHttp() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueorgApacheFelixHttpHost = request().getQueryString("org.apache.felix.http.host");
        String orgApacheFelixHttpHost;
        if (valueorgApacheFelixHttpHost != null) {
            orgApacheFelixHttpHost = valueorgApacheFelixHttpHost;
        } else {
            orgApacheFelixHttpHost = null;
        }
        String valueorgApacheFelixHttpEnable = request().getQueryString("org.apache.felix.http.enable");
        Boolean orgApacheFelixHttpEnable;
        if (valueorgApacheFelixHttpEnable != null) {
            orgApacheFelixHttpEnable = Boolean.valueOf(valueorgApacheFelixHttpEnable);
        } else {
            orgApacheFelixHttpEnable = null;
        }
        String valueorgOsgiServiceHttpPort = request().getQueryString("org.osgi.service.http.port");
        Integer orgOsgiServiceHttpPort;
        if (valueorgOsgiServiceHttpPort != null) {
            orgOsgiServiceHttpPort = Integer.parseInt(valueorgOsgiServiceHttpPort);
        } else {
            orgOsgiServiceHttpPort = null;
        }
        String valueorgApacheFelixHttpTimeout = request().getQueryString("org.apache.felix.http.timeout");
        Integer orgApacheFelixHttpTimeout;
        if (valueorgApacheFelixHttpTimeout != null) {
            orgApacheFelixHttpTimeout = Integer.parseInt(valueorgApacheFelixHttpTimeout);
        } else {
            orgApacheFelixHttpTimeout = null;
        }
        String valueorgApacheFelixHttpsEnable = request().getQueryString("org.apache.felix.https.enable");
        Boolean orgApacheFelixHttpsEnable;
        if (valueorgApacheFelixHttpsEnable != null) {
            orgApacheFelixHttpsEnable = Boolean.valueOf(valueorgApacheFelixHttpsEnable);
        } else {
            orgApacheFelixHttpsEnable = null;
        }
        String valueorgOsgiServiceHttpPortSecure = request().getQueryString("org.osgi.service.http.port.secure");
        Integer orgOsgiServiceHttpPortSecure;
        if (valueorgOsgiServiceHttpPortSecure != null) {
            orgOsgiServiceHttpPortSecure = Integer.parseInt(valueorgOsgiServiceHttpPortSecure);
        } else {
            orgOsgiServiceHttpPortSecure = null;
        }
        String valueorgApacheFelixHttpsKeystore = request().getQueryString("org.apache.felix.https.keystore");
        String orgApacheFelixHttpsKeystore;
        if (valueorgApacheFelixHttpsKeystore != null) {
            orgApacheFelixHttpsKeystore = valueorgApacheFelixHttpsKeystore;
        } else {
            orgApacheFelixHttpsKeystore = null;
        }
        String valueorgApacheFelixHttpsKeystorePassword = request().getQueryString("org.apache.felix.https.keystore.password");
        String orgApacheFelixHttpsKeystorePassword;
        if (valueorgApacheFelixHttpsKeystorePassword != null) {
            orgApacheFelixHttpsKeystorePassword = valueorgApacheFelixHttpsKeystorePassword;
        } else {
            orgApacheFelixHttpsKeystorePassword = null;
        }
        String valueorgApacheFelixHttpsKeystoreKeyPassword = request().getQueryString("org.apache.felix.https.keystore.key.password");
        String orgApacheFelixHttpsKeystoreKeyPassword;
        if (valueorgApacheFelixHttpsKeystoreKeyPassword != null) {
            orgApacheFelixHttpsKeystoreKeyPassword = valueorgApacheFelixHttpsKeystoreKeyPassword;
        } else {
            orgApacheFelixHttpsKeystoreKeyPassword = null;
        }
        String valueorgApacheFelixHttpsTruststore = request().getQueryString("org.apache.felix.https.truststore");
        String orgApacheFelixHttpsTruststore;
        if (valueorgApacheFelixHttpsTruststore != null) {
            orgApacheFelixHttpsTruststore = valueorgApacheFelixHttpsTruststore;
        } else {
            orgApacheFelixHttpsTruststore = null;
        }
        String valueorgApacheFelixHttpsTruststorePassword = request().getQueryString("org.apache.felix.https.truststore.password");
        String orgApacheFelixHttpsTruststorePassword;
        if (valueorgApacheFelixHttpsTruststorePassword != null) {
            orgApacheFelixHttpsTruststorePassword = valueorgApacheFelixHttpsTruststorePassword;
        } else {
            orgApacheFelixHttpsTruststorePassword = null;
        }
        String valueorgApacheFelixHttpsClientcertificate = request().getQueryString("org.apache.felix.https.clientcertificate");
        String orgApacheFelixHttpsClientcertificate;
        if (valueorgApacheFelixHttpsClientcertificate != null) {
            orgApacheFelixHttpsClientcertificate = valueorgApacheFelixHttpsClientcertificate;
        } else {
            orgApacheFelixHttpsClientcertificate = null;
        }
        String valueorgApacheFelixHttpContextPath = request().getQueryString("org.apache.felix.http.context_path");
        String orgApacheFelixHttpContextPath;
        if (valueorgApacheFelixHttpContextPath != null) {
            orgApacheFelixHttpContextPath = valueorgApacheFelixHttpContextPath;
        } else {
            orgApacheFelixHttpContextPath = null;
        }
        String valueorgApacheFelixHttpMbeans = request().getQueryString("org.apache.felix.http.mbeans");
        Boolean orgApacheFelixHttpMbeans;
        if (valueorgApacheFelixHttpMbeans != null) {
            orgApacheFelixHttpMbeans = Boolean.valueOf(valueorgApacheFelixHttpMbeans);
        } else {
            orgApacheFelixHttpMbeans = null;
        }
        String valueorgApacheFelixHttpSessionTimeout = request().getQueryString("org.apache.felix.http.session.timeout");
        Integer orgApacheFelixHttpSessionTimeout;
        if (valueorgApacheFelixHttpSessionTimeout != null) {
            orgApacheFelixHttpSessionTimeout = Integer.parseInt(valueorgApacheFelixHttpSessionTimeout);
        } else {
            orgApacheFelixHttpSessionTimeout = null;
        }
        String valueorgApacheFelixHttpJettyThreadpoolMax = request().getQueryString("org.apache.felix.http.jetty.threadpool.max");
        Integer orgApacheFelixHttpJettyThreadpoolMax;
        if (valueorgApacheFelixHttpJettyThreadpoolMax != null) {
            orgApacheFelixHttpJettyThreadpoolMax = Integer.parseInt(valueorgApacheFelixHttpJettyThreadpoolMax);
        } else {
            orgApacheFelixHttpJettyThreadpoolMax = null;
        }
        String valueorgApacheFelixHttpJettyAcceptors = request().getQueryString("org.apache.felix.http.jetty.acceptors");
        Integer orgApacheFelixHttpJettyAcceptors;
        if (valueorgApacheFelixHttpJettyAcceptors != null) {
            orgApacheFelixHttpJettyAcceptors = Integer.parseInt(valueorgApacheFelixHttpJettyAcceptors);
        } else {
            orgApacheFelixHttpJettyAcceptors = null;
        }
        String valueorgApacheFelixHttpJettySelectors = request().getQueryString("org.apache.felix.http.jetty.selectors");
        Integer orgApacheFelixHttpJettySelectors;
        if (valueorgApacheFelixHttpJettySelectors != null) {
            orgApacheFelixHttpJettySelectors = Integer.parseInt(valueorgApacheFelixHttpJettySelectors);
        } else {
            orgApacheFelixHttpJettySelectors = null;
        }
        String valueorgApacheFelixHttpJettyHeaderBufferSize = request().getQueryString("org.apache.felix.http.jetty.headerBufferSize");
        Integer orgApacheFelixHttpJettyHeaderBufferSize;
        if (valueorgApacheFelixHttpJettyHeaderBufferSize != null) {
            orgApacheFelixHttpJettyHeaderBufferSize = Integer.parseInt(valueorgApacheFelixHttpJettyHeaderBufferSize);
        } else {
            orgApacheFelixHttpJettyHeaderBufferSize = null;
        }
        String valueorgApacheFelixHttpJettyRequestBufferSize = request().getQueryString("org.apache.felix.http.jetty.requestBufferSize");
        Integer orgApacheFelixHttpJettyRequestBufferSize;
        if (valueorgApacheFelixHttpJettyRequestBufferSize != null) {
            orgApacheFelixHttpJettyRequestBufferSize = Integer.parseInt(valueorgApacheFelixHttpJettyRequestBufferSize);
        } else {
            orgApacheFelixHttpJettyRequestBufferSize = null;
        }
        String valueorgApacheFelixHttpJettyResponseBufferSize = request().getQueryString("org.apache.felix.http.jetty.responseBufferSize");
        Integer orgApacheFelixHttpJettyResponseBufferSize;
        if (valueorgApacheFelixHttpJettyResponseBufferSize != null) {
            orgApacheFelixHttpJettyResponseBufferSize = Integer.parseInt(valueorgApacheFelixHttpJettyResponseBufferSize);
        } else {
            orgApacheFelixHttpJettyResponseBufferSize = null;
        }
        String valueorgApacheFelixHttpJettyMaxFormSize = request().getQueryString("org.apache.felix.http.jetty.maxFormSize");
        Integer orgApacheFelixHttpJettyMaxFormSize;
        if (valueorgApacheFelixHttpJettyMaxFormSize != null) {
            orgApacheFelixHttpJettyMaxFormSize = Integer.parseInt(valueorgApacheFelixHttpJettyMaxFormSize);
        } else {
            orgApacheFelixHttpJettyMaxFormSize = null;
        }
        String[] orgApacheFelixHttpPathExclusionsArray = request().queryString().get("org.apache.felix.http.path_exclusions");
        List<String> orgApacheFelixHttpPathExclusionsList = OpenAPIUtils.parametersToList("multi", orgApacheFelixHttpPathExclusionsArray);
        List<String> orgApacheFelixHttpPathExclusions = new ArrayList<String>();
        for (String curParam : orgApacheFelixHttpPathExclusionsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                orgApacheFelixHttpPathExclusions.add(curParam);
            }
        }
        String[] orgApacheFelixHttpsJettyCiphersuitesExcludedArray = request().queryString().get("org.apache.felix.https.jetty.ciphersuites.excluded");
        List<String> orgApacheFelixHttpsJettyCiphersuitesExcludedList = OpenAPIUtils.parametersToList("multi", orgApacheFelixHttpsJettyCiphersuitesExcludedArray);
        List<String> orgApacheFelixHttpsJettyCiphersuitesExcluded = new ArrayList<String>();
        for (String curParam : orgApacheFelixHttpsJettyCiphersuitesExcludedList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                orgApacheFelixHttpsJettyCiphersuitesExcluded.add(curParam);
            }
        }
        String[] orgApacheFelixHttpsJettyCiphersuitesIncludedArray = request().queryString().get("org.apache.felix.https.jetty.ciphersuites.included");
        List<String> orgApacheFelixHttpsJettyCiphersuitesIncludedList = OpenAPIUtils.parametersToList("multi", orgApacheFelixHttpsJettyCiphersuitesIncludedArray);
        List<String> orgApacheFelixHttpsJettyCiphersuitesIncluded = new ArrayList<String>();
        for (String curParam : orgApacheFelixHttpsJettyCiphersuitesIncludedList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                orgApacheFelixHttpsJettyCiphersuitesIncluded.add(curParam);
            }
        }
        String valueorgApacheFelixHttpJettySendServerHeader = request().getQueryString("org.apache.felix.http.jetty.sendServerHeader");
        Boolean orgApacheFelixHttpJettySendServerHeader;
        if (valueorgApacheFelixHttpJettySendServerHeader != null) {
            orgApacheFelixHttpJettySendServerHeader = Boolean.valueOf(valueorgApacheFelixHttpJettySendServerHeader);
        } else {
            orgApacheFelixHttpJettySendServerHeader = null;
        }
        String[] orgApacheFelixHttpsJettyProtocolsIncludedArray = request().queryString().get("org.apache.felix.https.jetty.protocols.included");
        List<String> orgApacheFelixHttpsJettyProtocolsIncludedList = OpenAPIUtils.parametersToList("multi", orgApacheFelixHttpsJettyProtocolsIncludedArray);
        List<String> orgApacheFelixHttpsJettyProtocolsIncluded = new ArrayList<String>();
        for (String curParam : orgApacheFelixHttpsJettyProtocolsIncludedList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                orgApacheFelixHttpsJettyProtocolsIncluded.add(curParam);
            }
        }
        String[] orgApacheFelixHttpsJettyProtocolsExcludedArray = request().queryString().get("org.apache.felix.https.jetty.protocols.excluded");
        List<String> orgApacheFelixHttpsJettyProtocolsExcludedList = OpenAPIUtils.parametersToList("multi", orgApacheFelixHttpsJettyProtocolsExcludedArray);
        List<String> orgApacheFelixHttpsJettyProtocolsExcluded = new ArrayList<String>();
        for (String curParam : orgApacheFelixHttpsJettyProtocolsExcludedList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                orgApacheFelixHttpsJettyProtocolsExcluded.add(curParam);
            }
        }
        String valueorgApacheFelixProxyLoadBalancerConnectionEnable = request().getQueryString("org.apache.felix.proxy.load.balancer.connection.enable");
        Boolean orgApacheFelixProxyLoadBalancerConnectionEnable;
        if (valueorgApacheFelixProxyLoadBalancerConnectionEnable != null) {
            orgApacheFelixProxyLoadBalancerConnectionEnable = Boolean.valueOf(valueorgApacheFelixProxyLoadBalancerConnectionEnable);
        } else {
            orgApacheFelixProxyLoadBalancerConnectionEnable = null;
        }
        String valueorgApacheFelixHttpsJettyRenegotiateAllowed = request().getQueryString("org.apache.felix.https.jetty.renegotiateAllowed");
        Boolean orgApacheFelixHttpsJettyRenegotiateAllowed;
        if (valueorgApacheFelixHttpsJettyRenegotiateAllowed != null) {
            orgApacheFelixHttpsJettyRenegotiateAllowed = Boolean.valueOf(valueorgApacheFelixHttpsJettyRenegotiateAllowed);
        } else {
            orgApacheFelixHttpsJettyRenegotiateAllowed = null;
        }
        String valueorgApacheFelixHttpsJettySessionCookieHttpOnly = request().getQueryString("org.apache.felix.https.jetty.session.cookie.httpOnly");
        Boolean orgApacheFelixHttpsJettySessionCookieHttpOnly;
        if (valueorgApacheFelixHttpsJettySessionCookieHttpOnly != null) {
            orgApacheFelixHttpsJettySessionCookieHttpOnly = Boolean.valueOf(valueorgApacheFelixHttpsJettySessionCookieHttpOnly);
        } else {
            orgApacheFelixHttpsJettySessionCookieHttpOnly = null;
        }
        String valueorgApacheFelixHttpsJettySessionCookieSecure = request().getQueryString("org.apache.felix.https.jetty.session.cookie.secure");
        Boolean orgApacheFelixHttpsJettySessionCookieSecure;
        if (valueorgApacheFelixHttpsJettySessionCookieSecure != null) {
            orgApacheFelixHttpsJettySessionCookieSecure = Boolean.valueOf(valueorgApacheFelixHttpsJettySessionCookieSecure);
        } else {
            orgApacheFelixHttpsJettySessionCookieSecure = null;
        }
        String valueorgEclipseJettyServletSessionIdPathParameterName = request().getQueryString("org.eclipse.jetty.servlet.SessionIdPathParameterName");
        String orgEclipseJettyServletSessionIdPathParameterName;
        if (valueorgEclipseJettyServletSessionIdPathParameterName != null) {
            orgEclipseJettyServletSessionIdPathParameterName = valueorgEclipseJettyServletSessionIdPathParameterName;
        } else {
            orgEclipseJettyServletSessionIdPathParameterName = null;
        }
        String valueorgEclipseJettyServletCheckingRemoteSessionIdEncoding = request().getQueryString("org.eclipse.jetty.servlet.CheckingRemoteSessionIdEncoding");
        Boolean orgEclipseJettyServletCheckingRemoteSessionIdEncoding;
        if (valueorgEclipseJettyServletCheckingRemoteSessionIdEncoding != null) {
            orgEclipseJettyServletCheckingRemoteSessionIdEncoding = Boolean.valueOf(valueorgEclipseJettyServletCheckingRemoteSessionIdEncoding);
        } else {
            orgEclipseJettyServletCheckingRemoteSessionIdEncoding = null;
        }
        String valueorgEclipseJettyServletSessionCookie = request().getQueryString("org.eclipse.jetty.servlet.SessionCookie");
        String orgEclipseJettyServletSessionCookie;
        if (valueorgEclipseJettyServletSessionCookie != null) {
            orgEclipseJettyServletSessionCookie = valueorgEclipseJettyServletSessionCookie;
        } else {
            orgEclipseJettyServletSessionCookie = null;
        }
        String valueorgEclipseJettyServletSessionDomain = request().getQueryString("org.eclipse.jetty.servlet.SessionDomain");
        String orgEclipseJettyServletSessionDomain;
        if (valueorgEclipseJettyServletSessionDomain != null) {
            orgEclipseJettyServletSessionDomain = valueorgEclipseJettyServletSessionDomain;
        } else {
            orgEclipseJettyServletSessionDomain = null;
        }
        String valueorgEclipseJettyServletSessionPath = request().getQueryString("org.eclipse.jetty.servlet.SessionPath");
        String orgEclipseJettyServletSessionPath;
        if (valueorgEclipseJettyServletSessionPath != null) {
            orgEclipseJettyServletSessionPath = valueorgEclipseJettyServletSessionPath;
        } else {
            orgEclipseJettyServletSessionPath = null;
        }
        String valueorgEclipseJettyServletMaxAge = request().getQueryString("org.eclipse.jetty.servlet.MaxAge");
        Integer orgEclipseJettyServletMaxAge;
        if (valueorgEclipseJettyServletMaxAge != null) {
            orgEclipseJettyServletMaxAge = Integer.parseInt(valueorgEclipseJettyServletMaxAge);
        } else {
            orgEclipseJettyServletMaxAge = null;
        }
        String valueorgApacheFelixHttpName = request().getQueryString("org.apache.felix.http.name");
        String orgApacheFelixHttpName;
        if (valueorgApacheFelixHttpName != null) {
            orgApacheFelixHttpName = valueorgApacheFelixHttpName;
        } else {
            orgApacheFelixHttpName = null;
        }
        String valueorgApacheFelixJettyGziphandlerEnable = request().getQueryString("org.apache.felix.jetty.gziphandler.enable");
        Boolean orgApacheFelixJettyGziphandlerEnable;
        if (valueorgApacheFelixJettyGziphandlerEnable != null) {
            orgApacheFelixJettyGziphandlerEnable = Boolean.valueOf(valueorgApacheFelixJettyGziphandlerEnable);
        } else {
            orgApacheFelixJettyGziphandlerEnable = null;
        }
        String valueorgApacheFelixJettyGzipMinGzipSize = request().getQueryString("org.apache.felix.jetty.gzip.minGzipSize");
        Integer orgApacheFelixJettyGzipMinGzipSize;
        if (valueorgApacheFelixJettyGzipMinGzipSize != null) {
            orgApacheFelixJettyGzipMinGzipSize = Integer.parseInt(valueorgApacheFelixJettyGzipMinGzipSize);
        } else {
            orgApacheFelixJettyGzipMinGzipSize = null;
        }
        String valueorgApacheFelixJettyGzipCompressionLevel = request().getQueryString("org.apache.felix.jetty.gzip.compressionLevel");
        Integer orgApacheFelixJettyGzipCompressionLevel;
        if (valueorgApacheFelixJettyGzipCompressionLevel != null) {
            orgApacheFelixJettyGzipCompressionLevel = Integer.parseInt(valueorgApacheFelixJettyGzipCompressionLevel);
        } else {
            orgApacheFelixJettyGzipCompressionLevel = null;
        }
        String valueorgApacheFelixJettyGzipInflateBufferSize = request().getQueryString("org.apache.felix.jetty.gzip.inflateBufferSize");
        Integer orgApacheFelixJettyGzipInflateBufferSize;
        if (valueorgApacheFelixJettyGzipInflateBufferSize != null) {
            orgApacheFelixJettyGzipInflateBufferSize = Integer.parseInt(valueorgApacheFelixJettyGzipInflateBufferSize);
        } else {
            orgApacheFelixJettyGzipInflateBufferSize = null;
        }
        String valueorgApacheFelixJettyGzipSyncFlush = request().getQueryString("org.apache.felix.jetty.gzip.syncFlush");
        Boolean orgApacheFelixJettyGzipSyncFlush;
        if (valueorgApacheFelixJettyGzipSyncFlush != null) {
            orgApacheFelixJettyGzipSyncFlush = Boolean.valueOf(valueorgApacheFelixJettyGzipSyncFlush);
        } else {
            orgApacheFelixJettyGzipSyncFlush = null;
        }
        String[] orgApacheFelixJettyGzipExcludedUserAgentsArray = request().queryString().get("org.apache.felix.jetty.gzip.excludedUserAgents");
        List<String> orgApacheFelixJettyGzipExcludedUserAgentsList = OpenAPIUtils.parametersToList("multi", orgApacheFelixJettyGzipExcludedUserAgentsArray);
        List<String> orgApacheFelixJettyGzipExcludedUserAgents = new ArrayList<String>();
        for (String curParam : orgApacheFelixJettyGzipExcludedUserAgentsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                orgApacheFelixJettyGzipExcludedUserAgents.add(curParam);
            }
        }
        String[] orgApacheFelixJettyGzipIncludedMethodsArray = request().queryString().get("org.apache.felix.jetty.gzip.includedMethods");
        List<String> orgApacheFelixJettyGzipIncludedMethodsList = OpenAPIUtils.parametersToList("multi", orgApacheFelixJettyGzipIncludedMethodsArray);
        List<String> orgApacheFelixJettyGzipIncludedMethods = new ArrayList<String>();
        for (String curParam : orgApacheFelixJettyGzipIncludedMethodsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                orgApacheFelixJettyGzipIncludedMethods.add(curParam);
            }
        }
        String[] orgApacheFelixJettyGzipExcludedMethodsArray = request().queryString().get("org.apache.felix.jetty.gzip.excludedMethods");
        List<String> orgApacheFelixJettyGzipExcludedMethodsList = OpenAPIUtils.parametersToList("multi", orgApacheFelixJettyGzipExcludedMethodsArray);
        List<String> orgApacheFelixJettyGzipExcludedMethods = new ArrayList<String>();
        for (String curParam : orgApacheFelixJettyGzipExcludedMethodsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                orgApacheFelixJettyGzipExcludedMethods.add(curParam);
            }
        }
        String[] orgApacheFelixJettyGzipIncludedPathsArray = request().queryString().get("org.apache.felix.jetty.gzip.includedPaths");
        List<String> orgApacheFelixJettyGzipIncludedPathsList = OpenAPIUtils.parametersToList("multi", orgApacheFelixJettyGzipIncludedPathsArray);
        List<String> orgApacheFelixJettyGzipIncludedPaths = new ArrayList<String>();
        for (String curParam : orgApacheFelixJettyGzipIncludedPathsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                orgApacheFelixJettyGzipIncludedPaths.add(curParam);
            }
        }
        String[] orgApacheFelixJettyGzipExcludedPathsArray = request().queryString().get("org.apache.felix.jetty.gzip.excludedPaths");
        List<String> orgApacheFelixJettyGzipExcludedPathsList = OpenAPIUtils.parametersToList("multi", orgApacheFelixJettyGzipExcludedPathsArray);
        List<String> orgApacheFelixJettyGzipExcludedPaths = new ArrayList<String>();
        for (String curParam : orgApacheFelixJettyGzipExcludedPathsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                orgApacheFelixJettyGzipExcludedPaths.add(curParam);
            }
        }
        String[] orgApacheFelixJettyGzipIncludedMimeTypesArray = request().queryString().get("org.apache.felix.jetty.gzip.includedMimeTypes");
        List<String> orgApacheFelixJettyGzipIncludedMimeTypesList = OpenAPIUtils.parametersToList("multi", orgApacheFelixJettyGzipIncludedMimeTypesArray);
        List<String> orgApacheFelixJettyGzipIncludedMimeTypes = new ArrayList<String>();
        for (String curParam : orgApacheFelixJettyGzipIncludedMimeTypesList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                orgApacheFelixJettyGzipIncludedMimeTypes.add(curParam);
            }
        }
        String[] orgApacheFelixJettyGzipExcludedMimeTypesArray = request().queryString().get("org.apache.felix.jetty.gzip.excludedMimeTypes");
        List<String> orgApacheFelixJettyGzipExcludedMimeTypesList = OpenAPIUtils.parametersToList("multi", orgApacheFelixJettyGzipExcludedMimeTypesArray);
        List<String> orgApacheFelixJettyGzipExcludedMimeTypes = new ArrayList<String>();
        for (String curParam : orgApacheFelixJettyGzipExcludedMimeTypesList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                orgApacheFelixJettyGzipExcludedMimeTypes.add(curParam);
            }
        }
        String valueorgApacheFelixHttpSessionInvalidate = request().getQueryString("org.apache.felix.http.session.invalidate");
        Boolean orgApacheFelixHttpSessionInvalidate;
        if (valueorgApacheFelixHttpSessionInvalidate != null) {
            orgApacheFelixHttpSessionInvalidate = Boolean.valueOf(valueorgApacheFelixHttpSessionInvalidate);
        } else {
            orgApacheFelixHttpSessionInvalidate = null;
        }
        String valueorgApacheFelixHttpSessionUniqueid = request().getQueryString("org.apache.felix.http.session.uniqueid");
        Boolean orgApacheFelixHttpSessionUniqueid;
        if (valueorgApacheFelixHttpSessionUniqueid != null) {
            orgApacheFelixHttpSessionUniqueid = Boolean.valueOf(valueorgApacheFelixHttpSessionUniqueid);
        } else {
            orgApacheFelixHttpSessionUniqueid = null;
        }
        OrgApacheFelixHttpInfo obj = imp.orgApacheFelixHttp(post, apply, delete, action, $location, propertylist, orgApacheFelixHttpHost, orgApacheFelixHttpEnable, orgOsgiServiceHttpPort, orgApacheFelixHttpTimeout, orgApacheFelixHttpsEnable, orgOsgiServiceHttpPortSecure, orgApacheFelixHttpsKeystore, orgApacheFelixHttpsKeystorePassword, orgApacheFelixHttpsKeystoreKeyPassword, orgApacheFelixHttpsTruststore, orgApacheFelixHttpsTruststorePassword, orgApacheFelixHttpsClientcertificate, orgApacheFelixHttpContextPath, orgApacheFelixHttpMbeans, orgApacheFelixHttpSessionTimeout, orgApacheFelixHttpJettyThreadpoolMax, orgApacheFelixHttpJettyAcceptors, orgApacheFelixHttpJettySelectors, orgApacheFelixHttpJettyHeaderBufferSize, orgApacheFelixHttpJettyRequestBufferSize, orgApacheFelixHttpJettyResponseBufferSize, orgApacheFelixHttpJettyMaxFormSize, orgApacheFelixHttpPathExclusions, orgApacheFelixHttpsJettyCiphersuitesExcluded, orgApacheFelixHttpsJettyCiphersuitesIncluded, orgApacheFelixHttpJettySendServerHeader, orgApacheFelixHttpsJettyProtocolsIncluded, orgApacheFelixHttpsJettyProtocolsExcluded, orgApacheFelixProxyLoadBalancerConnectionEnable, orgApacheFelixHttpsJettyRenegotiateAllowed, orgApacheFelixHttpsJettySessionCookieHttpOnly, orgApacheFelixHttpsJettySessionCookieSecure, orgEclipseJettyServletSessionIdPathParameterName, orgEclipseJettyServletCheckingRemoteSessionIdEncoding, orgEclipseJettyServletSessionCookie, orgEclipseJettyServletSessionDomain, orgEclipseJettyServletSessionPath, orgEclipseJettyServletMaxAge, orgApacheFelixHttpName, orgApacheFelixJettyGziphandlerEnable, orgApacheFelixJettyGzipMinGzipSize, orgApacheFelixJettyGzipCompressionLevel, orgApacheFelixJettyGzipInflateBufferSize, orgApacheFelixJettyGzipSyncFlush, orgApacheFelixJettyGzipExcludedUserAgents, orgApacheFelixJettyGzipIncludedMethods, orgApacheFelixJettyGzipExcludedMethods, orgApacheFelixJettyGzipIncludedPaths, orgApacheFelixJettyGzipExcludedPaths, orgApacheFelixJettyGzipIncludedMimeTypes, orgApacheFelixJettyGzipExcludedMimeTypes, orgApacheFelixHttpSessionInvalidate, orgApacheFelixHttpSessionUniqueid);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheFelixHttpSslfilterSslFilter() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuesslForwardHeader = request().getQueryString("ssl-forward.header");
        String sslForwardHeader;
        if (valuesslForwardHeader != null) {
            sslForwardHeader = valuesslForwardHeader;
        } else {
            sslForwardHeader = null;
        }
        String valuesslForwardValue = request().getQueryString("ssl-forward.value");
        String sslForwardValue;
        if (valuesslForwardValue != null) {
            sslForwardValue = valuesslForwardValue;
        } else {
            sslForwardValue = null;
        }
        String valuesslForwardCertHeader = request().getQueryString("ssl-forward-cert.header");
        String sslForwardCertHeader;
        if (valuesslForwardCertHeader != null) {
            sslForwardCertHeader = valuesslForwardCertHeader;
        } else {
            sslForwardCertHeader = null;
        }
        String valuerewriteAbsoluteUrls = request().getQueryString("rewrite.absolute.urls");
        Boolean rewriteAbsoluteUrls;
        if (valuerewriteAbsoluteUrls != null) {
            rewriteAbsoluteUrls = Boolean.valueOf(valuerewriteAbsoluteUrls);
        } else {
            rewriteAbsoluteUrls = null;
        }
        OrgApacheFelixHttpSslfilterSslFilterInfo obj = imp.orgApacheFelixHttpSslfilterSslFilter(post, apply, delete, action, $location, propertylist, sslForwardHeader, sslForwardValue, sslForwardCertHeader, rewriteAbsoluteUrls);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheFelixJaasConfigurationFactory() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuejaasControlFlag = request().getQueryString("jaas.controlFlag");
        String jaasControlFlag;
        if (valuejaasControlFlag != null) {
            jaasControlFlag = valuejaasControlFlag;
        } else {
            jaasControlFlag = null;
        }
        String valuejaasRanking = request().getQueryString("jaas.ranking");
        Integer jaasRanking;
        if (valuejaasRanking != null) {
            jaasRanking = Integer.parseInt(valuejaasRanking);
        } else {
            jaasRanking = null;
        }
        String valuejaasRealmName = request().getQueryString("jaas.realmName");
        String jaasRealmName;
        if (valuejaasRealmName != null) {
            jaasRealmName = valuejaasRealmName;
        } else {
            jaasRealmName = null;
        }
        String valuejaasClassname = request().getQueryString("jaas.classname");
        String jaasClassname;
        if (valuejaasClassname != null) {
            jaasClassname = valuejaasClassname;
        } else {
            jaasClassname = null;
        }
        String[] jaasOptionsArray = request().queryString().get("jaas.options");
        List<String> jaasOptionsList = OpenAPIUtils.parametersToList("multi", jaasOptionsArray);
        List<String> jaasOptions = new ArrayList<String>();
        for (String curParam : jaasOptionsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                jaasOptions.add(curParam);
            }
        }
        OrgApacheFelixJaasConfigurationFactoryInfo obj = imp.orgApacheFelixJaasConfigurationFactory(post, apply, delete, action, $location, propertylist, jaasControlFlag, jaasRanking, jaasRealmName, jaasClassname, jaasOptions);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheFelixJaasConfigurationSpi() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuejaasDefaultRealmName = request().getQueryString("jaas.defaultRealmName");
        String jaasDefaultRealmName;
        if (valuejaasDefaultRealmName != null) {
            jaasDefaultRealmName = valuejaasDefaultRealmName;
        } else {
            jaasDefaultRealmName = null;
        }
        String valuejaasConfigProviderName = request().getQueryString("jaas.configProviderName");
        String jaasConfigProviderName;
        if (valuejaasConfigProviderName != null) {
            jaasConfigProviderName = valuejaasConfigProviderName;
        } else {
            jaasConfigProviderName = null;
        }
        String valuejaasGlobalConfigPolicy = request().getQueryString("jaas.globalConfigPolicy");
        String jaasGlobalConfigPolicy;
        if (valuejaasGlobalConfigPolicy != null) {
            jaasGlobalConfigPolicy = valuejaasGlobalConfigPolicy;
        } else {
            jaasGlobalConfigPolicy = null;
        }
        OrgApacheFelixJaasConfigurationSpiInfo obj = imp.orgApacheFelixJaasConfigurationSpi(post, apply, delete, action, $location, propertylist, jaasDefaultRealmName, jaasConfigProviderName, jaasGlobalConfigPolicy);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheFelixScrScrService() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuedsLoglevel = request().getQueryString("ds.loglevel");
        Integer dsLoglevel;
        if (valuedsLoglevel != null) {
            dsLoglevel = Integer.parseInt(valuedsLoglevel);
        } else {
            dsLoglevel = null;
        }
        String valuedsFactoryEnabled = request().getQueryString("ds.factory.enabled");
        Boolean dsFactoryEnabled;
        if (valuedsFactoryEnabled != null) {
            dsFactoryEnabled = Boolean.valueOf(valuedsFactoryEnabled);
        } else {
            dsFactoryEnabled = null;
        }
        String valuedsDelayedKeepInstances = request().getQueryString("ds.delayed.keepInstances");
        Boolean dsDelayedKeepInstances;
        if (valuedsDelayedKeepInstances != null) {
            dsDelayedKeepInstances = Boolean.valueOf(valuedsDelayedKeepInstances);
        } else {
            dsDelayedKeepInstances = null;
        }
        String valuedsLockTimeoutMilliseconds = request().getQueryString("ds.lock.timeout.milliseconds");
        Integer dsLockTimeoutMilliseconds;
        if (valuedsLockTimeoutMilliseconds != null) {
            dsLockTimeoutMilliseconds = Integer.parseInt(valuedsLockTimeoutMilliseconds);
        } else {
            dsLockTimeoutMilliseconds = null;
        }
        String valuedsStopTimeoutMilliseconds = request().getQueryString("ds.stop.timeout.milliseconds");
        Integer dsStopTimeoutMilliseconds;
        if (valuedsStopTimeoutMilliseconds != null) {
            dsStopTimeoutMilliseconds = Integer.parseInt(valuedsStopTimeoutMilliseconds);
        } else {
            dsStopTimeoutMilliseconds = null;
        }
        String valuedsGlobalExtender = request().getQueryString("ds.global.extender");
        Boolean dsGlobalExtender;
        if (valuedsGlobalExtender != null) {
            dsGlobalExtender = Boolean.valueOf(valuedsGlobalExtender);
        } else {
            dsGlobalExtender = null;
        }
        OrgApacheFelixScrScrServiceInfo obj = imp.orgApacheFelixScrScrService(post, apply, delete, action, $location, propertylist, dsLoglevel, dsFactoryEnabled, dsDelayedKeepInstances, dsLockTimeoutMilliseconds, dsStopTimeoutMilliseconds, dsGlobalExtender);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheFelixSystemreadyImplComponentsCheck() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] componentsListArray = request().queryString().get("components.list");
        List<String> componentsListList = OpenAPIUtils.parametersToList("multi", componentsListArray);
        List<String> componentsList = new ArrayList<String>();
        for (String curParam : componentsListList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                componentsList.add(curParam);
            }
        }
        String valuetype = request().getQueryString("type");
        String type;
        if (valuetype != null) {
            type = valuetype;
        } else {
            type = null;
        }
        OrgApacheFelixSystemreadyImplComponentsCheckInfo obj = imp.orgApacheFelixSystemreadyImplComponentsCheck(post, apply, delete, action, $location, propertylist, componentsList, type);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheFelixSystemreadyImplFrameworkStartCheck() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuetimeout = request().getQueryString("timeout");
        Integer timeout;
        if (valuetimeout != null) {
            timeout = Integer.parseInt(valuetimeout);
        } else {
            timeout = null;
        }
        String valuetargetStartLevel = request().getQueryString("target.start.level");
        Integer targetStartLevel;
        if (valuetargetStartLevel != null) {
            targetStartLevel = Integer.parseInt(valuetargetStartLevel);
        } else {
            targetStartLevel = null;
        }
        String valuetargetStartLevelPropName = request().getQueryString("target.start.level.prop.name");
        String targetStartLevelPropName;
        if (valuetargetStartLevelPropName != null) {
            targetStartLevelPropName = valuetargetStartLevelPropName;
        } else {
            targetStartLevelPropName = null;
        }
        String valuetype = request().getQueryString("type");
        String type;
        if (valuetype != null) {
            type = valuetype;
        } else {
            type = null;
        }
        OrgApacheFelixSystemreadyImplFrameworkStartCheckInfo obj = imp.orgApacheFelixSystemreadyImplFrameworkStartCheck(post, apply, delete, action, $location, propertylist, timeout, targetStartLevel, targetStartLevelPropName, type);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheFelixSystemreadyImplServicesCheck() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] servicesListArray = request().queryString().get("services.list");
        List<String> servicesListList = OpenAPIUtils.parametersToList("multi", servicesListArray);
        List<String> servicesList = new ArrayList<String>();
        for (String curParam : servicesListList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                servicesList.add(curParam);
            }
        }
        String valuetype = request().getQueryString("type");
        String type;
        if (valuetype != null) {
            type = valuetype;
        } else {
            type = null;
        }
        OrgApacheFelixSystemreadyImplServicesCheckInfo obj = imp.orgApacheFelixSystemreadyImplServicesCheck(post, apply, delete, action, $location, propertylist, servicesList, type);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheFelixSystemreadyImplServletSystemAliveServlet() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueosgiHttpWhiteboardServletPattern = request().getQueryString("osgi.http.whiteboard.servlet.pattern");
        String osgiHttpWhiteboardServletPattern;
        if (valueosgiHttpWhiteboardServletPattern != null) {
            osgiHttpWhiteboardServletPattern = valueosgiHttpWhiteboardServletPattern;
        } else {
            osgiHttpWhiteboardServletPattern = null;
        }
        String valueosgiHttpWhiteboardContextSelect = request().getQueryString("osgi.http.whiteboard.context.select");
        String osgiHttpWhiteboardContextSelect;
        if (valueosgiHttpWhiteboardContextSelect != null) {
            osgiHttpWhiteboardContextSelect = valueosgiHttpWhiteboardContextSelect;
        } else {
            osgiHttpWhiteboardContextSelect = null;
        }
        OrgApacheFelixSystemreadyImplServletSystemAliveServletInfo obj = imp.orgApacheFelixSystemreadyImplServletSystemAliveServlet(post, apply, delete, action, $location, propertylist, osgiHttpWhiteboardServletPattern, osgiHttpWhiteboardContextSelect);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheFelixSystemreadyImplServletSystemReadyServlet() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueosgiHttpWhiteboardServletPattern = request().getQueryString("osgi.http.whiteboard.servlet.pattern");
        String osgiHttpWhiteboardServletPattern;
        if (valueosgiHttpWhiteboardServletPattern != null) {
            osgiHttpWhiteboardServletPattern = valueosgiHttpWhiteboardServletPattern;
        } else {
            osgiHttpWhiteboardServletPattern = null;
        }
        String valueosgiHttpWhiteboardContextSelect = request().getQueryString("osgi.http.whiteboard.context.select");
        String osgiHttpWhiteboardContextSelect;
        if (valueosgiHttpWhiteboardContextSelect != null) {
            osgiHttpWhiteboardContextSelect = valueosgiHttpWhiteboardContextSelect;
        } else {
            osgiHttpWhiteboardContextSelect = null;
        }
        OrgApacheFelixSystemreadyImplServletSystemReadyServletInfo obj = imp.orgApacheFelixSystemreadyImplServletSystemReadyServlet(post, apply, delete, action, $location, propertylist, osgiHttpWhiteboardServletPattern, osgiHttpWhiteboardContextSelect);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheFelixSystemreadySystemReadyMonitor() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuepollInterval = request().getQueryString("poll.interval");
        Integer pollInterval;
        if (valuepollInterval != null) {
            pollInterval = Integer.parseInt(valuepollInterval);
        } else {
            pollInterval = null;
        }
        OrgApacheFelixSystemreadySystemReadyMonitorInfo obj = imp.orgApacheFelixSystemreadySystemReadyMonitor(post, apply, delete, action, $location, propertylist, pollInterval);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheFelixWebconsoleInternalServletOsgiManager() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuemanagerRoot = request().getQueryString("manager.root");
        String managerRoot;
        if (valuemanagerRoot != null) {
            managerRoot = valuemanagerRoot;
        } else {
            managerRoot = null;
        }
        String valuehttpServiceFilter = request().getQueryString("http.service.filter");
        String httpServiceFilter;
        if (valuehttpServiceFilter != null) {
            httpServiceFilter = valuehttpServiceFilter;
        } else {
            httpServiceFilter = null;
        }
        String valuedefaultRender = request().getQueryString("default.render");
        String defaultRender;
        if (valuedefaultRender != null) {
            defaultRender = valuedefaultRender;
        } else {
            defaultRender = null;
        }
        String valuerealm = request().getQueryString("realm");
        String realm;
        if (valuerealm != null) {
            realm = valuerealm;
        } else {
            realm = null;
        }
        String valueusername = request().getQueryString("username");
        String username;
        if (valueusername != null) {
            username = valueusername;
        } else {
            username = null;
        }
        String valuepassword = request().getQueryString("password");
        String password;
        if (valuepassword != null) {
            password = valuepassword;
        } else {
            password = null;
        }
        String valuecategory = request().getQueryString("category");
        String category;
        if (valuecategory != null) {
            category = valuecategory;
        } else {
            category = null;
        }
        String valuelocale = request().getQueryString("locale");
        String locale;
        if (valuelocale != null) {
            locale = valuelocale;
        } else {
            locale = null;
        }
        String valueloglevel = request().getQueryString("loglevel");
        Integer loglevel;
        if (valueloglevel != null) {
            loglevel = Integer.parseInt(valueloglevel);
        } else {
            loglevel = null;
        }
        String valueplugins = request().getQueryString("plugins");
        String plugins;
        if (valueplugins != null) {
            plugins = valueplugins;
        } else {
            plugins = null;
        }
        OrgApacheFelixWebconsoleInternalServletOsgiManagerInfo obj = imp.orgApacheFelixWebconsoleInternalServletOsgiManager(post, apply, delete, action, $location, propertylist, managerRoot, httpServiceFilter, defaultRender, realm, username, password, category, locale, loglevel, plugins);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheFelixWebconsolePluginsEventInternalPluginServlet() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuemaxSize = request().getQueryString("max.size");
        Integer maxSize;
        if (valuemaxSize != null) {
            maxSize = Integer.parseInt(valuemaxSize);
        } else {
            maxSize = null;
        }
        OrgApacheFelixWebconsolePluginsEventInternalPluginServletInfo obj = imp.orgApacheFelixWebconsolePluginsEventInternalPluginServlet(post, apply, delete, action, $location, propertylist, maxSize);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCo() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuefelixMemoryusageDumpThreshold = request().getQueryString("felix.memoryusage.dump.threshold");
        Integer felixMemoryusageDumpThreshold;
        if (valuefelixMemoryusageDumpThreshold != null) {
            felixMemoryusageDumpThreshold = Integer.parseInt(valuefelixMemoryusageDumpThreshold);
        } else {
            felixMemoryusageDumpThreshold = null;
        }
        String valuefelixMemoryusageDumpInterval = request().getQueryString("felix.memoryusage.dump.interval");
        Integer felixMemoryusageDumpInterval;
        if (valuefelixMemoryusageDumpInterval != null) {
            felixMemoryusageDumpInterval = Integer.parseInt(valuefelixMemoryusageDumpInterval);
        } else {
            felixMemoryusageDumpInterval = null;
        }
        String valuefelixMemoryusageDumpLocation = request().getQueryString("felix.memoryusage.dump.location");
        String felixMemoryusageDumpLocation;
        if (valuefelixMemoryusageDumpLocation != null) {
            felixMemoryusageDumpLocation = valuefelixMemoryusageDumpLocation;
        } else {
            felixMemoryusageDumpLocation = null;
        }
        OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoInfo obj = imp.orgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCo(post, apply, delete, action, $location, propertylist, felixMemoryusageDumpThreshold, felixMemoryusageDumpInterval, felixMemoryusageDumpLocation);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheHttpProxyconfigurator() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueproxyEnabled = request().getQueryString("proxy.enabled");
        Boolean proxyEnabled;
        if (valueproxyEnabled != null) {
            proxyEnabled = Boolean.valueOf(valueproxyEnabled);
        } else {
            proxyEnabled = null;
        }
        String valueproxyHost = request().getQueryString("proxy.host");
        String proxyHost;
        if (valueproxyHost != null) {
            proxyHost = valueproxyHost;
        } else {
            proxyHost = null;
        }
        String valueproxyPort = request().getQueryString("proxy.port");
        Integer proxyPort;
        if (valueproxyPort != null) {
            proxyPort = Integer.parseInt(valueproxyPort);
        } else {
            proxyPort = null;
        }
        String valueproxyUser = request().getQueryString("proxy.user");
        String proxyUser;
        if (valueproxyUser != null) {
            proxyUser = valueproxyUser;
        } else {
            proxyUser = null;
        }
        String valueproxyPassword = request().getQueryString("proxy.password");
        String proxyPassword;
        if (valueproxyPassword != null) {
            proxyPassword = valueproxyPassword;
        } else {
            proxyPassword = null;
        }
        String[] proxyExceptionsArray = request().queryString().get("proxy.exceptions");
        List<String> proxyExceptionsList = OpenAPIUtils.parametersToList("multi", proxyExceptionsArray);
        List<String> proxyExceptions = new ArrayList<String>();
        for (String curParam : proxyExceptionsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                proxyExceptions.add(curParam);
            }
        }
        OrgApacheHttpProxyconfiguratorInfo obj = imp.orgApacheHttpProxyconfigurator(post, apply, delete, action, $location, propertylist, proxyEnabled, proxyHost, proxyPort, proxyUser, proxyPassword, proxyExceptions);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProvider() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuedir = request().getQueryString("dir");
        String dir;
        if (valuedir != null) {
            dir = valuedir;
        } else {
            dir = null;
        }
        OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderInfo obj = imp.orgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProvider(post, apply, delete, action, $location, propertylist, dir);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheJackrabbitOakPluginsBlobDatastoreFileDataStore() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuepath = request().getQueryString("path");
        String path;
        if (valuepath != null) {
            path = valuepath;
        } else {
            path = null;
        }
        OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreInfo obj = imp.orgApacheJackrabbitOakPluginsBlobDatastoreFileDataStore(post, apply, delete, action, $location, propertylist, path);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreService() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuemongouri = request().getQueryString("mongouri");
        String mongouri;
        if (valuemongouri != null) {
            mongouri = valuemongouri;
        } else {
            mongouri = null;
        }
        String valuedb = request().getQueryString("db");
        String db;
        if (valuedb != null) {
            db = valuedb;
        } else {
            db = null;
        }
        String valuesocketKeepAlive = request().getQueryString("socketKeepAlive");
        Boolean socketKeepAlive;
        if (valuesocketKeepAlive != null) {
            socketKeepAlive = Boolean.valueOf(valuesocketKeepAlive);
        } else {
            socketKeepAlive = null;
        }
        String valuecache = request().getQueryString("cache");
        Integer cache;
        if (valuecache != null) {
            cache = Integer.parseInt(valuecache);
        } else {
            cache = null;
        }
        String valuenodeCachePercentage = request().getQueryString("nodeCachePercentage");
        Integer nodeCachePercentage;
        if (valuenodeCachePercentage != null) {
            nodeCachePercentage = Integer.parseInt(valuenodeCachePercentage);
        } else {
            nodeCachePercentage = null;
        }
        String valueprevDocCachePercentage = request().getQueryString("prevDocCachePercentage");
        Integer prevDocCachePercentage;
        if (valueprevDocCachePercentage != null) {
            prevDocCachePercentage = Integer.parseInt(valueprevDocCachePercentage);
        } else {
            prevDocCachePercentage = null;
        }
        String valuechildrenCachePercentage = request().getQueryString("childrenCachePercentage");
        Integer childrenCachePercentage;
        if (valuechildrenCachePercentage != null) {
            childrenCachePercentage = Integer.parseInt(valuechildrenCachePercentage);
        } else {
            childrenCachePercentage = null;
        }
        String valuediffCachePercentage = request().getQueryString("diffCachePercentage");
        Integer diffCachePercentage;
        if (valuediffCachePercentage != null) {
            diffCachePercentage = Integer.parseInt(valuediffCachePercentage);
        } else {
            diffCachePercentage = null;
        }
        String valuecacheSegmentCount = request().getQueryString("cacheSegmentCount");
        Integer cacheSegmentCount;
        if (valuecacheSegmentCount != null) {
            cacheSegmentCount = Integer.parseInt(valuecacheSegmentCount);
        } else {
            cacheSegmentCount = null;
        }
        String valuecacheStackMoveDistance = request().getQueryString("cacheStackMoveDistance");
        Integer cacheStackMoveDistance;
        if (valuecacheStackMoveDistance != null) {
            cacheStackMoveDistance = Integer.parseInt(valuecacheStackMoveDistance);
        } else {
            cacheStackMoveDistance = null;
        }
        String valueblobCacheSize = request().getQueryString("blobCacheSize");
        Integer blobCacheSize;
        if (valueblobCacheSize != null) {
            blobCacheSize = Integer.parseInt(valueblobCacheSize);
        } else {
            blobCacheSize = null;
        }
        String valuepersistentCache = request().getQueryString("persistentCache");
        String persistentCache;
        if (valuepersistentCache != null) {
            persistentCache = valuepersistentCache;
        } else {
            persistentCache = null;
        }
        String valuejournalCache = request().getQueryString("journalCache");
        String journalCache;
        if (valuejournalCache != null) {
            journalCache = valuejournalCache;
        } else {
            journalCache = null;
        }
        String valuecustomBlobStore = request().getQueryString("customBlobStore");
        Boolean customBlobStore;
        if (valuecustomBlobStore != null) {
            customBlobStore = Boolean.valueOf(valuecustomBlobStore);
        } else {
            customBlobStore = null;
        }
        String valuejournalGCInterval = request().getQueryString("journalGCInterval");
        Integer journalGCInterval;
        if (valuejournalGCInterval != null) {
            journalGCInterval = Integer.parseInt(valuejournalGCInterval);
        } else {
            journalGCInterval = null;
        }
        String valuejournalGCMaxAge = request().getQueryString("journalGCMaxAge");
        Integer journalGCMaxAge;
        if (valuejournalGCMaxAge != null) {
            journalGCMaxAge = Integer.parseInt(valuejournalGCMaxAge);
        } else {
            journalGCMaxAge = null;
        }
        String valueprefetchExternalChanges = request().getQueryString("prefetchExternalChanges");
        Boolean prefetchExternalChanges;
        if (valueprefetchExternalChanges != null) {
            prefetchExternalChanges = Boolean.valueOf(valueprefetchExternalChanges);
        } else {
            prefetchExternalChanges = null;
        }
        String valuerole = request().getQueryString("role");
        String role;
        if (valuerole != null) {
            role = valuerole;
        } else {
            role = null;
        }
        String valueversionGcMaxAgeInSecs = request().getQueryString("versionGcMaxAgeInSecs");
        Integer versionGcMaxAgeInSecs;
        if (valueversionGcMaxAgeInSecs != null) {
            versionGcMaxAgeInSecs = Integer.parseInt(valueversionGcMaxAgeInSecs);
        } else {
            versionGcMaxAgeInSecs = null;
        }
        String valueversionGCExpression = request().getQueryString("versionGCExpression");
        String versionGCExpression;
        if (valueversionGCExpression != null) {
            versionGCExpression = valueversionGCExpression;
        } else {
            versionGCExpression = null;
        }
        String valueversionGCTimeLimitInSecs = request().getQueryString("versionGCTimeLimitInSecs");
        Integer versionGCTimeLimitInSecs;
        if (valueversionGCTimeLimitInSecs != null) {
            versionGCTimeLimitInSecs = Integer.parseInt(valueversionGCTimeLimitInSecs);
        } else {
            versionGCTimeLimitInSecs = null;
        }
        String valueblobGcMaxAgeInSecs = request().getQueryString("blobGcMaxAgeInSecs");
        Integer blobGcMaxAgeInSecs;
        if (valueblobGcMaxAgeInSecs != null) {
            blobGcMaxAgeInSecs = Integer.parseInt(valueblobGcMaxAgeInSecs);
        } else {
            blobGcMaxAgeInSecs = null;
        }
        String valueblobTrackSnapshotIntervalInSecs = request().getQueryString("blobTrackSnapshotIntervalInSecs");
        Integer blobTrackSnapshotIntervalInSecs;
        if (valueblobTrackSnapshotIntervalInSecs != null) {
            blobTrackSnapshotIntervalInSecs = Integer.parseInt(valueblobTrackSnapshotIntervalInSecs);
        } else {
            blobTrackSnapshotIntervalInSecs = null;
        }
        String valuerepositoryHome = request().getQueryString("repository.home");
        String repositoryHome;
        if (valuerepositoryHome != null) {
            repositoryHome = valuerepositoryHome;
        } else {
            repositoryHome = null;
        }
        String valuemaxReplicationLagInSecs = request().getQueryString("maxReplicationLagInSecs");
        Integer maxReplicationLagInSecs;
        if (valuemaxReplicationLagInSecs != null) {
            maxReplicationLagInSecs = Integer.parseInt(valuemaxReplicationLagInSecs);
        } else {
            maxReplicationLagInSecs = null;
        }
        String valuedocumentStoreType = request().getQueryString("documentStoreType");
        String documentStoreType;
        if (valuedocumentStoreType != null) {
            documentStoreType = valuedocumentStoreType;
        } else {
            documentStoreType = null;
        }
        String valuebundlingDisabled = request().getQueryString("bundlingDisabled");
        Boolean bundlingDisabled;
        if (valuebundlingDisabled != null) {
            bundlingDisabled = Boolean.valueOf(valuebundlingDisabled);
        } else {
            bundlingDisabled = null;
        }
        String valueupdateLimit = request().getQueryString("updateLimit");
        Integer updateLimit;
        if (valueupdateLimit != null) {
            updateLimit = Integer.parseInt(valueupdateLimit);
        } else {
            updateLimit = null;
        }
        String[] persistentCacheIncludesArray = request().queryString().get("persistentCacheIncludes");
        List<String> persistentCacheIncludesList = OpenAPIUtils.parametersToList("multi", persistentCacheIncludesArray);
        List<String> persistentCacheIncludes = new ArrayList<String>();
        for (String curParam : persistentCacheIncludesList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                persistentCacheIncludes.add(curParam);
            }
        }
        String valueleaseCheckMode = request().getQueryString("leaseCheckMode");
        String leaseCheckMode;
        if (valueleaseCheckMode != null) {
            leaseCheckMode = valueleaseCheckMode;
        } else {
            leaseCheckMode = null;
        }
        OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceInfo obj = imp.orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreService(post, apply, delete, action, $location, propertylist, mongouri, db, socketKeepAlive, cache, nodeCachePercentage, prevDocCachePercentage, childrenCachePercentage, diffCachePercentage, cacheSegmentCount, cacheStackMoveDistance, blobCacheSize, persistentCache, journalCache, customBlobStore, journalGCInterval, journalGCMaxAge, prefetchExternalChanges, role, versionGcMaxAgeInSecs, versionGCExpression, versionGCTimeLimitInSecs, blobGcMaxAgeInSecs, blobTrackSnapshotIntervalInSecs, repositoryHome, maxReplicationLagInSecs, documentStoreType, bundlingDisabled, updateLimit, persistentCacheIncludes, leaseCheckMode);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePre() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] persistentCacheIncludesArray = request().queryString().get("persistentCacheIncludes");
        List<String> persistentCacheIncludesList = OpenAPIUtils.parametersToList("multi", persistentCacheIncludesArray);
        List<String> persistentCacheIncludes = new ArrayList<String>();
        for (String curParam : persistentCacheIncludesList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                persistentCacheIncludes.add(curParam);
            }
        }
        OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreInfo obj = imp.orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePre(post, apply, delete, action, $location, propertylist, persistentCacheIncludes);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCac() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] includedPathsArray = request().queryString().get("includedPaths");
        List<String> includedPathsList = OpenAPIUtils.parametersToList("multi", includedPathsArray);
        List<String> includedPaths = new ArrayList<String>();
        for (String curParam : includedPathsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                includedPaths.add(curParam);
            }
        }
        String valueenableAsyncObserver = request().getQueryString("enableAsyncObserver");
        Boolean enableAsyncObserver;
        if (valueenableAsyncObserver != null) {
            enableAsyncObserver = Boolean.valueOf(valueenableAsyncObserver);
        } else {
            enableAsyncObserver = null;
        }
        String valueobserverQueueSize = request().getQueryString("observerQueueSize");
        Integer observerQueueSize;
        if (valueobserverQueueSize != null) {
            observerQueueSize = Integer.parseInt(valueobserverQueueSize);
        } else {
            observerQueueSize = null;
        }
        OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacInfo obj = imp.orgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCac(post, apply, delete, action, $location, propertylist, includedPaths, enableAsyncObserver, observerQueueSize);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheJackrabbitOakPluginsIndexAsyncIndexerService() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] asyncConfigsArray = request().queryString().get("asyncConfigs");
        List<String> asyncConfigsList = OpenAPIUtils.parametersToList("multi", asyncConfigsArray);
        List<String> asyncConfigs = new ArrayList<String>();
        for (String curParam : asyncConfigsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                asyncConfigs.add(curParam);
            }
        }
        String valueleaseTimeOutMinutes = request().getQueryString("leaseTimeOutMinutes");
        Integer leaseTimeOutMinutes;
        if (valueleaseTimeOutMinutes != null) {
            leaseTimeOutMinutes = Integer.parseInt(valueleaseTimeOutMinutes);
        } else {
            leaseTimeOutMinutes = null;
        }
        String valuefailingIndexTimeoutSeconds = request().getQueryString("failingIndexTimeoutSeconds");
        Integer failingIndexTimeoutSeconds;
        if (valuefailingIndexTimeoutSeconds != null) {
            failingIndexTimeoutSeconds = Integer.parseInt(valuefailingIndexTimeoutSeconds);
        } else {
            failingIndexTimeoutSeconds = null;
        }
        String valueerrorWarnIntervalSeconds = request().getQueryString("errorWarnIntervalSeconds");
        Integer errorWarnIntervalSeconds;
        if (valueerrorWarnIntervalSeconds != null) {
            errorWarnIntervalSeconds = Integer.parseInt(valueerrorWarnIntervalSeconds);
        } else {
            errorWarnIntervalSeconds = null;
        }
        OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceInfo obj = imp.orgApacheJackrabbitOakPluginsIndexAsyncIndexerService(post, apply, delete, action, $location, propertylist, asyncConfigs, leaseTimeOutMinutes, failingIndexTimeoutSeconds, errorWarnIntervalSeconds);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServ() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuedisabled = request().getQueryString("disabled");
        Boolean disabled;
        if (valuedisabled != null) {
            disabled = Boolean.valueOf(valuedisabled);
        } else {
            disabled = null;
        }
        String valuedebug = request().getQueryString("debug");
        Boolean debug;
        if (valuedebug != null) {
            debug = Boolean.valueOf(valuedebug);
        } else {
            debug = null;
        }
        String valuelocalIndexDir = request().getQueryString("localIndexDir");
        String localIndexDir;
        if (valuelocalIndexDir != null) {
            localIndexDir = valuelocalIndexDir;
        } else {
            localIndexDir = null;
        }
        String valueenableOpenIndexAsync = request().getQueryString("enableOpenIndexAsync");
        Boolean enableOpenIndexAsync;
        if (valueenableOpenIndexAsync != null) {
            enableOpenIndexAsync = Boolean.valueOf(valueenableOpenIndexAsync);
        } else {
            enableOpenIndexAsync = null;
        }
        String valuethreadPoolSize = request().getQueryString("threadPoolSize");
        Integer threadPoolSize;
        if (valuethreadPoolSize != null) {
            threadPoolSize = Integer.parseInt(valuethreadPoolSize);
        } else {
            threadPoolSize = null;
        }
        String valueprefetchIndexFiles = request().getQueryString("prefetchIndexFiles");
        Boolean prefetchIndexFiles;
        if (valueprefetchIndexFiles != null) {
            prefetchIndexFiles = Boolean.valueOf(valueprefetchIndexFiles);
        } else {
            prefetchIndexFiles = null;
        }
        String valueextractedTextCacheSizeInMB = request().getQueryString("extractedTextCacheSizeInMB");
        Integer extractedTextCacheSizeInMB;
        if (valueextractedTextCacheSizeInMB != null) {
            extractedTextCacheSizeInMB = Integer.parseInt(valueextractedTextCacheSizeInMB);
        } else {
            extractedTextCacheSizeInMB = null;
        }
        String valueextractedTextCacheExpiryInSecs = request().getQueryString("extractedTextCacheExpiryInSecs");
        Integer extractedTextCacheExpiryInSecs;
        if (valueextractedTextCacheExpiryInSecs != null) {
            extractedTextCacheExpiryInSecs = Integer.parseInt(valueextractedTextCacheExpiryInSecs);
        } else {
            extractedTextCacheExpiryInSecs = null;
        }
        String valuealwaysUsePreExtractedCache = request().getQueryString("alwaysUsePreExtractedCache");
        Boolean alwaysUsePreExtractedCache;
        if (valuealwaysUsePreExtractedCache != null) {
            alwaysUsePreExtractedCache = Boolean.valueOf(valuealwaysUsePreExtractedCache);
        } else {
            alwaysUsePreExtractedCache = null;
        }
        String valuebooleanClauseLimit = request().getQueryString("booleanClauseLimit");
        Integer booleanClauseLimit;
        if (valuebooleanClauseLimit != null) {
            booleanClauseLimit = Integer.parseInt(valuebooleanClauseLimit);
        } else {
            booleanClauseLimit = null;
        }
        String valueenableHybridIndexing = request().getQueryString("enableHybridIndexing");
        Boolean enableHybridIndexing;
        if (valueenableHybridIndexing != null) {
            enableHybridIndexing = Boolean.valueOf(valueenableHybridIndexing);
        } else {
            enableHybridIndexing = null;
        }
        String valuehybridQueueSize = request().getQueryString("hybridQueueSize");
        Integer hybridQueueSize;
        if (valuehybridQueueSize != null) {
            hybridQueueSize = Integer.parseInt(valuehybridQueueSize);
        } else {
            hybridQueueSize = null;
        }
        String valuedisableStoredIndexDefinition = request().getQueryString("disableStoredIndexDefinition");
        Boolean disableStoredIndexDefinition;
        if (valuedisableStoredIndexDefinition != null) {
            disableStoredIndexDefinition = Boolean.valueOf(valuedisableStoredIndexDefinition);
        } else {
            disableStoredIndexDefinition = null;
        }
        String valuedeletedBlobsCollectionEnabled = request().getQueryString("deletedBlobsCollectionEnabled");
        Boolean deletedBlobsCollectionEnabled;
        if (valuedeletedBlobsCollectionEnabled != null) {
            deletedBlobsCollectionEnabled = Boolean.valueOf(valuedeletedBlobsCollectionEnabled);
        } else {
            deletedBlobsCollectionEnabled = null;
        }
        String valuepropIndexCleanerIntervalInSecs = request().getQueryString("propIndexCleanerIntervalInSecs");
        Integer propIndexCleanerIntervalInSecs;
        if (valuepropIndexCleanerIntervalInSecs != null) {
            propIndexCleanerIntervalInSecs = Integer.parseInt(valuepropIndexCleanerIntervalInSecs);
        } else {
            propIndexCleanerIntervalInSecs = null;
        }
        String valueenableSingleBlobIndexFiles = request().getQueryString("enableSingleBlobIndexFiles");
        Boolean enableSingleBlobIndexFiles;
        if (valueenableSingleBlobIndexFiles != null) {
            enableSingleBlobIndexFiles = Boolean.valueOf(valueenableSingleBlobIndexFiles);
        } else {
            enableSingleBlobIndexFiles = null;
        }
        OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServInfo obj = imp.orgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServ(post, apply, delete, action, $location, propertylist, disabled, debug, localIndexDir, enableOpenIndexAsync, threadPoolSize, prefetchIndexFiles, extractedTextCacheSizeInMB, extractedTextCacheExpiryInSecs, alwaysUsePreExtractedCache, booleanClauseLimit, enableHybridIndexing, hybridQueueSize, disableStoredIndexDefinition, deletedBlobsCollectionEnabled, propIndexCleanerIntervalInSecs, enableSingleBlobIndexFiles);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCo() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuesolrHomePath = request().getQueryString("solr.home.path");
        String solrHomePath;
        if (valuesolrHomePath != null) {
            solrHomePath = valuesolrHomePath;
        } else {
            solrHomePath = null;
        }
        String valuesolrCoreName = request().getQueryString("solr.core.name");
        String solrCoreName;
        if (valuesolrCoreName != null) {
            solrCoreName = valuesolrCoreName;
        } else {
            solrCoreName = null;
        }
        OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoInfo obj = imp.orgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCo(post, apply, delete, action, $location, propertylist, solrHomePath, solrCoreName);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServers() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueenabled = request().getQueryString("enabled");
        Boolean enabled;
        if (valueenabled != null) {
            enabled = Boolean.valueOf(valueenabled);
        } else {
            enabled = null;
        }
        OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersInfo obj = imp.orgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServers(post, apply, delete, action, $location, propertylist, enabled);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfiguration() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuepathDescField = request().getQueryString("path.desc.field");
        String pathDescField;
        if (valuepathDescField != null) {
            pathDescField = valuepathDescField;
        } else {
            pathDescField = null;
        }
        String valuepathChildField = request().getQueryString("path.child.field");
        String pathChildField;
        if (valuepathChildField != null) {
            pathChildField = valuepathChildField;
        } else {
            pathChildField = null;
        }
        String valuepathParentField = request().getQueryString("path.parent.field");
        String pathParentField;
        if (valuepathParentField != null) {
            pathParentField = valuepathParentField;
        } else {
            pathParentField = null;
        }
        String valuepathExactField = request().getQueryString("path.exact.field");
        String pathExactField;
        if (valuepathExactField != null) {
            pathExactField = valuepathExactField;
        } else {
            pathExactField = null;
        }
        String valuecatchAllField = request().getQueryString("catch.all.field");
        String catchAllField;
        if (valuecatchAllField != null) {
            catchAllField = valuecatchAllField;
        } else {
            catchAllField = null;
        }
        String valuecollapsedPathField = request().getQueryString("collapsed.path.field");
        String collapsedPathField;
        if (valuecollapsedPathField != null) {
            collapsedPathField = valuecollapsedPathField;
        } else {
            collapsedPathField = null;
        }
        String valuepathDepthField = request().getQueryString("path.depth.field");
        String pathDepthField;
        if (valuepathDepthField != null) {
            pathDepthField = valuepathDepthField;
        } else {
            pathDepthField = null;
        }
        String valuecommitPolicy = request().getQueryString("commit.policy");
        String commitPolicy;
        if (valuecommitPolicy != null) {
            commitPolicy = valuecommitPolicy;
        } else {
            commitPolicy = null;
        }
        String valuerows = request().getQueryString("rows");
        Integer rows;
        if (valuerows != null) {
            rows = Integer.parseInt(valuerows);
        } else {
            rows = null;
        }
        String valuepathRestrictions = request().getQueryString("path.restrictions");
        Boolean pathRestrictions;
        if (valuepathRestrictions != null) {
            pathRestrictions = Boolean.valueOf(valuepathRestrictions);
        } else {
            pathRestrictions = null;
        }
        String valuepropertyRestrictions = request().getQueryString("property.restrictions");
        Boolean propertyRestrictions;
        if (valuepropertyRestrictions != null) {
            propertyRestrictions = Boolean.valueOf(valuepropertyRestrictions);
        } else {
            propertyRestrictions = null;
        }
        String valueprimarytypesRestrictions = request().getQueryString("primarytypes.restrictions");
        Boolean primarytypesRestrictions;
        if (valueprimarytypesRestrictions != null) {
            primarytypesRestrictions = Boolean.valueOf(valueprimarytypesRestrictions);
        } else {
            primarytypesRestrictions = null;
        }
        String[] ignoredPropertiesArray = request().queryString().get("ignored.properties");
        List<String> ignoredPropertiesList = OpenAPIUtils.parametersToList("multi", ignoredPropertiesArray);
        List<String> ignoredProperties = new ArrayList<String>();
        for (String curParam : ignoredPropertiesList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                ignoredProperties.add(curParam);
            }
        }
        String[] usedPropertiesArray = request().queryString().get("used.properties");
        List<String> usedPropertiesList = OpenAPIUtils.parametersToList("multi", usedPropertiesArray);
        List<String> usedProperties = new ArrayList<String>();
        for (String curParam : usedPropertiesList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                usedProperties.add(curParam);
            }
        }
        String[] typeMappingsArray = request().queryString().get("type.mappings");
        List<String> typeMappingsList = OpenAPIUtils.parametersToList("multi", typeMappingsArray);
        List<String> typeMappings = new ArrayList<String>();
        for (String curParam : typeMappingsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                typeMappings.add(curParam);
            }
        }
        String[] propertyMappingsArray = request().queryString().get("property.mappings");
        List<String> propertyMappingsList = OpenAPIUtils.parametersToList("multi", propertyMappingsArray);
        List<String> propertyMappings = new ArrayList<String>();
        for (String curParam : propertyMappingsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertyMappings.add(curParam);
            }
        }
        String valuecollapseJcrcontentNodes = request().getQueryString("collapse.jcrcontent.nodes");
        Boolean collapseJcrcontentNodes;
        if (valuecollapseJcrcontentNodes != null) {
            collapseJcrcontentNodes = Boolean.valueOf(valuecollapseJcrcontentNodes);
        } else {
            collapseJcrcontentNodes = null;
        }
        OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationInfo obj = imp.orgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfiguration(post, apply, delete, action, $location, propertylist, pathDescField, pathChildField, pathParentField, pathExactField, catchAllField, collapsedPathField, pathDepthField, commitPolicy, rows, pathRestrictions, propertyRestrictions, primarytypesRestrictions, ignoredProperties, usedProperties, typeMappings, propertyMappings, collapseJcrcontentNodes);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConf() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuesolrHttpUrl = request().getQueryString("solr.http.url");
        String solrHttpUrl;
        if (valuesolrHttpUrl != null) {
            solrHttpUrl = valuesolrHttpUrl;
        } else {
            solrHttpUrl = null;
        }
        String valuesolrZkHost = request().getQueryString("solr.zk.host");
        String solrZkHost;
        if (valuesolrZkHost != null) {
            solrZkHost = valuesolrZkHost;
        } else {
            solrZkHost = null;
        }
        String valuesolrCollection = request().getQueryString("solr.collection");
        String solrCollection;
        if (valuesolrCollection != null) {
            solrCollection = valuesolrCollection;
        } else {
            solrCollection = null;
        }
        String valuesolrSocketTimeout = request().getQueryString("solr.socket.timeout");
        Integer solrSocketTimeout;
        if (valuesolrSocketTimeout != null) {
            solrSocketTimeout = Integer.parseInt(valuesolrSocketTimeout);
        } else {
            solrSocketTimeout = null;
        }
        String valuesolrConnectionTimeout = request().getQueryString("solr.connection.timeout");
        Integer solrConnectionTimeout;
        if (valuesolrConnectionTimeout != null) {
            solrConnectionTimeout = Integer.parseInt(valuesolrConnectionTimeout);
        } else {
            solrConnectionTimeout = null;
        }
        String valuesolrShardsNo = request().getQueryString("solr.shards.no");
        Integer solrShardsNo;
        if (valuesolrShardsNo != null) {
            solrShardsNo = Integer.parseInt(valuesolrShardsNo);
        } else {
            solrShardsNo = null;
        }
        String valuesolrReplicationFactor = request().getQueryString("solr.replication.factor");
        Integer solrReplicationFactor;
        if (valuesolrReplicationFactor != null) {
            solrReplicationFactor = Integer.parseInt(valuesolrReplicationFactor);
        } else {
            solrReplicationFactor = null;
        }
        String valuesolrConfDir = request().getQueryString("solr.conf.dir");
        String solrConfDir;
        if (valuesolrConfDir != null) {
            solrConfDir = valuesolrConfDir;
        } else {
            solrConfDir = null;
        }
        OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfInfo obj = imp.orgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConf(post, apply, delete, action, $location, propertylist, solrHttpUrl, solrZkHost, solrCollection, solrSocketTimeout, solrConnectionTimeout, solrShardsNo, solrReplicationFactor, solrConfDir);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvid() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuequeryAggregation = request().getQueryString("query.aggregation");
        Boolean queryAggregation;
        if (valuequeryAggregation != null) {
            queryAggregation = Boolean.valueOf(valuequeryAggregation);
        } else {
            queryAggregation = null;
        }
        OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidInfo obj = imp.orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvid(post, apply, delete, action, $location, propertylist, queryAggregation);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSe() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueserverType = request().getQueryString("server.type");
        String serverType;
        if (valueserverType != null) {
            serverType = valueserverType;
        } else {
            serverType = null;
        }
        OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeInfo obj = imp.orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSe(post, apply, delete, action, $location, propertylist, serverType);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheJackrabbitOakPluginsMetricStatisticsProviderFactory() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueproviderType = request().getQueryString("providerType");
        String providerType;
        if (valueproviderType != null) {
            providerType = valueproviderType;
        } else {
            providerType = null;
        }
        OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryInfo obj = imp.orgApacheJackrabbitOakPluginsMetricStatisticsProviderFactory(post, apply, delete, action, $location, propertylist, providerType);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheJackrabbitOakPluginsObservationChangeCollectorProvider() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuemaxItems = request().getQueryString("maxItems");
        Integer maxItems;
        if (valuemaxItems != null) {
            maxItems = Integer.parseInt(valuemaxItems);
        } else {
            maxItems = null;
        }
        String valuemaxPathDepth = request().getQueryString("maxPathDepth");
        Integer maxPathDepth;
        if (valuemaxPathDepth != null) {
            maxPathDepth = Integer.parseInt(valuemaxPathDepth);
        } else {
            maxPathDepth = null;
        }
        String valueenabled = request().getQueryString("enabled");
        Boolean enabled;
        if (valueenabled != null) {
            enabled = Boolean.valueOf(valueenabled);
        } else {
            enabled = null;
        }
        OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderInfo obj = imp.orgApacheJackrabbitOakPluginsObservationChangeCollectorProvider(post, apply, delete, action, $location, propertylist, maxItems, maxPathDepth, enabled);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheJackrabbitOakQueryQueryEngineSettingsService() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuequeryLimitInMemory = request().getQueryString("queryLimitInMemory");
        Integer queryLimitInMemory;
        if (valuequeryLimitInMemory != null) {
            queryLimitInMemory = Integer.parseInt(valuequeryLimitInMemory);
        } else {
            queryLimitInMemory = null;
        }
        String valuequeryLimitReads = request().getQueryString("queryLimitReads");
        Integer queryLimitReads;
        if (valuequeryLimitReads != null) {
            queryLimitReads = Integer.parseInt(valuequeryLimitReads);
        } else {
            queryLimitReads = null;
        }
        String valuequeryFailTraversal = request().getQueryString("queryFailTraversal");
        Boolean queryFailTraversal;
        if (valuequeryFailTraversal != null) {
            queryFailTraversal = Boolean.valueOf(valuequeryFailTraversal);
        } else {
            queryFailTraversal = null;
        }
        String valuefastQuerySize = request().getQueryString("fastQuerySize");
        Boolean fastQuerySize;
        if (valuefastQuerySize != null) {
            fastQuerySize = Boolean.valueOf(valuefastQuerySize);
        } else {
            fastQuerySize = null;
        }
        OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceInfo obj = imp.orgApacheJackrabbitOakQueryQueryEngineSettingsService(post, apply, delete, action, $location, propertylist, queryLimitInMemory, queryLimitReads, queryFailTraversal, fastQuerySize);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfig() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueorgApacheJackrabbitOakAuthenticationAppName = request().getQueryString("org.apache.jackrabbit.oak.authentication.appName");
        String orgApacheJackrabbitOakAuthenticationAppName;
        if (valueorgApacheJackrabbitOakAuthenticationAppName != null) {
            orgApacheJackrabbitOakAuthenticationAppName = valueorgApacheJackrabbitOakAuthenticationAppName;
        } else {
            orgApacheJackrabbitOakAuthenticationAppName = null;
        }
        String valueorgApacheJackrabbitOakAuthenticationConfigSpiName = request().getQueryString("org.apache.jackrabbit.oak.authentication.configSpiName");
        String orgApacheJackrabbitOakAuthenticationConfigSpiName;
        if (valueorgApacheJackrabbitOakAuthenticationConfigSpiName != null) {
            orgApacheJackrabbitOakAuthenticationConfigSpiName = valueorgApacheJackrabbitOakAuthenticationConfigSpiName;
        } else {
            orgApacheJackrabbitOakAuthenticationConfigSpiName = null;
        }
        OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigInfo obj = imp.orgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfig(post, apply, delete, action, $location, propertylist, orgApacheJackrabbitOakAuthenticationAppName, orgApacheJackrabbitOakAuthenticationConfigSpiName);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdenti() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueproviderName = request().getQueryString("provider.name");
        String providerName;
        if (valueproviderName != null) {
            providerName = valueproviderName;
        } else {
            providerName = null;
        }
        String valuehostName = request().getQueryString("host.name");
        String hostName;
        if (valuehostName != null) {
            hostName = valuehostName;
        } else {
            hostName = null;
        }
        String valuehostPort = request().getQueryString("host.port");
        Integer hostPort;
        if (valuehostPort != null) {
            hostPort = Integer.parseInt(valuehostPort);
        } else {
            hostPort = null;
        }
        String valuehostSsl = request().getQueryString("host.ssl");
        Boolean hostSsl;
        if (valuehostSsl != null) {
            hostSsl = Boolean.valueOf(valuehostSsl);
        } else {
            hostSsl = null;
        }
        String valuehostTls = request().getQueryString("host.tls");
        Boolean hostTls;
        if (valuehostTls != null) {
            hostTls = Boolean.valueOf(valuehostTls);
        } else {
            hostTls = null;
        }
        String valuehostNoCertCheck = request().getQueryString("host.noCertCheck");
        Boolean hostNoCertCheck;
        if (valuehostNoCertCheck != null) {
            hostNoCertCheck = Boolean.valueOf(valuehostNoCertCheck);
        } else {
            hostNoCertCheck = null;
        }
        String valuebindDn = request().getQueryString("bind.dn");
        String bindDn;
        if (valuebindDn != null) {
            bindDn = valuebindDn;
        } else {
            bindDn = null;
        }
        String valuebindPassword = request().getQueryString("bind.password");
        String bindPassword;
        if (valuebindPassword != null) {
            bindPassword = valuebindPassword;
        } else {
            bindPassword = null;
        }
        String valuesearchTimeout = request().getQueryString("searchTimeout");
        String searchTimeout;
        if (valuesearchTimeout != null) {
            searchTimeout = valuesearchTimeout;
        } else {
            searchTimeout = null;
        }
        String valueadminPoolMaxActive = request().getQueryString("adminPool.maxActive");
        Integer adminPoolMaxActive;
        if (valueadminPoolMaxActive != null) {
            adminPoolMaxActive = Integer.parseInt(valueadminPoolMaxActive);
        } else {
            adminPoolMaxActive = null;
        }
        String valueadminPoolLookupOnValidate = request().getQueryString("adminPool.lookupOnValidate");
        Boolean adminPoolLookupOnValidate;
        if (valueadminPoolLookupOnValidate != null) {
            adminPoolLookupOnValidate = Boolean.valueOf(valueadminPoolLookupOnValidate);
        } else {
            adminPoolLookupOnValidate = null;
        }
        String valueuserPoolMaxActive = request().getQueryString("userPool.maxActive");
        Integer userPoolMaxActive;
        if (valueuserPoolMaxActive != null) {
            userPoolMaxActive = Integer.parseInt(valueuserPoolMaxActive);
        } else {
            userPoolMaxActive = null;
        }
        String valueuserPoolLookupOnValidate = request().getQueryString("userPool.lookupOnValidate");
        Boolean userPoolLookupOnValidate;
        if (valueuserPoolLookupOnValidate != null) {
            userPoolLookupOnValidate = Boolean.valueOf(valueuserPoolLookupOnValidate);
        } else {
            userPoolLookupOnValidate = null;
        }
        String valueuserBaseDN = request().getQueryString("user.baseDN");
        String userBaseDN;
        if (valueuserBaseDN != null) {
            userBaseDN = valueuserBaseDN;
        } else {
            userBaseDN = null;
        }
        String[] userObjectclassArray = request().queryString().get("user.objectclass");
        List<String> userObjectclassList = OpenAPIUtils.parametersToList("multi", userObjectclassArray);
        List<String> userObjectclass = new ArrayList<String>();
        for (String curParam : userObjectclassList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                userObjectclass.add(curParam);
            }
        }
        String valueuserIdAttribute = request().getQueryString("user.idAttribute");
        String userIdAttribute;
        if (valueuserIdAttribute != null) {
            userIdAttribute = valueuserIdAttribute;
        } else {
            userIdAttribute = null;
        }
        String valueuserExtraFilter = request().getQueryString("user.extraFilter");
        String userExtraFilter;
        if (valueuserExtraFilter != null) {
            userExtraFilter = valueuserExtraFilter;
        } else {
            userExtraFilter = null;
        }
        String valueuserMakeDnPath = request().getQueryString("user.makeDnPath");
        Boolean userMakeDnPath;
        if (valueuserMakeDnPath != null) {
            userMakeDnPath = Boolean.valueOf(valueuserMakeDnPath);
        } else {
            userMakeDnPath = null;
        }
        String valuegroupBaseDN = request().getQueryString("group.baseDN");
        String groupBaseDN;
        if (valuegroupBaseDN != null) {
            groupBaseDN = valuegroupBaseDN;
        } else {
            groupBaseDN = null;
        }
        String[] groupObjectclassArray = request().queryString().get("group.objectclass");
        List<String> groupObjectclassList = OpenAPIUtils.parametersToList("multi", groupObjectclassArray);
        List<String> groupObjectclass = new ArrayList<String>();
        for (String curParam : groupObjectclassList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                groupObjectclass.add(curParam);
            }
        }
        String valuegroupNameAttribute = request().getQueryString("group.nameAttribute");
        String groupNameAttribute;
        if (valuegroupNameAttribute != null) {
            groupNameAttribute = valuegroupNameAttribute;
        } else {
            groupNameAttribute = null;
        }
        String valuegroupExtraFilter = request().getQueryString("group.extraFilter");
        String groupExtraFilter;
        if (valuegroupExtraFilter != null) {
            groupExtraFilter = valuegroupExtraFilter;
        } else {
            groupExtraFilter = null;
        }
        String valuegroupMakeDnPath = request().getQueryString("group.makeDnPath");
        Boolean groupMakeDnPath;
        if (valuegroupMakeDnPath != null) {
            groupMakeDnPath = Boolean.valueOf(valuegroupMakeDnPath);
        } else {
            groupMakeDnPath = null;
        }
        String valuegroupMemberAttribute = request().getQueryString("group.memberAttribute");
        String groupMemberAttribute;
        if (valuegroupMemberAttribute != null) {
            groupMemberAttribute = valuegroupMemberAttribute;
        } else {
            groupMemberAttribute = null;
        }
        String valueuseUidForExtId = request().getQueryString("useUidForExtId");
        Boolean useUidForExtId;
        if (valueuseUidForExtId != null) {
            useUidForExtId = Boolean.valueOf(valueuseUidForExtId);
        } else {
            useUidForExtId = null;
        }
        String[] customattributesArray = request().queryString().get("customattributes");
        List<String> customattributesList = OpenAPIUtils.parametersToList("multi", customattributesArray);
        List<String> customattributes = new ArrayList<String>();
        for (String curParam : customattributesList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                customattributes.add(curParam);
            }
        }
        OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiInfo obj = imp.orgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdenti(post, apply, delete, action, $location, propertylist, providerName, hostName, hostPort, hostSsl, hostTls, hostNoCertCheck, bindDn, bindPassword, searchTimeout, adminPoolMaxActive, adminPoolLookupOnValidate, userPoolMaxActive, userPoolLookupOnValidate, userBaseDN, userObjectclass, userIdAttribute, userExtraFilter, userMakeDnPath, groupBaseDN, groupObjectclass, groupNameAttribute, groupExtraFilter, groupMakeDnPath, groupMemberAttribute, useUidForExtId, customattributes);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfigura() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuetokenExpiration = request().getQueryString("tokenExpiration");
        String tokenExpiration;
        if (valuetokenExpiration != null) {
            tokenExpiration = valuetokenExpiration;
        } else {
            tokenExpiration = null;
        }
        String valuetokenLength = request().getQueryString("tokenLength");
        String tokenLength;
        if (valuetokenLength != null) {
            tokenLength = valuetokenLength;
        } else {
            tokenLength = null;
        }
        String valuetokenRefresh = request().getQueryString("tokenRefresh");
        Boolean tokenRefresh;
        if (valuetokenRefresh != null) {
            tokenRefresh = Boolean.valueOf(valuetokenRefresh);
        } else {
            tokenRefresh = null;
        }
        String valuetokenCleanupThreshold = request().getQueryString("tokenCleanupThreshold");
        Integer tokenCleanupThreshold;
        if (valuetokenCleanupThreshold != null) {
            tokenCleanupThreshold = Integer.parseInt(valuetokenCleanupThreshold);
        } else {
            tokenCleanupThreshold = null;
        }
        String valuepasswordHashAlgorithm = request().getQueryString("passwordHashAlgorithm");
        String passwordHashAlgorithm;
        if (valuepasswordHashAlgorithm != null) {
            passwordHashAlgorithm = valuepasswordHashAlgorithm;
        } else {
            passwordHashAlgorithm = null;
        }
        String valuepasswordHashIterations = request().getQueryString("passwordHashIterations");
        Integer passwordHashIterations;
        if (valuepasswordHashIterations != null) {
            passwordHashIterations = Integer.parseInt(valuepasswordHashIterations);
        } else {
            passwordHashIterations = null;
        }
        String valuepasswordSaltSize = request().getQueryString("passwordSaltSize");
        Integer passwordSaltSize;
        if (valuepasswordSaltSize != null) {
            passwordSaltSize = Integer.parseInt(valuepasswordSaltSize);
        } else {
            passwordSaltSize = null;
        }
        OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraInfo obj = imp.orgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfigura(post, apply, delete, action, $location, propertylist, tokenExpiration, tokenLength, tokenRefresh, tokenCleanupThreshold, passwordHashAlgorithm, passwordHashIterations, passwordSaltSize);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigur() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuepermissionsJr2 = request().getQueryString("permissionsJr2");
        String permissionsJr2;
        if (valuepermissionsJr2 != null) {
            permissionsJr2 = valuepermissionsJr2;
        } else {
            permissionsJr2 = null;
        }
        String valueimportBehavior = request().getQueryString("importBehavior");
        String importBehavior;
        if (valueimportBehavior != null) {
            importBehavior = valueimportBehavior;
        } else {
            importBehavior = null;
        }
        String[] readPathsArray = request().queryString().get("readPaths");
        List<String> readPathsList = OpenAPIUtils.parametersToList("multi", readPathsArray);
        List<String> readPaths = new ArrayList<String>();
        for (String curParam : readPathsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                readPaths.add(curParam);
            }
        }
        String[] administrativePrincipalsArray = request().queryString().get("administrativePrincipals");
        List<String> administrativePrincipalsList = OpenAPIUtils.parametersToList("multi", administrativePrincipalsArray);
        List<String> administrativePrincipals = new ArrayList<String>();
        for (String curParam : administrativePrincipalsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                administrativePrincipals.add(curParam);
            }
        }
        String valueconfigurationRanking = request().getQueryString("configurationRanking");
        Integer configurationRanking;
        if (valueconfigurationRanking != null) {
            configurationRanking = Integer.parseInt(valueconfigurationRanking);
        } else {
            configurationRanking = null;
        }
        OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurInfo obj = imp.orgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigur(post, apply, delete, action, $location, propertylist, permissionsJr2, importBehavior, readPaths, administrativePrincipals, configurationRanking);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheJackrabbitOakSecurityInternalSecurityProviderRegistrati() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] requiredServicePidsArray = request().queryString().get("requiredServicePids");
        List<String> requiredServicePidsList = OpenAPIUtils.parametersToList("multi", requiredServicePidsArray);
        List<String> requiredServicePids = new ArrayList<String>();
        for (String curParam : requiredServicePidsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                requiredServicePids.add(curParam);
            }
        }
        String valueauthorizationCompositionType = request().getQueryString("authorizationCompositionType");
        String authorizationCompositionType;
        if (valueauthorizationCompositionType != null) {
            authorizationCompositionType = valueauthorizationCompositionType;
        } else {
            authorizationCompositionType = null;
        }
        OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiInfo obj = imp.orgApacheJackrabbitOakSecurityInternalSecurityProviderRegistrati(post, apply, delete, action, $location, propertylist, requiredServicePids, authorizationCompositionType);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeName() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuelength = request().getQueryString("length");
        Integer length;
        if (valuelength != null) {
            length = Integer.parseInt(valuelength);
        } else {
            length = null;
        }
        OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameInfo obj = imp.orgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeName(post, apply, delete, action, $location, propertylist, length);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheJackrabbitOakSecurityUserUserConfigurationImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueusersPath = request().getQueryString("usersPath");
        String usersPath;
        if (valueusersPath != null) {
            usersPath = valueusersPath;
        } else {
            usersPath = null;
        }
        String valuegroupsPath = request().getQueryString("groupsPath");
        String groupsPath;
        if (valuegroupsPath != null) {
            groupsPath = valuegroupsPath;
        } else {
            groupsPath = null;
        }
        String valuesystemRelativePath = request().getQueryString("systemRelativePath");
        String systemRelativePath;
        if (valuesystemRelativePath != null) {
            systemRelativePath = valuesystemRelativePath;
        } else {
            systemRelativePath = null;
        }
        String valuedefaultDepth = request().getQueryString("defaultDepth");
        Integer defaultDepth;
        if (valuedefaultDepth != null) {
            defaultDepth = Integer.parseInt(valuedefaultDepth);
        } else {
            defaultDepth = null;
        }
        String valueimportBehavior = request().getQueryString("importBehavior");
        String importBehavior;
        if (valueimportBehavior != null) {
            importBehavior = valueimportBehavior;
        } else {
            importBehavior = null;
        }
        String valuepasswordHashAlgorithm = request().getQueryString("passwordHashAlgorithm");
        String passwordHashAlgorithm;
        if (valuepasswordHashAlgorithm != null) {
            passwordHashAlgorithm = valuepasswordHashAlgorithm;
        } else {
            passwordHashAlgorithm = null;
        }
        String valuepasswordHashIterations = request().getQueryString("passwordHashIterations");
        Integer passwordHashIterations;
        if (valuepasswordHashIterations != null) {
            passwordHashIterations = Integer.parseInt(valuepasswordHashIterations);
        } else {
            passwordHashIterations = null;
        }
        String valuepasswordSaltSize = request().getQueryString("passwordSaltSize");
        Integer passwordSaltSize;
        if (valuepasswordSaltSize != null) {
            passwordSaltSize = Integer.parseInt(valuepasswordSaltSize);
        } else {
            passwordSaltSize = null;
        }
        String valueomitAdminPw = request().getQueryString("omitAdminPw");
        Boolean omitAdminPw;
        if (valueomitAdminPw != null) {
            omitAdminPw = Boolean.valueOf(valueomitAdminPw);
        } else {
            omitAdminPw = null;
        }
        String valuesupportAutoSave = request().getQueryString("supportAutoSave");
        Boolean supportAutoSave;
        if (valuesupportAutoSave != null) {
            supportAutoSave = Boolean.valueOf(valuesupportAutoSave);
        } else {
            supportAutoSave = null;
        }
        String valuepasswordMaxAge = request().getQueryString("passwordMaxAge");
        Integer passwordMaxAge;
        if (valuepasswordMaxAge != null) {
            passwordMaxAge = Integer.parseInt(valuepasswordMaxAge);
        } else {
            passwordMaxAge = null;
        }
        String valueinitialPasswordChange = request().getQueryString("initialPasswordChange");
        Boolean initialPasswordChange;
        if (valueinitialPasswordChange != null) {
            initialPasswordChange = Boolean.valueOf(valueinitialPasswordChange);
        } else {
            initialPasswordChange = null;
        }
        String valuepasswordHistorySize = request().getQueryString("passwordHistorySize");
        Integer passwordHistorySize;
        if (valuepasswordHistorySize != null) {
            passwordHistorySize = Integer.parseInt(valuepasswordHistorySize);
        } else {
            passwordHistorySize = null;
        }
        String valuepasswordExpiryForAdmin = request().getQueryString("passwordExpiryForAdmin");
        Boolean passwordExpiryForAdmin;
        if (valuepasswordExpiryForAdmin != null) {
            passwordExpiryForAdmin = Boolean.valueOf(valuepasswordExpiryForAdmin);
        } else {
            passwordExpiryForAdmin = null;
        }
        String valuecacheExpiration = request().getQueryString("cacheExpiration");
        Integer cacheExpiration;
        if (valuecacheExpiration != null) {
            cacheExpiration = Integer.parseInt(valuecacheExpiration);
        } else {
            cacheExpiration = null;
        }
        String valueenableRFC7613UsercaseMappedProfile = request().getQueryString("enableRFC7613UsercaseMappedProfile");
        Boolean enableRFC7613UsercaseMappedProfile;
        if (valueenableRFC7613UsercaseMappedProfile != null) {
            enableRFC7613UsercaseMappedProfile = Boolean.valueOf(valueenableRFC7613UsercaseMappedProfile);
        } else {
            enableRFC7613UsercaseMappedProfile = null;
        }
        OrgApacheJackrabbitOakSecurityUserUserConfigurationImplInfo obj = imp.orgApacheJackrabbitOakSecurityUserUserConfigurationImpl(post, apply, delete, action, $location, propertylist, usersPath, groupsPath, systemRelativePath, defaultDepth, importBehavior, passwordHashAlgorithm, passwordHashIterations, passwordSaltSize, omitAdminPw, supportAutoSave, passwordMaxAge, initialPasswordChange, passwordHistorySize, passwordExpiryForAdmin, cacheExpiration, enableRFC7613UsercaseMappedProfile);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheJackrabbitOakSegmentAzureAzureSegmentStoreService() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueaccountName = request().getQueryString("accountName");
        String accountName;
        if (valueaccountName != null) {
            accountName = valueaccountName;
        } else {
            accountName = null;
        }
        String valuecontainerName = request().getQueryString("containerName");
        String containerName;
        if (valuecontainerName != null) {
            containerName = valuecontainerName;
        } else {
            containerName = null;
        }
        String valueaccessKey = request().getQueryString("accessKey");
        String accessKey;
        if (valueaccessKey != null) {
            accessKey = valueaccessKey;
        } else {
            accessKey = null;
        }
        String valuerootPath = request().getQueryString("rootPath");
        String rootPath;
        if (valuerootPath != null) {
            rootPath = valuerootPath;
        } else {
            rootPath = null;
        }
        String valueconnectionURL = request().getQueryString("connectionURL");
        String connectionURL;
        if (valueconnectionURL != null) {
            connectionURL = valueconnectionURL;
        } else {
            connectionURL = null;
        }
        OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceInfo obj = imp.orgApacheJackrabbitOakSegmentAzureAzureSegmentStoreService(post, apply, delete, action, $location, propertylist, accountName, containerName, accessKey, rootPath, connectionURL);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheJackrabbitOakSegmentSegmentNodeStoreFactory() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuerepositoryHome = request().getQueryString("repository.home");
        String repositoryHome;
        if (valuerepositoryHome != null) {
            repositoryHome = valuerepositoryHome;
        } else {
            repositoryHome = null;
        }
        String valuetarmkMode = request().getQueryString("tarmk.mode");
        String tarmkMode;
        if (valuetarmkMode != null) {
            tarmkMode = valuetarmkMode;
        } else {
            tarmkMode = null;
        }
        String valuetarmkSize = request().getQueryString("tarmk.size");
        Integer tarmkSize;
        if (valuetarmkSize != null) {
            tarmkSize = Integer.parseInt(valuetarmkSize);
        } else {
            tarmkSize = null;
        }
        String valuesegmentCacheSize = request().getQueryString("segmentCache.size");
        Integer segmentCacheSize;
        if (valuesegmentCacheSize != null) {
            segmentCacheSize = Integer.parseInt(valuesegmentCacheSize);
        } else {
            segmentCacheSize = null;
        }
        String valuestringCacheSize = request().getQueryString("stringCache.size");
        Integer stringCacheSize;
        if (valuestringCacheSize != null) {
            stringCacheSize = Integer.parseInt(valuestringCacheSize);
        } else {
            stringCacheSize = null;
        }
        String valuetemplateCacheSize = request().getQueryString("templateCache.size");
        Integer templateCacheSize;
        if (valuetemplateCacheSize != null) {
            templateCacheSize = Integer.parseInt(valuetemplateCacheSize);
        } else {
            templateCacheSize = null;
        }
        String valuestringDeduplicationCacheSize = request().getQueryString("stringDeduplicationCache.size");
        Integer stringDeduplicationCacheSize;
        if (valuestringDeduplicationCacheSize != null) {
            stringDeduplicationCacheSize = Integer.parseInt(valuestringDeduplicationCacheSize);
        } else {
            stringDeduplicationCacheSize = null;
        }
        String valuetemplateDeduplicationCacheSize = request().getQueryString("templateDeduplicationCache.size");
        Integer templateDeduplicationCacheSize;
        if (valuetemplateDeduplicationCacheSize != null) {
            templateDeduplicationCacheSize = Integer.parseInt(valuetemplateDeduplicationCacheSize);
        } else {
            templateDeduplicationCacheSize = null;
        }
        String valuenodeDeduplicationCacheSize = request().getQueryString("nodeDeduplicationCache.size");
        Integer nodeDeduplicationCacheSize;
        if (valuenodeDeduplicationCacheSize != null) {
            nodeDeduplicationCacheSize = Integer.parseInt(valuenodeDeduplicationCacheSize);
        } else {
            nodeDeduplicationCacheSize = null;
        }
        String valuepauseCompaction = request().getQueryString("pauseCompaction");
        Boolean pauseCompaction;
        if (valuepauseCompaction != null) {
            pauseCompaction = Boolean.valueOf(valuepauseCompaction);
        } else {
            pauseCompaction = null;
        }
        String valuecompactionRetryCount = request().getQueryString("compaction.retryCount");
        Integer compactionRetryCount;
        if (valuecompactionRetryCount != null) {
            compactionRetryCount = Integer.parseInt(valuecompactionRetryCount);
        } else {
            compactionRetryCount = null;
        }
        String valuecompactionForceTimeout = request().getQueryString("compaction.force.timeout");
        Integer compactionForceTimeout;
        if (valuecompactionForceTimeout != null) {
            compactionForceTimeout = Integer.parseInt(valuecompactionForceTimeout);
        } else {
            compactionForceTimeout = null;
        }
        String valuecompactionSizeDeltaEstimation = request().getQueryString("compaction.sizeDeltaEstimation");
        Integer compactionSizeDeltaEstimation;
        if (valuecompactionSizeDeltaEstimation != null) {
            compactionSizeDeltaEstimation = Integer.parseInt(valuecompactionSizeDeltaEstimation);
        } else {
            compactionSizeDeltaEstimation = null;
        }
        String valuecompactionDisableEstimation = request().getQueryString("compaction.disableEstimation");
        Boolean compactionDisableEstimation;
        if (valuecompactionDisableEstimation != null) {
            compactionDisableEstimation = Boolean.valueOf(valuecompactionDisableEstimation);
        } else {
            compactionDisableEstimation = null;
        }
        String valuecompactionRetainedGenerations = request().getQueryString("compaction.retainedGenerations");
        Integer compactionRetainedGenerations;
        if (valuecompactionRetainedGenerations != null) {
            compactionRetainedGenerations = Integer.parseInt(valuecompactionRetainedGenerations);
        } else {
            compactionRetainedGenerations = null;
        }
        String valuecompactionMemoryThreshold = request().getQueryString("compaction.memoryThreshold");
        Integer compactionMemoryThreshold;
        if (valuecompactionMemoryThreshold != null) {
            compactionMemoryThreshold = Integer.parseInt(valuecompactionMemoryThreshold);
        } else {
            compactionMemoryThreshold = null;
        }
        String valuecompactionProgressLog = request().getQueryString("compaction.progressLog");
        Integer compactionProgressLog;
        if (valuecompactionProgressLog != null) {
            compactionProgressLog = Integer.parseInt(valuecompactionProgressLog);
        } else {
            compactionProgressLog = null;
        }
        String valuestandby = request().getQueryString("standby");
        Boolean standby;
        if (valuestandby != null) {
            standby = Boolean.valueOf(valuestandby);
        } else {
            standby = null;
        }
        String valuecustomBlobStore = request().getQueryString("customBlobStore");
        Boolean customBlobStore;
        if (valuecustomBlobStore != null) {
            customBlobStore = Boolean.valueOf(valuecustomBlobStore);
        } else {
            customBlobStore = null;
        }
        String valuecustomSegmentStore = request().getQueryString("customSegmentStore");
        Boolean customSegmentStore;
        if (valuecustomSegmentStore != null) {
            customSegmentStore = Boolean.valueOf(valuecustomSegmentStore);
        } else {
            customSegmentStore = null;
        }
        String valuesplitPersistence = request().getQueryString("splitPersistence");
        Boolean splitPersistence;
        if (valuesplitPersistence != null) {
            splitPersistence = Boolean.valueOf(valuesplitPersistence);
        } else {
            splitPersistence = null;
        }
        String valuerepositoryBackupDir = request().getQueryString("repository.backup.dir");
        String repositoryBackupDir;
        if (valuerepositoryBackupDir != null) {
            repositoryBackupDir = valuerepositoryBackupDir;
        } else {
            repositoryBackupDir = null;
        }
        String valueblobGcMaxAgeInSecs = request().getQueryString("blobGcMaxAgeInSecs");
        Integer blobGcMaxAgeInSecs;
        if (valueblobGcMaxAgeInSecs != null) {
            blobGcMaxAgeInSecs = Integer.parseInt(valueblobGcMaxAgeInSecs);
        } else {
            blobGcMaxAgeInSecs = null;
        }
        String valueblobTrackSnapshotIntervalInSecs = request().getQueryString("blobTrackSnapshotIntervalInSecs");
        Integer blobTrackSnapshotIntervalInSecs;
        if (valueblobTrackSnapshotIntervalInSecs != null) {
            blobTrackSnapshotIntervalInSecs = Integer.parseInt(valueblobTrackSnapshotIntervalInSecs);
        } else {
            blobTrackSnapshotIntervalInSecs = null;
        }
        String valuerole = request().getQueryString("role");
        String role;
        if (valuerole != null) {
            role = valuerole;
        } else {
            role = null;
        }
        String valueregisterDescriptors = request().getQueryString("registerDescriptors");
        Boolean registerDescriptors;
        if (valueregisterDescriptors != null) {
            registerDescriptors = Boolean.valueOf(valueregisterDescriptors);
        } else {
            registerDescriptors = null;
        }
        String valuedispatchChanges = request().getQueryString("dispatchChanges");
        Boolean dispatchChanges;
        if (valuedispatchChanges != null) {
            dispatchChanges = Boolean.valueOf(valuedispatchChanges);
        } else {
            dispatchChanges = null;
        }
        OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryInfo obj = imp.orgApacheJackrabbitOakSegmentSegmentNodeStoreFactory(post, apply, delete, action, $location, propertylist, repositoryHome, tarmkMode, tarmkSize, segmentCacheSize, stringCacheSize, templateCacheSize, stringDeduplicationCacheSize, templateDeduplicationCacheSize, nodeDeduplicationCacheSize, pauseCompaction, compactionRetryCount, compactionForceTimeout, compactionSizeDeltaEstimation, compactionDisableEstimation, compactionRetainedGenerations, compactionMemoryThreshold, compactionProgressLog, standby, customBlobStore, customSegmentStore, splitPersistence, repositoryBackupDir, blobGcMaxAgeInSecs, blobTrackSnapshotIntervalInSecs, role, registerDescriptors, dispatchChanges);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorService() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] commitsTrackerWriterGroupsArray = request().queryString().get("commitsTrackerWriterGroups");
        List<String> commitsTrackerWriterGroupsList = OpenAPIUtils.parametersToList("multi", commitsTrackerWriterGroupsArray);
        List<String> commitsTrackerWriterGroups = new ArrayList<String>();
        for (String curParam : commitsTrackerWriterGroupsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                commitsTrackerWriterGroups.add(curParam);
            }
        }
        OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceInfo obj = imp.orgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorService(post, apply, delete, action, $location, propertylist, commitsTrackerWriterGroups);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheJackrabbitOakSegmentSegmentNodeStoreService() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuerepositoryHome = request().getQueryString("repository.home");
        String repositoryHome;
        if (valuerepositoryHome != null) {
            repositoryHome = valuerepositoryHome;
        } else {
            repositoryHome = null;
        }
        String valuetarmkMode = request().getQueryString("tarmk.mode");
        String tarmkMode;
        if (valuetarmkMode != null) {
            tarmkMode = valuetarmkMode;
        } else {
            tarmkMode = null;
        }
        String valuetarmkSize = request().getQueryString("tarmk.size");
        Integer tarmkSize;
        if (valuetarmkSize != null) {
            tarmkSize = Integer.parseInt(valuetarmkSize);
        } else {
            tarmkSize = null;
        }
        String valuesegmentCacheSize = request().getQueryString("segmentCache.size");
        Integer segmentCacheSize;
        if (valuesegmentCacheSize != null) {
            segmentCacheSize = Integer.parseInt(valuesegmentCacheSize);
        } else {
            segmentCacheSize = null;
        }
        String valuestringCacheSize = request().getQueryString("stringCache.size");
        Integer stringCacheSize;
        if (valuestringCacheSize != null) {
            stringCacheSize = Integer.parseInt(valuestringCacheSize);
        } else {
            stringCacheSize = null;
        }
        String valuetemplateCacheSize = request().getQueryString("templateCache.size");
        Integer templateCacheSize;
        if (valuetemplateCacheSize != null) {
            templateCacheSize = Integer.parseInt(valuetemplateCacheSize);
        } else {
            templateCacheSize = null;
        }
        String valuestringDeduplicationCacheSize = request().getQueryString("stringDeduplicationCache.size");
        Integer stringDeduplicationCacheSize;
        if (valuestringDeduplicationCacheSize != null) {
            stringDeduplicationCacheSize = Integer.parseInt(valuestringDeduplicationCacheSize);
        } else {
            stringDeduplicationCacheSize = null;
        }
        String valuetemplateDeduplicationCacheSize = request().getQueryString("templateDeduplicationCache.size");
        Integer templateDeduplicationCacheSize;
        if (valuetemplateDeduplicationCacheSize != null) {
            templateDeduplicationCacheSize = Integer.parseInt(valuetemplateDeduplicationCacheSize);
        } else {
            templateDeduplicationCacheSize = null;
        }
        String valuenodeDeduplicationCacheSize = request().getQueryString("nodeDeduplicationCache.size");
        Integer nodeDeduplicationCacheSize;
        if (valuenodeDeduplicationCacheSize != null) {
            nodeDeduplicationCacheSize = Integer.parseInt(valuenodeDeduplicationCacheSize);
        } else {
            nodeDeduplicationCacheSize = null;
        }
        String valuepauseCompaction = request().getQueryString("pauseCompaction");
        Boolean pauseCompaction;
        if (valuepauseCompaction != null) {
            pauseCompaction = Boolean.valueOf(valuepauseCompaction);
        } else {
            pauseCompaction = null;
        }
        String valuecompactionRetryCount = request().getQueryString("compaction.retryCount");
        Integer compactionRetryCount;
        if (valuecompactionRetryCount != null) {
            compactionRetryCount = Integer.parseInt(valuecompactionRetryCount);
        } else {
            compactionRetryCount = null;
        }
        String valuecompactionForceTimeout = request().getQueryString("compaction.force.timeout");
        Integer compactionForceTimeout;
        if (valuecompactionForceTimeout != null) {
            compactionForceTimeout = Integer.parseInt(valuecompactionForceTimeout);
        } else {
            compactionForceTimeout = null;
        }
        String valuecompactionSizeDeltaEstimation = request().getQueryString("compaction.sizeDeltaEstimation");
        Integer compactionSizeDeltaEstimation;
        if (valuecompactionSizeDeltaEstimation != null) {
            compactionSizeDeltaEstimation = Integer.parseInt(valuecompactionSizeDeltaEstimation);
        } else {
            compactionSizeDeltaEstimation = null;
        }
        String valuecompactionDisableEstimation = request().getQueryString("compaction.disableEstimation");
        Boolean compactionDisableEstimation;
        if (valuecompactionDisableEstimation != null) {
            compactionDisableEstimation = Boolean.valueOf(valuecompactionDisableEstimation);
        } else {
            compactionDisableEstimation = null;
        }
        String valuecompactionRetainedGenerations = request().getQueryString("compaction.retainedGenerations");
        Integer compactionRetainedGenerations;
        if (valuecompactionRetainedGenerations != null) {
            compactionRetainedGenerations = Integer.parseInt(valuecompactionRetainedGenerations);
        } else {
            compactionRetainedGenerations = null;
        }
        String valuecompactionMemoryThreshold = request().getQueryString("compaction.memoryThreshold");
        Integer compactionMemoryThreshold;
        if (valuecompactionMemoryThreshold != null) {
            compactionMemoryThreshold = Integer.parseInt(valuecompactionMemoryThreshold);
        } else {
            compactionMemoryThreshold = null;
        }
        String valuecompactionProgressLog = request().getQueryString("compaction.progressLog");
        Integer compactionProgressLog;
        if (valuecompactionProgressLog != null) {
            compactionProgressLog = Integer.parseInt(valuecompactionProgressLog);
        } else {
            compactionProgressLog = null;
        }
        String valuestandby = request().getQueryString("standby");
        Boolean standby;
        if (valuestandby != null) {
            standby = Boolean.valueOf(valuestandby);
        } else {
            standby = null;
        }
        String valuecustomBlobStore = request().getQueryString("customBlobStore");
        Boolean customBlobStore;
        if (valuecustomBlobStore != null) {
            customBlobStore = Boolean.valueOf(valuecustomBlobStore);
        } else {
            customBlobStore = null;
        }
        String valuecustomSegmentStore = request().getQueryString("customSegmentStore");
        Boolean customSegmentStore;
        if (valuecustomSegmentStore != null) {
            customSegmentStore = Boolean.valueOf(valuecustomSegmentStore);
        } else {
            customSegmentStore = null;
        }
        String valuesplitPersistence = request().getQueryString("splitPersistence");
        Boolean splitPersistence;
        if (valuesplitPersistence != null) {
            splitPersistence = Boolean.valueOf(valuesplitPersistence);
        } else {
            splitPersistence = null;
        }
        String valuerepositoryBackupDir = request().getQueryString("repository.backup.dir");
        String repositoryBackupDir;
        if (valuerepositoryBackupDir != null) {
            repositoryBackupDir = valuerepositoryBackupDir;
        } else {
            repositoryBackupDir = null;
        }
        String valueblobGcMaxAgeInSecs = request().getQueryString("blobGcMaxAgeInSecs");
        Integer blobGcMaxAgeInSecs;
        if (valueblobGcMaxAgeInSecs != null) {
            blobGcMaxAgeInSecs = Integer.parseInt(valueblobGcMaxAgeInSecs);
        } else {
            blobGcMaxAgeInSecs = null;
        }
        String valueblobTrackSnapshotIntervalInSecs = request().getQueryString("blobTrackSnapshotIntervalInSecs");
        Integer blobTrackSnapshotIntervalInSecs;
        if (valueblobTrackSnapshotIntervalInSecs != null) {
            blobTrackSnapshotIntervalInSecs = Integer.parseInt(valueblobTrackSnapshotIntervalInSecs);
        } else {
            blobTrackSnapshotIntervalInSecs = null;
        }
        OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceInfo obj = imp.orgApacheJackrabbitOakSegmentSegmentNodeStoreService(post, apply, delete, action, $location, propertylist, repositoryHome, tarmkMode, tarmkSize, segmentCacheSize, stringCacheSize, templateCacheSize, stringDeduplicationCacheSize, templateDeduplicationCacheSize, nodeDeduplicationCacheSize, pauseCompaction, compactionRetryCount, compactionForceTimeout, compactionSizeDeltaEstimation, compactionDisableEstimation, compactionRetainedGenerations, compactionMemoryThreshold, compactionProgressLog, standby, customBlobStore, customSegmentStore, splitPersistence, repositoryBackupDir, blobGcMaxAgeInSecs, blobTrackSnapshotIntervalInSecs);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreService() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueorgApacheSlingInstallerConfigurationPersist = request().getQueryString("org.apache.sling.installer.configuration.persist");
        Boolean orgApacheSlingInstallerConfigurationPersist;
        if (valueorgApacheSlingInstallerConfigurationPersist != null) {
            orgApacheSlingInstallerConfigurationPersist = Boolean.valueOf(valueorgApacheSlingInstallerConfigurationPersist);
        } else {
            orgApacheSlingInstallerConfigurationPersist = null;
        }
        String valuemode = request().getQueryString("mode");
        String mode;
        if (valuemode != null) {
            mode = valuemode;
        } else {
            mode = null;
        }
        String valueport = request().getQueryString("port");
        Integer port;
        if (valueport != null) {
            port = Integer.parseInt(valueport);
        } else {
            port = null;
        }
        String valueprimaryHost = request().getQueryString("primary.host");
        String primaryHost;
        if (valueprimaryHost != null) {
            primaryHost = valueprimaryHost;
        } else {
            primaryHost = null;
        }
        String valueinterval = request().getQueryString("interval");
        Integer interval;
        if (valueinterval != null) {
            interval = Integer.parseInt(valueinterval);
        } else {
            interval = null;
        }
        String[] primaryAllowedClientIpRangesArray = request().queryString().get("primary.allowed-client-ip-ranges");
        List<String> primaryAllowedClientIpRangesList = OpenAPIUtils.parametersToList("multi", primaryAllowedClientIpRangesArray);
        List<String> primaryAllowedClientIpRanges = new ArrayList<String>();
        for (String curParam : primaryAllowedClientIpRangesList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                primaryAllowedClientIpRanges.add(curParam);
            }
        }
        String valuesecure = request().getQueryString("secure");
        Boolean secure;
        if (valuesecure != null) {
            secure = Boolean.valueOf(valuesecure);
        } else {
            secure = null;
        }
        String valuestandbyReadtimeout = request().getQueryString("standby.readtimeout");
        Integer standbyReadtimeout;
        if (valuestandbyReadtimeout != null) {
            standbyReadtimeout = Integer.parseInt(valuestandbyReadtimeout);
        } else {
            standbyReadtimeout = null;
        }
        String valuestandbyAutoclean = request().getQueryString("standby.autoclean");
        Boolean standbyAutoclean;
        if (valuestandbyAutoclean != null) {
            standbyAutoclean = Boolean.valueOf(valuestandbyAutoclean);
        } else {
            standbyAutoclean = null;
        }
        OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceInfo obj = imp.orgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreService(post, apply, delete, action, $location, propertylist, orgApacheSlingInstallerConfigurationPersist, mode, port, primaryHost, interval, primaryAllowedClientIpRanges, secure, standbyReadtimeout, standbyAutoclean);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDe() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuehandlerName = request().getQueryString("handler.name");
        String handlerName;
        if (valuehandlerName != null) {
            handlerName = valuehandlerName;
        } else {
            handlerName = null;
        }
        String valueuserExpirationTime = request().getQueryString("user.expirationTime");
        String userExpirationTime;
        if (valueuserExpirationTime != null) {
            userExpirationTime = valueuserExpirationTime;
        } else {
            userExpirationTime = null;
        }
        String[] userAutoMembershipArray = request().queryString().get("user.autoMembership");
        List<String> userAutoMembershipList = OpenAPIUtils.parametersToList("multi", userAutoMembershipArray);
        List<String> userAutoMembership = new ArrayList<String>();
        for (String curParam : userAutoMembershipList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                userAutoMembership.add(curParam);
            }
        }
        String[] userPropertyMappingArray = request().queryString().get("user.propertyMapping");
        List<String> userPropertyMappingList = OpenAPIUtils.parametersToList("multi", userPropertyMappingArray);
        List<String> userPropertyMapping = new ArrayList<String>();
        for (String curParam : userPropertyMappingList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                userPropertyMapping.add(curParam);
            }
        }
        String valueuserPathPrefix = request().getQueryString("user.pathPrefix");
        String userPathPrefix;
        if (valueuserPathPrefix != null) {
            userPathPrefix = valueuserPathPrefix;
        } else {
            userPathPrefix = null;
        }
        String valueuserMembershipExpTime = request().getQueryString("user.membershipExpTime");
        String userMembershipExpTime;
        if (valueuserMembershipExpTime != null) {
            userMembershipExpTime = valueuserMembershipExpTime;
        } else {
            userMembershipExpTime = null;
        }
        String valueuserMembershipNestingDepth = request().getQueryString("user.membershipNestingDepth");
        Integer userMembershipNestingDepth;
        if (valueuserMembershipNestingDepth != null) {
            userMembershipNestingDepth = Integer.parseInt(valueuserMembershipNestingDepth);
        } else {
            userMembershipNestingDepth = null;
        }
        String valueuserDynamicMembership = request().getQueryString("user.dynamicMembership");
        Boolean userDynamicMembership;
        if (valueuserDynamicMembership != null) {
            userDynamicMembership = Boolean.valueOf(valueuserDynamicMembership);
        } else {
            userDynamicMembership = null;
        }
        String valueuserDisableMissing = request().getQueryString("user.disableMissing");
        Boolean userDisableMissing;
        if (valueuserDisableMissing != null) {
            userDisableMissing = Boolean.valueOf(valueuserDisableMissing);
        } else {
            userDisableMissing = null;
        }
        String valuegroupExpirationTime = request().getQueryString("group.expirationTime");
        String groupExpirationTime;
        if (valuegroupExpirationTime != null) {
            groupExpirationTime = valuegroupExpirationTime;
        } else {
            groupExpirationTime = null;
        }
        String[] groupAutoMembershipArray = request().queryString().get("group.autoMembership");
        List<String> groupAutoMembershipList = OpenAPIUtils.parametersToList("multi", groupAutoMembershipArray);
        List<String> groupAutoMembership = new ArrayList<String>();
        for (String curParam : groupAutoMembershipList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                groupAutoMembership.add(curParam);
            }
        }
        String[] groupPropertyMappingArray = request().queryString().get("group.propertyMapping");
        List<String> groupPropertyMappingList = OpenAPIUtils.parametersToList("multi", groupPropertyMappingArray);
        List<String> groupPropertyMapping = new ArrayList<String>();
        for (String curParam : groupPropertyMappingList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                groupPropertyMapping.add(curParam);
            }
        }
        String valuegroupPathPrefix = request().getQueryString("group.pathPrefix");
        String groupPathPrefix;
        if (valuegroupPathPrefix != null) {
            groupPathPrefix = valuegroupPathPrefix;
        } else {
            groupPathPrefix = null;
        }
        String valueenableRFC7613UsercaseMappedProfile = request().getQueryString("enableRFC7613UsercaseMappedProfile");
        Boolean enableRFC7613UsercaseMappedProfile;
        if (valueenableRFC7613UsercaseMappedProfile != null) {
            enableRFC7613UsercaseMappedProfile = Boolean.valueOf(valueenableRFC7613UsercaseMappedProfile);
        } else {
            enableRFC7613UsercaseMappedProfile = null;
        }
        OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeInfo obj = imp.orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDe(post, apply, delete, action, $location, propertylist, handlerName, userExpirationTime, userAutoMembership, userPropertyMapping, userPathPrefix, userMembershipExpTime, userMembershipNestingDepth, userDynamicMembership, userDisableMissing, groupExpirationTime, groupAutoMembership, groupPropertyMapping, groupPathPrefix, enableRFC7613UsercaseMappedProfile);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplEx() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuejaasRanking = request().getQueryString("jaas.ranking");
        Integer jaasRanking;
        if (valuejaasRanking != null) {
            jaasRanking = Integer.parseInt(valuejaasRanking);
        } else {
            jaasRanking = null;
        }
        String valuejaasControlFlag = request().getQueryString("jaas.controlFlag");
        String jaasControlFlag;
        if (valuejaasControlFlag != null) {
            jaasControlFlag = valuejaasControlFlag;
        } else {
            jaasControlFlag = null;
        }
        String valuejaasRealmName = request().getQueryString("jaas.realmName");
        String jaasRealmName;
        if (valuejaasRealmName != null) {
            jaasRealmName = valuejaasRealmName;
        } else {
            jaasRealmName = null;
        }
        String valueidpName = request().getQueryString("idp.name");
        String idpName;
        if (valueidpName != null) {
            idpName = valueidpName;
        } else {
            idpName = null;
        }
        String valuesyncHandlerName = request().getQueryString("sync.handlerName");
        String syncHandlerName;
        if (valuesyncHandlerName != null) {
            syncHandlerName = valuesyncHandlerName;
        } else {
            syncHandlerName = null;
        }
        OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExInfo obj = imp.orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplEx(post, apply, delete, action, $location, propertylist, jaasRanking, jaasControlFlag, jaasRealmName, idpName, syncHandlerName);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPr() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueprotectExternalId = request().getQueryString("protectExternalId");
        Boolean protectExternalId;
        if (valueprotectExternalId != null) {
            protectExternalId = Boolean.valueOf(valueprotectExternalId);
        } else {
            protectExternalId = null;
        }
        OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrInfo obj = imp.orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPr(post, apply, delete, action, $location, propertylist, protectExternalId);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfi() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] cugSupportedPathsArray = request().queryString().get("cugSupportedPaths");
        List<String> cugSupportedPathsList = OpenAPIUtils.parametersToList("multi", cugSupportedPathsArray);
        List<String> cugSupportedPaths = new ArrayList<String>();
        for (String curParam : cugSupportedPathsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                cugSupportedPaths.add(curParam);
            }
        }
        String valuecugEnabled = request().getQueryString("cugEnabled");
        Boolean cugEnabled;
        if (valuecugEnabled != null) {
            cugEnabled = Boolean.valueOf(valuecugEnabled);
        } else {
            cugEnabled = null;
        }
        String valueconfigurationRanking = request().getQueryString("configurationRanking");
        Integer configurationRanking;
        if (valueconfigurationRanking != null) {
            configurationRanking = Integer.parseInt(valueconfigurationRanking);
        } else {
            configurationRanking = null;
        }
        OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiInfo obj = imp.orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfi(post, apply, delete, action, $location, propertylist, cugSupportedPaths, cugEnabled, configurationRanking);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExclu() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] principalNamesArray = request().queryString().get("principalNames");
        List<String> principalNamesList = OpenAPIUtils.parametersToList("multi", principalNamesArray);
        List<String> principalNames = new ArrayList<String>();
        for (String curParam : principalNamesList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                principalNames.add(curParam);
            }
        }
        OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluInfo obj = imp.orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExclu(post, apply, delete, action, $location, propertylist, principalNames);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizable() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueenabledActions = request().getQueryString("enabledActions");
        String enabledActions;
        if (valueenabledActions != null) {
            enabledActions = valueenabledActions;
        } else {
            enabledActions = null;
        }
        String[] userPrivilegeNamesArray = request().queryString().get("userPrivilegeNames");
        List<String> userPrivilegeNamesList = OpenAPIUtils.parametersToList("multi", userPrivilegeNamesArray);
        List<String> userPrivilegeNames = new ArrayList<String>();
        for (String curParam : userPrivilegeNamesList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                userPrivilegeNames.add(curParam);
            }
        }
        String[] groupPrivilegeNamesArray = request().queryString().get("groupPrivilegeNames");
        List<String> groupPrivilegeNamesList = OpenAPIUtils.parametersToList("multi", groupPrivilegeNamesArray);
        List<String> groupPrivilegeNames = new ArrayList<String>();
        for (String curParam : groupPrivilegeNamesList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                groupPrivilegeNames.add(curParam);
            }
        }
        String valueconstraint = request().getQueryString("constraint");
        String constraint;
        if (valueconstraint != null) {
            constraint = valueconstraint;
        } else {
            constraint = null;
        }
        OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableInfo obj = imp.orgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizable(post, apply, delete, action, $location, propertylist, enabledActions, userPrivilegeNames, groupPrivilegeNames, constraint);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheJackrabbitVaultPackagingImplPackagingImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] packageRootsArray = request().queryString().get("packageRoots");
        List<String> packageRootsList = OpenAPIUtils.parametersToList("multi", packageRootsArray);
        List<String> packageRoots = new ArrayList<String>();
        for (String curParam : packageRootsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                packageRoots.add(curParam);
            }
        }
        OrgApacheJackrabbitVaultPackagingImplPackagingImplInfo obj = imp.orgApacheJackrabbitVaultPackagingImplPackagingImpl(post, apply, delete, action, $location, propertylist, packageRoots);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistry() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuehomePath = request().getQueryString("homePath");
        String homePath;
        if (valuehomePath != null) {
            homePath = valuehomePath;
        } else {
            homePath = null;
        }
        OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryInfo obj = imp.orgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistry(post, apply, delete, action, $location, propertylist, homePath);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheSlingAuthCoreImplLogoutServlet() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] slingServletMethodsArray = request().queryString().get("sling.servlet.methods");
        List<String> slingServletMethodsList = OpenAPIUtils.parametersToList("multi", slingServletMethodsArray);
        List<String> slingServletMethods = new ArrayList<String>();
        for (String curParam : slingServletMethodsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                slingServletMethods.add(curParam);
            }
        }
        String valueslingServletPaths = request().getQueryString("sling.servlet.paths");
        String slingServletPaths;
        if (valueslingServletPaths != null) {
            slingServletPaths = valueslingServletPaths;
        } else {
            slingServletPaths = null;
        }
        OrgApacheSlingAuthCoreImplLogoutServletInfo obj = imp.orgApacheSlingAuthCoreImplLogoutServlet(post, apply, delete, action, $location, propertylist, slingServletMethods, slingServletPaths);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheSlingCaconfigImplConfigurationBindingsValueProvider() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueenabled = request().getQueryString("enabled");
        Boolean enabled;
        if (valueenabled != null) {
            enabled = Boolean.valueOf(valueenabled);
        } else {
            enabled = null;
        }
        OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderInfo obj = imp.orgApacheSlingCaconfigImplConfigurationBindingsValueProvider(post, apply, delete, action, $location, propertylist, enabled);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheSlingCaconfigImplConfigurationResolverImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] configBucketNamesArray = request().queryString().get("configBucketNames");
        List<String> configBucketNamesList = OpenAPIUtils.parametersToList("multi", configBucketNamesArray);
        List<String> configBucketNames = new ArrayList<String>();
        for (String curParam : configBucketNamesList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                configBucketNames.add(curParam);
            }
        }
        OrgApacheSlingCaconfigImplConfigurationResolverImplInfo obj = imp.orgApacheSlingCaconfigImplConfigurationResolverImpl(post, apply, delete, action, $location, propertylist, configBucketNames);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStra() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueenabled = request().getQueryString("enabled");
        Boolean enabled;
        if (valueenabled != null) {
            enabled = Boolean.valueOf(valueenabled);
        } else {
            enabled = null;
        }
        String[] configPropertyInheritancePropertyNamesArray = request().queryString().get("configPropertyInheritancePropertyNames");
        List<String> configPropertyInheritancePropertyNamesList = OpenAPIUtils.parametersToList("multi", configPropertyInheritancePropertyNamesArray);
        List<String> configPropertyInheritancePropertyNames = new ArrayList<String>();
        for (String curParam : configPropertyInheritancePropertyNamesList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                configPropertyInheritancePropertyNames.add(curParam);
            }
        }
        OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraInfo obj = imp.orgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStra(post, apply, delete, action, $location, propertylist, enabled, configPropertyInheritancePropertyNames);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStra() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueenabled = request().getQueryString("enabled");
        Boolean enabled;
        if (valueenabled != null) {
            enabled = Boolean.valueOf(valueenabled);
        } else {
            enabled = null;
        }
        OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraInfo obj = imp.orgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStra(post, apply, delete, action, $location, propertylist, enabled);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProvi() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuedescription = request().getQueryString("description");
        String description;
        if (valuedescription != null) {
            description = valuedescription;
        } else {
            description = null;
        }
        String[] overridesArray = request().queryString().get("overrides");
        List<String> overridesList = OpenAPIUtils.parametersToList("multi", overridesArray);
        List<String> overrides = new ArrayList<String>();
        for (String curParam : overridesList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                overrides.add(curParam);
            }
        }
        String valueenabled = request().getQueryString("enabled");
        Boolean enabled;
        if (valueenabled != null) {
            enabled = Boolean.valueOf(valueenabled);
        } else {
            enabled = null;
        }
        String valueserviceRanking = request().getQueryString("service.ranking");
        Integer serviceRanking;
        if (valueserviceRanking != null) {
            serviceRanking = Integer.parseInt(valueserviceRanking);
        } else {
            serviceRanking = null;
        }
        OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviInfo obj = imp.orgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProvi(post, apply, delete, action, $location, propertylist, description, overrides, enabled, serviceRanking);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOve() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueenabled = request().getQueryString("enabled");
        Boolean enabled;
        if (valueenabled != null) {
            enabled = Boolean.valueOf(valueenabled);
        } else {
            enabled = null;
        }
        String valueserviceRanking = request().getQueryString("service.ranking");
        Integer serviceRanking;
        if (valueserviceRanking != null) {
            serviceRanking = Integer.parseInt(valueserviceRanking);
        } else {
            serviceRanking = null;
        }
        OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveInfo obj = imp.orgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOve(post, apply, delete, action, $location, propertylist, enabled, serviceRanking);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheSlingCaconfigManagementImplConfigurationManagementSetti() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] ignorePropertyNameRegexArray = request().queryString().get("ignorePropertyNameRegex");
        List<String> ignorePropertyNameRegexList = OpenAPIUtils.parametersToList("multi", ignorePropertyNameRegexArray);
        List<String> ignorePropertyNameRegex = new ArrayList<String>();
        for (String curParam : ignorePropertyNameRegexList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                ignorePropertyNameRegex.add(curParam);
            }
        }
        String[] configCollectionPropertiesResourceNamesArray = request().queryString().get("configCollectionPropertiesResourceNames");
        List<String> configCollectionPropertiesResourceNamesList = OpenAPIUtils.parametersToList("multi", configCollectionPropertiesResourceNamesArray);
        List<String> configCollectionPropertiesResourceNames = new ArrayList<String>();
        for (String curParam : configCollectionPropertiesResourceNamesList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                configCollectionPropertiesResourceNames.add(curParam);
            }
        }
        OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiInfo obj = imp.orgApacheSlingCaconfigManagementImplConfigurationManagementSetti(post, apply, delete, action, $location, propertylist, ignorePropertyNameRegex, configCollectionPropertiesResourceNames);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheSlingCaconfigResourceImplDefDefaultConfigurationResour() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueenabled = request().getQueryString("enabled");
        Boolean enabled;
        if (valueenabled != null) {
            enabled = Boolean.valueOf(valueenabled);
        } else {
            enabled = null;
        }
        String valueconfigPath = request().getQueryString("configPath");
        String configPath;
        if (valueconfigPath != null) {
            configPath = valueconfigPath;
        } else {
            configPath = null;
        }
        String[] fallbackPathsArray = request().queryString().get("fallbackPaths");
        List<String> fallbackPathsList = OpenAPIUtils.parametersToList("multi", fallbackPathsArray);
        List<String> fallbackPaths = new ArrayList<String>();
        for (String curParam : fallbackPathsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                fallbackPaths.add(curParam);
            }
        }
        String[] configCollectionInheritancePropertyNamesArray = request().queryString().get("configCollectionInheritancePropertyNames");
        List<String> configCollectionInheritancePropertyNamesList = OpenAPIUtils.parametersToList("multi", configCollectionInheritancePropertyNamesArray);
        List<String> configCollectionInheritancePropertyNames = new ArrayList<String>();
        for (String curParam : configCollectionInheritancePropertyNamesList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                configCollectionInheritancePropertyNames.add(curParam);
            }
        }
        OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourInfo obj = imp.orgApacheSlingCaconfigResourceImplDefDefaultConfigurationResour(post, apply, delete, action, $location, propertylist, enabled, configPath, fallbackPaths, configCollectionInheritancePropertyNames);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategy() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueenabled = request().getQueryString("enabled");
        Boolean enabled;
        if (valueenabled != null) {
            enabled = Boolean.valueOf(valueenabled);
        } else {
            enabled = null;
        }
        String[] configRefResourceNamesArray = request().queryString().get("configRefResourceNames");
        List<String> configRefResourceNamesList = OpenAPIUtils.parametersToList("multi", configRefResourceNamesArray);
        List<String> configRefResourceNames = new ArrayList<String>();
        for (String curParam : configRefResourceNamesList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                configRefResourceNames.add(curParam);
            }
        }
        String[] configRefPropertyNamesArray = request().queryString().get("configRefPropertyNames");
        List<String> configRefPropertyNamesList = OpenAPIUtils.parametersToList("multi", configRefPropertyNamesArray);
        List<String> configRefPropertyNames = new ArrayList<String>();
        for (String curParam : configRefPropertyNamesList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                configRefPropertyNames.add(curParam);
            }
        }
        String valueserviceRanking = request().getQueryString("service.ranking");
        Integer serviceRanking;
        if (valueserviceRanking != null) {
            serviceRanking = Integer.parseInt(valueserviceRanking);
        } else {
            serviceRanking = null;
        }
        OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyInfo obj = imp.orgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategy(post, apply, delete, action, $location, propertylist, enabled, configRefResourceNames, configRefPropertyNames, serviceRanking);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheSlingCommonsHtmlInternalTagsoupHtmlParser() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] parserFeaturesArray = request().queryString().get("parser.features");
        List<String> parserFeaturesList = OpenAPIUtils.parametersToList("multi", parserFeaturesArray);
        List<String> parserFeatures = new ArrayList<String>();
        for (String curParam : parserFeaturesList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                parserFeatures.add(curParam);
            }
        }
        OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserInfo obj = imp.orgApacheSlingCommonsHtmlInternalTagsoupHtmlParser(post, apply, delete, action, $location, propertylist, parserFeatures);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheSlingCommonsLogLogManager() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueorgApacheSlingCommonsLogLevel = request().getQueryString("org.apache.sling.commons.log.level");
        String orgApacheSlingCommonsLogLevel;
        if (valueorgApacheSlingCommonsLogLevel != null) {
            orgApacheSlingCommonsLogLevel = valueorgApacheSlingCommonsLogLevel;
        } else {
            orgApacheSlingCommonsLogLevel = null;
        }
        String valueorgApacheSlingCommonsLogFile = request().getQueryString("org.apache.sling.commons.log.file");
        String orgApacheSlingCommonsLogFile;
        if (valueorgApacheSlingCommonsLogFile != null) {
            orgApacheSlingCommonsLogFile = valueorgApacheSlingCommonsLogFile;
        } else {
            orgApacheSlingCommonsLogFile = null;
        }
        String valueorgApacheSlingCommonsLogFileNumber = request().getQueryString("org.apache.sling.commons.log.file.number");
        Integer orgApacheSlingCommonsLogFileNumber;
        if (valueorgApacheSlingCommonsLogFileNumber != null) {
            orgApacheSlingCommonsLogFileNumber = Integer.parseInt(valueorgApacheSlingCommonsLogFileNumber);
        } else {
            orgApacheSlingCommonsLogFileNumber = null;
        }
        String valueorgApacheSlingCommonsLogFileSize = request().getQueryString("org.apache.sling.commons.log.file.size");
        String orgApacheSlingCommonsLogFileSize;
        if (valueorgApacheSlingCommonsLogFileSize != null) {
            orgApacheSlingCommonsLogFileSize = valueorgApacheSlingCommonsLogFileSize;
        } else {
            orgApacheSlingCommonsLogFileSize = null;
        }
        String valueorgApacheSlingCommonsLogPattern = request().getQueryString("org.apache.sling.commons.log.pattern");
        String orgApacheSlingCommonsLogPattern;
        if (valueorgApacheSlingCommonsLogPattern != null) {
            orgApacheSlingCommonsLogPattern = valueorgApacheSlingCommonsLogPattern;
        } else {
            orgApacheSlingCommonsLogPattern = null;
        }
        String valueorgApacheSlingCommonsLogConfigurationFile = request().getQueryString("org.apache.sling.commons.log.configurationFile");
        String orgApacheSlingCommonsLogConfigurationFile;
        if (valueorgApacheSlingCommonsLogConfigurationFile != null) {
            orgApacheSlingCommonsLogConfigurationFile = valueorgApacheSlingCommonsLogConfigurationFile;
        } else {
            orgApacheSlingCommonsLogConfigurationFile = null;
        }
        String valueorgApacheSlingCommonsLogPackagingDataEnabled = request().getQueryString("org.apache.sling.commons.log.packagingDataEnabled");
        Boolean orgApacheSlingCommonsLogPackagingDataEnabled;
        if (valueorgApacheSlingCommonsLogPackagingDataEnabled != null) {
            orgApacheSlingCommonsLogPackagingDataEnabled = Boolean.valueOf(valueorgApacheSlingCommonsLogPackagingDataEnabled);
        } else {
            orgApacheSlingCommonsLogPackagingDataEnabled = null;
        }
        String valueorgApacheSlingCommonsLogMaxCallerDataDepth = request().getQueryString("org.apache.sling.commons.log.maxCallerDataDepth");
        Integer orgApacheSlingCommonsLogMaxCallerDataDepth;
        if (valueorgApacheSlingCommonsLogMaxCallerDataDepth != null) {
            orgApacheSlingCommonsLogMaxCallerDataDepth = Integer.parseInt(valueorgApacheSlingCommonsLogMaxCallerDataDepth);
        } else {
            orgApacheSlingCommonsLogMaxCallerDataDepth = null;
        }
        String valueorgApacheSlingCommonsLogMaxOldFileCountInDump = request().getQueryString("org.apache.sling.commons.log.maxOldFileCountInDump");
        Integer orgApacheSlingCommonsLogMaxOldFileCountInDump;
        if (valueorgApacheSlingCommonsLogMaxOldFileCountInDump != null) {
            orgApacheSlingCommonsLogMaxOldFileCountInDump = Integer.parseInt(valueorgApacheSlingCommonsLogMaxOldFileCountInDump);
        } else {
            orgApacheSlingCommonsLogMaxOldFileCountInDump = null;
        }
        String valueorgApacheSlingCommonsLogNumOfLines = request().getQueryString("org.apache.sling.commons.log.numOfLines");
        Integer orgApacheSlingCommonsLogNumOfLines;
        if (valueorgApacheSlingCommonsLogNumOfLines != null) {
            orgApacheSlingCommonsLogNumOfLines = Integer.parseInt(valueorgApacheSlingCommonsLogNumOfLines);
        } else {
            orgApacheSlingCommonsLogNumOfLines = null;
        }
        OrgApacheSlingCommonsLogLogManagerInfo obj = imp.orgApacheSlingCommonsLogLogManager(post, apply, delete, action, $location, propertylist, orgApacheSlingCommonsLogLevel, orgApacheSlingCommonsLogFile, orgApacheSlingCommonsLogFileNumber, orgApacheSlingCommonsLogFileSize, orgApacheSlingCommonsLogPattern, orgApacheSlingCommonsLogConfigurationFile, orgApacheSlingCommonsLogPackagingDataEnabled, orgApacheSlingCommonsLogMaxCallerDataDepth, orgApacheSlingCommonsLogMaxOldFileCountInDump, orgApacheSlingCommonsLogNumOfLines);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheSlingCommonsLogLogManagerFactoryConfig() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueorgApacheSlingCommonsLogLevel = request().getQueryString("org.apache.sling.commons.log.level");
        String orgApacheSlingCommonsLogLevel;
        if (valueorgApacheSlingCommonsLogLevel != null) {
            orgApacheSlingCommonsLogLevel = valueorgApacheSlingCommonsLogLevel;
        } else {
            orgApacheSlingCommonsLogLevel = null;
        }
        String valueorgApacheSlingCommonsLogFile = request().getQueryString("org.apache.sling.commons.log.file");
        String orgApacheSlingCommonsLogFile;
        if (valueorgApacheSlingCommonsLogFile != null) {
            orgApacheSlingCommonsLogFile = valueorgApacheSlingCommonsLogFile;
        } else {
            orgApacheSlingCommonsLogFile = null;
        }
        String valueorgApacheSlingCommonsLogPattern = request().getQueryString("org.apache.sling.commons.log.pattern");
        String orgApacheSlingCommonsLogPattern;
        if (valueorgApacheSlingCommonsLogPattern != null) {
            orgApacheSlingCommonsLogPattern = valueorgApacheSlingCommonsLogPattern;
        } else {
            orgApacheSlingCommonsLogPattern = null;
        }
        String[] orgApacheSlingCommonsLogNamesArray = request().queryString().get("org.apache.sling.commons.log.names");
        List<String> orgApacheSlingCommonsLogNamesList = OpenAPIUtils.parametersToList("multi", orgApacheSlingCommonsLogNamesArray);
        List<String> orgApacheSlingCommonsLogNames = new ArrayList<String>();
        for (String curParam : orgApacheSlingCommonsLogNamesList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                orgApacheSlingCommonsLogNames.add(curParam);
            }
        }
        String valueorgApacheSlingCommonsLogAdditiv = request().getQueryString("org.apache.sling.commons.log.additiv");
        Boolean orgApacheSlingCommonsLogAdditiv;
        if (valueorgApacheSlingCommonsLogAdditiv != null) {
            orgApacheSlingCommonsLogAdditiv = Boolean.valueOf(valueorgApacheSlingCommonsLogAdditiv);
        } else {
            orgApacheSlingCommonsLogAdditiv = null;
        }
        OrgApacheSlingCommonsLogLogManagerFactoryConfigInfo obj = imp.orgApacheSlingCommonsLogLogManagerFactoryConfig(post, apply, delete, action, $location, propertylist, orgApacheSlingCommonsLogLevel, orgApacheSlingCommonsLogFile, orgApacheSlingCommonsLogPattern, orgApacheSlingCommonsLogNames, orgApacheSlingCommonsLogAdditiv);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheSlingCommonsLogLogManagerFactoryWriter() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueorgApacheSlingCommonsLogFile = request().getQueryString("org.apache.sling.commons.log.file");
        String orgApacheSlingCommonsLogFile;
        if (valueorgApacheSlingCommonsLogFile != null) {
            orgApacheSlingCommonsLogFile = valueorgApacheSlingCommonsLogFile;
        } else {
            orgApacheSlingCommonsLogFile = null;
        }
        String valueorgApacheSlingCommonsLogFileNumber = request().getQueryString("org.apache.sling.commons.log.file.number");
        Integer orgApacheSlingCommonsLogFileNumber;
        if (valueorgApacheSlingCommonsLogFileNumber != null) {
            orgApacheSlingCommonsLogFileNumber = Integer.parseInt(valueorgApacheSlingCommonsLogFileNumber);
        } else {
            orgApacheSlingCommonsLogFileNumber = null;
        }
        String valueorgApacheSlingCommonsLogFileSize = request().getQueryString("org.apache.sling.commons.log.file.size");
        String orgApacheSlingCommonsLogFileSize;
        if (valueorgApacheSlingCommonsLogFileSize != null) {
            orgApacheSlingCommonsLogFileSize = valueorgApacheSlingCommonsLogFileSize;
        } else {
            orgApacheSlingCommonsLogFileSize = null;
        }
        String valueorgApacheSlingCommonsLogFileBuffered = request().getQueryString("org.apache.sling.commons.log.file.buffered");
        Boolean orgApacheSlingCommonsLogFileBuffered;
        if (valueorgApacheSlingCommonsLogFileBuffered != null) {
            orgApacheSlingCommonsLogFileBuffered = Boolean.valueOf(valueorgApacheSlingCommonsLogFileBuffered);
        } else {
            orgApacheSlingCommonsLogFileBuffered = null;
        }
        OrgApacheSlingCommonsLogLogManagerFactoryWriterInfo obj = imp.orgApacheSlingCommonsLogLogManagerFactoryWriter(post, apply, delete, action, $location, propertylist, orgApacheSlingCommonsLogFile, orgApacheSlingCommonsLogFileNumber, orgApacheSlingCommonsLogFileSize, orgApacheSlingCommonsLogFileBuffered);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheSlingCommonsMetricsInternalLogReporter() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueperiod = request().getQueryString("period");
        Integer period;
        if (valueperiod != null) {
            period = Integer.parseInt(valueperiod);
        } else {
            period = null;
        }
        String valuetimeUnit = request().getQueryString("timeUnit");
        String timeUnit;
        if (valuetimeUnit != null) {
            timeUnit = valuetimeUnit;
        } else {
            timeUnit = null;
        }
        String valuelevel = request().getQueryString("level");
        String level;
        if (valuelevel != null) {
            level = valuelevel;
        } else {
            level = null;
        }
        String valueloggerName = request().getQueryString("loggerName");
        String loggerName;
        if (valueloggerName != null) {
            loggerName = valueloggerName;
        } else {
            loggerName = null;
        }
        String valueprefix = request().getQueryString("prefix");
        String prefix;
        if (valueprefix != null) {
            prefix = valueprefix;
        } else {
            prefix = null;
        }
        String valuepattern = request().getQueryString("pattern");
        String pattern;
        if (valuepattern != null) {
            pattern = valuepattern;
        } else {
            pattern = null;
        }
        String valueregistryName = request().getQueryString("registryName");
        String registryName;
        if (valueregistryName != null) {
            registryName = valueregistryName;
        } else {
            registryName = null;
        }
        OrgApacheSlingCommonsMetricsInternalLogReporterInfo obj = imp.orgApacheSlingCommonsMetricsInternalLogReporter(post, apply, delete, action, $location, propertylist, period, timeUnit, level, loggerName, prefix, pattern, registryName);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporter() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] datasourcesArray = request().queryString().get("datasources");
        List<String> datasourcesList = OpenAPIUtils.parametersToList("multi", datasourcesArray);
        List<String> datasources = new ArrayList<String>();
        for (String curParam : datasourcesList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                datasources.add(curParam);
            }
        }
        String valuestep = request().getQueryString("step");
        Integer step;
        if (valuestep != null) {
            step = Integer.parseInt(valuestep);
        } else {
            step = null;
        }
        String[] archivesArray = request().queryString().get("archives");
        List<String> archivesList = OpenAPIUtils.parametersToList("multi", archivesArray);
        List<String> archives = new ArrayList<String>();
        for (String curParam : archivesList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                archives.add(curParam);
            }
        }
        String valuepath = request().getQueryString("path");
        String path;
        if (valuepath != null) {
            path = valuepath;
        } else {
            path = null;
        }
        OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterInfo obj = imp.orgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporter(post, apply, delete, action, $location, propertylist, datasources, step, archives, path);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheSlingCommonsMimeInternalMimeTypeServiceImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] mimeTypesArray = request().queryString().get("mime.types");
        List<String> mimeTypesList = OpenAPIUtils.parametersToList("multi", mimeTypesArray);
        List<String> mimeTypes = new ArrayList<String>();
        for (String curParam : mimeTypesList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                mimeTypes.add(curParam);
            }
        }
        OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplInfo obj = imp.orgApacheSlingCommonsMimeInternalMimeTypeServiceImpl(post, apply, delete, action, $location, propertylist, mimeTypes);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheSlingCommonsSchedulerImplQuartzScheduler() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuepoolName = request().getQueryString("poolName");
        String poolName;
        if (valuepoolName != null) {
            poolName = valuepoolName;
        } else {
            poolName = null;
        }
        String[] allowedPoolNamesArray = request().queryString().get("allowedPoolNames");
        List<String> allowedPoolNamesList = OpenAPIUtils.parametersToList("multi", allowedPoolNamesArray);
        List<String> allowedPoolNames = new ArrayList<String>();
        for (String curParam : allowedPoolNamesList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                allowedPoolNames.add(curParam);
            }
        }
        String valueschedulerUseleaderforsingle = request().getQueryString("scheduler.useleaderforsingle");
        Boolean schedulerUseleaderforsingle;
        if (valueschedulerUseleaderforsingle != null) {
            schedulerUseleaderforsingle = Boolean.valueOf(valueschedulerUseleaderforsingle);
        } else {
            schedulerUseleaderforsingle = null;
        }
        String[] metricsFiltersArray = request().queryString().get("metrics.filters");
        List<String> metricsFiltersList = OpenAPIUtils.parametersToList("multi", metricsFiltersArray);
        List<String> metricsFilters = new ArrayList<String>();
        for (String curParam : metricsFiltersList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                metricsFilters.add(curParam);
            }
        }
        String valueslowThresholdMillis = request().getQueryString("slowThresholdMillis");
        Integer slowThresholdMillis;
        if (valueslowThresholdMillis != null) {
            slowThresholdMillis = Integer.parseInt(valueslowThresholdMillis);
        } else {
            slowThresholdMillis = null;
        }
        OrgApacheSlingCommonsSchedulerImplQuartzSchedulerInfo obj = imp.orgApacheSlingCommonsSchedulerImplQuartzScheduler(post, apply, delete, action, $location, propertylist, poolName, allowedPoolNames, schedulerUseleaderforsingle, metricsFilters, slowThresholdMillis);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheSlingCommonsSchedulerImplSchedulerHealthCheck() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuemaxQuartzJobDurationAcceptable = request().getQueryString("max.quartzJob.duration.acceptable");
        Integer maxQuartzJobDurationAcceptable;
        if (valuemaxQuartzJobDurationAcceptable != null) {
            maxQuartzJobDurationAcceptable = Integer.parseInt(valuemaxQuartzJobDurationAcceptable);
        } else {
            maxQuartzJobDurationAcceptable = null;
        }
        OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckInfo obj = imp.orgApacheSlingCommonsSchedulerImplSchedulerHealthCheck(post, apply, delete, action, $location, propertylist, maxQuartzJobDurationAcceptable);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheSlingCommonsThreadsImplDefaultThreadPoolFactory() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuename = request().getQueryString("name");
        String name;
        if (valuename != null) {
            name = valuename;
        } else {
            name = null;
        }
        String valueminPoolSize = request().getQueryString("minPoolSize");
        Integer minPoolSize;
        if (valueminPoolSize != null) {
            minPoolSize = Integer.parseInt(valueminPoolSize);
        } else {
            minPoolSize = null;
        }
        String valuemaxPoolSize = request().getQueryString("maxPoolSize");
        Integer maxPoolSize;
        if (valuemaxPoolSize != null) {
            maxPoolSize = Integer.parseInt(valuemaxPoolSize);
        } else {
            maxPoolSize = null;
        }
        String valuequeueSize = request().getQueryString("queueSize");
        Integer queueSize;
        if (valuequeueSize != null) {
            queueSize = Integer.parseInt(valuequeueSize);
        } else {
            queueSize = null;
        }
        String valuemaxThreadAge = request().getQueryString("maxThreadAge");
        Integer maxThreadAge;
        if (valuemaxThreadAge != null) {
            maxThreadAge = Integer.parseInt(valuemaxThreadAge);
        } else {
            maxThreadAge = null;
        }
        String valuekeepAliveTime = request().getQueryString("keepAliveTime");
        Integer keepAliveTime;
        if (valuekeepAliveTime != null) {
            keepAliveTime = Integer.parseInt(valuekeepAliveTime);
        } else {
            keepAliveTime = null;
        }
        String valueblockPolicy = request().getQueryString("blockPolicy");
        String blockPolicy;
        if (valueblockPolicy != null) {
            blockPolicy = valueblockPolicy;
        } else {
            blockPolicy = null;
        }
        String valueshutdownGraceful = request().getQueryString("shutdownGraceful");
        Boolean shutdownGraceful;
        if (valueshutdownGraceful != null) {
            shutdownGraceful = Boolean.valueOf(valueshutdownGraceful);
        } else {
            shutdownGraceful = null;
        }
        String valuedaemon = request().getQueryString("daemon");
        Boolean daemon;
        if (valuedaemon != null) {
            daemon = Boolean.valueOf(valuedaemon);
        } else {
            daemon = null;
        }
        String valueshutdownWaitTime = request().getQueryString("shutdownWaitTime");
        Integer shutdownWaitTime;
        if (valueshutdownWaitTime != null) {
            shutdownWaitTime = Integer.parseInt(valueshutdownWaitTime);
        } else {
            shutdownWaitTime = null;
        }
        String valuepriority = request().getQueryString("priority");
        String priority;
        if (valuepriority != null) {
            priority = valuepriority;
        } else {
            priority = null;
        }
        OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryInfo obj = imp.orgApacheSlingCommonsThreadsImplDefaultThreadPoolFactory(post, apply, delete, action, $location, propertylist, name, minPoolSize, maxPoolSize, queueSize, maxThreadAge, keepAliveTime, blockPolicy, shutdownGraceful, daemon, shutdownWaitTime, priority);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheSlingDatasourceDataSourceFactory() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuedatasourceName = request().getQueryString("datasource.name");
        String datasourceName;
        if (valuedatasourceName != null) {
            datasourceName = valuedatasourceName;
        } else {
            datasourceName = null;
        }
        String valuedatasourceSvcPropName = request().getQueryString("datasource.svc.prop.name");
        String datasourceSvcPropName;
        if (valuedatasourceSvcPropName != null) {
            datasourceSvcPropName = valuedatasourceSvcPropName;
        } else {
            datasourceSvcPropName = null;
        }
        String valuedriverClassName = request().getQueryString("driverClassName");
        String driverClassName;
        if (valuedriverClassName != null) {
            driverClassName = valuedriverClassName;
        } else {
            driverClassName = null;
        }
        String valueurl = request().getQueryString("url");
        String url;
        if (valueurl != null) {
            url = valueurl;
        } else {
            url = null;
        }
        String valueusername = request().getQueryString("username");
        String username;
        if (valueusername != null) {
            username = valueusername;
        } else {
            username = null;
        }
        String valuepassword = request().getQueryString("password");
        String password;
        if (valuepassword != null) {
            password = valuepassword;
        } else {
            password = null;
        }
        String valuedefaultAutoCommit = request().getQueryString("defaultAutoCommit");
        String defaultAutoCommit;
        if (valuedefaultAutoCommit != null) {
            defaultAutoCommit = valuedefaultAutoCommit;
        } else {
            defaultAutoCommit = null;
        }
        String valuedefaultReadOnly = request().getQueryString("defaultReadOnly");
        String defaultReadOnly;
        if (valuedefaultReadOnly != null) {
            defaultReadOnly = valuedefaultReadOnly;
        } else {
            defaultReadOnly = null;
        }
        String valuedefaultTransactionIsolation = request().getQueryString("defaultTransactionIsolation");
        String defaultTransactionIsolation;
        if (valuedefaultTransactionIsolation != null) {
            defaultTransactionIsolation = valuedefaultTransactionIsolation;
        } else {
            defaultTransactionIsolation = null;
        }
        String valuedefaultCatalog = request().getQueryString("defaultCatalog");
        String defaultCatalog;
        if (valuedefaultCatalog != null) {
            defaultCatalog = valuedefaultCatalog;
        } else {
            defaultCatalog = null;
        }
        String valuemaxActive = request().getQueryString("maxActive");
        Integer maxActive;
        if (valuemaxActive != null) {
            maxActive = Integer.parseInt(valuemaxActive);
        } else {
            maxActive = null;
        }
        String valuemaxIdle = request().getQueryString("maxIdle");
        Integer maxIdle;
        if (valuemaxIdle != null) {
            maxIdle = Integer.parseInt(valuemaxIdle);
        } else {
            maxIdle = null;
        }
        String valueminIdle = request().getQueryString("minIdle");
        Integer minIdle;
        if (valueminIdle != null) {
            minIdle = Integer.parseInt(valueminIdle);
        } else {
            minIdle = null;
        }
        String valueinitialSize = request().getQueryString("initialSize");
        Integer initialSize;
        if (valueinitialSize != null) {
            initialSize = Integer.parseInt(valueinitialSize);
        } else {
            initialSize = null;
        }
        String valuemaxWait = request().getQueryString("maxWait");
        Integer maxWait;
        if (valuemaxWait != null) {
            maxWait = Integer.parseInt(valuemaxWait);
        } else {
            maxWait = null;
        }
        String valuemaxAge = request().getQueryString("maxAge");
        Integer maxAge;
        if (valuemaxAge != null) {
            maxAge = Integer.parseInt(valuemaxAge);
        } else {
            maxAge = null;
        }
        String valuetestOnBorrow = request().getQueryString("testOnBorrow");
        Boolean testOnBorrow;
        if (valuetestOnBorrow != null) {
            testOnBorrow = Boolean.valueOf(valuetestOnBorrow);
        } else {
            testOnBorrow = null;
        }
        String valuetestOnReturn = request().getQueryString("testOnReturn");
        Boolean testOnReturn;
        if (valuetestOnReturn != null) {
            testOnReturn = Boolean.valueOf(valuetestOnReturn);
        } else {
            testOnReturn = null;
        }
        String valuetestWhileIdle = request().getQueryString("testWhileIdle");
        Boolean testWhileIdle;
        if (valuetestWhileIdle != null) {
            testWhileIdle = Boolean.valueOf(valuetestWhileIdle);
        } else {
            testWhileIdle = null;
        }
        String valuevalidationQuery = request().getQueryString("validationQuery");
        String validationQuery;
        if (valuevalidationQuery != null) {
            validationQuery = valuevalidationQuery;
        } else {
            validationQuery = null;
        }
        String valuevalidationQueryTimeout = request().getQueryString("validationQueryTimeout");
        Integer validationQueryTimeout;
        if (valuevalidationQueryTimeout != null) {
            validationQueryTimeout = Integer.parseInt(valuevalidationQueryTimeout);
        } else {
            validationQueryTimeout = null;
        }
        String valuetimeBetweenEvictionRunsMillis = request().getQueryString("timeBetweenEvictionRunsMillis");
        Integer timeBetweenEvictionRunsMillis;
        if (valuetimeBetweenEvictionRunsMillis != null) {
            timeBetweenEvictionRunsMillis = Integer.parseInt(valuetimeBetweenEvictionRunsMillis);
        } else {
            timeBetweenEvictionRunsMillis = null;
        }
        String valueminEvictableIdleTimeMillis = request().getQueryString("minEvictableIdleTimeMillis");
        Integer minEvictableIdleTimeMillis;
        if (valueminEvictableIdleTimeMillis != null) {
            minEvictableIdleTimeMillis = Integer.parseInt(valueminEvictableIdleTimeMillis);
        } else {
            minEvictableIdleTimeMillis = null;
        }
        String valueconnectionProperties = request().getQueryString("connectionProperties");
        String connectionProperties;
        if (valueconnectionProperties != null) {
            connectionProperties = valueconnectionProperties;
        } else {
            connectionProperties = null;
        }
        String valueinitSQL = request().getQueryString("initSQL");
        String initSQL;
        if (valueinitSQL != null) {
            initSQL = valueinitSQL;
        } else {
            initSQL = null;
        }
        String valuejdbcInterceptors = request().getQueryString("jdbcInterceptors");
        String jdbcInterceptors;
        if (valuejdbcInterceptors != null) {
            jdbcInterceptors = valuejdbcInterceptors;
        } else {
            jdbcInterceptors = null;
        }
        String valuevalidationInterval = request().getQueryString("validationInterval");
        Integer validationInterval;
        if (valuevalidationInterval != null) {
            validationInterval = Integer.parseInt(valuevalidationInterval);
        } else {
            validationInterval = null;
        }
        String valuelogValidationErrors = request().getQueryString("logValidationErrors");
        Boolean logValidationErrors;
        if (valuelogValidationErrors != null) {
            logValidationErrors = Boolean.valueOf(valuelogValidationErrors);
        } else {
            logValidationErrors = null;
        }
        String[] datasourceSvcPropertiesArray = request().queryString().get("datasource.svc.properties");
        List<String> datasourceSvcPropertiesList = OpenAPIUtils.parametersToList("multi", datasourceSvcPropertiesArray);
        List<String> datasourceSvcProperties = new ArrayList<String>();
        for (String curParam : datasourceSvcPropertiesList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                datasourceSvcProperties.add(curParam);
            }
        }
        OrgApacheSlingDatasourceDataSourceFactoryInfo obj = imp.orgApacheSlingDatasourceDataSourceFactory(post, apply, delete, action, $location, propertylist, datasourceName, datasourceSvcPropName, driverClassName, url, username, password, defaultAutoCommit, defaultReadOnly, defaultTransactionIsolation, defaultCatalog, maxActive, maxIdle, minIdle, initialSize, maxWait, maxAge, testOnBorrow, testOnReturn, testWhileIdle, validationQuery, validationQueryTimeout, timeBetweenEvictionRunsMillis, minEvictableIdleTimeMillis, connectionProperties, initSQL, jdbcInterceptors, validationInterval, logValidationErrors, datasourceSvcProperties);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheSlingDatasourceJNDIDataSourceFactory() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuedatasourceName = request().getQueryString("datasource.name");
        String datasourceName;
        if (valuedatasourceName != null) {
            datasourceName = valuedatasourceName;
        } else {
            datasourceName = null;
        }
        String valuedatasourceSvcPropName = request().getQueryString("datasource.svc.prop.name");
        String datasourceSvcPropName;
        if (valuedatasourceSvcPropName != null) {
            datasourceSvcPropName = valuedatasourceSvcPropName;
        } else {
            datasourceSvcPropName = null;
        }
        String valuedatasourceJndiName = request().getQueryString("datasource.jndi.name");
        String datasourceJndiName;
        if (valuedatasourceJndiName != null) {
            datasourceJndiName = valuedatasourceJndiName;
        } else {
            datasourceJndiName = null;
        }
        String[] jndiPropertiesArray = request().queryString().get("jndi.properties");
        List<String> jndiPropertiesList = OpenAPIUtils.parametersToList("multi", jndiPropertiesArray);
        List<String> jndiProperties = new ArrayList<String>();
        for (String curParam : jndiPropertiesList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                jndiProperties.add(curParam);
            }
        }
        OrgApacheSlingDatasourceJNDIDataSourceFactoryInfo obj = imp.orgApacheSlingDatasourceJNDIDataSourceFactory(post, apply, delete, action, $location, propertylist, datasourceName, datasourceSvcPropName, datasourceJndiName, jndiProperties);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheSlingDiscoveryOakConfig() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueconnectorPingTimeout = request().getQueryString("connectorPingTimeout");
        Integer connectorPingTimeout;
        if (valueconnectorPingTimeout != null) {
            connectorPingTimeout = Integer.parseInt(valueconnectorPingTimeout);
        } else {
            connectorPingTimeout = null;
        }
        String valueconnectorPingInterval = request().getQueryString("connectorPingInterval");
        Integer connectorPingInterval;
        if (valueconnectorPingInterval != null) {
            connectorPingInterval = Integer.parseInt(valueconnectorPingInterval);
        } else {
            connectorPingInterval = null;
        }
        String valuediscoveryLiteCheckInterval = request().getQueryString("discoveryLiteCheckInterval");
        Integer discoveryLiteCheckInterval;
        if (valuediscoveryLiteCheckInterval != null) {
            discoveryLiteCheckInterval = Integer.parseInt(valuediscoveryLiteCheckInterval);
        } else {
            discoveryLiteCheckInterval = null;
        }
        String valueclusterSyncServiceTimeout = request().getQueryString("clusterSyncServiceTimeout");
        Integer clusterSyncServiceTimeout;
        if (valueclusterSyncServiceTimeout != null) {
            clusterSyncServiceTimeout = Integer.parseInt(valueclusterSyncServiceTimeout);
        } else {
            clusterSyncServiceTimeout = null;
        }
        String valueclusterSyncServiceInterval = request().getQueryString("clusterSyncServiceInterval");
        Integer clusterSyncServiceInterval;
        if (valueclusterSyncServiceInterval != null) {
            clusterSyncServiceInterval = Integer.parseInt(valueclusterSyncServiceInterval);
        } else {
            clusterSyncServiceInterval = null;
        }
        String valueenableSyncToken = request().getQueryString("enableSyncToken");
        Boolean enableSyncToken;
        if (valueenableSyncToken != null) {
            enableSyncToken = Boolean.valueOf(valueenableSyncToken);
        } else {
            enableSyncToken = null;
        }
        String valueminEventDelay = request().getQueryString("minEventDelay");
        Integer minEventDelay;
        if (valueminEventDelay != null) {
            minEventDelay = Integer.parseInt(valueminEventDelay);
        } else {
            minEventDelay = null;
        }
        String valuesocketConnectTimeout = request().getQueryString("socketConnectTimeout");
        Integer socketConnectTimeout;
        if (valuesocketConnectTimeout != null) {
            socketConnectTimeout = Integer.parseInt(valuesocketConnectTimeout);
        } else {
            socketConnectTimeout = null;
        }
        String valuesoTimeout = request().getQueryString("soTimeout");
        Integer soTimeout;
        if (valuesoTimeout != null) {
            soTimeout = Integer.parseInt(valuesoTimeout);
        } else {
            soTimeout = null;
        }
        String[] topologyConnectorUrlsArray = request().queryString().get("topologyConnectorUrls");
        List<String> topologyConnectorUrlsList = OpenAPIUtils.parametersToList("multi", topologyConnectorUrlsArray);
        List<String> topologyConnectorUrls = new ArrayList<String>();
        for (String curParam : topologyConnectorUrlsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                topologyConnectorUrls.add(curParam);
            }
        }
        String[] topologyConnectorWhitelistArray = request().queryString().get("topologyConnectorWhitelist");
        List<String> topologyConnectorWhitelistList = OpenAPIUtils.parametersToList("multi", topologyConnectorWhitelistArray);
        List<String> topologyConnectorWhitelist = new ArrayList<String>();
        for (String curParam : topologyConnectorWhitelistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                topologyConnectorWhitelist.add(curParam);
            }
        }
        String valueautoStopLocalLoopEnabled = request().getQueryString("autoStopLocalLoopEnabled");
        Boolean autoStopLocalLoopEnabled;
        if (valueautoStopLocalLoopEnabled != null) {
            autoStopLocalLoopEnabled = Boolean.valueOf(valueautoStopLocalLoopEnabled);
        } else {
            autoStopLocalLoopEnabled = null;
        }
        String valuegzipConnectorRequestsEnabled = request().getQueryString("gzipConnectorRequestsEnabled");
        Boolean gzipConnectorRequestsEnabled;
        if (valuegzipConnectorRequestsEnabled != null) {
            gzipConnectorRequestsEnabled = Boolean.valueOf(valuegzipConnectorRequestsEnabled);
        } else {
            gzipConnectorRequestsEnabled = null;
        }
        String valuehmacEnabled = request().getQueryString("hmacEnabled");
        Boolean hmacEnabled;
        if (valuehmacEnabled != null) {
            hmacEnabled = Boolean.valueOf(valuehmacEnabled);
        } else {
            hmacEnabled = null;
        }
        String valueenableEncryption = request().getQueryString("enableEncryption");
        Boolean enableEncryption;
        if (valueenableEncryption != null) {
            enableEncryption = Boolean.valueOf(valueenableEncryption);
        } else {
            enableEncryption = null;
        }
        String valuesharedKey = request().getQueryString("sharedKey");
        String sharedKey;
        if (valuesharedKey != null) {
            sharedKey = valuesharedKey;
        } else {
            sharedKey = null;
        }
        String valuehmacSharedKeyTTL = request().getQueryString("hmacSharedKeyTTL");
        Integer hmacSharedKeyTTL;
        if (valuehmacSharedKeyTTL != null) {
            hmacSharedKeyTTL = Integer.parseInt(valuehmacSharedKeyTTL);
        } else {
            hmacSharedKeyTTL = null;
        }
        String valuebackoffStandbyFactor = request().getQueryString("backoffStandbyFactor");
        String backoffStandbyFactor;
        if (valuebackoffStandbyFactor != null) {
            backoffStandbyFactor = valuebackoffStandbyFactor;
        } else {
            backoffStandbyFactor = null;
        }
        String valuebackoffStableFactor = request().getQueryString("backoffStableFactor");
        String backoffStableFactor;
        if (valuebackoffStableFactor != null) {
            backoffStableFactor = valuebackoffStableFactor;
        } else {
            backoffStableFactor = null;
        }
        OrgApacheSlingDiscoveryOakConfigInfo obj = imp.orgApacheSlingDiscoveryOakConfig(post, apply, delete, action, $location, propertylist, connectorPingTimeout, connectorPingInterval, discoveryLiteCheckInterval, clusterSyncServiceTimeout, clusterSyncServiceInterval, enableSyncToken, minEventDelay, socketConnectTimeout, soTimeout, topologyConnectorUrls, topologyConnectorWhitelist, autoStopLocalLoopEnabled, gzipConnectorRequestsEnabled, hmacEnabled, enableEncryption, sharedKey, hmacSharedKeyTTL, backoffStandbyFactor, backoffStableFactor);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheSlingDiscoveryOakSynchronizedClocksHealthCheck() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuehcName = request().getQueryString("hc.name");
        String hcName;
        if (valuehcName != null) {
            hcName = valuehcName;
        } else {
            hcName = null;
        }
        String[] hcTagsArray = request().queryString().get("hc.tags");
        List<String> hcTagsList = OpenAPIUtils.parametersToList("multi", hcTagsArray);
        List<String> hcTags = new ArrayList<String>();
        for (String curParam : hcTagsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                hcTags.add(curParam);
            }
        }
        String valuehcMbeanName = request().getQueryString("hc.mbean.name");
        String hcMbeanName;
        if (valuehcMbeanName != null) {
            hcMbeanName = valuehcMbeanName;
        } else {
            hcMbeanName = null;
        }
        OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckInfo obj = imp.orgApacheSlingDiscoveryOakSynchronizedClocksHealthCheck(post, apply, delete, action, $location, propertylist, hcName, hcTags, hcMbeanName);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheSlingDistributionAgentImplForwardDistributionAgentFacto() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuename = request().getQueryString("name");
        String name;
        if (valuename != null) {
            name = valuename;
        } else {
            name = null;
        }
        String valuetitle = request().getQueryString("title");
        String title;
        if (valuetitle != null) {
            title = valuetitle;
        } else {
            title = null;
        }
        String valuedetails = request().getQueryString("details");
        String details;
        if (valuedetails != null) {
            details = valuedetails;
        } else {
            details = null;
        }
        String valueenabled = request().getQueryString("enabled");
        Boolean enabled;
        if (valueenabled != null) {
            enabled = Boolean.valueOf(valueenabled);
        } else {
            enabled = null;
        }
        String valueserviceName = request().getQueryString("serviceName");
        String serviceName;
        if (valueserviceName != null) {
            serviceName = valueserviceName;
        } else {
            serviceName = null;
        }
        String valuelogLevel = request().getQueryString("log.level");
        String logLevel;
        if (valuelogLevel != null) {
            logLevel = valuelogLevel;
        } else {
            logLevel = null;
        }
        String[] allowedRootsArray = request().queryString().get("allowed.roots");
        List<String> allowedRootsList = OpenAPIUtils.parametersToList("multi", allowedRootsArray);
        List<String> allowedRoots = new ArrayList<String>();
        for (String curParam : allowedRootsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                allowedRoots.add(curParam);
            }
        }
        String valuequeueProcessingEnabled = request().getQueryString("queue.processing.enabled");
        Boolean queueProcessingEnabled;
        if (valuequeueProcessingEnabled != null) {
            queueProcessingEnabled = Boolean.valueOf(valuequeueProcessingEnabled);
        } else {
            queueProcessingEnabled = null;
        }
        String[] packageImporterEndpointsArray = request().queryString().get("packageImporter.endpoints");
        List<String> packageImporterEndpointsList = OpenAPIUtils.parametersToList("multi", packageImporterEndpointsArray);
        List<String> packageImporterEndpoints = new ArrayList<String>();
        for (String curParam : packageImporterEndpointsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                packageImporterEndpoints.add(curParam);
            }
        }
        String[] passiveQueuesArray = request().queryString().get("passiveQueues");
        List<String> passiveQueuesList = OpenAPIUtils.parametersToList("multi", passiveQueuesArray);
        List<String> passiveQueues = new ArrayList<String>();
        for (String curParam : passiveQueuesList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                passiveQueues.add(curParam);
            }
        }
        String[] priorityQueuesArray = request().queryString().get("priorityQueues");
        List<String> priorityQueuesList = OpenAPIUtils.parametersToList("multi", priorityQueuesArray);
        List<String> priorityQueues = new ArrayList<String>();
        for (String curParam : priorityQueuesList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                priorityQueues.add(curParam);
            }
        }
        String valueretryStrategy = request().getQueryString("retry.strategy");
        String retryStrategy;
        if (valueretryStrategy != null) {
            retryStrategy = valueretryStrategy;
        } else {
            retryStrategy = null;
        }
        String valueretryAttempts = request().getQueryString("retry.attempts");
        Integer retryAttempts;
        if (valueretryAttempts != null) {
            retryAttempts = Integer.parseInt(valueretryAttempts);
        } else {
            retryAttempts = null;
        }
        String valuerequestAuthorizationStrategyTarget = request().getQueryString("requestAuthorizationStrategy.target");
        String requestAuthorizationStrategyTarget;
        if (valuerequestAuthorizationStrategyTarget != null) {
            requestAuthorizationStrategyTarget = valuerequestAuthorizationStrategyTarget;
        } else {
            requestAuthorizationStrategyTarget = null;
        }
        String valuetransportSecretProviderTarget = request().getQueryString("transportSecretProvider.target");
        String transportSecretProviderTarget;
        if (valuetransportSecretProviderTarget != null) {
            transportSecretProviderTarget = valuetransportSecretProviderTarget;
        } else {
            transportSecretProviderTarget = null;
        }
        String valuepackageBuilderTarget = request().getQueryString("packageBuilder.target");
        String packageBuilderTarget;
        if (valuepackageBuilderTarget != null) {
            packageBuilderTarget = valuepackageBuilderTarget;
        } else {
            packageBuilderTarget = null;
        }
        String valuetriggersTarget = request().getQueryString("triggers.target");
        String triggersTarget;
        if (valuetriggersTarget != null) {
            triggersTarget = valuetriggersTarget;
        } else {
            triggersTarget = null;
        }
        String valuequeueProvider = request().getQueryString("queue.provider");
        String queueProvider;
        if (valuequeueProvider != null) {
            queueProvider = valuequeueProvider;
        } else {
            queueProvider = null;
        }
        String valueasyncDelivery = request().getQueryString("async.delivery");
        Boolean asyncDelivery;
        if (valueasyncDelivery != null) {
            asyncDelivery = Boolean.valueOf(valueasyncDelivery);
        } else {
            asyncDelivery = null;
        }
        String valuehttpConnTimeout = request().getQueryString("http.conn.timeout");
        Integer httpConnTimeout;
        if (valuehttpConnTimeout != null) {
            httpConnTimeout = Integer.parseInt(valuehttpConnTimeout);
        } else {
            httpConnTimeout = null;
        }
        OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoInfo obj = imp.orgApacheSlingDistributionAgentImplForwardDistributionAgentFacto(post, apply, delete, action, $location, propertylist, name, title, details, enabled, serviceName, logLevel, allowedRoots, queueProcessingEnabled, packageImporterEndpoints, passiveQueues, priorityQueues, retryStrategy, retryAttempts, requestAuthorizationStrategyTarget, transportSecretProviderTarget, packageBuilderTarget, triggersTarget, queueProvider, asyncDelivery, httpConnTimeout);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheSlingDistributionAgentImplPrivilegeDistributionRequestA() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuename = request().getQueryString("name");
        String name;
        if (valuename != null) {
            name = valuename;
        } else {
            name = null;
        }
        String valuejcrPrivilege = request().getQueryString("jcrPrivilege");
        String jcrPrivilege;
        if (valuejcrPrivilege != null) {
            jcrPrivilege = valuejcrPrivilege;
        } else {
            jcrPrivilege = null;
        }
        OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAInfo obj = imp.orgApacheSlingDistributionAgentImplPrivilegeDistributionRequestA(post, apply, delete, action, $location, propertylist, name, jcrPrivilege);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheSlingDistributionAgentImplQueueDistributionAgentFactory() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuename = request().getQueryString("name");
        String name;
        if (valuename != null) {
            name = valuename;
        } else {
            name = null;
        }
        String valuetitle = request().getQueryString("title");
        String title;
        if (valuetitle != null) {
            title = valuetitle;
        } else {
            title = null;
        }
        String valuedetails = request().getQueryString("details");
        String details;
        if (valuedetails != null) {
            details = valuedetails;
        } else {
            details = null;
        }
        String valueenabled = request().getQueryString("enabled");
        Boolean enabled;
        if (valueenabled != null) {
            enabled = Boolean.valueOf(valueenabled);
        } else {
            enabled = null;
        }
        String valueserviceName = request().getQueryString("serviceName");
        String serviceName;
        if (valueserviceName != null) {
            serviceName = valueserviceName;
        } else {
            serviceName = null;
        }
        String valuelogLevel = request().getQueryString("log.level");
        String logLevel;
        if (valuelogLevel != null) {
            logLevel = valuelogLevel;
        } else {
            logLevel = null;
        }
        String[] allowedRootsArray = request().queryString().get("allowed.roots");
        List<String> allowedRootsList = OpenAPIUtils.parametersToList("multi", allowedRootsArray);
        List<String> allowedRoots = new ArrayList<String>();
        for (String curParam : allowedRootsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                allowedRoots.add(curParam);
            }
        }
        String valuerequestAuthorizationStrategyTarget = request().getQueryString("requestAuthorizationStrategy.target");
        String requestAuthorizationStrategyTarget;
        if (valuerequestAuthorizationStrategyTarget != null) {
            requestAuthorizationStrategyTarget = valuerequestAuthorizationStrategyTarget;
        } else {
            requestAuthorizationStrategyTarget = null;
        }
        String valuequeueProviderFactoryTarget = request().getQueryString("queueProviderFactory.target");
        String queueProviderFactoryTarget;
        if (valuequeueProviderFactoryTarget != null) {
            queueProviderFactoryTarget = valuequeueProviderFactoryTarget;
        } else {
            queueProviderFactoryTarget = null;
        }
        String valuepackageBuilderTarget = request().getQueryString("packageBuilder.target");
        String packageBuilderTarget;
        if (valuepackageBuilderTarget != null) {
            packageBuilderTarget = valuepackageBuilderTarget;
        } else {
            packageBuilderTarget = null;
        }
        String valuetriggersTarget = request().getQueryString("triggers.target");
        String triggersTarget;
        if (valuetriggersTarget != null) {
            triggersTarget = valuetriggersTarget;
        } else {
            triggersTarget = null;
        }
        String[] priorityQueuesArray = request().queryString().get("priorityQueues");
        List<String> priorityQueuesList = OpenAPIUtils.parametersToList("multi", priorityQueuesArray);
        List<String> priorityQueues = new ArrayList<String>();
        for (String curParam : priorityQueuesList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                priorityQueues.add(curParam);
            }
        }
        OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryInfo obj = imp.orgApacheSlingDistributionAgentImplQueueDistributionAgentFactory(post, apply, delete, action, $location, propertylist, name, title, details, enabled, serviceName, logLevel, allowedRoots, requestAuthorizationStrategyTarget, queueProviderFactoryTarget, packageBuilderTarget, triggersTarget, priorityQueues);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheSlingDistributionAgentImplReverseDistributionAgentFacto() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuename = request().getQueryString("name");
        String name;
        if (valuename != null) {
            name = valuename;
        } else {
            name = null;
        }
        String valuetitle = request().getQueryString("title");
        String title;
        if (valuetitle != null) {
            title = valuetitle;
        } else {
            title = null;
        }
        String valuedetails = request().getQueryString("details");
        String details;
        if (valuedetails != null) {
            details = valuedetails;
        } else {
            details = null;
        }
        String valueenabled = request().getQueryString("enabled");
        Boolean enabled;
        if (valueenabled != null) {
            enabled = Boolean.valueOf(valueenabled);
        } else {
            enabled = null;
        }
        String valueserviceName = request().getQueryString("serviceName");
        String serviceName;
        if (valueserviceName != null) {
            serviceName = valueserviceName;
        } else {
            serviceName = null;
        }
        String valuelogLevel = request().getQueryString("log.level");
        String logLevel;
        if (valuelogLevel != null) {
            logLevel = valuelogLevel;
        } else {
            logLevel = null;
        }
        String valuequeueProcessingEnabled = request().getQueryString("queue.processing.enabled");
        Boolean queueProcessingEnabled;
        if (valuequeueProcessingEnabled != null) {
            queueProcessingEnabled = Boolean.valueOf(valuequeueProcessingEnabled);
        } else {
            queueProcessingEnabled = null;
        }
        String[] packageExporterEndpointsArray = request().queryString().get("packageExporter.endpoints");
        List<String> packageExporterEndpointsList = OpenAPIUtils.parametersToList("multi", packageExporterEndpointsArray);
        List<String> packageExporterEndpoints = new ArrayList<String>();
        for (String curParam : packageExporterEndpointsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                packageExporterEndpoints.add(curParam);
            }
        }
        String valuepullItems = request().getQueryString("pull.items");
        Integer pullItems;
        if (valuepullItems != null) {
            pullItems = Integer.parseInt(valuepullItems);
        } else {
            pullItems = null;
        }
        String valuehttpConnTimeout = request().getQueryString("http.conn.timeout");
        Integer httpConnTimeout;
        if (valuehttpConnTimeout != null) {
            httpConnTimeout = Integer.parseInt(valuehttpConnTimeout);
        } else {
            httpConnTimeout = null;
        }
        String valuerequestAuthorizationStrategyTarget = request().getQueryString("requestAuthorizationStrategy.target");
        String requestAuthorizationStrategyTarget;
        if (valuerequestAuthorizationStrategyTarget != null) {
            requestAuthorizationStrategyTarget = valuerequestAuthorizationStrategyTarget;
        } else {
            requestAuthorizationStrategyTarget = null;
        }
        String valuetransportSecretProviderTarget = request().getQueryString("transportSecretProvider.target");
        String transportSecretProviderTarget;
        if (valuetransportSecretProviderTarget != null) {
            transportSecretProviderTarget = valuetransportSecretProviderTarget;
        } else {
            transportSecretProviderTarget = null;
        }
        String valuepackageBuilderTarget = request().getQueryString("packageBuilder.target");
        String packageBuilderTarget;
        if (valuepackageBuilderTarget != null) {
            packageBuilderTarget = valuepackageBuilderTarget;
        } else {
            packageBuilderTarget = null;
        }
        String valuetriggersTarget = request().getQueryString("triggers.target");
        String triggersTarget;
        if (valuetriggersTarget != null) {
            triggersTarget = valuetriggersTarget;
        } else {
            triggersTarget = null;
        }
        OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoInfo obj = imp.orgApacheSlingDistributionAgentImplReverseDistributionAgentFacto(post, apply, delete, action, $location, propertylist, name, title, details, enabled, serviceName, logLevel, queueProcessingEnabled, packageExporterEndpoints, pullItems, httpConnTimeout, requestAuthorizationStrategyTarget, transportSecretProviderTarget, packageBuilderTarget, triggersTarget);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheSlingDistributionAgentImplSimpleDistributionAgentFactor() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuename = request().getQueryString("name");
        String name;
        if (valuename != null) {
            name = valuename;
        } else {
            name = null;
        }
        String valuetitle = request().getQueryString("title");
        String title;
        if (valuetitle != null) {
            title = valuetitle;
        } else {
            title = null;
        }
        String valuedetails = request().getQueryString("details");
        String details;
        if (valuedetails != null) {
            details = valuedetails;
        } else {
            details = null;
        }
        String valueenabled = request().getQueryString("enabled");
        Boolean enabled;
        if (valueenabled != null) {
            enabled = Boolean.valueOf(valueenabled);
        } else {
            enabled = null;
        }
        String valueserviceName = request().getQueryString("serviceName");
        String serviceName;
        if (valueserviceName != null) {
            serviceName = valueserviceName;
        } else {
            serviceName = null;
        }
        String valuelogLevel = request().getQueryString("log.level");
        String logLevel;
        if (valuelogLevel != null) {
            logLevel = valuelogLevel;
        } else {
            logLevel = null;
        }
        String valuequeueProcessingEnabled = request().getQueryString("queue.processing.enabled");
        Boolean queueProcessingEnabled;
        if (valuequeueProcessingEnabled != null) {
            queueProcessingEnabled = Boolean.valueOf(valuequeueProcessingEnabled);
        } else {
            queueProcessingEnabled = null;
        }
        String valuepackageExporterTarget = request().getQueryString("packageExporter.target");
        String packageExporterTarget;
        if (valuepackageExporterTarget != null) {
            packageExporterTarget = valuepackageExporterTarget;
        } else {
            packageExporterTarget = null;
        }
        String valuepackageImporterTarget = request().getQueryString("packageImporter.target");
        String packageImporterTarget;
        if (valuepackageImporterTarget != null) {
            packageImporterTarget = valuepackageImporterTarget;
        } else {
            packageImporterTarget = null;
        }
        String valuerequestAuthorizationStrategyTarget = request().getQueryString("requestAuthorizationStrategy.target");
        String requestAuthorizationStrategyTarget;
        if (valuerequestAuthorizationStrategyTarget != null) {
            requestAuthorizationStrategyTarget = valuerequestAuthorizationStrategyTarget;
        } else {
            requestAuthorizationStrategyTarget = null;
        }
        String valuetriggersTarget = request().getQueryString("triggers.target");
        String triggersTarget;
        if (valuetriggersTarget != null) {
            triggersTarget = valuetriggersTarget;
        } else {
            triggersTarget = null;
        }
        OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorInfo obj = imp.orgApacheSlingDistributionAgentImplSimpleDistributionAgentFactor(post, apply, delete, action, $location, propertylist, name, title, details, enabled, serviceName, logLevel, queueProcessingEnabled, packageExporterTarget, packageImporterTarget, requestAuthorizationStrategyTarget, triggersTarget);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheSlingDistributionAgentImplSyncDistributionAgentFactory() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuename = request().getQueryString("name");
        String name;
        if (valuename != null) {
            name = valuename;
        } else {
            name = null;
        }
        String valuetitle = request().getQueryString("title");
        String title;
        if (valuetitle != null) {
            title = valuetitle;
        } else {
            title = null;
        }
        String valuedetails = request().getQueryString("details");
        String details;
        if (valuedetails != null) {
            details = valuedetails;
        } else {
            details = null;
        }
        String valueenabled = request().getQueryString("enabled");
        Boolean enabled;
        if (valueenabled != null) {
            enabled = Boolean.valueOf(valueenabled);
        } else {
            enabled = null;
        }
        String valueserviceName = request().getQueryString("serviceName");
        String serviceName;
        if (valueserviceName != null) {
            serviceName = valueserviceName;
        } else {
            serviceName = null;
        }
        String valuelogLevel = request().getQueryString("log.level");
        String logLevel;
        if (valuelogLevel != null) {
            logLevel = valuelogLevel;
        } else {
            logLevel = null;
        }
        String valuequeueProcessingEnabled = request().getQueryString("queue.processing.enabled");
        Boolean queueProcessingEnabled;
        if (valuequeueProcessingEnabled != null) {
            queueProcessingEnabled = Boolean.valueOf(valuequeueProcessingEnabled);
        } else {
            queueProcessingEnabled = null;
        }
        String[] passiveQueuesArray = request().queryString().get("passiveQueues");
        List<String> passiveQueuesList = OpenAPIUtils.parametersToList("multi", passiveQueuesArray);
        List<String> passiveQueues = new ArrayList<String>();
        for (String curParam : passiveQueuesList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                passiveQueues.add(curParam);
            }
        }
        String[] packageExporterEndpointsArray = request().queryString().get("packageExporter.endpoints");
        List<String> packageExporterEndpointsList = OpenAPIUtils.parametersToList("multi", packageExporterEndpointsArray);
        List<String> packageExporterEndpoints = new ArrayList<String>();
        for (String curParam : packageExporterEndpointsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                packageExporterEndpoints.add(curParam);
            }
        }
        String[] packageImporterEndpointsArray = request().queryString().get("packageImporter.endpoints");
        List<String> packageImporterEndpointsList = OpenAPIUtils.parametersToList("multi", packageImporterEndpointsArray);
        List<String> packageImporterEndpoints = new ArrayList<String>();
        for (String curParam : packageImporterEndpointsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                packageImporterEndpoints.add(curParam);
            }
        }
        String valueretryStrategy = request().getQueryString("retry.strategy");
        String retryStrategy;
        if (valueretryStrategy != null) {
            retryStrategy = valueretryStrategy;
        } else {
            retryStrategy = null;
        }
        String valueretryAttempts = request().getQueryString("retry.attempts");
        Integer retryAttempts;
        if (valueretryAttempts != null) {
            retryAttempts = Integer.parseInt(valueretryAttempts);
        } else {
            retryAttempts = null;
        }
        String valuepullItems = request().getQueryString("pull.items");
        Integer pullItems;
        if (valuepullItems != null) {
            pullItems = Integer.parseInt(valuepullItems);
        } else {
            pullItems = null;
        }
        String valuehttpConnTimeout = request().getQueryString("http.conn.timeout");
        Integer httpConnTimeout;
        if (valuehttpConnTimeout != null) {
            httpConnTimeout = Integer.parseInt(valuehttpConnTimeout);
        } else {
            httpConnTimeout = null;
        }
        String valuerequestAuthorizationStrategyTarget = request().getQueryString("requestAuthorizationStrategy.target");
        String requestAuthorizationStrategyTarget;
        if (valuerequestAuthorizationStrategyTarget != null) {
            requestAuthorizationStrategyTarget = valuerequestAuthorizationStrategyTarget;
        } else {
            requestAuthorizationStrategyTarget = null;
        }
        String valuetransportSecretProviderTarget = request().getQueryString("transportSecretProvider.target");
        String transportSecretProviderTarget;
        if (valuetransportSecretProviderTarget != null) {
            transportSecretProviderTarget = valuetransportSecretProviderTarget;
        } else {
            transportSecretProviderTarget = null;
        }
        String valuepackageBuilderTarget = request().getQueryString("packageBuilder.target");
        String packageBuilderTarget;
        if (valuepackageBuilderTarget != null) {
            packageBuilderTarget = valuepackageBuilderTarget;
        } else {
            packageBuilderTarget = null;
        }
        String valuetriggersTarget = request().getQueryString("triggers.target");
        String triggersTarget;
        if (valuetriggersTarget != null) {
            triggersTarget = valuetriggersTarget;
        } else {
            triggersTarget = null;
        }
        OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryInfo obj = imp.orgApacheSlingDistributionAgentImplSyncDistributionAgentFactory(post, apply, delete, action, $location, propertylist, name, title, details, enabled, serviceName, logLevel, queueProcessingEnabled, passiveQueues, packageExporterEndpoints, packageImporterEndpoints, retryStrategy, retryAttempts, pullItems, httpConnTimeout, requestAuthorizationStrategyTarget, transportSecretProviderTarget, packageBuilderTarget, triggersTarget);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheSlingDistributionMonitorDistributionQueueHealthCheck() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuehcName = request().getQueryString("hc.name");
        String hcName;
        if (valuehcName != null) {
            hcName = valuehcName;
        } else {
            hcName = null;
        }
        String[] hcTagsArray = request().queryString().get("hc.tags");
        List<String> hcTagsList = OpenAPIUtils.parametersToList("multi", hcTagsArray);
        List<String> hcTags = new ArrayList<String>();
        for (String curParam : hcTagsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                hcTags.add(curParam);
            }
        }
        String valuehcMbeanName = request().getQueryString("hc.mbean.name");
        String hcMbeanName;
        if (valuehcMbeanName != null) {
            hcMbeanName = valuehcMbeanName;
        } else {
            hcMbeanName = null;
        }
        String valuenumberOfRetriesAllowed = request().getQueryString("numberOfRetriesAllowed");
        Integer numberOfRetriesAllowed;
        if (valuenumberOfRetriesAllowed != null) {
            numberOfRetriesAllowed = Integer.parseInt(valuenumberOfRetriesAllowed);
        } else {
            numberOfRetriesAllowed = null;
        }
        OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckInfo obj = imp.orgApacheSlingDistributionMonitorDistributionQueueHealthCheck(post, apply, delete, action, $location, propertylist, hcName, hcTags, hcMbeanName, numberOfRetriesAllowed);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheSlingDistributionPackagingImplExporterAgentDistributio() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuename = request().getQueryString("name");
        String name;
        if (valuename != null) {
            name = valuename;
        } else {
            name = null;
        }
        String valuequeue = request().getQueryString("queue");
        String queue;
        if (valuequeue != null) {
            queue = valuequeue;
        } else {
            queue = null;
        }
        String valuedropInvalidItems = request().getQueryString("drop.invalid.items");
        Boolean dropInvalidItems;
        if (valuedropInvalidItems != null) {
            dropInvalidItems = Boolean.valueOf(valuedropInvalidItems);
        } else {
            dropInvalidItems = null;
        }
        String valueagentTarget = request().getQueryString("agent.target");
        String agentTarget;
        if (valueagentTarget != null) {
            agentTarget = valueagentTarget;
        } else {
            agentTarget = null;
        }
        OrgApacheSlingDistributionPackagingImplExporterAgentDistributioInfo obj = imp.orgApacheSlingDistributionPackagingImplExporterAgentDistributio(post, apply, delete, action, $location, propertylist, name, queue, dropInvalidItems, agentTarget);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheSlingDistributionPackagingImplExporterLocalDistributio() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuename = request().getQueryString("name");
        String name;
        if (valuename != null) {
            name = valuename;
        } else {
            name = null;
        }
        String valuepackageBuilderTarget = request().getQueryString("packageBuilder.target");
        String packageBuilderTarget;
        if (valuepackageBuilderTarget != null) {
            packageBuilderTarget = valuepackageBuilderTarget;
        } else {
            packageBuilderTarget = null;
        }
        OrgApacheSlingDistributionPackagingImplExporterLocalDistributioInfo obj = imp.orgApacheSlingDistributionPackagingImplExporterLocalDistributio(post, apply, delete, action, $location, propertylist, name, packageBuilderTarget);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheSlingDistributionPackagingImplExporterRemoteDistributi() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuename = request().getQueryString("name");
        String name;
        if (valuename != null) {
            name = valuename;
        } else {
            name = null;
        }
        String[] endpointsArray = request().queryString().get("endpoints");
        List<String> endpointsList = OpenAPIUtils.parametersToList("multi", endpointsArray);
        List<String> endpoints = new ArrayList<String>();
        for (String curParam : endpointsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                endpoints.add(curParam);
            }
        }
        String valuepullItems = request().getQueryString("pull.items");
        Integer pullItems;
        if (valuepullItems != null) {
            pullItems = Integer.parseInt(valuepullItems);
        } else {
            pullItems = null;
        }
        String valuepackageBuilderTarget = request().getQueryString("packageBuilder.target");
        String packageBuilderTarget;
        if (valuepackageBuilderTarget != null) {
            packageBuilderTarget = valuepackageBuilderTarget;
        } else {
            packageBuilderTarget = null;
        }
        String valuetransportSecretProviderTarget = request().getQueryString("transportSecretProvider.target");
        String transportSecretProviderTarget;
        if (valuetransportSecretProviderTarget != null) {
            transportSecretProviderTarget = valuetransportSecretProviderTarget;
        } else {
            transportSecretProviderTarget = null;
        }
        OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiInfo obj = imp.orgApacheSlingDistributionPackagingImplExporterRemoteDistributi(post, apply, delete, action, $location, propertylist, name, endpoints, pullItems, packageBuilderTarget, transportSecretProviderTarget);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheSlingDistributionPackagingImplImporterLocalDistributio() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuename = request().getQueryString("name");
        String name;
        if (valuename != null) {
            name = valuename;
        } else {
            name = null;
        }
        String valuepackageBuilderTarget = request().getQueryString("packageBuilder.target");
        String packageBuilderTarget;
        if (valuepackageBuilderTarget != null) {
            packageBuilderTarget = valuepackageBuilderTarget;
        } else {
            packageBuilderTarget = null;
        }
        OrgApacheSlingDistributionPackagingImplImporterLocalDistributioInfo obj = imp.orgApacheSlingDistributionPackagingImplImporterLocalDistributio(post, apply, delete, action, $location, propertylist, name, packageBuilderTarget);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheSlingDistributionPackagingImplImporterRemoteDistributi() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuename = request().getQueryString("name");
        String name;
        if (valuename != null) {
            name = valuename;
        } else {
            name = null;
        }
        String[] endpointsArray = request().queryString().get("endpoints");
        List<String> endpointsList = OpenAPIUtils.parametersToList("multi", endpointsArray);
        List<String> endpoints = new ArrayList<String>();
        for (String curParam : endpointsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                endpoints.add(curParam);
            }
        }
        String valuetransportSecretProviderTarget = request().getQueryString("transportSecretProvider.target");
        String transportSecretProviderTarget;
        if (valuetransportSecretProviderTarget != null) {
            transportSecretProviderTarget = valuetransportSecretProviderTarget;
        } else {
            transportSecretProviderTarget = null;
        }
        OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiInfo obj = imp.orgApacheSlingDistributionPackagingImplImporterRemoteDistributi(post, apply, delete, action, $location, propertylist, name, endpoints, transportSecretProviderTarget);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheSlingDistributionPackagingImplImporterRepositoryDistri() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuename = request().getQueryString("name");
        String name;
        if (valuename != null) {
            name = valuename;
        } else {
            name = null;
        }
        String valueserviceName = request().getQueryString("service.name");
        String serviceName;
        if (valueserviceName != null) {
            serviceName = valueserviceName;
        } else {
            serviceName = null;
        }
        String valuepath = request().getQueryString("path");
        String path;
        if (valuepath != null) {
            path = valuepath;
        } else {
            path = null;
        }
        String valueprivilegeName = request().getQueryString("privilege.name");
        String privilegeName;
        if (valueprivilegeName != null) {
            privilegeName = valueprivilegeName;
        } else {
            privilegeName = null;
        }
        OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriInfo obj = imp.orgApacheSlingDistributionPackagingImplImporterRepositoryDistri(post, apply, delete, action, $location, propertylist, name, serviceName, path, privilegeName);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheSlingDistributionResourcesImplDistributionConfiguration() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueproviderRoots = request().getQueryString("provider.roots");
        String providerRoots;
        if (valueproviderRoots != null) {
            providerRoots = valueproviderRoots;
        } else {
            providerRoots = null;
        }
        String valuekind = request().getQueryString("kind");
        String kind;
        if (valuekind != null) {
            kind = valuekind;
        } else {
            kind = null;
        }
        OrgApacheSlingDistributionResourcesImplDistributionConfigurationInfo obj = imp.orgApacheSlingDistributionResourcesImplDistributionConfiguration(post, apply, delete, action, $location, propertylist, providerRoots, kind);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheSlingDistributionResourcesImplDistributionServiceResour() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueproviderRoots = request().getQueryString("provider.roots");
        String providerRoots;
        if (valueproviderRoots != null) {
            providerRoots = valueproviderRoots;
        } else {
            providerRoots = null;
        }
        String valuekind = request().getQueryString("kind");
        String kind;
        if (valuekind != null) {
            kind = valuekind;
        } else {
            kind = null;
        }
        OrgApacheSlingDistributionResourcesImplDistributionServiceResourInfo obj = imp.orgApacheSlingDistributionResourcesImplDistributionServiceResour(post, apply, delete, action, $location, propertylist, providerRoots, kind);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheSlingDistributionSerializationImplDistributionPackageBu() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuename = request().getQueryString("name");
        String name;
        if (valuename != null) {
            name = valuename;
        } else {
            name = null;
        }
        String valuetype = request().getQueryString("type");
        String type;
        if (valuetype != null) {
            type = valuetype;
        } else {
            type = null;
        }
        String valueformatTarget = request().getQueryString("format.target");
        String formatTarget;
        if (valueformatTarget != null) {
            formatTarget = valueformatTarget;
        } else {
            formatTarget = null;
        }
        String valuetempFsFolder = request().getQueryString("tempFsFolder");
        String tempFsFolder;
        if (valuetempFsFolder != null) {
            tempFsFolder = valuetempFsFolder;
        } else {
            tempFsFolder = null;
        }
        String valuefileThreshold = request().getQueryString("fileThreshold");
        Integer fileThreshold;
        if (valuefileThreshold != null) {
            fileThreshold = Integer.parseInt(valuefileThreshold);
        } else {
            fileThreshold = null;
        }
        String valuememoryUnit = request().getQueryString("memoryUnit");
        String memoryUnit;
        if (valuememoryUnit != null) {
            memoryUnit = valuememoryUnit;
        } else {
            memoryUnit = null;
        }
        String valueuseOffHeapMemory = request().getQueryString("useOffHeapMemory");
        Boolean useOffHeapMemory;
        if (valueuseOffHeapMemory != null) {
            useOffHeapMemory = Boolean.valueOf(valueuseOffHeapMemory);
        } else {
            useOffHeapMemory = null;
        }
        String valuedigestAlgorithm = request().getQueryString("digestAlgorithm");
        String digestAlgorithm;
        if (valuedigestAlgorithm != null) {
            digestAlgorithm = valuedigestAlgorithm;
        } else {
            digestAlgorithm = null;
        }
        String valuemonitoringQueueSize = request().getQueryString("monitoringQueueSize");
        Integer monitoringQueueSize;
        if (valuemonitoringQueueSize != null) {
            monitoringQueueSize = Integer.parseInt(valuemonitoringQueueSize);
        } else {
            monitoringQueueSize = null;
        }
        String valuecleanupDelay = request().getQueryString("cleanupDelay");
        Integer cleanupDelay;
        if (valuecleanupDelay != null) {
            cleanupDelay = Integer.parseInt(valuecleanupDelay);
        } else {
            cleanupDelay = null;
        }
        String[] packageFiltersArray = request().queryString().get("package.filters");
        List<String> packageFiltersList = OpenAPIUtils.parametersToList("multi", packageFiltersArray);
        List<String> packageFilters = new ArrayList<String>();
        for (String curParam : packageFiltersList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                packageFilters.add(curParam);
            }
        }
        String[] propertyFiltersArray = request().queryString().get("property.filters");
        List<String> propertyFiltersList = OpenAPIUtils.parametersToList("multi", propertyFiltersArray);
        List<String> propertyFilters = new ArrayList<String>();
        for (String curParam : propertyFiltersList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertyFilters.add(curParam);
            }
        }
        OrgApacheSlingDistributionSerializationImplDistributionPackageBuInfo obj = imp.orgApacheSlingDistributionSerializationImplDistributionPackageBu(post, apply, delete, action, $location, propertylist, name, type, formatTarget, tempFsFolder, fileThreshold, memoryUnit, useOffHeapMemory, digestAlgorithm, monitoringQueueSize, cleanupDelay, packageFilters, propertyFilters);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheSlingDistributionSerializationImplVltVaultDistribution() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuename = request().getQueryString("name");
        String name;
        if (valuename != null) {
            name = valuename;
        } else {
            name = null;
        }
        String valuetype = request().getQueryString("type");
        String type;
        if (valuetype != null) {
            type = valuetype;
        } else {
            type = null;
        }
        String valueimportMode = request().getQueryString("importMode");
        String importMode;
        if (valueimportMode != null) {
            importMode = valueimportMode;
        } else {
            importMode = null;
        }
        String valueaclHandling = request().getQueryString("aclHandling");
        String aclHandling;
        if (valueaclHandling != null) {
            aclHandling = valueaclHandling;
        } else {
            aclHandling = null;
        }
        String valuepackageRoots = request().getQueryString("package.roots");
        String packageRoots;
        if (valuepackageRoots != null) {
            packageRoots = valuepackageRoots;
        } else {
            packageRoots = null;
        }
        String[] packageFiltersArray = request().queryString().get("package.filters");
        List<String> packageFiltersList = OpenAPIUtils.parametersToList("multi", packageFiltersArray);
        List<String> packageFilters = new ArrayList<String>();
        for (String curParam : packageFiltersList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                packageFilters.add(curParam);
            }
        }
        String[] propertyFiltersArray = request().queryString().get("property.filters");
        List<String> propertyFiltersList = OpenAPIUtils.parametersToList("multi", propertyFiltersArray);
        List<String> propertyFilters = new ArrayList<String>();
        for (String curParam : propertyFiltersList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertyFilters.add(curParam);
            }
        }
        String valuetempFsFolder = request().getQueryString("tempFsFolder");
        String tempFsFolder;
        if (valuetempFsFolder != null) {
            tempFsFolder = valuetempFsFolder;
        } else {
            tempFsFolder = null;
        }
        String valueuseBinaryReferences = request().getQueryString("useBinaryReferences");
        Boolean useBinaryReferences;
        if (valueuseBinaryReferences != null) {
            useBinaryReferences = Boolean.valueOf(valueuseBinaryReferences);
        } else {
            useBinaryReferences = null;
        }
        String valueautoSaveThreshold = request().getQueryString("autoSaveThreshold");
        Integer autoSaveThreshold;
        if (valueautoSaveThreshold != null) {
            autoSaveThreshold = Integer.parseInt(valueautoSaveThreshold);
        } else {
            autoSaveThreshold = null;
        }
        String valuecleanupDelay = request().getQueryString("cleanupDelay");
        Integer cleanupDelay;
        if (valuecleanupDelay != null) {
            cleanupDelay = Integer.parseInt(valuecleanupDelay);
        } else {
            cleanupDelay = null;
        }
        String valuefileThreshold = request().getQueryString("fileThreshold");
        Integer fileThreshold;
        if (valuefileThreshold != null) {
            fileThreshold = Integer.parseInt(valuefileThreshold);
        } else {
            fileThreshold = null;
        }
        String valueMEGA_BYTES = request().getQueryString("MEGA_BYTES");
        String MEGA_BYTES;
        if (valueMEGA_BYTES != null) {
            MEGA_BYTES = valueMEGA_BYTES;
        } else {
            MEGA_BYTES = null;
        }
        String valueuseOffHeapMemory = request().getQueryString("useOffHeapMemory");
        Boolean useOffHeapMemory;
        if (valueuseOffHeapMemory != null) {
            useOffHeapMemory = Boolean.valueOf(valueuseOffHeapMemory);
        } else {
            useOffHeapMemory = null;
        }
        String valuedigestAlgorithm = request().getQueryString("digestAlgorithm");
        String digestAlgorithm;
        if (valuedigestAlgorithm != null) {
            digestAlgorithm = valuedigestAlgorithm;
        } else {
            digestAlgorithm = null;
        }
        String valuemonitoringQueueSize = request().getQueryString("monitoringQueueSize");
        Integer monitoringQueueSize;
        if (valuemonitoringQueueSize != null) {
            monitoringQueueSize = Integer.parseInt(valuemonitoringQueueSize);
        } else {
            monitoringQueueSize = null;
        }
        String[] pathsMappingArray = request().queryString().get("pathsMapping");
        List<String> pathsMappingList = OpenAPIUtils.parametersToList("multi", pathsMappingArray);
        List<String> pathsMapping = new ArrayList<String>();
        for (String curParam : pathsMappingList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                pathsMapping.add(curParam);
            }
        }
        String valuestrictImport = request().getQueryString("strictImport");
        Boolean strictImport;
        if (valuestrictImport != null) {
            strictImport = Boolean.valueOf(valuestrictImport);
        } else {
            strictImport = null;
        }
        OrgApacheSlingDistributionSerializationImplVltVaultDistributionInfo obj = imp.orgApacheSlingDistributionSerializationImplVltVaultDistribution(post, apply, delete, action, $location, propertylist, name, type, importMode, aclHandling, packageRoots, packageFilters, propertyFilters, tempFsFolder, useBinaryReferences, autoSaveThreshold, cleanupDelay, fileThreshold, MEGA_BYTES, useOffHeapMemory, digestAlgorithm, monitoringQueueSize, pathsMapping, strictImport);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheSlingDistributionTransportImplUserCredentialsDistributi() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuename = request().getQueryString("name");
        String name;
        if (valuename != null) {
            name = valuename;
        } else {
            name = null;
        }
        String valueusername = request().getQueryString("username");
        String username;
        if (valueusername != null) {
            username = valueusername;
        } else {
            username = null;
        }
        String valuepassword = request().getQueryString("password");
        String password;
        if (valuepassword != null) {
            password = valuepassword;
        } else {
            password = null;
        }
        OrgApacheSlingDistributionTransportImplUserCredentialsDistributiInfo obj = imp.orgApacheSlingDistributionTransportImplUserCredentialsDistributi(post, apply, delete, action, $location, propertylist, name, username, password);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheSlingDistributionTriggerImplDistributionEventDistribute() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuename = request().getQueryString("name");
        String name;
        if (valuename != null) {
            name = valuename;
        } else {
            name = null;
        }
        String valuepath = request().getQueryString("path");
        String path;
        if (valuepath != null) {
            path = valuepath;
        } else {
            path = null;
        }
        OrgApacheSlingDistributionTriggerImplDistributionEventDistributeInfo obj = imp.orgApacheSlingDistributionTriggerImplDistributionEventDistribute(post, apply, delete, action, $location, propertylist, name, path);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheSlingDistributionTriggerImplJcrEventDistributionTrigger() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuename = request().getQueryString("name");
        String name;
        if (valuename != null) {
            name = valuename;
        } else {
            name = null;
        }
        String valuepath = request().getQueryString("path");
        String path;
        if (valuepath != null) {
            path = valuepath;
        } else {
            path = null;
        }
        String[] ignoredPathsPatternsArray = request().queryString().get("ignoredPathsPatterns");
        List<String> ignoredPathsPatternsList = OpenAPIUtils.parametersToList("multi", ignoredPathsPatternsArray);
        List<String> ignoredPathsPatterns = new ArrayList<String>();
        for (String curParam : ignoredPathsPatternsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                ignoredPathsPatterns.add(curParam);
            }
        }
        String valueserviceName = request().getQueryString("serviceName");
        String serviceName;
        if (valueserviceName != null) {
            serviceName = valueserviceName;
        } else {
            serviceName = null;
        }
        String valuedeep = request().getQueryString("deep");
        Boolean deep;
        if (valuedeep != null) {
            deep = Boolean.valueOf(valuedeep);
        } else {
            deep = null;
        }
        OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerInfo obj = imp.orgApacheSlingDistributionTriggerImplJcrEventDistributionTrigger(post, apply, delete, action, $location, propertylist, name, path, ignoredPathsPatterns, serviceName, deep);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheSlingDistributionTriggerImplPersistedJcrEventDistributi() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuename = request().getQueryString("name");
        String name;
        if (valuename != null) {
            name = valuename;
        } else {
            name = null;
        }
        String valuepath = request().getQueryString("path");
        String path;
        if (valuepath != null) {
            path = valuepath;
        } else {
            path = null;
        }
        String valueserviceName = request().getQueryString("serviceName");
        String serviceName;
        if (valueserviceName != null) {
            serviceName = valueserviceName;
        } else {
            serviceName = null;
        }
        String valuenuggetsPath = request().getQueryString("nuggetsPath");
        String nuggetsPath;
        if (valuenuggetsPath != null) {
            nuggetsPath = valuenuggetsPath;
        } else {
            nuggetsPath = null;
        }
        OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiInfo obj = imp.orgApacheSlingDistributionTriggerImplPersistedJcrEventDistributi(post, apply, delete, action, $location, propertylist, name, path, serviceName, nuggetsPath);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheSlingDistributionTriggerImplRemoteEventDistributionTrig() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuename = request().getQueryString("name");
        String name;
        if (valuename != null) {
            name = valuename;
        } else {
            name = null;
        }
        String valueendpoint = request().getQueryString("endpoint");
        String endpoint;
        if (valueendpoint != null) {
            endpoint = valueendpoint;
        } else {
            endpoint = null;
        }
        String valuetransportSecretProviderTarget = request().getQueryString("transportSecretProvider.target");
        String transportSecretProviderTarget;
        if (valuetransportSecretProviderTarget != null) {
            transportSecretProviderTarget = valuetransportSecretProviderTarget;
        } else {
            transportSecretProviderTarget = null;
        }
        OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigInfo obj = imp.orgApacheSlingDistributionTriggerImplRemoteEventDistributionTrig(post, apply, delete, action, $location, propertylist, name, endpoint, transportSecretProviderTarget);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheSlingDistributionTriggerImplResourceEventDistributionTr() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuename = request().getQueryString("name");
        String name;
        if (valuename != null) {
            name = valuename;
        } else {
            name = null;
        }
        String valuepath = request().getQueryString("path");
        String path;
        if (valuepath != null) {
            path = valuepath;
        } else {
            path = null;
        }
        OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrInfo obj = imp.orgApacheSlingDistributionTriggerImplResourceEventDistributionTr(post, apply, delete, action, $location, propertylist, name, path);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheSlingDistributionTriggerImplScheduledDistributionTrigge() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuename = request().getQueryString("name");
        String name;
        if (valuename != null) {
            name = valuename;
        } else {
            name = null;
        }
        String valuepath = request().getQueryString("path");
        String path;
        if (valuepath != null) {
            path = valuepath;
        } else {
            path = null;
        }
        String valueseconds = request().getQueryString("seconds");
        String seconds;
        if (valueseconds != null) {
            seconds = valueseconds;
        } else {
            seconds = null;
        }
        String valueserviceName = request().getQueryString("serviceName");
        String serviceName;
        if (valueserviceName != null) {
            serviceName = valueserviceName;
        } else {
            serviceName = null;
        }
        OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeInfo obj = imp.orgApacheSlingDistributionTriggerImplScheduledDistributionTrigge(post, apply, delete, action, $location, propertylist, name, path, seconds, serviceName);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheSlingEngineImplAuthSlingAuthenticator() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueosgiHttpWhiteboardContextSelect = request().getQueryString("osgi.http.whiteboard.context.select");
        String osgiHttpWhiteboardContextSelect;
        if (valueosgiHttpWhiteboardContextSelect != null) {
            osgiHttpWhiteboardContextSelect = valueosgiHttpWhiteboardContextSelect;
        } else {
            osgiHttpWhiteboardContextSelect = null;
        }
        String valueosgiHttpWhiteboardListener = request().getQueryString("osgi.http.whiteboard.listener");
        String osgiHttpWhiteboardListener;
        if (valueosgiHttpWhiteboardListener != null) {
            osgiHttpWhiteboardListener = valueosgiHttpWhiteboardListener;
        } else {
            osgiHttpWhiteboardListener = null;
        }
        String valueauthSudoCookie = request().getQueryString("auth.sudo.cookie");
        String authSudoCookie;
        if (valueauthSudoCookie != null) {
            authSudoCookie = valueauthSudoCookie;
        } else {
            authSudoCookie = null;
        }
        String valueauthSudoParameter = request().getQueryString("auth.sudo.parameter");
        String authSudoParameter;
        if (valueauthSudoParameter != null) {
            authSudoParameter = valueauthSudoParameter;
        } else {
            authSudoParameter = null;
        }
        String valueauthAnnonymous = request().getQueryString("auth.annonymous");
        Boolean authAnnonymous;
        if (valueauthAnnonymous != null) {
            authAnnonymous = Boolean.valueOf(valueauthAnnonymous);
        } else {
            authAnnonymous = null;
        }
        String[] slingAuthRequirementsArray = request().queryString().get("sling.auth.requirements");
        List<String> slingAuthRequirementsList = OpenAPIUtils.parametersToList("multi", slingAuthRequirementsArray);
        List<String> slingAuthRequirements = new ArrayList<String>();
        for (String curParam : slingAuthRequirementsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                slingAuthRequirements.add(curParam);
            }
        }
        String valueslingAuthAnonymousUser = request().getQueryString("sling.auth.anonymous.user");
        String slingAuthAnonymousUser;
        if (valueslingAuthAnonymousUser != null) {
            slingAuthAnonymousUser = valueslingAuthAnonymousUser;
        } else {
            slingAuthAnonymousUser = null;
        }
        String valueslingAuthAnonymousPassword = request().getQueryString("sling.auth.anonymous.password");
        String slingAuthAnonymousPassword;
        if (valueslingAuthAnonymousPassword != null) {
            slingAuthAnonymousPassword = valueslingAuthAnonymousPassword;
        } else {
            slingAuthAnonymousPassword = null;
        }
        String valueauthHttp = request().getQueryString("auth.http");
        String authHttp;
        if (valueauthHttp != null) {
            authHttp = valueauthHttp;
        } else {
            authHttp = null;
        }
        String valueauthHttpRealm = request().getQueryString("auth.http.realm");
        String authHttpRealm;
        if (valueauthHttpRealm != null) {
            authHttpRealm = valueauthHttpRealm;
        } else {
            authHttpRealm = null;
        }
        String[] authUriSuffixArray = request().queryString().get("auth.uri.suffix");
        List<String> authUriSuffixList = OpenAPIUtils.parametersToList("multi", authUriSuffixArray);
        List<String> authUriSuffix = new ArrayList<String>();
        for (String curParam : authUriSuffixList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                authUriSuffix.add(curParam);
            }
        }
        OrgApacheSlingEngineImplAuthSlingAuthenticatorInfo obj = imp.orgApacheSlingEngineImplAuthSlingAuthenticator(post, apply, delete, action, $location, propertylist, osgiHttpWhiteboardContextSelect, osgiHttpWhiteboardListener, authSudoCookie, authSudoParameter, authAnnonymous, slingAuthRequirements, slingAuthAnonymousUser, slingAuthAnonymousPassword, authHttp, authHttpRealm, authUriSuffix);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheSlingEngineImplDebugRequestProgressTrackerLogFilter() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] extensionsArray = request().queryString().get("extensions");
        List<String> extensionsList = OpenAPIUtils.parametersToList("multi", extensionsArray);
        List<String> extensions = new ArrayList<String>();
        for (String curParam : extensionsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                extensions.add(curParam);
            }
        }
        String valueminDurationMs = request().getQueryString("minDurationMs");
        Integer minDurationMs;
        if (valueminDurationMs != null) {
            minDurationMs = Integer.parseInt(valueminDurationMs);
        } else {
            minDurationMs = null;
        }
        String valuemaxDurationMs = request().getQueryString("maxDurationMs");
        Integer maxDurationMs;
        if (valuemaxDurationMs != null) {
            maxDurationMs = Integer.parseInt(valuemaxDurationMs);
        } else {
            maxDurationMs = null;
        }
        String valuecompactLogFormat = request().getQueryString("compactLogFormat");
        Boolean compactLogFormat;
        if (valuecompactLogFormat != null) {
            compactLogFormat = Boolean.valueOf(valuecompactLogFormat);
        } else {
            compactLogFormat = null;
        }
        OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterInfo obj = imp.orgApacheSlingEngineImplDebugRequestProgressTrackerLogFilter(post, apply, delete, action, $location, propertylist, extensions, minDurationMs, maxDurationMs, compactLogFormat);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheSlingEngineImplLogRequestLogger() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuerequestLogOutput = request().getQueryString("request.log.output");
        String requestLogOutput;
        if (valuerequestLogOutput != null) {
            requestLogOutput = valuerequestLogOutput;
        } else {
            requestLogOutput = null;
        }
        String valuerequestLogOutputtype = request().getQueryString("request.log.outputtype");
        Integer requestLogOutputtype;
        if (valuerequestLogOutputtype != null) {
            requestLogOutputtype = Integer.parseInt(valuerequestLogOutputtype);
        } else {
            requestLogOutputtype = null;
        }
        String valuerequestLogEnabled = request().getQueryString("request.log.enabled");
        Boolean requestLogEnabled;
        if (valuerequestLogEnabled != null) {
            requestLogEnabled = Boolean.valueOf(valuerequestLogEnabled);
        } else {
            requestLogEnabled = null;
        }
        String valueaccessLogOutput = request().getQueryString("access.log.output");
        String accessLogOutput;
        if (valueaccessLogOutput != null) {
            accessLogOutput = valueaccessLogOutput;
        } else {
            accessLogOutput = null;
        }
        String valueaccessLogOutputtype = request().getQueryString("access.log.outputtype");
        Integer accessLogOutputtype;
        if (valueaccessLogOutputtype != null) {
            accessLogOutputtype = Integer.parseInt(valueaccessLogOutputtype);
        } else {
            accessLogOutputtype = null;
        }
        String valueaccessLogEnabled = request().getQueryString("access.log.enabled");
        Boolean accessLogEnabled;
        if (valueaccessLogEnabled != null) {
            accessLogEnabled = Boolean.valueOf(valueaccessLogEnabled);
        } else {
            accessLogEnabled = null;
        }
        OrgApacheSlingEngineImplLogRequestLoggerInfo obj = imp.orgApacheSlingEngineImplLogRequestLogger(post, apply, delete, action, $location, propertylist, requestLogOutput, requestLogOutputtype, requestLogEnabled, accessLogOutput, accessLogOutputtype, accessLogEnabled);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheSlingEngineImplLogRequestLoggerService() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuerequestLogServiceFormat = request().getQueryString("request.log.service.format");
        String requestLogServiceFormat;
        if (valuerequestLogServiceFormat != null) {
            requestLogServiceFormat = valuerequestLogServiceFormat;
        } else {
            requestLogServiceFormat = null;
        }
        String valuerequestLogServiceOutput = request().getQueryString("request.log.service.output");
        String requestLogServiceOutput;
        if (valuerequestLogServiceOutput != null) {
            requestLogServiceOutput = valuerequestLogServiceOutput;
        } else {
            requestLogServiceOutput = null;
        }
        String valuerequestLogServiceOutputtype = request().getQueryString("request.log.service.outputtype");
        Integer requestLogServiceOutputtype;
        if (valuerequestLogServiceOutputtype != null) {
            requestLogServiceOutputtype = Integer.parseInt(valuerequestLogServiceOutputtype);
        } else {
            requestLogServiceOutputtype = null;
        }
        String valuerequestLogServiceOnentry = request().getQueryString("request.log.service.onentry");
        Boolean requestLogServiceOnentry;
        if (valuerequestLogServiceOnentry != null) {
            requestLogServiceOnentry = Boolean.valueOf(valuerequestLogServiceOnentry);
        } else {
            requestLogServiceOnentry = null;
        }
        OrgApacheSlingEngineImplLogRequestLoggerServiceInfo obj = imp.orgApacheSlingEngineImplLogRequestLoggerService(post, apply, delete, action, $location, propertylist, requestLogServiceFormat, requestLogServiceOutput, requestLogServiceOutputtype, requestLogServiceOnentry);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheSlingEngineImplSlingMainServlet() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueslingMaxCalls = request().getQueryString("sling.max.calls");
        Integer slingMaxCalls;
        if (valueslingMaxCalls != null) {
            slingMaxCalls = Integer.parseInt(valueslingMaxCalls);
        } else {
            slingMaxCalls = null;
        }
        String valueslingMaxInclusions = request().getQueryString("sling.max.inclusions");
        Integer slingMaxInclusions;
        if (valueslingMaxInclusions != null) {
            slingMaxInclusions = Integer.parseInt(valueslingMaxInclusions);
        } else {
            slingMaxInclusions = null;
        }
        String valueslingTraceAllow = request().getQueryString("sling.trace.allow");
        Boolean slingTraceAllow;
        if (valueslingTraceAllow != null) {
            slingTraceAllow = Boolean.valueOf(valueslingTraceAllow);
        } else {
            slingTraceAllow = null;
        }
        String valueslingMaxRecordRequests = request().getQueryString("sling.max.record.requests");
        Integer slingMaxRecordRequests;
        if (valueslingMaxRecordRequests != null) {
            slingMaxRecordRequests = Integer.parseInt(valueslingMaxRecordRequests);
        } else {
            slingMaxRecordRequests = null;
        }
        String[] slingStorePatternRequestsArray = request().queryString().get("sling.store.pattern.requests");
        List<String> slingStorePatternRequestsList = OpenAPIUtils.parametersToList("multi", slingStorePatternRequestsArray);
        List<String> slingStorePatternRequests = new ArrayList<String>();
        for (String curParam : slingStorePatternRequestsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                slingStorePatternRequests.add(curParam);
            }
        }
        String valueslingServerinfo = request().getQueryString("sling.serverinfo");
        String slingServerinfo;
        if (valueslingServerinfo != null) {
            slingServerinfo = valueslingServerinfo;
        } else {
            slingServerinfo = null;
        }
        String[] slingAdditionalResponseHeadersArray = request().queryString().get("sling.additional.response.headers");
        List<String> slingAdditionalResponseHeadersList = OpenAPIUtils.parametersToList("multi", slingAdditionalResponseHeadersArray);
        List<String> slingAdditionalResponseHeaders = new ArrayList<String>();
        for (String curParam : slingAdditionalResponseHeadersList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                slingAdditionalResponseHeaders.add(curParam);
            }
        }
        OrgApacheSlingEngineImplSlingMainServletInfo obj = imp.orgApacheSlingEngineImplSlingMainServlet(post, apply, delete, action, $location, propertylist, slingMaxCalls, slingMaxInclusions, slingTraceAllow, slingMaxRecordRequests, slingStorePatternRequests, slingServerinfo, slingAdditionalResponseHeaders);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheSlingEngineParameters() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueslingDefaultParameterEncoding = request().getQueryString("sling.default.parameter.encoding");
        String slingDefaultParameterEncoding;
        if (valueslingDefaultParameterEncoding != null) {
            slingDefaultParameterEncoding = valueslingDefaultParameterEncoding;
        } else {
            slingDefaultParameterEncoding = null;
        }
        String valueslingDefaultMaxParameters = request().getQueryString("sling.default.max.parameters");
        Integer slingDefaultMaxParameters;
        if (valueslingDefaultMaxParameters != null) {
            slingDefaultMaxParameters = Integer.parseInt(valueslingDefaultMaxParameters);
        } else {
            slingDefaultMaxParameters = null;
        }
        String valuefileLocation = request().getQueryString("file.location");
        String fileLocation;
        if (valuefileLocation != null) {
            fileLocation = valuefileLocation;
        } else {
            fileLocation = null;
        }
        String valuefileThreshold = request().getQueryString("file.threshold");
        Integer fileThreshold;
        if (valuefileThreshold != null) {
            fileThreshold = Integer.parseInt(valuefileThreshold);
        } else {
            fileThreshold = null;
        }
        String valuefileMax = request().getQueryString("file.max");
        Integer fileMax;
        if (valuefileMax != null) {
            fileMax = Integer.parseInt(valuefileMax);
        } else {
            fileMax = null;
        }
        String valuerequestMax = request().getQueryString("request.max");
        Integer requestMax;
        if (valuerequestMax != null) {
            requestMax = Integer.parseInt(valuerequestMax);
        } else {
            requestMax = null;
        }
        String valueslingDefaultParameterCheckForAdditionalContainerParameters = request().getQueryString("sling.default.parameter.checkForAdditionalContainerParameters");
        Boolean slingDefaultParameterCheckForAdditionalContainerParameters;
        if (valueslingDefaultParameterCheckForAdditionalContainerParameters != null) {
            slingDefaultParameterCheckForAdditionalContainerParameters = Boolean.valueOf(valueslingDefaultParameterCheckForAdditionalContainerParameters);
        } else {
            slingDefaultParameterCheckForAdditionalContainerParameters = null;
        }
        OrgApacheSlingEngineParametersInfo obj = imp.orgApacheSlingEngineParameters(post, apply, delete, action, $location, propertylist, slingDefaultParameterEncoding, slingDefaultMaxParameters, fileLocation, fileThreshold, fileMax, requestMax, slingDefaultParameterCheckForAdditionalContainerParameters);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheSlingEventImplEventingThreadPool() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueminPoolSize = request().getQueryString("minPoolSize");
        Integer minPoolSize;
        if (valueminPoolSize != null) {
            minPoolSize = Integer.parseInt(valueminPoolSize);
        } else {
            minPoolSize = null;
        }
        OrgApacheSlingEventImplEventingThreadPoolInfo obj = imp.orgApacheSlingEventImplEventingThreadPool(post, apply, delete, action, $location, propertylist, minPoolSize);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheSlingEventImplJobsDefaultJobManager() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuequeuePriority = request().getQueryString("queue.priority");
        String queuePriority;
        if (valuequeuePriority != null) {
            queuePriority = valuequeuePriority;
        } else {
            queuePriority = null;
        }
        String valuequeueRetries = request().getQueryString("queue.retries");
        Integer queueRetries;
        if (valuequeueRetries != null) {
            queueRetries = Integer.parseInt(valuequeueRetries);
        } else {
            queueRetries = null;
        }
        String valuequeueRetrydelay = request().getQueryString("queue.retrydelay");
        Integer queueRetrydelay;
        if (valuequeueRetrydelay != null) {
            queueRetrydelay = Integer.parseInt(valuequeueRetrydelay);
        } else {
            queueRetrydelay = null;
        }
        String valuequeueMaxparallel = request().getQueryString("queue.maxparallel");
        Integer queueMaxparallel;
        if (valuequeueMaxparallel != null) {
            queueMaxparallel = Integer.parseInt(valuequeueMaxparallel);
        } else {
            queueMaxparallel = null;
        }
        OrgApacheSlingEventImplJobsDefaultJobManagerInfo obj = imp.orgApacheSlingEventImplJobsDefaultJobManager(post, apply, delete, action, $location, propertylist, queuePriority, queueRetries, queueRetrydelay, queueMaxparallel);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheSlingEventImplJobsJcrPersistenceHandler() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuejobConsumermanagerDisableDistribution = request().getQueryString("job.consumermanager.disableDistribution");
        Boolean jobConsumermanagerDisableDistribution;
        if (valuejobConsumermanagerDisableDistribution != null) {
            jobConsumermanagerDisableDistribution = Boolean.valueOf(valuejobConsumermanagerDisableDistribution);
        } else {
            jobConsumermanagerDisableDistribution = null;
        }
        String valuestartupDelay = request().getQueryString("startup.delay");
        Integer startupDelay;
        if (valuestartupDelay != null) {
            startupDelay = Integer.parseInt(valuestartupDelay);
        } else {
            startupDelay = null;
        }
        String valuecleanupPeriod = request().getQueryString("cleanup.period");
        Integer cleanupPeriod;
        if (valuecleanupPeriod != null) {
            cleanupPeriod = Integer.parseInt(valuecleanupPeriod);
        } else {
            cleanupPeriod = null;
        }
        OrgApacheSlingEventImplJobsJcrPersistenceHandlerInfo obj = imp.orgApacheSlingEventImplJobsJcrPersistenceHandler(post, apply, delete, action, $location, propertylist, jobConsumermanagerDisableDistribution, startupDelay, cleanupPeriod);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheSlingEventImplJobsJobConsumerManager() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueorgApacheSlingInstallerConfigurationPersist = request().getQueryString("org.apache.sling.installer.configuration.persist");
        Boolean orgApacheSlingInstallerConfigurationPersist;
        if (valueorgApacheSlingInstallerConfigurationPersist != null) {
            orgApacheSlingInstallerConfigurationPersist = Boolean.valueOf(valueorgApacheSlingInstallerConfigurationPersist);
        } else {
            orgApacheSlingInstallerConfigurationPersist = null;
        }
        String[] jobConsumermanagerWhitelistArray = request().queryString().get("job.consumermanager.whitelist");
        List<String> jobConsumermanagerWhitelistList = OpenAPIUtils.parametersToList("multi", jobConsumermanagerWhitelistArray);
        List<String> jobConsumermanagerWhitelist = new ArrayList<String>();
        for (String curParam : jobConsumermanagerWhitelistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                jobConsumermanagerWhitelist.add(curParam);
            }
        }
        String[] jobConsumermanagerBlacklistArray = request().queryString().get("job.consumermanager.blacklist");
        List<String> jobConsumermanagerBlacklistList = OpenAPIUtils.parametersToList("multi", jobConsumermanagerBlacklistArray);
        List<String> jobConsumermanagerBlacklist = new ArrayList<String>();
        for (String curParam : jobConsumermanagerBlacklistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                jobConsumermanagerBlacklist.add(curParam);
            }
        }
        OrgApacheSlingEventImplJobsJobConsumerManagerInfo obj = imp.orgApacheSlingEventImplJobsJobConsumerManager(post, apply, delete, action, $location, propertylist, orgApacheSlingInstallerConfigurationPersist, jobConsumermanagerWhitelist, jobConsumermanagerBlacklist);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheSlingEventJobsQueueConfiguration() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuequeueName = request().getQueryString("queue.name");
        String queueName;
        if (valuequeueName != null) {
            queueName = valuequeueName;
        } else {
            queueName = null;
        }
        String[] queueTopicsArray = request().queryString().get("queue.topics");
        List<String> queueTopicsList = OpenAPIUtils.parametersToList("multi", queueTopicsArray);
        List<String> queueTopics = new ArrayList<String>();
        for (String curParam : queueTopicsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                queueTopics.add(curParam);
            }
        }
        String valuequeueType = request().getQueryString("queue.type");
        String queueType;
        if (valuequeueType != null) {
            queueType = valuequeueType;
        } else {
            queueType = null;
        }
        String valuequeuePriority = request().getQueryString("queue.priority");
        String queuePriority;
        if (valuequeuePriority != null) {
            queuePriority = valuequeuePriority;
        } else {
            queuePriority = null;
        }
        String valuequeueRetries = request().getQueryString("queue.retries");
        Integer queueRetries;
        if (valuequeueRetries != null) {
            queueRetries = Integer.parseInt(valuequeueRetries);
        } else {
            queueRetries = null;
        }
        String valuequeueRetrydelay = request().getQueryString("queue.retrydelay");
        Integer queueRetrydelay;
        if (valuequeueRetrydelay != null) {
            queueRetrydelay = Integer.parseInt(valuequeueRetrydelay);
        } else {
            queueRetrydelay = null;
        }
        String valuequeueMaxparallel = request().getQueryString("queue.maxparallel");
        BigDecimal queueMaxparallel;
        if (valuequeueMaxparallel != null) {
            queueMaxparallel = Double.parseDouble(valuequeueMaxparallel);
        } else {
            queueMaxparallel = null;
        }
        String valuequeueKeepJobs = request().getQueryString("queue.keepJobs");
        Boolean queueKeepJobs;
        if (valuequeueKeepJobs != null) {
            queueKeepJobs = Boolean.valueOf(valuequeueKeepJobs);
        } else {
            queueKeepJobs = null;
        }
        String valuequeuePreferRunOnCreationInstance = request().getQueryString("queue.preferRunOnCreationInstance");
        Boolean queuePreferRunOnCreationInstance;
        if (valuequeuePreferRunOnCreationInstance != null) {
            queuePreferRunOnCreationInstance = Boolean.valueOf(valuequeuePreferRunOnCreationInstance);
        } else {
            queuePreferRunOnCreationInstance = null;
        }
        String valuequeueThreadPoolSize = request().getQueryString("queue.threadPoolSize");
        Integer queueThreadPoolSize;
        if (valuequeueThreadPoolSize != null) {
            queueThreadPoolSize = Integer.parseInt(valuequeueThreadPoolSize);
        } else {
            queueThreadPoolSize = null;
        }
        String valueserviceRanking = request().getQueryString("service.ranking");
        Integer serviceRanking;
        if (valueserviceRanking != null) {
            serviceRanking = Integer.parseInt(valueserviceRanking);
        } else {
            serviceRanking = null;
        }
        OrgApacheSlingEventJobsQueueConfigurationInfo obj = imp.orgApacheSlingEventJobsQueueConfiguration(post, apply, delete, action, $location, propertylist, queueName, queueTopics, queueType, queuePriority, queueRetries, queueRetrydelay, queueMaxparallel, queueKeepJobs, queuePreferRunOnCreationInstance, queueThreadPoolSize, serviceRanking);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingW() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] usersArray = request().queryString().get("users");
        List<String> usersList = OpenAPIUtils.parametersToList("multi", usersArray);
        List<String> users = new ArrayList<String>();
        for (String curParam : usersList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                users.add(curParam);
            }
        }
        String[] groupsArray = request().queryString().get("groups");
        List<String> groupsList = OpenAPIUtils.parametersToList("multi", groupsArray);
        List<String> groups = new ArrayList<String>();
        for (String curParam : groupsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                groups.add(curParam);
            }
        }
        OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWInfo obj = imp.orgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingW(post, apply, delete, action, $location, propertylist, users, groups);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheSlingFeatureflagsFeature() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuename = request().getQueryString("name");
        String name;
        if (valuename != null) {
            name = valuename;
        } else {
            name = null;
        }
        String valuedescription = request().getQueryString("description");
        String description;
        if (valuedescription != null) {
            description = valuedescription;
        } else {
            description = null;
        }
        String valueenabled = request().getQueryString("enabled");
        Boolean enabled;
        if (valueenabled != null) {
            enabled = Boolean.valueOf(valueenabled);
        } else {
            enabled = null;
        }
        OrgApacheSlingFeatureflagsFeatureInfo obj = imp.orgApacheSlingFeatureflagsFeature(post, apply, delete, action, $location, propertylist, name, description, enabled);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheSlingFeatureflagsImplConfiguredFeature() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuename = request().getQueryString("name");
        String name;
        if (valuename != null) {
            name = valuename;
        } else {
            name = null;
        }
        String valuedescription = request().getQueryString("description");
        String description;
        if (valuedescription != null) {
            description = valuedescription;
        } else {
            description = null;
        }
        String valueenabled = request().getQueryString("enabled");
        Boolean enabled;
        if (valueenabled != null) {
            enabled = Boolean.valueOf(valueenabled);
        } else {
            enabled = null;
        }
        OrgApacheSlingFeatureflagsImplConfiguredFeatureInfo obj = imp.orgApacheSlingFeatureflagsImplConfiguredFeature(post, apply, delete, action, $location, propertylist, name, description, enabled);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheSlingHapiImplHApiUtilImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueorgApacheSlingHapiToolsResourcetype = request().getQueryString("org.apache.sling.hapi.tools.resourcetype");
        String orgApacheSlingHapiToolsResourcetype;
        if (valueorgApacheSlingHapiToolsResourcetype != null) {
            orgApacheSlingHapiToolsResourcetype = valueorgApacheSlingHapiToolsResourcetype;
        } else {
            orgApacheSlingHapiToolsResourcetype = null;
        }
        String valueorgApacheSlingHapiToolsCollectionresourcetype = request().getQueryString("org.apache.sling.hapi.tools.collectionresourcetype");
        String orgApacheSlingHapiToolsCollectionresourcetype;
        if (valueorgApacheSlingHapiToolsCollectionresourcetype != null) {
            orgApacheSlingHapiToolsCollectionresourcetype = valueorgApacheSlingHapiToolsCollectionresourcetype;
        } else {
            orgApacheSlingHapiToolsCollectionresourcetype = null;
        }
        String[] orgApacheSlingHapiToolsSearchpathsArray = request().queryString().get("org.apache.sling.hapi.tools.searchpaths");
        List<String> orgApacheSlingHapiToolsSearchpathsList = OpenAPIUtils.parametersToList("multi", orgApacheSlingHapiToolsSearchpathsArray);
        List<String> orgApacheSlingHapiToolsSearchpaths = new ArrayList<String>();
        for (String curParam : orgApacheSlingHapiToolsSearchpathsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                orgApacheSlingHapiToolsSearchpaths.add(curParam);
            }
        }
        String valueorgApacheSlingHapiToolsExternalurl = request().getQueryString("org.apache.sling.hapi.tools.externalurl");
        String orgApacheSlingHapiToolsExternalurl;
        if (valueorgApacheSlingHapiToolsExternalurl != null) {
            orgApacheSlingHapiToolsExternalurl = valueorgApacheSlingHapiToolsExternalurl;
        } else {
            orgApacheSlingHapiToolsExternalurl = null;
        }
        String valueorgApacheSlingHapiToolsEnabled = request().getQueryString("org.apache.sling.hapi.tools.enabled");
        Boolean orgApacheSlingHapiToolsEnabled;
        if (valueorgApacheSlingHapiToolsEnabled != null) {
            orgApacheSlingHapiToolsEnabled = Boolean.valueOf(valueorgApacheSlingHapiToolsEnabled);
        } else {
            orgApacheSlingHapiToolsEnabled = null;
        }
        OrgApacheSlingHapiImplHApiUtilImplInfo obj = imp.orgApacheSlingHapiImplHApiUtilImpl(post, apply, delete, action, $location, propertylist, orgApacheSlingHapiToolsResourcetype, orgApacheSlingHapiToolsCollectionresourcetype, orgApacheSlingHapiToolsSearchpaths, orgApacheSlingHapiToolsExternalurl, orgApacheSlingHapiToolsEnabled);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheSlingHcCoreImplCompositeHealthCheck() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuehcName = request().getQueryString("hc.name");
        String hcName;
        if (valuehcName != null) {
            hcName = valuehcName;
        } else {
            hcName = null;
        }
        String[] hcTagsArray = request().queryString().get("hc.tags");
        List<String> hcTagsList = OpenAPIUtils.parametersToList("multi", hcTagsArray);
        List<String> hcTags = new ArrayList<String>();
        for (String curParam : hcTagsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                hcTags.add(curParam);
            }
        }
        String valuehcMbeanName = request().getQueryString("hc.mbean.name");
        String hcMbeanName;
        if (valuehcMbeanName != null) {
            hcMbeanName = valuehcMbeanName;
        } else {
            hcMbeanName = null;
        }
        String[] filterTagsArray = request().queryString().get("filter.tags");
        List<String> filterTagsList = OpenAPIUtils.parametersToList("multi", filterTagsArray);
        List<String> filterTags = new ArrayList<String>();
        for (String curParam : filterTagsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                filterTags.add(curParam);
            }
        }
        String valuefilterCombineTagsWithOr = request().getQueryString("filter.combineTagsWithOr");
        Boolean filterCombineTagsWithOr;
        if (valuefilterCombineTagsWithOr != null) {
            filterCombineTagsWithOr = Boolean.valueOf(valuefilterCombineTagsWithOr);
        } else {
            filterCombineTagsWithOr = null;
        }
        OrgApacheSlingHcCoreImplCompositeHealthCheckInfo obj = imp.orgApacheSlingHcCoreImplCompositeHealthCheck(post, apply, delete, action, $location, propertylist, hcName, hcTags, hcMbeanName, filterTags, filterCombineTagsWithOr);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheSlingHcCoreImplExecutorHealthCheckExecutorImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuetimeoutInMs = request().getQueryString("timeoutInMs");
        Integer timeoutInMs;
        if (valuetimeoutInMs != null) {
            timeoutInMs = Integer.parseInt(valuetimeoutInMs);
        } else {
            timeoutInMs = null;
        }
        String valuelongRunningFutureThresholdForCriticalMs = request().getQueryString("longRunningFutureThresholdForCriticalMs");
        Integer longRunningFutureThresholdForCriticalMs;
        if (valuelongRunningFutureThresholdForCriticalMs != null) {
            longRunningFutureThresholdForCriticalMs = Integer.parseInt(valuelongRunningFutureThresholdForCriticalMs);
        } else {
            longRunningFutureThresholdForCriticalMs = null;
        }
        String valueresultCacheTtlInMs = request().getQueryString("resultCacheTtlInMs");
        Integer resultCacheTtlInMs;
        if (valueresultCacheTtlInMs != null) {
            resultCacheTtlInMs = Integer.parseInt(valueresultCacheTtlInMs);
        } else {
            resultCacheTtlInMs = null;
        }
        OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplInfo obj = imp.orgApacheSlingHcCoreImplExecutorHealthCheckExecutorImpl(post, apply, delete, action, $location, propertylist, timeoutInMs, longRunningFutureThresholdForCriticalMs, resultCacheTtlInMs);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheSlingHcCoreImplJmxAttributeHealthCheck() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuehcName = request().getQueryString("hc.name");
        String hcName;
        if (valuehcName != null) {
            hcName = valuehcName;
        } else {
            hcName = null;
        }
        String[] hcTagsArray = request().queryString().get("hc.tags");
        List<String> hcTagsList = OpenAPIUtils.parametersToList("multi", hcTagsArray);
        List<String> hcTags = new ArrayList<String>();
        for (String curParam : hcTagsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                hcTags.add(curParam);
            }
        }
        String valuehcMbeanName = request().getQueryString("hc.mbean.name");
        String hcMbeanName;
        if (valuehcMbeanName != null) {
            hcMbeanName = valuehcMbeanName;
        } else {
            hcMbeanName = null;
        }
        String valuembeanName = request().getQueryString("mbean.name");
        String mbeanName;
        if (valuembeanName != null) {
            mbeanName = valuembeanName;
        } else {
            mbeanName = null;
        }
        String valueattributeName = request().getQueryString("attribute.name");
        String attributeName;
        if (valueattributeName != null) {
            attributeName = valueattributeName;
        } else {
            attributeName = null;
        }
        String valueattributeValueConstraint = request().getQueryString("attribute.value.constraint");
        String attributeValueConstraint;
        if (valueattributeValueConstraint != null) {
            attributeValueConstraint = valueattributeValueConstraint;
        } else {
            attributeValueConstraint = null;
        }
        OrgApacheSlingHcCoreImplJmxAttributeHealthCheckInfo obj = imp.orgApacheSlingHcCoreImplJmxAttributeHealthCheck(post, apply, delete, action, $location, propertylist, hcName, hcTags, hcMbeanName, mbeanName, attributeName, attributeValueConstraint);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheSlingHcCoreImplScriptableHealthCheck() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuehcName = request().getQueryString("hc.name");
        String hcName;
        if (valuehcName != null) {
            hcName = valuehcName;
        } else {
            hcName = null;
        }
        String[] hcTagsArray = request().queryString().get("hc.tags");
        List<String> hcTagsList = OpenAPIUtils.parametersToList("multi", hcTagsArray);
        List<String> hcTags = new ArrayList<String>();
        for (String curParam : hcTagsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                hcTags.add(curParam);
            }
        }
        String valuehcMbeanName = request().getQueryString("hc.mbean.name");
        String hcMbeanName;
        if (valuehcMbeanName != null) {
            hcMbeanName = valuehcMbeanName;
        } else {
            hcMbeanName = null;
        }
        String valueexpression = request().getQueryString("expression");
        String expression;
        if (valueexpression != null) {
            expression = valueexpression;
        } else {
            expression = null;
        }
        String valuelanguageExtension = request().getQueryString("language.extension");
        String languageExtension;
        if (valuelanguageExtension != null) {
            languageExtension = valuelanguageExtension;
        } else {
            languageExtension = null;
        }
        OrgApacheSlingHcCoreImplScriptableHealthCheckInfo obj = imp.orgApacheSlingHcCoreImplScriptableHealthCheck(post, apply, delete, action, $location, propertylist, hcName, hcTags, hcMbeanName, expression, languageExtension);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheSlingHcCoreImplServletHealthCheckExecutorServlet() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueservletPath = request().getQueryString("servletPath");
        String servletPath;
        if (valueservletPath != null) {
            servletPath = valueservletPath;
        } else {
            servletPath = null;
        }
        String valuedisabled = request().getQueryString("disabled");
        Boolean disabled;
        if (valuedisabled != null) {
            disabled = Boolean.valueOf(valuedisabled);
        } else {
            disabled = null;
        }
        String valuecorsAccessControlAllowOrigin = request().getQueryString("cors.accessControlAllowOrigin");
        String corsAccessControlAllowOrigin;
        if (valuecorsAccessControlAllowOrigin != null) {
            corsAccessControlAllowOrigin = valuecorsAccessControlAllowOrigin;
        } else {
            corsAccessControlAllowOrigin = null;
        }
        OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletInfo obj = imp.orgApacheSlingHcCoreImplServletHealthCheckExecutorServlet(post, apply, delete, action, $location, propertylist, servletPath, disabled, corsAccessControlAllowOrigin);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheSlingHcCoreImplServletResultTxtVerboseSerializer() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuetotalWidth = request().getQueryString("totalWidth");
        Integer totalWidth;
        if (valuetotalWidth != null) {
            totalWidth = Integer.parseInt(valuetotalWidth);
        } else {
            totalWidth = null;
        }
        String valuecolWidthName = request().getQueryString("colWidthName");
        Integer colWidthName;
        if (valuecolWidthName != null) {
            colWidthName = Integer.parseInt(valuecolWidthName);
        } else {
            colWidthName = null;
        }
        String valuecolWidthResult = request().getQueryString("colWidthResult");
        Integer colWidthResult;
        if (valuecolWidthResult != null) {
            colWidthResult = Integer.parseInt(valuecolWidthResult);
        } else {
            colWidthResult = null;
        }
        String valuecolWidthTiming = request().getQueryString("colWidthTiming");
        Integer colWidthTiming;
        if (valuecolWidthTiming != null) {
            colWidthTiming = Integer.parseInt(valuecolWidthTiming);
        } else {
            colWidthTiming = null;
        }
        OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerInfo obj = imp.orgApacheSlingHcCoreImplServletResultTxtVerboseSerializer(post, apply, delete, action, $location, propertylist, totalWidth, colWidthName, colWidthResult, colWidthTiming);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheSlingI18nImplI18NFilter() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueserviceRanking = request().getQueryString("service.ranking");
        Integer serviceRanking;
        if (valueserviceRanking != null) {
            serviceRanking = Integer.parseInt(valueserviceRanking);
        } else {
            serviceRanking = null;
        }
        String[] slingFilterScopeArray = request().queryString().get("sling.filter.scope");
        List<String> slingFilterScopeList = OpenAPIUtils.parametersToList("multi", slingFilterScopeArray);
        List<String> slingFilterScope = new ArrayList<String>();
        for (String curParam : slingFilterScopeList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                slingFilterScope.add(curParam);
            }
        }
        OrgApacheSlingI18nImplI18NFilterInfo obj = imp.orgApacheSlingI18nImplI18NFilter(post, apply, delete, action, $location, propertylist, serviceRanking, slingFilterScope);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheSlingI18nImplJcrResourceBundleProvider() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuelocaleDefault = request().getQueryString("locale.default");
        String localeDefault;
        if (valuelocaleDefault != null) {
            localeDefault = valuelocaleDefault;
        } else {
            localeDefault = null;
        }
        String valuepreloadBundles = request().getQueryString("preload.bundles");
        Boolean preloadBundles;
        if (valuepreloadBundles != null) {
            preloadBundles = Boolean.valueOf(valuepreloadBundles);
        } else {
            preloadBundles = null;
        }
        String valueinvalidationDelay = request().getQueryString("invalidation.delay");
        Integer invalidationDelay;
        if (valueinvalidationDelay != null) {
            invalidationDelay = Integer.parseInt(valueinvalidationDelay);
        } else {
            invalidationDelay = null;
        }
        OrgApacheSlingI18nImplJcrResourceBundleProviderInfo obj = imp.orgApacheSlingI18nImplJcrResourceBundleProvider(post, apply, delete, action, $location, propertylist, localeDefault, preloadBundles, invalidationDelay);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheSlingInstallerProviderJcrImplJcrInstaller() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] handlerSchemesArray = request().queryString().get("handler.schemes");
        List<String> handlerSchemesList = OpenAPIUtils.parametersToList("multi", handlerSchemesArray);
        List<String> handlerSchemes = new ArrayList<String>();
        for (String curParam : handlerSchemesList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                handlerSchemes.add(curParam);
            }
        }
        String valueslingJcrinstallFolderNameRegexp = request().getQueryString("sling.jcrinstall.folder.name.regexp");
        String slingJcrinstallFolderNameRegexp;
        if (valueslingJcrinstallFolderNameRegexp != null) {
            slingJcrinstallFolderNameRegexp = valueslingJcrinstallFolderNameRegexp;
        } else {
            slingJcrinstallFolderNameRegexp = null;
        }
        String valueslingJcrinstallFolderMaxDepth = request().getQueryString("sling.jcrinstall.folder.max.depth");
        Integer slingJcrinstallFolderMaxDepth;
        if (valueslingJcrinstallFolderMaxDepth != null) {
            slingJcrinstallFolderMaxDepth = Integer.parseInt(valueslingJcrinstallFolderMaxDepth);
        } else {
            slingJcrinstallFolderMaxDepth = null;
        }
        String[] slingJcrinstallSearchPathArray = request().queryString().get("sling.jcrinstall.search.path");
        List<String> slingJcrinstallSearchPathList = OpenAPIUtils.parametersToList("multi", slingJcrinstallSearchPathArray);
        List<String> slingJcrinstallSearchPath = new ArrayList<String>();
        for (String curParam : slingJcrinstallSearchPathList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                slingJcrinstallSearchPath.add(curParam);
            }
        }
        String valueslingJcrinstallNewConfigPath = request().getQueryString("sling.jcrinstall.new.config.path");
        String slingJcrinstallNewConfigPath;
        if (valueslingJcrinstallNewConfigPath != null) {
            slingJcrinstallNewConfigPath = valueslingJcrinstallNewConfigPath;
        } else {
            slingJcrinstallNewConfigPath = null;
        }
        String valueslingJcrinstallSignalPath = request().getQueryString("sling.jcrinstall.signal.path");
        String slingJcrinstallSignalPath;
        if (valueslingJcrinstallSignalPath != null) {
            slingJcrinstallSignalPath = valueslingJcrinstallSignalPath;
        } else {
            slingJcrinstallSignalPath = null;
        }
        String valueslingJcrinstallEnableWriteback = request().getQueryString("sling.jcrinstall.enable.writeback");
        Boolean slingJcrinstallEnableWriteback;
        if (valueslingJcrinstallEnableWriteback != null) {
            slingJcrinstallEnableWriteback = Boolean.valueOf(valueslingJcrinstallEnableWriteback);
        } else {
            slingJcrinstallEnableWriteback = null;
        }
        OrgApacheSlingInstallerProviderJcrImplJcrInstallerInfo obj = imp.orgApacheSlingInstallerProviderJcrImplJcrInstaller(post, apply, delete, action, $location, propertylist, handlerSchemes, slingJcrinstallFolderNameRegexp, slingJcrinstallFolderMaxDepth, slingJcrinstallSearchPath, slingJcrinstallNewConfigPath, slingJcrinstallSignalPath, slingJcrinstallEnableWriteback);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheSlingJcrBaseInternalLoginAdminWhitelist() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuewhitelistBypass = request().getQueryString("whitelist.bypass");
        Boolean whitelistBypass;
        if (valuewhitelistBypass != null) {
            whitelistBypass = Boolean.valueOf(valuewhitelistBypass);
        } else {
            whitelistBypass = null;
        }
        String valuewhitelistBundlesRegexp = request().getQueryString("whitelist.bundles.regexp");
        String whitelistBundlesRegexp;
        if (valuewhitelistBundlesRegexp != null) {
            whitelistBundlesRegexp = valuewhitelistBundlesRegexp;
        } else {
            whitelistBundlesRegexp = null;
        }
        OrgApacheSlingJcrBaseInternalLoginAdminWhitelistInfo obj = imp.orgApacheSlingJcrBaseInternalLoginAdminWhitelist(post, apply, delete, action, $location, propertylist, whitelistBypass, whitelistBundlesRegexp);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheSlingJcrBaseInternalLoginAdminWhitelistFragment() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuewhitelistName = request().getQueryString("whitelist.name");
        String whitelistName;
        if (valuewhitelistName != null) {
            whitelistName = valuewhitelistName;
        } else {
            whitelistName = null;
        }
        String[] whitelistBundlesArray = request().queryString().get("whitelist.bundles");
        List<String> whitelistBundlesList = OpenAPIUtils.parametersToList("multi", whitelistBundlesArray);
        List<String> whitelistBundles = new ArrayList<String>();
        for (String curParam : whitelistBundlesList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                whitelistBundles.add(curParam);
            }
        }
        OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentInfo obj = imp.orgApacheSlingJcrBaseInternalLoginAdminWhitelistFragment(post, apply, delete, action, $location, propertylist, whitelistName, whitelistBundles);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheSlingJcrDavexImplServletsSlingDavExServlet() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuealias = request().getQueryString("alias");
        String alias;
        if (valuealias != null) {
            alias = valuealias;
        } else {
            alias = null;
        }
        String valuedavCreateAbsoluteUri = request().getQueryString("dav.create-absolute-uri");
        Boolean davCreateAbsoluteUri;
        if (valuedavCreateAbsoluteUri != null) {
            davCreateAbsoluteUri = Boolean.valueOf(valuedavCreateAbsoluteUri);
        } else {
            davCreateAbsoluteUri = null;
        }
        String valuedavProtectedhandlers = request().getQueryString("dav.protectedhandlers");
        String davProtectedhandlers;
        if (valuedavProtectedhandlers != null) {
            davProtectedhandlers = valuedavProtectedhandlers;
        } else {
            davProtectedhandlers = null;
        }
        OrgApacheSlingJcrDavexImplServletsSlingDavExServletInfo obj = imp.orgApacheSlingJcrDavexImplServletsSlingDavExServlet(post, apply, delete, action, $location, propertylist, alias, davCreateAbsoluteUri, davProtectedhandlers);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheSlingJcrJackrabbitServerJndiRegistrationSupport() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuejavaNamingFactoryInitial = request().getQueryString("java.naming.factory.initial");
        String javaNamingFactoryInitial;
        if (valuejavaNamingFactoryInitial != null) {
            javaNamingFactoryInitial = valuejavaNamingFactoryInitial;
        } else {
            javaNamingFactoryInitial = null;
        }
        String valuejavaNamingProviderUrl = request().getQueryString("java.naming.provider.url");
        String javaNamingProviderUrl;
        if (valuejavaNamingProviderUrl != null) {
            javaNamingProviderUrl = valuejavaNamingProviderUrl;
        } else {
            javaNamingProviderUrl = null;
        }
        OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportInfo obj = imp.orgApacheSlingJcrJackrabbitServerJndiRegistrationSupport(post, apply, delete, action, $location, propertylist, javaNamingFactoryInitial, javaNamingProviderUrl);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheSlingJcrJackrabbitServerRmiRegistrationSupport() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueport = request().getQueryString("port");
        Integer port;
        if (valueport != null) {
            port = Integer.parseInt(valueport);
        } else {
            port = null;
        }
        OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportInfo obj = imp.orgApacheSlingJcrJackrabbitServerRmiRegistrationSupport(post, apply, delete, action, $location, propertylist, port);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheSlingJcrRepoinitImplRepositoryInitializer() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] referencesArray = request().queryString().get("references");
        List<String> referencesList = OpenAPIUtils.parametersToList("multi", referencesArray);
        List<String> references = new ArrayList<String>();
        for (String curParam : referencesList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                references.add(curParam);
            }
        }
        OrgApacheSlingJcrRepoinitImplRepositoryInitializerInfo obj = imp.orgApacheSlingJcrRepoinitImplRepositoryInitializer(post, apply, delete, action, $location, propertylist, references);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheSlingJcrRepoinitRepositoryInitializer() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] referencesArray = request().queryString().get("references");
        List<String> referencesList = OpenAPIUtils.parametersToList("multi", referencesArray);
        List<String> references = new ArrayList<String>();
        for (String curParam : referencesList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                references.add(curParam);
            }
        }
        String[] scriptsArray = request().queryString().get("scripts");
        List<String> scriptsList = OpenAPIUtils.parametersToList("multi", scriptsArray);
        List<String> scripts = new ArrayList<String>();
        for (String curParam : scriptsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                scripts.add(curParam);
            }
        }
        OrgApacheSlingJcrRepoinitRepositoryInitializerInfo obj = imp.orgApacheSlingJcrRepoinitRepositoryInitializer(post, apply, delete, action, $location, propertylist, references, scripts);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] resourceResolverSearchpathArray = request().queryString().get("resource.resolver.searchpath");
        List<String> resourceResolverSearchpathList = OpenAPIUtils.parametersToList("multi", resourceResolverSearchpathArray);
        List<String> resourceResolverSearchpath = new ArrayList<String>();
        for (String curParam : resourceResolverSearchpathList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                resourceResolverSearchpath.add(curParam);
            }
        }
        String valueresourceResolverManglenamespaces = request().getQueryString("resource.resolver.manglenamespaces");
        Boolean resourceResolverManglenamespaces;
        if (valueresourceResolverManglenamespaces != null) {
            resourceResolverManglenamespaces = Boolean.valueOf(valueresourceResolverManglenamespaces);
        } else {
            resourceResolverManglenamespaces = null;
        }
        String valueresourceResolverAllowDirect = request().getQueryString("resource.resolver.allowDirect");
        Boolean resourceResolverAllowDirect;
        if (valueresourceResolverAllowDirect != null) {
            resourceResolverAllowDirect = Boolean.valueOf(valueresourceResolverAllowDirect);
        } else {
            resourceResolverAllowDirect = null;
        }
        String[] resourceResolverRequiredProvidersArray = request().queryString().get("resource.resolver.required.providers");
        List<String> resourceResolverRequiredProvidersList = OpenAPIUtils.parametersToList("multi", resourceResolverRequiredProvidersArray);
        List<String> resourceResolverRequiredProviders = new ArrayList<String>();
        for (String curParam : resourceResolverRequiredProvidersList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                resourceResolverRequiredProviders.add(curParam);
            }
        }
        String[] resourceResolverRequiredProvidernamesArray = request().queryString().get("resource.resolver.required.providernames");
        List<String> resourceResolverRequiredProvidernamesList = OpenAPIUtils.parametersToList("multi", resourceResolverRequiredProvidernamesArray);
        List<String> resourceResolverRequiredProvidernames = new ArrayList<String>();
        for (String curParam : resourceResolverRequiredProvidernamesList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                resourceResolverRequiredProvidernames.add(curParam);
            }
        }
        String[] resourceResolverVirtualArray = request().queryString().get("resource.resolver.virtual");
        List<String> resourceResolverVirtualList = OpenAPIUtils.parametersToList("multi", resourceResolverVirtualArray);
        List<String> resourceResolverVirtual = new ArrayList<String>();
        for (String curParam : resourceResolverVirtualList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                resourceResolverVirtual.add(curParam);
            }
        }
        String[] resourceResolverMappingArray = request().queryString().get("resource.resolver.mapping");
        List<String> resourceResolverMappingList = OpenAPIUtils.parametersToList("multi", resourceResolverMappingArray);
        List<String> resourceResolverMapping = new ArrayList<String>();
        for (String curParam : resourceResolverMappingList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                resourceResolverMapping.add(curParam);
            }
        }
        String valueresourceResolverMapLocation = request().getQueryString("resource.resolver.map.location");
        String resourceResolverMapLocation;
        if (valueresourceResolverMapLocation != null) {
            resourceResolverMapLocation = valueresourceResolverMapLocation;
        } else {
            resourceResolverMapLocation = null;
        }
        String[] resourceResolverMapObservationArray = request().queryString().get("resource.resolver.map.observation");
        List<String> resourceResolverMapObservationList = OpenAPIUtils.parametersToList("multi", resourceResolverMapObservationArray);
        List<String> resourceResolverMapObservation = new ArrayList<String>();
        for (String curParam : resourceResolverMapObservationList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                resourceResolverMapObservation.add(curParam);
            }
        }
        String valueresourceResolverDefaultVanityRedirectStatus = request().getQueryString("resource.resolver.default.vanity.redirect.status");
        Integer resourceResolverDefaultVanityRedirectStatus;
        if (valueresourceResolverDefaultVanityRedirectStatus != null) {
            resourceResolverDefaultVanityRedirectStatus = Integer.parseInt(valueresourceResolverDefaultVanityRedirectStatus);
        } else {
            resourceResolverDefaultVanityRedirectStatus = null;
        }
        String valueresourceResolverEnableVanitypath = request().getQueryString("resource.resolver.enable.vanitypath");
        Boolean resourceResolverEnableVanitypath;
        if (valueresourceResolverEnableVanitypath != null) {
            resourceResolverEnableVanitypath = Boolean.valueOf(valueresourceResolverEnableVanitypath);
        } else {
            resourceResolverEnableVanitypath = null;
        }
        String valueresourceResolverVanitypathMaxEntries = request().getQueryString("resource.resolver.vanitypath.maxEntries");
        Integer resourceResolverVanitypathMaxEntries;
        if (valueresourceResolverVanitypathMaxEntries != null) {
            resourceResolverVanitypathMaxEntries = Integer.parseInt(valueresourceResolverVanitypathMaxEntries);
        } else {
            resourceResolverVanitypathMaxEntries = null;
        }
        String valueresourceResolverVanitypathMaxEntriesStartup = request().getQueryString("resource.resolver.vanitypath.maxEntries.startup");
        Boolean resourceResolverVanitypathMaxEntriesStartup;
        if (valueresourceResolverVanitypathMaxEntriesStartup != null) {
            resourceResolverVanitypathMaxEntriesStartup = Boolean.valueOf(valueresourceResolverVanitypathMaxEntriesStartup);
        } else {
            resourceResolverVanitypathMaxEntriesStartup = null;
        }
        String valueresourceResolverVanitypathBloomfilterMaxBytes = request().getQueryString("resource.resolver.vanitypath.bloomfilter.maxBytes");
        Integer resourceResolverVanitypathBloomfilterMaxBytes;
        if (valueresourceResolverVanitypathBloomfilterMaxBytes != null) {
            resourceResolverVanitypathBloomfilterMaxBytes = Integer.parseInt(valueresourceResolverVanitypathBloomfilterMaxBytes);
        } else {
            resourceResolverVanitypathBloomfilterMaxBytes = null;
        }
        String valueresourceResolverOptimizeAliasResolution = request().getQueryString("resource.resolver.optimize.alias.resolution");
        Boolean resourceResolverOptimizeAliasResolution;
        if (valueresourceResolverOptimizeAliasResolution != null) {
            resourceResolverOptimizeAliasResolution = Boolean.valueOf(valueresourceResolverOptimizeAliasResolution);
        } else {
            resourceResolverOptimizeAliasResolution = null;
        }
        String[] resourceResolverVanitypathWhitelistArray = request().queryString().get("resource.resolver.vanitypath.whitelist");
        List<String> resourceResolverVanitypathWhitelistList = OpenAPIUtils.parametersToList("multi", resourceResolverVanitypathWhitelistArray);
        List<String> resourceResolverVanitypathWhitelist = new ArrayList<String>();
        for (String curParam : resourceResolverVanitypathWhitelistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                resourceResolverVanitypathWhitelist.add(curParam);
            }
        }
        String[] resourceResolverVanitypathBlacklistArray = request().queryString().get("resource.resolver.vanitypath.blacklist");
        List<String> resourceResolverVanitypathBlacklistList = OpenAPIUtils.parametersToList("multi", resourceResolverVanitypathBlacklistArray);
        List<String> resourceResolverVanitypathBlacklist = new ArrayList<String>();
        for (String curParam : resourceResolverVanitypathBlacklistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                resourceResolverVanitypathBlacklist.add(curParam);
            }
        }
        String valueresourceResolverVanityPrecedence = request().getQueryString("resource.resolver.vanity.precedence");
        Boolean resourceResolverVanityPrecedence;
        if (valueresourceResolverVanityPrecedence != null) {
            resourceResolverVanityPrecedence = Boolean.valueOf(valueresourceResolverVanityPrecedence);
        } else {
            resourceResolverVanityPrecedence = null;
        }
        String valueresourceResolverProviderhandlingParanoid = request().getQueryString("resource.resolver.providerhandling.paranoid");
        Boolean resourceResolverProviderhandlingParanoid;
        if (valueresourceResolverProviderhandlingParanoid != null) {
            resourceResolverProviderhandlingParanoid = Boolean.valueOf(valueresourceResolverProviderhandlingParanoid);
        } else {
            resourceResolverProviderhandlingParanoid = null;
        }
        String valueresourceResolverLogClosing = request().getQueryString("resource.resolver.log.closing");
        Boolean resourceResolverLogClosing;
        if (valueresourceResolverLogClosing != null) {
            resourceResolverLogClosing = Boolean.valueOf(valueresourceResolverLogClosing);
        } else {
            resourceResolverLogClosing = null;
        }
        String valueresourceResolverLogUnclosed = request().getQueryString("resource.resolver.log.unclosed");
        Boolean resourceResolverLogUnclosed;
        if (valueresourceResolverLogUnclosed != null) {
            resourceResolverLogUnclosed = Boolean.valueOf(valueresourceResolverLogUnclosed);
        } else {
            resourceResolverLogUnclosed = null;
        }
        OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplInfo obj = imp.orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImpl(post, apply, delete, action, $location, propertylist, resourceResolverSearchpath, resourceResolverManglenamespaces, resourceResolverAllowDirect, resourceResolverRequiredProviders, resourceResolverRequiredProvidernames, resourceResolverVirtual, resourceResolverMapping, resourceResolverMapLocation, resourceResolverMapObservation, resourceResolverDefaultVanityRedirectStatus, resourceResolverEnableVanitypath, resourceResolverVanitypathMaxEntries, resourceResolverVanitypathMaxEntriesStartup, resourceResolverVanitypathBloomfilterMaxBytes, resourceResolverOptimizeAliasResolution, resourceResolverVanitypathWhitelist, resourceResolverVanitypathBlacklist, resourceResolverVanityPrecedence, resourceResolverProviderhandlingParanoid, resourceResolverLogClosing, resourceResolverLogUnclosed);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheSlingJcrResourceInternalJcrSystemUserValidator() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueallowOnlySystemUser = request().getQueryString("allow.only.system.user");
        Boolean allowOnlySystemUser;
        if (valueallowOnlySystemUser != null) {
            allowOnlySystemUser = Boolean.valueOf(valueallowOnlySystemUser);
        } else {
            allowOnlySystemUser = null;
        }
        OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorInfo obj = imp.orgApacheSlingJcrResourceInternalJcrSystemUserValidator(post, apply, delete, action, $location, propertylist, allowOnlySystemUser);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheSlingJcrResourcesecurityImplResourceAccessGateFactory() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuepath = request().getQueryString("path");
        String path;
        if (valuepath != null) {
            path = valuepath;
        } else {
            path = null;
        }
        String valuecheckpathPrefix = request().getQueryString("checkpath.prefix");
        String checkpathPrefix;
        if (valuecheckpathPrefix != null) {
            checkpathPrefix = valuecheckpathPrefix;
        } else {
            checkpathPrefix = null;
        }
        String valuejcrPath = request().getQueryString("jcrPath");
        String jcrPath;
        if (valuejcrPath != null) {
            jcrPath = valuejcrPath;
        } else {
            jcrPath = null;
        }
        OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryInfo obj = imp.orgApacheSlingJcrResourcesecurityImplResourceAccessGateFactory(post, apply, delete, action, $location, propertylist, path, checkpathPrefix, jcrPath);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheSlingJcrWebdavImplHandlerDefaultHandlerService() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueserviceRanking = request().getQueryString("service.ranking");
        Integer serviceRanking;
        if (valueserviceRanking != null) {
            serviceRanking = Integer.parseInt(valueserviceRanking);
        } else {
            serviceRanking = null;
        }
        String valuetypeCollections = request().getQueryString("type.collections");
        String typeCollections;
        if (valuetypeCollections != null) {
            typeCollections = valuetypeCollections;
        } else {
            typeCollections = null;
        }
        String valuetypeNoncollections = request().getQueryString("type.noncollections");
        String typeNoncollections;
        if (valuetypeNoncollections != null) {
            typeNoncollections = valuetypeNoncollections;
        } else {
            typeNoncollections = null;
        }
        String valuetypeContent = request().getQueryString("type.content");
        String typeContent;
        if (valuetypeContent != null) {
            typeContent = valuetypeContent;
        } else {
            typeContent = null;
        }
        OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceInfo obj = imp.orgApacheSlingJcrWebdavImplHandlerDefaultHandlerService(post, apply, delete, action, $location, propertylist, serviceRanking, typeCollections, typeNoncollections, typeContent);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServic() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueserviceRanking = request().getQueryString("service.ranking");
        Integer serviceRanking;
        if (valueserviceRanking != null) {
            serviceRanking = Integer.parseInt(valueserviceRanking);
        } else {
            serviceRanking = null;
        }
        OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicInfo obj = imp.orgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServic(post, apply, delete, action, $location, propertylist, serviceRanking);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheSlingJcrWebdavImplServletsSimpleWebDavServlet() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuedavRoot = request().getQueryString("dav.root");
        String davRoot;
        if (valuedavRoot != null) {
            davRoot = valuedavRoot;
        } else {
            davRoot = null;
        }
        String valuedavCreateAbsoluteUri = request().getQueryString("dav.create-absolute-uri");
        Boolean davCreateAbsoluteUri;
        if (valuedavCreateAbsoluteUri != null) {
            davCreateAbsoluteUri = Boolean.valueOf(valuedavCreateAbsoluteUri);
        } else {
            davCreateAbsoluteUri = null;
        }
        String valuedavRealm = request().getQueryString("dav.realm");
        String davRealm;
        if (valuedavRealm != null) {
            davRealm = valuedavRealm;
        } else {
            davRealm = null;
        }
        String[] collectionTypesArray = request().queryString().get("collection.types");
        List<String> collectionTypesList = OpenAPIUtils.parametersToList("multi", collectionTypesArray);
        List<String> collectionTypes = new ArrayList<String>();
        for (String curParam : collectionTypesList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                collectionTypes.add(curParam);
            }
        }
        String[] filterPrefixesArray = request().queryString().get("filter.prefixes");
        List<String> filterPrefixesList = OpenAPIUtils.parametersToList("multi", filterPrefixesArray);
        List<String> filterPrefixes = new ArrayList<String>();
        for (String curParam : filterPrefixesList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                filterPrefixes.add(curParam);
            }
        }
        String valuefilterTypes = request().getQueryString("filter.types");
        String filterTypes;
        if (valuefilterTypes != null) {
            filterTypes = valuefilterTypes;
        } else {
            filterTypes = null;
        }
        String valuefilterUris = request().getQueryString("filter.uris");
        String filterUris;
        if (valuefilterUris != null) {
            filterUris = valuefilterUris;
        } else {
            filterUris = null;
        }
        String valuetypeCollections = request().getQueryString("type.collections");
        String typeCollections;
        if (valuetypeCollections != null) {
            typeCollections = valuetypeCollections;
        } else {
            typeCollections = null;
        }
        String valuetypeNoncollections = request().getQueryString("type.noncollections");
        String typeNoncollections;
        if (valuetypeNoncollections != null) {
            typeNoncollections = valuetypeNoncollections;
        } else {
            typeNoncollections = null;
        }
        String valuetypeContent = request().getQueryString("type.content");
        String typeContent;
        if (valuetypeContent != null) {
            typeContent = valuetypeContent;
        } else {
            typeContent = null;
        }
        OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletInfo obj = imp.orgApacheSlingJcrWebdavImplServletsSimpleWebDavServlet(post, apply, delete, action, $location, propertylist, davRoot, davCreateAbsoluteUri, davRealm, collectionTypes, filterPrefixes, filterTypes, filterUris, typeCollections, typeNoncollections, typeContent);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheSlingJmxProviderImplJMXResourceProvider() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueproviderRoots = request().getQueryString("provider.roots");
        String providerRoots;
        if (valueproviderRoots != null) {
            providerRoots = valueproviderRoots;
        } else {
            providerRoots = null;
        }
        OrgApacheSlingJmxProviderImplJMXResourceProviderInfo obj = imp.orgApacheSlingJmxProviderImplJMXResourceProvider(post, apply, delete, action, $location, propertylist, providerRoots);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheSlingModelsImplModelAdapterFactory() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueosgiHttpWhiteboardListener = request().getQueryString("osgi.http.whiteboard.listener");
        String osgiHttpWhiteboardListener;
        if (valueosgiHttpWhiteboardListener != null) {
            osgiHttpWhiteboardListener = valueosgiHttpWhiteboardListener;
        } else {
            osgiHttpWhiteboardListener = null;
        }
        String valueosgiHttpWhiteboardContextSelect = request().getQueryString("osgi.http.whiteboard.context.select");
        String osgiHttpWhiteboardContextSelect;
        if (valueosgiHttpWhiteboardContextSelect != null) {
            osgiHttpWhiteboardContextSelect = valueosgiHttpWhiteboardContextSelect;
        } else {
            osgiHttpWhiteboardContextSelect = null;
        }
        String valuemaxRecursionDepth = request().getQueryString("max.recursion.depth");
        Integer maxRecursionDepth;
        if (valuemaxRecursionDepth != null) {
            maxRecursionDepth = Integer.parseInt(valuemaxRecursionDepth);
        } else {
            maxRecursionDepth = null;
        }
        String valuecleanupJobPeriod = request().getQueryString("cleanup.job.period");
        Integer cleanupJobPeriod;
        if (valuecleanupJobPeriod != null) {
            cleanupJobPeriod = Integer.parseInt(valuecleanupJobPeriod);
        } else {
            cleanupJobPeriod = null;
        }
        OrgApacheSlingModelsImplModelAdapterFactoryInfo obj = imp.orgApacheSlingModelsImplModelAdapterFactory(post, apply, delete, action, $location, propertylist, osgiHttpWhiteboardListener, osgiHttpWhiteboardContextSelect, maxRecursionDepth, cleanupJobPeriod);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheSlingModelsJacksonexporterImplResourceModuleProvider() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuemaxRecursionLevels = request().getQueryString("max.recursion.levels");
        Integer maxRecursionLevels;
        if (valuemaxRecursionLevels != null) {
            maxRecursionLevels = Integer.parseInt(valuemaxRecursionLevels);
        } else {
            maxRecursionLevels = null;
        }
        OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderInfo obj = imp.orgApacheSlingModelsJacksonexporterImplResourceModuleProvider(post, apply, delete, action, $location, propertylist, maxRecursionLevels);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheSlingResourceInventoryImplResourceInventoryPrinterFacto() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuefelixInventoryPrinterName = request().getQueryString("felix.inventory.printer.name");
        String felixInventoryPrinterName;
        if (valuefelixInventoryPrinterName != null) {
            felixInventoryPrinterName = valuefelixInventoryPrinterName;
        } else {
            felixInventoryPrinterName = null;
        }
        String valuefelixInventoryPrinterTitle = request().getQueryString("felix.inventory.printer.title");
        String felixInventoryPrinterTitle;
        if (valuefelixInventoryPrinterTitle != null) {
            felixInventoryPrinterTitle = valuefelixInventoryPrinterTitle;
        } else {
            felixInventoryPrinterTitle = null;
        }
        String valuepath = request().getQueryString("path");
        String path;
        if (valuepath != null) {
            path = valuepath;
        } else {
            path = null;
        }
        OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoInfo obj = imp.orgApacheSlingResourceInventoryImplResourceInventoryPrinterFacto(post, apply, delete, action, $location, propertylist, felixInventoryPrinterName, felixInventoryPrinterTitle, path);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheSlingResourcemergerImplMergedResourceProviderFactory() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuemergeRoot = request().getQueryString("merge.root");
        String mergeRoot;
        if (valuemergeRoot != null) {
            mergeRoot = valuemergeRoot;
        } else {
            mergeRoot = null;
        }
        String valuemergeReadOnly = request().getQueryString("merge.readOnly");
        Boolean mergeReadOnly;
        if (valuemergeReadOnly != null) {
            mergeReadOnly = Boolean.valueOf(valuemergeReadOnly);
        } else {
            mergeReadOnly = null;
        }
        OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryInfo obj = imp.orgApacheSlingResourcemergerImplMergedResourceProviderFactory(post, apply, delete, action, $location, propertylist, mergeRoot, mergeReadOnly);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheSlingResourcemergerPickerOverriding() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuemergeRoot = request().getQueryString("merge.root");
        String mergeRoot;
        if (valuemergeRoot != null) {
            mergeRoot = valuemergeRoot;
        } else {
            mergeRoot = null;
        }
        String valuemergeReadOnly = request().getQueryString("merge.readOnly");
        Boolean mergeReadOnly;
        if (valuemergeReadOnly != null) {
            mergeReadOnly = Boolean.valueOf(valuemergeReadOnly);
        } else {
            mergeReadOnly = null;
        }
        OrgApacheSlingResourcemergerPickerOverridingInfo obj = imp.orgApacheSlingResourcemergerPickerOverriding(post, apply, delete, action, $location, propertylist, mergeRoot, mergeReadOnly);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheSlingScriptingCoreImplScriptCacheImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueorgApacheSlingScriptingCacheSize = request().getQueryString("org.apache.sling.scripting.cache.size");
        Integer orgApacheSlingScriptingCacheSize;
        if (valueorgApacheSlingScriptingCacheSize != null) {
            orgApacheSlingScriptingCacheSize = Integer.parseInt(valueorgApacheSlingScriptingCacheSize);
        } else {
            orgApacheSlingScriptingCacheSize = null;
        }
        String[] orgApacheSlingScriptingCacheAdditionalExtensionsArray = request().queryString().get("org.apache.sling.scripting.cache.additional_extensions");
        List<String> orgApacheSlingScriptingCacheAdditionalExtensionsList = OpenAPIUtils.parametersToList("multi", orgApacheSlingScriptingCacheAdditionalExtensionsArray);
        List<String> orgApacheSlingScriptingCacheAdditionalExtensions = new ArrayList<String>();
        for (String curParam : orgApacheSlingScriptingCacheAdditionalExtensionsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                orgApacheSlingScriptingCacheAdditionalExtensions.add(curParam);
            }
        }
        OrgApacheSlingScriptingCoreImplScriptCacheImplInfo obj = imp.orgApacheSlingScriptingCoreImplScriptCacheImpl(post, apply, delete, action, $location, propertylist, orgApacheSlingScriptingCacheSize, orgApacheSlingScriptingCacheAdditionalExtensions);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheSlingScriptingCoreImplScriptingResourceResolverProvider() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuelogStacktraceOnclose = request().getQueryString("log.stacktrace.onclose");
        Boolean logStacktraceOnclose;
        if (valuelogStacktraceOnclose != null) {
            logStacktraceOnclose = Boolean.valueOf(valuelogStacktraceOnclose);
        } else {
            logStacktraceOnclose = null;
        }
        OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderInfo obj = imp.orgApacheSlingScriptingCoreImplScriptingResourceResolverProvider(post, apply, delete, action, $location, propertylist, logStacktraceOnclose);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheSlingScriptingJavaImplJavaScriptEngineFactory() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuejavaClassdebuginfo = request().getQueryString("java.classdebuginfo");
        Boolean javaClassdebuginfo;
        if (valuejavaClassdebuginfo != null) {
            javaClassdebuginfo = Boolean.valueOf(valuejavaClassdebuginfo);
        } else {
            javaClassdebuginfo = null;
        }
        String valuejavaJavaEncoding = request().getQueryString("java.javaEncoding");
        String javaJavaEncoding;
        if (valuejavaJavaEncoding != null) {
            javaJavaEncoding = valuejavaJavaEncoding;
        } else {
            javaJavaEncoding = null;
        }
        String valuejavaCompilerSourceVM = request().getQueryString("java.compilerSourceVM");
        String javaCompilerSourceVM;
        if (valuejavaCompilerSourceVM != null) {
            javaCompilerSourceVM = valuejavaCompilerSourceVM;
        } else {
            javaCompilerSourceVM = null;
        }
        String valuejavaCompilerTargetVM = request().getQueryString("java.compilerTargetVM");
        String javaCompilerTargetVM;
        if (valuejavaCompilerTargetVM != null) {
            javaCompilerTargetVM = valuejavaCompilerTargetVM;
        } else {
            javaCompilerTargetVM = null;
        }
        OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryInfo obj = imp.orgApacheSlingScriptingJavaImplJavaScriptEngineFactory(post, apply, delete, action, $location, propertylist, javaClassdebuginfo, javaJavaEncoding, javaCompilerSourceVM, javaCompilerTargetVM);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFa() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueorgApacheSlingScriptingJavascriptRhinoOptLevel = request().getQueryString("org.apache.sling.scripting.javascript.rhino.optLevel");
        Integer orgApacheSlingScriptingJavascriptRhinoOptLevel;
        if (valueorgApacheSlingScriptingJavascriptRhinoOptLevel != null) {
            orgApacheSlingScriptingJavascriptRhinoOptLevel = Integer.parseInt(valueorgApacheSlingScriptingJavascriptRhinoOptLevel);
        } else {
            orgApacheSlingScriptingJavascriptRhinoOptLevel = null;
        }
        OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaInfo obj = imp.orgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFa(post, apply, delete, action, $location, propertylist, orgApacheSlingScriptingJavascriptRhinoOptLevel);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheSlingScriptingJspJspScriptEngineFactory() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuejasperCompilerTargetVM = request().getQueryString("jasper.compilerTargetVM");
        String jasperCompilerTargetVM;
        if (valuejasperCompilerTargetVM != null) {
            jasperCompilerTargetVM = valuejasperCompilerTargetVM;
        } else {
            jasperCompilerTargetVM = null;
        }
        String valuejasperCompilerSourceVM = request().getQueryString("jasper.compilerSourceVM");
        String jasperCompilerSourceVM;
        if (valuejasperCompilerSourceVM != null) {
            jasperCompilerSourceVM = valuejasperCompilerSourceVM;
        } else {
            jasperCompilerSourceVM = null;
        }
        String valuejasperClassdebuginfo = request().getQueryString("jasper.classdebuginfo");
        Boolean jasperClassdebuginfo;
        if (valuejasperClassdebuginfo != null) {
            jasperClassdebuginfo = Boolean.valueOf(valuejasperClassdebuginfo);
        } else {
            jasperClassdebuginfo = null;
        }
        String valuejasperEnablePooling = request().getQueryString("jasper.enablePooling");
        Boolean jasperEnablePooling;
        if (valuejasperEnablePooling != null) {
            jasperEnablePooling = Boolean.valueOf(valuejasperEnablePooling);
        } else {
            jasperEnablePooling = null;
        }
        String valuejasperIeClassId = request().getQueryString("jasper.ieClassId");
        String jasperIeClassId;
        if (valuejasperIeClassId != null) {
            jasperIeClassId = valuejasperIeClassId;
        } else {
            jasperIeClassId = null;
        }
        String valuejasperGenStringAsCharArray = request().getQueryString("jasper.genStringAsCharArray");
        Boolean jasperGenStringAsCharArray;
        if (valuejasperGenStringAsCharArray != null) {
            jasperGenStringAsCharArray = Boolean.valueOf(valuejasperGenStringAsCharArray);
        } else {
            jasperGenStringAsCharArray = null;
        }
        String valuejasperKeepgenerated = request().getQueryString("jasper.keepgenerated");
        Boolean jasperKeepgenerated;
        if (valuejasperKeepgenerated != null) {
            jasperKeepgenerated = Boolean.valueOf(valuejasperKeepgenerated);
        } else {
            jasperKeepgenerated = null;
        }
        String valuejasperMappedfile = request().getQueryString("jasper.mappedfile");
        Boolean jasperMappedfile;
        if (valuejasperMappedfile != null) {
            jasperMappedfile = Boolean.valueOf(valuejasperMappedfile);
        } else {
            jasperMappedfile = null;
        }
        String valuejasperTrimSpaces = request().getQueryString("jasper.trimSpaces");
        Boolean jasperTrimSpaces;
        if (valuejasperTrimSpaces != null) {
            jasperTrimSpaces = Boolean.valueOf(valuejasperTrimSpaces);
        } else {
            jasperTrimSpaces = null;
        }
        String valuejasperDisplaySourceFragments = request().getQueryString("jasper.displaySourceFragments");
        Boolean jasperDisplaySourceFragments;
        if (valuejasperDisplaySourceFragments != null) {
            jasperDisplaySourceFragments = Boolean.valueOf(valuejasperDisplaySourceFragments);
        } else {
            jasperDisplaySourceFragments = null;
        }
        String valuedefaultIsSession = request().getQueryString("default.is.session");
        Boolean defaultIsSession;
        if (valuedefaultIsSession != null) {
            defaultIsSession = Boolean.valueOf(valuedefaultIsSession);
        } else {
            defaultIsSession = null;
        }
        OrgApacheSlingScriptingJspJspScriptEngineFactoryInfo obj = imp.orgApacheSlingScriptingJspJspScriptEngineFactory(post, apply, delete, action, $location, propertylist, jasperCompilerTargetVM, jasperCompilerSourceVM, jasperClassdebuginfo, jasperEnablePooling, jasperIeClassId, jasperGenStringAsCharArray, jasperKeepgenerated, jasperMappedfile, jasperTrimSpaces, jasperDisplaySourceFragments, defaultIsSession);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProv() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] orgApacheSlingScriptingSightlyJsBindingsArray = request().queryString().get("org.apache.sling.scripting.sightly.js.bindings");
        List<String> orgApacheSlingScriptingSightlyJsBindingsList = OpenAPIUtils.parametersToList("multi", orgApacheSlingScriptingSightlyJsBindingsArray);
        List<String> orgApacheSlingScriptingSightlyJsBindings = new ArrayList<String>();
        for (String curParam : orgApacheSlingScriptingSightlyJsBindingsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                orgApacheSlingScriptingSightlyJsBindings.add(curParam);
            }
        }
        OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvInfo obj = imp.orgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProv(post, apply, delete, action, $location, propertylist, orgApacheSlingScriptingSightlyJsBindings);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheSlingSecurityImplContentDispositionFilter() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] slingContentDispositionPathsArray = request().queryString().get("sling.content.disposition.paths");
        List<String> slingContentDispositionPathsList = OpenAPIUtils.parametersToList("multi", slingContentDispositionPathsArray);
        List<String> slingContentDispositionPaths = new ArrayList<String>();
        for (String curParam : slingContentDispositionPathsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                slingContentDispositionPaths.add(curParam);
            }
        }
        String[] slingContentDispositionExcludedPathsArray = request().queryString().get("sling.content.disposition.excluded.paths");
        List<String> slingContentDispositionExcludedPathsList = OpenAPIUtils.parametersToList("multi", slingContentDispositionExcludedPathsArray);
        List<String> slingContentDispositionExcludedPaths = new ArrayList<String>();
        for (String curParam : slingContentDispositionExcludedPathsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                slingContentDispositionExcludedPaths.add(curParam);
            }
        }
        String valueslingContentDispositionAllPaths = request().getQueryString("sling.content.disposition.all.paths");
        Boolean slingContentDispositionAllPaths;
        if (valueslingContentDispositionAllPaths != null) {
            slingContentDispositionAllPaths = Boolean.valueOf(valueslingContentDispositionAllPaths);
        } else {
            slingContentDispositionAllPaths = null;
        }
        OrgApacheSlingSecurityImplContentDispositionFilterInfo obj = imp.orgApacheSlingSecurityImplContentDispositionFilter(post, apply, delete, action, $location, propertylist, slingContentDispositionPaths, slingContentDispositionExcludedPaths, slingContentDispositionAllPaths);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheSlingSecurityImplReferrerFilter() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueallowEmpty = request().getQueryString("allow.empty");
        Boolean allowEmpty;
        if (valueallowEmpty != null) {
            allowEmpty = Boolean.valueOf(valueallowEmpty);
        } else {
            allowEmpty = null;
        }
        String[] allowHostsArray = request().queryString().get("allow.hosts");
        List<String> allowHostsList = OpenAPIUtils.parametersToList("multi", allowHostsArray);
        List<String> allowHosts = new ArrayList<String>();
        for (String curParam : allowHostsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                allowHosts.add(curParam);
            }
        }
        String[] allowHostsRegexpArray = request().queryString().get("allow.hosts.regexp");
        List<String> allowHostsRegexpList = OpenAPIUtils.parametersToList("multi", allowHostsRegexpArray);
        List<String> allowHostsRegexp = new ArrayList<String>();
        for (String curParam : allowHostsRegexpList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                allowHostsRegexp.add(curParam);
            }
        }
        String[] filterMethodsArray = request().queryString().get("filter.methods");
        List<String> filterMethodsList = OpenAPIUtils.parametersToList("multi", filterMethodsArray);
        List<String> filterMethods = new ArrayList<String>();
        for (String curParam : filterMethodsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                filterMethods.add(curParam);
            }
        }
        String[] excludeAgentsRegexpArray = request().queryString().get("exclude.agents.regexp");
        List<String> excludeAgentsRegexpList = OpenAPIUtils.parametersToList("multi", excludeAgentsRegexpArray);
        List<String> excludeAgentsRegexp = new ArrayList<String>();
        for (String curParam : excludeAgentsRegexpList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                excludeAgentsRegexp.add(curParam);
            }
        }
        OrgApacheSlingSecurityImplReferrerFilterInfo obj = imp.orgApacheSlingSecurityImplReferrerFilter(post, apply, delete, action, $location, propertylist, allowEmpty, allowHosts, allowHostsRegexp, filterMethods, excludeAgentsRegexp);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheSlingServiceusermappingImplServiceUserMapperImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] userMappingArray = request().queryString().get("user.mapping");
        List<String> userMappingList = OpenAPIUtils.parametersToList("multi", userMappingArray);
        List<String> userMapping = new ArrayList<String>();
        for (String curParam : userMappingList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                userMapping.add(curParam);
            }
        }
        String valueuserDefault = request().getQueryString("user.default");
        String userDefault;
        if (valueuserDefault != null) {
            userDefault = valueuserDefault;
        } else {
            userDefault = null;
        }
        String valueuserEnableDefaultMapping = request().getQueryString("user.enable.default.mapping");
        Boolean userEnableDefaultMapping;
        if (valueuserEnableDefaultMapping != null) {
            userEnableDefaultMapping = Boolean.valueOf(valueuserEnableDefaultMapping);
        } else {
            userEnableDefaultMapping = null;
        }
        String valuerequireValidation = request().getQueryString("require.validation");
        Boolean requireValidation;
        if (valuerequireValidation != null) {
            requireValidation = Boolean.valueOf(valuerequireValidation);
        } else {
            requireValidation = null;
        }
        OrgApacheSlingServiceusermappingImplServiceUserMapperImplInfo obj = imp.orgApacheSlingServiceusermappingImplServiceUserMapperImpl(post, apply, delete, action, $location, propertylist, userMapping, userDefault, userEnableDefaultMapping, requireValidation);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheSlingServiceusermappingImplServiceUserMapperImplAmended() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueserviceRanking = request().getQueryString("service.ranking");
        Integer serviceRanking;
        if (valueserviceRanking != null) {
            serviceRanking = Integer.parseInt(valueserviceRanking);
        } else {
            serviceRanking = null;
        }
        String[] userMappingArray = request().queryString().get("user.mapping");
        List<String> userMappingList = OpenAPIUtils.parametersToList("multi", userMappingArray);
        List<String> userMapping = new ArrayList<String>();
        for (String curParam : userMappingList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                userMapping.add(curParam);
            }
        }
        OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedInfo obj = imp.orgApacheSlingServiceusermappingImplServiceUserMapperImplAmended(post, apply, delete, action, $location, propertylist, serviceRanking, userMapping);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheSlingServletsGetDefaultGetServlet() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] aliasesArray = request().queryString().get("aliases");
        List<String> aliasesList = OpenAPIUtils.parametersToList("multi", aliasesArray);
        List<String> aliases = new ArrayList<String>();
        for (String curParam : aliasesList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                aliases.add(curParam);
            }
        }
        String valueindex = request().getQueryString("index");
        Boolean index;
        if (valueindex != null) {
            index = Boolean.valueOf(valueindex);
        } else {
            index = null;
        }
        String[] indexFilesArray = request().queryString().get("index.files");
        List<String> indexFilesList = OpenAPIUtils.parametersToList("multi", indexFilesArray);
        List<String> indexFiles = new ArrayList<String>();
        for (String curParam : indexFilesList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                indexFiles.add(curParam);
            }
        }
        String valueenableHtml = request().getQueryString("enable.html");
        Boolean enableHtml;
        if (valueenableHtml != null) {
            enableHtml = Boolean.valueOf(valueenableHtml);
        } else {
            enableHtml = null;
        }
        String valueenableJson = request().getQueryString("enable.json");
        Boolean enableJson;
        if (valueenableJson != null) {
            enableJson = Boolean.valueOf(valueenableJson);
        } else {
            enableJson = null;
        }
        String valueenableTxt = request().getQueryString("enable.txt");
        Boolean enableTxt;
        if (valueenableTxt != null) {
            enableTxt = Boolean.valueOf(valueenableTxt);
        } else {
            enableTxt = null;
        }
        String valueenableXml = request().getQueryString("enable.xml");
        Boolean enableXml;
        if (valueenableXml != null) {
            enableXml = Boolean.valueOf(valueenableXml);
        } else {
            enableXml = null;
        }
        String valuejsonMaximumresults = request().getQueryString("json.maximumresults");
        Integer jsonMaximumresults;
        if (valuejsonMaximumresults != null) {
            jsonMaximumresults = Integer.parseInt(valuejsonMaximumresults);
        } else {
            jsonMaximumresults = null;
        }
        String valueecmaSuport = request().getQueryString("ecmaSuport");
        Boolean ecmaSuport;
        if (valueecmaSuport != null) {
            ecmaSuport = Boolean.valueOf(valueecmaSuport);
        } else {
            ecmaSuport = null;
        }
        OrgApacheSlingServletsGetDefaultGetServletInfo obj = imp.orgApacheSlingServletsGetDefaultGetServlet(post, apply, delete, action, $location, propertylist, aliases, index, indexFiles, enableHtml, enableJson, enableTxt, enableXml, jsonMaximumresults, ecmaSuport);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheSlingServletsGetImplVersionVersionInfoServlet() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] slingServletSelectorsArray = request().queryString().get("sling.servlet.selectors");
        List<String> slingServletSelectorsList = OpenAPIUtils.parametersToList("multi", slingServletSelectorsArray);
        List<String> slingServletSelectors = new ArrayList<String>();
        for (String curParam : slingServletSelectorsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                slingServletSelectors.add(curParam);
            }
        }
        String valueecmaSuport = request().getQueryString("ecmaSuport");
        Boolean ecmaSuport;
        if (valueecmaSuport != null) {
            ecmaSuport = Boolean.valueOf(valueecmaSuport);
        } else {
            ecmaSuport = null;
        }
        OrgApacheSlingServletsGetImplVersionVersionInfoServletInfo obj = imp.orgApacheSlingServletsGetImplVersionVersionInfoServlet(post, apply, delete, action, $location, propertylist, slingServletSelectors, ecmaSuport);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheSlingServletsPostImplHelperChunkCleanUpTask() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueschedulerExpression = request().getQueryString("scheduler.expression");
        String schedulerExpression;
        if (valueschedulerExpression != null) {
            schedulerExpression = valueschedulerExpression;
        } else {
            schedulerExpression = null;
        }
        String valueschedulerConcurrent = request().getQueryString("scheduler.concurrent");
        Boolean schedulerConcurrent;
        if (valueschedulerConcurrent != null) {
            schedulerConcurrent = Boolean.valueOf(valueschedulerConcurrent);
        } else {
            schedulerConcurrent = null;
        }
        String valuechunkCleanupAge = request().getQueryString("chunk.cleanup.age");
        Integer chunkCleanupAge;
        if (valuechunkCleanupAge != null) {
            chunkCleanupAge = Integer.parseInt(valuechunkCleanupAge);
        } else {
            chunkCleanupAge = null;
        }
        OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskInfo obj = imp.orgApacheSlingServletsPostImplHelperChunkCleanUpTask(post, apply, delete, action, $location, propertylist, schedulerExpression, schedulerConcurrent, chunkCleanupAge);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheSlingServletsPostImplSlingPostServlet() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] servletPostDateFormatsArray = request().queryString().get("servlet.post.dateFormats");
        List<String> servletPostDateFormatsList = OpenAPIUtils.parametersToList("multi", servletPostDateFormatsArray);
        List<String> servletPostDateFormats = new ArrayList<String>();
        for (String curParam : servletPostDateFormatsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                servletPostDateFormats.add(curParam);
            }
        }
        String[] servletPostNodeNameHintsArray = request().queryString().get("servlet.post.nodeNameHints");
        List<String> servletPostNodeNameHintsList = OpenAPIUtils.parametersToList("multi", servletPostNodeNameHintsArray);
        List<String> servletPostNodeNameHints = new ArrayList<String>();
        for (String curParam : servletPostNodeNameHintsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                servletPostNodeNameHints.add(curParam);
            }
        }
        String valueservletPostNodeNameMaxLength = request().getQueryString("servlet.post.nodeNameMaxLength");
        Integer servletPostNodeNameMaxLength;
        if (valueservletPostNodeNameMaxLength != null) {
            servletPostNodeNameMaxLength = Integer.parseInt(valueservletPostNodeNameMaxLength);
        } else {
            servletPostNodeNameMaxLength = null;
        }
        String valueservletPostCheckinNewVersionableNodes = request().getQueryString("servlet.post.checkinNewVersionableNodes");
        Boolean servletPostCheckinNewVersionableNodes;
        if (valueservletPostCheckinNewVersionableNodes != null) {
            servletPostCheckinNewVersionableNodes = Boolean.valueOf(valueservletPostCheckinNewVersionableNodes);
        } else {
            servletPostCheckinNewVersionableNodes = null;
        }
        String valueservletPostAutoCheckout = request().getQueryString("servlet.post.autoCheckout");
        Boolean servletPostAutoCheckout;
        if (valueservletPostAutoCheckout != null) {
            servletPostAutoCheckout = Boolean.valueOf(valueservletPostAutoCheckout);
        } else {
            servletPostAutoCheckout = null;
        }
        String valueservletPostAutoCheckin = request().getQueryString("servlet.post.autoCheckin");
        Boolean servletPostAutoCheckin;
        if (valueservletPostAutoCheckin != null) {
            servletPostAutoCheckin = Boolean.valueOf(valueservletPostAutoCheckin);
        } else {
            servletPostAutoCheckin = null;
        }
        String valueservletPostIgnorePattern = request().getQueryString("servlet.post.ignorePattern");
        String servletPostIgnorePattern;
        if (valueservletPostIgnorePattern != null) {
            servletPostIgnorePattern = valueservletPostIgnorePattern;
        } else {
            servletPostIgnorePattern = null;
        }
        OrgApacheSlingServletsPostImplSlingPostServletInfo obj = imp.orgApacheSlingServletsPostImplSlingPostServlet(post, apply, delete, action, $location, propertylist, servletPostDateFormats, servletPostNodeNameHints, servletPostNodeNameMaxLength, servletPostCheckinNewVersionableNodes, servletPostAutoCheckout, servletPostAutoCheckin, servletPostIgnorePattern);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheSlingServletsResolverSlingServletResolver() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueservletresolverServletRoot = request().getQueryString("servletresolver.servletRoot");
        String servletresolverServletRoot;
        if (valueservletresolverServletRoot != null) {
            servletresolverServletRoot = valueservletresolverServletRoot;
        } else {
            servletresolverServletRoot = null;
        }
        String valueservletresolverCacheSize = request().getQueryString("servletresolver.cacheSize");
        Integer servletresolverCacheSize;
        if (valueservletresolverCacheSize != null) {
            servletresolverCacheSize = Integer.parseInt(valueservletresolverCacheSize);
        } else {
            servletresolverCacheSize = null;
        }
        String[] servletresolverPathsArray = request().queryString().get("servletresolver.paths");
        List<String> servletresolverPathsList = OpenAPIUtils.parametersToList("multi", servletresolverPathsArray);
        List<String> servletresolverPaths = new ArrayList<String>();
        for (String curParam : servletresolverPathsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                servletresolverPaths.add(curParam);
            }
        }
        String[] servletresolverDefaultExtensionsArray = request().queryString().get("servletresolver.defaultExtensions");
        List<String> servletresolverDefaultExtensionsList = OpenAPIUtils.parametersToList("multi", servletresolverDefaultExtensionsArray);
        List<String> servletresolverDefaultExtensions = new ArrayList<String>();
        for (String curParam : servletresolverDefaultExtensionsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                servletresolverDefaultExtensions.add(curParam);
            }
        }
        OrgApacheSlingServletsResolverSlingServletResolverInfo obj = imp.orgApacheSlingServletsResolverSlingServletResolver(post, apply, delete, action, $location, propertylist, servletresolverServletRoot, servletresolverCacheSize, servletresolverPaths, servletresolverDefaultExtensions);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheSlingSettingsImplSlingSettingsServiceImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueslingName = request().getQueryString("sling.name");
        String slingName;
        if (valueslingName != null) {
            slingName = valueslingName;
        } else {
            slingName = null;
        }
        String valueslingDescription = request().getQueryString("sling.description");
        String slingDescription;
        if (valueslingDescription != null) {
            slingDescription = valueslingDescription;
        } else {
            slingDescription = null;
        }
        OrgApacheSlingSettingsImplSlingSettingsServiceImplInfo obj = imp.orgApacheSlingSettingsImplSlingSettingsServiceImpl(post, apply, delete, action, $location, propertylist, slingName, slingDescription);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheSlingStartupfilterImplStartupFilterImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valueactiveByDefault = request().getQueryString("active.by.default");
        Boolean activeByDefault;
        if (valueactiveByDefault != null) {
            activeByDefault = Boolean.valueOf(valueactiveByDefault);
        } else {
            activeByDefault = null;
        }
        String valuedefaultMessage = request().getQueryString("default.message");
        String defaultMessage;
        if (valuedefaultMessage != null) {
            defaultMessage = valuedefaultMessage;
        } else {
            defaultMessage = null;
        }
        OrgApacheSlingStartupfilterImplStartupFilterImplInfo obj = imp.orgApacheSlingStartupfilterImplStartupFilterImpl(post, apply, delete, action, $location, propertylist, activeByDefault, defaultMessage);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheSlingTenantInternalTenantProviderImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuetenantRoot = request().getQueryString("tenant.root");
        String tenantRoot;
        if (valuetenantRoot != null) {
            tenantRoot = valuetenantRoot;
        } else {
            tenantRoot = null;
        }
        String[] tenantPathMatcherArray = request().queryString().get("tenant.path.matcher");
        List<String> tenantPathMatcherList = OpenAPIUtils.parametersToList("multi", tenantPathMatcherArray);
        List<String> tenantPathMatcher = new ArrayList<String>();
        for (String curParam : tenantPathMatcherList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                tenantPathMatcher.add(curParam);
            }
        }
        OrgApacheSlingTenantInternalTenantProviderImplInfo obj = imp.orgApacheSlingTenantInternalTenantProviderImpl(post, apply, delete, action, $location, propertylist, tenantRoot, tenantPathMatcher);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheSlingTracerInternalLogTracer() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String[] tracerSetsArray = request().queryString().get("tracerSets");
        List<String> tracerSetsList = OpenAPIUtils.parametersToList("multi", tracerSetsArray);
        List<String> tracerSets = new ArrayList<String>();
        for (String curParam : tracerSetsList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                tracerSets.add(curParam);
            }
        }
        String valueenabled = request().getQueryString("enabled");
        Boolean enabled;
        if (valueenabled != null) {
            enabled = Boolean.valueOf(valueenabled);
        } else {
            enabled = null;
        }
        String valueservletEnabled = request().getQueryString("servletEnabled");
        Boolean servletEnabled;
        if (valueservletEnabled != null) {
            servletEnabled = Boolean.valueOf(valueservletEnabled);
        } else {
            servletEnabled = null;
        }
        String valuerecordingCacheSizeInMB = request().getQueryString("recordingCacheSizeInMB");
        Integer recordingCacheSizeInMB;
        if (valuerecordingCacheSizeInMB != null) {
            recordingCacheSizeInMB = Integer.parseInt(valuerecordingCacheSizeInMB);
        } else {
            recordingCacheSizeInMB = null;
        }
        String valuerecordingCacheDurationInSecs = request().getQueryString("recordingCacheDurationInSecs");
        Integer recordingCacheDurationInSecs;
        if (valuerecordingCacheDurationInSecs != null) {
            recordingCacheDurationInSecs = Integer.parseInt(valuerecordingCacheDurationInSecs);
        } else {
            recordingCacheDurationInSecs = null;
        }
        String valuerecordingCompressionEnabled = request().getQueryString("recordingCompressionEnabled");
        Boolean recordingCompressionEnabled;
        if (valuerecordingCompressionEnabled != null) {
            recordingCompressionEnabled = Boolean.valueOf(valuerecordingCompressionEnabled);
        } else {
            recordingCompressionEnabled = null;
        }
        String valuegzipResponse = request().getQueryString("gzipResponse");
        Boolean gzipResponse;
        if (valuegzipResponse != null) {
            gzipResponse = Boolean.valueOf(valuegzipResponse);
        } else {
            gzipResponse = null;
        }
        OrgApacheSlingTracerInternalLogTracerInfo obj = imp.orgApacheSlingTracerInternalLogTracer(post, apply, delete, action, $location, propertylist, tracerSets, enabled, servletEnabled, recordingCacheSizeInMB, recordingCacheDurationInSecs, recordingCompressionEnabled, gzipResponse);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }

    @ApiAction
    public Result orgApacheSlingXssImplXSSFilterImpl() throws Exception {
        String valuepost = request().getQueryString("post");
        Boolean post;
        if (valuepost != null) {
            post = Boolean.valueOf(valuepost);
        } else {
            post = null;
        }
        String valueapply = request().getQueryString("apply");
        Boolean apply;
        if (valueapply != null) {
            apply = Boolean.valueOf(valueapply);
        } else {
            apply = null;
        }
        String valuedelete = request().getQueryString("delete");
        Boolean delete;
        if (valuedelete != null) {
            delete = Boolean.valueOf(valuedelete);
        } else {
            delete = null;
        }
        String valueaction = request().getQueryString("action");
        String action;
        if (valueaction != null) {
            action = valueaction;
        } else {
            action = null;
        }
        String value$location = request().getQueryString("$location");
        String $location;
        if (value$location != null) {
            $location = value$location;
        } else {
            $location = null;
        }
        String[] propertylistArray = request().queryString().get("propertylist");
        List<String> propertylistList = OpenAPIUtils.parametersToList("csv", propertylistArray);
        List<String> propertylist = new ArrayList<String>();
        for (String curParam : propertylistList) {
            if (!curParam.isEmpty()) {
                //noinspection UseBulkOperation
                propertylist.add(curParam);
            }
        }
        String valuepolicyPath = request().getQueryString("policyPath");
        String policyPath;
        if (valuepolicyPath != null) {
            policyPath = valuepolicyPath;
        } else {
            policyPath = null;
        }
        OrgApacheSlingXssImplXSSFilterImplInfo obj = imp.orgApacheSlingXssImplXSSFilterImpl(post, apply, delete, action, $location, propertylist, policyPath);
        if (configuration.getBoolean("useOutputBeanValidation")) {
            OpenAPIUtils.validate(obj);
        }
        JsonNode result = mapper.valueToTree(obj);
        return ok(result);
    }
}
