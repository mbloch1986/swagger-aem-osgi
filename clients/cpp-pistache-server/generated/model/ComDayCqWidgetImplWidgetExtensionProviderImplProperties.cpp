/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ComDayCqWidgetImplWidgetExtensionProviderImplProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComDayCqWidgetImplWidgetExtensionProviderImplProperties::ComDayCqWidgetImplWidgetExtensionProviderImplProperties()
{
    m_Extendable_widgetsIsSet = false;
    m_Widgetextensionprovider_debugIsSet = false;
    
}

ComDayCqWidgetImplWidgetExtensionProviderImplProperties::~ComDayCqWidgetImplWidgetExtensionProviderImplProperties()
{
}

void ComDayCqWidgetImplWidgetExtensionProviderImplProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json ComDayCqWidgetImplWidgetExtensionProviderImplProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_Extendable_widgetsIsSet)
    {
        val["extendable.widgets"] = ModelBase::toJson(m_Extendable_widgets);
    }
    if(m_Widgetextensionprovider_debugIsSet)
    {
        val["widgetextensionprovider.debug"] = ModelBase::toJson(m_Widgetextensionprovider_debug);
    }
    

    return val;
}

void ComDayCqWidgetImplWidgetExtensionProviderImplProperties::fromJson(nlohmann::json& val)
{
    if(val.find("extendable.widgets") != val.end())
    {
        if(!val["extendable.widgets"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["extendable.widgets"]);
            setExtendableWidgets( newItem );
        }
        
    }
    if(val.find("widgetextensionprovider.debug") != val.end())
    {
        if(!val["widgetextensionprovider.debug"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["widgetextensionprovider.debug"]);
            setWidgetextensionproviderDebug( newItem );
        }
        
    }
    
}


ConfigNodePropertyArray ComDayCqWidgetImplWidgetExtensionProviderImplProperties::getExtendableWidgets() const
{
    return m_Extendable_widgets;
}
void ComDayCqWidgetImplWidgetExtensionProviderImplProperties::setExtendableWidgets(ConfigNodePropertyArray const& value)
{
    m_Extendable_widgets = value;
    m_Extendable_widgetsIsSet = true;
}
bool ComDayCqWidgetImplWidgetExtensionProviderImplProperties::extendableWidgetsIsSet() const
{
    return m_Extendable_widgetsIsSet;
}
void ComDayCqWidgetImplWidgetExtensionProviderImplProperties::unsetExtendable_widgets()
{
    m_Extendable_widgetsIsSet = false;
}
ConfigNodePropertyBoolean ComDayCqWidgetImplWidgetExtensionProviderImplProperties::getWidgetextensionproviderDebug() const
{
    return m_Widgetextensionprovider_debug;
}
void ComDayCqWidgetImplWidgetExtensionProviderImplProperties::setWidgetextensionproviderDebug(ConfigNodePropertyBoolean const& value)
{
    m_Widgetextensionprovider_debug = value;
    m_Widgetextensionprovider_debugIsSet = true;
}
bool ComDayCqWidgetImplWidgetExtensionProviderImplProperties::widgetextensionproviderDebugIsSet() const
{
    return m_Widgetextensionprovider_debugIsSet;
}
void ComDayCqWidgetImplWidgetExtensionProviderImplProperties::unsetWidgetextensionprovider_debug()
{
    m_Widgetextensionprovider_debugIsSet = false;
}

}
}
}
}

