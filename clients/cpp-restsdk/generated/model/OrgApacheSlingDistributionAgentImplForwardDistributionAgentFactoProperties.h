/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties_H_


#include "../ModelBase.h"

#include "ConfigNodePropertyBoolean.h"
#include "ConfigNodePropertyDropDown.h"
#include "ConfigNodePropertyInteger.h"
#include "ConfigNodePropertyArray.h"
#include "ConfigNodePropertyString.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties
    : public ModelBase
{
public:
    OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties();
    virtual ~OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getName() const;
    bool nameIsSet() const;
    void unsetName();
    void setName(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getTitle() const;
    bool titleIsSet() const;
    void unsetTitle();
    void setTitle(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getDetails() const;
    bool detailsIsSet() const;
    void unsetDetails();
    void setDetails(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getEnabled() const;
    bool enabledIsSet() const;
    void unsetEnabled();
    void setEnabled(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getServiceName() const;
    bool serviceNameIsSet() const;
    void unsetServiceName();
    void setServiceName(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyDropDown> getLogLevel() const;
    bool logLevelIsSet() const;
    void unsetLog_level();
    void setLogLevel(std::shared_ptr<ConfigNodePropertyDropDown> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getAllowedRoots() const;
    bool allowedRootsIsSet() const;
    void unsetAllowed_roots();
    void setAllowedRoots(std::shared_ptr<ConfigNodePropertyArray> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getQueueProcessingEnabled() const;
    bool queueProcessingEnabledIsSet() const;
    void unsetQueue_processing_enabled();
    void setQueueProcessingEnabled(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getPackageImporterEndpoints() const;
    bool packageImporterEndpointsIsSet() const;
    void unsetPackageImporter_endpoints();
    void setPackageImporterEndpoints(std::shared_ptr<ConfigNodePropertyArray> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getPassiveQueues() const;
    bool passiveQueuesIsSet() const;
    void unsetPassiveQueues();
    void setPassiveQueues(std::shared_ptr<ConfigNodePropertyArray> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getPriorityQueues() const;
    bool priorityQueuesIsSet() const;
    void unsetPriorityQueues();
    void setPriorityQueues(std::shared_ptr<ConfigNodePropertyArray> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyDropDown> getRetryStrategy() const;
    bool retryStrategyIsSet() const;
    void unsetRetry_strategy();
    void setRetryStrategy(std::shared_ptr<ConfigNodePropertyDropDown> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getRetryAttempts() const;
    bool retryAttemptsIsSet() const;
    void unsetRetry_attempts();
    void setRetryAttempts(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getRequestAuthorizationStrategyTarget() const;
    bool requestAuthorizationStrategyTargetIsSet() const;
    void unsetRequestAuthorizationStrategy_target();
    void setRequestAuthorizationStrategyTarget(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getTransportSecretProviderTarget() const;
    bool transportSecretProviderTargetIsSet() const;
    void unsetTransportSecretProvider_target();
    void setTransportSecretProviderTarget(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getPackageBuilderTarget() const;
    bool packageBuilderTargetIsSet() const;
    void unsetPackageBuilder_target();
    void setPackageBuilderTarget(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getTriggersTarget() const;
    bool triggersTargetIsSet() const;
    void unsetTriggers_target();
    void setTriggersTarget(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyDropDown> getQueueProvider() const;
    bool queueProviderIsSet() const;
    void unsetQueue_provider();
    void setQueueProvider(std::shared_ptr<ConfigNodePropertyDropDown> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getAsyncDelivery() const;
    bool asyncDeliveryIsSet() const;
    void unsetAsync_delivery();
    void setAsyncDelivery(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getHttpConnTimeout() const;
    bool httpConnTimeoutIsSet() const;
    void unsetHttp_conn_timeout();
    void setHttpConnTimeout(std::shared_ptr<ConfigNodePropertyInteger> value);

protected:
    std::shared_ptr<ConfigNodePropertyString> m_Name;
    bool m_NameIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Title;
    bool m_TitleIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Details;
    bool m_DetailsIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Enabled;
    bool m_EnabledIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_ServiceName;
    bool m_ServiceNameIsSet;
    std::shared_ptr<ConfigNodePropertyDropDown> m_Log_level;
    bool m_Log_levelIsSet;
    std::shared_ptr<ConfigNodePropertyArray> m_Allowed_roots;
    bool m_Allowed_rootsIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Queue_processing_enabled;
    bool m_Queue_processing_enabledIsSet;
    std::shared_ptr<ConfigNodePropertyArray> m_PackageImporter_endpoints;
    bool m_PackageImporter_endpointsIsSet;
    std::shared_ptr<ConfigNodePropertyArray> m_PassiveQueues;
    bool m_PassiveQueuesIsSet;
    std::shared_ptr<ConfigNodePropertyArray> m_PriorityQueues;
    bool m_PriorityQueuesIsSet;
    std::shared_ptr<ConfigNodePropertyDropDown> m_Retry_strategy;
    bool m_Retry_strategyIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_Retry_attempts;
    bool m_Retry_attemptsIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_RequestAuthorizationStrategy_target;
    bool m_RequestAuthorizationStrategy_targetIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_TransportSecretProvider_target;
    bool m_TransportSecretProvider_targetIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_PackageBuilder_target;
    bool m_PackageBuilder_targetIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Triggers_target;
    bool m_Triggers_targetIsSet;
    std::shared_ptr<ConfigNodePropertyDropDown> m_Queue_provider;
    bool m_Queue_providerIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Async_delivery;
    bool m_Async_deliveryIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_Http_conn_timeout;
    bool m_Http_conn_timeoutIsSet;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoProperties_H_ */
