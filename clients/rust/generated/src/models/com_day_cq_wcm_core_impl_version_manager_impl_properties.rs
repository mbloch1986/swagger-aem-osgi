/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComDayCqWcmCoreImplVersionManagerImplProperties {
  #[serde(rename = "versionmanager.createVersionOnActivation")]
  versionmanager_create_version_on_activation: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "versionmanager.purgingEnabled")]
  versionmanager_purging_enabled: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "versionmanager.purgePaths")]
  versionmanager_purge_paths: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "versionmanager.ivPaths")]
  versionmanager_iv_paths: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "versionmanager.maxAgeDays")]
  versionmanager_max_age_days: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "versionmanager.maxNumberVersions")]
  versionmanager_max_number_versions: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "versionmanager.minNumberVersions")]
  versionmanager_min_number_versions: Option<::models::ConfigNodePropertyInteger>
}

impl ComDayCqWcmCoreImplVersionManagerImplProperties {
  pub fn new() -> ComDayCqWcmCoreImplVersionManagerImplProperties {
    ComDayCqWcmCoreImplVersionManagerImplProperties {
      versionmanager_create_version_on_activation: None,
      versionmanager_purging_enabled: None,
      versionmanager_purge_paths: None,
      versionmanager_iv_paths: None,
      versionmanager_max_age_days: None,
      versionmanager_max_number_versions: None,
      versionmanager_min_number_versions: None
    }
  }

  pub fn set_versionmanager_create_version_on_activation(&mut self, versionmanager_create_version_on_activation: ::models::ConfigNodePropertyBoolean) {
    self.versionmanager_create_version_on_activation = Some(versionmanager_create_version_on_activation);
  }

  pub fn with_versionmanager_create_version_on_activation(mut self, versionmanager_create_version_on_activation: ::models::ConfigNodePropertyBoolean) -> ComDayCqWcmCoreImplVersionManagerImplProperties {
    self.versionmanager_create_version_on_activation = Some(versionmanager_create_version_on_activation);
    self
  }

  pub fn versionmanager_create_version_on_activation(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.versionmanager_create_version_on_activation.as_ref()
  }

  pub fn reset_versionmanager_create_version_on_activation(&mut self) {
    self.versionmanager_create_version_on_activation = None;
  }

  pub fn set_versionmanager_purging_enabled(&mut self, versionmanager_purging_enabled: ::models::ConfigNodePropertyBoolean) {
    self.versionmanager_purging_enabled = Some(versionmanager_purging_enabled);
  }

  pub fn with_versionmanager_purging_enabled(mut self, versionmanager_purging_enabled: ::models::ConfigNodePropertyBoolean) -> ComDayCqWcmCoreImplVersionManagerImplProperties {
    self.versionmanager_purging_enabled = Some(versionmanager_purging_enabled);
    self
  }

  pub fn versionmanager_purging_enabled(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.versionmanager_purging_enabled.as_ref()
  }

  pub fn reset_versionmanager_purging_enabled(&mut self) {
    self.versionmanager_purging_enabled = None;
  }

  pub fn set_versionmanager_purge_paths(&mut self, versionmanager_purge_paths: ::models::ConfigNodePropertyArray) {
    self.versionmanager_purge_paths = Some(versionmanager_purge_paths);
  }

  pub fn with_versionmanager_purge_paths(mut self, versionmanager_purge_paths: ::models::ConfigNodePropertyArray) -> ComDayCqWcmCoreImplVersionManagerImplProperties {
    self.versionmanager_purge_paths = Some(versionmanager_purge_paths);
    self
  }

  pub fn versionmanager_purge_paths(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.versionmanager_purge_paths.as_ref()
  }

  pub fn reset_versionmanager_purge_paths(&mut self) {
    self.versionmanager_purge_paths = None;
  }

  pub fn set_versionmanager_iv_paths(&mut self, versionmanager_iv_paths: ::models::ConfigNodePropertyArray) {
    self.versionmanager_iv_paths = Some(versionmanager_iv_paths);
  }

  pub fn with_versionmanager_iv_paths(mut self, versionmanager_iv_paths: ::models::ConfigNodePropertyArray) -> ComDayCqWcmCoreImplVersionManagerImplProperties {
    self.versionmanager_iv_paths = Some(versionmanager_iv_paths);
    self
  }

  pub fn versionmanager_iv_paths(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.versionmanager_iv_paths.as_ref()
  }

  pub fn reset_versionmanager_iv_paths(&mut self) {
    self.versionmanager_iv_paths = None;
  }

  pub fn set_versionmanager_max_age_days(&mut self, versionmanager_max_age_days: ::models::ConfigNodePropertyInteger) {
    self.versionmanager_max_age_days = Some(versionmanager_max_age_days);
  }

  pub fn with_versionmanager_max_age_days(mut self, versionmanager_max_age_days: ::models::ConfigNodePropertyInteger) -> ComDayCqWcmCoreImplVersionManagerImplProperties {
    self.versionmanager_max_age_days = Some(versionmanager_max_age_days);
    self
  }

  pub fn versionmanager_max_age_days(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.versionmanager_max_age_days.as_ref()
  }

  pub fn reset_versionmanager_max_age_days(&mut self) {
    self.versionmanager_max_age_days = None;
  }

  pub fn set_versionmanager_max_number_versions(&mut self, versionmanager_max_number_versions: ::models::ConfigNodePropertyInteger) {
    self.versionmanager_max_number_versions = Some(versionmanager_max_number_versions);
  }

  pub fn with_versionmanager_max_number_versions(mut self, versionmanager_max_number_versions: ::models::ConfigNodePropertyInteger) -> ComDayCqWcmCoreImplVersionManagerImplProperties {
    self.versionmanager_max_number_versions = Some(versionmanager_max_number_versions);
    self
  }

  pub fn versionmanager_max_number_versions(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.versionmanager_max_number_versions.as_ref()
  }

  pub fn reset_versionmanager_max_number_versions(&mut self) {
    self.versionmanager_max_number_versions = None;
  }

  pub fn set_versionmanager_min_number_versions(&mut self, versionmanager_min_number_versions: ::models::ConfigNodePropertyInteger) {
    self.versionmanager_min_number_versions = Some(versionmanager_min_number_versions);
  }

  pub fn with_versionmanager_min_number_versions(mut self, versionmanager_min_number_versions: ::models::ConfigNodePropertyInteger) -> ComDayCqWcmCoreImplVersionManagerImplProperties {
    self.versionmanager_min_number_versions = Some(versionmanager_min_number_versions);
    self
  }

  pub fn versionmanager_min_number_versions(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.versionmanager_min_number_versions.as_ref()
  }

  pub fn reset_versionmanager_min_number_versions(&mut self) {
    self.versionmanager_min_number_versions = None;
  }

}



