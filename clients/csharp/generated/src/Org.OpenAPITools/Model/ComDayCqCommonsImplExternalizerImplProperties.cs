/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ComDayCqCommonsImplExternalizerImplProperties
    /// </summary>
    [DataContract]
    public partial class ComDayCqCommonsImplExternalizerImplProperties :  IEquatable<ComDayCqCommonsImplExternalizerImplProperties>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ComDayCqCommonsImplExternalizerImplProperties" /> class.
        /// </summary>
        /// <param name="externalizerDomains">externalizerDomains.</param>
        /// <param name="externalizerHost">externalizerHost.</param>
        /// <param name="externalizerContextpath">externalizerContextpath.</param>
        /// <param name="externalizerEncodedpath">externalizerEncodedpath.</param>
        public ComDayCqCommonsImplExternalizerImplProperties(ConfigNodePropertyArray externalizerDomains = default(ConfigNodePropertyArray), ConfigNodePropertyString externalizerHost = default(ConfigNodePropertyString), ConfigNodePropertyString externalizerContextpath = default(ConfigNodePropertyString), ConfigNodePropertyBoolean externalizerEncodedpath = default(ConfigNodePropertyBoolean))
        {
            this.ExternalizerDomains = externalizerDomains;
            this.ExternalizerHost = externalizerHost;
            this.ExternalizerContextpath = externalizerContextpath;
            this.ExternalizerEncodedpath = externalizerEncodedpath;
        }
        
        /// <summary>
        /// Gets or Sets ExternalizerDomains
        /// </summary>
        [DataMember(Name="externalizer.domains", EmitDefaultValue=false)]
        public ConfigNodePropertyArray ExternalizerDomains { get; set; }

        /// <summary>
        /// Gets or Sets ExternalizerHost
        /// </summary>
        [DataMember(Name="externalizer.host", EmitDefaultValue=false)]
        public ConfigNodePropertyString ExternalizerHost { get; set; }

        /// <summary>
        /// Gets or Sets ExternalizerContextpath
        /// </summary>
        [DataMember(Name="externalizer.contextpath", EmitDefaultValue=false)]
        public ConfigNodePropertyString ExternalizerContextpath { get; set; }

        /// <summary>
        /// Gets or Sets ExternalizerEncodedpath
        /// </summary>
        [DataMember(Name="externalizer.encodedpath", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean ExternalizerEncodedpath { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ComDayCqCommonsImplExternalizerImplProperties {\n");
            sb.Append("  ExternalizerDomains: ").Append(ExternalizerDomains).Append("\n");
            sb.Append("  ExternalizerHost: ").Append(ExternalizerHost).Append("\n");
            sb.Append("  ExternalizerContextpath: ").Append(ExternalizerContextpath).Append("\n");
            sb.Append("  ExternalizerEncodedpath: ").Append(ExternalizerEncodedpath).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ComDayCqCommonsImplExternalizerImplProperties);
        }

        /// <summary>
        /// Returns true if ComDayCqCommonsImplExternalizerImplProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of ComDayCqCommonsImplExternalizerImplProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComDayCqCommonsImplExternalizerImplProperties input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ExternalizerDomains == input.ExternalizerDomains ||
                    (this.ExternalizerDomains != null &&
                    this.ExternalizerDomains.Equals(input.ExternalizerDomains))
                ) && 
                (
                    this.ExternalizerHost == input.ExternalizerHost ||
                    (this.ExternalizerHost != null &&
                    this.ExternalizerHost.Equals(input.ExternalizerHost))
                ) && 
                (
                    this.ExternalizerContextpath == input.ExternalizerContextpath ||
                    (this.ExternalizerContextpath != null &&
                    this.ExternalizerContextpath.Equals(input.ExternalizerContextpath))
                ) && 
                (
                    this.ExternalizerEncodedpath == input.ExternalizerEncodedpath ||
                    (this.ExternalizerEncodedpath != null &&
                    this.ExternalizerEncodedpath.Equals(input.ExternalizerEncodedpath))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ExternalizerDomains != null)
                    hashCode = hashCode * 59 + this.ExternalizerDomains.GetHashCode();
                if (this.ExternalizerHost != null)
                    hashCode = hashCode * 59 + this.ExternalizerHost.GetHashCode();
                if (this.ExternalizerContextpath != null)
                    hashCode = hashCode * 59 + this.ExternalizerContextpath.GetHashCode();
                if (this.ExternalizerEncodedpath != null)
                    hashCode = hashCode * 59 + this.ExternalizerEncodedpath.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
