/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIOrgApacheSlingCaconfigManagementImplConfigurationManagementSettiProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIOrgApacheSlingCaconfigManagementImplConfigurationManagementSettiProperties::OAIOrgApacheSlingCaconfigManagementImplConfigurationManagementSettiProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIOrgApacheSlingCaconfigManagementImplConfigurationManagementSettiProperties::OAIOrgApacheSlingCaconfigManagementImplConfigurationManagementSettiProperties() {
    init();
}

OAIOrgApacheSlingCaconfigManagementImplConfigurationManagementSettiProperties::~OAIOrgApacheSlingCaconfigManagementImplConfigurationManagementSettiProperties() {
    this->cleanup();
}

void
OAIOrgApacheSlingCaconfigManagementImplConfigurationManagementSettiProperties::init() {
    ignore_property_name_regex = new OAIConfigNodePropertyArray();
    m_ignore_property_name_regex_isSet = false;
    config_collection_properties_resource_names = new OAIConfigNodePropertyArray();
    m_config_collection_properties_resource_names_isSet = false;
}

void
OAIOrgApacheSlingCaconfigManagementImplConfigurationManagementSettiProperties::cleanup() {
    if(ignore_property_name_regex != nullptr) { 
        delete ignore_property_name_regex;
    }
    if(config_collection_properties_resource_names != nullptr) { 
        delete config_collection_properties_resource_names;
    }
}

OAIOrgApacheSlingCaconfigManagementImplConfigurationManagementSettiProperties*
OAIOrgApacheSlingCaconfigManagementImplConfigurationManagementSettiProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIOrgApacheSlingCaconfigManagementImplConfigurationManagementSettiProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&ignore_property_name_regex, pJson["ignorePropertyNameRegex"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
    ::OpenAPI::setValue(&config_collection_properties_resource_names, pJson["configCollectionPropertiesResourceNames"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
}

QString
OAIOrgApacheSlingCaconfigManagementImplConfigurationManagementSettiProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIOrgApacheSlingCaconfigManagementImplConfigurationManagementSettiProperties::asJsonObject() {
    QJsonObject obj;
    if((ignore_property_name_regex != nullptr) && (ignore_property_name_regex->isSet())){
        toJsonValue(QString("ignorePropertyNameRegex"), ignore_property_name_regex, obj, QString("OAIConfigNodePropertyArray"));
    }
    if((config_collection_properties_resource_names != nullptr) && (config_collection_properties_resource_names->isSet())){
        toJsonValue(QString("configCollectionPropertiesResourceNames"), config_collection_properties_resource_names, obj, QString("OAIConfigNodePropertyArray"));
    }

    return obj;
}

OAIConfigNodePropertyArray*
OAIOrgApacheSlingCaconfigManagementImplConfigurationManagementSettiProperties::getIgnorePropertyNameRegex() {
    return ignore_property_name_regex;
}
void
OAIOrgApacheSlingCaconfigManagementImplConfigurationManagementSettiProperties::setIgnorePropertyNameRegex(OAIConfigNodePropertyArray* ignore_property_name_regex) {
    this->ignore_property_name_regex = ignore_property_name_regex;
    this->m_ignore_property_name_regex_isSet = true;
}

OAIConfigNodePropertyArray*
OAIOrgApacheSlingCaconfigManagementImplConfigurationManagementSettiProperties::getConfigCollectionPropertiesResourceNames() {
    return config_collection_properties_resource_names;
}
void
OAIOrgApacheSlingCaconfigManagementImplConfigurationManagementSettiProperties::setConfigCollectionPropertiesResourceNames(OAIConfigNodePropertyArray* config_collection_properties_resource_names) {
    this->config_collection_properties_resource_names = config_collection_properties_resource_names;
    this->m_config_collection_properties_resource_names_isSet = true;
}


bool
OAIOrgApacheSlingCaconfigManagementImplConfigurationManagementSettiProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(ignore_property_name_regex != nullptr && ignore_property_name_regex->isSet()){ isObjectUpdated = true; break;}
        if(config_collection_properties_resource_names != nullptr && config_collection_properties_resource_names->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

