/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComDayCqReportingImplRLogAnalyzerProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComDayCqReportingImplRLogAnalyzerProperties::OAIComDayCqReportingImplRLogAnalyzerProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIComDayCqReportingImplRLogAnalyzerProperties::OAIComDayCqReportingImplRLogAnalyzerProperties() {
    init();
}

OAIComDayCqReportingImplRLogAnalyzerProperties::~OAIComDayCqReportingImplRLogAnalyzerProperties() {
    this->cleanup();
}

void
OAIComDayCqReportingImplRLogAnalyzerProperties::init() {
    request_log_output = new OAIConfigNodePropertyString();
    m_request_log_output_isSet = false;
}

void
OAIComDayCqReportingImplRLogAnalyzerProperties::cleanup() {
    if(request_log_output != nullptr) { 
        delete request_log_output;
    }
}

OAIComDayCqReportingImplRLogAnalyzerProperties*
OAIComDayCqReportingImplRLogAnalyzerProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIComDayCqReportingImplRLogAnalyzerProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&request_log_output, pJson["request.log.output"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
}

QString
OAIComDayCqReportingImplRLogAnalyzerProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComDayCqReportingImplRLogAnalyzerProperties::asJsonObject() {
    QJsonObject obj;
    if((request_log_output != nullptr) && (request_log_output->isSet())){
        toJsonValue(QString("request.log.output"), request_log_output, obj, QString("OAIConfigNodePropertyString"));
    }

    return obj;
}

OAIConfigNodePropertyString*
OAIComDayCqReportingImplRLogAnalyzerProperties::getRequestLogOutput() {
    return request_log_output;
}
void
OAIComDayCqReportingImplRLogAnalyzerProperties::setRequestLogOutput(OAIConfigNodePropertyString* request_log_output) {
    this->request_log_output = request_log_output;
    this->m_request_log_output_isSet = true;
}


bool
OAIComDayCqReportingImplRLogAnalyzerProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(request_log_output != nullptr && request_log_output->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

