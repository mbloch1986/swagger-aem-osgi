/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableProperties {
  #[serde(rename = "enabledActions")]
  enabled_actions: Option<::models::ConfigNodePropertyDropDown>,
  #[serde(rename = "userPrivilegeNames")]
  user_privilege_names: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "groupPrivilegeNames")]
  group_privilege_names: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "constraint")]
  constraint: Option<::models::ConfigNodePropertyString>
}

impl OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableProperties {
  pub fn new() -> OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableProperties {
    OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableProperties {
      enabled_actions: None,
      user_privilege_names: None,
      group_privilege_names: None,
      constraint: None
    }
  }

  pub fn set_enabled_actions(&mut self, enabled_actions: ::models::ConfigNodePropertyDropDown) {
    self.enabled_actions = Some(enabled_actions);
  }

  pub fn with_enabled_actions(mut self, enabled_actions: ::models::ConfigNodePropertyDropDown) -> OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableProperties {
    self.enabled_actions = Some(enabled_actions);
    self
  }

  pub fn enabled_actions(&self) -> Option<&::models::ConfigNodePropertyDropDown> {
    self.enabled_actions.as_ref()
  }

  pub fn reset_enabled_actions(&mut self) {
    self.enabled_actions = None;
  }

  pub fn set_user_privilege_names(&mut self, user_privilege_names: ::models::ConfigNodePropertyArray) {
    self.user_privilege_names = Some(user_privilege_names);
  }

  pub fn with_user_privilege_names(mut self, user_privilege_names: ::models::ConfigNodePropertyArray) -> OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableProperties {
    self.user_privilege_names = Some(user_privilege_names);
    self
  }

  pub fn user_privilege_names(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.user_privilege_names.as_ref()
  }

  pub fn reset_user_privilege_names(&mut self) {
    self.user_privilege_names = None;
  }

  pub fn set_group_privilege_names(&mut self, group_privilege_names: ::models::ConfigNodePropertyArray) {
    self.group_privilege_names = Some(group_privilege_names);
  }

  pub fn with_group_privilege_names(mut self, group_privilege_names: ::models::ConfigNodePropertyArray) -> OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableProperties {
    self.group_privilege_names = Some(group_privilege_names);
    self
  }

  pub fn group_privilege_names(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.group_privilege_names.as_ref()
  }

  pub fn reset_group_privilege_names(&mut self) {
    self.group_privilege_names = None;
  }

  pub fn set_constraint(&mut self, constraint: ::models::ConfigNodePropertyString) {
    self.constraint = Some(constraint);
  }

  pub fn with_constraint(mut self, constraint: ::models::ConfigNodePropertyString) -> OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableProperties {
    self.constraint = Some(constraint);
    self
  }

  pub fn constraint(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.constraint.as_ref()
  }

  pub fn reset_constraint(&mut self) {
    self.constraint = None;
  }

}



