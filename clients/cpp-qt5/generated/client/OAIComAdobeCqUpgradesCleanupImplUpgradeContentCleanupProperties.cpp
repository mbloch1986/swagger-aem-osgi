/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeCqUpgradesCleanupImplUpgradeContentCleanupProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeCqUpgradesCleanupImplUpgradeContentCleanupProperties::OAIComAdobeCqUpgradesCleanupImplUpgradeContentCleanupProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIComAdobeCqUpgradesCleanupImplUpgradeContentCleanupProperties::OAIComAdobeCqUpgradesCleanupImplUpgradeContentCleanupProperties() {
    init();
}

OAIComAdobeCqUpgradesCleanupImplUpgradeContentCleanupProperties::~OAIComAdobeCqUpgradesCleanupImplUpgradeContentCleanupProperties() {
    this->cleanup();
}

void
OAIComAdobeCqUpgradesCleanupImplUpgradeContentCleanupProperties::init() {
    delete_path_regexps = new OAIConfigNodePropertyArray();
    m_delete_path_regexps_isSet = false;
    delete_sql2_query = new OAIConfigNodePropertyString();
    m_delete_sql2_query_isSet = false;
}

void
OAIComAdobeCqUpgradesCleanupImplUpgradeContentCleanupProperties::cleanup() {
    if(delete_path_regexps != nullptr) { 
        delete delete_path_regexps;
    }
    if(delete_sql2_query != nullptr) { 
        delete delete_sql2_query;
    }
}

OAIComAdobeCqUpgradesCleanupImplUpgradeContentCleanupProperties*
OAIComAdobeCqUpgradesCleanupImplUpgradeContentCleanupProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIComAdobeCqUpgradesCleanupImplUpgradeContentCleanupProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&delete_path_regexps, pJson["delete.path.regexps"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
    ::OpenAPI::setValue(&delete_sql2_query, pJson["delete.sql2.query"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
}

QString
OAIComAdobeCqUpgradesCleanupImplUpgradeContentCleanupProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeCqUpgradesCleanupImplUpgradeContentCleanupProperties::asJsonObject() {
    QJsonObject obj;
    if((delete_path_regexps != nullptr) && (delete_path_regexps->isSet())){
        toJsonValue(QString("delete.path.regexps"), delete_path_regexps, obj, QString("OAIConfigNodePropertyArray"));
    }
    if((delete_sql2_query != nullptr) && (delete_sql2_query->isSet())){
        toJsonValue(QString("delete.sql2.query"), delete_sql2_query, obj, QString("OAIConfigNodePropertyString"));
    }

    return obj;
}

OAIConfigNodePropertyArray*
OAIComAdobeCqUpgradesCleanupImplUpgradeContentCleanupProperties::getDeletePathRegexps() {
    return delete_path_regexps;
}
void
OAIComAdobeCqUpgradesCleanupImplUpgradeContentCleanupProperties::setDeletePathRegexps(OAIConfigNodePropertyArray* delete_path_regexps) {
    this->delete_path_regexps = delete_path_regexps;
    this->m_delete_path_regexps_isSet = true;
}

OAIConfigNodePropertyString*
OAIComAdobeCqUpgradesCleanupImplUpgradeContentCleanupProperties::getDeleteSql2Query() {
    return delete_sql2_query;
}
void
OAIComAdobeCqUpgradesCleanupImplUpgradeContentCleanupProperties::setDeleteSql2Query(OAIConfigNodePropertyString* delete_sql2_query) {
    this->delete_sql2_query = delete_sql2_query;
    this->m_delete_sql2_query_isSet = true;
}


bool
OAIComAdobeCqUpgradesCleanupImplUpgradeContentCleanupProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(delete_path_regexps != nullptr && delete_path_regexps->isSet()){ isObjectUpdated = true; break;}
        if(delete_sql2_query != nullptr && delete_sql2_query->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

