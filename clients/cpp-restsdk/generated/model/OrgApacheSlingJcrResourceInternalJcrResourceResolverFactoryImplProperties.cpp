/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties()
{
    m_Resource_resolver_searchpathIsSet = false;
    m_Resource_resolver_manglenamespacesIsSet = false;
    m_Resource_resolver_allowDirectIsSet = false;
    m_Resource_resolver_required_providersIsSet = false;
    m_Resource_resolver_required_providernamesIsSet = false;
    m_Resource_resolver_virtualIsSet = false;
    m_Resource_resolver_mappingIsSet = false;
    m_Resource_resolver_map_locationIsSet = false;
    m_Resource_resolver_map_observationIsSet = false;
    m_Resource_resolver_default_vanity_redirect_statusIsSet = false;
    m_Resource_resolver_enable_vanitypathIsSet = false;
    m_Resource_resolver_vanitypath_maxEntriesIsSet = false;
    m_Resource_resolver_vanitypath_maxEntries_startupIsSet = false;
    m_Resource_resolver_vanitypath_bloomfilter_maxBytesIsSet = false;
    m_Resource_resolver_optimize_alias_resolutionIsSet = false;
    m_Resource_resolver_vanitypath_whitelistIsSet = false;
    m_Resource_resolver_vanitypath_blacklistIsSet = false;
    m_Resource_resolver_vanity_precedenceIsSet = false;
    m_Resource_resolver_providerhandling_paranoidIsSet = false;
    m_Resource_resolver_log_closingIsSet = false;
    m_Resource_resolver_log_unclosedIsSet = false;
}

OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::~OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties()
{
}

void OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::validate()
{
    // TODO: implement validation
}

web::json::value OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Resource_resolver_searchpathIsSet)
    {
        val[utility::conversions::to_string_t("resource.resolver.searchpath")] = ModelBase::toJson(m_Resource_resolver_searchpath);
    }
    if(m_Resource_resolver_manglenamespacesIsSet)
    {
        val[utility::conversions::to_string_t("resource.resolver.manglenamespaces")] = ModelBase::toJson(m_Resource_resolver_manglenamespaces);
    }
    if(m_Resource_resolver_allowDirectIsSet)
    {
        val[utility::conversions::to_string_t("resource.resolver.allowDirect")] = ModelBase::toJson(m_Resource_resolver_allowDirect);
    }
    if(m_Resource_resolver_required_providersIsSet)
    {
        val[utility::conversions::to_string_t("resource.resolver.required.providers")] = ModelBase::toJson(m_Resource_resolver_required_providers);
    }
    if(m_Resource_resolver_required_providernamesIsSet)
    {
        val[utility::conversions::to_string_t("resource.resolver.required.providernames")] = ModelBase::toJson(m_Resource_resolver_required_providernames);
    }
    if(m_Resource_resolver_virtualIsSet)
    {
        val[utility::conversions::to_string_t("resource.resolver.virtual")] = ModelBase::toJson(m_Resource_resolver_virtual);
    }
    if(m_Resource_resolver_mappingIsSet)
    {
        val[utility::conversions::to_string_t("resource.resolver.mapping")] = ModelBase::toJson(m_Resource_resolver_mapping);
    }
    if(m_Resource_resolver_map_locationIsSet)
    {
        val[utility::conversions::to_string_t("resource.resolver.map.location")] = ModelBase::toJson(m_Resource_resolver_map_location);
    }
    if(m_Resource_resolver_map_observationIsSet)
    {
        val[utility::conversions::to_string_t("resource.resolver.map.observation")] = ModelBase::toJson(m_Resource_resolver_map_observation);
    }
    if(m_Resource_resolver_default_vanity_redirect_statusIsSet)
    {
        val[utility::conversions::to_string_t("resource.resolver.default.vanity.redirect.status")] = ModelBase::toJson(m_Resource_resolver_default_vanity_redirect_status);
    }
    if(m_Resource_resolver_enable_vanitypathIsSet)
    {
        val[utility::conversions::to_string_t("resource.resolver.enable.vanitypath")] = ModelBase::toJson(m_Resource_resolver_enable_vanitypath);
    }
    if(m_Resource_resolver_vanitypath_maxEntriesIsSet)
    {
        val[utility::conversions::to_string_t("resource.resolver.vanitypath.maxEntries")] = ModelBase::toJson(m_Resource_resolver_vanitypath_maxEntries);
    }
    if(m_Resource_resolver_vanitypath_maxEntries_startupIsSet)
    {
        val[utility::conversions::to_string_t("resource.resolver.vanitypath.maxEntries.startup")] = ModelBase::toJson(m_Resource_resolver_vanitypath_maxEntries_startup);
    }
    if(m_Resource_resolver_vanitypath_bloomfilter_maxBytesIsSet)
    {
        val[utility::conversions::to_string_t("resource.resolver.vanitypath.bloomfilter.maxBytes")] = ModelBase::toJson(m_Resource_resolver_vanitypath_bloomfilter_maxBytes);
    }
    if(m_Resource_resolver_optimize_alias_resolutionIsSet)
    {
        val[utility::conversions::to_string_t("resource.resolver.optimize.alias.resolution")] = ModelBase::toJson(m_Resource_resolver_optimize_alias_resolution);
    }
    if(m_Resource_resolver_vanitypath_whitelistIsSet)
    {
        val[utility::conversions::to_string_t("resource.resolver.vanitypath.whitelist")] = ModelBase::toJson(m_Resource_resolver_vanitypath_whitelist);
    }
    if(m_Resource_resolver_vanitypath_blacklistIsSet)
    {
        val[utility::conversions::to_string_t("resource.resolver.vanitypath.blacklist")] = ModelBase::toJson(m_Resource_resolver_vanitypath_blacklist);
    }
    if(m_Resource_resolver_vanity_precedenceIsSet)
    {
        val[utility::conversions::to_string_t("resource.resolver.vanity.precedence")] = ModelBase::toJson(m_Resource_resolver_vanity_precedence);
    }
    if(m_Resource_resolver_providerhandling_paranoidIsSet)
    {
        val[utility::conversions::to_string_t("resource.resolver.providerhandling.paranoid")] = ModelBase::toJson(m_Resource_resolver_providerhandling_paranoid);
    }
    if(m_Resource_resolver_log_closingIsSet)
    {
        val[utility::conversions::to_string_t("resource.resolver.log.closing")] = ModelBase::toJson(m_Resource_resolver_log_closing);
    }
    if(m_Resource_resolver_log_unclosedIsSet)
    {
        val[utility::conversions::to_string_t("resource.resolver.log.unclosed")] = ModelBase::toJson(m_Resource_resolver_log_unclosed);
    }

    return val;
}

void OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("resource.resolver.searchpath")))
    {
        if(!val[utility::conversions::to_string_t("resource.resolver.searchpath")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("resource.resolver.searchpath")]);
            setResourceResolverSearchpath( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("resource.resolver.manglenamespaces")))
    {
        if(!val[utility::conversions::to_string_t("resource.resolver.manglenamespaces")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("resource.resolver.manglenamespaces")]);
            setResourceResolverManglenamespaces( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("resource.resolver.allowDirect")))
    {
        if(!val[utility::conversions::to_string_t("resource.resolver.allowDirect")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("resource.resolver.allowDirect")]);
            setResourceResolverAllowDirect( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("resource.resolver.required.providers")))
    {
        if(!val[utility::conversions::to_string_t("resource.resolver.required.providers")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("resource.resolver.required.providers")]);
            setResourceResolverRequiredProviders( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("resource.resolver.required.providernames")))
    {
        if(!val[utility::conversions::to_string_t("resource.resolver.required.providernames")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("resource.resolver.required.providernames")]);
            setResourceResolverRequiredProvidernames( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("resource.resolver.virtual")))
    {
        if(!val[utility::conversions::to_string_t("resource.resolver.virtual")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("resource.resolver.virtual")]);
            setResourceResolverVirtual( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("resource.resolver.mapping")))
    {
        if(!val[utility::conversions::to_string_t("resource.resolver.mapping")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("resource.resolver.mapping")]);
            setResourceResolverMapping( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("resource.resolver.map.location")))
    {
        if(!val[utility::conversions::to_string_t("resource.resolver.map.location")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("resource.resolver.map.location")]);
            setResourceResolverMapLocation( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("resource.resolver.map.observation")))
    {
        if(!val[utility::conversions::to_string_t("resource.resolver.map.observation")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("resource.resolver.map.observation")]);
            setResourceResolverMapObservation( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("resource.resolver.default.vanity.redirect.status")))
    {
        if(!val[utility::conversions::to_string_t("resource.resolver.default.vanity.redirect.status")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("resource.resolver.default.vanity.redirect.status")]);
            setResourceResolverDefaultVanityRedirectStatus( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("resource.resolver.enable.vanitypath")))
    {
        if(!val[utility::conversions::to_string_t("resource.resolver.enable.vanitypath")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("resource.resolver.enable.vanitypath")]);
            setResourceResolverEnableVanitypath( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("resource.resolver.vanitypath.maxEntries")))
    {
        if(!val[utility::conversions::to_string_t("resource.resolver.vanitypath.maxEntries")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("resource.resolver.vanitypath.maxEntries")]);
            setResourceResolverVanitypathMaxEntries( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("resource.resolver.vanitypath.maxEntries.startup")))
    {
        if(!val[utility::conversions::to_string_t("resource.resolver.vanitypath.maxEntries.startup")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("resource.resolver.vanitypath.maxEntries.startup")]);
            setResourceResolverVanitypathMaxEntriesStartup( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("resource.resolver.vanitypath.bloomfilter.maxBytes")))
    {
        if(!val[utility::conversions::to_string_t("resource.resolver.vanitypath.bloomfilter.maxBytes")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("resource.resolver.vanitypath.bloomfilter.maxBytes")]);
            setResourceResolverVanitypathBloomfilterMaxBytes( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("resource.resolver.optimize.alias.resolution")))
    {
        if(!val[utility::conversions::to_string_t("resource.resolver.optimize.alias.resolution")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("resource.resolver.optimize.alias.resolution")]);
            setResourceResolverOptimizeAliasResolution( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("resource.resolver.vanitypath.whitelist")))
    {
        if(!val[utility::conversions::to_string_t("resource.resolver.vanitypath.whitelist")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("resource.resolver.vanitypath.whitelist")]);
            setResourceResolverVanitypathWhitelist( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("resource.resolver.vanitypath.blacklist")))
    {
        if(!val[utility::conversions::to_string_t("resource.resolver.vanitypath.blacklist")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("resource.resolver.vanitypath.blacklist")]);
            setResourceResolverVanitypathBlacklist( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("resource.resolver.vanity.precedence")))
    {
        if(!val[utility::conversions::to_string_t("resource.resolver.vanity.precedence")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("resource.resolver.vanity.precedence")]);
            setResourceResolverVanityPrecedence( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("resource.resolver.providerhandling.paranoid")))
    {
        if(!val[utility::conversions::to_string_t("resource.resolver.providerhandling.paranoid")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("resource.resolver.providerhandling.paranoid")]);
            setResourceResolverProviderhandlingParanoid( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("resource.resolver.log.closing")))
    {
        if(!val[utility::conversions::to_string_t("resource.resolver.log.closing")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("resource.resolver.log.closing")]);
            setResourceResolverLogClosing( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("resource.resolver.log.unclosed")))
    {
        if(!val[utility::conversions::to_string_t("resource.resolver.log.unclosed")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("resource.resolver.log.unclosed")]);
            setResourceResolverLogUnclosed( newItem );
        }
    }
}

void OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Resource_resolver_searchpathIsSet)
    {
        if (m_Resource_resolver_searchpath.get())
        {
            m_Resource_resolver_searchpath->toMultipart(multipart, utility::conversions::to_string_t("resource.resolver.searchpath."));
        }
    }
    if(m_Resource_resolver_manglenamespacesIsSet)
    {
        if (m_Resource_resolver_manglenamespaces.get())
        {
            m_Resource_resolver_manglenamespaces->toMultipart(multipart, utility::conversions::to_string_t("resource.resolver.manglenamespaces."));
        }
    }
    if(m_Resource_resolver_allowDirectIsSet)
    {
        if (m_Resource_resolver_allowDirect.get())
        {
            m_Resource_resolver_allowDirect->toMultipart(multipart, utility::conversions::to_string_t("resource.resolver.allowDirect."));
        }
    }
    if(m_Resource_resolver_required_providersIsSet)
    {
        if (m_Resource_resolver_required_providers.get())
        {
            m_Resource_resolver_required_providers->toMultipart(multipart, utility::conversions::to_string_t("resource.resolver.required.providers."));
        }
    }
    if(m_Resource_resolver_required_providernamesIsSet)
    {
        if (m_Resource_resolver_required_providernames.get())
        {
            m_Resource_resolver_required_providernames->toMultipart(multipart, utility::conversions::to_string_t("resource.resolver.required.providernames."));
        }
    }
    if(m_Resource_resolver_virtualIsSet)
    {
        if (m_Resource_resolver_virtual.get())
        {
            m_Resource_resolver_virtual->toMultipart(multipart, utility::conversions::to_string_t("resource.resolver.virtual."));
        }
    }
    if(m_Resource_resolver_mappingIsSet)
    {
        if (m_Resource_resolver_mapping.get())
        {
            m_Resource_resolver_mapping->toMultipart(multipart, utility::conversions::to_string_t("resource.resolver.mapping."));
        }
    }
    if(m_Resource_resolver_map_locationIsSet)
    {
        if (m_Resource_resolver_map_location.get())
        {
            m_Resource_resolver_map_location->toMultipart(multipart, utility::conversions::to_string_t("resource.resolver.map.location."));
        }
    }
    if(m_Resource_resolver_map_observationIsSet)
    {
        if (m_Resource_resolver_map_observation.get())
        {
            m_Resource_resolver_map_observation->toMultipart(multipart, utility::conversions::to_string_t("resource.resolver.map.observation."));
        }
    }
    if(m_Resource_resolver_default_vanity_redirect_statusIsSet)
    {
        if (m_Resource_resolver_default_vanity_redirect_status.get())
        {
            m_Resource_resolver_default_vanity_redirect_status->toMultipart(multipart, utility::conversions::to_string_t("resource.resolver.default.vanity.redirect.status."));
        }
    }
    if(m_Resource_resolver_enable_vanitypathIsSet)
    {
        if (m_Resource_resolver_enable_vanitypath.get())
        {
            m_Resource_resolver_enable_vanitypath->toMultipart(multipart, utility::conversions::to_string_t("resource.resolver.enable.vanitypath."));
        }
    }
    if(m_Resource_resolver_vanitypath_maxEntriesIsSet)
    {
        if (m_Resource_resolver_vanitypath_maxEntries.get())
        {
            m_Resource_resolver_vanitypath_maxEntries->toMultipart(multipart, utility::conversions::to_string_t("resource.resolver.vanitypath.maxEntries."));
        }
    }
    if(m_Resource_resolver_vanitypath_maxEntries_startupIsSet)
    {
        if (m_Resource_resolver_vanitypath_maxEntries_startup.get())
        {
            m_Resource_resolver_vanitypath_maxEntries_startup->toMultipart(multipart, utility::conversions::to_string_t("resource.resolver.vanitypath.maxEntries.startup."));
        }
    }
    if(m_Resource_resolver_vanitypath_bloomfilter_maxBytesIsSet)
    {
        if (m_Resource_resolver_vanitypath_bloomfilter_maxBytes.get())
        {
            m_Resource_resolver_vanitypath_bloomfilter_maxBytes->toMultipart(multipart, utility::conversions::to_string_t("resource.resolver.vanitypath.bloomfilter.maxBytes."));
        }
    }
    if(m_Resource_resolver_optimize_alias_resolutionIsSet)
    {
        if (m_Resource_resolver_optimize_alias_resolution.get())
        {
            m_Resource_resolver_optimize_alias_resolution->toMultipart(multipart, utility::conversions::to_string_t("resource.resolver.optimize.alias.resolution."));
        }
    }
    if(m_Resource_resolver_vanitypath_whitelistIsSet)
    {
        if (m_Resource_resolver_vanitypath_whitelist.get())
        {
            m_Resource_resolver_vanitypath_whitelist->toMultipart(multipart, utility::conversions::to_string_t("resource.resolver.vanitypath.whitelist."));
        }
    }
    if(m_Resource_resolver_vanitypath_blacklistIsSet)
    {
        if (m_Resource_resolver_vanitypath_blacklist.get())
        {
            m_Resource_resolver_vanitypath_blacklist->toMultipart(multipart, utility::conversions::to_string_t("resource.resolver.vanitypath.blacklist."));
        }
    }
    if(m_Resource_resolver_vanity_precedenceIsSet)
    {
        if (m_Resource_resolver_vanity_precedence.get())
        {
            m_Resource_resolver_vanity_precedence->toMultipart(multipart, utility::conversions::to_string_t("resource.resolver.vanity.precedence."));
        }
    }
    if(m_Resource_resolver_providerhandling_paranoidIsSet)
    {
        if (m_Resource_resolver_providerhandling_paranoid.get())
        {
            m_Resource_resolver_providerhandling_paranoid->toMultipart(multipart, utility::conversions::to_string_t("resource.resolver.providerhandling.paranoid."));
        }
    }
    if(m_Resource_resolver_log_closingIsSet)
    {
        if (m_Resource_resolver_log_closing.get())
        {
            m_Resource_resolver_log_closing->toMultipart(multipart, utility::conversions::to_string_t("resource.resolver.log.closing."));
        }
    }
    if(m_Resource_resolver_log_unclosedIsSet)
    {
        if (m_Resource_resolver_log_unclosed.get())
        {
            m_Resource_resolver_log_unclosed->toMultipart(multipart, utility::conversions::to_string_t("resource.resolver.log.unclosed."));
        }
    }
}

void OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("resource.resolver.searchpath")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("resource.resolver.searchpath")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("resource.resolver.searchpath."));
            setResourceResolverSearchpath( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("resource.resolver.manglenamespaces")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("resource.resolver.manglenamespaces")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("resource.resolver.manglenamespaces."));
            setResourceResolverManglenamespaces( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("resource.resolver.allowDirect")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("resource.resolver.allowDirect")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("resource.resolver.allowDirect."));
            setResourceResolverAllowDirect( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("resource.resolver.required.providers")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("resource.resolver.required.providers")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("resource.resolver.required.providers."));
            setResourceResolverRequiredProviders( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("resource.resolver.required.providernames")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("resource.resolver.required.providernames")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("resource.resolver.required.providernames."));
            setResourceResolverRequiredProvidernames( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("resource.resolver.virtual")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("resource.resolver.virtual")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("resource.resolver.virtual."));
            setResourceResolverVirtual( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("resource.resolver.mapping")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("resource.resolver.mapping")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("resource.resolver.mapping."));
            setResourceResolverMapping( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("resource.resolver.map.location")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("resource.resolver.map.location")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("resource.resolver.map.location."));
            setResourceResolverMapLocation( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("resource.resolver.map.observation")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("resource.resolver.map.observation")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("resource.resolver.map.observation."));
            setResourceResolverMapObservation( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("resource.resolver.default.vanity.redirect.status")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("resource.resolver.default.vanity.redirect.status")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("resource.resolver.default.vanity.redirect.status."));
            setResourceResolverDefaultVanityRedirectStatus( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("resource.resolver.enable.vanitypath")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("resource.resolver.enable.vanitypath")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("resource.resolver.enable.vanitypath."));
            setResourceResolverEnableVanitypath( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("resource.resolver.vanitypath.maxEntries")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("resource.resolver.vanitypath.maxEntries")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("resource.resolver.vanitypath.maxEntries."));
            setResourceResolverVanitypathMaxEntries( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("resource.resolver.vanitypath.maxEntries.startup")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("resource.resolver.vanitypath.maxEntries.startup")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("resource.resolver.vanitypath.maxEntries.startup."));
            setResourceResolverVanitypathMaxEntriesStartup( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("resource.resolver.vanitypath.bloomfilter.maxBytes")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("resource.resolver.vanitypath.bloomfilter.maxBytes")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("resource.resolver.vanitypath.bloomfilter.maxBytes."));
            setResourceResolverVanitypathBloomfilterMaxBytes( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("resource.resolver.optimize.alias.resolution")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("resource.resolver.optimize.alias.resolution")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("resource.resolver.optimize.alias.resolution."));
            setResourceResolverOptimizeAliasResolution( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("resource.resolver.vanitypath.whitelist")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("resource.resolver.vanitypath.whitelist")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("resource.resolver.vanitypath.whitelist."));
            setResourceResolverVanitypathWhitelist( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("resource.resolver.vanitypath.blacklist")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("resource.resolver.vanitypath.blacklist")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("resource.resolver.vanitypath.blacklist."));
            setResourceResolverVanitypathBlacklist( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("resource.resolver.vanity.precedence")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("resource.resolver.vanity.precedence")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("resource.resolver.vanity.precedence."));
            setResourceResolverVanityPrecedence( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("resource.resolver.providerhandling.paranoid")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("resource.resolver.providerhandling.paranoid")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("resource.resolver.providerhandling.paranoid."));
            setResourceResolverProviderhandlingParanoid( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("resource.resolver.log.closing")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("resource.resolver.log.closing")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("resource.resolver.log.closing."));
            setResourceResolverLogClosing( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("resource.resolver.log.unclosed")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("resource.resolver.log.unclosed")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("resource.resolver.log.unclosed."));
            setResourceResolverLogUnclosed( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyArray> OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::getResourceResolverSearchpath() const
{
    return m_Resource_resolver_searchpath;
}


void OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::setResourceResolverSearchpath(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Resource_resolver_searchpath = value;
    m_Resource_resolver_searchpathIsSet = true;
}
bool OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::resourceResolverSearchpathIsSet() const
{
    return m_Resource_resolver_searchpathIsSet;
}

void OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::unsetResource_resolver_searchpath()
{
    m_Resource_resolver_searchpathIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::getResourceResolverManglenamespaces() const
{
    return m_Resource_resolver_manglenamespaces;
}


void OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::setResourceResolverManglenamespaces(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Resource_resolver_manglenamespaces = value;
    m_Resource_resolver_manglenamespacesIsSet = true;
}
bool OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::resourceResolverManglenamespacesIsSet() const
{
    return m_Resource_resolver_manglenamespacesIsSet;
}

void OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::unsetResource_resolver_manglenamespaces()
{
    m_Resource_resolver_manglenamespacesIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::getResourceResolverAllowDirect() const
{
    return m_Resource_resolver_allowDirect;
}


void OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::setResourceResolverAllowDirect(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Resource_resolver_allowDirect = value;
    m_Resource_resolver_allowDirectIsSet = true;
}
bool OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::resourceResolverAllowDirectIsSet() const
{
    return m_Resource_resolver_allowDirectIsSet;
}

void OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::unsetResource_resolver_allowDirect()
{
    m_Resource_resolver_allowDirectIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::getResourceResolverRequiredProviders() const
{
    return m_Resource_resolver_required_providers;
}


void OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::setResourceResolverRequiredProviders(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Resource_resolver_required_providers = value;
    m_Resource_resolver_required_providersIsSet = true;
}
bool OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::resourceResolverRequiredProvidersIsSet() const
{
    return m_Resource_resolver_required_providersIsSet;
}

void OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::unsetResource_resolver_required_providers()
{
    m_Resource_resolver_required_providersIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::getResourceResolverRequiredProvidernames() const
{
    return m_Resource_resolver_required_providernames;
}


void OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::setResourceResolverRequiredProvidernames(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Resource_resolver_required_providernames = value;
    m_Resource_resolver_required_providernamesIsSet = true;
}
bool OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::resourceResolverRequiredProvidernamesIsSet() const
{
    return m_Resource_resolver_required_providernamesIsSet;
}

void OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::unsetResource_resolver_required_providernames()
{
    m_Resource_resolver_required_providernamesIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::getResourceResolverVirtual() const
{
    return m_Resource_resolver_virtual;
}


void OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::setResourceResolverVirtual(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Resource_resolver_virtual = value;
    m_Resource_resolver_virtualIsSet = true;
}
bool OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::resourceResolverVirtualIsSet() const
{
    return m_Resource_resolver_virtualIsSet;
}

void OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::unsetResource_resolver_virtual()
{
    m_Resource_resolver_virtualIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::getResourceResolverMapping() const
{
    return m_Resource_resolver_mapping;
}


void OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::setResourceResolverMapping(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Resource_resolver_mapping = value;
    m_Resource_resolver_mappingIsSet = true;
}
bool OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::resourceResolverMappingIsSet() const
{
    return m_Resource_resolver_mappingIsSet;
}

void OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::unsetResource_resolver_mapping()
{
    m_Resource_resolver_mappingIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::getResourceResolverMapLocation() const
{
    return m_Resource_resolver_map_location;
}


void OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::setResourceResolverMapLocation(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Resource_resolver_map_location = value;
    m_Resource_resolver_map_locationIsSet = true;
}
bool OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::resourceResolverMapLocationIsSet() const
{
    return m_Resource_resolver_map_locationIsSet;
}

void OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::unsetResource_resolver_map_location()
{
    m_Resource_resolver_map_locationIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::getResourceResolverMapObservation() const
{
    return m_Resource_resolver_map_observation;
}


void OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::setResourceResolverMapObservation(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Resource_resolver_map_observation = value;
    m_Resource_resolver_map_observationIsSet = true;
}
bool OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::resourceResolverMapObservationIsSet() const
{
    return m_Resource_resolver_map_observationIsSet;
}

void OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::unsetResource_resolver_map_observation()
{
    m_Resource_resolver_map_observationIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::getResourceResolverDefaultVanityRedirectStatus() const
{
    return m_Resource_resolver_default_vanity_redirect_status;
}


void OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::setResourceResolverDefaultVanityRedirectStatus(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Resource_resolver_default_vanity_redirect_status = value;
    m_Resource_resolver_default_vanity_redirect_statusIsSet = true;
}
bool OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::resourceResolverDefaultVanityRedirectStatusIsSet() const
{
    return m_Resource_resolver_default_vanity_redirect_statusIsSet;
}

void OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::unsetResource_resolver_default_vanity_redirect_status()
{
    m_Resource_resolver_default_vanity_redirect_statusIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::getResourceResolverEnableVanitypath() const
{
    return m_Resource_resolver_enable_vanitypath;
}


void OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::setResourceResolverEnableVanitypath(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Resource_resolver_enable_vanitypath = value;
    m_Resource_resolver_enable_vanitypathIsSet = true;
}
bool OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::resourceResolverEnableVanitypathIsSet() const
{
    return m_Resource_resolver_enable_vanitypathIsSet;
}

void OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::unsetResource_resolver_enable_vanitypath()
{
    m_Resource_resolver_enable_vanitypathIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::getResourceResolverVanitypathMaxEntries() const
{
    return m_Resource_resolver_vanitypath_maxEntries;
}


void OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::setResourceResolverVanitypathMaxEntries(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Resource_resolver_vanitypath_maxEntries = value;
    m_Resource_resolver_vanitypath_maxEntriesIsSet = true;
}
bool OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::resourceResolverVanitypathMaxEntriesIsSet() const
{
    return m_Resource_resolver_vanitypath_maxEntriesIsSet;
}

void OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::unsetResource_resolver_vanitypath_maxEntries()
{
    m_Resource_resolver_vanitypath_maxEntriesIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::getResourceResolverVanitypathMaxEntriesStartup() const
{
    return m_Resource_resolver_vanitypath_maxEntries_startup;
}


void OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::setResourceResolverVanitypathMaxEntriesStartup(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Resource_resolver_vanitypath_maxEntries_startup = value;
    m_Resource_resolver_vanitypath_maxEntries_startupIsSet = true;
}
bool OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::resourceResolverVanitypathMaxEntriesStartupIsSet() const
{
    return m_Resource_resolver_vanitypath_maxEntries_startupIsSet;
}

void OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::unsetResource_resolver_vanitypath_maxEntries_startup()
{
    m_Resource_resolver_vanitypath_maxEntries_startupIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::getResourceResolverVanitypathBloomfilterMaxBytes() const
{
    return m_Resource_resolver_vanitypath_bloomfilter_maxBytes;
}


void OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::setResourceResolverVanitypathBloomfilterMaxBytes(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Resource_resolver_vanitypath_bloomfilter_maxBytes = value;
    m_Resource_resolver_vanitypath_bloomfilter_maxBytesIsSet = true;
}
bool OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::resourceResolverVanitypathBloomfilterMaxBytesIsSet() const
{
    return m_Resource_resolver_vanitypath_bloomfilter_maxBytesIsSet;
}

void OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::unsetResource_resolver_vanitypath_bloomfilter_maxBytes()
{
    m_Resource_resolver_vanitypath_bloomfilter_maxBytesIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::getResourceResolverOptimizeAliasResolution() const
{
    return m_Resource_resolver_optimize_alias_resolution;
}


void OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::setResourceResolverOptimizeAliasResolution(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Resource_resolver_optimize_alias_resolution = value;
    m_Resource_resolver_optimize_alias_resolutionIsSet = true;
}
bool OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::resourceResolverOptimizeAliasResolutionIsSet() const
{
    return m_Resource_resolver_optimize_alias_resolutionIsSet;
}

void OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::unsetResource_resolver_optimize_alias_resolution()
{
    m_Resource_resolver_optimize_alias_resolutionIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::getResourceResolverVanitypathWhitelist() const
{
    return m_Resource_resolver_vanitypath_whitelist;
}


void OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::setResourceResolverVanitypathWhitelist(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Resource_resolver_vanitypath_whitelist = value;
    m_Resource_resolver_vanitypath_whitelistIsSet = true;
}
bool OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::resourceResolverVanitypathWhitelistIsSet() const
{
    return m_Resource_resolver_vanitypath_whitelistIsSet;
}

void OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::unsetResource_resolver_vanitypath_whitelist()
{
    m_Resource_resolver_vanitypath_whitelistIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::getResourceResolverVanitypathBlacklist() const
{
    return m_Resource_resolver_vanitypath_blacklist;
}


void OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::setResourceResolverVanitypathBlacklist(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Resource_resolver_vanitypath_blacklist = value;
    m_Resource_resolver_vanitypath_blacklistIsSet = true;
}
bool OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::resourceResolverVanitypathBlacklistIsSet() const
{
    return m_Resource_resolver_vanitypath_blacklistIsSet;
}

void OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::unsetResource_resolver_vanitypath_blacklist()
{
    m_Resource_resolver_vanitypath_blacklistIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::getResourceResolverVanityPrecedence() const
{
    return m_Resource_resolver_vanity_precedence;
}


void OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::setResourceResolverVanityPrecedence(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Resource_resolver_vanity_precedence = value;
    m_Resource_resolver_vanity_precedenceIsSet = true;
}
bool OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::resourceResolverVanityPrecedenceIsSet() const
{
    return m_Resource_resolver_vanity_precedenceIsSet;
}

void OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::unsetResource_resolver_vanity_precedence()
{
    m_Resource_resolver_vanity_precedenceIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::getResourceResolverProviderhandlingParanoid() const
{
    return m_Resource_resolver_providerhandling_paranoid;
}


void OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::setResourceResolverProviderhandlingParanoid(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Resource_resolver_providerhandling_paranoid = value;
    m_Resource_resolver_providerhandling_paranoidIsSet = true;
}
bool OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::resourceResolverProviderhandlingParanoidIsSet() const
{
    return m_Resource_resolver_providerhandling_paranoidIsSet;
}

void OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::unsetResource_resolver_providerhandling_paranoid()
{
    m_Resource_resolver_providerhandling_paranoidIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::getResourceResolverLogClosing() const
{
    return m_Resource_resolver_log_closing;
}


void OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::setResourceResolverLogClosing(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Resource_resolver_log_closing = value;
    m_Resource_resolver_log_closingIsSet = true;
}
bool OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::resourceResolverLogClosingIsSet() const
{
    return m_Resource_resolver_log_closingIsSet;
}

void OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::unsetResource_resolver_log_closing()
{
    m_Resource_resolver_log_closingIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::getResourceResolverLogUnclosed() const
{
    return m_Resource_resolver_log_unclosed;
}


void OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::setResourceResolverLogUnclosed(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Resource_resolver_log_unclosed = value;
    m_Resource_resolver_log_unclosedIsSet = true;
}
bool OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::resourceResolverLogUnclosedIsSet() const
{
    return m_Resource_resolver_log_unclosedIsSet;
}

void OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties::unsetResource_resolver_log_unclosed()
{
    m_Resource_resolver_log_unclosedIsSet = false;
}

}
}
}
}

