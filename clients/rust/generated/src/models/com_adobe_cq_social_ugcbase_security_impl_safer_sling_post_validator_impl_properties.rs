/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplProperties {
  #[serde(rename = "parameter.whitelist")]
  parameter_whitelist: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "parameter.whitelist.prefixes")]
  parameter_whitelist_prefixes: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "binary.parameter.whitelist")]
  binary_parameter_whitelist: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "modifier.whitelist")]
  modifier_whitelist: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "operation.whitelist")]
  operation_whitelist: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "operation.whitelist.prefixes")]
  operation_whitelist_prefixes: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "typehint.whitelist")]
  typehint_whitelist: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "resourcetype.whitelist")]
  resourcetype_whitelist: Option<::models::ConfigNodePropertyArray>
}

impl ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplProperties {
  pub fn new() -> ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplProperties {
    ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplProperties {
      parameter_whitelist: None,
      parameter_whitelist_prefixes: None,
      binary_parameter_whitelist: None,
      modifier_whitelist: None,
      operation_whitelist: None,
      operation_whitelist_prefixes: None,
      typehint_whitelist: None,
      resourcetype_whitelist: None
    }
  }

  pub fn set_parameter_whitelist(&mut self, parameter_whitelist: ::models::ConfigNodePropertyArray) {
    self.parameter_whitelist = Some(parameter_whitelist);
  }

  pub fn with_parameter_whitelist(mut self, parameter_whitelist: ::models::ConfigNodePropertyArray) -> ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplProperties {
    self.parameter_whitelist = Some(parameter_whitelist);
    self
  }

  pub fn parameter_whitelist(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.parameter_whitelist.as_ref()
  }

  pub fn reset_parameter_whitelist(&mut self) {
    self.parameter_whitelist = None;
  }

  pub fn set_parameter_whitelist_prefixes(&mut self, parameter_whitelist_prefixes: ::models::ConfigNodePropertyArray) {
    self.parameter_whitelist_prefixes = Some(parameter_whitelist_prefixes);
  }

  pub fn with_parameter_whitelist_prefixes(mut self, parameter_whitelist_prefixes: ::models::ConfigNodePropertyArray) -> ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplProperties {
    self.parameter_whitelist_prefixes = Some(parameter_whitelist_prefixes);
    self
  }

  pub fn parameter_whitelist_prefixes(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.parameter_whitelist_prefixes.as_ref()
  }

  pub fn reset_parameter_whitelist_prefixes(&mut self) {
    self.parameter_whitelist_prefixes = None;
  }

  pub fn set_binary_parameter_whitelist(&mut self, binary_parameter_whitelist: ::models::ConfigNodePropertyArray) {
    self.binary_parameter_whitelist = Some(binary_parameter_whitelist);
  }

  pub fn with_binary_parameter_whitelist(mut self, binary_parameter_whitelist: ::models::ConfigNodePropertyArray) -> ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplProperties {
    self.binary_parameter_whitelist = Some(binary_parameter_whitelist);
    self
  }

  pub fn binary_parameter_whitelist(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.binary_parameter_whitelist.as_ref()
  }

  pub fn reset_binary_parameter_whitelist(&mut self) {
    self.binary_parameter_whitelist = None;
  }

  pub fn set_modifier_whitelist(&mut self, modifier_whitelist: ::models::ConfigNodePropertyArray) {
    self.modifier_whitelist = Some(modifier_whitelist);
  }

  pub fn with_modifier_whitelist(mut self, modifier_whitelist: ::models::ConfigNodePropertyArray) -> ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplProperties {
    self.modifier_whitelist = Some(modifier_whitelist);
    self
  }

  pub fn modifier_whitelist(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.modifier_whitelist.as_ref()
  }

  pub fn reset_modifier_whitelist(&mut self) {
    self.modifier_whitelist = None;
  }

  pub fn set_operation_whitelist(&mut self, operation_whitelist: ::models::ConfigNodePropertyArray) {
    self.operation_whitelist = Some(operation_whitelist);
  }

  pub fn with_operation_whitelist(mut self, operation_whitelist: ::models::ConfigNodePropertyArray) -> ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplProperties {
    self.operation_whitelist = Some(operation_whitelist);
    self
  }

  pub fn operation_whitelist(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.operation_whitelist.as_ref()
  }

  pub fn reset_operation_whitelist(&mut self) {
    self.operation_whitelist = None;
  }

  pub fn set_operation_whitelist_prefixes(&mut self, operation_whitelist_prefixes: ::models::ConfigNodePropertyArray) {
    self.operation_whitelist_prefixes = Some(operation_whitelist_prefixes);
  }

  pub fn with_operation_whitelist_prefixes(mut self, operation_whitelist_prefixes: ::models::ConfigNodePropertyArray) -> ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplProperties {
    self.operation_whitelist_prefixes = Some(operation_whitelist_prefixes);
    self
  }

  pub fn operation_whitelist_prefixes(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.operation_whitelist_prefixes.as_ref()
  }

  pub fn reset_operation_whitelist_prefixes(&mut self) {
    self.operation_whitelist_prefixes = None;
  }

  pub fn set_typehint_whitelist(&mut self, typehint_whitelist: ::models::ConfigNodePropertyArray) {
    self.typehint_whitelist = Some(typehint_whitelist);
  }

  pub fn with_typehint_whitelist(mut self, typehint_whitelist: ::models::ConfigNodePropertyArray) -> ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplProperties {
    self.typehint_whitelist = Some(typehint_whitelist);
    self
  }

  pub fn typehint_whitelist(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.typehint_whitelist.as_ref()
  }

  pub fn reset_typehint_whitelist(&mut self) {
    self.typehint_whitelist = None;
  }

  pub fn set_resourcetype_whitelist(&mut self, resourcetype_whitelist: ::models::ConfigNodePropertyArray) {
    self.resourcetype_whitelist = Some(resourcetype_whitelist);
  }

  pub fn with_resourcetype_whitelist(mut self, resourcetype_whitelist: ::models::ConfigNodePropertyArray) -> ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplProperties {
    self.resourcetype_whitelist = Some(resourcetype_whitelist);
    self
  }

  pub fn resourcetype_whitelist(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.resourcetype_whitelist.as_ref()
  }

  pub fn reset_resourcetype_whitelist(&mut self) {
    self.resourcetype_whitelist = None;
  }

}



