/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplProperties::ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplProperties()
{
    m_Cq_dam_detect_asset_mime_from_contentIsSet = false;
}

ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplProperties::~ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplProperties()
{
}

void ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Cq_dam_detect_asset_mime_from_contentIsSet)
    {
        val[utility::conversions::to_string_t("cq.dam.detect.asset.mime.from.content")] = ModelBase::toJson(m_Cq_dam_detect_asset_mime_from_content);
    }

    return val;
}

void ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("cq.dam.detect.asset.mime.from.content")))
    {
        if(!val[utility::conversions::to_string_t("cq.dam.detect.asset.mime.from.content")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("cq.dam.detect.asset.mime.from.content")]);
            setCqDamDetectAssetMimeFromContent( newItem );
        }
    }
}

void ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Cq_dam_detect_asset_mime_from_contentIsSet)
    {
        if (m_Cq_dam_detect_asset_mime_from_content.get())
        {
            m_Cq_dam_detect_asset_mime_from_content->toMultipart(multipart, utility::conversions::to_string_t("cq.dam.detect.asset.mime.from.content."));
        }
    }
}

void ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("cq.dam.detect.asset.mime.from.content")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cq.dam.detect.asset.mime.from.content")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cq.dam.detect.asset.mime.from.content."));
            setCqDamDetectAssetMimeFromContent( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyBoolean> ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplProperties::getCqDamDetectAssetMimeFromContent() const
{
    return m_Cq_dam_detect_asset_mime_from_content;
}


void ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplProperties::setCqDamDetectAssetMimeFromContent(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Cq_dam_detect_asset_mime_from_content = value;
    m_Cq_dam_detect_asset_mime_from_contentIsSet = true;
}
bool ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplProperties::cqDamDetectAssetMimeFromContentIsSet() const
{
    return m_Cq_dam_detect_asset_mime_from_contentIsSet;
}

void ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplProperties::unsetCq_dam_detect_asset_mime_from_content()
{
    m_Cq_dam_detect_asset_mime_from_contentIsSet = false;
}

}
}
}
}

