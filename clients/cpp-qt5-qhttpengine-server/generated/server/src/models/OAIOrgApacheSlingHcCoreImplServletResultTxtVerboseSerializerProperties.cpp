/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIOrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIOrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerProperties::OAIOrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerProperties(QString json) {
    this->fromJson(json);
}

OAIOrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerProperties::OAIOrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerProperties() {
    this->init();
}

OAIOrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerProperties::~OAIOrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerProperties() {
    
}

void
OAIOrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerProperties::init() {
    m_total_width_isSet = false;
    m_col_width_name_isSet = false;
    m_col_width_result_isSet = false;
    m_col_width_timing_isSet = false;
}

void
OAIOrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIOrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(total_width, json[QString("totalWidth")]);
    
    ::OpenAPI::fromJsonValue(col_width_name, json[QString("colWidthName")]);
    
    ::OpenAPI::fromJsonValue(col_width_result, json[QString("colWidthResult")]);
    
    ::OpenAPI::fromJsonValue(col_width_timing, json[QString("colWidthTiming")]);
    
}

QString
OAIOrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIOrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerProperties::asJsonObject() const {
    QJsonObject obj;
	if(total_width.isSet()){
        obj.insert(QString("totalWidth"), ::OpenAPI::toJsonValue(total_width));
    }
	if(col_width_name.isSet()){
        obj.insert(QString("colWidthName"), ::OpenAPI::toJsonValue(col_width_name));
    }
	if(col_width_result.isSet()){
        obj.insert(QString("colWidthResult"), ::OpenAPI::toJsonValue(col_width_result));
    }
	if(col_width_timing.isSet()){
        obj.insert(QString("colWidthTiming"), ::OpenAPI::toJsonValue(col_width_timing));
    }
    return obj;
}

OAIConfigNodePropertyInteger
OAIOrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerProperties::getTotalWidth() const {
    return total_width;
}
void
OAIOrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerProperties::setTotalWidth(const OAIConfigNodePropertyInteger &total_width) {
    this->total_width = total_width;
    this->m_total_width_isSet = true;
}

OAIConfigNodePropertyInteger
OAIOrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerProperties::getColWidthName() const {
    return col_width_name;
}
void
OAIOrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerProperties::setColWidthName(const OAIConfigNodePropertyInteger &col_width_name) {
    this->col_width_name = col_width_name;
    this->m_col_width_name_isSet = true;
}

OAIConfigNodePropertyInteger
OAIOrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerProperties::getColWidthResult() const {
    return col_width_result;
}
void
OAIOrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerProperties::setColWidthResult(const OAIConfigNodePropertyInteger &col_width_result) {
    this->col_width_result = col_width_result;
    this->m_col_width_result_isSet = true;
}

OAIConfigNodePropertyInteger
OAIOrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerProperties::getColWidthTiming() const {
    return col_width_timing;
}
void
OAIOrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerProperties::setColWidthTiming(const OAIConfigNodePropertyInteger &col_width_timing) {
    this->col_width_timing = col_width_timing;
    this->m_col_width_timing_isSet = true;
}


bool
OAIOrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(total_width.isSet()){ isObjectUpdated = true; break;}
    
        if(col_width_name.isSet()){ isObjectUpdated = true; break;}
    
        if(col_width_result.isSet()){ isObjectUpdated = true; break;}
    
        if(col_width_timing.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

