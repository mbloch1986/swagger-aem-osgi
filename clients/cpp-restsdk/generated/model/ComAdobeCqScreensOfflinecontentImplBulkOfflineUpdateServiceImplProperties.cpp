/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProperties::ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProperties()
{
    m_Com_adobe_cq_screens_offlinecontent_impl_BulkOfflineUpdateServiceImpl_projectPathIsSet = false;
    m_Com_adobe_cq_screens_offlinecontent_impl_BulkOfflineUpdateServiceImpl_scheduleFrequencyIsSet = false;
}

ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProperties::~ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProperties()
{
}

void ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Com_adobe_cq_screens_offlinecontent_impl_BulkOfflineUpdateServiceImpl_projectPathIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.cq.screens.offlinecontent.impl.BulkOfflineUpdateServiceImpl.projectPath")] = ModelBase::toJson(m_Com_adobe_cq_screens_offlinecontent_impl_BulkOfflineUpdateServiceImpl_projectPath);
    }
    if(m_Com_adobe_cq_screens_offlinecontent_impl_BulkOfflineUpdateServiceImpl_scheduleFrequencyIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.cq.screens.offlinecontent.impl.BulkOfflineUpdateServiceImpl.scheduleFrequency")] = ModelBase::toJson(m_Com_adobe_cq_screens_offlinecontent_impl_BulkOfflineUpdateServiceImpl_scheduleFrequency);
    }

    return val;
}

void ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("com.adobe.cq.screens.offlinecontent.impl.BulkOfflineUpdateServiceImpl.projectPath")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.cq.screens.offlinecontent.impl.BulkOfflineUpdateServiceImpl.projectPath")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.cq.screens.offlinecontent.impl.BulkOfflineUpdateServiceImpl.projectPath")]);
            setComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProjectPath( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.adobe.cq.screens.offlinecontent.impl.BulkOfflineUpdateServiceImpl.scheduleFrequency")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.cq.screens.offlinecontent.impl.BulkOfflineUpdateServiceImpl.scheduleFrequency")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.cq.screens.offlinecontent.impl.BulkOfflineUpdateServiceImpl.scheduleFrequency")]);
            setComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplScheduleFrequency( newItem );
        }
    }
}

void ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Com_adobe_cq_screens_offlinecontent_impl_BulkOfflineUpdateServiceImpl_projectPathIsSet)
    {
        if (m_Com_adobe_cq_screens_offlinecontent_impl_BulkOfflineUpdateServiceImpl_projectPath.get())
        {
            m_Com_adobe_cq_screens_offlinecontent_impl_BulkOfflineUpdateServiceImpl_projectPath->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.cq.screens.offlinecontent.impl.BulkOfflineUpdateServiceImpl.projectPath."));
        }
    }
    if(m_Com_adobe_cq_screens_offlinecontent_impl_BulkOfflineUpdateServiceImpl_scheduleFrequencyIsSet)
    {
        if (m_Com_adobe_cq_screens_offlinecontent_impl_BulkOfflineUpdateServiceImpl_scheduleFrequency.get())
        {
            m_Com_adobe_cq_screens_offlinecontent_impl_BulkOfflineUpdateServiceImpl_scheduleFrequency->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.cq.screens.offlinecontent.impl.BulkOfflineUpdateServiceImpl.scheduleFrequency."));
        }
    }
}

void ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.screens.offlinecontent.impl.BulkOfflineUpdateServiceImpl.projectPath")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.screens.offlinecontent.impl.BulkOfflineUpdateServiceImpl.projectPath")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.cq.screens.offlinecontent.impl.BulkOfflineUpdateServiceImpl.projectPath."));
            setComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProjectPath( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.screens.offlinecontent.impl.BulkOfflineUpdateServiceImpl.scheduleFrequency")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.cq.screens.offlinecontent.impl.BulkOfflineUpdateServiceImpl.scheduleFrequency")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.cq.screens.offlinecontent.impl.BulkOfflineUpdateServiceImpl.scheduleFrequency."));
            setComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplScheduleFrequency( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyArray> ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProperties::getComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProjectPath() const
{
    return m_Com_adobe_cq_screens_offlinecontent_impl_BulkOfflineUpdateServiceImpl_projectPath;
}


void ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProperties::setComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProjectPath(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Com_adobe_cq_screens_offlinecontent_impl_BulkOfflineUpdateServiceImpl_projectPath = value;
    m_Com_adobe_cq_screens_offlinecontent_impl_BulkOfflineUpdateServiceImpl_projectPathIsSet = true;
}
bool ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProperties::comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProjectPathIsSet() const
{
    return m_Com_adobe_cq_screens_offlinecontent_impl_BulkOfflineUpdateServiceImpl_projectPathIsSet;
}

void ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProperties::unsetCom_adobe_cq_screens_offlinecontent_impl_BulkOfflineUpdateServiceImpl_projectPath()
{
    m_Com_adobe_cq_screens_offlinecontent_impl_BulkOfflineUpdateServiceImpl_projectPathIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProperties::getComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplScheduleFrequency() const
{
    return m_Com_adobe_cq_screens_offlinecontent_impl_BulkOfflineUpdateServiceImpl_scheduleFrequency;
}


void ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProperties::setComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplScheduleFrequency(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Com_adobe_cq_screens_offlinecontent_impl_BulkOfflineUpdateServiceImpl_scheduleFrequency = value;
    m_Com_adobe_cq_screens_offlinecontent_impl_BulkOfflineUpdateServiceImpl_scheduleFrequencyIsSet = true;
}
bool ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProperties::comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplScheduleFrequencyIsSet() const
{
    return m_Com_adobe_cq_screens_offlinecontent_impl_BulkOfflineUpdateServiceImpl_scheduleFrequencyIsSet;
}

void ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProperties::unsetCom_adobe_cq_screens_offlinecontent_impl_BulkOfflineUpdateServiceImpl_scheduleFrequency()
{
    m_Com_adobe_cq_screens_offlinecontent_impl_BulkOfflineUpdateServiceImpl_scheduleFrequencyIsSet = false;
}

}
}
}
}

