/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckProperties::OAIComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckProperties(QString json) {
    this->fromJson(json);
}

OAIComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckProperties::OAIComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckProperties() {
    this->init();
}

OAIComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckProperties::~OAIComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckProperties() {
    
}

void
OAIComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckProperties::init() {
    m_hc_tags_isSet = false;
    m_webserver_address_isSet = false;
}

void
OAIComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(hc_tags, json[QString("hc.tags")]);
    
    ::OpenAPI::fromJsonValue(webserver_address, json[QString("webserver.address")]);
    
}

QString
OAIComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckProperties::asJsonObject() const {
    QJsonObject obj;
	if(hc_tags.isSet()){
        obj.insert(QString("hc.tags"), ::OpenAPI::toJsonValue(hc_tags));
    }
	if(webserver_address.isSet()){
        obj.insert(QString("webserver.address"), ::OpenAPI::toJsonValue(webserver_address));
    }
    return obj;
}

OAIConfigNodePropertyArray
OAIComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckProperties::getHcTags() const {
    return hc_tags;
}
void
OAIComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckProperties::setHcTags(const OAIConfigNodePropertyArray &hc_tags) {
    this->hc_tags = hc_tags;
    this->m_hc_tags_isSet = true;
}

OAIConfigNodePropertyString
OAIComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckProperties::getWebserverAddress() const {
    return webserver_address;
}
void
OAIComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckProperties::setWebserverAddress(const OAIConfigNodePropertyString &webserver_address) {
    this->webserver_address = webserver_address;
    this->m_webserver_address_isSet = true;
}


bool
OAIComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(hc_tags.isSet()){ isObjectUpdated = true; break;}
    
        if(webserver_address.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

