<?php
/**
 * OrgApacheSlingDatasourceDataSourceFactoryProperties
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.2.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * OrgApacheSlingDatasourceDataSourceFactoryProperties Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class OrgApacheSlingDatasourceDataSourceFactoryProperties implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'orgApacheSlingDatasourceDataSourceFactoryProperties';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'datasource_name' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'datasource_svc_prop_name' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'driver_class_name' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'url' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'username' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'password' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'default_auto_commit' => '\OpenAPI\Client\Model\ConfigNodePropertyDropDown',
        'default_read_only' => '\OpenAPI\Client\Model\ConfigNodePropertyDropDown',
        'default_transaction_isolation' => '\OpenAPI\Client\Model\ConfigNodePropertyDropDown',
        'default_catalog' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'max_active' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'max_idle' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'min_idle' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'initial_size' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'max_wait' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'max_age' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'test_on_borrow' => '\OpenAPI\Client\Model\ConfigNodePropertyBoolean',
        'test_on_return' => '\OpenAPI\Client\Model\ConfigNodePropertyBoolean',
        'test_while_idle' => '\OpenAPI\Client\Model\ConfigNodePropertyBoolean',
        'validation_query' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'validation_query_timeout' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'time_between_eviction_runs_millis' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'min_evictable_idle_time_millis' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'connection_properties' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'init_sql' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'jdbc_interceptors' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'validation_interval' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'log_validation_errors' => '\OpenAPI\Client\Model\ConfigNodePropertyBoolean',
        'datasource_svc_properties' => '\OpenAPI\Client\Model\ConfigNodePropertyArray'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'datasource_name' => null,
        'datasource_svc_prop_name' => null,
        'driver_class_name' => null,
        'url' => null,
        'username' => null,
        'password' => null,
        'default_auto_commit' => null,
        'default_read_only' => null,
        'default_transaction_isolation' => null,
        'default_catalog' => null,
        'max_active' => null,
        'max_idle' => null,
        'min_idle' => null,
        'initial_size' => null,
        'max_wait' => null,
        'max_age' => null,
        'test_on_borrow' => null,
        'test_on_return' => null,
        'test_while_idle' => null,
        'validation_query' => null,
        'validation_query_timeout' => null,
        'time_between_eviction_runs_millis' => null,
        'min_evictable_idle_time_millis' => null,
        'connection_properties' => null,
        'init_sql' => null,
        'jdbc_interceptors' => null,
        'validation_interval' => null,
        'log_validation_errors' => null,
        'datasource_svc_properties' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'datasource_name' => 'datasource.name',
        'datasource_svc_prop_name' => 'datasource.svc.prop.name',
        'driver_class_name' => 'driverClassName',
        'url' => 'url',
        'username' => 'username',
        'password' => 'password',
        'default_auto_commit' => 'defaultAutoCommit',
        'default_read_only' => 'defaultReadOnly',
        'default_transaction_isolation' => 'defaultTransactionIsolation',
        'default_catalog' => 'defaultCatalog',
        'max_active' => 'maxActive',
        'max_idle' => 'maxIdle',
        'min_idle' => 'minIdle',
        'initial_size' => 'initialSize',
        'max_wait' => 'maxWait',
        'max_age' => 'maxAge',
        'test_on_borrow' => 'testOnBorrow',
        'test_on_return' => 'testOnReturn',
        'test_while_idle' => 'testWhileIdle',
        'validation_query' => 'validationQuery',
        'validation_query_timeout' => 'validationQueryTimeout',
        'time_between_eviction_runs_millis' => 'timeBetweenEvictionRunsMillis',
        'min_evictable_idle_time_millis' => 'minEvictableIdleTimeMillis',
        'connection_properties' => 'connectionProperties',
        'init_sql' => 'initSQL',
        'jdbc_interceptors' => 'jdbcInterceptors',
        'validation_interval' => 'validationInterval',
        'log_validation_errors' => 'logValidationErrors',
        'datasource_svc_properties' => 'datasource.svc.properties'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'datasource_name' => 'setDatasourceName',
        'datasource_svc_prop_name' => 'setDatasourceSvcPropName',
        'driver_class_name' => 'setDriverClassName',
        'url' => 'setUrl',
        'username' => 'setUsername',
        'password' => 'setPassword',
        'default_auto_commit' => 'setDefaultAutoCommit',
        'default_read_only' => 'setDefaultReadOnly',
        'default_transaction_isolation' => 'setDefaultTransactionIsolation',
        'default_catalog' => 'setDefaultCatalog',
        'max_active' => 'setMaxActive',
        'max_idle' => 'setMaxIdle',
        'min_idle' => 'setMinIdle',
        'initial_size' => 'setInitialSize',
        'max_wait' => 'setMaxWait',
        'max_age' => 'setMaxAge',
        'test_on_borrow' => 'setTestOnBorrow',
        'test_on_return' => 'setTestOnReturn',
        'test_while_idle' => 'setTestWhileIdle',
        'validation_query' => 'setValidationQuery',
        'validation_query_timeout' => 'setValidationQueryTimeout',
        'time_between_eviction_runs_millis' => 'setTimeBetweenEvictionRunsMillis',
        'min_evictable_idle_time_millis' => 'setMinEvictableIdleTimeMillis',
        'connection_properties' => 'setConnectionProperties',
        'init_sql' => 'setInitSql',
        'jdbc_interceptors' => 'setJdbcInterceptors',
        'validation_interval' => 'setValidationInterval',
        'log_validation_errors' => 'setLogValidationErrors',
        'datasource_svc_properties' => 'setDatasourceSvcProperties'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'datasource_name' => 'getDatasourceName',
        'datasource_svc_prop_name' => 'getDatasourceSvcPropName',
        'driver_class_name' => 'getDriverClassName',
        'url' => 'getUrl',
        'username' => 'getUsername',
        'password' => 'getPassword',
        'default_auto_commit' => 'getDefaultAutoCommit',
        'default_read_only' => 'getDefaultReadOnly',
        'default_transaction_isolation' => 'getDefaultTransactionIsolation',
        'default_catalog' => 'getDefaultCatalog',
        'max_active' => 'getMaxActive',
        'max_idle' => 'getMaxIdle',
        'min_idle' => 'getMinIdle',
        'initial_size' => 'getInitialSize',
        'max_wait' => 'getMaxWait',
        'max_age' => 'getMaxAge',
        'test_on_borrow' => 'getTestOnBorrow',
        'test_on_return' => 'getTestOnReturn',
        'test_while_idle' => 'getTestWhileIdle',
        'validation_query' => 'getValidationQuery',
        'validation_query_timeout' => 'getValidationQueryTimeout',
        'time_between_eviction_runs_millis' => 'getTimeBetweenEvictionRunsMillis',
        'min_evictable_idle_time_millis' => 'getMinEvictableIdleTimeMillis',
        'connection_properties' => 'getConnectionProperties',
        'init_sql' => 'getInitSql',
        'jdbc_interceptors' => 'getJdbcInterceptors',
        'validation_interval' => 'getValidationInterval',
        'log_validation_errors' => 'getLogValidationErrors',
        'datasource_svc_properties' => 'getDatasourceSvcProperties'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['datasource_name'] = isset($data['datasource_name']) ? $data['datasource_name'] : null;
        $this->container['datasource_svc_prop_name'] = isset($data['datasource_svc_prop_name']) ? $data['datasource_svc_prop_name'] : null;
        $this->container['driver_class_name'] = isset($data['driver_class_name']) ? $data['driver_class_name'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['username'] = isset($data['username']) ? $data['username'] : null;
        $this->container['password'] = isset($data['password']) ? $data['password'] : null;
        $this->container['default_auto_commit'] = isset($data['default_auto_commit']) ? $data['default_auto_commit'] : null;
        $this->container['default_read_only'] = isset($data['default_read_only']) ? $data['default_read_only'] : null;
        $this->container['default_transaction_isolation'] = isset($data['default_transaction_isolation']) ? $data['default_transaction_isolation'] : null;
        $this->container['default_catalog'] = isset($data['default_catalog']) ? $data['default_catalog'] : null;
        $this->container['max_active'] = isset($data['max_active']) ? $data['max_active'] : null;
        $this->container['max_idle'] = isset($data['max_idle']) ? $data['max_idle'] : null;
        $this->container['min_idle'] = isset($data['min_idle']) ? $data['min_idle'] : null;
        $this->container['initial_size'] = isset($data['initial_size']) ? $data['initial_size'] : null;
        $this->container['max_wait'] = isset($data['max_wait']) ? $data['max_wait'] : null;
        $this->container['max_age'] = isset($data['max_age']) ? $data['max_age'] : null;
        $this->container['test_on_borrow'] = isset($data['test_on_borrow']) ? $data['test_on_borrow'] : null;
        $this->container['test_on_return'] = isset($data['test_on_return']) ? $data['test_on_return'] : null;
        $this->container['test_while_idle'] = isset($data['test_while_idle']) ? $data['test_while_idle'] : null;
        $this->container['validation_query'] = isset($data['validation_query']) ? $data['validation_query'] : null;
        $this->container['validation_query_timeout'] = isset($data['validation_query_timeout']) ? $data['validation_query_timeout'] : null;
        $this->container['time_between_eviction_runs_millis'] = isset($data['time_between_eviction_runs_millis']) ? $data['time_between_eviction_runs_millis'] : null;
        $this->container['min_evictable_idle_time_millis'] = isset($data['min_evictable_idle_time_millis']) ? $data['min_evictable_idle_time_millis'] : null;
        $this->container['connection_properties'] = isset($data['connection_properties']) ? $data['connection_properties'] : null;
        $this->container['init_sql'] = isset($data['init_sql']) ? $data['init_sql'] : null;
        $this->container['jdbc_interceptors'] = isset($data['jdbc_interceptors']) ? $data['jdbc_interceptors'] : null;
        $this->container['validation_interval'] = isset($data['validation_interval']) ? $data['validation_interval'] : null;
        $this->container['log_validation_errors'] = isset($data['log_validation_errors']) ? $data['log_validation_errors'] : null;
        $this->container['datasource_svc_properties'] = isset($data['datasource_svc_properties']) ? $data['datasource_svc_properties'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets datasource_name
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getDatasourceName()
    {
        return $this->container['datasource_name'];
    }

    /**
     * Sets datasource_name
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $datasource_name datasource_name
     *
     * @return $this
     */
    public function setDatasourceName($datasource_name)
    {
        $this->container['datasource_name'] = $datasource_name;

        return $this;
    }

    /**
     * Gets datasource_svc_prop_name
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getDatasourceSvcPropName()
    {
        return $this->container['datasource_svc_prop_name'];
    }

    /**
     * Sets datasource_svc_prop_name
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $datasource_svc_prop_name datasource_svc_prop_name
     *
     * @return $this
     */
    public function setDatasourceSvcPropName($datasource_svc_prop_name)
    {
        $this->container['datasource_svc_prop_name'] = $datasource_svc_prop_name;

        return $this;
    }

    /**
     * Gets driver_class_name
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getDriverClassName()
    {
        return $this->container['driver_class_name'];
    }

    /**
     * Sets driver_class_name
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $driver_class_name driver_class_name
     *
     * @return $this
     */
    public function setDriverClassName($driver_class_name)
    {
        $this->container['driver_class_name'] = $driver_class_name;

        return $this;
    }

    /**
     * Gets url
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $url url
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets username
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $username username
     *
     * @return $this
     */
    public function setUsername($username)
    {
        $this->container['username'] = $username;

        return $this;
    }

    /**
     * Gets password
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $password password
     *
     * @return $this
     */
    public function setPassword($password)
    {
        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets default_auto_commit
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyDropDown|null
     */
    public function getDefaultAutoCommit()
    {
        return $this->container['default_auto_commit'];
    }

    /**
     * Sets default_auto_commit
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyDropDown|null $default_auto_commit default_auto_commit
     *
     * @return $this
     */
    public function setDefaultAutoCommit($default_auto_commit)
    {
        $this->container['default_auto_commit'] = $default_auto_commit;

        return $this;
    }

    /**
     * Gets default_read_only
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyDropDown|null
     */
    public function getDefaultReadOnly()
    {
        return $this->container['default_read_only'];
    }

    /**
     * Sets default_read_only
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyDropDown|null $default_read_only default_read_only
     *
     * @return $this
     */
    public function setDefaultReadOnly($default_read_only)
    {
        $this->container['default_read_only'] = $default_read_only;

        return $this;
    }

    /**
     * Gets default_transaction_isolation
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyDropDown|null
     */
    public function getDefaultTransactionIsolation()
    {
        return $this->container['default_transaction_isolation'];
    }

    /**
     * Sets default_transaction_isolation
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyDropDown|null $default_transaction_isolation default_transaction_isolation
     *
     * @return $this
     */
    public function setDefaultTransactionIsolation($default_transaction_isolation)
    {
        $this->container['default_transaction_isolation'] = $default_transaction_isolation;

        return $this;
    }

    /**
     * Gets default_catalog
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getDefaultCatalog()
    {
        return $this->container['default_catalog'];
    }

    /**
     * Sets default_catalog
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $default_catalog default_catalog
     *
     * @return $this
     */
    public function setDefaultCatalog($default_catalog)
    {
        $this->container['default_catalog'] = $default_catalog;

        return $this;
    }

    /**
     * Gets max_active
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getMaxActive()
    {
        return $this->container['max_active'];
    }

    /**
     * Sets max_active
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $max_active max_active
     *
     * @return $this
     */
    public function setMaxActive($max_active)
    {
        $this->container['max_active'] = $max_active;

        return $this;
    }

    /**
     * Gets max_idle
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getMaxIdle()
    {
        return $this->container['max_idle'];
    }

    /**
     * Sets max_idle
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $max_idle max_idle
     *
     * @return $this
     */
    public function setMaxIdle($max_idle)
    {
        $this->container['max_idle'] = $max_idle;

        return $this;
    }

    /**
     * Gets min_idle
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getMinIdle()
    {
        return $this->container['min_idle'];
    }

    /**
     * Sets min_idle
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $min_idle min_idle
     *
     * @return $this
     */
    public function setMinIdle($min_idle)
    {
        $this->container['min_idle'] = $min_idle;

        return $this;
    }

    /**
     * Gets initial_size
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getInitialSize()
    {
        return $this->container['initial_size'];
    }

    /**
     * Sets initial_size
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $initial_size initial_size
     *
     * @return $this
     */
    public function setInitialSize($initial_size)
    {
        $this->container['initial_size'] = $initial_size;

        return $this;
    }

    /**
     * Gets max_wait
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getMaxWait()
    {
        return $this->container['max_wait'];
    }

    /**
     * Sets max_wait
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $max_wait max_wait
     *
     * @return $this
     */
    public function setMaxWait($max_wait)
    {
        $this->container['max_wait'] = $max_wait;

        return $this;
    }

    /**
     * Gets max_age
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getMaxAge()
    {
        return $this->container['max_age'];
    }

    /**
     * Sets max_age
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $max_age max_age
     *
     * @return $this
     */
    public function setMaxAge($max_age)
    {
        $this->container['max_age'] = $max_age;

        return $this;
    }

    /**
     * Gets test_on_borrow
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null
     */
    public function getTestOnBorrow()
    {
        return $this->container['test_on_borrow'];
    }

    /**
     * Sets test_on_borrow
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null $test_on_borrow test_on_borrow
     *
     * @return $this
     */
    public function setTestOnBorrow($test_on_borrow)
    {
        $this->container['test_on_borrow'] = $test_on_borrow;

        return $this;
    }

    /**
     * Gets test_on_return
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null
     */
    public function getTestOnReturn()
    {
        return $this->container['test_on_return'];
    }

    /**
     * Sets test_on_return
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null $test_on_return test_on_return
     *
     * @return $this
     */
    public function setTestOnReturn($test_on_return)
    {
        $this->container['test_on_return'] = $test_on_return;

        return $this;
    }

    /**
     * Gets test_while_idle
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null
     */
    public function getTestWhileIdle()
    {
        return $this->container['test_while_idle'];
    }

    /**
     * Sets test_while_idle
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null $test_while_idle test_while_idle
     *
     * @return $this
     */
    public function setTestWhileIdle($test_while_idle)
    {
        $this->container['test_while_idle'] = $test_while_idle;

        return $this;
    }

    /**
     * Gets validation_query
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getValidationQuery()
    {
        return $this->container['validation_query'];
    }

    /**
     * Sets validation_query
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $validation_query validation_query
     *
     * @return $this
     */
    public function setValidationQuery($validation_query)
    {
        $this->container['validation_query'] = $validation_query;

        return $this;
    }

    /**
     * Gets validation_query_timeout
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getValidationQueryTimeout()
    {
        return $this->container['validation_query_timeout'];
    }

    /**
     * Sets validation_query_timeout
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $validation_query_timeout validation_query_timeout
     *
     * @return $this
     */
    public function setValidationQueryTimeout($validation_query_timeout)
    {
        $this->container['validation_query_timeout'] = $validation_query_timeout;

        return $this;
    }

    /**
     * Gets time_between_eviction_runs_millis
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getTimeBetweenEvictionRunsMillis()
    {
        return $this->container['time_between_eviction_runs_millis'];
    }

    /**
     * Sets time_between_eviction_runs_millis
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $time_between_eviction_runs_millis time_between_eviction_runs_millis
     *
     * @return $this
     */
    public function setTimeBetweenEvictionRunsMillis($time_between_eviction_runs_millis)
    {
        $this->container['time_between_eviction_runs_millis'] = $time_between_eviction_runs_millis;

        return $this;
    }

    /**
     * Gets min_evictable_idle_time_millis
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getMinEvictableIdleTimeMillis()
    {
        return $this->container['min_evictable_idle_time_millis'];
    }

    /**
     * Sets min_evictable_idle_time_millis
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $min_evictable_idle_time_millis min_evictable_idle_time_millis
     *
     * @return $this
     */
    public function setMinEvictableIdleTimeMillis($min_evictable_idle_time_millis)
    {
        $this->container['min_evictable_idle_time_millis'] = $min_evictable_idle_time_millis;

        return $this;
    }

    /**
     * Gets connection_properties
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getConnectionProperties()
    {
        return $this->container['connection_properties'];
    }

    /**
     * Sets connection_properties
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $connection_properties connection_properties
     *
     * @return $this
     */
    public function setConnectionProperties($connection_properties)
    {
        $this->container['connection_properties'] = $connection_properties;

        return $this;
    }

    /**
     * Gets init_sql
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getInitSql()
    {
        return $this->container['init_sql'];
    }

    /**
     * Sets init_sql
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $init_sql init_sql
     *
     * @return $this
     */
    public function setInitSql($init_sql)
    {
        $this->container['init_sql'] = $init_sql;

        return $this;
    }

    /**
     * Gets jdbc_interceptors
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getJdbcInterceptors()
    {
        return $this->container['jdbc_interceptors'];
    }

    /**
     * Sets jdbc_interceptors
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $jdbc_interceptors jdbc_interceptors
     *
     * @return $this
     */
    public function setJdbcInterceptors($jdbc_interceptors)
    {
        $this->container['jdbc_interceptors'] = $jdbc_interceptors;

        return $this;
    }

    /**
     * Gets validation_interval
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getValidationInterval()
    {
        return $this->container['validation_interval'];
    }

    /**
     * Sets validation_interval
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $validation_interval validation_interval
     *
     * @return $this
     */
    public function setValidationInterval($validation_interval)
    {
        $this->container['validation_interval'] = $validation_interval;

        return $this;
    }

    /**
     * Gets log_validation_errors
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null
     */
    public function getLogValidationErrors()
    {
        return $this->container['log_validation_errors'];
    }

    /**
     * Sets log_validation_errors
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null $log_validation_errors log_validation_errors
     *
     * @return $this
     */
    public function setLogValidationErrors($log_validation_errors)
    {
        $this->container['log_validation_errors'] = $log_validation_errors;

        return $this;
    }

    /**
     * Gets datasource_svc_properties
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyArray|null
     */
    public function getDatasourceSvcProperties()
    {
        return $this->container['datasource_svc_properties'];
    }

    /**
     * Sets datasource_svc_properties
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyArray|null $datasource_svc_properties datasource_svc_properties
     *
     * @return $this
     */
    public function setDatasourceSvcProperties($datasource_svc_properties)
    {
        $this->container['datasource_svc_properties'] = $datasource_svc_properties;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


