/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ComAdobeCqDamS7imagingImplIsImageServerComponentProperties.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_ComAdobeCqDamS7imagingImplIsImageServerComponentProperties_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_ComAdobeCqDamS7imagingImplIsImageServerComponentProperties_H_


#include "../ModelBase.h"

#include "ConfigNodePropertyBoolean.h"
#include "ConfigNodePropertyInteger.h"
#include "ConfigNodePropertyString.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  ComAdobeCqDamS7imagingImplIsImageServerComponentProperties
    : public ModelBase
{
public:
    ComAdobeCqDamS7imagingImplIsImageServerComponentProperties();
    virtual ~ComAdobeCqDamS7imagingImplIsImageServerComponentProperties();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// ComAdobeCqDamS7imagingImplIsImageServerComponentProperties members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getTcpPort() const;
    bool tcpPortIsSet() const;
    void unsetTcpPort();
    void setTcpPort(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getAllowRemoteAccess() const;
    bool allowRemoteAccessIsSet() const;
    void unsetAllowRemoteAccess();
    void setAllowRemoteAccess(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getMaxRenderRgnPixels() const;
    bool maxRenderRgnPixelsIsSet() const;
    void unsetMaxRenderRgnPixels();
    void setMaxRenderRgnPixels(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getMaxMessageSize() const;
    bool maxMessageSizeIsSet() const;
    void unsetMaxMessageSize();
    void setMaxMessageSize(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getRandomAccessUrlTimeout() const;
    bool randomAccessUrlTimeoutIsSet() const;
    void unsetRandomAccessUrlTimeout();
    void setRandomAccessUrlTimeout(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getWorkerThreads() const;
    bool workerThreadsIsSet() const;
    void unsetWorkerThreads();
    void setWorkerThreads(std::shared_ptr<ConfigNodePropertyInteger> value);

protected:
    std::shared_ptr<ConfigNodePropertyString> m_TcpPort;
    bool m_TcpPortIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_AllowRemoteAccess;
    bool m_AllowRemoteAccessIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_MaxRenderRgnPixels;
    bool m_MaxRenderRgnPixelsIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_MaxMessageSize;
    bool m_MaxMessageSizeIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_RandomAccessUrlTimeout;
    bool m_RandomAccessUrlTimeoutIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_WorkerThreads;
    bool m_WorkerThreadsIsSet;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_ComAdobeCqDamS7imagingImplIsImageServerComponentProperties_H_ */
