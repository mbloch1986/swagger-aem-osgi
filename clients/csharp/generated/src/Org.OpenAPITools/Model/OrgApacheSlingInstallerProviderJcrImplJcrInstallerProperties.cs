/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// OrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties
    /// </summary>
    [DataContract]
    public partial class OrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties :  IEquatable<OrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties" /> class.
        /// </summary>
        /// <param name="handlerSchemes">handlerSchemes.</param>
        /// <param name="slingJcrinstallFolderNameRegexp">slingJcrinstallFolderNameRegexp.</param>
        /// <param name="slingJcrinstallFolderMaxDepth">slingJcrinstallFolderMaxDepth.</param>
        /// <param name="slingJcrinstallSearchPath">slingJcrinstallSearchPath.</param>
        /// <param name="slingJcrinstallNewConfigPath">slingJcrinstallNewConfigPath.</param>
        /// <param name="slingJcrinstallSignalPath">slingJcrinstallSignalPath.</param>
        /// <param name="slingJcrinstallEnableWriteback">slingJcrinstallEnableWriteback.</param>
        public OrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties(ConfigNodePropertyArray handlerSchemes = default(ConfigNodePropertyArray), ConfigNodePropertyString slingJcrinstallFolderNameRegexp = default(ConfigNodePropertyString), ConfigNodePropertyInteger slingJcrinstallFolderMaxDepth = default(ConfigNodePropertyInteger), ConfigNodePropertyArray slingJcrinstallSearchPath = default(ConfigNodePropertyArray), ConfigNodePropertyString slingJcrinstallNewConfigPath = default(ConfigNodePropertyString), ConfigNodePropertyString slingJcrinstallSignalPath = default(ConfigNodePropertyString), ConfigNodePropertyBoolean slingJcrinstallEnableWriteback = default(ConfigNodePropertyBoolean))
        {
            this.HandlerSchemes = handlerSchemes;
            this.SlingJcrinstallFolderNameRegexp = slingJcrinstallFolderNameRegexp;
            this.SlingJcrinstallFolderMaxDepth = slingJcrinstallFolderMaxDepth;
            this.SlingJcrinstallSearchPath = slingJcrinstallSearchPath;
            this.SlingJcrinstallNewConfigPath = slingJcrinstallNewConfigPath;
            this.SlingJcrinstallSignalPath = slingJcrinstallSignalPath;
            this.SlingJcrinstallEnableWriteback = slingJcrinstallEnableWriteback;
        }
        
        /// <summary>
        /// Gets or Sets HandlerSchemes
        /// </summary>
        [DataMember(Name="handler.schemes", EmitDefaultValue=false)]
        public ConfigNodePropertyArray HandlerSchemes { get; set; }

        /// <summary>
        /// Gets or Sets SlingJcrinstallFolderNameRegexp
        /// </summary>
        [DataMember(Name="sling.jcrinstall.folder.name.regexp", EmitDefaultValue=false)]
        public ConfigNodePropertyString SlingJcrinstallFolderNameRegexp { get; set; }

        /// <summary>
        /// Gets or Sets SlingJcrinstallFolderMaxDepth
        /// </summary>
        [DataMember(Name="sling.jcrinstall.folder.max.depth", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger SlingJcrinstallFolderMaxDepth { get; set; }

        /// <summary>
        /// Gets or Sets SlingJcrinstallSearchPath
        /// </summary>
        [DataMember(Name="sling.jcrinstall.search.path", EmitDefaultValue=false)]
        public ConfigNodePropertyArray SlingJcrinstallSearchPath { get; set; }

        /// <summary>
        /// Gets or Sets SlingJcrinstallNewConfigPath
        /// </summary>
        [DataMember(Name="sling.jcrinstall.new.config.path", EmitDefaultValue=false)]
        public ConfigNodePropertyString SlingJcrinstallNewConfigPath { get; set; }

        /// <summary>
        /// Gets or Sets SlingJcrinstallSignalPath
        /// </summary>
        [DataMember(Name="sling.jcrinstall.signal.path", EmitDefaultValue=false)]
        public ConfigNodePropertyString SlingJcrinstallSignalPath { get; set; }

        /// <summary>
        /// Gets or Sets SlingJcrinstallEnableWriteback
        /// </summary>
        [DataMember(Name="sling.jcrinstall.enable.writeback", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean SlingJcrinstallEnableWriteback { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties {\n");
            sb.Append("  HandlerSchemes: ").Append(HandlerSchemes).Append("\n");
            sb.Append("  SlingJcrinstallFolderNameRegexp: ").Append(SlingJcrinstallFolderNameRegexp).Append("\n");
            sb.Append("  SlingJcrinstallFolderMaxDepth: ").Append(SlingJcrinstallFolderMaxDepth).Append("\n");
            sb.Append("  SlingJcrinstallSearchPath: ").Append(SlingJcrinstallSearchPath).Append("\n");
            sb.Append("  SlingJcrinstallNewConfigPath: ").Append(SlingJcrinstallNewConfigPath).Append("\n");
            sb.Append("  SlingJcrinstallSignalPath: ").Append(SlingJcrinstallSignalPath).Append("\n");
            sb.Append("  SlingJcrinstallEnableWriteback: ").Append(SlingJcrinstallEnableWriteback).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties);
        }

        /// <summary>
        /// Returns true if OrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of OrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrgApacheSlingInstallerProviderJcrImplJcrInstallerProperties input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.HandlerSchemes == input.HandlerSchemes ||
                    (this.HandlerSchemes != null &&
                    this.HandlerSchemes.Equals(input.HandlerSchemes))
                ) && 
                (
                    this.SlingJcrinstallFolderNameRegexp == input.SlingJcrinstallFolderNameRegexp ||
                    (this.SlingJcrinstallFolderNameRegexp != null &&
                    this.SlingJcrinstallFolderNameRegexp.Equals(input.SlingJcrinstallFolderNameRegexp))
                ) && 
                (
                    this.SlingJcrinstallFolderMaxDepth == input.SlingJcrinstallFolderMaxDepth ||
                    (this.SlingJcrinstallFolderMaxDepth != null &&
                    this.SlingJcrinstallFolderMaxDepth.Equals(input.SlingJcrinstallFolderMaxDepth))
                ) && 
                (
                    this.SlingJcrinstallSearchPath == input.SlingJcrinstallSearchPath ||
                    (this.SlingJcrinstallSearchPath != null &&
                    this.SlingJcrinstallSearchPath.Equals(input.SlingJcrinstallSearchPath))
                ) && 
                (
                    this.SlingJcrinstallNewConfigPath == input.SlingJcrinstallNewConfigPath ||
                    (this.SlingJcrinstallNewConfigPath != null &&
                    this.SlingJcrinstallNewConfigPath.Equals(input.SlingJcrinstallNewConfigPath))
                ) && 
                (
                    this.SlingJcrinstallSignalPath == input.SlingJcrinstallSignalPath ||
                    (this.SlingJcrinstallSignalPath != null &&
                    this.SlingJcrinstallSignalPath.Equals(input.SlingJcrinstallSignalPath))
                ) && 
                (
                    this.SlingJcrinstallEnableWriteback == input.SlingJcrinstallEnableWriteback ||
                    (this.SlingJcrinstallEnableWriteback != null &&
                    this.SlingJcrinstallEnableWriteback.Equals(input.SlingJcrinstallEnableWriteback))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.HandlerSchemes != null)
                    hashCode = hashCode * 59 + this.HandlerSchemes.GetHashCode();
                if (this.SlingJcrinstallFolderNameRegexp != null)
                    hashCode = hashCode * 59 + this.SlingJcrinstallFolderNameRegexp.GetHashCode();
                if (this.SlingJcrinstallFolderMaxDepth != null)
                    hashCode = hashCode * 59 + this.SlingJcrinstallFolderMaxDepth.GetHashCode();
                if (this.SlingJcrinstallSearchPath != null)
                    hashCode = hashCode * 59 + this.SlingJcrinstallSearchPath.GetHashCode();
                if (this.SlingJcrinstallNewConfigPath != null)
                    hashCode = hashCode * 59 + this.SlingJcrinstallNewConfigPath.GetHashCode();
                if (this.SlingJcrinstallSignalPath != null)
                    hashCode = hashCode * 59 + this.SlingJcrinstallSignalPath.GetHashCode();
                if (this.SlingJcrinstallEnableWriteback != null)
                    hashCode = hashCode * 59 + this.SlingJcrinstallEnableWriteback.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
