/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ComAdobeGraniteRepositoryImplCommitStatsConfigProperties
    /// </summary>
    [DataContract]
    public partial class ComAdobeGraniteRepositoryImplCommitStatsConfigProperties :  IEquatable<ComAdobeGraniteRepositoryImplCommitStatsConfigProperties>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ComAdobeGraniteRepositoryImplCommitStatsConfigProperties" /> class.
        /// </summary>
        /// <param name="enabled">enabled.</param>
        /// <param name="intervalSeconds">intervalSeconds.</param>
        /// <param name="commitsPerIntervalThreshold">commitsPerIntervalThreshold.</param>
        /// <param name="maxLocationLength">maxLocationLength.</param>
        /// <param name="maxDetailsShown">maxDetailsShown.</param>
        /// <param name="minDetailsPercentage">minDetailsPercentage.</param>
        /// <param name="threadMatchers">threadMatchers.</param>
        /// <param name="maxGreedyDepth">maxGreedyDepth.</param>
        /// <param name="greedyStackMatchers">greedyStackMatchers.</param>
        /// <param name="stackFilters">stackFilters.</param>
        /// <param name="stackMatchers">stackMatchers.</param>
        /// <param name="stackCategorizers">stackCategorizers.</param>
        /// <param name="stackShorteners">stackShorteners.</param>
        public ComAdobeGraniteRepositoryImplCommitStatsConfigProperties(ConfigNodePropertyBoolean enabled = default(ConfigNodePropertyBoolean), ConfigNodePropertyInteger intervalSeconds = default(ConfigNodePropertyInteger), ConfigNodePropertyInteger commitsPerIntervalThreshold = default(ConfigNodePropertyInteger), ConfigNodePropertyInteger maxLocationLength = default(ConfigNodePropertyInteger), ConfigNodePropertyInteger maxDetailsShown = default(ConfigNodePropertyInteger), ConfigNodePropertyInteger minDetailsPercentage = default(ConfigNodePropertyInteger), ConfigNodePropertyArray threadMatchers = default(ConfigNodePropertyArray), ConfigNodePropertyInteger maxGreedyDepth = default(ConfigNodePropertyInteger), ConfigNodePropertyString greedyStackMatchers = default(ConfigNodePropertyString), ConfigNodePropertyArray stackFilters = default(ConfigNodePropertyArray), ConfigNodePropertyArray stackMatchers = default(ConfigNodePropertyArray), ConfigNodePropertyArray stackCategorizers = default(ConfigNodePropertyArray), ConfigNodePropertyArray stackShorteners = default(ConfigNodePropertyArray))
        {
            this.Enabled = enabled;
            this.IntervalSeconds = intervalSeconds;
            this.CommitsPerIntervalThreshold = commitsPerIntervalThreshold;
            this.MaxLocationLength = maxLocationLength;
            this.MaxDetailsShown = maxDetailsShown;
            this.MinDetailsPercentage = minDetailsPercentage;
            this.ThreadMatchers = threadMatchers;
            this.MaxGreedyDepth = maxGreedyDepth;
            this.GreedyStackMatchers = greedyStackMatchers;
            this.StackFilters = stackFilters;
            this.StackMatchers = stackMatchers;
            this.StackCategorizers = stackCategorizers;
            this.StackShorteners = stackShorteners;
        }
        
        /// <summary>
        /// Gets or Sets Enabled
        /// </summary>
        [DataMember(Name="enabled", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean Enabled { get; set; }

        /// <summary>
        /// Gets or Sets IntervalSeconds
        /// </summary>
        [DataMember(Name="intervalSeconds", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger IntervalSeconds { get; set; }

        /// <summary>
        /// Gets or Sets CommitsPerIntervalThreshold
        /// </summary>
        [DataMember(Name="commitsPerIntervalThreshold", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger CommitsPerIntervalThreshold { get; set; }

        /// <summary>
        /// Gets or Sets MaxLocationLength
        /// </summary>
        [DataMember(Name="maxLocationLength", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger MaxLocationLength { get; set; }

        /// <summary>
        /// Gets or Sets MaxDetailsShown
        /// </summary>
        [DataMember(Name="maxDetailsShown", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger MaxDetailsShown { get; set; }

        /// <summary>
        /// Gets or Sets MinDetailsPercentage
        /// </summary>
        [DataMember(Name="minDetailsPercentage", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger MinDetailsPercentage { get; set; }

        /// <summary>
        /// Gets or Sets ThreadMatchers
        /// </summary>
        [DataMember(Name="threadMatchers", EmitDefaultValue=false)]
        public ConfigNodePropertyArray ThreadMatchers { get; set; }

        /// <summary>
        /// Gets or Sets MaxGreedyDepth
        /// </summary>
        [DataMember(Name="maxGreedyDepth", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger MaxGreedyDepth { get; set; }

        /// <summary>
        /// Gets or Sets GreedyStackMatchers
        /// </summary>
        [DataMember(Name="greedyStackMatchers", EmitDefaultValue=false)]
        public ConfigNodePropertyString GreedyStackMatchers { get; set; }

        /// <summary>
        /// Gets or Sets StackFilters
        /// </summary>
        [DataMember(Name="stackFilters", EmitDefaultValue=false)]
        public ConfigNodePropertyArray StackFilters { get; set; }

        /// <summary>
        /// Gets or Sets StackMatchers
        /// </summary>
        [DataMember(Name="stackMatchers", EmitDefaultValue=false)]
        public ConfigNodePropertyArray StackMatchers { get; set; }

        /// <summary>
        /// Gets or Sets StackCategorizers
        /// </summary>
        [DataMember(Name="stackCategorizers", EmitDefaultValue=false)]
        public ConfigNodePropertyArray StackCategorizers { get; set; }

        /// <summary>
        /// Gets or Sets StackShorteners
        /// </summary>
        [DataMember(Name="stackShorteners", EmitDefaultValue=false)]
        public ConfigNodePropertyArray StackShorteners { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ComAdobeGraniteRepositoryImplCommitStatsConfigProperties {\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  IntervalSeconds: ").Append(IntervalSeconds).Append("\n");
            sb.Append("  CommitsPerIntervalThreshold: ").Append(CommitsPerIntervalThreshold).Append("\n");
            sb.Append("  MaxLocationLength: ").Append(MaxLocationLength).Append("\n");
            sb.Append("  MaxDetailsShown: ").Append(MaxDetailsShown).Append("\n");
            sb.Append("  MinDetailsPercentage: ").Append(MinDetailsPercentage).Append("\n");
            sb.Append("  ThreadMatchers: ").Append(ThreadMatchers).Append("\n");
            sb.Append("  MaxGreedyDepth: ").Append(MaxGreedyDepth).Append("\n");
            sb.Append("  GreedyStackMatchers: ").Append(GreedyStackMatchers).Append("\n");
            sb.Append("  StackFilters: ").Append(StackFilters).Append("\n");
            sb.Append("  StackMatchers: ").Append(StackMatchers).Append("\n");
            sb.Append("  StackCategorizers: ").Append(StackCategorizers).Append("\n");
            sb.Append("  StackShorteners: ").Append(StackShorteners).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ComAdobeGraniteRepositoryImplCommitStatsConfigProperties);
        }

        /// <summary>
        /// Returns true if ComAdobeGraniteRepositoryImplCommitStatsConfigProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of ComAdobeGraniteRepositoryImplCommitStatsConfigProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComAdobeGraniteRepositoryImplCommitStatsConfigProperties input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Enabled == input.Enabled ||
                    (this.Enabled != null &&
                    this.Enabled.Equals(input.Enabled))
                ) && 
                (
                    this.IntervalSeconds == input.IntervalSeconds ||
                    (this.IntervalSeconds != null &&
                    this.IntervalSeconds.Equals(input.IntervalSeconds))
                ) && 
                (
                    this.CommitsPerIntervalThreshold == input.CommitsPerIntervalThreshold ||
                    (this.CommitsPerIntervalThreshold != null &&
                    this.CommitsPerIntervalThreshold.Equals(input.CommitsPerIntervalThreshold))
                ) && 
                (
                    this.MaxLocationLength == input.MaxLocationLength ||
                    (this.MaxLocationLength != null &&
                    this.MaxLocationLength.Equals(input.MaxLocationLength))
                ) && 
                (
                    this.MaxDetailsShown == input.MaxDetailsShown ||
                    (this.MaxDetailsShown != null &&
                    this.MaxDetailsShown.Equals(input.MaxDetailsShown))
                ) && 
                (
                    this.MinDetailsPercentage == input.MinDetailsPercentage ||
                    (this.MinDetailsPercentage != null &&
                    this.MinDetailsPercentage.Equals(input.MinDetailsPercentage))
                ) && 
                (
                    this.ThreadMatchers == input.ThreadMatchers ||
                    (this.ThreadMatchers != null &&
                    this.ThreadMatchers.Equals(input.ThreadMatchers))
                ) && 
                (
                    this.MaxGreedyDepth == input.MaxGreedyDepth ||
                    (this.MaxGreedyDepth != null &&
                    this.MaxGreedyDepth.Equals(input.MaxGreedyDepth))
                ) && 
                (
                    this.GreedyStackMatchers == input.GreedyStackMatchers ||
                    (this.GreedyStackMatchers != null &&
                    this.GreedyStackMatchers.Equals(input.GreedyStackMatchers))
                ) && 
                (
                    this.StackFilters == input.StackFilters ||
                    (this.StackFilters != null &&
                    this.StackFilters.Equals(input.StackFilters))
                ) && 
                (
                    this.StackMatchers == input.StackMatchers ||
                    (this.StackMatchers != null &&
                    this.StackMatchers.Equals(input.StackMatchers))
                ) && 
                (
                    this.StackCategorizers == input.StackCategorizers ||
                    (this.StackCategorizers != null &&
                    this.StackCategorizers.Equals(input.StackCategorizers))
                ) && 
                (
                    this.StackShorteners == input.StackShorteners ||
                    (this.StackShorteners != null &&
                    this.StackShorteners.Equals(input.StackShorteners))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Enabled != null)
                    hashCode = hashCode * 59 + this.Enabled.GetHashCode();
                if (this.IntervalSeconds != null)
                    hashCode = hashCode * 59 + this.IntervalSeconds.GetHashCode();
                if (this.CommitsPerIntervalThreshold != null)
                    hashCode = hashCode * 59 + this.CommitsPerIntervalThreshold.GetHashCode();
                if (this.MaxLocationLength != null)
                    hashCode = hashCode * 59 + this.MaxLocationLength.GetHashCode();
                if (this.MaxDetailsShown != null)
                    hashCode = hashCode * 59 + this.MaxDetailsShown.GetHashCode();
                if (this.MinDetailsPercentage != null)
                    hashCode = hashCode * 59 + this.MinDetailsPercentage.GetHashCode();
                if (this.ThreadMatchers != null)
                    hashCode = hashCode * 59 + this.ThreadMatchers.GetHashCode();
                if (this.MaxGreedyDepth != null)
                    hashCode = hashCode * 59 + this.MaxGreedyDepth.GetHashCode();
                if (this.GreedyStackMatchers != null)
                    hashCode = hashCode * 59 + this.GreedyStackMatchers.GetHashCode();
                if (this.StackFilters != null)
                    hashCode = hashCode * 59 + this.StackFilters.GetHashCode();
                if (this.StackMatchers != null)
                    hashCode = hashCode * 59 + this.StackMatchers.GetHashCode();
                if (this.StackCategorizers != null)
                    hashCode = hashCode * 59 + this.StackCategorizers.GetHashCode();
                if (this.StackShorteners != null)
                    hashCode = hashCode * 59 + this.StackShorteners.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
