/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.server.apis

import com.google.gson.Gson
import io.ktor.application.call
import io.ktor.auth.UserIdPrincipal
import io.ktor.auth.authentication
import io.ktor.auth.basicAuthentication
import io.ktor.auth.oauth
import io.ktor.auth.OAuthAccessTokenResponse
import io.ktor.auth.OAuthServerSettings
import io.ktor.http.ContentType
import io.ktor.http.HttpStatusCode
import io.ktor.locations.*
import io.ktor.response.respond
import io.ktor.response.respondText
import io.ktor.routing.*

import kotlinx.coroutines.experimental.asCoroutineDispatcher

import org.openapitools.server.ApplicationAuthProviders
import org.openapitools.server.Paths
import org.openapitools.server.ApplicationExecutors
import org.openapitools.server.HTTP.client
import org.openapitools.server.infrastructure.ApiPrincipal
import org.openapitools.server.infrastructure.apiKeyAuth

// ktor 0.9.x is missing io.ktor.locations.DELETE, this adds it.
// see https://github.com/ktorio/ktor/issues/288
import org.openapitools.server.delete

import org.openapitools.server.models.AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationInfo
import org.openapitools.server.models.AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurInfo
import org.openapitools.server.models.AnalyticsComponentQueryCacheServiceInfo
import org.openapitools.server.models.ApacheSlingHealthCheckResultHTMLSerializerInfo
import org.openapitools.server.models.ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationInfo
import org.openapitools.server.models.ComAdobeAemTransactionCoreImplTransactionRecorderInfo
import org.openapitools.server.models.ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCInfo
import org.openapitools.server.models.ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCInfo
import org.openapitools.server.models.ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplInfo
import org.openapitools.server.models.ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplInfo
import org.openapitools.server.models.ComAdobeCqAccountApiAccountManagementServiceInfo
import org.openapitools.server.models.ComAdobeCqAccountImplAccountManagementServletInfo
import org.openapitools.server.models.ComAdobeCqAddressImplLocationLocationListServletInfo
import org.openapitools.server.models.ComAdobeCqAuditPurgeDamInfo
import org.openapitools.server.models.ComAdobeCqAuditPurgePagesInfo
import org.openapitools.server.models.ComAdobeCqAuditPurgeReplicationInfo
import org.openapitools.server.models.ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterInfo
import org.openapitools.server.models.ComAdobeCqCdnRewriterImplCDNConfigServiceImplInfo
import org.openapitools.server.models.ComAdobeCqCdnRewriterImplCDNRewriterInfo
import org.openapitools.server.models.ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleInfo
import org.openapitools.server.models.ComAdobeCqCommerceImplAssetDynamicImageHandlerInfo
import org.openapitools.server.models.ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplInfo
import org.openapitools.server.models.ComAdobeCqCommerceImplAssetStaticImageHandlerInfo
import org.openapitools.server.models.ComAdobeCqCommerceImplAssetVideoHandlerInfo
import org.openapitools.server.models.ComAdobeCqCommerceImplPromotionPromotionManagerImplInfo
import org.openapitools.server.models.ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplInfo
import org.openapitools.server.models.ComAdobeCqCommercePimImplPageEventListenerInfo
import org.openapitools.server.models.ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplInfo
import org.openapitools.server.models.ComAdobeCqContentinsightImplReportingServicesSettingsProviderInfo
import org.openapitools.server.models.ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletInfo
import org.openapitools.server.models.ComAdobeCqContentinsightImplServletsReportingServicesProxyServleInfo
import org.openapitools.server.models.ComAdobeCqDamCfmImplComponentComponentConfigImplInfo
import org.openapitools.server.models.ComAdobeCqDamCfmImplConfFeatureConfigImplInfo
import org.openapitools.server.models.ComAdobeCqDamCfmImplContentRewriterAssetProcessorInfo
import org.openapitools.server.models.ComAdobeCqDamCfmImplContentRewriterParRangeFilterInfo
import org.openapitools.server.models.ComAdobeCqDamCfmImplContentRewriterPayloadFilterInfo
import org.openapitools.server.models.ComAdobeCqDamDmProcessImagePTiffManagerImplInfo
import org.openapitools.server.models.ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerInfo
import org.openapitools.server.models.ComAdobeCqDamMacSyncHelperImplMACSyncClientImplInfo
import org.openapitools.server.models.ComAdobeCqDamMacSyncImplDAMSyncServiceImplInfo
import org.openapitools.server.models.ComAdobeCqDamProcessorNuiImplNuiAssetProcessorInfo
import org.openapitools.server.models.ComAdobeCqDamS7imagingImplIsImageServerComponentInfo
import org.openapitools.server.models.ComAdobeCqDamS7imagingImplPsPlatformServerServletInfo
import org.openapitools.server.models.ComAdobeCqDamWebdavImplIoAssetIOHandlerInfo
import org.openapitools.server.models.ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobInfo
import org.openapitools.server.models.ComAdobeCqDamWebdavImplIoSpecialFilesHandlerInfo
import org.openapitools.server.models.ComAdobeCqDeserfwImplDeserializationFirewallImplInfo
import org.openapitools.server.models.ComAdobeCqDtmImplServiceDTMWebServiceImplInfo
import org.openapitools.server.models.ComAdobeCqDtmImplServletsDTMDeployHookServletInfo
import org.openapitools.server.models.ComAdobeCqDtmReactorImplServiceWebServiceImplInfo
import org.openapitools.server.models.ComAdobeCqExperiencelogImplExperienceLogConfigServletInfo
import org.openapitools.server.models.ComAdobeCqHcContentPackagesHealthCheckInfo
import org.openapitools.server.models.ComAdobeCqHistoryImplHistoryRequestFilterInfo
import org.openapitools.server.models.ComAdobeCqHistoryImplHistoryServiceImplInfo
import org.openapitools.server.models.ComAdobeCqInboxImplTypeproviderItemTypeProviderInfo
import org.openapitools.server.models.ComAdobeCqProjectsImplServletProjectImageServletInfo
import org.openapitools.server.models.ComAdobeCqProjectsPurgeSchedulerInfo
import org.openapitools.server.models.ComAdobeCqScheduledExporterImplScheduledExporterImplInfo
import org.openapitools.server.models.ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplInfo
import org.openapitools.server.models.ComAdobeCqScreensDeviceImplDeviceServiceInfo
import org.openapitools.server.models.ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplInfo
import org.openapitools.server.models.ComAdobeCqScreensImplHandlerChannelsUpdateHandlerInfo
import org.openapitools.server.models.ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobInfo
import org.openapitools.server.models.ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplInfo
import org.openapitools.server.models.ComAdobeCqScreensImplScreensChannelPostProcessorInfo
import org.openapitools.server.models.ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplInfo
import org.openapitools.server.models.ComAdobeCqScreensMqActivemqImplArtemisJMSProviderInfo
import org.openapitools.server.models.ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplInfo
import org.openapitools.server.models.ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplInfo
import org.openapitools.server.models.ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagInfo
import org.openapitools.server.models.ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChInfo
import org.openapitools.server.models.ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckInfo
import org.openapitools.server.models.ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckInfo
import org.openapitools.server.models.ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckInfo
import org.openapitools.server.models.ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckInfo
import org.openapitools.server.models.ComAdobeCqSocialAccountverificationImplAccountManagementConfigImInfo
import org.openapitools.server.models.ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenInfo
import org.openapitools.server.models.ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoInfo
import org.openapitools.server.models.ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerInfo
import org.openapitools.server.models.ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenInfo
import org.openapitools.server.models.ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySInfo
import org.openapitools.server.models.ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreInfo
import org.openapitools.server.models.ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIInfo
import org.openapitools.server.models.ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenInfo
import org.openapitools.server.models.ComAdobeCqSocialCalendarServletsTimeZoneServletInfo
import org.openapitools.server.models.ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventInfo
import org.openapitools.server.models.ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeInfo
import org.openapitools.server.models.ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiInfo
import org.openapitools.server.models.ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCInfo
import org.openapitools.server.models.ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosInfo
import org.openapitools.server.models.ComAdobeCqSocialCommonsCorsCORSAuthenticationFilterInfo
import org.openapitools.server.models.ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderInfo
import org.openapitools.server.models.ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplInfo
import org.openapitools.server.models.ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerInfo
import org.openapitools.server.models.ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderInfo
import org.openapitools.server.models.ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpInfo
import org.openapitools.server.models.ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpInfo
import org.openapitools.server.models.ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterInfo
import org.openapitools.server.models.ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderInfo
import org.openapitools.server.models.ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderInfo
import org.openapitools.server.models.ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderInfo
import org.openapitools.server.models.ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderInfo
import org.openapitools.server.models.ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderInfo
import org.openapitools.server.models.ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderInfo
import org.openapitools.server.models.ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadInfo
import org.openapitools.server.models.ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplInfo
import org.openapitools.server.models.ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitInfo
import org.openapitools.server.models.ComAdobeCqSocialConnectOauthImplFacebookProviderImplInfo
import org.openapitools.server.models.ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleInfo
import org.openapitools.server.models.ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperInfo
import org.openapitools.server.models.ComAdobeCqSocialConnectOauthImplTwitterProviderImplInfo
import org.openapitools.server.models.ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenInfo
import org.openapitools.server.models.ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryInfo
import org.openapitools.server.models.ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryInfo
import org.openapitools.server.models.ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorInfo
import org.openapitools.server.models.ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFInfo
import org.openapitools.server.models.ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoInfo
import org.openapitools.server.models.ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLInfo
import org.openapitools.server.models.ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouInfo
import org.openapitools.server.models.ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplInfo
import org.openapitools.server.models.ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeInfo
import org.openapitools.server.models.ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaInfo
import org.openapitools.server.models.ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceInfo
import org.openapitools.server.models.ComAdobeCqSocialForumDispatcherImplFlushOperationsInfo
import org.openapitools.server.models.ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenInfo
import org.openapitools.server.models.ComAdobeCqSocialGroupImplGroupServiceImplInfo
import org.openapitools.server.models.ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplInfo
import org.openapitools.server.models.ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSInfo
import org.openapitools.server.models.ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerInfo
import org.openapitools.server.models.ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileInfo
import org.openapitools.server.models.ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOInfo
import org.openapitools.server.models.ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFInfo
import org.openapitools.server.models.ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationInfo
import org.openapitools.server.models.ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenInfo
import org.openapitools.server.models.ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialInfo
import org.openapitools.server.models.ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenInfo
import org.openapitools.server.models.ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociInfo
import org.openapitools.server.models.ComAdobeCqSocialNotificationsImplMentionsRouterInfo
import org.openapitools.server.models.ComAdobeCqSocialNotificationsImplNotificationManagerImplInfo
import org.openapitools.server.models.ComAdobeCqSocialNotificationsImplNotificationsRouterInfo
import org.openapitools.server.models.ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicInfo
import org.openapitools.server.models.ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIInfo
import org.openapitools.server.models.ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMInfo
import org.openapitools.server.models.ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSInfo
import org.openapitools.server.models.ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiInfo
import org.openapitools.server.models.ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletInfo
import org.openapitools.server.models.ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletInfo
import org.openapitools.server.models.ComAdobeCqSocialScoringImplScoringEventListenerInfo
import org.openapitools.server.models.ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplInfo
import org.openapitools.server.models.ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceInfo
import org.openapitools.server.models.ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImInfo
import org.openapitools.server.models.ComAdobeCqSocialSiteImplSiteConfiguratorImplInfo
import org.openapitools.server.models.ComAdobeCqSocialSrpImplSocialSolrConnectorInfo
import org.openapitools.server.models.ComAdobeCqSocialSyncImplDiffChangesObserverInfo
import org.openapitools.server.models.ComAdobeCqSocialSyncImplGroupSyncListenerImplInfo
import org.openapitools.server.models.ComAdobeCqSocialSyncImplPublisherSyncServiceImplInfo
import org.openapitools.server.models.ComAdobeCqSocialSyncImplUserSyncListenerImplInfo
import org.openapitools.server.models.ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerInfo
import org.openapitools.server.models.ComAdobeCqSocialTranslationImplUGCLanguageDetectorInfo
import org.openapitools.server.models.ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplInfo
import org.openapitools.server.models.ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplInfo
import org.openapitools.server.models.ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplInfo
import org.openapitools.server.models.ComAdobeCqSocialUgcbaseImplSocialUtilsImplInfo
import org.openapitools.server.models.ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplInfo
import org.openapitools.server.models.ComAdobeCqSocialUgcbaseModerationImplSentimentProcessInfo
import org.openapitools.server.models.ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliInfo
import org.openapitools.server.models.ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplInfo
import org.openapitools.server.models.ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletInfo
import org.openapitools.server.models.ComAdobeCqSocialUserImplTransportHttpToPublisherInfo
import org.openapitools.server.models.ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactInfo
import org.openapitools.server.models.ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupInfo
import org.openapitools.server.models.ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupInfo
import org.openapitools.server.models.ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceInfo
import org.openapitools.server.models.ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskInfo
import org.openapitools.server.models.ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceInfo
import org.openapitools.server.models.ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceInfo
import org.openapitools.server.models.ComAdobeCqWcmLaunchesImplLaunchesEventHandlerInfo
import org.openapitools.server.models.ComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorInfo
import org.openapitools.server.models.ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplInfo
import org.openapitools.server.models.ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplInfo
import org.openapitools.server.models.ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceInfo
import org.openapitools.server.models.ComAdobeFdFpConfigFormsPortalSchedulerServiceInfo
import org.openapitools.server.models.ComAdobeFormsCommonServiceImplDefaultDataProviderInfo
import org.openapitools.server.models.ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpInfo
import org.openapitools.server.models.ComAdobeFormsCommonServletTempCleanUpTaskInfo
import org.openapitools.server.models.ComAdobeGraniteAcpPlatformPlatformServletInfo
import org.openapitools.server.models.ComAdobeGraniteActivitystreamsImplActivityManagerImplInfo
import org.openapitools.server.models.ComAdobeGraniteAnalyzerBaseSystemStatusServletInfo
import org.openapitools.server.models.ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletInfo
import org.openapitools.server.models.ComAdobeGraniteApicontrollerFilterResolverHookFactoryInfo
import org.openapitools.server.models.ComAdobeGraniteAuthCertImplClientCertAuthHandlerInfo
import org.openapitools.server.models.ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionInfo
import org.openapitools.server.models.ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplInfo
import org.openapitools.server.models.ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorInfo
import org.openapitools.server.models.ComAdobeGraniteAuthImsImplIMSProviderImplInfo
import org.openapitools.server.models.ComAdobeGraniteAuthImsImplImsConfigProviderImplInfo
import org.openapitools.server.models.ComAdobeGraniteAuthImsInfo
import org.openapitools.server.models.ComAdobeGraniteAuthOauthAccesstokenProviderInfo
import org.openapitools.server.models.ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerInfo
import org.openapitools.server.models.ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplInfo
import org.openapitools.server.models.ComAdobeGraniteAuthOauthImplFacebookProviderImplInfo
import org.openapitools.server.models.ComAdobeGraniteAuthOauthImplGithubProviderImplInfo
import org.openapitools.server.models.ComAdobeGraniteAuthOauthImplGraniteProviderInfo
import org.openapitools.server.models.ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInfo
import org.openapitools.server.models.ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalInfo
import org.openapitools.server.models.ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerInfo
import org.openapitools.server.models.ComAdobeGraniteAuthOauthImplTwitterProviderImplInfo
import org.openapitools.server.models.ComAdobeGraniteAuthOauthProviderInfo
import org.openapitools.server.models.ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerInfo
import org.openapitools.server.models.ComAdobeGraniteAuthSamlSamlAuthenticationHandlerInfo
import org.openapitools.server.models.ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerInfo
import org.openapitools.server.models.ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckInfo
import org.openapitools.server.models.ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckInfo
import org.openapitools.server.models.ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckInfo
import org.openapitools.server.models.ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckInfo
import org.openapitools.server.models.ComAdobeGraniteBundlesHcImplJobsHealthCheckInfo
import org.openapitools.server.models.ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckInfo
import org.openapitools.server.models.ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckInfo
import org.openapitools.server.models.ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckInfo
import org.openapitools.server.models.ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckInfo
import org.openapitools.server.models.ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckInfo
import org.openapitools.server.models.ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacInfo
import org.openapitools.server.models.ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplInfo
import org.openapitools.server.models.ComAdobeGraniteCompatrouterImplRoutingConfigInfo
import org.openapitools.server.models.ComAdobeGraniteCompatrouterImplSwitchMappingConfigInfo
import org.openapitools.server.models.ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingInfo
import org.openapitools.server.models.ComAdobeGraniteContexthubImplContextHubImplInfo
import org.openapitools.server.models.ComAdobeGraniteCorsImplCORSPolicyImplInfo
import org.openapitools.server.models.ComAdobeGraniteCsrfImplCSRFFilterInfo
import org.openapitools.server.models.ComAdobeGraniteCsrfImplCSRFServletInfo
import org.openapitools.server.models.ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeInfo
import org.openapitools.server.models.ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverInfo
import org.openapitools.server.models.ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerInfo
import org.openapitools.server.models.ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenInfo
import org.openapitools.server.models.ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatInfo
import org.openapitools.server.models.ComAdobeGraniteDistributionCoreImplReplicationDistributionTransInfo
import org.openapitools.server.models.ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuInfo
import org.openapitools.server.models.ComAdobeGraniteFragsImplCheckHttpHeaderFlagInfo
import org.openapitools.server.models.ComAdobeGraniteFragsImplRandomFeatureInfo
import org.openapitools.server.models.ComAdobeGraniteHttpcacheFileFileCacheStoreInfo
import org.openapitools.server.models.ComAdobeGraniteHttpcacheImplOuterCacheFilterInfo
import org.openapitools.server.models.ComAdobeGraniteI18nImplBundlePseudoTranslationsInfo
import org.openapitools.server.models.ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceInfo
import org.openapitools.server.models.ComAdobeGraniteInfocollectorInfoCollectorInfo
import org.openapitools.server.models.ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryInfo
import org.openapitools.server.models.ComAdobeGraniteLicenseImplLicenseCheckFilterInfo
import org.openapitools.server.models.ComAdobeGraniteLoggingImplLogAnalyserImplInfo
import org.openapitools.server.models.ComAdobeGraniteLoggingImplLogErrorHealthCheckInfo
import org.openapitools.server.models.ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskInfo
import org.openapitools.server.models.ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskInfo
import org.openapitools.server.models.ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskInfo
import org.openapitools.server.models.ComAdobeGraniteMonitoringImplScriptConfigImplInfo
import org.openapitools.server.models.ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanInfo
import org.openapitools.server.models.ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskInfo
import org.openapitools.server.models.ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletInfo
import org.openapitools.server.models.ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletInfo
import org.openapitools.server.models.ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletInfo
import org.openapitools.server.models.ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletInfo
import org.openapitools.server.models.ComAdobeGraniteOffloadingImplOffloadingConfiguratorInfo
import org.openapitools.server.models.ComAdobeGraniteOffloadingImplOffloadingJobClonerInfo
import org.openapitools.server.models.ComAdobeGraniteOffloadingImplOffloadingJobOffloaderInfo
import org.openapitools.server.models.ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerInfo
import org.openapitools.server.models.ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoInfo
import org.openapitools.server.models.ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplInfo
import org.openapitools.server.models.ComAdobeGraniteOptoutImplOptOutServiceImplInfo
import org.openapitools.server.models.ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckInfo
import org.openapitools.server.models.ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckInfo
import org.openapitools.server.models.ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckInfo
import org.openapitools.server.models.ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsInfo
import org.openapitools.server.models.ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckInfo
import org.openapitools.server.models.ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckInfo
import org.openapitools.server.models.ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCInfo
import org.openapitools.server.models.ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckInfo
import org.openapitools.server.models.ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCInfo
import org.openapitools.server.models.ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckInfo
import org.openapitools.server.models.ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheInfo
import org.openapitools.server.models.ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckInfo
import org.openapitools.server.models.ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckInfo
import org.openapitools.server.models.ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckInfo
import org.openapitools.server.models.ComAdobeGraniteRepositoryImplCommitStatsConfigInfo
import org.openapitools.server.models.ComAdobeGraniteRepositoryServiceUserConfigurationInfo
import org.openapitools.server.models.ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImInfo
import org.openapitools.server.models.ComAdobeGraniteResourcestatusImplCompositeStatusTypeInfo
import org.openapitools.server.models.ComAdobeGraniteResourcestatusImplStatusResourceProviderImplInfo
import org.openapitools.server.models.ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterInfo
import org.openapitools.server.models.ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplInfo
import org.openapitools.server.models.ComAdobeGraniteRestImplServletDefaultGETServletInfo
import org.openapitools.server.models.ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSInfo
import org.openapitools.server.models.ComAdobeGraniteSecurityUserUserPropertiesServiceInfo
import org.openapitools.server.models.ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplInfo
import org.openapitools.server.models.ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplInfo
import org.openapitools.server.models.ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryInfo
import org.openapitools.server.models.ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceInfo
import org.openapitools.server.models.ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskInfo
import org.openapitools.server.models.ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorInfo
import org.openapitools.server.models.ComAdobeGraniteThreaddumpThreadDumpCollectorInfo
import org.openapitools.server.models.ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslInfo
import org.openapitools.server.models.ComAdobeGraniteTranslationCoreImplTranslationManagerImplInfo
import org.openapitools.server.models.ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplInfo
import org.openapitools.server.models.ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureInfo
import org.openapitools.server.models.ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceInfo
import org.openapitools.server.models.ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerInfo
import org.openapitools.server.models.ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerInfo
import org.openapitools.server.models.ComAdobeGraniteWorkflowCoreJobJobHandlerInfo
import org.openapitools.server.models.ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumInfo
import org.openapitools.server.models.ComAdobeGraniteWorkflowCorePayloadMapCacheInfo
import org.openapitools.server.models.ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerInfo
import org.openapitools.server.models.ComAdobeGraniteWorkflowCoreWorkflowConfigInfo
import org.openapitools.server.models.ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryInfo
import org.openapitools.server.models.ComAdobeGraniteWorkflowPurgeSchedulerInfo
import org.openapitools.server.models.ComAdobeOctopusNcommBootstrapInfo
import org.openapitools.server.models.ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSInfo
import org.openapitools.server.models.ComAdobeXmpWorkerFilesNcommXMPFilesNCommInfo
import org.openapitools.server.models.ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceInfo
import org.openapitools.server.models.ComDayCommonsHttpclientInfo
import org.openapitools.server.models.ComDayCqAnalyticsImplStorePropertiesChangeListenerInfo
import org.openapitools.server.models.ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteInfo
import org.openapitools.server.models.ComDayCqAnalyticsSitecatalystImplImporterReportImporterInfo
import org.openapitools.server.models.ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryInfo
import org.openapitools.server.models.ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplInfo
import org.openapitools.server.models.ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterInfo
import org.openapitools.server.models.ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerInfo
import org.openapitools.server.models.ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerInfo
import org.openapitools.server.models.ComDayCqAnalyticsTestandtargetImplSegmentImporterInfo
import org.openapitools.server.models.ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplInfo
import org.openapitools.server.models.ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletInfo
import org.openapitools.server.models.ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplInfo
import org.openapitools.server.models.ComDayCqAuthImplCugCugSupportImplInfo
import org.openapitools.server.models.ComDayCqAuthImplLoginSelectorHandlerInfo
import org.openapitools.server.models.ComDayCqCommonsImplExternalizerImplInfo
import org.openapitools.server.models.ComDayCqCommonsServletsRootMappingServletInfo
import org.openapitools.server.models.ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfo
import org.openapitools.server.models.ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListInfo
import org.openapitools.server.models.ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistInfo
import org.openapitools.server.models.ComDayCqContentsyncImplContentSyncManagerImplInfo
import org.openapitools.server.models.ComDayCqDamCommonsHandlerStandardImageHandlerInfo
import org.openapitools.server.models.ComDayCqDamCommonsMetadataXmpFilterBlackWhiteInfo
import org.openapitools.server.models.ComDayCqDamCommonsUtilImplAssetCacheImplInfo
import org.openapitools.server.models.ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigInfo
import org.openapitools.server.models.ComDayCqDamCoreImplAssetMoveListenerInfo
import org.openapitools.server.models.ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationInfo
import org.openapitools.server.models.ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletInfo
import org.openapitools.server.models.ComDayCqDamCoreImplCacheCQBufferedImageCacheInfo
import org.openapitools.server.models.ComDayCqDamCoreImplDamChangeEventListenerInfo
import org.openapitools.server.models.ComDayCqDamCoreImplDamEventPurgeServiceInfo
import org.openapitools.server.models.ComDayCqDamCoreImplDamEventRecorderImplInfo
import org.openapitools.server.models.ComDayCqDamCoreImplEventDamEventAuditListenerInfo
import org.openapitools.server.models.ComDayCqDamCoreImplExpiryNotificationJobImplInfo
import org.openapitools.server.models.ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatInfo
import org.openapitools.server.models.ComDayCqDamCoreImplGfxCommonsGfxRendererInfo
import org.openapitools.server.models.ComDayCqDamCoreImplHandlerEPSFormatHandlerInfo
import org.openapitools.server.models.ComDayCqDamCoreImplHandlerIndesignFormatHandlerInfo
import org.openapitools.server.models.ComDayCqDamCoreImplHandlerJpegHandlerInfo
import org.openapitools.server.models.ComDayCqDamCoreImplHandlerXmpNCommXMPHandlerInfo
import org.openapitools.server.models.ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorInfo
import org.openapitools.server.models.ComDayCqDamCoreImplJmxAssetMigrationMBeanImplInfo
import org.openapitools.server.models.ComDayCqDamCoreImplJmxAssetUpdateMonitorImplInfo
import org.openapitools.server.models.ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigInfo
import org.openapitools.server.models.ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigInfo
import org.openapitools.server.models.ComDayCqDamCoreImplLightboxLightboxServletInfo
import org.openapitools.server.models.ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerInfo
import org.openapitools.server.models.ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperInfo
import org.openapitools.server.models.ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplInfo
import org.openapitools.server.models.ComDayCqDamCoreImplMissingMetadataNotificationJobInfo
import org.openapitools.server.models.ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrInfo
import org.openapitools.server.models.ComDayCqDamCoreImplProcessTextExtractionProcessInfo
import org.openapitools.server.models.ComDayCqDamCoreImplRenditionMakerImplInfo
import org.openapitools.server.models.ComDayCqDamCoreImplReportsReportExportServiceInfo
import org.openapitools.server.models.ComDayCqDamCoreImplReportsReportPurgeServiceInfo
import org.openapitools.server.models.ComDayCqDamCoreImplServletAssetDownloadServletInfo
import org.openapitools.server.models.ComDayCqDamCoreImplServletAssetStatusServletInfo
import org.openapitools.server.models.ComDayCqDamCoreImplServletAssetXMPSearchServletInfo
import org.openapitools.server.models.ComDayCqDamCoreImplServletBatchMetadataServletInfo
import org.openapitools.server.models.ComDayCqDamCoreImplServletBinaryProviderServletInfo
import org.openapitools.server.models.ComDayCqDamCoreImplServletCollectionServletInfo
import org.openapitools.server.models.ComDayCqDamCoreImplServletCollectionsServletInfo
import org.openapitools.server.models.ComDayCqDamCoreImplServletCompanionServletInfo
import org.openapitools.server.models.ComDayCqDamCoreImplServletCreateAssetServletInfo
import org.openapitools.server.models.ComDayCqDamCoreImplServletDamContentDispositionFilterInfo
import org.openapitools.server.models.ComDayCqDamCoreImplServletGuidLookupFilterInfo
import org.openapitools.server.models.ComDayCqDamCoreImplServletHealthCheckServletInfo
import org.openapitools.server.models.ComDayCqDamCoreImplServletMetadataGetServletInfo
import org.openapitools.server.models.ComDayCqDamCoreImplServletMultipleLicenseAcceptServletInfo
import org.openapitools.server.models.ComDayCqDamCoreImplServletResourceCollectionServletInfo
import org.openapitools.server.models.ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplInfo
import org.openapitools.server.models.ComDayCqDamCoreImplUnzipUnzipConfigInfo
import org.openapitools.server.models.ComDayCqDamCoreProcessExifToolExtractMetadataProcessInfo
import org.openapitools.server.models.ComDayCqDamCoreProcessExtractMetadataProcessInfo
import org.openapitools.server.models.ComDayCqDamCoreProcessMetadataProcessorProcessInfo
import org.openapitools.server.models.ComDayCqDamHandlerFfmpegLocatorImplInfo
import org.openapitools.server.models.ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplInfo
import org.openapitools.server.models.ComDayCqDamHandlerStandardPdfPdfHandlerInfo
import org.openapitools.server.models.ComDayCqDamHandlerStandardPsPostScriptHandlerInfo
import org.openapitools.server.models.ComDayCqDamHandlerStandardPsdPsdHandlerInfo
import org.openapitools.server.models.ComDayCqDamIdsImplIDSJobProcessorInfo
import org.openapitools.server.models.ComDayCqDamIdsImplIDSPoolManagerImplInfo
import org.openapitools.server.models.ComDayCqDamInddImplHandlerIndesignXMPHandlerInfo
import org.openapitools.server.models.ComDayCqDamInddImplServletSnippetCreationServletInfo
import org.openapitools.server.models.ComDayCqDamInddProcessINDDMediaExtractProcessInfo
import org.openapitools.server.models.ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplInfo
import org.openapitools.server.models.ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobInfo
import org.openapitools.server.models.ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProInfo
import org.openapitools.server.models.ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenInfo
import org.openapitools.server.models.ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerInfo
import org.openapitools.server.models.ComDayCqDamS7damCommonPostServletsSetCreateHandlerInfo
import org.openapitools.server.models.ComDayCqDamS7damCommonPostServletsSetModifyHandlerInfo
import org.openapitools.server.models.ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessInfo
import org.openapitools.server.models.ComDayCqDamS7damCommonS7damDamChangeEventListenerInfo
import org.openapitools.server.models.ComDayCqDamS7damCommonServletsS7damProductInfoServletInfo
import org.openapitools.server.models.ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplInfo
import org.openapitools.server.models.ComDayCqDamScene7ImplScene7APIClientImplInfo
import org.openapitools.server.models.ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplInfo
import org.openapitools.server.models.ComDayCqDamScene7ImplScene7ConfigurationEventListenerInfo
import org.openapitools.server.models.ComDayCqDamScene7ImplScene7DamChangeEventListenerInfo
import org.openapitools.server.models.ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplInfo
import org.openapitools.server.models.ComDayCqDamScene7ImplScene7UploadServiceImplInfo
import org.openapitools.server.models.ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerInfo
import org.openapitools.server.models.ComDayCqDamStockIntegrationImplConfigurationStockConfigurationInfo
import org.openapitools.server.models.ComDayCqDamVideoImplServletVideoTestServletInfo
import org.openapitools.server.models.ComDayCqExtwidgetServletsImageSpriteServletInfo
import org.openapitools.server.models.ComDayCqImageInternalFontFontHelperInfo
import org.openapitools.server.models.ComDayCqJcrclustersupportClusterStartLevelControllerInfo
import org.openapitools.server.models.ComDayCqMailerDefaultMailServiceInfo
import org.openapitools.server.models.ComDayCqMailerImplCqMailingServiceInfo
import org.openapitools.server.models.ComDayCqMailerImplEmailCqEmailTemplateFactoryInfo
import org.openapitools.server.models.ComDayCqMailerImplEmailCqRetrieverTemplateFactoryInfo
import org.openapitools.server.models.ComDayCqMcmCampaignImplIntegrationConfigImplInfo
import org.openapitools.server.models.ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryInfo
import org.openapitools.server.models.ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplInfo
import org.openapitools.server.models.ComDayCqMcmImplMCMConfigurationInfo
import org.openapitools.server.models.ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenInfo
import org.openapitools.server.models.ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougInfo
import org.openapitools.server.models.ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentInfo
import org.openapitools.server.models.ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaInfo
import org.openapitools.server.models.ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHInfo
import org.openapitools.server.models.ComDayCqNotificationImplNotificationServiceImplInfo
import org.openapitools.server.models.ComDayCqPersonalizationImplServletsTargetingConfigurationServletInfo
import org.openapitools.server.models.ComDayCqPollingImporterImplManagedPollConfigImplInfo
import org.openapitools.server.models.ComDayCqPollingImporterImplManagedPollingImporterImplInfo
import org.openapitools.server.models.ComDayCqPollingImporterImplPollingImporterImplInfo
import org.openapitools.server.models.ComDayCqReplicationAuditReplicationEventListenerInfo
import org.openapitools.server.models.ComDayCqReplicationContentStaticContentBuilderInfo
import org.openapitools.server.models.ComDayCqReplicationImplAgentManagerImplInfo
import org.openapitools.server.models.ComDayCqReplicationImplContentDurboBinaryLessContentBuilderInfo
import org.openapitools.server.models.ComDayCqReplicationImplContentDurboDurboImportConfigurationProvInfo
import org.openapitools.server.models.ComDayCqReplicationImplReplicationContentFactoryProviderImplInfo
import org.openapitools.server.models.ComDayCqReplicationImplReplicationReceiverImplInfo
import org.openapitools.server.models.ComDayCqReplicationImplReplicatorImplInfo
import org.openapitools.server.models.ComDayCqReplicationImplReverseReplicatorInfo
import org.openapitools.server.models.ComDayCqReplicationImplTransportBinaryLessTransportHandlerInfo
import org.openapitools.server.models.ComDayCqReplicationImplTransportHttpInfo
import org.openapitools.server.models.ComDayCqReportingImplCacheCacheImplInfo
import org.openapitools.server.models.ComDayCqReportingImplConfigServiceImplInfo
import org.openapitools.server.models.ComDayCqReportingImplRLogAnalyzerInfo
import org.openapitools.server.models.ComDayCqRewriterLinkcheckerImplLinkCheckerImplInfo
import org.openapitools.server.models.ComDayCqRewriterLinkcheckerImplLinkCheckerTaskInfo
import org.openapitools.server.models.ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryInfo
import org.openapitools.server.models.ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplInfo
import org.openapitools.server.models.ComDayCqRewriterProcessorImplHtmlParserFactoryInfo
import org.openapitools.server.models.ComDayCqSearchImplBuilderQueryBuilderImplInfo
import org.openapitools.server.models.ComDayCqSearchSuggestImplSuggestionIndexManagerImplInfo
import org.openapitools.server.models.ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerInfo
import org.openapitools.server.models.ComDayCqSearchpromoteImplSearchPromoteServiceImplInfo
import org.openapitools.server.models.ComDayCqSecurityACLSetupInfo
import org.openapitools.server.models.ComDayCqStatisticsImplStatisticsServiceImplInfo
import org.openapitools.server.models.ComDayCqTaggingImplJcrTagManagerFactoryImplInfo
import org.openapitools.server.models.ComDayCqTaggingImplSearchTagPredicateEvaluatorInfo
import org.openapitools.server.models.ComDayCqTaggingImplTagGarbageCollectorInfo
import org.openapitools.server.models.ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerInfo
import org.openapitools.server.models.ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorInfo
import org.openapitools.server.models.ComDayCqWcmCoreImplAuthoringUIModeServiceImplInfo
import org.openapitools.server.models.ComDayCqWcmCoreImplCommandsWCMCommandServletInfo
import org.openapitools.server.models.ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplInfo
import org.openapitools.server.models.ComDayCqWcmCoreImplEventPageEventAuditListenerInfo
import org.openapitools.server.models.ComDayCqWcmCoreImplEventPagePostProcessorInfo
import org.openapitools.server.models.ComDayCqWcmCoreImplEventRepositoryChangeEventListenerInfo
import org.openapitools.server.models.ComDayCqWcmCoreImplEventTemplatePostProcessorInfo
import org.openapitools.server.models.ComDayCqWcmCoreImplLanguageManagerImplInfo
import org.openapitools.server.models.ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplInfo
import org.openapitools.server.models.ComDayCqWcmCoreImplPagePageInfoAggregatorImplInfo
import org.openapitools.server.models.ComDayCqWcmCoreImplPagePageManagerFactoryImplInfo
import org.openapitools.server.models.ComDayCqWcmCoreImplReferencesContentContentReferenceConfigInfo
import org.openapitools.server.models.ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerInfo
import org.openapitools.server.models.ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieInfo
import org.openapitools.server.models.ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerInfo
import org.openapitools.server.models.ComDayCqWcmCoreImplServletsFindReplaceServletInfo
import org.openapitools.server.models.ComDayCqWcmCoreImplServletsReferenceSearchServletInfo
import org.openapitools.server.models.ComDayCqWcmCoreImplServletsThumbnailServletInfo
import org.openapitools.server.models.ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorInfo
import org.openapitools.server.models.ComDayCqWcmCoreImplVariantsPageVariantsProviderImplInfo
import org.openapitools.server.models.ComDayCqWcmCoreImplVersionManagerImplInfo
import org.openapitools.server.models.ComDayCqWcmCoreImplVersionPurgeTaskInfo
import org.openapitools.server.models.ComDayCqWcmCoreImplWCMDebugFilterInfo
import org.openapitools.server.models.ComDayCqWcmCoreImplWCMDeveloperModeFilterInfo
import org.openapitools.server.models.ComDayCqWcmCoreImplWarpTimeWarpFilterInfo
import org.openapitools.server.models.ComDayCqWcmCoreMvtMVTStatisticsImplInfo
import org.openapitools.server.models.ComDayCqWcmCoreStatsPageViewStatisticsImplInfo
import org.openapitools.server.models.ComDayCqWcmCoreWCMRequestFilterInfo
import org.openapitools.server.models.ComDayCqWcmDesignimporterDesignPackageImporterInfo
import org.openapitools.server.models.ComDayCqWcmDesignimporterImplCanvasBuilderImplInfo
import org.openapitools.server.models.ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerInfo
import org.openapitools.server.models.ComDayCqWcmDesignimporterImplEntryPreprocessorImplInfo
import org.openapitools.server.models.ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplInfo
import org.openapitools.server.models.ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeInfo
import org.openapitools.server.models.ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponInfo
import org.openapitools.server.models.ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanInfo
import org.openapitools.server.models.ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleInfo
import org.openapitools.server.models.ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandInfo
import org.openapitools.server.models.ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenInfo
import org.openapitools.server.models.ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerInfo
import org.openapitools.server.models.ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTInfo
import org.openapitools.server.models.ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleInfo
import org.openapitools.server.models.ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleInfo
import org.openapitools.server.models.ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHInfo
import org.openapitools.server.models.ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeInfo
import org.openapitools.server.models.ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandInfo
import org.openapitools.server.models.ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlInfo
import org.openapitools.server.models.ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentInfo
import org.openapitools.server.models.ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenInfo
import org.openapitools.server.models.ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlInfo
import org.openapitools.server.models.ComDayCqWcmFoundationFormsImplFormChooserServletInfo
import org.openapitools.server.models.ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorInfo
import org.openapitools.server.models.ComDayCqWcmFoundationFormsImplFormsHandlingServletInfo
import org.openapitools.server.models.ComDayCqWcmFoundationFormsImplMailServletInfo
import org.openapitools.server.models.ComDayCqWcmFoundationImplAdaptiveImageComponentServletInfo
import org.openapitools.server.models.ComDayCqWcmFoundationImplHTTPAuthHandlerInfo
import org.openapitools.server.models.ComDayCqWcmFoundationImplPageImpressionsTrackerInfo
import org.openapitools.server.models.ComDayCqWcmFoundationImplPageRedirectServletInfo
import org.openapitools.server.models.ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistInfo
import org.openapitools.server.models.ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplInfo
import org.openapitools.server.models.ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo
import org.openapitools.server.models.ComDayCqWcmMobileCoreImplRedirectRedirectFilterInfo
import org.openapitools.server.models.ComDayCqWcmMsmImplActionsContentCopyActionFactoryInfo
import org.openapitools.server.models.ComDayCqWcmMsmImplActionsContentDeleteActionFactoryInfo
import org.openapitools.server.models.ComDayCqWcmMsmImplActionsContentUpdateActionFactoryInfo
import org.openapitools.server.models.ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryInfo
import org.openapitools.server.models.ComDayCqWcmMsmImplActionsPageMoveActionFactoryInfo
import org.openapitools.server.models.ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryInfo
import org.openapitools.server.models.ComDayCqWcmMsmImplActionsVersionCopyActionFactoryInfo
import org.openapitools.server.models.ComDayCqWcmMsmImplLiveRelationshipManagerImplInfo
import org.openapitools.server.models.ComDayCqWcmMsmImplRolloutManagerImplInfo
import org.openapitools.server.models.ComDayCqWcmMsmImplServletsAuditLogServletInfo
import org.openapitools.server.models.ComDayCqWcmNotificationEmailImplEmailChannelInfo
import org.openapitools.server.models.ComDayCqWcmNotificationImplNotificationManagerImplInfo
import org.openapitools.server.models.ComDayCqWcmScriptingImplBVPManagerInfo
import org.openapitools.server.models.ComDayCqWcmUndoUndoConfigInfo
import org.openapitools.server.models.ComDayCqWcmWebservicesupportImplReplicationEventListenerInfo
import org.openapitools.server.models.ComDayCqWcmWorkflowImplWcmWorkflowServiceImplInfo
import org.openapitools.server.models.ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderInfo
import org.openapitools.server.models.ComDayCqWidgetImplHtmlLibraryManagerImplInfo
import org.openapitools.server.models.ComDayCqWidgetImplWidgetExtensionProviderImplInfo
import org.openapitools.server.models.ComDayCqWorkflowImplEmailEMailNotificationServiceInfo
import org.openapitools.server.models.ComDayCqWorkflowImplEmailTaskEMailNotificationServiceInfo
import org.openapitools.server.models.ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerInfo
import org.openapitools.server.models.ComDayCrxSecurityTokenImplTokenCleanupTaskInfo
import org.openapitools.server.models.GuideLocalizationServiceInfo
import org.openapitools.server.models.MessagingUserComponentFactoryInfo
import org.openapitools.server.models.OrgApacheAriesJmxFrameworkStateConfigInfo
import org.openapitools.server.models.OrgApacheFelixEventadminImplEventAdminInfo
import org.openapitools.server.models.OrgApacheFelixHttpInfo
import org.openapitools.server.models.OrgApacheFelixHttpSslfilterSslFilterInfo
import org.openapitools.server.models.OrgApacheFelixJaasConfigurationFactoryInfo
import org.openapitools.server.models.OrgApacheFelixJaasConfigurationSpiInfo
import org.openapitools.server.models.OrgApacheFelixScrScrServiceInfo
import org.openapitools.server.models.OrgApacheFelixSystemreadyImplComponentsCheckInfo
import org.openapitools.server.models.OrgApacheFelixSystemreadyImplFrameworkStartCheckInfo
import org.openapitools.server.models.OrgApacheFelixSystemreadyImplServicesCheckInfo
import org.openapitools.server.models.OrgApacheFelixSystemreadyImplServletSystemAliveServletInfo
import org.openapitools.server.models.OrgApacheFelixSystemreadyImplServletSystemReadyServletInfo
import org.openapitools.server.models.OrgApacheFelixSystemreadySystemReadyMonitorInfo
import org.openapitools.server.models.OrgApacheFelixWebconsoleInternalServletOsgiManagerInfo
import org.openapitools.server.models.OrgApacheFelixWebconsolePluginsEventInternalPluginServletInfo
import org.openapitools.server.models.OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoInfo
import org.openapitools.server.models.OrgApacheHttpProxyconfiguratorInfo
import org.openapitools.server.models.OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderInfo
import org.openapitools.server.models.OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreInfo
import org.openapitools.server.models.OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceInfo
import org.openapitools.server.models.OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreInfo
import org.openapitools.server.models.OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacInfo
import org.openapitools.server.models.OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceInfo
import org.openapitools.server.models.OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServInfo
import org.openapitools.server.models.OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoInfo
import org.openapitools.server.models.OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersInfo
import org.openapitools.server.models.OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationInfo
import org.openapitools.server.models.OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfInfo
import org.openapitools.server.models.OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidInfo
import org.openapitools.server.models.OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeInfo
import org.openapitools.server.models.OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryInfo
import org.openapitools.server.models.OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderInfo
import org.openapitools.server.models.OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceInfo
import org.openapitools.server.models.OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigInfo
import org.openapitools.server.models.OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiInfo
import org.openapitools.server.models.OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraInfo
import org.openapitools.server.models.OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurInfo
import org.openapitools.server.models.OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiInfo
import org.openapitools.server.models.OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameInfo
import org.openapitools.server.models.OrgApacheJackrabbitOakSecurityUserUserConfigurationImplInfo
import org.openapitools.server.models.OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceInfo
import org.openapitools.server.models.OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryInfo
import org.openapitools.server.models.OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceInfo
import org.openapitools.server.models.OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceInfo
import org.openapitools.server.models.OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceInfo
import org.openapitools.server.models.OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeInfo
import org.openapitools.server.models.OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExInfo
import org.openapitools.server.models.OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrInfo
import org.openapitools.server.models.OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiInfo
import org.openapitools.server.models.OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluInfo
import org.openapitools.server.models.OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableInfo
import org.openapitools.server.models.OrgApacheJackrabbitVaultPackagingImplPackagingImplInfo
import org.openapitools.server.models.OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryInfo
import org.openapitools.server.models.OrgApacheSlingAuthCoreImplLogoutServletInfo
import org.openapitools.server.models.OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderInfo
import org.openapitools.server.models.OrgApacheSlingCaconfigImplConfigurationResolverImplInfo
import org.openapitools.server.models.OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraInfo
import org.openapitools.server.models.OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraInfo
import org.openapitools.server.models.OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviInfo
import org.openapitools.server.models.OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveInfo
import org.openapitools.server.models.OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiInfo
import org.openapitools.server.models.OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourInfo
import org.openapitools.server.models.OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyInfo
import org.openapitools.server.models.OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserInfo
import org.openapitools.server.models.OrgApacheSlingCommonsLogLogManagerFactoryConfigInfo
import org.openapitools.server.models.OrgApacheSlingCommonsLogLogManagerFactoryWriterInfo
import org.openapitools.server.models.OrgApacheSlingCommonsLogLogManagerInfo
import org.openapitools.server.models.OrgApacheSlingCommonsMetricsInternalLogReporterInfo
import org.openapitools.server.models.OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterInfo
import org.openapitools.server.models.OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplInfo
import org.openapitools.server.models.OrgApacheSlingCommonsSchedulerImplQuartzSchedulerInfo
import org.openapitools.server.models.OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckInfo
import org.openapitools.server.models.OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryInfo
import org.openapitools.server.models.OrgApacheSlingDatasourceDataSourceFactoryInfo
import org.openapitools.server.models.OrgApacheSlingDatasourceJNDIDataSourceFactoryInfo
import org.openapitools.server.models.OrgApacheSlingDiscoveryOakConfigInfo
import org.openapitools.server.models.OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckInfo
import org.openapitools.server.models.OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoInfo
import org.openapitools.server.models.OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAInfo
import org.openapitools.server.models.OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryInfo
import org.openapitools.server.models.OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoInfo
import org.openapitools.server.models.OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorInfo
import org.openapitools.server.models.OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryInfo
import org.openapitools.server.models.OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckInfo
import org.openapitools.server.models.OrgApacheSlingDistributionPackagingImplExporterAgentDistributioInfo
import org.openapitools.server.models.OrgApacheSlingDistributionPackagingImplExporterLocalDistributioInfo
import org.openapitools.server.models.OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiInfo
import org.openapitools.server.models.OrgApacheSlingDistributionPackagingImplImporterLocalDistributioInfo
import org.openapitools.server.models.OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiInfo
import org.openapitools.server.models.OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriInfo
import org.openapitools.server.models.OrgApacheSlingDistributionResourcesImplDistributionConfigurationInfo
import org.openapitools.server.models.OrgApacheSlingDistributionResourcesImplDistributionServiceResourInfo
import org.openapitools.server.models.OrgApacheSlingDistributionSerializationImplDistributionPackageBuInfo
import org.openapitools.server.models.OrgApacheSlingDistributionSerializationImplVltVaultDistributionInfo
import org.openapitools.server.models.OrgApacheSlingDistributionTransportImplUserCredentialsDistributiInfo
import org.openapitools.server.models.OrgApacheSlingDistributionTriggerImplDistributionEventDistributeInfo
import org.openapitools.server.models.OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerInfo
import org.openapitools.server.models.OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiInfo
import org.openapitools.server.models.OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigInfo
import org.openapitools.server.models.OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrInfo
import org.openapitools.server.models.OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeInfo
import org.openapitools.server.models.OrgApacheSlingEngineImplAuthSlingAuthenticatorInfo
import org.openapitools.server.models.OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterInfo
import org.openapitools.server.models.OrgApacheSlingEngineImplLogRequestLoggerInfo
import org.openapitools.server.models.OrgApacheSlingEngineImplLogRequestLoggerServiceInfo
import org.openapitools.server.models.OrgApacheSlingEngineImplSlingMainServletInfo
import org.openapitools.server.models.OrgApacheSlingEngineParametersInfo
import org.openapitools.server.models.OrgApacheSlingEventImplEventingThreadPoolInfo
import org.openapitools.server.models.OrgApacheSlingEventImplJobsDefaultJobManagerInfo
import org.openapitools.server.models.OrgApacheSlingEventImplJobsJcrPersistenceHandlerInfo
import org.openapitools.server.models.OrgApacheSlingEventImplJobsJobConsumerManagerInfo
import org.openapitools.server.models.OrgApacheSlingEventJobsQueueConfigurationInfo
import org.openapitools.server.models.OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWInfo
import org.openapitools.server.models.OrgApacheSlingFeatureflagsFeatureInfo
import org.openapitools.server.models.OrgApacheSlingFeatureflagsImplConfiguredFeatureInfo
import org.openapitools.server.models.OrgApacheSlingHapiImplHApiUtilImplInfo
import org.openapitools.server.models.OrgApacheSlingHcCoreImplCompositeHealthCheckInfo
import org.openapitools.server.models.OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplInfo
import org.openapitools.server.models.OrgApacheSlingHcCoreImplJmxAttributeHealthCheckInfo
import org.openapitools.server.models.OrgApacheSlingHcCoreImplScriptableHealthCheckInfo
import org.openapitools.server.models.OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletInfo
import org.openapitools.server.models.OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerInfo
import org.openapitools.server.models.OrgApacheSlingI18nImplI18NFilterInfo
import org.openapitools.server.models.OrgApacheSlingI18nImplJcrResourceBundleProviderInfo
import org.openapitools.server.models.OrgApacheSlingInstallerProviderJcrImplJcrInstallerInfo
import org.openapitools.server.models.OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentInfo
import org.openapitools.server.models.OrgApacheSlingJcrBaseInternalLoginAdminWhitelistInfo
import org.openapitools.server.models.OrgApacheSlingJcrDavexImplServletsSlingDavExServletInfo
import org.openapitools.server.models.OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportInfo
import org.openapitools.server.models.OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportInfo
import org.openapitools.server.models.OrgApacheSlingJcrRepoinitImplRepositoryInitializerInfo
import org.openapitools.server.models.OrgApacheSlingJcrRepoinitRepositoryInitializerInfo
import org.openapitools.server.models.OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplInfo
import org.openapitools.server.models.OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorInfo
import org.openapitools.server.models.OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryInfo
import org.openapitools.server.models.OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceInfo
import org.openapitools.server.models.OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicInfo
import org.openapitools.server.models.OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletInfo
import org.openapitools.server.models.OrgApacheSlingJmxProviderImplJMXResourceProviderInfo
import org.openapitools.server.models.OrgApacheSlingModelsImplModelAdapterFactoryInfo
import org.openapitools.server.models.OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderInfo
import org.openapitools.server.models.OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoInfo
import org.openapitools.server.models.OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryInfo
import org.openapitools.server.models.OrgApacheSlingResourcemergerPickerOverridingInfo
import org.openapitools.server.models.OrgApacheSlingScriptingCoreImplScriptCacheImplInfo
import org.openapitools.server.models.OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderInfo
import org.openapitools.server.models.OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryInfo
import org.openapitools.server.models.OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaInfo
import org.openapitools.server.models.OrgApacheSlingScriptingJspJspScriptEngineFactoryInfo
import org.openapitools.server.models.OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvInfo
import org.openapitools.server.models.OrgApacheSlingSecurityImplContentDispositionFilterInfo
import org.openapitools.server.models.OrgApacheSlingSecurityImplReferrerFilterInfo
import org.openapitools.server.models.OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedInfo
import org.openapitools.server.models.OrgApacheSlingServiceusermappingImplServiceUserMapperImplInfo
import org.openapitools.server.models.OrgApacheSlingServletsGetDefaultGetServletInfo
import org.openapitools.server.models.OrgApacheSlingServletsGetImplVersionVersionInfoServletInfo
import org.openapitools.server.models.OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskInfo
import org.openapitools.server.models.OrgApacheSlingServletsPostImplSlingPostServletInfo
import org.openapitools.server.models.OrgApacheSlingServletsResolverSlingServletResolverInfo
import org.openapitools.server.models.OrgApacheSlingSettingsImplSlingSettingsServiceImplInfo
import org.openapitools.server.models.OrgApacheSlingStartupfilterImplStartupFilterImplInfo
import org.openapitools.server.models.OrgApacheSlingTenantInternalTenantProviderImplInfo
import org.openapitools.server.models.OrgApacheSlingTracerInternalLogTracerInfo
import org.openapitools.server.models.OrgApacheSlingXssImplXSSFilterImplInfo

fun Route.ConfigmgrApi() {
    val gson = Gson()
    val empty = mutableMapOf<String, Any?>()

    route("/system/console/configMgr/Adaptive Form and Interactive Communication Web Channel Configuration") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "generatingCompliantData" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "showPlaceholder" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "makeFileNameUnique" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "af.scripting.compatversion" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : {
                        "values" : "",
                        "labels" : ""
                      },
                      "value" : ""
                    },
                    "maximumCacheEntries" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/Adaptive Form and Interactive Communication Web Channel Configuration' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/Adaptive Form and Interactive Communication Web Channel Theme Configuration") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "fontList" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/Adaptive Form and Interactive Communication Web Channel Theme Configuration' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/Analytics Component Query Cache Service") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "cq.analytics.component.query.cache.size" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/Analytics Component Query Cache Service' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/Apache Sling Health Check Result HTML Serializer") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "styleString" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/Apache Sling Health Check Result HTML Serializer' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.aem.formsndocuments.config.AEMFormsManagerConfiguration") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "formsManagerConfig.includeDeprecatedTemplates" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "formsManagerConfig.includeOOTBTemplates" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.aem.formsndocuments.config.AEMFormsManagerConfiguration' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.aem.transaction.core.impl.TransactionRecorder") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "isTransactionRecordingEnabled" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.aem.transaction.core.impl.TransactionRecorder' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.aem.upgrade.prechecks.hc.impl.DeprecateIndexesHC") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "hc.tags" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "hc.name" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "hc.mbean.name" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.aem.upgrade.prechecks.hc.impl.DeprecateIndexesHC' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.aem.upgrade.prechecks.hc.impl.ReplicationAgentsDisabledHC") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "hc.tags" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "hc.name" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "hc.mbean.name" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.aem.upgrade.prechecks.hc.impl.ReplicationAgentsDisabledHC' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.aem.upgrade.prechecks.mbean.impl.PreUpgradeTasksMBeanImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "service_location" : "service_location",
                  "bundle_location" : "bundle_location",
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "pre-upgrade.hc.tags" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "pre-upgrade.maintenance.tasks" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.aem.upgrade.prechecks.mbean.impl.PreUpgradeTasksMBeanImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.aem.upgrade.prechecks.tasks.impl.ConsistencyCheckTaskImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "fix.inconsistencies" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "root.path" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.aem.upgrade.prechecks.tasks.impl.ConsistencyCheckTaskImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.account.api.AccountManagementService") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "service_location" : "service_location",
                  "bundle_location" : "bundle_location",
                  "description" : "description",
                  "pid" : "pid",
                  "additionalProperties" : "additionalProperties",
                  "title" : "title",
                  "properties" : {
                    "cq.accountmanager.config.requestnewaccount.mail" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "cq.accountmanager.token.validity.period" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "cq.accountmanager.config.requestnewpwd.mail" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.account.api.AccountManagementService' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.account.impl.AccountManagementServlet") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "cq.accountmanager.config.informnewaccount.mail" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "cq.accountmanager.config.informnewpwd.mail" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.account.impl.AccountManagementServlet' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.address.impl.location.LocationListServlet") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "cq.address.location.default.maxResults" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.address.impl.location.LocationListServlet' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.audit.purge.Dam") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "auditlog.rule.contentpath" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "auditlog.rule.name" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "auditlog.rule.minimumage" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "auditlog.rule.types" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : {
                        "values" : "",
                        "labels" : ""
                      },
                      "value" : ""
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.audit.purge.Dam' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.audit.purge.Pages") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "auditlog.rule.contentpath" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "auditlog.rule.name" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "auditlog.rule.minimumage" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "auditlog.rule.types" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : {
                        "values" : "",
                        "labels" : ""
                      },
                      "value" : ""
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.audit.purge.Pages' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.audit.purge.Replication") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "auditlog.rule.contentpath" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "auditlog.rule.name" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "auditlog.rule.minimumage" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "auditlog.rule.types" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : {
                        "values" : "",
                        "labels" : ""
                      },
                      "value" : ""
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.audit.purge.Replication' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.cdn.rewriter.impl.AWSCloudFrontRewriter") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "keypair.alias" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "cdnrewriter.attributes" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "cdn.rewriter.distribution.domain" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "keypair.id" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "service.ranking" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.cdn.rewriter.impl.AWSCloudFrontRewriter' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.cdn.rewriter.impl.CDNConfigServiceImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "cdn.config.distribution.domain" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "cdn.config.path.prefixes" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "cdn.config.enable.rewriting" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "cdn.config.cdnttl" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "cdn.config.application.protocol" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.cdn.rewriter.impl.CDNConfigServiceImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.cdn.rewriter.impl.CDNRewriter") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "cdnrewriter.attributes" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "cdn.rewriter.distribution.domain" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "service.ranking" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.cdn.rewriter.impl.CDNRewriter' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.cloudconfig.core.impl.ConfigurationReplicationEventHandler") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "flush.agents" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.cloudconfig.core.impl.ConfigurationReplicationEventHandler' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.commerce.impl.asset.DynamicImageHandler") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "cq.commerce.asset.handler.active" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "cq.commerce.asset.handler.name" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.commerce.impl.asset.DynamicImageHandler' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.commerce.impl.asset.ProductAssetHandlerProviderImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "cq.commerce.asset.handler.fallback" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.commerce.impl.asset.ProductAssetHandlerProviderImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.commerce.impl.asset.StaticImageHandler") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "cq.commerce.asset.handler.active" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "cq.commerce.asset.handler.name" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.commerce.impl.asset.StaticImageHandler' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.commerce.impl.asset.VideoHandler") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "cq.commerce.asset.handler.active" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "cq.commerce.asset.handler.name" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.commerce.impl.asset.VideoHandler' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.commerce.impl.promotion.PromotionManagerImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "cq.commerce.promotion.root" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.commerce.impl.promotion.PromotionManagerImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.commerce.pim.impl.cataloggenerator.CatalogGeneratorImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "cq.commerce.cataloggenerator.bucketname" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "cq.commerce.cataloggenerator.bucketsize" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "cq.commerce.cataloggenerator.excludedtemplateproperties" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.commerce.pim.impl.cataloggenerator.CatalogGeneratorImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.commerce.pim.impl.PageEventListener") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "cq.commerce.pageeventlistener.enabled" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.commerce.pim.impl.PageEventListener' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.commerce.pim.impl.productfeed.ProductFeedServiceImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "Feed generator algorithm" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : {
                        "values" : "",
                        "labels" : ""
                      },
                      "value" : ""
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.commerce.pim.impl.productfeed.ProductFeedServiceImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.contentinsight.impl.ReportingServicesSettingsProvider") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "reportingservices.url" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.contentinsight.impl.ReportingServicesSettingsProvider' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.contentinsight.impl.servlets.BrightEdgeProxyServlet") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "brightedge.url" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.contentinsight.impl.servlets.BrightEdgeProxyServlet' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.contentinsight.impl.servlets.ReportingServicesProxyServlet") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "reportingservices.proxy.whitelist" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.contentinsight.impl.servlets.ReportingServicesProxyServlet' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.dam.cfm.impl.component.ComponentConfigImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "dam.cfm.component.variationProp" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "dam.cfm.component.fileReferenceProp" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "dam.cfm.component.resourceType" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "dam.cfm.component.elementsProp" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.dam.cfm.impl.component.ComponentConfigImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.dam.cfm.impl.conf.FeatureConfigImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "dam.cfm.referenceProperties" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "dam.cfm.resourceTypes" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.dam.cfm.impl.conf.FeatureConfigImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.dam.cfm.impl.content.rewriter.AssetProcessor") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "pipeline.type" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.dam.cfm.impl.content.rewriter.AssetProcessor' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.dam.cfm.impl.content.rewriter.ParRangeFilter") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "pipeline.type" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.dam.cfm.impl.content.rewriter.ParRangeFilter' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.dam.cfm.impl.content.rewriter.PayloadFilter") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "pipeline.type" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.dam.cfm.impl.content.rewriter.PayloadFilter' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.dam.dm.process.image.PTiffManagerImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "maxMemory" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.dam.dm.process.image.PTiffManagerImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.dam.ips.impl.replication.trigger.ReplicateOnModifyWorker") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "dmreplicateonmodify.enabled" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "dmreplicateonmodify.forcesyncdeletes" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.dam.ips.impl.replication.trigger.ReplicateOnModifyWorker' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.dam.mac.sync.helper.impl.MACSyncClientImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "com.adobe.dam.mac.sync.client.so.timeout" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.dam.mac.sync.helper.impl.MACSyncClientImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.dam.mac.sync.impl.DAMSyncServiceImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "com.adobe.cq.dam.mac.sync.damsyncservice.replicate.thread.wait.ms" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "com.adobe.cq.dam.mac.sync.damsyncservice.sync.renditions" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "com.adobe.cq.dam.mac.sync.damsyncservice.platform" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : {
                        "values" : "",
                        "labels" : ""
                      },
                      "value" : ""
                    },
                    "com.adobe.cq.dam.mac.sync.damsyncservice.registered_paths" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.dam.mac.sync.impl.DAMSyncServiceImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.dam.processor.nui.impl.NuiAssetProcessor") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "nuiServiceUrl" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "nuiApiKey" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "nuiEnabled" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.dam.processor.nui.impl.NuiAssetProcessor' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.dam.s7imaging.impl.is.ImageServerComponent") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "MaxRenderRgnPixels" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "RandomAccessUrlTimeout" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "AllowRemoteAccess" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "TcpPort" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "MaxMessageSize" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "WorkerThreads" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.dam.s7imaging.impl.is.ImageServerComponent' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.dam.s7imaging.impl.ps.PlatformServerServlet") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "cache.enable" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "cache.rootPaths" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "cache.maxEntries" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "cache.maxSize" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.dam.s7imaging.impl.ps.PlatformServerServlet' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.dam.webdav.impl.io.AssetIOHandler") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "createVersion" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "service.ranking" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "pathPrefix" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.dam.webdav.impl.io.AssetIOHandler' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.dam.webdav.impl.io.DamWebdavVersionLinkingJob") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "cq.dam.webdav.version.linking.enable" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "cq.dam.webdav.version.linking.scheduler.period" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "cq.dam.webdav.version.linking.staging.timeout" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.dam.webdav.impl.io.DamWebdavVersionLinkingJob' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.dam.webdav.impl.io.SpecialFilesHandler") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "com.day.cq.dam.core.impl.io.SpecialFilesHandler.filepatters" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.dam.webdav.impl.io.SpecialFilesHandler' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.deserfw.impl.DeserializationFirewallImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "firewall.deserialization.blacklist" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "firewall.deserialization.whitelist" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "firewall.deserialization.diagnostics" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.deserfw.impl.DeserializationFirewallImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.dtm.impl.service.DTMWebServiceImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "connection.timeout" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "socket.timeout" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.dtm.impl.service.DTMWebServiceImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.dtm.impl.servlets.DTMDeployHookServlet") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "dtm.staging.ip.whitelist" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "dtm.production.ip.whitelist" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.dtm.impl.servlets.DTMDeployHookServlet' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.dtm.reactor.impl.service.WebServiceImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "socketTimeout" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "endpointUri" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "connectionTimeout" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.dtm.reactor.impl.service.WebServiceImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.experiencelog.impl.ExperienceLogConfigServlet") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "service_location" : "service_location",
                  "bundle_location" : "bundle_location",
                  "description" : "description",
                  "pid" : "pid",
                  "additionalProperties" : "additionalProperties",
                  "title" : "title",
                  "properties" : {
                    "enabled" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "disabledForGroups" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.experiencelog.impl.ExperienceLogConfigServlet' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.hc.ContentPackagesHealthCheck") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "hc.tags" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "hc.name" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "package.names" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "hc.mbean.name" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.hc.ContentPackagesHealthCheck' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.history.impl.HistoryRequestFilter") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "service_location" : "service_location",
                  "bundle_location" : "bundle_location",
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "history.requestFilter.excludedExtensions" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "history.requestFilter.excludedSelectors" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.history.impl.HistoryRequestFilter' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.history.impl.HistoryServiceImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "service_location" : "service_location",
                  "bundle_location" : "bundle_location",
                  "description" : "description",
                  "pid" : "pid",
                  "additionalProperties" : "additionalProperties",
                  "title" : "title",
                  "properties" : {
                    "history.service.resourceTypes" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "history.service.pathFilter" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.history.impl.HistoryServiceImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.inbox.impl.typeprovider.ItemTypeProvider") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "inbox.impl.typeprovider.defaulturl.workitem" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "inbox.impl.typeprovider.defaulturl.task" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "inbox.impl.typeprovider.legacypaths" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "inbox.impl.typeprovider.defaulturl.failureitem" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "inbox.impl.typeprovider.registrypaths" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.inbox.impl.typeprovider.ItemTypeProvider' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.projects.impl.servlet.ProjectImageServlet") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "image.quality" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "image.supported.resolutions" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.projects.impl.servlet.ProjectImageServlet' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.projects.purge.Scheduler") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "scheduledpurge.templates" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "scheduledpurge.terminateRunningWorkflows" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "scheduledpurge.name" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "scheduledpurge.purgeActive" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "scheduledpurge.purgeAssets" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "scheduledpurge.purgeGroups" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "scheduledpurge.saveThreshold" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "scheduledpurge.daysold" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.projects.purge.Scheduler' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.scheduled.exporter.impl.ScheduledExporterImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "include.paths" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "exporter.user" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.scheduled.exporter.impl.ScheduledExporterImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.screens.analytics.impl.ScreensAnalyticsServiceImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "com.adobe.cq.screens.analytics.impl.url" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "com.adobe.cq.screens.analytics.impl.apikey" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "com.adobe.cq.screens.analytics.impl.environment" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : {
                        "values" : "",
                        "labels" : ""
                      },
                      "value" : ""
                    },
                    "com.adobe.cq.screens.analytics.impl.project" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "com.adobe.cq.screens.analytics.impl.sendFrequency" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.screens.analytics.impl.ScreensAnalyticsServiceImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.screens.device.impl.DeviceService") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "com.adobe.aem.screens.device.pasword.specialchars" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "com.adobe.aem.screens.device.pasword.minnumberchars" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "com.adobe.aem.screens.device.pasword.minlowercasechars" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "com.adobe.aem.screens.device.pasword.minuppercasechars" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "com.adobe.aem.screens.player.pingfrequency" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "com.adobe.aem.screens.device.pasword.minspecialchars" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "com.adobe.aem.screens.device.pasword.minlength" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.screens.device.impl.DeviceService' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.screens.device.registration.impl.RegistrationServiceImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "deviceRegistrationTimeout" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.screens.device.registration.impl.RegistrationServiceImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.screens.impl.handler.ChannelsUpdateHandler") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "cq.pagesupdatehandler.productresourcetypes" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "cq.pagesupdatehandler.dynamicsequenceresourcetypes" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "cq.pagesupdatehandler.videoresourcetypes" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "cq.pagesupdatehandler.imageresourcetypes" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "cq.pagesupdatehandler.previewmodepaths" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.screens.impl.handler.ChannelsUpdateHandler' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.screens.impl.jobs.DistributedDevicesStatiUpdateJob") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "scheduler.expression" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.screens.impl.jobs.DistributedDevicesStatiUpdateJob' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.screens.impl.remote.impl.DistributedHttpClientImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "com.adobe.aem.screens.impl.remote.request_timeout" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.screens.impl.remote.impl.DistributedHttpClientImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.screens.impl.ScreensChannelPostProcessor") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "screens.channels.properties.to.remove" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.screens.impl.ScreensChannelPostProcessor' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.password" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.pingTimeout" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.smtpserver" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.projectPath" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.recipients" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.scheduleFrequency" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.smtpport" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.usetls" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.username" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.screens.mq.activemq.impl.ArtemisJMSProvider") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "cluster.call.timeout" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "cluster.notification.interval" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "cluster.confirmation.window.size" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "global.size" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "addresses.address.full.message.policy" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : {
                        "values" : "",
                        "labels" : ""
                      },
                      "value" : ""
                    },
                    "cluster.producer.window.size" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "addresses.page.size.bytes" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "cluster.min.large.message.size" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "scheduled.thread.pool.max.size" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "cluster.call.failover.timeout" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "cluster.max.retry.interval" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "graceful.shutdown.timeout" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "cluster.user" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "cluster.duplicate.detection" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "max.disk.usage" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "cluster.initial.connect.attempts" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "id.cache.size" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "cluster.retry.interval.multiplier" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : 6.02745618307040320615897144307382404804229736328125
                    },
                    "topics" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "addresses.max.size.bytes" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "cluster.client.failure.check.period" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "addresses.page.cache.max.size" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "cluster.reconnect.attempts" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "cluster.retry.interval" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "cluster.connection.ttl" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "queues" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "persistence.enabled" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "addresses.max.delivery.attempts" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "cluster.password" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "cluster.notification.attempts" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "addresses.expiry.delay" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "service.ranking" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "thread.pool.max.size" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.screens.mq.activemq.impl.ArtemisJMSProvider' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.screens.offlinecontent.impl.BulkOfflineUpdateServiceImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "com.adobe.cq.screens.offlinecontent.impl.BulkOfflineUpdateServiceImpl.projectPath" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "com.adobe.cq.screens.offlinecontent.impl.BulkOfflineUpdateServiceImpl.scheduleFrequency" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.screens.offlinecontent.impl.BulkOfflineUpdateServiceImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.screens.offlinecontent.impl.OfflineContentServiceImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "disableSmartSync" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.screens.offlinecontent.impl.OfflineContentServiceImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.screens.segmentation.impl.SegmentationFeatureFlag") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "enableDataTriggeredContent" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.screens.segmentation.impl.SegmentationFeatureFlag' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.security.hc.bundles.impl.HtmlLibraryManagerConfigHealthCheck") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "hc.tags" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.security.hc.bundles.impl.HtmlLibraryManagerConfigHealthCheck' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.security.hc.bundles.impl.WcmFilterHealthCheck") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "hc.tags" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.security.hc.bundles.impl.WcmFilterHealthCheck' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.security.hc.dispatcher.impl.DispatcherAccessHealthCheck") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "dispatcher.filter.allowed" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "dispatcher.filter.blocked" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "hc.tags" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "dispatcher.address" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.security.hc.dispatcher.impl.DispatcherAccessHealthCheck' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.security.hc.packages.impl.ExampleContentHealthCheck") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "service_location" : "service_location",
                  "bundle_location" : "bundle_location",
                  "description" : "description",
                  "pid" : "pid",
                  "additionalProperties" : "additionalProperties",
                  "title" : "title",
                  "properties" : {
                    "hc.tags" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.security.hc.packages.impl.ExampleContentHealthCheck' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.security.hc.webserver.impl.ClickjackingHealthCheck") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "webserver.address" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "hc.tags" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.security.hc.webserver.impl.ClickjackingHealthCheck' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.social.accountverification.impl.AccountManagementConfigImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "ttl2" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "ttl1" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "enable" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.social.accountverification.impl.AccountManagementConfigImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.social.activitystreams.client.impl.SocialActivityComponentFactoryImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "priority" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.social.activitystreams.client.impl.SocialActivityComponentFactoryImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.social.activitystreams.client.impl.SocialActivityStreamComponentFactory") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "priority" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.social.activitystreams.client.impl.SocialActivityStreamComponentFactory' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.social.activitystreams.listener.impl.EventListenerHandler") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "event.topics" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "event.filter" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.social.activitystreams.listener.impl.EventListenerHandler' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.social.activitystreams.listener.impl.ModerationEventExtension") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "accepted" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "ranked" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.social.activitystreams.listener.impl.ModerationEventExtension' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.social.activitystreams.listener.impl.RatingEventActivitySuppressor") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "enable" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "ranking" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.social.activitystreams.listener.impl.RatingEventActivitySuppressor' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.social.activitystreams.listener.impl.ResourceActivityStreamProviderFactory") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "service_location" : "service_location",
                  "bundle_location" : "bundle_location",
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "streamPath" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "streamName" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.social.activitystreams.listener.impl.ResourceActivityStreamProviderFactory' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.social.calendar.client.endpoints.impl.CalendarOperationsImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "fieldWhitelist" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "attachmentTypeBlacklist" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "MaxRetry" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.social.calendar.client.endpoints.impl.CalendarOperationsImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.social.calendar.client.operationextensions.EventAttachment") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "attachmentTypeBlacklist" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "extension.order" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.social.calendar.client.operationextensions.EventAttachment' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.social.calendar.servlets.TimeZoneServlet") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "timezones.expirytime" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.social.calendar.servlets.TimeZoneServlet' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.social.commons.comments.endpoints.impl.CommentDeleteEventActivitySuppressor") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "ranking" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.social.commons.comments.endpoints.impl.CommentDeleteEventActivitySuppressor' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.social.commons.comments.endpoints.impl.CommentOperationService") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "fieldWhitelist" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "attachmentTypeBlacklist" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.social.commons.comments.endpoints.impl.CommentOperationService' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.social.commons.comments.endpoints.impl.TranslationOperationService") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "fieldWhitelist" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "attachmentTypeBlacklist" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.social.commons.comments.endpoints.impl.TranslationOperationService' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.social.commons.comments.listing.impl.SearchCommentSocialComponentListProvider") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "numUserLimit" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.social.commons.comments.listing.impl.SearchCommentSocialComponentListProvider' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.social.commons.comments.scheduler.impl.SearchScheduledPosts") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "maxSearchLimit" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "enableScheduledPostsSearch" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "numberOfMinutes" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.social.commons.comments.scheduler.impl.SearchScheduledPosts' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.social.commons.cors.CORSAuthenticationFilter") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "cors.enabling" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.social.commons.cors.CORSAuthenticationFilter' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.AndroidEmailClientProvider") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "priorityOrder" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "replyEmailPatterns" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.AndroidEmailClientProvider' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.CommentEmailBuilderImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "context.path" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.CommentEmailBuilderImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.CommentEmailEventListener") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "event.topics" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.CommentEmailEventListener' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.CustomEmailClientProvider") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "priorityOrder" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "replyEmailPatterns" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.CustomEmailClientProvider' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.EmailQuotedTextPatternsImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "pattern.time" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "pattern.email" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "pattern.month" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "pattern.year" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "pattern.dayOfMonth" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "pattern.newline" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "pattern.date" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "pattern.dateTime" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.EmailQuotedTextPatternsImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.EmailReplyConfigurationImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "email.subjectMaximumLength" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "email.replyToAddress" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "email.trackerIdPrefixInSubject" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "email.addCommentIdTo" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : {
                        "values" : "",
                        "labels" : ""
                      },
                      "value" : ""
                    },
                    "email.templates.rootPath" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "email.name" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "email.asHTML" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "email.createPostFromReply" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "email.trackerIdPrefixInBody" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "email.defaultUserName" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "email.replyToDelimiter" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.EmailReplyConfigurationImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.EmailReplyImporter") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "connectProtocol" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : {
                        "values" : "",
                        "labels" : ""
                      },
                      "value" : ""
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.EmailReplyImporter' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.GmailEmailClientProvider") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "priorityOrder" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "replyEmailPatterns" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.GmailEmailClientProvider' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.IOSEmailClientProvider") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "priorityOrder" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "replyEmailPatterns" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.IOSEmailClientProvider' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.MacmailEmailClientProvider") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "priorityOrder" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "replyEmailPatterns" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.MacmailEmailClientProvider' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.OutLookEmailClientProvider") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "priorityOrder" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "replyEmailPatterns" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.OutLookEmailClientProvider' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.UnknownEmailClientProvider") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "priorityOrder" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "replyEmailPatterns" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.UnknownEmailClientProvider' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.YahooEmailClientProvider") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "priorityOrder" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "replyEmailPatterns" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.YahooEmailClientProvider' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.social.commons.maintainance.impl.DeleteTempUGCImageUploads") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "ageOfFile" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "numberOfDays" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.social.commons.maintainance.impl.DeleteTempUGCImageUploads' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.social.commons.ugclimiter.impl.UGCLimiterServiceImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "event.topics" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "verbs" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "event.filter" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.social.commons.ugclimiter.impl.UGCLimiterServiceImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.social.commons.ugclimitsconfig.impl.CommunityUserUGCLimitsConfigImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "ugcLimitDuration" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "enable" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "UGCLimit" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "domains" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "toList" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.social.commons.ugclimitsconfig.impl.CommunityUserUGCLimitsConfigImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.social.connect.oauth.impl.FacebookProviderImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "provider.config.root" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "provider.config.facebook.fetch.fields" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "oauth.provider.id" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "oauth.cloud.config.root" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "provider.config.user.folder" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : {
                        "values" : "",
                        "labels" : ""
                      },
                      "value" : ""
                    },
                    "provider.config.facebook.fields" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "provider.config.refresh.userdata.enabled" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "provider.config.create.tags.enabled" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.social.connect.oauth.impl.FacebookProviderImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.social.connect.oauth.impl.SocialOAuthAuthenticationHandler") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "path" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "service.ranking" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.social.connect.oauth.impl.SocialOAuthAuthenticationHandler' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.social.connect.oauth.impl.SocialOAuthUserProfileMapper") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "twitter" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "facebook" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "provider.config.user.folder" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.social.connect.oauth.impl.SocialOAuthUserProfileMapper' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.social.connect.oauth.impl.TwitterProviderImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "provider.config.root" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "provider.config.twitter.enable.params" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "oauth.provider.id" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "provider.config.twitter.params" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "oauth.cloud.config.root" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "provider.config.user.folder" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : {
                        "values" : "",
                        "labels" : ""
                      },
                      "value" : ""
                    },
                    "provider.config.refresh.userdata.enabled" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.social.connect.oauth.impl.TwitterProviderImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.social.content.fragments.services.impl.CommunitiesFragmentCreationServiceImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "cq.social.content.fragments.services.enabled" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "cq.social.content.fragments.services.waitTimeSeconds" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.social.content.fragments.services.impl.CommunitiesFragmentCreationServiceImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.social.datastore.as.impl.ASResourceProviderFactory") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "cache.on" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "concurrency.level" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "cache.size" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "version.id" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "time.limit" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "cache.start.size" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "cache.ttl" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.social.datastore.as.impl.ASResourceProviderFactory' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.social.datastore.op.impl.SocialMSResourceProviderFactory") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "cache.on" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "concurrency.level" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "solr.zk.timeout" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "solr.commit" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "cache.size" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "cache.start.size" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "cache.ttl" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.social.datastore.op.impl.SocialMSResourceProviderFactory' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.social.datastore.rdb.impl.SocialRDBResourceProviderFactory") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "cache.on" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "concurrency.level" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "solr.zk.timeout" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "solr.commit" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "cache.size" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "cache.start.size" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "cache.ttl" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.social.datastore.rdb.impl.SocialRDBResourceProviderFactory' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.social.enablement.adaptors.EnablementLearningPathAdaptorFactory") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "isMemberCheck" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.social.enablement.adaptors.EnablementLearningPathAdaptorFactory' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.social.enablement.adaptors.EnablementResourceAdaptorFactory") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "isMemberCheck" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.social.enablement.adaptors.EnablementResourceAdaptorFactory' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.social.enablement.learningpath.endpoints.impl.EnablementLearningPathModelOperationService") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "fieldWhitelist" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.social.enablement.learningpath.endpoints.impl.EnablementLearningPathModelOperationService' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.social.enablement.resource.endpoints.impl.EnablementResourceModelOperationService") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "fieldWhitelist" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.social.enablement.resource.endpoints.impl.EnablementResourceModelOperationService' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.social.enablement.services.impl.AuthorMarkerImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "service_location" : "service_location",
                  "bundle_location" : "bundle_location",
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "service.ranking" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.social.enablement.services.impl.AuthorMarkerImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.social.filelibrary.client.endpoints.FilelibraryDownloadGetServlet") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "sling.servlet.extensions" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "sling.servlet.selectors" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.social.filelibrary.client.endpoints.FilelibraryDownloadGetServlet' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.social.filelibrary.client.endpoints.impl.FileLibraryOperationsService") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "fieldWhitelist" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "attachmentTypeBlacklist" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.social.filelibrary.client.endpoints.impl.FileLibraryOperationsService' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.social.forum.client.endpoints.impl.ForumOperationsService") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "fieldWhitelist" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "attachmentTypeBlacklist" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.social.forum.client.endpoints.impl.ForumOperationsService' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.social.forum.dispatcher.impl.FlushOperations") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "extension.order" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "flush.forumontopic" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.social.forum.dispatcher.impl.FlushOperations' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.social.group.client.impl.CommunityGroupCollectionComponentFactory") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "page.size" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "priority" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "group.listing.pagination.enable" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "group.listing.lazyloading.enable" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.social.group.client.impl.CommunityGroupCollectionComponentFactory' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.social.group.impl.GroupServiceImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "minWaitBetweenRetries" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "maxWaitTime" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.social.group.impl.GroupServiceImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.social.handlebars.GuavaTemplateCacheImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "service_location" : "service_location",
                  "bundle_location" : "bundle_location",
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "parameter.guava.cache.reload" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "parameter.guava.cache.params" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "parameter.guava.cache.enabled" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "service.ranking" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.social.handlebars.GuavaTemplateCacheImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.social.ideation.client.endpoints.impl.IdeationOperationsService") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "fieldWhitelist" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "attachmentTypeBlacklist" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.social.ideation.client.endpoints.impl.IdeationOperationsService' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.social.journal.client.endpoints.impl.JournalOperationsService") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "fieldWhitelist" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "attachmentTypeBlacklist" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.social.journal.client.endpoints.impl.JournalOperationsService' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.social.members.endpoints.impl.CommunityMemberGroupProfileOperationService") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "fieldWhitelist" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.social.members.endpoints.impl.CommunityMemberGroupProfileOperationService' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.social.members.endpoints.impl.CommunityMemberUserProfileOperationService") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "fieldWhitelist" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.social.members.endpoints.impl.CommunityMemberUserProfileOperationService' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.social.members.impl.CommunityMemberGroupProfileComponentFactory") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "everyoneLimit" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "priority" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.social.members.impl.CommunityMemberGroupProfileComponentFactory' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.social.messaging.client.endpoints.impl.MessagingOperationsServiceImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "failureMessageFrom" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "minWaitBetweenRetries" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "allowedAttachmentTypes" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "messageCountLimit" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "sentitems.path" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "countUpdatePoolSize" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "message.properties" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "supportGroupMessaging" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "failureTemplatePath" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "fieldWhitelist" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "maxRetries" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "maxTotalAttachmentSize" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "serviceSelector" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "messageBoxSizeLimit" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "maxTotalRecipients" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "attachmentTypeBlacklist" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "notifyFailure" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "supportAttachments" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "batchSize" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "inbox.path" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.social.messaging.client.endpoints.impl.MessagingOperationsServiceImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.social.moderation.dashboard.api.FilterGroupSocialComponentFactory") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "priority" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "resourceType.filters" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.social.moderation.dashboard.api.FilterGroupSocialComponentFactory' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.social.moderation.dashboard.api.ModerationDashboardSocialComponentFactory") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "priority" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.social.moderation.dashboard.api.ModerationDashboardSocialComponentFactory' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.social.moderation.dashboard.api.UserDetailsSocialComponentFactory") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "priority" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.social.moderation.dashboard.api.UserDetailsSocialComponentFactory' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.social.moderation.dashboard.internal.impl.FilterGroupSocialComponentFactoryV2") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "priority" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "resourceType.filters" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.social.moderation.dashboard.internal.impl.FilterGroupSocialComponentFactoryV2' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.social.notifications.impl.MentionsRouter") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "event.topics" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "event.filter" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.social.notifications.impl.MentionsRouter' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.social.notifications.impl.NotificationManagerImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "max.unread.notification.count" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.social.notifications.impl.NotificationManagerImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.social.notifications.impl.NotificationsRouter") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "event.topics" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "event.filter" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.social.notifications.impl.NotificationsRouter' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.social.qna.client.endpoints.impl.QnaForumOperationsService") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "fieldWhitelist" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "attachmentTypeBlacklist" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.social.qna.client.endpoints.impl.QnaForumOperationsService' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.social.reporting.analytics.services.impl.AnalyticsReportImporterServiceImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "cq.social.reporting.analytics.polling.importer.pageSize" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "cq.social.reporting.analytics.polling.importer.interval" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.social.reporting.analytics.services.impl.AnalyticsReportImporterServiceImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.social.reporting.analytics.services.impl.AnalyticsReportManagementServiceImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "report.fetch.delay" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.social.reporting.analytics.services.impl.AnalyticsReportManagementServiceImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.social.reporting.analytics.services.impl.SiteTrendReportSocialComponentFactory") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "priority" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "cq.social.console.analytics.sites.mapping" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.social.reporting.analytics.services.impl.SiteTrendReportSocialComponentFactory' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.social.review.client.endpoints.impl.ReviewOperationsService") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "fieldWhitelist" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "attachmentTypeBlacklist" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.social.review.client.endpoints.impl.ReviewOperationsService' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.social.scf.core.operations.impl.SocialOperationsServlet") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "sling.servlet.extensions" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "sling.servlet.selectors" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.social.scf.core.operations.impl.SocialOperationsServlet' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.social.scf.endpoints.impl.DefaultSocialGetServlet") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "sling.servlet.extensions" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "sling.servlet.selectors" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.social.scf.endpoints.impl.DefaultSocialGetServlet' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.social.scoring.impl.ScoringEventListener") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "event.topics" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "event.filter" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.social.scoring.impl.ScoringEventListener' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.social.serviceusers.internal.impl.ServiceUserWrapperImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "enableFallback" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.social.serviceusers.internal.impl.ServiceUserWrapperImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.social.site.endpoints.impl.SiteOperationService") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "sitePathFilters" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "fieldWhitelist" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "sitePackageGroup" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.social.site.endpoints.impl.SiteOperationService' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.social.site.impl.AnalyticsComponentConfigurationServiceImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "cq.social.console.analytics.components" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.social.site.impl.AnalyticsComponentConfigurationServiceImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.social.site.impl.SiteConfiguratorImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "componentsUsingTags" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.social.site.impl.SiteConfiguratorImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.social.srp.impl.SocialSolrConnector") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "srp.type" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.social.srp.impl.SocialSolrConnector' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.social.sync.impl.DiffChangesObserver") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "propertyNames" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "agentName" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "enabled" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "diffPath" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.social.sync.impl.DiffChangesObserver' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.social.sync.impl.GroupSyncListenerImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "ignorablenodes" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "nodetypes" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "ignorableprops" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "enabled" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "distfolders" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.social.sync.impl.GroupSyncListenerImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.social.sync.impl.PublisherSyncServiceImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "activeRunModes" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.social.sync.impl.PublisherSyncServiceImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.social.sync.impl.UserSyncListenerImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "ignorablenodes" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "nodetypes" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "ignorableprops" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "enabled" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "distfolders" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.social.sync.impl.UserSyncListenerImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.social.translation.impl.TranslationServiceConfigManager") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "translate.attribution" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "translate.caching.duration" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "translate.session.save.batchLimit" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "translate.language" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : {
                        "values" : "",
                        "labels" : ""
                      },
                      "value" : ""
                    },
                    "translate.display" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : {
                        "values" : "",
                        "labels" : ""
                      },
                      "value" : ""
                    },
                    "translate.smart.rendering" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : {
                        "values" : "",
                        "labels" : ""
                      },
                      "value" : ""
                    },
                    "translate.session.save.interval" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "translate.caching" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : {
                        "values" : "",
                        "labels" : ""
                      },
                      "value" : ""
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.social.translation.impl.TranslationServiceConfigManager' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.social.translation.impl.UGCLanguageDetector") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "event.topics" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "queueSize" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "keepAliveTime" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "translate.listener.type" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "translate.property.list" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "poolSize" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "event.filter" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "maxPoolSize" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.social.translation.impl.UGCLanguageDetector' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.social.ugcbase.dispatcher.impl.FlushServiceImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "threadPoolSize" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "workerSleepTime" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "delayTime" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.social.ugcbase.dispatcher.impl.FlushServiceImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.social.ugcbase.impl.AysncReverseReplicatorImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "queueSize" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "keepAliveTime" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "poolSize" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "maxPoolSize" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.social.ugcbase.impl.AysncReverseReplicatorImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.social.ugcbase.impl.PublisherConfigurationImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "isPrimaryPublisher" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.social.ugcbase.impl.PublisherConfigurationImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.social.ugcbase.impl.SocialUtilsImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "legacyCloudUGCPathMapping" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.social.ugcbase.impl.SocialUtilsImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.social.ugcbase.moderation.impl.AutoModerationImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "automoderation.onfailurestop" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "automoderation.sequence" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.social.ugcbase.moderation.impl.AutoModerationImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.social.ugcbase.moderation.impl.SentimentProcess") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "watchwords.negative" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "watchwords.positive" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "watchwords.path" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "sentiment.path" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.social.ugcbase.moderation.impl.SentimentProcess' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.social.ugcbase.security.impl.DefaultAttachmentTypeBlacklistService") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "default.attachment.type.blacklist" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "baseline.attachment.type.blacklist" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.social.ugcbase.security.impl.DefaultAttachmentTypeBlacklistService' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.social.ugcbase.security.impl.SaferSlingPostValidatorImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "parameter.whitelist" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "resourcetype.whitelist" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "modifier.whitelist" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "operation.whitelist" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "operation.whitelist.prefixes" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "typehint.whitelist" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "binary.parameter.whitelist" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "parameter.whitelist.prefixes" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.social.ugcbase.security.impl.SaferSlingPostValidatorImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.social.user.endpoints.impl.UsersGroupFromPublishServlet") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "sling.servlet.extensions" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "sling.servlet.paths" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "sling.servlet.methods" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.social.user.endpoints.impl.UsersGroupFromPublishServlet' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.social.user.impl.transport.HttpToPublisher") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "agent.configuration" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "enabled.cipher.suites" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "enable" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "disabled.cipher.suites" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "context.path" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.social.user.impl.transport.HttpToPublisher' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.ui.wcm.commons.internal.servlets.rte.RTEFilterServletFactory.amended") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "resource.types" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.ui.wcm.commons.internal.servlets.rte.RTEFilterServletFactory.amended' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.upgrades.cleanup.impl.UpgradeContentCleanup") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "delete.path.regexps" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "delete.sql2.query" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.upgrades.cleanup.impl.UpgradeContentCleanup' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.upgrades.cleanup.impl.UpgradeInstallFolderCleanup") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "delete.name.regexps" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.upgrades.cleanup.impl.UpgradeInstallFolderCleanup' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.wcm.jobs.async.impl.AsyncDeleteConfigProviderService") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "jobTopicName" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "emailEnabled" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "threshold" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.wcm.jobs.async.impl.AsyncDeleteConfigProviderService' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.wcm.jobs.async.impl.AsyncJobCleanUpTask") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "job.purge.threshold" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "scheduler.expression" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "job.purge.max.jobs" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.wcm.jobs.async.impl.AsyncJobCleanUpTask' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.wcm.jobs.async.impl.AsyncMoveConfigProviderService") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "jobTopicName" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "emailEnabled" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "threshold" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.wcm.jobs.async.impl.AsyncMoveConfigProviderService' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.wcm.jobs.async.impl.AsyncPageMoveConfigProviderService") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "jobTopicName" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "emailEnabled" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "threshold" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.wcm.jobs.async.impl.AsyncPageMoveConfigProviderService' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.wcm.launches.impl.LaunchesEventHandler") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "launches.eventhandler.threadpool.maxsize" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "launches.eventhandler.updatelastmodification" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "event.filter" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "launches.eventhandler.threadpool.priority" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : {
                        "values" : "",
                        "labels" : ""
                      },
                      "value" : ""
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.wcm.launches.impl.LaunchesEventHandler' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.wcm.mobile.qrcode.servlet.QRCodeImageGenerator") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "cq.wcm.qrcode.servlet.whitelist" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.wcm.mobile.qrcode.servlet.QRCodeImageGenerator' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.wcm.style.internal.ComponentStyleInfoCacheImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "size" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.wcm.style.internal.ComponentStyleInfoCacheImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.cq.wcm.translation.impl.TranslationPlatformConfigurationImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "syncTranslationState.lockTimeoutInMinutes" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "schedulingRepeatTranslation.schedulingFormat" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "syncTranslationState.schedulingFormat" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "export.format" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : {
                        "values" : "",
                        "labels" : ""
                      },
                      "value" : ""
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.cq.wcm.translation.impl.TranslationPlatformConfigurationImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.fd.fp.config.FormsPortalDraftsandSubmissionConfigService") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "draft.data.service" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "submit.metadata.service" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "pendingSign.metadata.service" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "portal.outboxes" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "submit.data.service" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "pendingSign.data.service" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "draft.metadata.service" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.fd.fp.config.FormsPortalDraftsandSubmissionConfigService' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.fd.fp.config.FormsPortalSchedulerService") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "formportal.interval" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.fd.fp.config.FormsPortalSchedulerService' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.forms.common.service.impl.DefaultDataProvider") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "alloweddataFileLocations" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.forms.common.service.impl.DefaultDataProvider' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.forms.common.service.impl.FormsCommonConfigurationServiceImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "tempStorageConfig" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : {
                        "values" : "",
                        "labels" : ""
                      },
                      "value" : ""
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.forms.common.service.impl.FormsCommonConfigurationServiceImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.forms.common.servlet.TempCleanUpTask") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "scheduler.expression" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "Duration for Temporary Storage" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "Duration for Anonymous Storage" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.forms.common.servlet.TempCleanUpTask' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.granite.acp.platform.PlatformServlet") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "file.type.extension.map" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "query.limit" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.granite.acp.platform.PlatformServlet' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.granite.activitystreams.impl.ActivityManagerImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "aggregate.relationships" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "aggregate.descend.virtual" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.granite.activitystreams.impl.ActivityManagerImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.granite.analyzer.base.SystemStatusServlet") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "service_location" : "service_location",
                  "bundle_location" : "bundle_location",
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "disabled" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.granite.analyzer.base.SystemStatusServlet' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.granite.analyzer.scripts.compile.AllScriptsCompilerServlet") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "service_location" : "service_location",
                  "bundle_location" : "bundle_location",
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "disabled" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.granite.analyzer.scripts.compile.AllScriptsCompilerServlet' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.granite.apicontroller.FilterResolverHookFactory") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "service_location" : "service_location",
                  "bundle_location" : "bundle_location",
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "com.adobe.cq.social.cq-social-serviceusers-impl" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "org.apache.sling.jcr.davex" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "com.adobe.xmp.worker.files.native.fragment.win" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "com.adobe.cq.media.cq-media-publishing-dps-fp-core" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "com.adobe.cq.exp-jspel-resolver" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "com.adobe.cq.social.cq-social-calendar-impl" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "com.adobe.cq.com.adobe.cq.projects.core" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "org.apache.sling.models.impl" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "com.adobe.cq.dam.cq-scene7-imaging" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "com.adobe.cq.cloud-config.components" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "com.adobe.cq.cq-pre-upgrade-cleanup" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "com.adobe.cq.social.cq-social-ms-provider" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "com.day.cq.dam.dam-webdav-support" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "com.day.cq.cq-licensebranding" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "com.adobe.cq.myspell" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "com.adobe.granite.replication.hc.impl" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "com.adobe.cq.cq-contexthub-commons" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "org.apache.felix.webconsole.plugins.memoryusage" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "org.apache.sling.bundleresource.impl" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "org.apache.sling.distribution.core" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "com.adobe.cq.com.adobe.cq.wcm.style" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "com.adobe.granite.compat-router" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "org.apache.sling.distribution.api" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "com.adobe.dam.cq-dam-cfm-impl" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "org.apache.sling.datasource" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "org.apache.sling.scripting.sightly.models.provider" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "com.adobe.granite.bundles.hc.impl" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "org.apache.jackrabbit.oak-solr-osgi" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "com.adobe.cq.social.cq-social-scoring-basic-impl" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "com.adobe.cq.com.adobe.cq.editor" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "com.adobe.granite.crypto.config" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "com.adobe.granite.queries" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "we.retail.client.app.core" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "com.adobe.granite.csrf" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "com.adobe.granite.startup" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "org.apache.sling.tracer" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "org.apache.sling.servlets.get" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "com.adobe.granite.crxde-lite" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "com.adobe.cq.sample.we.retail.core" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "org.apache.sling.servlets.compat" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "org.apache.sling.discovery.base" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "org.apache.jackrabbit.oak-segment-tar" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "com.adobe.cq.screens.com.adobe.cq.screens.dcc" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "org.apache.sling.resourceresolver" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "org.apache.sling.launchpad.installer" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "com.adobe.cq.social.cq-social-badging-impl" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "org.apache.sling.scripting.sightly.js.provider" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "com.adobe.granite.taskmanagement.workflow" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "com.adobe.cq.social.cq-social-jcr-provider" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "com.adobe.cq.social.cq-social-scoring-impl" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "com.adobe.cq.cloud-config.core" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "com.adobe.cq.social.cq-social-notifications-channels-web" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "day-commons-jrawio" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "com.adobe.granite.crx-explorer" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "com.adobe.granite.rest.assets" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "com.adobe.cq.social.cq-social-badging-basic-impl" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "com.adobe.cq.cq-activitymap-integration" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "org.apache.sling.installer.provider.jcr" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "com.adobe.granite.auth.sso" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "com.day.cq.cq-authhandler" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "com.adobe.granite.jetty.ssl" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "com.adobe.cq.cq-rest-sites" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "org.apache.felix.org.apache.felix.threaddump" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "org.apache.felix.webconsole.plugins.event" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "org.apache.sling.scripting.jst" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "com.adobe.granite.jobs.async" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "com.adobe.granite.ui.clientlibs.compiler.less" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "org.apache.sling.discovery.oak" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "com.adobe.granite.crypto.file" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "com.adobe.cq.social.cq-social-as-provider" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "com.adobe.xmp.worker.files.native.fragment.linux" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "com.adobe.xmp.worker.files.native.fragment.macosx" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "com.adobe.cq.social.cq-social-scf-impl" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "com.adobe.granite.repository.hc.impl" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "org.apache.sling.security" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "org.apache.sling.jmx.provider" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "com.adobe.cq.cq-security-hc" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "org.apache.felix.http.sslfilter" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "org.apache.sling.extensions.webconsolesecurityprovider" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "org.apache.sling.hc.webconsole" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "com.adobe.granite.webconsole.plugins" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "com.day.cq.cq-notifcation-impl" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "com.adobe.cq.social.cq-social-notifications-impl" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "com.adobe.granite.security.ui" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "org.apache.sling.scripting.javascript" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "com.adobe.granite.maintenance.oak" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "com.adobe.cq.social.cq-social-enablement-impl" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "com.day.cq.dam.cq-dam-asset-usage" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "com.adobe.cq.social.cq-social-srp-impl" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "com.day.commons.osgi.wrapper.simple-jndi" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "com.adobe.granite.dropwizard.metrics" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "com.adobe.cq.social.cq-social-members-impl" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "com.adobe.granite.installer.factory.packages" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "com.adobe.granite.ui.clientlibs.processor.gcc" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "org.apache.sling.startupfilter.disabler" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "com.adobe.cq.cq-healthcheck" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "org.apache.sling.installer.provider.file" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "com.adobe.cq.dtm-reactor.core" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "com.adobe.cq.cloud-config.ui" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "org.apache.sling.commons.log.webconsole" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "org.apache.sling.installer.console" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "org.apache.felix.webconsole.plugins.packageadmin" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "com.adobe.granite.conf.ui.core" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "com.adobe.cq.social.cq-social-rdb-provider" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "org.apache.sling.repoinit.parser" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "org.apache.sling.discovery.support" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "com.adobe.cq.social.cq-social-graph-impl" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "com.day.cq.dam.cq-dam-s7dam" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "com.adobe.granite.apicontroller" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "org.apache.jackrabbit.oak-auth-ldap" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "com.adobe.granite.conf" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "com.day.cq.dam.cq-dam-similaritysearch" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "com.day.cq.wcm.cq-msm-core" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "com.adobe.granite.frags.impl" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "com.adobe.granite.cors" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "com.adobe.granite.workflow.console" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "com.day.cq.cq-compat-configupdate" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "com.adobe.granite.crypto.jcr" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "com.day.cq.replication.extensions" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "com.adobe.forms.foundation-forms-foundation-base" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "org.apache.sling.commons.fsclassloader" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "com.adobe.granite.gibson" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "com.adobe.granite.infocollector" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "com.adobe.granite.taskmanagement.core" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "com.adobe.cq.cdn.cdn-rewriter" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "com.adobe.granite.tagsoup" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "com.adobe.cq.cq-multisite-targeting" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "com.adobe.cq.social.cq-social-ugcbase-impl" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "com.adobe.cq.json-schema-parser" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "com.day.cq.pre-upgrade-tasks" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "com.adobe.cq.mobile.cq-mobile-index-builder" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "com.adobe.cq.screens.com.adobe.cq.screens.mq.core" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "com.adobe.cq.mobile.cq-mobile-caas" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "com.adobe.cq.social.cq-social-ideation-impl" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "com.adobe.cq.com.adobe.cq.ui.commons" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "com.day.cq.cq-search-ext" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "com.day.cq.dam.cq-dam-annotation-print" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "com.adobe.cq.social.cq-social-content-fragments-impl" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "com.adobe.granite.crypto.extension" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "com.adobe.granite.monitoring.core" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "com.day.cq.wcm.cq-wcm-translation" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "com.day.cq.cq-replication-audit" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "com.adobe.cq.inbox.cq-inbox" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "org.apache.felix.webconsole.plugins.ds" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "org.apache.sling.resource.inventory" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "com.adobe.cq.dtm-reactor.ui" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "com.adobe.cq.mobile.cq-mobile-phonegap-build" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "com.adobe.granite.repository.checker" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "com.adobe.cq.dam.cq-dam-svg-handler" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "com.adobe.cq.cq-dtm" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "com.adobe.granite.distribution.core" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "org.apache.aries.jmx.whiteboard" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "com.adobe.cq.com.adobe.cq.projects.wcm.core" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "com.adobe.cq.cq-product-info-provider" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "org.apache.sling.jcr.resourcesecurity" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "com.adobe.granite.asset.core" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.granite.apicontroller.FilterResolverHookFactory' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.granite.auth.cert.impl.ClientCertAuthHandler") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "path" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "service.ranking" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.granite.auth.cert.impl.ClientCertAuthHandler' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.granite.auth.ims") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "service_location" : "service_location",
                  "bundle_location" : "bundle_location",
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "configid" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "scope" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.granite.auth.ims' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.granite.auth.ims.impl.ExternalUserIdMappingProviderExtension") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "oauth.provider.id" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.granite.auth.ims.impl.ExternalUserIdMappingProviderExtension' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.granite.auth.ims.impl.IMSAccessTokenRequestCustomizerImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "auth.ims.client.secret" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "customizer.type" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.granite.auth.ims.impl.IMSAccessTokenRequestCustomizerImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.granite.auth.ims.impl.IMSInstanceCredentialsValidator") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "oauth.provider.id" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.granite.auth.ims.impl.IMSInstanceCredentialsValidator' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.granite.auth.ims.impl.IMSProviderImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "oauth.provider.ims.session.property" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "oauth.provider.ims.extended.details.urls" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "oauth.provider.ims.validate.token.url" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "oauth.provider.id" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "oauth.provider.ims.only.license.group" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "oauth.provider.ims.authorization.url" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "oauth.provider.ims.service.token.client.secret" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "ims.org.ref" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "oauth.provider.ims.profile.url" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "oauth.provider.ims.service.token" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "ims.group.mapping" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "oauth.provider.ims.service.token.client.id" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "oauth.provider.ims.token.url" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.granite.auth.ims.impl.IMSProviderImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.granite.auth.ims.impl.ImsConfigProviderImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "ims.owningEntity" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "oauth.configmanager.ims.configid" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "aem.instanceId" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "ims.serviceCode" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.granite.auth.ims.impl.ImsConfigProviderImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.granite.auth.oauth.accesstoken.provider") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "auth.token.provider.relaxed.ssl" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "auth.token.provider.conn.timeout" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "auth.token.provider.client.id" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "auth.token.provider.endpoint" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "token.request.customizer.type" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "auth.token.provider.default.claims" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "auth.token.validator.type" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "auth.token.provider.so.timeout" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "auth.token.provider.title" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "auth.access.token.request" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "auth.token.provider.keypair.alias" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "auth.token.provider.scope" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "auth.token.provider.reuse.access.token" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "name" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.granite.auth.oauth.accesstoken.provider' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.granite.auth.oauth.impl.BearerAuthenticationHandler") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "path" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "auth.bearer.sync.ims" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "auth.tokenRequestParameter" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "oauth.clientIds.allowed" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "oauth.jwt.support" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "oauth.bearer.configid" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.granite.auth.oauth.impl.BearerAuthenticationHandler' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.granite.auth.oauth.impl.DefaultTokenValidatorImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "auth.token.validator.type" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.granite.auth.oauth.impl.DefaultTokenValidatorImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.granite.auth.oauth.impl.FacebookProviderImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "oauth.provider.id" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.granite.auth.oauth.impl.FacebookProviderImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.granite.auth.oauth.impl.GithubProviderImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "oauth.provider.id" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "oauth.provider.github.profile.url" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "oauth.provider.github.authorization.url" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "oauth.provider.github.token.url" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.granite.auth.oauth.impl.GithubProviderImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.granite.auth.oauth.impl.GraniteProvider") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "oauth.provider.granite.authorization.url" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "oauth.provider.id" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "oauth.provider.granite.profile.url" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "oauth.provider.granite.token.url" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "oauth.provider.granite.extended.details.urls" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.granite.auth.oauth.impl.GraniteProvider' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.granite.auth.oauth.impl.helper.ProviderConfigManager") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "service_location" : "service_location",
                  "bundle_location" : "bundle_location",
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "oauth.cookie.login.timeout" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "oauth.cookie.max.age" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.granite.auth.oauth.impl.helper.ProviderConfigManager' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.granite.auth.oauth.impl.helper.ProviderConfigManagerInternal") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "oauth.cookie.login.timeout" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "oauth.cookie.max.age" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.granite.auth.oauth.impl.helper.ProviderConfigManagerInternal' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.granite.auth.oauth.impl.OAuthAuthenticationHandler") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "path" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.granite.auth.oauth.impl.OAuthAuthenticationHandler' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.granite.auth.oauth.impl.TwitterProviderImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "oauth.provider.id" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.granite.auth.oauth.impl.TwitterProviderImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.granite.auth.oauth.provider") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "oauth.create.users" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "oauth.config.id" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "oauth.userid.property" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "oauth.access.token.persist.cookie" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "force.strict.username.matching" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "oauth.scope" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "oauth.hash.userids" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "oauth.client.id" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "oauth.access.token.persist" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "oauth.client.secret" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "oauth.callBackUrl" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "oauth.redirect.request.params" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "oauth.encode.userids" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "oauth.csrf.state.protection" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "oauth.config.siblings.allow" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "oauth.config.provider.id" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.granite.auth.oauth.provider' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.granite.auth.requirement.impl.DefaultRequirementHandler") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "supportedPaths" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.granite.auth.requirement.impl.DefaultRequirementHandler' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.granite.auth.saml.SamlAuthenticationHandler") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "service_location" : "service_location",
                  "bundle_location" : "bundle_location",
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "groupMembershipAttribute" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "idpHttpRedirect" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "idpCertAlias" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "defaultGroups" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "addGroupMemberships" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "path" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "assertionConsumerServiceURL" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "idpUrl" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "synchronizeAttributes" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "userIntermediatePath" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "serviceProviderEntityId" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "clockTolerance" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "spPrivateKeyAlias" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "keyStorePassword" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "digestMethod" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "signatureMethod" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "defaultRedirectUrl" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "identitySyncType" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : {
                        "values" : "",
                        "labels" : ""
                      },
                      "value" : ""
                    },
                    "idpIdentifier" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "nameIdFormat" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "logoutUrl" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "useEncryption" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "createUser" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "handleLogout" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "service.ranking" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "userIDAttribute" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.granite.auth.saml.SamlAuthenticationHandler' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.granite.auth.sso.impl.SsoAuthenticationHandler") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "path" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "headers" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "jaas.controlFlag" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "jaas.realmName" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "format" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "usermap" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "jaas.ranking" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "trustedCredentialsAttribute" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "parameters" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "service.ranking" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "cookies" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.granite.auth.sso.impl.SsoAuthenticationHandler' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.granite.bundles.hc.impl.CodeCacheHealthCheck") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "minimum.code.cache.size" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "hc.tags" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.granite.bundles.hc.impl.CodeCacheHealthCheck' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.granite.bundles.hc.impl.CrxdeSupportBundleHealthCheck") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "hc.tags" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.granite.bundles.hc.impl.CrxdeSupportBundleHealthCheck' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.granite.bundles.hc.impl.DavExBundleHealthCheck") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "hc.tags" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.granite.bundles.hc.impl.DavExBundleHealthCheck' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.granite.bundles.hc.impl.InactiveBundlesHealthCheck") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "ignored.bundles" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "hc.tags" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.granite.bundles.hc.impl.InactiveBundlesHealthCheck' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.granite.bundles.hc.impl.JobsHealthCheck") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "hc.tags" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "max.queued.jobs" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.granite.bundles.hc.impl.JobsHealthCheck' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.granite.bundles.hc.impl.SlingGetServletHealthCheck") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "hc.tags" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.granite.bundles.hc.impl.SlingGetServletHealthCheck' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.granite.bundles.hc.impl.SlingJavaScriptHandlerHealthCheck") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "hc.tags" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.granite.bundles.hc.impl.SlingJavaScriptHandlerHealthCheck' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.granite.bundles.hc.impl.SlingJspScriptHandlerHealthCheck") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "hc.tags" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.granite.bundles.hc.impl.SlingJspScriptHandlerHealthCheck' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.granite.bundles.hc.impl.SlingReferrerFilterHealthCheck") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "hc.tags" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.granite.bundles.hc.impl.SlingReferrerFilterHealthCheck' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.granite.bundles.hc.impl.WebDavBundleHealthCheck") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "hc.tags" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.granite.bundles.hc.impl.WebDavBundleHealthCheck' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.granite.comments.internal.CommentReplicationContentFilterFactory") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "replicate.comment.resourceTypes" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.granite.comments.internal.CommentReplicationContentFilterFactory' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.granite.compatrouter.impl.CompatSwitchingServiceImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "compatgroups" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "enabled" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.granite.compatrouter.impl.CompatSwitchingServiceImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.granite.compatrouter.impl.RoutingConfig") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "id" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "compatPath" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "newPath" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.granite.compatrouter.impl.RoutingConfig' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.granite.compatrouter.impl.SwitchMappingConfig") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "ids" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "group" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.granite.compatrouter.impl.SwitchMappingConfig' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.granite.conf.impl.RuntimeAwareConfigurationResourceResolvingStrategy") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "fallbackPaths" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "enabled" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.granite.conf.impl.RuntimeAwareConfigurationResourceResolvingStrategy' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.granite.contexthub.impl.ContextHubImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "com.adobe.granite.contexthub.show_ui" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "com.adobe.granite.contexthub.silent_mode" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.granite.contexthub.impl.ContextHubImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.granite.cors.impl.CORSPolicyImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "supportedheaders" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "alloworigin" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "maxage" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "allowedpaths" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "alloworiginregexp" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "supportedmethods" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "supportscredentials" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "exposedheaders" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.granite.cors.impl.CORSPolicyImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.granite.csrf.impl.CSRFFilter") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "service_location" : "service_location",
                  "bundle_location" : "bundle_location",
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "filter.methods" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "filter.excluded.paths" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "filter.safe.user.agents" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "filter.enable.safe.user.agents" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.granite.csrf.impl.CSRFFilter' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.granite.csrf.impl.CSRFServlet") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "csrf.token.expires.in" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "sling.auth.requirements" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.granite.csrf.impl.CSRFServlet' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.granite.distribution.core.impl.CryptoDistributionTransportSecretProvider") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "name" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "username" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "encryptedPassword" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.granite.distribution.core.impl.CryptoDistributionTransportSecretProvider' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.granite.distribution.core.impl.diff.DiffChangesObserver") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "serviceUser.target" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "propertyNames" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "agentName" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "distributionDelay" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "observedPath" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "serviceName" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "enabled" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "diffPath" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.granite.distribution.core.impl.diff.DiffChangesObserver' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.granite.distribution.core.impl.diff.DiffEventListener") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "serviceUser.target" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "serviceName" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "diffPath" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.granite.distribution.core.impl.diff.DiffEventListener' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.granite.distribution.core.impl.DistributionToReplicationEventTransformer") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "importer.name" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.granite.distribution.core.impl.DistributionToReplicationEventTransformer' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.granite.distribution.core.impl.replication.adapters.ReplicationAgentProvider") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "forward.requests" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "providerName" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.granite.distribution.core.impl.replication.adapters.ReplicationAgentProvider' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.granite.distribution.core.impl.replication.DistributionTransportHandler") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "forward.requests" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.granite.distribution.core.impl.replication.DistributionTransportHandler' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.granite.distribution.core.impl.transport.AccessTokenDistributionTransportSecretProvider") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "accessTokenProvider.target" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "name" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "serviceName" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "userId" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.granite.distribution.core.impl.transport.AccessTokenDistributionTransportSecretProvider' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.granite.frags.impl.CheckHttpHeaderFlag") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "feature.description" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "http.header.valuepattern" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "http.header.name" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "feature.name" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.granite.frags.impl.CheckHttpHeaderFlag' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.granite.frags.impl.RandomFeature") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "feature.description" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "cookie.name" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "cookie.maxAge" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "active.percentage" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "feature.name" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.granite.frags.impl.RandomFeature' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.granite.httpcache.file.FileCacheStore") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "com.adobe.granite.httpcache.file.documentRoot" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "com.adobe.granite.httpcache.file.includeHost" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.granite.httpcache.file.FileCacheStore' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.granite.httpcache.impl.OuterCacheFilter") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "com.adobe.granite.httpcache.url.paths" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.granite.httpcache.impl.OuterCacheFilter' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.granite.i18n.impl.bundle.PseudoTranslations") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "pseudo.patterns" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.granite.i18n.impl.bundle.PseudoTranslations' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.granite.i18n.impl.PreferencesLocaleResolverService") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "security.preferences.name" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.granite.i18n.impl.PreferencesLocaleResolverService' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.granite.infocollector.InfoCollector") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "granite.infocollector.includeThreadDumps" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "granite.infocollector.includeHeapDump" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.granite.infocollector.InfoCollector' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.granite.jetty.ssl.internal.GraniteSslConnectorFactory") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "service_location" : "service_location",
                  "bundle_location" : "bundle_location",
                  "description" : "description",
                  "pid" : "pid",
                  "additionalProperties" : "additionalProperties",
                  "title" : "title",
                  "properties" : {
                    "com.adobe.granite.jetty.ssl.ciphersuites.included" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "com.adobe.granite.jetty.ssl.keystore.password" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "com.adobe.granite.jetty.ssl.keystore.user" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "com.adobe.granite.jetty.ssl.client.certificate" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : {
                        "values" : "",
                        "labels" : ""
                      },
                      "value" : ""
                    },
                    "com.adobe.granite.jetty.ssl.ciphersuites.excluded" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "com.adobe.granite.jetty.ssl.port" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.granite.jetty.ssl.internal.GraniteSslConnectorFactory' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.granite.license.impl.LicenseCheckFilter") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "checkInternval" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "excludeIds" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "encryptPing" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.granite.license.impl.LicenseCheckFilter' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.granite.logging.impl.LogAnalyserImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "logger.config" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "messages.size" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "messages.queue.size" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.granite.logging.impl.LogAnalyserImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.granite.logging.impl.LogErrorHealthCheck") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "hc.tags" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.granite.logging.impl.LogErrorHealthCheck' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.granite.maintenance.crx.impl.DataStoreGarbageCollectionTask") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "service_location" : "service_location",
                  "bundle_location" : "bundle_location",
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "job.topics" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "granite.maintenance.mandatory" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.granite.maintenance.crx.impl.DataStoreGarbageCollectionTask' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.granite.maintenance.crx.impl.LuceneBinariesCleanupTask") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "service_location" : "service_location",
                  "bundle_location" : "bundle_location",
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "job.topics" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.granite.maintenance.crx.impl.LuceneBinariesCleanupTask' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.granite.maintenance.crx.impl.RevisionCleanupTask") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "full.gc.days" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.granite.maintenance.crx.impl.RevisionCleanupTask' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.granite.monitoring.impl.ScriptConfigImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "script.path" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "interval" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "script.filename" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "script.display" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "script.platform" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "jmxdomain" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.granite.monitoring.impl.ScriptConfigImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.granite.oauth.server.auth.impl.OAuth2ServerAuthenticationHandler") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "oauth.offline.validation" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "path" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "jaas.controlFlag" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "jaas.realmName" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "jaas.ranking" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.granite.oauth.server.auth.impl.OAuth2ServerAuthenticationHandler' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.granite.oauth.server.impl.AccessTokenCleanupTask") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "scheduler.expression" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.granite.oauth.server.impl.AccessTokenCleanupTask' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.granite.oauth.server.impl.OAuth2ClientRevocationServlet") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "oauth.client.revocation.active" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.granite.oauth.server.impl.OAuth2ClientRevocationServlet' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.granite.oauth.server.impl.OAuth2RevocationEndpointServlet") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "oauth.revocation.active" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "sling.servlet.paths" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.granite.oauth.server.impl.OAuth2RevocationEndpointServlet' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.granite.oauth.server.impl.OAuth2TokenEndpointServlet") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "oauth.issuer" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "osgi.http.whiteboard.servlet.pattern" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "osgi.http.whiteboard.context.select" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "oauth.access.token.expires.in" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.granite.oauth.server.impl.OAuth2TokenEndpointServlet' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.granite.oauth.server.impl.OAuth2TokenRevocationServlet") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "oauth.token.revocation.active" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.granite.oauth.server.impl.OAuth2TokenRevocationServlet' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.granite.offloading.impl.OffloadingConfigurator") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "offloading.cleanup.payload" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "offloading.transporter" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.granite.offloading.impl.OffloadingConfigurator' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.granite.offloading.impl.OffloadingJobCloner") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "service_location" : "service_location",
                  "bundle_location" : "bundle_location",
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "offloading.jobcloner.enabled" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.granite.offloading.impl.OffloadingJobCloner' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.granite.offloading.impl.OffloadingJobOffloader") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "service_location" : "service_location",
                  "bundle_location" : "bundle_location",
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "offloading.offloader.enabled" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.granite.offloading.impl.OffloadingJobOffloader' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.granite.offloading.impl.transporter.OffloadingAgentManager") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "service_location" : "service_location",
                  "bundle_location" : "bundle_location",
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "offloading.agentmanager.enabled" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.granite.offloading.impl.transporter.OffloadingAgentManager' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.granite.offloading.impl.transporter.OffloadingDefaultTransporter") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "service_location" : "service_location",
                  "bundle_location" : "bundle_location",
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "default.transport.agent-to-worker.prefix" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "default.transport.input.package" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "offloading.transporter.default.enabled" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "default.transport.contentpackage" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "default.transport.agent-to-master.prefix" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "default.transport.output.package" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "default.transport.replication.synchronous" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.granite.offloading.impl.transporter.OffloadingDefaultTransporter' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.granite.omnisearch.impl.core.OmniSearchServiceImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "omnisearch.suggestion.requiretext.min" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "omnisearch.suggestion.spellcheck.require" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.granite.omnisearch.impl.core.OmniSearchServiceImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.granite.optout.impl.OptOutServiceImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "service_location" : "service_location",
                  "bundle_location" : "bundle_location",
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "optout.headers" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "optout.cookies" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "optout.whitelist.cookies" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.granite.optout.impl.OptOutServiceImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.granite.queries.impl.hc.AsyncIndexHealthCheck") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "indexing.critical.threshold" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "indexing.warn.threshold" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "hc.tags" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.granite.queries.impl.hc.AsyncIndexHealthCheck' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.granite.queries.impl.hc.LargeIndexHealthCheck") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "large.index.critical.threshold" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "hc.tags" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "large.index.warn.threshold" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.granite.queries.impl.hc.LargeIndexHealthCheck' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.granite.queries.impl.hc.QueriesStatusHealthCheck") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "hc.tags" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.granite.queries.impl.hc.QueriesStatusHealthCheck' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.granite.queries.impl.hc.QueryHealthCheckMetrics") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "getPeriod" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.granite.queries.impl.hc.QueryHealthCheckMetrics' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.granite.queries.impl.hc.QueryLimitsHealthCheck") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "hc.tags" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.granite.queries.impl.hc.QueryLimitsHealthCheck' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.granite.replication.hc.impl.ReplicationQueueHealthCheck") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "number.of.retries.allowed" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "hc.tags" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.granite.replication.hc.impl.ReplicationQueueHealthCheck' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.granite.replication.hc.impl.ReplicationTransportUsersHealthCheck") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "hc.tags" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.granite.replication.hc.impl.ReplicationTransportUsersHealthCheck' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.granite.repository.hc.impl.AuthorizableNodeNameHealthCheck") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "hc.tags" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.granite.repository.hc.impl.AuthorizableNodeNameHealthCheck' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.granite.repository.hc.impl.content.sling.SlingContentHealthCheck") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "exclude.search.path" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "hc.tags" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.granite.repository.hc.impl.content.sling.SlingContentHealthCheck' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.granite.repository.hc.impl.ContinuousRGCHealthCheck") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "hc.tags" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.granite.repository.hc.impl.ContinuousRGCHealthCheck' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.granite.repository.hc.impl.DefaultAccessUserProfileHealthCheck") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "hc.tags" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.granite.repository.hc.impl.DefaultAccessUserProfileHealthCheck' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.granite.repository.hc.impl.DefaultLoginsHealthCheck") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "account.logins" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "hc.tags" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "console.logins" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.granite.repository.hc.impl.DefaultLoginsHealthCheck' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.granite.repository.hc.impl.DiskSpaceHealthCheck") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "disk.space.warn.threshold" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "hc.tags" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "disk.space.error.threshold" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.granite.repository.hc.impl.DiskSpaceHealthCheck' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.granite.repository.hc.impl.ObservationQueueLengthHealthCheck") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "hc.tags" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.granite.repository.hc.impl.ObservationQueueLengthHealthCheck' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.granite.repository.impl.CommitStatsConfig") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "service_location" : "service_location",
                  "bundle_location" : "bundle_location",
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "threadMatchers" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "greedyStackMatchers" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "minDetailsPercentage" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "enabled" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "maxLocationLength" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "maxDetailsShown" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "commitsPerIntervalThreshold" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "stackShorteners" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "stackFilters" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "stackCategorizers" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "maxGreedyDepth" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "stackMatchers" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "intervalSeconds" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.granite.repository.impl.CommitStatsConfig' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.granite.repository.ServiceUserConfiguration") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "serviceusers.list" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "serviceusers.simpleSubjectPopulation" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "service.ranking" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.granite.repository.ServiceUserConfiguration' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.granite.requests.logging.impl.hc.RequestsStatusHealthCheckImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "hc.tags" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.granite.requests.logging.impl.hc.RequestsStatusHealthCheckImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.granite.resourcestatus.impl.CompositeStatusType") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "types" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "name" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.granite.resourcestatus.impl.CompositeStatusType' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.granite.resourcestatus.impl.StatusResourceProviderImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "provider.root" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.granite.resourcestatus.impl.StatusResourceProviderImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.granite.rest.assets.impl.AssetContentDispositionFilter") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "mime.allowed" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "mime.allowEmpty" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.granite.rest.assets.impl.AssetContentDispositionFilter' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.granite.rest.impl.ApiEndpointResourceProviderFactoryImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "provider.roots" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.granite.rest.impl.ApiEndpointResourceProviderFactoryImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.granite.rest.impl.servlet.DefaultGETServlet") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "use.absolute.uri" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "default.limit" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.granite.rest.impl.servlet.DefaultGETServlet' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.granite.security.user.ui.internal.servlets.SSLConfigurationServlet") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "hc.tags" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.granite.security.user.ui.internal.servlets.SSLConfigurationServlet' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.granite.security.user.UserPropertiesService") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "service_location" : "service_location",
                  "bundle_location" : "bundle_location",
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "granite.userproperties.resourcetypes" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "granite.userproperties.nodetypes" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "adapter.condition" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.granite.security.user.UserPropertiesService' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.granite.socialgraph.impl.SocialGraphFactoryImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "group2member.relationship.outgoing" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "group2member.excluded.incoming" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "group2member.relationship.incoming" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "group2member.excluded.outgoing" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.granite.socialgraph.impl.SocialGraphFactoryImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.granite.system.monitoring.impl.SystemStatsMBeanImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "scheduler.expression" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "jmx.objectname" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.granite.system.monitoring.impl.SystemStatsMBeanImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.granite.taskmanagement.impl.jcr.TaskAdapterFactory") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "adapter.condition" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.granite.taskmanagement.impl.jcr.TaskAdapterFactory' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.granite.taskmanagement.impl.jcr.TaskArchiveService") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "archive.since.days.completed" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "archiving.enabled" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "scheduler.expression" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.granite.taskmanagement.impl.jcr.TaskArchiveService' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.granite.taskmanagement.impl.purge.TaskPurgeMaintenanceTask") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "completedAge" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "purgeCompleted" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "activeAge" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "purgeActive" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "saveThreshold" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.granite.taskmanagement.impl.purge.TaskPurgeMaintenanceTask' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.granite.taskmanagement.impl.service.TaskManagerAdapterFactory") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "adapter.condition" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "taskmanager.admingroups" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.granite.taskmanagement.impl.service.TaskManagerAdapterFactory' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.granite.threaddump.ThreadDumpCollector") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "scheduler.runOn" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : {
                        "values" : "",
                        "labels" : ""
                      },
                      "value" : ""
                    },
                    "granite.threaddump.backupCleanTrigger" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "granite.threaddump.enabled" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "granite.threaddump.enableGzipCompression" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "granite.threaddump.dumpsPerFile" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "scheduler.period" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "granite.threaddump.enableJStack" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "granite.threaddump.enableDirectoriesCompression" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "granite.threaddump.maxBackupDays" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.granite.threaddump.ThreadDumpCollector' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.granite.translation.connector.msft.core.impl.MicrosoftTranslationServiceFactoryImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "defaultConnectorWorkspaceId" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "defaultConnectorSubscriptionKey" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "languageMapLocation" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "categoryMapLocation" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "defaultConnectorLabel" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "translationFactory" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "timeoutCount" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "defaultConnectorAttribution" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "retryAttempts" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.granite.translation.connector.msft.core.impl.MicrosoftTranslationServiceFactoryImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.granite.translation.core.impl.TranslationManagerImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "defaultCategory" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "defaultConnectorName" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.granite.translation.core.impl.TranslationManagerImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.granite.ui.clientlibs.impl.HtmlLibraryManagerImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "service_location" : "service_location",
                  "bundle_location" : "bundle_location",
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "htmllibmanager.gzip" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "htmllibmanager.defaultuserthemename" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "htmllibmanager.clientmanager" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "htmllibmanager.longcache.format" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "htmllibmanager.debug" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "htmllibmanager.maxage" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "htmllibmanager.minify" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "htmllibmanager.disable.replacement" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "htmllibmanager.defaultthemename" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "htmllibmanager.useFileSystemOutputCache" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "htmllibmanager.longcache.patterns" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "htmllibmanager.processor.css" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "htmllibmanager.path.list" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "htmllibmanager.excluded.path.list" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "htmllibmanager.fileSystemOutputCacheLocation" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "htmllibmanager.debug.init.js" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "htmllibmanager.processor.js" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "htmllibmanager.maxDataUriSize" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "htmllibmanager.forceCQUrlInfo" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "htmllibmanager.timing" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.granite.ui.clientlibs.impl.HtmlLibraryManagerImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.granite.workflow.console.frags.WorkflowWithdrawFeature") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "enabled" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.granite.workflow.console.frags.WorkflowWithdrawFeature' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.granite.workflow.console.publish.WorkflowPublishEventService") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "granite.workflow.WorkflowPublishEventService.enabled" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.granite.workflow.console.publish.WorkflowPublishEventService' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.granite.workflow.core.jcr.WorkflowBucketManager") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "bucketSize" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.granite.workflow.core.jcr.WorkflowBucketManager' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.granite.workflow.core.job.ExternalProcessJobHandler") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "default.period" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "default.timeout" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "max.timeout" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.granite.workflow.core.job.ExternalProcessJobHandler' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.granite.workflow.core.job.JobHandler") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "allow.self.process.termination" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "job.topics" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.granite.workflow.core.job.JobHandler' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.granite.workflow.core.offloading.WorkflowOffloadingJobConsumer") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "job.topics" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.granite.workflow.core.offloading.WorkflowOffloadingJobConsumer' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.granite.workflow.core.PayloadMapCache") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "getSystemWorkflowModels" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "getPackageRootPath" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.granite.workflow.core.PayloadMapCache' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.granite.workflow.core.payloadmap.PayloadMoveListener") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "payload.move.white.list" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "payload.move.handle.from.workflow.process" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.granite.workflow.core.payloadmap.PayloadMoveListener' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.granite.workflow.core.WorkflowConfig") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "cq.workflow.config.workflow.process.legacy.mode" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "cq.workflow.config.allow.locking" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "cq.workflow.config.workflow.packages.root.path" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.granite.workflow.core.WorkflowConfig' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.granite.workflow.core.WorkflowSessionFactory") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "granite.workflow.maxPurgeQueryCount" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "granite.workflow.enforceWorkitemAssigneePermissions" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "granite.workflowinbox.sort.propertyName" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : {
                        "values" : "",
                        "labels" : ""
                      },
                      "value" : ""
                    },
                    "granite.workflowinbox.sort.order" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "granite.workflow.enforceWorkflowInitiatorPermissions" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "granite.workflow.injectTenantIdInJobTopics" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "cq.workflow.job.retry" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "cq.workflow.superuser" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "granite.workflow.maxPurgeSaveThreshold" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "granite.workflow.inboxQuerySize" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "granite.workflow.adminUserGroupFilter" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.granite.workflow.core.WorkflowSessionFactory' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.granite.workflow.purge.Scheduler") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "scheduledpurge.modelIds" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "scheduledpurge.name" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "scheduledpurge.workflowStatus" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : {
                        "values" : "",
                        "labels" : ""
                      },
                      "value" : ""
                    },
                    "scheduledpurge.daysold" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.granite.workflow.purge.Scheduler' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.octopus.ncomm.bootstrap") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "requestRetries" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "maxRequests" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "launchTimeout" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "requestTimeout" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "maxConnections" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.octopus.ncomm.bootstrap' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.social.integrations.livefyre.user.pingforpull.impl.PingPullServlet") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "communities.integration.livefyre.sling.event.filter" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.social.integrations.livefyre.user.pingforpull.impl.PingPullServlet' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.adobe.xmp.worker.files.ncomm.XMPFilesNComm") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "service_location" : "service_location",
                  "bundle_location" : "bundle_location",
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "maxRequests" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "requestTimeout" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "logDir" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "maxConnections" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.adobe.xmp.worker.files.ncomm.XMPFilesNComm' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.commons.datasource.jdbcpool.JdbcPoolService") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "jdbc.password" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "default.autocommit" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "pool.max.wait.msec" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "datasource.svc.properties" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "jdbc.driver.class" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "pool.size" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "jdbc.username" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "jdbc.connection.uri" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "datasource.name" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "default.readonly" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "jdbc.validation.query" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.commons.datasource.jdbcpool.JdbcPoolService' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.commons.httpclient") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "proxy.exceptions" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "proxy.enabled" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "proxy.ntlm.host" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "proxy.host" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "proxy.user" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "proxy.password" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "proxy.ntlm.domain" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.commons.httpclient' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.analytics.impl.StorePropertiesChangeListener") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "cq.store.listener.additionalStorePaths" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.analytics.impl.StorePropertiesChangeListener' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.analytics.sitecatalyst.impl.exporter.ClassificationsExporter") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "cq.analytics.saint.exporter.pagesize" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "allowed.paths" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.analytics.sitecatalyst.impl.exporter.ClassificationsExporter' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.analytics.sitecatalyst.impl.importer.ReportImporter") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "report.fetch.delay" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "report.fetch.attempts" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.analytics.sitecatalyst.impl.importer.ReportImporter' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.analytics.sitecatalyst.impl.SitecatalystAdapterFactory") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "cq.analytics.adapterfactory.contextstores" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.analytics.sitecatalyst.impl.SitecatalystAdapterFactory' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.analytics.sitecatalyst.impl.SitecatalystHttpClientImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "service_location" : "service_location",
                  "bundle_location" : "bundle_location",
                  "description" : "description",
                  "pid" : "pid",
                  "additionalProperties" : "additionalProperties",
                  "title" : "title",
                  "properties" : {
                    "connection.timeout" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "cq.analytics.sitecatalyst.service.datacenter.url" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "socket.timeout" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "devhostnamepatterns" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.analytics.sitecatalyst.impl.SitecatalystHttpClientImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.AccountOptionsUpdater") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "cq.analytics.testandtarget.accountoptionsupdater.enabled" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.AccountOptionsUpdater' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.DeleteAuthorActivityListener") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "cq.analytics.testandtarget.deleteauthoractivitylistener.enabled" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.DeleteAuthorActivityListener' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.PushAuthorCampaignPageListener") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "service_location" : "service_location",
                  "bundle_location" : "bundle_location",
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "cq.analytics.testandtarget.pushauthorcampaignpagelistener.enabled" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.PushAuthorCampaignPageListener' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.SegmentImporter") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "cq.analytics.testandtarget.segmentimporter.enabled" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.SegmentImporter' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.service.WebServiceImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "socketTimeout" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "endpointUri" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "connectionTimeout" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.service.WebServiceImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.servlets.AdminServerServlet") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "testandtarget.endpoint.url" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.servlets.AdminServerServlet' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.TestandtargetHttpClientImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "cq.analytics.testandtarget.sockettimeout" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "cq.analytics.testandtarget.api.url" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "cq.analytics.testandtarget.recommendations.url.replacewith" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "cq.analytics.testandtarget.recommendations.url.replace" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "cq.analytics.testandtarget.timeout" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.TestandtargetHttpClientImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.auth.impl.cug.CugSupportImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "cug.principals.regex" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "cug.principals.replacement" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "cug.enabled" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "cug.exempted.principals" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.auth.impl.cug.CugSupportImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.auth.impl.LoginSelectorHandler") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "service_location" : "service_location",
                  "bundle_location" : "bundle_location",
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "auth.loginselector.handle.all.extensions" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "path" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "auth.loginselector.changepw.mappings" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "auth.loginselector.defaultloginpage" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "auth.loginselector.handle" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "auth.loginselector.mappings" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "service.ranking" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "auth.loginselector.defaultchangepwpage" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.auth.impl.LoginSelectorHandler' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.commons.impl.ExternalizerImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "service_location" : "service_location",
                  "bundle_location" : "bundle_location",
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "externalizer.contextpath" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "externalizer.domains" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "externalizer.host" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "externalizer.encodedpath" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.commons.impl.ExternalizerImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.commons.servlets.RootMappingServlet") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "service_location" : "service_location",
                  "bundle_location" : "bundle_location",
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "rootmapping.target" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.commons.servlets.RootMappingServlet' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.compat.codeupgrade.impl.CodeUpgradeExecutionConditionChecker") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "codeupgradetaskfilters" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "codeupgradetasks" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.compat.codeupgrade.impl.CodeUpgradeExecutionConditionChecker' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.compat.codeupgrade.impl.UpgradeTaskIgnoreList") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "upgradeTaskIgnoreList" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.compat.codeupgrade.impl.UpgradeTaskIgnoreList' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.compat.codeupgrade.impl.VersionRangeTaskIgnorelist") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "effectiveBundleListPath" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.compat.codeupgrade.impl.VersionRangeTaskIgnorelist' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.contentsync.impl.ContentSyncManagerImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "contentsync.fallback.authorizable" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "contentsync.fallback.updateuser" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.contentsync.impl.ContentSyncManagerImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.dam.commons.handler.StandardImageHandler") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "large_comment_threshold" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "large_file_threshold" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "cq.dam.enable.ext.meta.extraction" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.dam.commons.handler.StandardImageHandler' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.dam.commons.metadata.XmpFilterBlackWhite") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "xmp.filter.apply_whitelist" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "xmp.filter.apply_blacklist" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "xmp.filter.blacklist" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "xmp.filter.whitelist" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.dam.commons.metadata.XmpFilterBlackWhite' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.dam.commons.util.impl.AssetCacheImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "large.file.min" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "cache.apply" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "mime.types" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.dam.commons.util.impl.AssetCacheImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.dam.core.impl.annotation.pdf.AnnotationPdfConfig") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "cq.dam.config.annotation.pdf.font.family" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "cq.dam.config.annotation.pdf.reviewStatus.color.approved" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "cq.dam.config.annotation.pdf.font.color" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "cq.dam.config.annotation.pdf.asset.minheight" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "cq.dam.config.annotation.pdf.document.padding.horizontal" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "cq.dam.config.annotation.pdf.font.light" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "cq.dam.config.annotation.pdf.reviewStatus.width" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "cq.dam.config.annotation.pdf.reviewStatus.color.changesRequested" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "cq.dam.config.annotation.pdf.marginTextImage" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "cq.dam.config.annotation.pdf.reviewStatus.color.rejected" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "cq.dam.config.annotation.pdf.document.width" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "cq.dam.config.annotation.pdf.minImageHeight" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "cq.dam.config.annotation.pdf.document.height" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "cq.dam.config.annotation.pdf.font.size" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "cq.dam.config.annotation.pdf.annotationMarker.width" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "cq.dam.config.annotation.pdf.document.padding.vertical" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.dam.core.impl.annotation.pdf.AnnotationPdfConfig' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.dam.core.impl.AssetMoveListener") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "enabled" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.dam.core.impl.AssetMoveListener' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.dam.core.impl.assethome.AssetHomePageConfiguration") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "isEnabled" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.dam.core.impl.assethome.AssetHomePageConfiguration' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.dam.core.impl.assetlinkshare.AdhocAssetShareProxyServlet") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "cq.dam.adhoc.asset.share.prezip.maxcontentsize" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.dam.core.impl.assetlinkshare.AdhocAssetShareProxyServlet' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.dam.core.impl.cache.CQBufferedImageCache") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "cq.dam.image.cache.max.memory" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "cq.dam.image.cache.max.dimension" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "cq.dam.image.cache.max.age" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.dam.core.impl.cache.CQBufferedImageCache' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.dam.core.impl.DamChangeEventListener") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "changeeventlistener.observed.paths" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.dam.core.impl.DamChangeEventListener' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.dam.core.impl.DamEventPurgeService") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "maxSavedActivities" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "scheduler.expression" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "saveInterval" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "eventTypes" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : {
                        "values" : "",
                        "labels" : ""
                      },
                      "value" : ""
                    },
                    "enableActivityPurge" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.dam.core.impl.DamEventPurgeService' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.dam.core.impl.DamEventRecorderImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "eventrecorder.eventtypes" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : {
                        "values" : "",
                        "labels" : ""
                      },
                      "value" : ""
                    },
                    "event.queue.length" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "event.filter" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "eventrecorder.enabled" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "eventrecorder.blacklist" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.dam.core.impl.DamEventRecorderImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.dam.core.impl.event.DamEventAuditListener") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "event.filter" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "enabled" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.dam.core.impl.event.DamEventAuditListener' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.dam.core.impl.ExpiryNotificationJobImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "asset_expired_limit" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "cq.dam.expiry.notification.scheduler.istimebased" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "cq.dam.expiry.notification.url.protocol" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "send_email" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "cq.dam.expiry.notification.scheduler.period.rule" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "cq.dam.expiry.notification.scheduler.timebased.rule" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "prior_notification_seconds" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.dam.core.impl.ExpiryNotificationJobImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.dam.core.impl.foldermetadataschema.FolderMetadataSchemaFeatureFlag") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "isEnabled" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.dam.core.impl.foldermetadataschema.FolderMetadataSchemaFeatureFlag' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.dam.core.impl.gfx.CommonsGfxRenderer") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "skip.bufferedcache" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.dam.core.impl.gfx.CommonsGfxRenderer' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.dam.core.impl.handler.EPSFormatHandler") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "mimetype" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.dam.core.impl.handler.EPSFormatHandler' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.dam.core.impl.handler.IndesignFormatHandler") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "mimetype" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.dam.core.impl.handler.IndesignFormatHandler' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.dam.core.impl.handler.JpegHandler") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "large_comment_threshold" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "large_file_threshold" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "cq.dam.enable.ext.meta.extraction" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.dam.core.impl.handler.JpegHandler' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.dam.core.impl.handler.xmp.NCommXMPHandler") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "xmphandler.cq.formats" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.dam.core.impl.handler.xmp.NCommXMPHandler' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.dam.core.impl.jmx.AssetIndexUpdateMonitor") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "property.max.rate" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : 6.02745618307040320615897144307382404804229736328125
                    },
                    "fulltext.name" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "fulltext.max.wait.ms" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "property.measure.enabled" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "fulltext.measure.enabled" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "fulltext.max.rate" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : 6.02745618307040320615897144307382404804229736328125
                    },
                    "jmx.objectname" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "property.name" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "property.max.wait.ms" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.dam.core.impl.jmx.AssetIndexUpdateMonitor' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.dam.core.impl.jmx.AssetMigrationMBeanImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "service_location" : "service_location",
                  "bundle_location" : "bundle_location",
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "jmx.objectname" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.dam.core.impl.jmx.AssetMigrationMBeanImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.dam.core.impl.jmx.AssetUpdateMonitorImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "active" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "jmx.objectname" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.dam.core.impl.jmx.AssetUpdateMonitorImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.dam.core.impl.jobs.metadataexport.AsyncMetadataExportConfigProviderService") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "emailEnabled" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "operation" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.dam.core.impl.jobs.metadataexport.AsyncMetadataExportConfigProviderService' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.dam.core.impl.jobs.metadataimport.AsyncMetadataImportConfigProviderService") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "operationIcon" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "emailEnabled" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "topicName" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "operation" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.dam.core.impl.jobs.metadataimport.AsyncMetadataImportConfigProviderService' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.dam.core.impl.lightbox.LightboxServlet") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "sling.servlet.paths" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "cq.dam.enable.anonymous" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "sling.servlet.methods" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.dam.core.impl.lightbox.LightboxServlet' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.dam.core.impl.metadata.editor.SelectComponentHandler") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "granite:data" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.dam.core.impl.metadata.editor.SelectComponentHandler' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.dam.core.impl.mimeType.AssetUploadRestrictionHelper") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "cq.dam.allowed.asset.mimes" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "cq.dam.allow.all.mime" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.dam.core.impl.mimeType.AssetUploadRestrictionHelper' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.dam.core.impl.mimeType.DamMimeTypeServiceImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "cq.dam.detect.asset.mime.from.content" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.dam.core.impl.mimeType.DamMimeTypeServiceImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.dam.core.impl.MissingMetadataNotificationJob") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "cq.dam.missingmetadata.notification.scheduler.period.rule" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "cq.dam.missingmetadata.notification.scheduler.istimebased" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "cq.dam.missingmetadata.notification.scheduler.timebased.rule" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "cq.dam.missingmetadata.notification.recipient" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.dam.core.impl.MissingMetadataNotificationJob' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.dam.core.impl.process.SendTransientWorkflowCompletedEmailProcess") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "Notify on Complete" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "process.label" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.dam.core.impl.process.SendTransientWorkflowCompletedEmailProcess' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.dam.core.impl.process.TextExtractionProcess") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "mimeTypes" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "maxExtract" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.dam.core.impl.process.TextExtractionProcess' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.dam.core.impl.RenditionMakerImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "xmp.excludes" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "xmp.propagate" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.dam.core.impl.RenditionMakerImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.dam.core.impl.reports.ReportExportService") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "queryBatchSize" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.dam.core.impl.reports.ReportExportService' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.dam.core.impl.reports.ReportPurgeService") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "scheduler.expression" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "enableReportPurge" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "maxSavedReports" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "timeDuration" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.dam.core.impl.reports.ReportPurgeService' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.dam.core.impl.servlet.AssetDownloadServlet") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "service_location" : "service_location",
                  "bundle_location" : "bundle_location",
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "enabled" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.dam.core.impl.servlet.AssetDownloadServlet' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.dam.core.impl.servlet.AssetStatusServlet") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "cq.dam.batch.status.maxassets" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.dam.core.impl.servlet.AssetStatusServlet' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.dam.core.impl.servlet.AssetXMPSearchServlet") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "cq.dam.batch.indesign.maxassets" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.dam.core.impl.servlet.AssetXMPSearchServlet' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.dam.core.impl.servlet.BatchMetadataServlet") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "cq.dam.batch.metadata.collection.default" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "cq.dam.batch.metadata.maxresources" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "cq.dam.batch.metadata.asset.default" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.dam.core.impl.servlet.BatchMetadataServlet' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.dam.core.impl.servlet.BinaryProviderServlet") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "cq.dam.drm.enable" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "sling.servlet.resourceTypes" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "sling.servlet.methods" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.dam.core.impl.servlet.BinaryProviderServlet' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.dam.core.impl.servlet.CollectionServlet") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "cq.dam.batch.collection.properties" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "cq.dam.batch.collection.maxcollections" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.dam.core.impl.servlet.CollectionServlet' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.dam.core.impl.servlet.CollectionsServlet") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "cq.dam.batch.collections.limit" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "cq.dam.batch.collections.properties" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.dam.core.impl.servlet.CollectionsServlet' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.dam.core.impl.servlet.CompanionServlet") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "More Info" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "/mnt/overlay/dam/gui/content/assets/moreinfo.html/${path}" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.dam.core.impl.servlet.CompanionServlet' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.dam.core.impl.servlet.CreateAssetServlet") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "detect_duplicate" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.dam.core.impl.servlet.CreateAssetServlet' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.dam.core.impl.servlet.DamContentDispositionFilter") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "cq.mime.type.blacklist" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "cq.dam.empty.mime" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.dam.core.impl.servlet.DamContentDispositionFilter' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.dam.core.impl.servlet.GuidLookupFilter") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "service_location" : "service_location",
                  "bundle_location" : "bundle_location",
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "cq.dam.core.guidlookupfilter.enabled" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.dam.core.impl.servlet.GuidLookupFilter' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.dam.core.impl.servlet.HealthCheckServlet") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "cq.dam.sync.workflow.id" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "cq.dam.sync.folder.types" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.dam.core.impl.servlet.HealthCheckServlet' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.dam.core.impl.servlet.MetadataGetServlet") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "sling.servlet.extensions" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "sling.servlet.selectors" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "sling.servlet.resourceTypes" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "sling.servlet.methods" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.dam.core.impl.servlet.MetadataGetServlet' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.dam.core.impl.servlet.MultipleLicenseAcceptServlet") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "cq.dam.drm.enable" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.dam.core.impl.servlet.MultipleLicenseAcceptServlet' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.dam.core.impl.servlet.ResourceCollectionServlet") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "sling.servlet.selectors" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "sling.servlet.resourceTypes" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "view.selector" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "send_email" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "download.config" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "sling.servlet.methods" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.dam.core.impl.servlet.ResourceCollectionServlet' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.dam.core.impl.ui.preview.FolderPreviewUpdaterImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "createPreviewEnabled" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "updatePreviewEnabled" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "queueSize" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "folderPreviewRenditionRegex" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.dam.core.impl.ui.preview.FolderPreviewUpdaterImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.dam.core.impl.unzip.UnzipConfig") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "cq.dam.config.unzip.encoding" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "cq.dam.config.unzip.maxuncompressedsize" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.dam.core.impl.unzip.UnzipConfig' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.dam.core.process.ExifToolExtractMetadataProcess") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "cq.dam.enable.sha1" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "process.label" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.dam.core.process.ExifToolExtractMetadataProcess' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.dam.core.process.ExtractMetadataProcess") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "cq.dam.enable.sha1" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "process.label" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.dam.core.process.ExtractMetadataProcess' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.dam.core.process.MetadataProcessorProcess") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "cq.dam.enable.sha1" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "process.label" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "cq.dam.metadata.xssprotected.properties" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.dam.core.process.MetadataProcessorProcess' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.dam.handler.ffmpeg.LocatorImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "executable.searchpath" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.dam.handler.ffmpeg.LocatorImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.dam.handler.gibson.fontmanager.impl.FontManagerServiceImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "fontmgr.customer.font.dir" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "fontmgr.system.font.dir" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "fontmgr.adobe.font.dir" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "event.filter" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.dam.handler.gibson.fontmanager.impl.FontManagerServiceImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.dam.handler.standard.pdf.PdfHandler") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "raster.annotation" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.dam.handler.standard.pdf.PdfHandler' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.dam.handler.standard.ps.PostScriptHandler") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "raster.annotation" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.dam.handler.standard.ps.PostScriptHandler' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.dam.handler.standard.psd.PsdHandler") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "large_file_threshold" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.dam.handler.standard.psd.PsdHandler' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.dam.ids.impl.IDSJobProcessor") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "externalizer.domain.cqhost" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "enable.multisession" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "ids.cc.enable" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "enable.retry" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "enable.retry.scripterror" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "externalizer.domain.http" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.dam.ids.impl.IDSJobProcessor' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.dam.ids.impl.IDSPoolManagerImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "retry.interval.to.whitelist" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "connect.timeout" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "process.label" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "max.errors.to.blacklist" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "socket.timeout" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "connection.use.max" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.dam.ids.impl.IDSPoolManagerImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.dam.indd.impl.handler.IndesignXMPHandler") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "process.label" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "extract.pages" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.dam.indd.impl.handler.IndesignXMPHandler' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.dam.indd.impl.servlet.SnippetCreationServlet") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "snippetcreation.maxcollections" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.dam.indd.impl.servlet.SnippetCreationServlet' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.dam.indd.process.INDDMediaExtractProcess") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "process.label" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "cq.dam.indd.pages.regex" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "ids.job.workflow.model" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "ids.job.decoupled" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.dam.indd.process.INDDMediaExtractProcess' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.dam.performance.internal.AssetPerformanceDataHandlerImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "batch.commit.size" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.dam.performance.internal.AssetPerformanceDataHandlerImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.dam.performance.internal.AssetPerformanceReportSyncJob") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "scheduler.expression" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.dam.performance.internal.AssetPerformanceReportSyncJob' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.dam.pim.impl.sourcing.upload.process.ProductAssetsUploadProcess") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "delete.zip.file" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.dam.pim.impl.sourcing.upload.process.ProductAssetsUploadProcess' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.dam.s7dam.common.analytics.impl.S7damDynamicMediaConfigEventListener") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "cq.dam.s7dam.dynamicmediaconfigeventlistener.enabled" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.dam.s7dam.common.analytics.impl.S7damDynamicMediaConfigEventListener' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.dam.s7dam.common.analytics.impl.SiteCatalystReportRunner") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "scheduler.concurrent" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "scheduler.expression" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.dam.s7dam.common.analytics.impl.SiteCatalystReportRunner' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.dam.s7dam.common.post.servlets.SetCreateHandler") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "sling.post.operation" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "sling.servlet.methods" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.dam.s7dam.common.post.servlets.SetCreateHandler' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.dam.s7dam.common.post.servlets.SetModifyHandler") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "sling.post.operation" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "sling.servlet.methods" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.dam.s7dam.common.post.servlets.SetModifyHandler' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.dam.s7dam.common.process.VideoThumbnailDownloadProcess") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "process.label" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.dam.s7dam.common.process.VideoThumbnailDownloadProcess' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.dam.s7dam.common.S7damDamChangeEventListener") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "cq.dam.s7dam.damchangeeventlistener.enabled" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.dam.s7dam.common.S7damDamChangeEventListener' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.dam.s7dam.common.servlets.S7damProductInfoServlet") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "sling.servlet.paths" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "sling.servlet.methods" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.dam.s7dam.common.servlets.S7damProductInfoServlet' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.dam.s7dam.common.video.impl.VideoProxyClientServiceImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "cq.dam.s7dam.videoproxyclientservice.multipartupload.minsize.name" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "cq.dam.s7dam.videoproxyclientservice.http.maxretrycount.name" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "cq.dam.s7dam.videoproxyclientservice.uploadprogress.interval.name" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "cq.dam.s7dam.videoproxyclientservice.http.connectiontimeout.name" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "cq.dam.s7dam.videoproxyclientservice.multipartupload.partsize.name" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "cq.dam.s7dam.videoproxyclientservice.multipartupload.numthread.name" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "cq.dam.s7dam.videoproxyclientservice.http.readtimeout.name" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.dam.s7dam.common.video.impl.VideoProxyClientServiceImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7APIClientImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "cq.dam.scene7.apiclient.recordsperpage.withfilter.name" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "cq.dam.scene7.apiclient.recordsperpage.nofilter.name" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7APIClientImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7AssetMimeTypeServiceImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "cq.dam.scene7.assetmimetypeservice.mapping" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7AssetMimeTypeServiceImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7ConfigurationEventListener") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "service_location" : "service_location",
                  "bundle_location" : "bundle_location",
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "cq.dam.scene7.configurationeventlistener.enabled" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7ConfigurationEventListener' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7DamChangeEventListener") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "service_location" : "service_location",
                  "bundle_location" : "bundle_location",
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "cq.dam.scene7.damchangeeventlistener.enabled" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "cq.dam.scene7.damchangeeventlistener.observed.paths" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7DamChangeEventListener' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7FlashTemplatesServiceImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "scene7FlashTemplates.rti" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "scene7FlashTemplates.rb" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "scene7FlashTemplates.rurl" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "scene7FlashTemplates.rsi" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "scene7FlashTemplate.urlFormatParameter" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7FlashTemplatesServiceImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7UploadServiceImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "cq.dam.scene7.uploadservice.connectionmaxperroute.label" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "cq.dam.scene7.uploadservice.activejobtimeout.label" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7UploadServiceImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.dam.stock.integration.impl.cache.StockCacheConfigurationServiceImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "getCacheExpirationUnit" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : {
                        "values" : "",
                        "labels" : ""
                      },
                      "value" : ""
                    },
                    "getCacheExpirationValue" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.dam.stock.integration.impl.cache.StockCacheConfigurationServiceImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.dam.stock.integration.impl.configuration.StockConfigurationImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "imsConfig" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "name" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "locale" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.dam.stock.integration.impl.configuration.StockConfigurationImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.dam.video.impl.servlet.VideoTestServlet") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "service_location" : "service_location",
                  "bundle_location" : "bundle_location",
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "enabled" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.dam.video.impl.servlet.VideoTestServlet' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.extwidget.servlets.ImageSpriteServlet") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "maxHeight" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "maxWidth" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.extwidget.servlets.ImageSpriteServlet' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.image.internal.font.FontHelper") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "fontpath" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "oversamplingFactor" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.image.internal.font.FontHelper' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.jcrclustersupport.ClusterStartLevelController") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "cluster.level.enable" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "cluster.slave.level" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "cluster.master.level" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.jcrclustersupport.ClusterStartLevelController' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.mailer.DefaultMailService") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "smtp.password" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "smtp.port" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "smtp.ssl" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "smtp.host" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "from.address" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "smtp.starttls" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "smtp.user" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "debug.email" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.mailer.DefaultMailService' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.mailer.impl.CqMailingService") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "max.recipient.count" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.mailer.impl.CqMailingService' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.mailer.impl.email.CqEmailTemplateFactory") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "mailer.email.charset" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.mailer.impl.email.CqEmailTemplateFactory' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.mailer.impl.email.CqRetrieverTemplateFactory") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "mailer.email.charset" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "mailer.email.embed" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "mailer.email.retrieverUserPWD" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "mailer.email.retrieverUserID" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.mailer.impl.email.CqRetrieverTemplateFactory' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.mcm.campaign.impl.IntegrationConfigImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "aem.mcm.campaign.formConstraints" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "aem.mcm.campaign.relaxedSSL" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "aem.mcm.campaign.publicUrl" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.mcm.campaign.impl.IntegrationConfigImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.mcm.campaign.importer.PersonalizedTextHandlerFactory") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "tagpattern" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "service.ranking" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.mcm.campaign.importer.PersonalizedTextHandlerFactory' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.mcm.core.newsletter.NewsletterEmailServiceImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "max.bounce.count" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "from.address" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "sender.host" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.mcm.core.newsletter.NewsletterEmailServiceImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.mcm.impl.MCMConfiguration") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "touchpoint.indirection" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "experience.indirection" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.mcm.impl.MCMConfiguration' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.cta.ClickThroughComponentTagHandlerFactory") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "tagpattern" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "component.resourceType" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "service.ranking" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.cta.ClickThroughComponentTagHandlerFactory' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.cta.GraphicalClickThroughComponentTagHandlerFactory") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "tagpattern" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "component.resourceType" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "service.ranking" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.cta.GraphicalClickThroughComponentTagHandlerFactory' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.cta.LeadFormCTAComponentTagHandlerFactory") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "tagpattern" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "service.ranking" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.cta.LeadFormCTAComponentTagHandlerFactory' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.mbox.MBoxExperienceTagHandlerFactory") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "tagpattern" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "service.ranking" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.mbox.MBoxExperienceTagHandlerFactory' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.mbox.TargetComponentTagHandlerFactory") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "tagpattern" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "component.resourceType" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "service.ranking" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.mbox.TargetComponentTagHandlerFactory' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.notification.impl.NotificationServiceImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "event.filter" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.notification.impl.NotificationServiceImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.personalization.impl.servlets.TargetingConfigurationServlet") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "forcelocation" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.personalization.impl.servlets.TargetingConfigurationServlet' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.polling.importer.impl.ManagedPollConfigImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "reference" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "password" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "expression" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "interval" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "id" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "source" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "login" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "enabled" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "target" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.polling.importer.impl.ManagedPollConfigImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.polling.importer.impl.ManagedPollingImporterImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "importer.user" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.polling.importer.impl.ManagedPollingImporterImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.polling.importer.impl.PollingImporterImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "include.paths" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "importer.user" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "importer.min.interval" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "exclude.paths" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.polling.importer.impl.PollingImporterImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.replication.audit.ReplicationEventListener") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "service_location" : "service_location",
                  "bundle_location" : "bundle_location",
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "service.ranking" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.replication.audit.ReplicationEventListener' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.replication.content.StaticContentBuilder") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "port" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "host" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.replication.content.StaticContentBuilder' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.replication.impl.AgentManagerImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "serviceUser.target" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "agentProvider.target" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "job.topics" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.replication.impl.AgentManagerImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.replication.impl.content.durbo.BinaryLessContentBuilder") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "binary.threshold" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.replication.impl.content.durbo.BinaryLessContentBuilder' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.replication.impl.content.durbo.DurboImportConfigurationProviderService") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "preserve.hierarchy.nodes" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "save.threshold" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "preserve.uuid.nodetypes" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "ignore.versioning" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "preserve.uuid" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "import.acl" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "preserve.user.paths" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "preserve.uuid.subtrees" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "auto.commit" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.replication.impl.content.durbo.DurboImportConfigurationProviderService' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.replication.impl.ReplicationContentFactoryProviderImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "service_location" : "service_location",
                  "bundle_location" : "bundle_location",
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "replication.content.maxCommitAttempts" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "replication.content.useFileStorage" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.replication.impl.ReplicationContentFactoryProviderImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.replication.impl.ReplicationReceiverImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "receiver.packages.use.install" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "receiver.tmpfile.threshold" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.replication.impl.ReplicationReceiverImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.replication.impl.ReplicatorImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "distribute_events" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.replication.impl.ReplicatorImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.replication.impl.ReverseReplicator") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "service_location" : "service_location",
                  "bundle_location" : "bundle_location",
                  "description" : "description",
                  "pid" : "pid",
                  "additionalProperties" : "additionalProperties",
                  "title" : "title",
                  "properties" : {
                    "scheduler.period" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.replication.impl.ReverseReplicator' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.replication.impl.transport.BinaryLessTransportHandler") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "enabled.cipher.suites" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "disabled.cipher.suites" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.replication.impl.transport.BinaryLessTransportHandler' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.replication.impl.transport.Http") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "enabled.cipher.suites" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "disabled.cipher.suites" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.replication.impl.transport.Http' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.reporting.impl.cache.CacheImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "repcache.ttl" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "repcache.max" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "repcache.enable" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.reporting.impl.cache.CacheImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.reporting.impl.ConfigServiceImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "repconf.fakedata" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "repconf.timezone" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "repconf.snapshots" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "repconf.maxrows" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "repconf.snapshotuser" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "repconf.locale" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "repconf.repdir" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "repconf.hourofday" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "repconf.minofhour" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "repconf.enforcesnapshotuser" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.reporting.impl.ConfigServiceImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.reporting.impl.RLogAnalyzer") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "request.log.output" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.reporting.impl.RLogAnalyzer' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.rewriter.linkchecker.impl.LinkCheckerImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "service_location" : "service_location",
                  "bundle_location" : "bundle_location",
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "service.special_link_prefix" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "scheduler.concurrent" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "service.special_link_patterns" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "service.check_override_patterns" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "service.cache_broken_internal_links" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "scheduler.period" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "service.bad_link_tolerance_interval" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.rewriter.linkchecker.impl.LinkCheckerImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.rewriter.linkchecker.impl.LinkCheckerTask") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "scheduler.concurrent" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "good_link_test_interval" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "link_unused_interval" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "connection.timeout" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "bad_link_test_interval" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "scheduler.period" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.rewriter.linkchecker.impl.LinkCheckerTask' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.rewriter.linkchecker.impl.LinkCheckerTransformerFactory") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "linkcheckertransformer.rewriteElements" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "linkcheckertransformer.mapCacheSize" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "linkcheckertransformer.stripExtensionPathBlacklist" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "linkcheckertransformer.strictExtensionCheck" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "linkcheckertransformer.stripHtmltExtension" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "linkcheckertransformer.disableChecking" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "linkcheckertransformer.disableRewriting" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.rewriter.linkchecker.impl.LinkCheckerTransformerFactory' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.rewriter.linkchecker.impl.LinkInfoStorageImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "service_location" : "service_location",
                  "bundle_location" : "bundle_location",
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "service.max_links_per_host" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "service.save_external_link_references" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.rewriter.linkchecker.impl.LinkInfoStorageImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.rewriter.processor.impl.HtmlParserFactory") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "htmlparser.preserveCamelCase" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "htmlparser.processTags" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.rewriter.processor.impl.HtmlParserFactory' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.search.impl.builder.QueryBuilderImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "excerpt.properties" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "cache.entry.lifetime" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "xpath.union" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "cache.max.entries" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.search.impl.builder.QueryBuilderImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.search.suggest.impl.SuggestionIndexManagerImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "suggest.basepath" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "pathBuilder.target" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.search.suggest.impl.SuggestionIndexManagerImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.searchpromote.impl.PublishSearchPromoteConfigHandler") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "service_location" : "service_location",
                  "bundle_location" : "bundle_location",
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "cq.searchpromote.confighandler.enabled" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.searchpromote.impl.PublishSearchPromoteConfigHandler' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.searchpromote.impl.SearchPromoteServiceImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "service_location" : "service_location",
                  "bundle_location" : "bundle_location",
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "cq.searchpromote.configuration.environment" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "connection.timeout" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "socket.timeout" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "cq.searchpromote.configuration.server.uri" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.searchpromote.impl.SearchPromoteServiceImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.security.ACLSetup") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "service_location" : "service_location",
                  "bundle_location" : "bundle_location",
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "cq.aclsetup.rules" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.security.ACLSetup' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.statistics.impl.StatisticsServiceImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "path" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "scheduler.concurrent" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "workspace" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "keywordsPath" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "asyncEntries" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "scheduler.period" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.statistics.impl.StatisticsServiceImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.tagging.impl.JcrTagManagerFactoryImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "validation.enabled" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.tagging.impl.JcrTagManagerFactoryImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.tagging.impl.search.TagPredicateEvaluator") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "ignore_path" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.tagging.impl.search.TagPredicateEvaluator' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.tagging.impl.TagGarbageCollector") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "scheduler.expression" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.tagging.impl.TagGarbageCollector' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.wcm.contentsync.impl.handler.PagesUpdateHandler") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "cq.pagesupdatehandler.imageresourcetypes" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.wcm.contentsync.impl.handler.PagesUpdateHandler' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.wcm.contentsync.impl.rewriter.PathRewriterTransformerFactory") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "cq.contentsync.pathrewritertransformer.mapping.links" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "cq.contentsync.pathrewritertransformer.clientlibrary.pattern" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "cq.contentsync.pathrewritertransformer.clientlibrary.replace" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "cq.contentsync.pathrewritertransformer.mapping.images" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "cq.contentsync.pathrewritertransformer.attribute.pattern" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "cq.contentsync.pathrewritertransformer.mapping.clientlibs" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.wcm.contentsync.impl.rewriter.PathRewriterTransformerFactory' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.wcm.core.impl.AuthoringUIModeServiceImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "service_location" : "service_location",
                  "bundle_location" : "bundle_location",
                  "description" : "description",
                  "pid" : "pid",
                  "additionalProperties" : "additionalProperties",
                  "title" : "title",
                  "properties" : {
                    "authoringUIModeService.default" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.wcm.core.impl.AuthoringUIModeServiceImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.wcm.core.impl.commands.WCMCommandServlet") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "wcmcommandservlet.delete_whitelist" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.wcm.core.impl.commands.WCMCommandServlet' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.wcm.core.impl.devicedetection.DeviceIdentificationModeImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "dim.appcache.enabled" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "dim.default.mode" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : {
                        "values" : "",
                        "labels" : ""
                      },
                      "value" : ""
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.wcm.core.impl.devicedetection.DeviceIdentificationModeImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.wcm.core.impl.event.PageEventAuditListener") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "service_location" : "service_location",
                  "bundle_location" : "bundle_location",
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "configured" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.wcm.core.impl.event.PageEventAuditListener' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.wcm.core.impl.event.PagePostProcessor") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "paths" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.wcm.core.impl.event.PagePostProcessor' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.wcm.core.impl.event.RepositoryChangeEventListener") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "paths" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "excludedPaths" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.wcm.core.impl.event.RepositoryChangeEventListener' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.wcm.core.impl.event.TemplatePostProcessor") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "paths" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.wcm.core.impl.event.TemplatePostProcessor' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.wcm.core.impl.LanguageManagerImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "langmgr.list.path" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "langmgr.country.default" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.wcm.core.impl.LanguageManagerImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.wcm.core.impl.LinkCheckerConfigurationFactoryImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "link.invalid.prefix" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "link.predated.prefix" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "link.expired.prefix" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "link.predated.remove" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "link.invalid.remove" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "link.invalid.suffix" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "link.expired.remove" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "link.wcmmodes" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "link.expired.suffix" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "link.predated.suffix" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.wcm.core.impl.LinkCheckerConfigurationFactoryImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.wcm.core.impl.page.PageInfoAggregatorImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "page.info.provider.property.regex.default" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "page.info.provider.property.name" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.wcm.core.impl.page.PageInfoAggregatorImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.wcm.core.impl.page.PageManagerFactoryImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "illegalCharMapping" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "pageSubTreeActivationCheck" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.wcm.core.impl.page.PageManagerFactoryImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.wcm.core.impl.references.content.ContentReferenceConfig") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "contentReferenceConfig.resourceTypes" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.wcm.core.impl.references.content.ContentReferenceConfig' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.contentfinder.AssetViewHandler") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "dam.showhidden" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "tagTitleSearch" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "guessTotal" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "dam.expiryProperty" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "dam.showexpired" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.contentfinder.AssetViewHandler' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.contentfinder.connector.ConnectorViewHandler") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "item.resource.types" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.contentfinder.connector.ConnectorViewHandler' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.contentfinder.PageViewHandler") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "tagTitleSearch" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "guessTotal" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.contentfinder.PageViewHandler' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.FindReplaceServlet") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "scope" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.FindReplaceServlet' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.ReferenceSearchServlet") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "referencesearchservlet.maxPages" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "referencesearchservlet.maxReferencesPerPage" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.ReferenceSearchServlet' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.ThumbnailServlet") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "workspace" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "dimensions" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.ThumbnailServlet' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.wcm.core.impl.utils.DefaultPageNameValidator") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "nonValidChars" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.wcm.core.impl.utils.DefaultPageNameValidator' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.wcm.core.impl.variants.PageVariantsProviderImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "service_location" : "service_location",
                  "bundle_location" : "bundle_location",
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "default.externalizer.domain" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.wcm.core.impl.variants.PageVariantsProviderImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.wcm.core.impl.VersionManagerImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "versionmanager.createVersionOnActivation" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "versionmanager.minNumberVersions" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "versionmanager.maxAgeDays" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "versionmanager.purgingEnabled" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "versionmanager.ivPaths" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "versionmanager.maxNumberVersions" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "versionmanager.purgePaths" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.wcm.core.impl.VersionManagerImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.wcm.core.impl.VersionPurgeTask") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "versionpurge.paths" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "versionpurge.minVersions" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "versionpurge.maxAgeDays" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "versionpurge.maxVersions" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "versionpurge.recursive" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.wcm.core.impl.VersionPurgeTask' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.wcm.core.impl.WCMDebugFilter") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "service_location" : "service_location",
                  "bundle_location" : "bundle_location",
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "wcmdbgfilter.jspDebug" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "wcmdbgfilter.enabled" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.wcm.core.impl.WCMDebugFilter' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.wcm.core.impl.WCMDeveloperModeFilter") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "service_location" : "service_location",
                  "bundle_location" : "bundle_location",
                  "description" : "description",
                  "pid" : "pid",
                  "additionalProperties" : "additionalProperties",
                  "title" : "title",
                  "properties" : {
                    "wcmdevmodefilter.enabled" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.wcm.core.impl.WCMDeveloperModeFilter' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.wcm.core.impl.warp.TimeWarpFilter") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "service_location" : "service_location",
                  "bundle_location" : "bundle_location",
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "filter.order" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "filter.scope" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.wcm.core.impl.warp.TimeWarpFilter' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.wcm.core.mvt.MVTStatisticsImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "service_location" : "service_location",
                  "bundle_location" : "bundle_location",
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "mvtstatistics.trackingurl" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.wcm.core.mvt.MVTStatisticsImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.wcm.core.stats.PageViewStatisticsImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "service_location" : "service_location",
                  "bundle_location" : "bundle_location",
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "pageviewstatistics.trackingscript.enabled" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "pageviewstatistics.trackingurl" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.wcm.core.stats.PageViewStatisticsImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.wcm.core.WCMRequestFilter") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "service_location" : "service_location",
                  "bundle_location" : "bundle_location",
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "wcmfilter.mode" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : {
                        "values" : "",
                        "labels" : ""
                      },
                      "value" : ""
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.wcm.core.WCMRequestFilter' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.wcm.designimporter.DesignPackageImporter") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "extract.filter" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.wcm.designimporter.DesignPackageImporter' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.wcm.designimporter.impl.CanvasBuilderImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "filepattern" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "build.page.nodes" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "build.client.libs" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "build.canvas.component" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.wcm.designimporter.impl.CanvasBuilderImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.wcm.designimporter.impl.CanvasPageDeleteHandler") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "minThreadPoolSize" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "maxThreadPoolSize" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.wcm.designimporter.impl.CanvasPageDeleteHandler' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.wcm.designimporter.impl.EntryPreprocessorImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "replace.pattern" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "search.pattern" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.wcm.designimporter.impl.EntryPreprocessorImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.wcm.designimporter.impl.MobileCanvasBuilderImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "device.groups" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "filepattern" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "build.page.nodes" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "build.client.libs" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "build.canvas.component" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.wcm.designimporter.impl.MobileCanvasBuilderImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.CanvasComponentTagHandlerFactory") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "tagpattern" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "service.ranking" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.CanvasComponentTagHandlerFactory' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.DefaultComponentTagHandlerFactory") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "tagpattern" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "service.ranking" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.DefaultComponentTagHandlerFactory' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.DefaultTagHandlerFactory") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "tagpattern" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "service.ranking" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.DefaultTagHandlerFactory' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.HeadTagHandlerFactory") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "tagpattern" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "service.ranking" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.HeadTagHandlerFactory' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.IFrameTagHandlerFactory") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "tagpattern" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "service.ranking" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.IFrameTagHandlerFactory' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.ImageComponentTagHandlerFactory") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "tagpattern" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "component.resourceType" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "service.ranking" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.ImageComponentTagHandlerFactory' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.ImgTagHandlerFactory") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "tagpattern" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "service.ranking" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.ImgTagHandlerFactory' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.InlineScriptTagHandlerFactory") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "tagpattern" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "service.ranking" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.InlineScriptTagHandlerFactory' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.LinkTagHandlerFactory") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "tagpattern" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "service.ranking" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.LinkTagHandlerFactory' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.MetaTagHandlerFactory") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "tagpattern" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "service.ranking" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.MetaTagHandlerFactory' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.NonScriptTagHandlerFactory") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "tagpattern" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "service.ranking" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.NonScriptTagHandlerFactory' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.ParsysComponentTagHandlerFactory") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "tagpattern" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "component.resourceType" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "service.ranking" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.ParsysComponentTagHandlerFactory' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.ScriptTagHandlerFactory") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "tagpattern" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "service.ranking" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.ScriptTagHandlerFactory' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.StyleTagHandlerFactory") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "tagpattern" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "service.ranking" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.StyleTagHandlerFactory' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.TextComponentTagHandlerFactory") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "tagpattern" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "component.resourceType" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "service.ranking" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.TextComponentTagHandlerFactory' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.TitleComponentTagHandlerFactory") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "tagpattern" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "component.resourceType" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "service.ranking" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.TitleComponentTagHandlerFactory' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.TitleTagHandlerFactory") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "tagpattern" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "service.ranking" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.TitleTagHandlerFactory' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.wcm.foundation.forms.impl.FormChooserServlet") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "service.name" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "sling.servlet.selectors" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "sling.servlet.resourceTypes" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "sling.servlet.methods" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "forms.formchooserservlet.advansesearch.require" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.wcm.foundation.forms.impl.FormChooserServlet' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.wcm.foundation.forms.impl.FormParagraphPostProcessor") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "forms.formparagraphpostprocessor.formresourcetypes" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "forms.formparagraphpostprocessor.enabled" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.wcm.foundation.forms.impl.FormParagraphPostProcessor' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.wcm.foundation.forms.impl.FormsHandlingServlet") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "name.whitelist" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "allow.expressions" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.wcm.foundation.forms.impl.FormsHandlingServlet' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.wcm.foundation.forms.impl.MailServlet") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "resource.whitelist" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "resource.blacklist" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "sling.servlet.selectors" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "sling.servlet.resourceTypes" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.wcm.foundation.forms.impl.MailServlet' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.wcm.foundation.impl.AdaptiveImageComponentServlet") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "adapt.supported.widths" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.wcm.foundation.impl.AdaptiveImageComponentServlet' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.wcm.foundation.impl.HTTPAuthHandler") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "auth.cred.utf8" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "path" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "auth.http.nologin" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "auth.default.loginpage" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "auth.cred.form" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "auth.http.realm" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.wcm.foundation.impl.HTTPAuthHandler' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.wcm.foundation.impl.PageImpressionsTracker") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "sling.auth.requirements" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.wcm.foundation.impl.PageImpressionsTracker' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.wcm.foundation.impl.PageRedirectServlet") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "excluded.resource.types" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.wcm.foundation.impl.PageRedirectServlet' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.wcm.foundation.security.impl.DefaultAttachmentTypeBlacklistService") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "default.attachment.type.blacklist" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "baseline.attachment.type.blacklist" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.wcm.foundation.security.impl.DefaultAttachmentTypeBlacklistService' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.wcm.foundation.security.impl.SaferSlingPostValidatorImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "service_location" : "service_location",
                  "bundle_location" : "bundle_location",
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "parameter.whitelist" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "resourcetype.whitelist" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "modifier.whitelist" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "operation.whitelist" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "operation.whitelist.prefixes" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "typehint.whitelist" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "binary.parameter.whitelist" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "parameter.whitelist.prefixes" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.wcm.foundation.security.impl.SaferSlingPostValidatorImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.wcm.mobile.core.impl.device.DeviceInfoTransformerFactory") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "service_location" : "service_location",
                  "bundle_location" : "bundle_location",
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "device.info.transformer.css.style" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "device.info.transformer.enabled" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.wcm.mobile.core.impl.device.DeviceInfoTransformerFactory' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.wcm.mobile.core.impl.redirect.RedirectFilter") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "service_location" : "service_location",
                  "bundle_location" : "bundle_location",
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "redirect.enabled" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "redirect.paths" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "redirect.stats.enabled" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "redirect.extensions" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.wcm.mobile.core.impl.redirect.RedirectFilter' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.ContentCopyActionFactory") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "service_location" : "service_location",
                  "bundle_location" : "bundle_location",
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "cq.wcm.msm.action.excludedparagraphitems" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "cq.wcm.msm.action.excludedprops" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "cq.wcm.msm.action.excludednodetypes" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "contentcopyaction.order.style" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : {
                        "values" : "",
                        "labels" : ""
                      },
                      "value" : ""
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.ContentCopyActionFactory' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.ContentDeleteActionFactory") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "service_location" : "service_location",
                  "bundle_location" : "bundle_location",
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "cq.wcm.msm.action.excludedparagraphitems" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "cq.wcm.msm.action.excludedprops" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "cq.wcm.msm.action.excludednodetypes" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.ContentDeleteActionFactory' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.ContentUpdateActionFactory") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "service_location" : "service_location",
                  "bundle_location" : "bundle_location",
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "cq.wcm.msm.action.excludedparagraphitems" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "cq.wcm.msm.action.excludedprops" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "cq.wcm.msm.action.excludednodetypes" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "cq.wcm.msm.action.ignoredMixin" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.ContentUpdateActionFactory' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.OrderChildrenActionFactory") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "service_location" : "service_location",
                  "bundle_location" : "bundle_location",
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "cq.wcm.msm.action.excludedparagraphitems" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "cq.wcm.msm.action.excludedprops" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "cq.wcm.msm.action.excludednodetypes" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.OrderChildrenActionFactory' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.PageMoveActionFactory") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "cq.wcm.msm.impl.actions.pagemove.prop_referenceUpdate" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "cq.wcm.msm.action.excludedparagraphitems" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "cq.wcm.msm.action.excludedprops" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "cq.wcm.msm.action.excludednodetypes" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.PageMoveActionFactory' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.ReferencesUpdateActionFactory") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "service_location" : "service_location",
                  "bundle_location" : "bundle_location",
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "cq.wcm.msm.impl.action.referencesupdate.prop_updateNested" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "cq.wcm.msm.action.excludedparagraphitems" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "cq.wcm.msm.action.excludedprops" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "cq.wcm.msm.action.excludednodetypes" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.ReferencesUpdateActionFactory' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.VersionCopyActionFactory") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "service_location" : "service_location",
                  "bundle_location" : "bundle_location",
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "cq.wcm.msm.action.excludedparagraphitems" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "cq.wcm.msm.action.excludedprops" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "cq.wcm.msm.action.excludednodetypes" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.VersionCopyActionFactory' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.wcm.msm.impl.LiveRelationshipManagerImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "liverelationshipmgr.relationsconfig.default" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.wcm.msm.impl.LiveRelationshipManagerImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.wcm.msm.impl.RolloutManagerImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "service_location" : "service_location",
                  "bundle_location" : "bundle_location",
                  "description" : "description",
                  "pid" : "pid",
                  "additionalProperties" : "additionalProperties",
                  "title" : "title",
                  "properties" : {
                    "rolloutmgr.excludedprops.default" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "rolloutmgr.excludednodetypes.default" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "rolloutmgr.conflicthandling.enabled" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "rolloutmgr.threadpool.maxshutdowntime" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "rolloutmgr.commit.size" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "rolloutmgr.threadpool.priority" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : {
                        "values" : "",
                        "labels" : ""
                      },
                      "value" : ""
                    },
                    "event.filter" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "rolloutmgr.excludedparagraphprops.default" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "rolloutmgr.threadpool.maxsize" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.wcm.msm.impl.RolloutManagerImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.wcm.msm.impl.servlets.AuditLogServlet") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "auditlogservlet.default.events.count" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "auditlogservlet.default.path" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.wcm.msm.impl.servlets.AuditLogServlet' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.wcm.notification.email.impl.EmailChannel") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "email.from" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.wcm.notification.email.impl.EmailChannel' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.wcm.notification.impl.NotificationManagerImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "service_location" : "service_location",
                  "bundle_location" : "bundle_location",
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "event.topics" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.wcm.notification.impl.NotificationManagerImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.wcm.scripting.impl.BVPManager") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "com.day.cq.wcm.scripting.bvp.script.engines" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.wcm.scripting.impl.BVPManager' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.wcm.undo.UndoConfig") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "service_location" : "service_location",
                  "bundle_location" : "bundle_location",
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "cq.wcm.undo.steps" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "cq.wcm.undo.persistence.mode" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "cq.wcm.undo.path" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "cq.wcm.undo.markermode" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "cq.wcm.undo.persistence" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "cq.wcm.undo.enabled" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "cq.wcm.undo.blacklist" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "cq.wcm.undo.validity" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "cq.wcm.undo.whitelist" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.wcm.undo.UndoConfig' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.wcm.webservicesupport.impl.ReplicationEventListener") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "Flush agents" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.wcm.webservicesupport.impl.ReplicationEventListener' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.wcm.workflow.impl.WcmWorkflowServiceImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "cq.wcm.worklfow.terminate.exclusion.list" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "minThreadPoolSize" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "maxThreadPoolSize" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "cq.wcm.workflow.terminate.on.activate" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "event.filter" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.wcm.workflow.impl.WcmWorkflowServiceImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.wcm.workflow.impl.WorkflowPackageInfoProvider") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "workflowpackageinfoprovider.filter.rootpath" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "workflowpackageinfoprovider.filter" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.wcm.workflow.impl.WorkflowPackageInfoProvider' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.widget.impl.HtmlLibraryManagerImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "service_location" : "service_location",
                  "bundle_location" : "bundle_location",
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "htmllibmanager.defaultuserthemename" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "htmllibmanager.gzip" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "htmllibmanager.clientmanager" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "htmllibmanager.debug" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "htmllibmanager.maxage" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "htmllibmanager.minify" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "htmllibmanager.defaultthemename" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "htmllibmanager.path.list" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "htmllibmanager.firebuglite.path" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "htmllibmanager.debug.init.js" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "htmllibmanager.maxDataUriSize" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "htmllibmanager.debug.console" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "htmllibmanager.forceCQUrlInfo" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "htmllibmanager.timing" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.widget.impl.HtmlLibraryManagerImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.widget.impl.WidgetExtensionProviderImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "service_location" : "service_location",
                  "bundle_location" : "bundle_location",
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "extendable.widgets" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "widgetextensionprovider.debug" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.widget.impl.WidgetExtensionProviderImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.workflow.impl.email.EMailNotificationService") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "host.prefix" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "notify.onabort" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "notify.oncomplete" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "notify.useronly" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "from.address" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "notify.oncontainercomplete" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.workflow.impl.email.EMailNotificationService' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.cq.workflow.impl.email.TaskEMailNotificationService") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "notify.onupdate" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "notify.oncomplete" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.cq.workflow.impl.email.TaskEMailNotificationService' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.crx.security.token.impl.impl.TokenAuthenticationHandler") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "service_location" : "service_location",
                  "bundle_location" : "bundle_location",
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "path" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "token.encapsulated" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "token.alternate.url" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "token.required.attr" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : {
                        "values" : "",
                        "labels" : ""
                      },
                      "value" : ""
                    },
                    "skip.token.refresh" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.crx.security.token.impl.impl.TokenAuthenticationHandler' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/com.day.crx.security.token.impl.TokenCleanupTask") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "batch.size" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "scheduler.expression" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "enable.token.cleanup.task" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/com.day.crx.security.token.impl.TokenCleanupTask' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/Guide Localization Service") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "supportedLocales" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "Localizable Properties" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/Guide Localization Service' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/MessagingUserComponentFactory") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "priority" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/MessagingUserComponentFactory' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.aries.jmx.framework.StateConfig") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "service_location" : "service_location",
                  "bundle_location" : "bundle_location",
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "attributeChangeNotificationEnabled" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.aries.jmx.framework.StateConfig' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.felix.eventadmin.impl.EventAdmin") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "service_location" : "service_location",
                  "bundle_location" : "bundle_location",
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "org.apache.felix.eventadmin.IgnoreTopic" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "org.apache.felix.eventadmin.IgnoreTimeout" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "org.apache.felix.eventadmin.AsyncToSyncThreadRatio" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : 6.02745618307040320615897144307382404804229736328125
                    },
                    "org.apache.felix.eventadmin.Timeout" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "org.apache.felix.eventadmin.RequireTopic" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "org.apache.felix.eventadmin.ThreadPoolSize" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.felix.eventadmin.impl.EventAdmin' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.felix.http") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "service_location" : "service_location",
                  "bundle_location" : "bundle_location",
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "org.apache.felix.http.jetty.sendServerHeader" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "org.apache.felix.jetty.gzip.includedPaths" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "org.apache.felix.http.enable" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "org.osgi.service.http.port" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "org.apache.felix.http.jetty.selectors" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "org.apache.felix.http.jetty.maxFormSize" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "org.apache.felix.jetty.gzip.minGzipSize" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "org.apache.felix.jetty.gzip.compressionLevel" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "org.apache.felix.http.host" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "org.apache.felix.http.session.timeout" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "org.apache.felix.jetty.gziphandler.enable" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "org.apache.felix.https.truststore.password" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "org.eclipse.jetty.servlet.SessionIdPathParameterName" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "org.apache.felix.http.timeout" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "org.eclipse.jetty.servlet.SessionCookie" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "org.apache.felix.jetty.gzip.inflateBufferSize" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "org.apache.felix.jetty.gzip.includedMimeTypes" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "org.apache.felix.jetty.gzip.includedMethods" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "org.apache.felix.jetty.gzip.excludedMimeTypes" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "org.apache.felix.http.jetty.headerBufferSize" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "org.apache.felix.https.jetty.ciphersuites.excluded" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "org.apache.felix.https.truststore" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "org.apache.felix.jetty.gzip.excludedMethods" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "org.apache.felix.https.keystore.password" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "org.apache.felix.http.mbeans" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "org.apache.felix.jetty.gzip.excludedPaths" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "org.apache.felix.http.context_path" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "org.apache.felix.http.session.invalidate" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "org.apache.felix.https.jetty.ciphersuites.included" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "org.apache.felix.http.session.uniqueid" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "org.eclipse.jetty.servlet.SessionDomain" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "org.apache.felix.http.jetty.responseBufferSize" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "org.apache.felix.http.path_exclusions" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "org.eclipse.jetty.servlet.MaxAge" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "org.apache.felix.http.jetty.threadpool.max" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "org.osgi.service.http.port.secure" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "org.apache.felix.jetty.gzip.excludedUserAgents" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "org.apache.felix.http.jetty.requestBufferSize" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "org.apache.felix.https.enable" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "org.apache.felix.https.jetty.session.cookie.httpOnly" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "org.apache.felix.https.keystore.key.password" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "org.apache.felix.http.name" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "org.apache.felix.jetty.gzip.syncFlush" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "org.eclipse.jetty.servlet.CheckingRemoteSessionIdEncoding" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "org.apache.felix.https.jetty.protocols.excluded" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "org.eclipse.jetty.servlet.SessionPath" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "org.apache.felix.https.keystore" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "org.apache.felix.http.jetty.acceptors" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "org.apache.felix.https.jetty.renegotiateAllowed" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "org.apache.felix.https.jetty.session.cookie.secure" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "org.apache.felix.https.clientcertificate" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : {
                        "values" : "",
                        "labels" : ""
                      },
                      "value" : ""
                    },
                    "org.apache.felix.proxy.load.balancer.connection.enable" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "org.apache.felix.https.jetty.protocols.included" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.felix.http' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.felix.http.sslfilter.SslFilter") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "ssl-forward.value" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "ssl-forward-cert.header" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "ssl-forward.header" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "rewrite.absolute.urls" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.felix.http.sslfilter.SslFilter' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.felix.jaas.Configuration.factory") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "jaas.controlFlag" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : {
                        "values" : "",
                        "labels" : ""
                      },
                      "value" : ""
                    },
                    "jaas.realmName" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "jaas.ranking" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "jaas.options" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "jaas.classname" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.felix.jaas.Configuration.factory' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.felix.jaas.ConfigurationSpi") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "service_location" : "service_location",
                  "bundle_location" : "bundle_location",
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "jaas.configProviderName" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "jaas.globalConfigPolicy" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : {
                        "values" : "",
                        "labels" : ""
                      },
                      "value" : ""
                    },
                    "jaas.defaultRealmName" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.felix.jaas.ConfigurationSpi' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.felix.scr.ScrService") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "ds.global.extender" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "ds.factory.enabled" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "ds.delayed.keepInstances" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "ds.loglevel" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : {
                        "values" : "",
                        "labels" : ""
                      },
                      "value" : ""
                    },
                    "ds.lock.timeout.milliseconds" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "ds.stop.timeout.milliseconds" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.felix.scr.ScrService' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.felix.systemready.impl.ComponentsCheck") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "components.list" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "type" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : {
                        "values" : "",
                        "labels" : ""
                      },
                      "value" : ""
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.felix.systemready.impl.ComponentsCheck' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.felix.systemready.impl.FrameworkStartCheck") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "target.start.level" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "target.start.level.prop.name" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "type" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : {
                        "values" : "",
                        "labels" : ""
                      },
                      "value" : ""
                    },
                    "timeout" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.felix.systemready.impl.FrameworkStartCheck' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.felix.systemready.impl.ServicesCheck") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "service_location" : "service_location",
                  "bundle_location" : "bundle_location",
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "services.list" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "type" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : {
                        "values" : "",
                        "labels" : ""
                      },
                      "value" : ""
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.felix.systemready.impl.ServicesCheck' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.felix.systemready.impl.servlet.SystemAliveServlet") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "service_location" : "service_location",
                  "bundle_location" : "bundle_location",
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "osgi.http.whiteboard.servlet.pattern" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "osgi.http.whiteboard.context.select" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.felix.systemready.impl.servlet.SystemAliveServlet' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.felix.systemready.impl.servlet.SystemReadyServlet") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "service_location" : "service_location",
                  "bundle_location" : "bundle_location",
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "osgi.http.whiteboard.servlet.pattern" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "osgi.http.whiteboard.context.select" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.felix.systemready.impl.servlet.SystemReadyServlet' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.felix.systemready.SystemReadyMonitor") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "poll.interval" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.felix.systemready.SystemReadyMonitor' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.felix.webconsole.internal.servlet.OsgiManager") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "http.service.filter" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "password" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "default.render" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "plugins" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : {
                        "values" : "",
                        "labels" : ""
                      },
                      "value" : ""
                    },
                    "loglevel" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : {
                        "values" : "",
                        "labels" : ""
                      },
                      "value" : ""
                    },
                    "realm" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "category" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "locale" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "manager.root" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "username" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.felix.webconsole.internal.servlet.OsgiManager' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.felix.webconsole.plugins.event.internal.PluginServlet") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "max.size" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.felix.webconsole.plugins.event.internal.PluginServlet' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.felix.webconsole.plugins.memoryusage.internal.MemoryUsageConfigurator") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "felix.memoryusage.dump.interval" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "felix.memoryusage.dump.location" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "felix.memoryusage.dump.threshold" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.felix.webconsole.plugins.memoryusage.internal.MemoryUsageConfigurator' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.http.proxyconfigurator") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "proxy.port" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "proxy.exceptions" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "proxy.enabled" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "proxy.host" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "proxy.user" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "proxy.password" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.http.proxyconfigurator' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreTextProviderService") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "dir" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreTextProviderService' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.jackrabbit.oak.plugins.blob.datastore.FileDataStore") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "service_location" : "service_location",
                  "bundle_location" : "bundle_location",
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "path" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.jackrabbit.oak.plugins.blob.datastore.FileDataStore' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.jackrabbit.oak.plugins.document.DocumentNodeStoreService") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "prefetchExternalChanges" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "role" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "cacheSegmentCount" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "versionGCExpression" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "repository.home" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "journalGCMaxAge" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "persistentCacheIncludes" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "prevDocCachePercentage" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "maxReplicationLagInSecs" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "socketKeepAlive" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "blobCacheSize" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "blobTrackSnapshotIntervalInSecs" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "blobGcMaxAgeInSecs" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "childrenCachePercentage" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "nodeCachePercentage" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "cache" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "journalGCInterval" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "journalCache" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "leaseCheckMode" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : {
                        "values" : "",
                        "labels" : ""
                      },
                      "value" : ""
                    },
                    "customBlobStore" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "documentStoreType" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : {
                        "values" : "",
                        "labels" : ""
                      },
                      "value" : ""
                    },
                    "versionGcMaxAgeInSecs" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "bundlingDisabled" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "persistentCache" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "diffCachePercentage" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "mongouri" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "cacheStackMoveDistance" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "updateLimit" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "versionGCTimeLimitInSecs" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "db" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.jackrabbit.oak.plugins.document.DocumentNodeStoreService' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.jackrabbit.oak.plugins.document.DocumentNodeStoreServicePreset") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "service_location" : "service_location",
                  "bundle_location" : "bundle_location",
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "persistentCacheIncludes" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.jackrabbit.oak.plugins.document.DocumentNodeStoreServicePreset' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.jackrabbit.oak.plugins.document.secondary.SecondaryStoreCacheService") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "enableAsyncObserver" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "observerQueueSize" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "includedPaths" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.jackrabbit.oak.plugins.document.secondary.SecondaryStoreCacheService' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.AsyncIndexerService") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "service_location" : "service_location",
                  "bundle_location" : "bundle_location",
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "errorWarnIntervalSeconds" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "asyncConfigs" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "failingIndexTimeoutSeconds" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "leaseTimeOutMinutes" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.AsyncIndexerService' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexProviderService") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "service_location" : "service_location",
                  "bundle_location" : "bundle_location",
                  "description" : "description",
                  "pid" : "pid",
                  "additionalProperties" : "additionalProperties",
                  "title" : "title",
                  "properties" : {
                    "alwaysUsePreExtractedCache" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "enableSingleBlobIndexFiles" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "debug" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "localIndexDir" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "enableHybridIndexing" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "propIndexCleanerIntervalInSecs" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "hybridQueueSize" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "disableStoredIndexDefinition" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "extractedTextCacheSizeInMB" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "threadPoolSize" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "deletedBlobsCollectionEnabled" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "extractedTextCacheExpiryInSecs" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "disabled" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "booleanClauseLimit" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "prefetchIndexFiles" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "enableOpenIndexAsync" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexProviderService' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.EmbeddedSolrServerConfigurationProvider") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "solr.home.path" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "solr.core.name" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.EmbeddedSolrServerConfigurationProvider' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.NodeStateSolrServersObserverService") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "enabled" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.NodeStateSolrServersObserverService' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.OakSolrConfigurationProviderService") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "used.properties" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "path.parent.field" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "property.restrictions" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "collapsed.path.field" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "path.restrictions" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "path.exact.field" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "property.mappings" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "rows" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "collapse.jcrcontent.nodes" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "path.desc.field" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "path.child.field" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "catch.all.field" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "ignored.properties" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "commit.policy" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : {
                        "values" : "",
                        "labels" : ""
                      },
                      "value" : ""
                    },
                    "primarytypes.restrictions" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "type.mappings" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "path.depth.field" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.OakSolrConfigurationProviderService' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.RemoteSolrServerConfigurationProvider") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "solr.zk.host" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "solr.socket.timeout" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "solr.conf.dir" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "solr.collection" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "solr.connection.timeout" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "solr.replication.factor" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "solr.http.url" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "solr.shards.no" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.RemoteSolrServerConfigurationProvider' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.SolrQueryIndexProviderService") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "query.aggregation" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.SolrQueryIndexProviderService' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.SolrServerProviderService") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "server.type" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : {
                        "values" : "",
                        "labels" : ""
                      },
                      "value" : ""
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.SolrServerProviderService' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.jackrabbit.oak.plugins.metric.StatisticsProviderFactory") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "providerType" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : {
                        "values" : "",
                        "labels" : ""
                      },
                      "value" : ""
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.jackrabbit.oak.plugins.metric.StatisticsProviderFactory' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.jackrabbit.oak.plugins.observation.ChangeCollectorProvider") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "service_location" : "service_location",
                  "bundle_location" : "bundle_location",
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "maxItems" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "enabled" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "maxPathDepth" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.jackrabbit.oak.plugins.observation.ChangeCollectorProvider' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.jackrabbit.oak.query.QueryEngineSettingsService") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "queryLimitInMemory" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "queryLimitReads" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "queryFailTraversal" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "fastQuerySize" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.jackrabbit.oak.query.QueryEngineSettingsService' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.jackrabbit.oak.security.authentication.AuthenticationConfigurationImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "org.apache.jackrabbit.oak.authentication.configSpiName" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "org.apache.jackrabbit.oak.authentication.appName" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.jackrabbit.oak.security.authentication.AuthenticationConfigurationImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.jackrabbit.oak.security.authentication.ldap.impl.LdapIdentityProvider") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "host.ssl" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "group.objectclass" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "group.makeDnPath" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "host.port" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "customattributes" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "bind.dn" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "user.makeDnPath" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "adminPool.lookupOnValidate" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "host.name" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "group.extraFilter" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "user.extraFilter" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "user.objectclass" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "bind.password" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "group.memberAttribute" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "adminPool.maxActive" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "userPool.maxActive" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "user.idAttribute" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "userPool.lookupOnValidate" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "useUidForExtId" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "host.tls" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "user.baseDN" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "group.baseDN" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "provider.name" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "host.noCertCheck" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "group.nameAttribute" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "searchTimeout" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.jackrabbit.oak.security.authentication.ldap.impl.LdapIdentityProvider' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.jackrabbit.oak.security.authentication.token.TokenConfigurationImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "service_location" : "service_location",
                  "bundle_location" : "bundle_location",
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "passwordSaltSize" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "tokenCleanupThreshold" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "passwordHashIterations" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "tokenExpiration" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "tokenRefresh" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "tokenLength" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "passwordHashAlgorithm" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.jackrabbit.oak.security.authentication.token.TokenConfigurationImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.jackrabbit.oak.security.authorization.AuthorizationConfigurationImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "service_location" : "service_location",
                  "bundle_location" : "bundle_location",
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "permissionsJr2" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : {
                        "values" : "",
                        "labels" : ""
                      },
                      "value" : ""
                    },
                    "importBehavior" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : {
                        "values" : "",
                        "labels" : ""
                      },
                      "value" : ""
                    },
                    "administrativePrincipals" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "configurationRanking" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "readPaths" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.jackrabbit.oak.security.authorization.AuthorizationConfigurationImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.jackrabbit.oak.security.internal.SecurityProviderRegistration") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "service_location" : "service_location",
                  "bundle_location" : "bundle_location",
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "requiredServicePids" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "authorizationCompositionType" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : {
                        "values" : "",
                        "labels" : ""
                      },
                      "value" : ""
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.jackrabbit.oak.security.internal.SecurityProviderRegistration' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.jackrabbit.oak.security.user.RandomAuthorizableNodeName") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "service_location" : "service_location",
                  "bundle_location" : "bundle_location",
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "length" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.jackrabbit.oak.security.user.RandomAuthorizableNodeName' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.jackrabbit.oak.security.user.UserConfigurationImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "service_location" : "service_location",
                  "bundle_location" : "bundle_location",
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "passwordSaltSize" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "systemRelativePath" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "enableRFC7613UsercaseMappedProfile" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "groupsPath" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "passwordHashIterations" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "cacheExpiration" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "usersPath" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "initialPasswordChange" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "passwordHistorySize" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "supportAutoSave" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "importBehavior" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : {
                        "values" : "",
                        "labels" : ""
                      },
                      "value" : ""
                    },
                    "defaultDepth" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "passwordMaxAge" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "passwordHashAlgorithm" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "omitAdminPw" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "passwordExpiryForAdmin" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.jackrabbit.oak.security.user.UserConfigurationImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.jackrabbit.oak.segment.azure.AzureSegmentStoreService") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "accountName" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "accessKey" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "containerName" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "connectionURL" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "rootPath" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.jackrabbit.oak.segment.azure.AzureSegmentStoreService' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.jackrabbit.oak.segment.SegmentNodeStoreFactory") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "compaction.force.timeout" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "role" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "templateCache.size" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "pauseCompaction" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "standby" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "splitPersistence" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "repository.home" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "customSegmentStore" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "dispatchChanges" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "segmentCache.size" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "registerDescriptors" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "stringDeduplicationCache.size" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "blobTrackSnapshotIntervalInSecs" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "tarmk.size" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "nodeDeduplicationCache.size" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "compaction.sizeDeltaEstimation" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "blobGcMaxAgeInSecs" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "repository.backup.dir" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "compaction.retryCount" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "customBlobStore" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "compaction.disableEstimation" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "compaction.progressLog" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "templateDeduplicationCache.size" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "compaction.memoryThreshold" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "stringCache.size" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "tarmk.mode" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "compaction.retainedGenerations" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.jackrabbit.oak.segment.SegmentNodeStoreFactory' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.jackrabbit.oak.segment.SegmentNodeStoreMonitorService") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "service_location" : "service_location",
                  "bundle_location" : "bundle_location",
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "commitsTrackerWriterGroups" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.jackrabbit.oak.segment.SegmentNodeStoreMonitorService' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.jackrabbit.oak.segment.SegmentNodeStoreService") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "service_location" : "service_location",
                  "bundle_location" : "bundle_location",
                  "description" : "description",
                  "pid" : "pid",
                  "additionalProperties" : "additionalProperties",
                  "title" : "title",
                  "properties" : {
                    "compaction.force.timeout" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "repository.backup.dir" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "templateCache.size" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "pauseCompaction" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "standby" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "splitPersistence" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "compaction.retryCount" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "customBlobStore" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "repository.home" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "customSegmentStore" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "compaction.disableEstimation" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "compaction.progressLog" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "segmentCache.size" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "templateDeduplicationCache.size" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "compaction.memoryThreshold" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "stringCache.size" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "stringDeduplicationCache.size" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "blobTrackSnapshotIntervalInSecs" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "tarmk.mode" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "tarmk.size" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "nodeDeduplicationCache.size" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "compaction.sizeDeltaEstimation" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "blobGcMaxAgeInSecs" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "compaction.retainedGenerations" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.jackrabbit.oak.segment.SegmentNodeStoreService' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.jackrabbit.oak.segment.standby.store.StandbyStoreService") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "mode" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : {
                        "values" : "",
                        "labels" : ""
                      },
                      "value" : ""
                    },
                    "standby.autoclean" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "standby.readtimeout" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "port" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "primary.allowed-client-ip-ranges" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "primary.host" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "interval" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "secure" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "org.apache.sling.installer.configuration.persist" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.jackrabbit.oak.segment.standby.store.StandbyStoreService' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authentication.external.impl.DefaultSyncHandler") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "user.membershipExpTime" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "enableRFC7613UsercaseMappedProfile" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "group.expirationTime" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "user.expirationTime" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "user.disableMissing" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "user.propertyMapping" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "user.membershipNestingDepth" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "user.pathPrefix" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "group.propertyMapping" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "group.autoMembership" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "user.autoMembership" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "handler.name" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "group.pathPrefix" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "user.dynamicMembership" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authentication.external.impl.DefaultSyncHandler' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authentication.external.impl.ExternalLoginModuleFactory") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "idp.name" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "jaas.controlFlag" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "jaas.realmName" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "jaas.ranking" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "sync.handlerName" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authentication.external.impl.ExternalLoginModuleFactory' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authentication.external.impl.principal.ExternalPrincipalConfiguration") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "protectExternalId" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authentication.external.impl.principal.ExternalPrincipalConfiguration' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authorization.cug.impl.CugConfiguration") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "service_location" : "service_location",
                  "bundle_location" : "bundle_location",
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "cugEnabled" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "configurationRanking" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "cugSupportedPaths" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authorization.cug.impl.CugConfiguration' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authorization.cug.impl.CugExcludeImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "principalNames" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authorization.cug.impl.CugExcludeImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.user.action.DefaultAuthorizableActionProvider") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "service_location" : "service_location",
                  "bundle_location" : "bundle_location",
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "userPrivilegeNames" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "groupPrivilegeNames" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "constraint" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "enabledActions" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : {
                        "values" : "",
                        "labels" : ""
                      },
                      "value" : ""
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.user.action.DefaultAuthorizableActionProvider' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.jackrabbit.vault.packaging.impl.PackagingImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "packageRoots" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.jackrabbit.vault.packaging.impl.PackagingImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.jackrabbit.vault.packaging.registry.impl.FSPackageRegistry") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "homePath" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.jackrabbit.vault.packaging.registry.impl.FSPackageRegistry' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.sling.auth.core.impl.LogoutServlet") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "sling.servlet.paths" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "sling.servlet.methods" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.sling.auth.core.impl.LogoutServlet' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.sling.caconfig.impl.ConfigurationBindingsValueProvider") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "enabled" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.sling.caconfig.impl.ConfigurationBindingsValueProvider' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.sling.caconfig.impl.ConfigurationResolverImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "service_location" : "service_location",
                  "bundle_location" : "bundle_location",
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "configBucketNames" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.sling.caconfig.impl.ConfigurationResolverImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.sling.caconfig.impl.def.DefaultConfigurationInheritanceStrategy") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "configPropertyInheritancePropertyNames" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "enabled" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.sling.caconfig.impl.def.DefaultConfigurationInheritanceStrategy' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.sling.caconfig.impl.def.DefaultConfigurationPersistenceStrategy") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "enabled" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.sling.caconfig.impl.def.DefaultConfigurationPersistenceStrategy' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.sling.caconfig.impl.override.OsgiConfigurationOverrideProvider") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "description" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "overrides" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "enabled" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "service.ranking" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.sling.caconfig.impl.override.OsgiConfigurationOverrideProvider' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.sling.caconfig.impl.override.SystemPropertyConfigurationOverrideProvider") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "enabled" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "service.ranking" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.sling.caconfig.impl.override.SystemPropertyConfigurationOverrideProvider' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.sling.caconfig.management.impl.ConfigurationManagementSettingsImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "service_location" : "service_location",
                  "bundle_location" : "bundle_location",
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "ignorePropertyNameRegex" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "configCollectionPropertiesResourceNames" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.sling.caconfig.management.impl.ConfigurationManagementSettingsImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.sling.caconfig.resource.impl.def.DefaultConfigurationResourceResolvingStrategy") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "service_location" : "service_location",
                  "bundle_location" : "bundle_location",
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "configCollectionInheritancePropertyNames" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "fallbackPaths" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "configPath" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "enabled" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.sling.caconfig.resource.impl.def.DefaultConfigurationResourceResolvingStrategy' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.sling.caconfig.resource.impl.def.DefaultContextPathStrategy") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "service_location" : "service_location",
                  "bundle_location" : "bundle_location",
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "configRefPropertyNames" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "enabled" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "configRefResourceNames" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "service.ranking" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.sling.caconfig.resource.impl.def.DefaultContextPathStrategy' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.sling.commons.html.internal.TagsoupHtmlParser") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "parser.features" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.sling.commons.html.internal.TagsoupHtmlParser' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.sling.commons.log.LogManager") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "service_location" : "service_location",
                  "bundle_location" : "bundle_location",
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "org.apache.sling.commons.log.file.number" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "org.apache.sling.commons.log.maxCallerDataDepth" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "org.apache.sling.commons.log.file.size" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "org.apache.sling.commons.log.packagingDataEnabled" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "org.apache.sling.commons.log.numOfLines" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "org.apache.sling.commons.log.level" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : {
                        "values" : "",
                        "labels" : ""
                      },
                      "value" : ""
                    },
                    "org.apache.sling.commons.log.maxOldFileCountInDump" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "org.apache.sling.commons.log.pattern" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "org.apache.sling.commons.log.configurationFile" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "org.apache.sling.commons.log.file" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.sling.commons.log.LogManager' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.sling.commons.log.LogManager.factory.config") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "org.apache.sling.commons.log.names" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "org.apache.sling.commons.log.additiv" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "org.apache.sling.commons.log.level" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : {
                        "values" : "",
                        "labels" : ""
                      },
                      "value" : ""
                    },
                    "org.apache.sling.commons.log.pattern" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "org.apache.sling.commons.log.file" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.sling.commons.log.LogManager.factory.config' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.sling.commons.log.LogManager.factory.writer") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "org.apache.sling.commons.log.file.number" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "org.apache.sling.commons.log.file.buffered" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "org.apache.sling.commons.log.file.size" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "org.apache.sling.commons.log.file" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.sling.commons.log.LogManager.factory.writer' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.sling.commons.metrics.internal.LogReporter") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "period" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "level" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : {
                        "values" : "",
                        "labels" : ""
                      },
                      "value" : ""
                    },
                    "prefix" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "pattern" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "loggerName" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "registryName" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "timeUnit" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : {
                        "values" : "",
                        "labels" : ""
                      },
                      "value" : ""
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.sling.commons.metrics.internal.LogReporter' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.sling.commons.metrics.rrd4j.impl.CodahaleMetricsReporter") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "service_location" : "service_location",
                  "bundle_location" : "bundle_location",
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "path" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "archives" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "datasources" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "step" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.sling.commons.metrics.rrd4j.impl.CodahaleMetricsReporter' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.sling.commons.mime.internal.MimeTypeServiceImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "service_location" : "service_location",
                  "bundle_location" : "bundle_location",
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "mime.types" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.sling.commons.mime.internal.MimeTypeServiceImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.sling.commons.scheduler.impl.QuartzScheduler") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "service_location" : "service_location",
                  "bundle_location" : "bundle_location",
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "metrics.filters" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "allowedPoolNames" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "scheduler.useleaderforsingle" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "slowThresholdMillis" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "poolName" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.sling.commons.scheduler.impl.QuartzScheduler' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.sling.commons.scheduler.impl.SchedulerHealthCheck") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "max.quartzJob.duration.acceptable" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.sling.commons.scheduler.impl.SchedulerHealthCheck' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.sling.commons.threads.impl.DefaultThreadPool.factory") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "shutdownWaitTime" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "minPoolSize" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "queueSize" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "keepAliveTime" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "name" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "blockPolicy" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : {
                        "values" : "",
                        "labels" : ""
                      },
                      "value" : ""
                    },
                    "shutdownGraceful" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "priority" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : {
                        "values" : "",
                        "labels" : ""
                      },
                      "value" : ""
                    },
                    "maxPoolSize" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "maxThreadAge" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "daemon" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.sling.commons.threads.impl.DefaultThreadPool.factory' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.sling.datasource.DataSourceFactory") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "connectionProperties" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "validationQuery" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "defaultCatalog" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "datasource.svc.prop.name" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "validationInterval" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "datasource.svc.properties" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "password" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "maxIdle" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "testWhileIdle" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "defaultAutoCommit" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : {
                        "values" : "",
                        "labels" : ""
                      },
                      "value" : ""
                    },
                    "minIdle" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "jdbcInterceptors" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "defaultReadOnly" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : {
                        "values" : "",
                        "labels" : ""
                      },
                      "value" : ""
                    },
                    "initialSize" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "maxWait" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "defaultTransactionIsolation" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : {
                        "values" : "",
                        "labels" : ""
                      },
                      "value" : ""
                    },
                    "url" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "testOnBorrow" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "logValidationErrors" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "maxAge" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "timeBetweenEvictionRunsMillis" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "minEvictableIdleTimeMillis" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "testOnReturn" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "datasource.name" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "driverClassName" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "username" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "maxActive" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "validationQueryTimeout" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "initSQL" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.sling.datasource.DataSourceFactory' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.sling.datasource.JNDIDataSourceFactory") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "datasource.name" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "datasource.jndi.name" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "datasource.svc.prop.name" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "jndi.properties" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.sling.datasource.JNDIDataSourceFactory' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.sling.discovery.oak.Config") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "service_location" : "service_location",
                  "bundle_location" : "bundle_location",
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "sharedKey" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "hmacEnabled" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "hmacSharedKeyTTL" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "socketConnectTimeout" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "topologyConnectorWhitelist" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "soTimeout" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "autoStopLocalLoopEnabled" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "gzipConnectorRequestsEnabled" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "clusterSyncServiceTimeout" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "topologyConnectorUrls" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "connectorPingInterval" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "enableSyncToken" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "clusterSyncServiceInterval" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "discoveryLiteCheckInterval" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "backoffStandbyFactor" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "connectorPingTimeout" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "backoffStableFactor" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "minEventDelay" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "enableEncryption" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.sling.discovery.oak.Config' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.sling.discovery.oak.SynchronizedClocksHealthCheck") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "hc.tags" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "hc.name" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "hc.mbean.name" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.sling.discovery.oak.SynchronizedClocksHealthCheck' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.sling.distribution.agent.impl.ForwardDistributionAgentFactory") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "queue.processing.enabled" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "queue.provider" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : {
                        "values" : "",
                        "labels" : ""
                      },
                      "value" : ""
                    },
                    "retry.strategy" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : {
                        "values" : "",
                        "labels" : ""
                      },
                      "value" : ""
                    },
                    "priorityQueues" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "triggers.target" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "retry.attempts" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "title" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "serviceName" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "enabled" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "passiveQueues" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "async.delivery" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "allowed.roots" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "requestAuthorizationStrategy.target" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "http.conn.timeout" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "name" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "log.level" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : {
                        "values" : "",
                        "labels" : ""
                      },
                      "value" : ""
                    },
                    "details" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "transportSecretProvider.target" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "packageBuilder.target" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "packageImporter.endpoints" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.sling.distribution.agent.impl.ForwardDistributionAgentFactory' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.sling.distribution.agent.impl.PrivilegeDistributionRequestAuthorizationStrategyFactory") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "name" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "jcrPrivilege" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.sling.distribution.agent.impl.PrivilegeDistributionRequestAuthorizationStrategyFactory' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.sling.distribution.agent.impl.QueueDistributionAgentFactory") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "allowed.roots" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "triggers.target" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "priorityQueues" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "requestAuthorizationStrategy.target" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "name" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "log.level" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : {
                        "values" : "",
                        "labels" : ""
                      },
                      "value" : ""
                    },
                    "details" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "title" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "serviceName" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "queueProviderFactory.target" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "enabled" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "packageBuilder.target" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.sling.distribution.agent.impl.QueueDistributionAgentFactory' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.sling.distribution.agent.impl.ReverseDistributionAgentFactory") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "queue.processing.enabled" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "triggers.target" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "packageExporter.endpoints" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "title" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "serviceName" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "enabled" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "pull.items" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "http.conn.timeout" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "requestAuthorizationStrategy.target" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "name" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "log.level" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : {
                        "values" : "",
                        "labels" : ""
                      },
                      "value" : ""
                    },
                    "details" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "transportSecretProvider.target" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "packageBuilder.target" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.sling.distribution.agent.impl.ReverseDistributionAgentFactory' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.sling.distribution.agent.impl.SimpleDistributionAgentFactory") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "queue.processing.enabled" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "triggers.target" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "requestAuthorizationStrategy.target" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "name" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "log.level" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : {
                        "values" : "",
                        "labels" : ""
                      },
                      "value" : ""
                    },
                    "details" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "title" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "serviceName" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "packageExporter.target" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "packageImporter.target" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "enabled" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.sling.distribution.agent.impl.SimpleDistributionAgentFactory' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.sling.distribution.agent.impl.SyncDistributionAgentFactory") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "queue.processing.enabled" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "retry.strategy" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : {
                        "values" : "",
                        "labels" : ""
                      },
                      "value" : ""
                    },
                    "triggers.target" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "packageExporter.endpoints" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "retry.attempts" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "title" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "serviceName" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "enabled" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "passiveQueues" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "pull.items" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "http.conn.timeout" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "requestAuthorizationStrategy.target" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "name" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "log.level" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : {
                        "values" : "",
                        "labels" : ""
                      },
                      "value" : ""
                    },
                    "details" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "transportSecretProvider.target" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "packageBuilder.target" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "packageImporter.endpoints" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.sling.distribution.agent.impl.SyncDistributionAgentFactory' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.sling.distribution.monitor.DistributionQueueHealthCheck") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "numberOfRetriesAllowed" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "hc.tags" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "hc.name" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "hc.mbean.name" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.sling.distribution.monitor.DistributionQueueHealthCheck' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.sling.distribution.packaging.impl.exporter.AgentDistributionPackageExporterFactory") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "agent.target" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "name" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "drop.invalid.items" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "queue" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.sling.distribution.packaging.impl.exporter.AgentDistributionPackageExporterFactory' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.sling.distribution.packaging.impl.exporter.LocalDistributionPackageExporterFactory") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "name" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "packageBuilder.target" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.sling.distribution.packaging.impl.exporter.LocalDistributionPackageExporterFactory' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.sling.distribution.packaging.impl.exporter.RemoteDistributionPackageExporterFactory") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "endpoints" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "pull.items" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "name" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "transportSecretProvider.target" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "packageBuilder.target" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.sling.distribution.packaging.impl.exporter.RemoteDistributionPackageExporterFactory' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.sling.distribution.packaging.impl.importer.LocalDistributionPackageImporterFactory") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "name" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "packageBuilder.target" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.sling.distribution.packaging.impl.importer.LocalDistributionPackageImporterFactory' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.sling.distribution.packaging.impl.importer.RemoteDistributionPackageImporterFactory") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "endpoints" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "name" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "transportSecretProvider.target" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.sling.distribution.packaging.impl.importer.RemoteDistributionPackageImporterFactory' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.sling.distribution.packaging.impl.importer.RepositoryDistributionPackageImporterFactory") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "path" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "service.name" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "name" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "privilege.name" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.sling.distribution.packaging.impl.importer.RepositoryDistributionPackageImporterFactory' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.sling.distribution.resources.impl.DistributionConfigurationResourceProviderFactory") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "kind" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "provider.roots" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.sling.distribution.resources.impl.DistributionConfigurationResourceProviderFactory' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.sling.distribution.resources.impl.DistributionServiceResourceProviderFactory") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "kind" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "provider.roots" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.sling.distribution.resources.impl.DistributionServiceResourceProviderFactory' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.sling.distribution.serialization.impl.DistributionPackageBuilderFactory") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "format.target" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "cleanupDelay" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "fileThreshold" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "monitoringQueueSize" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "property.filters" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "memoryUnit" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : {
                        "values" : "",
                        "labels" : ""
                      },
                      "value" : ""
                    },
                    "name" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "useOffHeapMemory" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "digestAlgorithm" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : {
                        "values" : "",
                        "labels" : ""
                      },
                      "value" : ""
                    },
                    "type" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : {
                        "values" : "",
                        "labels" : ""
                      },
                      "value" : ""
                    },
                    "package.filters" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "tempFsFolder" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.sling.distribution.serialization.impl.DistributionPackageBuilderFactory' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.sling.distribution.serialization.impl.vlt.VaultDistributionPackageBuilderFactory") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "pathsMapping" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "importMode" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "cleanupDelay" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "MEGA_BYTES" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : {
                        "values" : "",
                        "labels" : ""
                      },
                      "value" : ""
                    },
                    "aclHandling" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "digestAlgorithm" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : {
                        "values" : "",
                        "labels" : ""
                      },
                      "value" : ""
                    },
                    "type" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : {
                        "values" : "",
                        "labels" : ""
                      },
                      "value" : ""
                    },
                    "strictImport" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "package.roots" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "property.filters" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "fileThreshold" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "monitoringQueueSize" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "name" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "useOffHeapMemory" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "useBinaryReferences" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "package.filters" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "tempFsFolder" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "autoSaveThreshold" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.sling.distribution.serialization.impl.vlt.VaultDistributionPackageBuilderFactory' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.sling.distribution.transport.impl.UserCredentialsDistributionTransportSecretProvider") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "password" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "name" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "username" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.sling.distribution.transport.impl.UserCredentialsDistributionTransportSecretProvider' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.sling.distribution.trigger.impl.DistributionEventDistributeDistributionTriggerFactory") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "path" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "name" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.sling.distribution.trigger.impl.DistributionEventDistributeDistributionTriggerFactory' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.sling.distribution.trigger.impl.JcrEventDistributionTriggerFactory") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "path" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "deep" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "name" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "serviceName" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "ignoredPathsPatterns" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.sling.distribution.trigger.impl.JcrEventDistributionTriggerFactory' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.sling.distribution.trigger.impl.PersistedJcrEventDistributionTriggerFactory") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "path" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "name" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "nuggetsPath" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "serviceName" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.sling.distribution.trigger.impl.PersistedJcrEventDistributionTriggerFactory' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.sling.distribution.trigger.impl.RemoteEventDistributionTriggerFactory") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "endpoint" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "name" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "transportSecretProvider.target" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.sling.distribution.trigger.impl.RemoteEventDistributionTriggerFactory' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.sling.distribution.trigger.impl.ResourceEventDistributionTriggerFactory") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "path" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "name" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.sling.distribution.trigger.impl.ResourceEventDistributionTriggerFactory' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.sling.distribution.trigger.impl.ScheduledDistributionTriggerFactory") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "path" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "seconds" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "name" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "serviceName" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.sling.distribution.trigger.impl.ScheduledDistributionTriggerFactory' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.sling.engine.impl.auth.SlingAuthenticator") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "service_location" : "service_location",
                  "bundle_location" : "bundle_location",
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "sling.auth.anonymous.user" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "auth.sudo.cookie" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "sling.auth.anonymous.password" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "auth.http" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : {
                        "values" : "",
                        "labels" : ""
                      },
                      "value" : ""
                    },
                    "osgi.http.whiteboard.listener" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "sling.auth.requirements" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "osgi.http.whiteboard.context.select" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "auth.sudo.parameter" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "auth.annonymous" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "auth.uri.suffix" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "auth.http.realm" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.sling.engine.impl.auth.SlingAuthenticator' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.sling.engine.impl.debug.RequestProgressTrackerLogFilter") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "extensions" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "compactLogFormat" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "minDurationMs" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "maxDurationMs" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.sling.engine.impl.debug.RequestProgressTrackerLogFilter' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.sling.engine.impl.log.RequestLogger") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "service_location" : "service_location",
                  "bundle_location" : "bundle_location",
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "access.log.enabled" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "request.log.output" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "access.log.output" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "request.log.enabled" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "access.log.outputtype" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : {
                        "values" : "",
                        "labels" : ""
                      },
                      "value" : ""
                    },
                    "request.log.outputtype" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : {
                        "values" : "",
                        "labels" : ""
                      },
                      "value" : ""
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.sling.engine.impl.log.RequestLogger' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.sling.engine.impl.log.RequestLoggerService") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "request.log.service.output" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "request.log.service.outputtype" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : {
                        "values" : "",
                        "labels" : ""
                      },
                      "value" : ""
                    },
                    "request.log.service.format" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "request.log.service.onentry" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.sling.engine.impl.log.RequestLoggerService' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.sling.engine.impl.SlingMainServlet") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "service_location" : "service_location",
                  "bundle_location" : "bundle_location",
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "sling.max.inclusions" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "sling.trace.allow" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "sling.store.pattern.requests" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "sling.serverinfo" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "sling.max.record.requests" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "sling.additional.response.headers" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "sling.max.calls" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.sling.engine.impl.SlingMainServlet' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.sling.engine.parameters") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "service_location" : "service_location",
                  "bundle_location" : "bundle_location",
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "sling.default.parameter.encoding" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "file.location" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "file.threshold" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "file.max" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "sling.default.max.parameters" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "sling.default.parameter.checkForAdditionalContainerParameters" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "request.max" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.sling.engine.parameters' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.sling.event.impl.EventingThreadPool") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "minPoolSize" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.sling.event.impl.EventingThreadPool' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.sling.event.impl.jobs.DefaultJobManager") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "queue.priority" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : {
                        "values" : "",
                        "labels" : ""
                      },
                      "value" : ""
                    },
                    "queue.retrydelay" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "queue.maxparallel" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "queue.retries" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.sling.event.impl.jobs.DefaultJobManager' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.sling.event.impl.jobs.jcr.PersistenceHandler") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "service_location" : "service_location",
                  "bundle_location" : "bundle_location",
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "job.consumermanager.disableDistribution" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "startup.delay" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "cleanup.period" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.sling.event.impl.jobs.jcr.PersistenceHandler' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.sling.event.impl.jobs.JobConsumerManager") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "service_location" : "service_location",
                  "bundle_location" : "bundle_location",
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "job.consumermanager.whitelist" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "job.consumermanager.blacklist" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "org.apache.sling.installer.configuration.persist" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.sling.event.impl.jobs.JobConsumerManager' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.sling.event.jobs.QueueConfiguration") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "queue.priority" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : {
                        "values" : "",
                        "labels" : ""
                      },
                      "value" : ""
                    },
                    "queue.retrydelay" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "queue.maxparallel" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : 6.02745618307040320615897144307382404804229736328125
                    },
                    "queue.retries" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "queue.threadPoolSize" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "queue.topics" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "queue.keepJobs" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "queue.preferRunOnCreationInstance" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "queue.name" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "queue.type" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : {
                        "values" : "",
                        "labels" : ""
                      },
                      "value" : ""
                    },
                    "service.ranking" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.sling.event.jobs.QueueConfiguration' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.sling.extensions.webconsolesecurityprovider.internal.SlingWebConsoleSecurityProvider") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "groups" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "users" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.sling.extensions.webconsolesecurityprovider.internal.SlingWebConsoleSecurityProvider' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.sling.featureflags.Feature") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "name" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "description" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "enabled" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.sling.featureflags.Feature' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.sling.featureflags.impl.ConfiguredFeature") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "name" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "description" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "enabled" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.sling.featureflags.impl.ConfiguredFeature' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.sling.hapi.impl.HApiUtilImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "org.apache.sling.hapi.tools.externalurl" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "org.apache.sling.hapi.tools.collectionresourcetype" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "org.apache.sling.hapi.tools.enabled" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "org.apache.sling.hapi.tools.resourcetype" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "org.apache.sling.hapi.tools.searchpaths" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.sling.hapi.impl.HApiUtilImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.sling.hc.core.impl.CompositeHealthCheck") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "hc.tags" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "filter.combineTagsWithOr" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "hc.name" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "filter.tags" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "hc.mbean.name" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.sling.hc.core.impl.CompositeHealthCheck' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.sling.hc.core.impl.executor.HealthCheckExecutorImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "longRunningFutureThresholdForCriticalMs" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "timeoutInMs" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "resultCacheTtlInMs" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.sling.hc.core.impl.executor.HealthCheckExecutorImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.sling.hc.core.impl.JmxAttributeHealthCheck") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "mbean.name" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "attribute.value.constraint" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "hc.tags" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "hc.name" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "hc.mbean.name" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "attribute.name" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.sling.hc.core.impl.JmxAttributeHealthCheck' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.sling.hc.core.impl.ScriptableHealthCheck") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "expression" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "hc.tags" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "language.extension" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "hc.name" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "hc.mbean.name" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.sling.hc.core.impl.ScriptableHealthCheck' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.sling.hc.core.impl.servlet.HealthCheckExecutorServlet") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "servletPath" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "cors.accessControlAllowOrigin" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "disabled" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.sling.hc.core.impl.servlet.HealthCheckExecutorServlet' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.sling.hc.core.impl.servlet.ResultTxtVerboseSerializer") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "colWidthName" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "totalWidth" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "colWidthTiming" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "colWidthResult" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.sling.hc.core.impl.servlet.ResultTxtVerboseSerializer' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.sling.i18n.impl.I18NFilter") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "service_location" : "service_location",
                  "bundle_location" : "bundle_location",
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "sling.filter.scope" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "service.ranking" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.sling.i18n.impl.I18NFilter' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.sling.i18n.impl.JcrResourceBundleProvider") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "service_location" : "service_location",
                  "bundle_location" : "bundle_location",
                  "description" : "description",
                  "pid" : "pid",
                  "additionalProperties" : "additionalProperties",
                  "title" : "title",
                  "properties" : {
                    "invalidation.delay" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "preload.bundles" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "locale.default" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.sling.i18n.impl.JcrResourceBundleProvider' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.sling.installer.provider.jcr.impl.JcrInstaller") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "service_location" : "service_location",
                  "bundle_location" : "bundle_location",
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "sling.jcrinstall.search.path" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "sling.jcrinstall.enable.writeback" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "sling.jcrinstall.new.config.path" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "sling.jcrinstall.signal.path" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "handler.schemes" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "sling.jcrinstall.folder.name.regexp" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "sling.jcrinstall.folder.max.depth" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.sling.installer.provider.jcr.impl.JcrInstaller' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.sling.jcr.base.internal.LoginAdminWhitelist") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "whitelist.bundles.regexp" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "whitelist.bypass" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.sling.jcr.base.internal.LoginAdminWhitelist' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.sling.jcr.base.internal.LoginAdminWhitelist.fragment") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "whitelist.bundles" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "whitelist.name" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.sling.jcr.base.internal.LoginAdminWhitelist.fragment' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.sling.jcr.davex.impl.servlets.SlingDavExServlet") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "dav.protectedhandlers" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "alias" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "dav.create-absolute-uri" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.sling.jcr.davex.impl.servlets.SlingDavExServlet' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.sling.jcr.jackrabbit.server.JndiRegistrationSupport") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "java.naming.factory.initial" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "java.naming.provider.url" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.sling.jcr.jackrabbit.server.JndiRegistrationSupport' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.sling.jcr.jackrabbit.server.RmiRegistrationSupport") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "port" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.sling.jcr.jackrabbit.server.RmiRegistrationSupport' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.sling.jcr.repoinit.impl.RepositoryInitializer") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "service_location" : "service_location",
                  "bundle_location" : "bundle_location",
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "references" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.sling.jcr.repoinit.impl.RepositoryInitializer' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.sling.jcr.repoinit.RepositoryInitializer") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "references" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "scripts" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.sling.jcr.repoinit.RepositoryInitializer' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.sling.jcr.resource.internal.JcrResourceResolverFactoryImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "service_location" : "service_location",
                  "bundle_location" : "bundle_location",
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "resource.resolver.searchpath" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "resource.resolver.map.location" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "resource.resolver.providerhandling.paranoid" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "resource.resolver.enable.vanitypath" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "resource.resolver.vanitypath.maxEntries" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "resource.resolver.log.closing" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "resource.resolver.vanitypath.maxEntries.startup" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "resource.resolver.vanity.precedence" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "resource.resolver.vanitypath.blacklist" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "resource.resolver.manglenamespaces" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "resource.resolver.vanitypath.bloomfilter.maxBytes" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "resource.resolver.default.vanity.redirect.status" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "resource.resolver.optimize.alias.resolution" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "resource.resolver.log.unclosed" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "resource.resolver.allowDirect" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "resource.resolver.vanitypath.whitelist" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "resource.resolver.required.providers" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "resource.resolver.required.providernames" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "resource.resolver.virtual" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "resource.resolver.map.observation" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "resource.resolver.mapping" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.sling.jcr.resource.internal.JcrResourceResolverFactoryImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.sling.jcr.resource.internal.JcrSystemUserValidator") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "allow.only.system.user" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.sling.jcr.resource.internal.JcrSystemUserValidator' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.sling.jcr.resourcesecurity.impl.ResourceAccessGateFactory") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "path" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "checkpath.prefix" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "jcrPath" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.sling.jcr.resourcesecurity.impl.ResourceAccessGateFactory' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.sling.jcr.webdav.impl.handler.DefaultHandlerService") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "type.content" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "type.collections" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "type.noncollections" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "service.ranking" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.sling.jcr.webdav.impl.handler.DefaultHandlerService' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.sling.jcr.webdav.impl.handler.DirListingExportHandlerService") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "service.ranking" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.sling.jcr.webdav.impl.handler.DirListingExportHandlerService' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.sling.jcr.webdav.impl.servlets.SimpleWebDavServlet") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "service_location" : "service_location",
                  "bundle_location" : "bundle_location",
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "filter.prefixes" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "type.content" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "type.collections" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "collection.types" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "type.noncollections" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "filter.types" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "dav.realm" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "dav.root" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "dav.create-absolute-uri" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "filter.uris" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.sling.jcr.webdav.impl.servlets.SimpleWebDavServlet' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.sling.jmx.provider.impl.JMXResourceProvider") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "provider.roots" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.sling.jmx.provider.impl.JMXResourceProvider' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.sling.models.impl.ModelAdapterFactory") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "cleanup.job.period" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "osgi.http.whiteboard.listener" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "osgi.http.whiteboard.context.select" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "max.recursion.depth" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.sling.models.impl.ModelAdapterFactory' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.sling.models.jacksonexporter.impl.ResourceModuleProvider") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "max.recursion.levels" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.sling.models.jacksonexporter.impl.ResourceModuleProvider' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.sling.resource.inventory.impl.ResourceInventoryPrinterFactory") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "felix.inventory.printer.title" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "path" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "felix.inventory.printer.name" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.sling.resource.inventory.impl.ResourceInventoryPrinterFactory' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.sling.resourcemerger.impl.MergedResourceProviderFactory") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "merge.readOnly" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "merge.root" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.sling.resourcemerger.impl.MergedResourceProviderFactory' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.sling.resourcemerger.picker.overriding") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "service_location" : "service_location",
                  "bundle_location" : "bundle_location",
                  "description" : "description",
                  "pid" : "pid",
                  "additionalProperties" : "additionalProperties",
                  "title" : "title",
                  "properties" : {
                    "merge.readOnly" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "merge.root" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.sling.resourcemerger.picker.overriding' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.sling.scripting.core.impl.ScriptCacheImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "service_location" : "service_location",
                  "bundle_location" : "bundle_location",
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "org.apache.sling.scripting.cache.size" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "org.apache.sling.scripting.cache.additional_extensions" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.sling.scripting.core.impl.ScriptCacheImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.sling.scripting.core.impl.ScriptingResourceResolverProviderImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "log.stacktrace.onclose" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.sling.scripting.core.impl.ScriptingResourceResolverProviderImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.sling.scripting.java.impl.JavaScriptEngineFactory") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "service_location" : "service_location",
                  "bundle_location" : "bundle_location",
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "java.classdebuginfo" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "java.compilerSourceVM" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "java.compilerTargetVM" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "java.javaEncoding" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.sling.scripting.java.impl.JavaScriptEngineFactory' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.sling.scripting.javascript.internal.RhinoJavaScriptEngineFactory") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "org.apache.sling.scripting.javascript.rhino.optLevel" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.sling.scripting.javascript.internal.RhinoJavaScriptEngineFactory' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.sling.scripting.jsp.JspScriptEngineFactory") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "service_location" : "service_location",
                  "bundle_location" : "bundle_location",
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "jasper.enablePooling" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "jasper.genStringAsCharArray" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "jasper.ieClassId" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "jasper.keepgenerated" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "jasper.compilerSourceVM" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "jasper.displaySourceFragments" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "jasper.mappedfile" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "jasper.trimSpaces" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "jasper.compilerTargetVM" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "default.is.session" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "jasper.classdebuginfo" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.sling.scripting.jsp.JspScriptEngineFactory' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.sling.scripting.sightly.js.impl.jsapi.SlyBindingsValuesProvider") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "service_location" : "service_location",
                  "bundle_location" : "bundle_location",
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "org.apache.sling.scripting.sightly.js.bindings" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.sling.scripting.sightly.js.impl.jsapi.SlyBindingsValuesProvider' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.sling.security.impl.ContentDispositionFilter") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "service_location" : "service_location",
                  "bundle_location" : "bundle_location",
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "sling.content.disposition.paths" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "sling.content.disposition.excluded.paths" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "sling.content.disposition.all.paths" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.sling.security.impl.ContentDispositionFilter' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.sling.security.impl.ReferrerFilter") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "service_location" : "service_location",
                  "bundle_location" : "bundle_location",
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "allow.hosts" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "filter.methods" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "exclude.agents.regexp" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "allow.hosts.regexp" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "allow.empty" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.sling.security.impl.ReferrerFilter' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.sling.serviceusermapping.impl.ServiceUserMapperImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "service_location" : "service_location",
                  "bundle_location" : "bundle_location",
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "user.default" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "user.mapping" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "user.enable.default.mapping" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "require.validation" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.sling.serviceusermapping.impl.ServiceUserMapperImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.sling.serviceusermapping.impl.ServiceUserMapperImpl.amended") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "user.mapping" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "service.ranking" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.sling.serviceusermapping.impl.ServiceUserMapperImpl.amended' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.sling.servlets.get.DefaultGetServlet") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "service_location" : "service_location",
                  "bundle_location" : "bundle_location",
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "ecmaSuport" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "enable.txt" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "aliases" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "enable.html" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "index" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "json.maximumresults" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "enable.xml" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "index.files" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "enable.json" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.sling.servlets.get.DefaultGetServlet' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.sling.servlets.get.impl.version.VersionInfoServlet") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "ecmaSuport" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "sling.servlet.selectors" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.sling.servlets.get.impl.version.VersionInfoServlet' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.sling.servlets.post.impl.helper.ChunkCleanUpTask") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "scheduler.concurrent" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "scheduler.expression" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "chunk.cleanup.age" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.sling.servlets.post.impl.helper.ChunkCleanUpTask' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.sling.servlets.post.impl.SlingPostServlet") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "servlet.post.dateFormats" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "servlet.post.checkinNewVersionableNodes" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "servlet.post.ignorePattern" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "servlet.post.autoCheckout" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "servlet.post.nodeNameHints" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "servlet.post.nodeNameMaxLength" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "servlet.post.autoCheckin" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.sling.servlets.post.impl.SlingPostServlet' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.sling.servlets.resolver.SlingServletResolver") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "service_location" : "service_location",
                  "bundle_location" : "bundle_location",
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "servletresolver.defaultExtensions" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "servletresolver.cacheSize" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "servletresolver.paths" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "servletresolver.servletRoot" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.sling.servlets.resolver.SlingServletResolver' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.sling.settings.impl.SlingSettingsServiceImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "sling.name" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "sling.description" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.sling.settings.impl.SlingSettingsServiceImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.sling.startupfilter.impl.StartupFilterImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "default.message" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "active.by.default" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.sling.startupfilter.impl.StartupFilterImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.sling.tenant.internal.TenantProviderImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "tenant.root" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    },
                    "tenant.path.matcher" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.sling.tenant.internal.TenantProviderImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.sling.tracer.internal.LogTracer") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "recordingCompressionEnabled" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "gzipResponse" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "servletEnabled" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    },
                    "recordingCacheSizeInMB" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "tracerSets" : {
                      "is_set" : true,
                      "values" : [ "values", "values" ],
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0
                    },
                    "recordingCacheDurationInSecs" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 6,
                      "value" : 1
                    },
                    "enabled" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : true
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.sling.tracer.internal.LogTracer' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/system/console/configMgr/org.apache.sling.xss.impl.XSSFilterImpl") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = "application/json"
                val exampleContentString = """{
                  "service_location" : "service_location",
                  "bundle_location" : "bundle_location",
                  "description" : "description",
                  "pid" : "pid",
                  "title" : "title",
                  "properties" : {
                    "policyPath" : {
                      "is_set" : true,
                      "name" : "name",
                      "description" : "description",
                      "optional" : true,
                      "type" : 0,
                      "value" : "value"
                    }
                  }
                }"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/system/console/configMgr/org.apache.sling.xss.impl.XSSFilterImpl' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }
}
