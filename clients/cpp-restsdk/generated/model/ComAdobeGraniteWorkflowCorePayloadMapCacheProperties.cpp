/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComAdobeGraniteWorkflowCorePayloadMapCacheProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComAdobeGraniteWorkflowCorePayloadMapCacheProperties::ComAdobeGraniteWorkflowCorePayloadMapCacheProperties()
{
    m_GetSystemWorkflowModelsIsSet = false;
    m_GetPackageRootPathIsSet = false;
}

ComAdobeGraniteWorkflowCorePayloadMapCacheProperties::~ComAdobeGraniteWorkflowCorePayloadMapCacheProperties()
{
}

void ComAdobeGraniteWorkflowCorePayloadMapCacheProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComAdobeGraniteWorkflowCorePayloadMapCacheProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_GetSystemWorkflowModelsIsSet)
    {
        val[utility::conversions::to_string_t("getSystemWorkflowModels")] = ModelBase::toJson(m_GetSystemWorkflowModels);
    }
    if(m_GetPackageRootPathIsSet)
    {
        val[utility::conversions::to_string_t("getPackageRootPath")] = ModelBase::toJson(m_GetPackageRootPath);
    }

    return val;
}

void ComAdobeGraniteWorkflowCorePayloadMapCacheProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("getSystemWorkflowModels")))
    {
        if(!val[utility::conversions::to_string_t("getSystemWorkflowModels")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("getSystemWorkflowModels")]);
            setGetSystemWorkflowModels( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("getPackageRootPath")))
    {
        if(!val[utility::conversions::to_string_t("getPackageRootPath")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("getPackageRootPath")]);
            setGetPackageRootPath( newItem );
        }
    }
}

void ComAdobeGraniteWorkflowCorePayloadMapCacheProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_GetSystemWorkflowModelsIsSet)
    {
        if (m_GetSystemWorkflowModels.get())
        {
            m_GetSystemWorkflowModels->toMultipart(multipart, utility::conversions::to_string_t("getSystemWorkflowModels."));
        }
    }
    if(m_GetPackageRootPathIsSet)
    {
        if (m_GetPackageRootPath.get())
        {
            m_GetPackageRootPath->toMultipart(multipart, utility::conversions::to_string_t("getPackageRootPath."));
        }
    }
}

void ComAdobeGraniteWorkflowCorePayloadMapCacheProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("getSystemWorkflowModels")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("getSystemWorkflowModels")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("getSystemWorkflowModels."));
            setGetSystemWorkflowModels( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("getPackageRootPath")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("getPackageRootPath")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("getPackageRootPath."));
            setGetPackageRootPath( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyArray> ComAdobeGraniteWorkflowCorePayloadMapCacheProperties::getGetSystemWorkflowModels() const
{
    return m_GetSystemWorkflowModels;
}


void ComAdobeGraniteWorkflowCorePayloadMapCacheProperties::setGetSystemWorkflowModels(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_GetSystemWorkflowModels = value;
    m_GetSystemWorkflowModelsIsSet = true;
}
bool ComAdobeGraniteWorkflowCorePayloadMapCacheProperties::getSystemWorkflowModelsIsSet() const
{
    return m_GetSystemWorkflowModelsIsSet;
}

void ComAdobeGraniteWorkflowCorePayloadMapCacheProperties::unsetGetSystemWorkflowModels()
{
    m_GetSystemWorkflowModelsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteWorkflowCorePayloadMapCacheProperties::getGetPackageRootPath() const
{
    return m_GetPackageRootPath;
}


void ComAdobeGraniteWorkflowCorePayloadMapCacheProperties::setGetPackageRootPath(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_GetPackageRootPath = value;
    m_GetPackageRootPathIsSet = true;
}
bool ComAdobeGraniteWorkflowCorePayloadMapCacheProperties::getPackageRootPathIsSet() const
{
    return m_GetPackageRootPathIsSet;
}

void ComAdobeGraniteWorkflowCorePayloadMapCacheProperties::unsetGetPackageRootPath()
{
    m_GetPackageRootPathIsSet = false;
}

}
}
}
}

