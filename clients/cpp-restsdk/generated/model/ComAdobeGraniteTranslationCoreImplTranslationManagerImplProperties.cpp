/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComAdobeGraniteTranslationCoreImplTranslationManagerImplProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComAdobeGraniteTranslationCoreImplTranslationManagerImplProperties::ComAdobeGraniteTranslationCoreImplTranslationManagerImplProperties()
{
    m_DefaultConnectorNameIsSet = false;
    m_DefaultCategoryIsSet = false;
}

ComAdobeGraniteTranslationCoreImplTranslationManagerImplProperties::~ComAdobeGraniteTranslationCoreImplTranslationManagerImplProperties()
{
}

void ComAdobeGraniteTranslationCoreImplTranslationManagerImplProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComAdobeGraniteTranslationCoreImplTranslationManagerImplProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_DefaultConnectorNameIsSet)
    {
        val[utility::conversions::to_string_t("defaultConnectorName")] = ModelBase::toJson(m_DefaultConnectorName);
    }
    if(m_DefaultCategoryIsSet)
    {
        val[utility::conversions::to_string_t("defaultCategory")] = ModelBase::toJson(m_DefaultCategory);
    }

    return val;
}

void ComAdobeGraniteTranslationCoreImplTranslationManagerImplProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("defaultConnectorName")))
    {
        if(!val[utility::conversions::to_string_t("defaultConnectorName")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("defaultConnectorName")]);
            setDefaultConnectorName( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("defaultCategory")))
    {
        if(!val[utility::conversions::to_string_t("defaultCategory")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("defaultCategory")]);
            setDefaultCategory( newItem );
        }
    }
}

void ComAdobeGraniteTranslationCoreImplTranslationManagerImplProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_DefaultConnectorNameIsSet)
    {
        if (m_DefaultConnectorName.get())
        {
            m_DefaultConnectorName->toMultipart(multipart, utility::conversions::to_string_t("defaultConnectorName."));
        }
    }
    if(m_DefaultCategoryIsSet)
    {
        if (m_DefaultCategory.get())
        {
            m_DefaultCategory->toMultipart(multipart, utility::conversions::to_string_t("defaultCategory."));
        }
    }
}

void ComAdobeGraniteTranslationCoreImplTranslationManagerImplProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("defaultConnectorName")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("defaultConnectorName")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("defaultConnectorName."));
            setDefaultConnectorName( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("defaultCategory")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("defaultCategory")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("defaultCategory."));
            setDefaultCategory( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteTranslationCoreImplTranslationManagerImplProperties::getDefaultConnectorName() const
{
    return m_DefaultConnectorName;
}


void ComAdobeGraniteTranslationCoreImplTranslationManagerImplProperties::setDefaultConnectorName(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_DefaultConnectorName = value;
    m_DefaultConnectorNameIsSet = true;
}
bool ComAdobeGraniteTranslationCoreImplTranslationManagerImplProperties::defaultConnectorNameIsSet() const
{
    return m_DefaultConnectorNameIsSet;
}

void ComAdobeGraniteTranslationCoreImplTranslationManagerImplProperties::unsetDefaultConnectorName()
{
    m_DefaultConnectorNameIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteTranslationCoreImplTranslationManagerImplProperties::getDefaultCategory() const
{
    return m_DefaultCategory;
}


void ComAdobeGraniteTranslationCoreImplTranslationManagerImplProperties::setDefaultCategory(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_DefaultCategory = value;
    m_DefaultCategoryIsSet = true;
}
bool ComAdobeGraniteTranslationCoreImplTranslationManagerImplProperties::defaultCategoryIsSet() const
{
    return m_DefaultCategoryIsSet;
}

void ComAdobeGraniteTranslationCoreImplTranslationManagerImplProperties::unsetDefaultCategory()
{
    m_DefaultCategoryIsSet = false;
}

}
}
}
}

