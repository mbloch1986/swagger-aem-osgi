/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperProperties::OAIComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperProperties::OAIComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperProperties() {
    init();
}

OAIComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperProperties::~OAIComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperProperties() {
    this->cleanup();
}

void
OAIComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperProperties::init() {
    facebook = new OAIConfigNodePropertyArray();
    m_facebook_isSet = false;
    twitter = new OAIConfigNodePropertyArray();
    m_twitter_isSet = false;
    provider_config_user_folder = new OAIConfigNodePropertyString();
    m_provider_config_user_folder_isSet = false;
}

void
OAIComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperProperties::cleanup() {
    if(facebook != nullptr) { 
        delete facebook;
    }
    if(twitter != nullptr) { 
        delete twitter;
    }
    if(provider_config_user_folder != nullptr) { 
        delete provider_config_user_folder;
    }
}

OAIComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperProperties*
OAIComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&facebook, pJson["facebook"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
    ::OpenAPI::setValue(&twitter, pJson["twitter"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
    ::OpenAPI::setValue(&provider_config_user_folder, pJson["provider.config.user.folder"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
}

QString
OAIComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperProperties::asJsonObject() {
    QJsonObject obj;
    if((facebook != nullptr) && (facebook->isSet())){
        toJsonValue(QString("facebook"), facebook, obj, QString("OAIConfigNodePropertyArray"));
    }
    if((twitter != nullptr) && (twitter->isSet())){
        toJsonValue(QString("twitter"), twitter, obj, QString("OAIConfigNodePropertyArray"));
    }
    if((provider_config_user_folder != nullptr) && (provider_config_user_folder->isSet())){
        toJsonValue(QString("provider.config.user.folder"), provider_config_user_folder, obj, QString("OAIConfigNodePropertyString"));
    }

    return obj;
}

OAIConfigNodePropertyArray*
OAIComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperProperties::getFacebook() {
    return facebook;
}
void
OAIComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperProperties::setFacebook(OAIConfigNodePropertyArray* facebook) {
    this->facebook = facebook;
    this->m_facebook_isSet = true;
}

OAIConfigNodePropertyArray*
OAIComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperProperties::getTwitter() {
    return twitter;
}
void
OAIComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperProperties::setTwitter(OAIConfigNodePropertyArray* twitter) {
    this->twitter = twitter;
    this->m_twitter_isSet = true;
}

OAIConfigNodePropertyString*
OAIComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperProperties::getProviderConfigUserFolder() {
    return provider_config_user_folder;
}
void
OAIComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperProperties::setProviderConfigUserFolder(OAIConfigNodePropertyString* provider_config_user_folder) {
    this->provider_config_user_folder = provider_config_user_folder;
    this->m_provider_config_user_folder_isSet = true;
}


bool
OAIComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(facebook != nullptr && facebook->isSet()){ isObjectUpdated = true; break;}
        if(twitter != nullptr && twitter->isSet()){ isObjectUpdated = true; break;}
        if(provider_config_user_folder != nullptr && provider_config_user_folder->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

