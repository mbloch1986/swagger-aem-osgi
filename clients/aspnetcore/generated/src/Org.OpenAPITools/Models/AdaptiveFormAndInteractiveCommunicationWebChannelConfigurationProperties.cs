/*
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties : IEquatable<AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties>
    { 
        /// <summary>
        /// Gets or Sets ShowPlaceholder
        /// </summary>
        [DataMember(Name="showPlaceholder")]
        public ConfigNodePropertyBoolean ShowPlaceholder { get; set; }

        /// <summary>
        /// Gets or Sets MaximumCacheEntries
        /// </summary>
        [DataMember(Name="maximumCacheEntries")]
        public ConfigNodePropertyInteger MaximumCacheEntries { get; set; }

        /// <summary>
        /// Gets or Sets AfScriptingCompatversion
        /// </summary>
        [DataMember(Name="af.scripting.compatversion")]
        public ConfigNodePropertyDropDown AfScriptingCompatversion { get; set; }

        /// <summary>
        /// Gets or Sets MakeFileNameUnique
        /// </summary>
        [DataMember(Name="makeFileNameUnique")]
        public ConfigNodePropertyBoolean MakeFileNameUnique { get; set; }

        /// <summary>
        /// Gets or Sets GeneratingCompliantData
        /// </summary>
        [DataMember(Name="generatingCompliantData")]
        public ConfigNodePropertyBoolean GeneratingCompliantData { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties {\n");
            sb.Append("  ShowPlaceholder: ").Append(ShowPlaceholder).Append("\n");
            sb.Append("  MaximumCacheEntries: ").Append(MaximumCacheEntries).Append("\n");
            sb.Append("  AfScriptingCompatversion: ").Append(AfScriptingCompatversion).Append("\n");
            sb.Append("  MakeFileNameUnique: ").Append(MakeFileNameUnique).Append("\n");
            sb.Append("  GeneratingCompliantData: ").Append(GeneratingCompliantData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties)obj);
        }

        /// <summary>
        /// Returns true if AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties instances are equal
        /// </summary>
        /// <param name="other">Instance of AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ShowPlaceholder == other.ShowPlaceholder ||
                    ShowPlaceholder != null &&
                    ShowPlaceholder.Equals(other.ShowPlaceholder)
                ) && 
                (
                    MaximumCacheEntries == other.MaximumCacheEntries ||
                    MaximumCacheEntries != null &&
                    MaximumCacheEntries.Equals(other.MaximumCacheEntries)
                ) && 
                (
                    AfScriptingCompatversion == other.AfScriptingCompatversion ||
                    AfScriptingCompatversion != null &&
                    AfScriptingCompatversion.Equals(other.AfScriptingCompatversion)
                ) && 
                (
                    MakeFileNameUnique == other.MakeFileNameUnique ||
                    MakeFileNameUnique != null &&
                    MakeFileNameUnique.Equals(other.MakeFileNameUnique)
                ) && 
                (
                    GeneratingCompliantData == other.GeneratingCompliantData ||
                    GeneratingCompliantData != null &&
                    GeneratingCompliantData.Equals(other.GeneratingCompliantData)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ShowPlaceholder != null)
                    hashCode = hashCode * 59 + ShowPlaceholder.GetHashCode();
                    if (MaximumCacheEntries != null)
                    hashCode = hashCode * 59 + MaximumCacheEntries.GetHashCode();
                    if (AfScriptingCompatversion != null)
                    hashCode = hashCode * 59 + AfScriptingCompatversion.GetHashCode();
                    if (MakeFileNameUnique != null)
                    hashCode = hashCode * 59 + MakeFileNameUnique.GetHashCode();
                    if (GeneratingCompliantData != null)
                    hashCode = hashCode * 59 + GeneratingCompliantData.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties left, AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties left, AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationProperties right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
