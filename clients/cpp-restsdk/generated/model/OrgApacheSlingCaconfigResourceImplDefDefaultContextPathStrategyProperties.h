/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyProperties.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyProperties_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyProperties_H_


#include "../ModelBase.h"

#include "ConfigNodePropertyBoolean.h"
#include "ConfigNodePropertyInteger.h"
#include "ConfigNodePropertyArray.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyProperties
    : public ModelBase
{
public:
    OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyProperties();
    virtual ~OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyProperties();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyProperties members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getEnabled() const;
    bool enabledIsSet() const;
    void unsetEnabled();
    void setEnabled(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getConfigRefResourceNames() const;
    bool configRefResourceNamesIsSet() const;
    void unsetConfigRefResourceNames();
    void setConfigRefResourceNames(std::shared_ptr<ConfigNodePropertyArray> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getConfigRefPropertyNames() const;
    bool configRefPropertyNamesIsSet() const;
    void unsetConfigRefPropertyNames();
    void setConfigRefPropertyNames(std::shared_ptr<ConfigNodePropertyArray> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getServiceRanking() const;
    bool serviceRankingIsSet() const;
    void unsetService_ranking();
    void setServiceRanking(std::shared_ptr<ConfigNodePropertyInteger> value);

protected:
    std::shared_ptr<ConfigNodePropertyBoolean> m_Enabled;
    bool m_EnabledIsSet;
    std::shared_ptr<ConfigNodePropertyArray> m_ConfigRefResourceNames;
    bool m_ConfigRefResourceNamesIsSet;
    std::shared_ptr<ConfigNodePropertyArray> m_ConfigRefPropertyNames;
    bool m_ConfigRefPropertyNamesIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_Service_ranking;
    bool m_Service_rankingIsSet;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyProperties_H_ */
