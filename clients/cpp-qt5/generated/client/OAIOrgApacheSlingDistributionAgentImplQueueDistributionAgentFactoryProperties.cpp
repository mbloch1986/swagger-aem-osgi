/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIOrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIOrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties::OAIOrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIOrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties::OAIOrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties() {
    init();
}

OAIOrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties::~OAIOrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties() {
    this->cleanup();
}

void
OAIOrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties::init() {
    name = new OAIConfigNodePropertyString();
    m_name_isSet = false;
    title = new OAIConfigNodePropertyString();
    m_title_isSet = false;
    details = new OAIConfigNodePropertyString();
    m_details_isSet = false;
    enabled = new OAIConfigNodePropertyBoolean();
    m_enabled_isSet = false;
    service_name = new OAIConfigNodePropertyString();
    m_service_name_isSet = false;
    log_level = new OAIConfigNodePropertyDropDown();
    m_log_level_isSet = false;
    allowed_roots = new OAIConfigNodePropertyArray();
    m_allowed_roots_isSet = false;
    request_authorization_strategy_target = new OAIConfigNodePropertyString();
    m_request_authorization_strategy_target_isSet = false;
    queue_provider_factory_target = new OAIConfigNodePropertyString();
    m_queue_provider_factory_target_isSet = false;
    package_builder_target = new OAIConfigNodePropertyString();
    m_package_builder_target_isSet = false;
    triggers_target = new OAIConfigNodePropertyString();
    m_triggers_target_isSet = false;
    priority_queues = new OAIConfigNodePropertyArray();
    m_priority_queues_isSet = false;
}

void
OAIOrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties::cleanup() {
    if(name != nullptr) { 
        delete name;
    }
    if(title != nullptr) { 
        delete title;
    }
    if(details != nullptr) { 
        delete details;
    }
    if(enabled != nullptr) { 
        delete enabled;
    }
    if(service_name != nullptr) { 
        delete service_name;
    }
    if(log_level != nullptr) { 
        delete log_level;
    }
    if(allowed_roots != nullptr) { 
        delete allowed_roots;
    }
    if(request_authorization_strategy_target != nullptr) { 
        delete request_authorization_strategy_target;
    }
    if(queue_provider_factory_target != nullptr) { 
        delete queue_provider_factory_target;
    }
    if(package_builder_target != nullptr) { 
        delete package_builder_target;
    }
    if(triggers_target != nullptr) { 
        delete triggers_target;
    }
    if(priority_queues != nullptr) { 
        delete priority_queues;
    }
}

OAIOrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties*
OAIOrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIOrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&name, pJson["name"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&title, pJson["title"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&details, pJson["details"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&enabled, pJson["enabled"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&service_name, pJson["serviceName"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&log_level, pJson["log.level"], "OAIConfigNodePropertyDropDown", "OAIConfigNodePropertyDropDown");
    
    ::OpenAPI::setValue(&allowed_roots, pJson["allowed.roots"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
    ::OpenAPI::setValue(&request_authorization_strategy_target, pJson["requestAuthorizationStrategy.target"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&queue_provider_factory_target, pJson["queueProviderFactory.target"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&package_builder_target, pJson["packageBuilder.target"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&triggers_target, pJson["triggers.target"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&priority_queues, pJson["priorityQueues"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
}

QString
OAIOrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIOrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties::asJsonObject() {
    QJsonObject obj;
    if((name != nullptr) && (name->isSet())){
        toJsonValue(QString("name"), name, obj, QString("OAIConfigNodePropertyString"));
    }
    if((title != nullptr) && (title->isSet())){
        toJsonValue(QString("title"), title, obj, QString("OAIConfigNodePropertyString"));
    }
    if((details != nullptr) && (details->isSet())){
        toJsonValue(QString("details"), details, obj, QString("OAIConfigNodePropertyString"));
    }
    if((enabled != nullptr) && (enabled->isSet())){
        toJsonValue(QString("enabled"), enabled, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((service_name != nullptr) && (service_name->isSet())){
        toJsonValue(QString("serviceName"), service_name, obj, QString("OAIConfigNodePropertyString"));
    }
    if((log_level != nullptr) && (log_level->isSet())){
        toJsonValue(QString("log.level"), log_level, obj, QString("OAIConfigNodePropertyDropDown"));
    }
    if((allowed_roots != nullptr) && (allowed_roots->isSet())){
        toJsonValue(QString("allowed.roots"), allowed_roots, obj, QString("OAIConfigNodePropertyArray"));
    }
    if((request_authorization_strategy_target != nullptr) && (request_authorization_strategy_target->isSet())){
        toJsonValue(QString("requestAuthorizationStrategy.target"), request_authorization_strategy_target, obj, QString("OAIConfigNodePropertyString"));
    }
    if((queue_provider_factory_target != nullptr) && (queue_provider_factory_target->isSet())){
        toJsonValue(QString("queueProviderFactory.target"), queue_provider_factory_target, obj, QString("OAIConfigNodePropertyString"));
    }
    if((package_builder_target != nullptr) && (package_builder_target->isSet())){
        toJsonValue(QString("packageBuilder.target"), package_builder_target, obj, QString("OAIConfigNodePropertyString"));
    }
    if((triggers_target != nullptr) && (triggers_target->isSet())){
        toJsonValue(QString("triggers.target"), triggers_target, obj, QString("OAIConfigNodePropertyString"));
    }
    if((priority_queues != nullptr) && (priority_queues->isSet())){
        toJsonValue(QString("priorityQueues"), priority_queues, obj, QString("OAIConfigNodePropertyArray"));
    }

    return obj;
}

OAIConfigNodePropertyString*
OAIOrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties::getName() {
    return name;
}
void
OAIOrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties::setName(OAIConfigNodePropertyString* name) {
    this->name = name;
    this->m_name_isSet = true;
}

OAIConfigNodePropertyString*
OAIOrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties::getTitle() {
    return title;
}
void
OAIOrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties::setTitle(OAIConfigNodePropertyString* title) {
    this->title = title;
    this->m_title_isSet = true;
}

OAIConfigNodePropertyString*
OAIOrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties::getDetails() {
    return details;
}
void
OAIOrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties::setDetails(OAIConfigNodePropertyString* details) {
    this->details = details;
    this->m_details_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIOrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties::getEnabled() {
    return enabled;
}
void
OAIOrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties::setEnabled(OAIConfigNodePropertyBoolean* enabled) {
    this->enabled = enabled;
    this->m_enabled_isSet = true;
}

OAIConfigNodePropertyString*
OAIOrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties::getServiceName() {
    return service_name;
}
void
OAIOrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties::setServiceName(OAIConfigNodePropertyString* service_name) {
    this->service_name = service_name;
    this->m_service_name_isSet = true;
}

OAIConfigNodePropertyDropDown*
OAIOrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties::getLogLevel() {
    return log_level;
}
void
OAIOrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties::setLogLevel(OAIConfigNodePropertyDropDown* log_level) {
    this->log_level = log_level;
    this->m_log_level_isSet = true;
}

OAIConfigNodePropertyArray*
OAIOrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties::getAllowedRoots() {
    return allowed_roots;
}
void
OAIOrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties::setAllowedRoots(OAIConfigNodePropertyArray* allowed_roots) {
    this->allowed_roots = allowed_roots;
    this->m_allowed_roots_isSet = true;
}

OAIConfigNodePropertyString*
OAIOrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties::getRequestAuthorizationStrategyTarget() {
    return request_authorization_strategy_target;
}
void
OAIOrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties::setRequestAuthorizationStrategyTarget(OAIConfigNodePropertyString* request_authorization_strategy_target) {
    this->request_authorization_strategy_target = request_authorization_strategy_target;
    this->m_request_authorization_strategy_target_isSet = true;
}

OAIConfigNodePropertyString*
OAIOrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties::getQueueProviderFactoryTarget() {
    return queue_provider_factory_target;
}
void
OAIOrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties::setQueueProviderFactoryTarget(OAIConfigNodePropertyString* queue_provider_factory_target) {
    this->queue_provider_factory_target = queue_provider_factory_target;
    this->m_queue_provider_factory_target_isSet = true;
}

OAIConfigNodePropertyString*
OAIOrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties::getPackageBuilderTarget() {
    return package_builder_target;
}
void
OAIOrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties::setPackageBuilderTarget(OAIConfigNodePropertyString* package_builder_target) {
    this->package_builder_target = package_builder_target;
    this->m_package_builder_target_isSet = true;
}

OAIConfigNodePropertyString*
OAIOrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties::getTriggersTarget() {
    return triggers_target;
}
void
OAIOrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties::setTriggersTarget(OAIConfigNodePropertyString* triggers_target) {
    this->triggers_target = triggers_target;
    this->m_triggers_target_isSet = true;
}

OAIConfigNodePropertyArray*
OAIOrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties::getPriorityQueues() {
    return priority_queues;
}
void
OAIOrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties::setPriorityQueues(OAIConfigNodePropertyArray* priority_queues) {
    this->priority_queues = priority_queues;
    this->m_priority_queues_isSet = true;
}


bool
OAIOrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(name != nullptr && name->isSet()){ isObjectUpdated = true; break;}
        if(title != nullptr && title->isSet()){ isObjectUpdated = true; break;}
        if(details != nullptr && details->isSet()){ isObjectUpdated = true; break;}
        if(enabled != nullptr && enabled->isSet()){ isObjectUpdated = true; break;}
        if(service_name != nullptr && service_name->isSet()){ isObjectUpdated = true; break;}
        if(log_level != nullptr && log_level->isSet()){ isObjectUpdated = true; break;}
        if(allowed_roots != nullptr && allowed_roots->isSet()){ isObjectUpdated = true; break;}
        if(request_authorization_strategy_target != nullptr && request_authorization_strategy_target->isSet()){ isObjectUpdated = true; break;}
        if(queue_provider_factory_target != nullptr && queue_provider_factory_target->isSet()){ isObjectUpdated = true; break;}
        if(package_builder_target != nullptr && package_builder_target->isSet()){ isObjectUpdated = true; break;}
        if(triggers_target != nullptr && triggers_target->isSet()){ isObjectUpdated = true; break;}
        if(priority_queues != nullptr && priority_queues->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

