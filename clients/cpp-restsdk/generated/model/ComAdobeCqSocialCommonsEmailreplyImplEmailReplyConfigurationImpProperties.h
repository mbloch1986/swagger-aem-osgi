/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties_H_


#include "../ModelBase.h"

#include "ConfigNodePropertyBoolean.h"
#include "ConfigNodePropertyDropDown.h"
#include "ConfigNodePropertyInteger.h"
#include "ConfigNodePropertyString.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties
    : public ModelBase
{
public:
    ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties();
    virtual ~ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getEmailName() const;
    bool emailNameIsSet() const;
    void unsetEmail_name();
    void setEmailName(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getEmailCreatePostFromReply() const;
    bool emailCreatePostFromReplyIsSet() const;
    void unsetEmail_createPostFromReply();
    void setEmailCreatePostFromReply(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyDropDown> getEmailAddCommentIdTo() const;
    bool emailAddCommentIdToIsSet() const;
    void unsetEmail_addCommentIdTo();
    void setEmailAddCommentIdTo(std::shared_ptr<ConfigNodePropertyDropDown> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getEmailSubjectMaximumLength() const;
    bool emailSubjectMaximumLengthIsSet() const;
    void unsetEmail_subjectMaximumLength();
    void setEmailSubjectMaximumLength(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getEmailReplyToAddress() const;
    bool emailReplyToAddressIsSet() const;
    void unsetEmail_replyToAddress();
    void setEmailReplyToAddress(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getEmailReplyToDelimiter() const;
    bool emailReplyToDelimiterIsSet() const;
    void unsetEmail_replyToDelimiter();
    void setEmailReplyToDelimiter(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getEmailTrackerIdPrefixInSubject() const;
    bool emailTrackerIdPrefixInSubjectIsSet() const;
    void unsetEmail_trackerIdPrefixInSubject();
    void setEmailTrackerIdPrefixInSubject(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getEmailTrackerIdPrefixInBody() const;
    bool emailTrackerIdPrefixInBodyIsSet() const;
    void unsetEmail_trackerIdPrefixInBody();
    void setEmailTrackerIdPrefixInBody(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getEmailAsHTML() const;
    bool emailAsHTMLIsSet() const;
    void unsetEmail_asHTML();
    void setEmailAsHTML(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getEmailDefaultUserName() const;
    bool emailDefaultUserNameIsSet() const;
    void unsetEmail_defaultUserName();
    void setEmailDefaultUserName(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getEmailTemplatesRootPath() const;
    bool emailTemplatesRootPathIsSet() const;
    void unsetEmail_templates_rootPath();
    void setEmailTemplatesRootPath(std::shared_ptr<ConfigNodePropertyString> value);

protected:
    std::shared_ptr<ConfigNodePropertyString> m_Email_name;
    bool m_Email_nameIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Email_createPostFromReply;
    bool m_Email_createPostFromReplyIsSet;
    std::shared_ptr<ConfigNodePropertyDropDown> m_Email_addCommentIdTo;
    bool m_Email_addCommentIdToIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_Email_subjectMaximumLength;
    bool m_Email_subjectMaximumLengthIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Email_replyToAddress;
    bool m_Email_replyToAddressIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Email_replyToDelimiter;
    bool m_Email_replyToDelimiterIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Email_trackerIdPrefixInSubject;
    bool m_Email_trackerIdPrefixInSubjectIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Email_trackerIdPrefixInBody;
    bool m_Email_trackerIdPrefixInBodyIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Email_asHTML;
    bool m_Email_asHTMLIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Email_defaultUserName;
    bool m_Email_defaultUserNameIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Email_templates_rootPath;
    bool m_Email_templates_rootPathIsSet;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties_H_ */
