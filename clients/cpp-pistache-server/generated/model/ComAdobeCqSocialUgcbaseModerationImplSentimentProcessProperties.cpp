/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ComAdobeCqSocialUgcbaseModerationImplSentimentProcessProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComAdobeCqSocialUgcbaseModerationImplSentimentProcessProperties::ComAdobeCqSocialUgcbaseModerationImplSentimentProcessProperties()
{
    m_Watchwords_positiveIsSet = false;
    m_Watchwords_negativeIsSet = false;
    m_Watchwords_pathIsSet = false;
    m_Sentiment_pathIsSet = false;
    
}

ComAdobeCqSocialUgcbaseModerationImplSentimentProcessProperties::~ComAdobeCqSocialUgcbaseModerationImplSentimentProcessProperties()
{
}

void ComAdobeCqSocialUgcbaseModerationImplSentimentProcessProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json ComAdobeCqSocialUgcbaseModerationImplSentimentProcessProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_Watchwords_positiveIsSet)
    {
        val["watchwords.positive"] = ModelBase::toJson(m_Watchwords_positive);
    }
    if(m_Watchwords_negativeIsSet)
    {
        val["watchwords.negative"] = ModelBase::toJson(m_Watchwords_negative);
    }
    if(m_Watchwords_pathIsSet)
    {
        val["watchwords.path"] = ModelBase::toJson(m_Watchwords_path);
    }
    if(m_Sentiment_pathIsSet)
    {
        val["sentiment.path"] = ModelBase::toJson(m_Sentiment_path);
    }
    

    return val;
}

void ComAdobeCqSocialUgcbaseModerationImplSentimentProcessProperties::fromJson(nlohmann::json& val)
{
    if(val.find("watchwords.positive") != val.end())
    {
        if(!val["watchwords.positive"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["watchwords.positive"]);
            setWatchwordsPositive( newItem );
        }
        
    }
    if(val.find("watchwords.negative") != val.end())
    {
        if(!val["watchwords.negative"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["watchwords.negative"]);
            setWatchwordsNegative( newItem );
        }
        
    }
    if(val.find("watchwords.path") != val.end())
    {
        if(!val["watchwords.path"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["watchwords.path"]);
            setWatchwordsPath( newItem );
        }
        
    }
    if(val.find("sentiment.path") != val.end())
    {
        if(!val["sentiment.path"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["sentiment.path"]);
            setSentimentPath( newItem );
        }
        
    }
    
}


ConfigNodePropertyArray ComAdobeCqSocialUgcbaseModerationImplSentimentProcessProperties::getWatchwordsPositive() const
{
    return m_Watchwords_positive;
}
void ComAdobeCqSocialUgcbaseModerationImplSentimentProcessProperties::setWatchwordsPositive(ConfigNodePropertyArray const& value)
{
    m_Watchwords_positive = value;
    m_Watchwords_positiveIsSet = true;
}
bool ComAdobeCqSocialUgcbaseModerationImplSentimentProcessProperties::watchwordsPositiveIsSet() const
{
    return m_Watchwords_positiveIsSet;
}
void ComAdobeCqSocialUgcbaseModerationImplSentimentProcessProperties::unsetWatchwords_positive()
{
    m_Watchwords_positiveIsSet = false;
}
ConfigNodePropertyArray ComAdobeCqSocialUgcbaseModerationImplSentimentProcessProperties::getWatchwordsNegative() const
{
    return m_Watchwords_negative;
}
void ComAdobeCqSocialUgcbaseModerationImplSentimentProcessProperties::setWatchwordsNegative(ConfigNodePropertyArray const& value)
{
    m_Watchwords_negative = value;
    m_Watchwords_negativeIsSet = true;
}
bool ComAdobeCqSocialUgcbaseModerationImplSentimentProcessProperties::watchwordsNegativeIsSet() const
{
    return m_Watchwords_negativeIsSet;
}
void ComAdobeCqSocialUgcbaseModerationImplSentimentProcessProperties::unsetWatchwords_negative()
{
    m_Watchwords_negativeIsSet = false;
}
ConfigNodePropertyString ComAdobeCqSocialUgcbaseModerationImplSentimentProcessProperties::getWatchwordsPath() const
{
    return m_Watchwords_path;
}
void ComAdobeCqSocialUgcbaseModerationImplSentimentProcessProperties::setWatchwordsPath(ConfigNodePropertyString const& value)
{
    m_Watchwords_path = value;
    m_Watchwords_pathIsSet = true;
}
bool ComAdobeCqSocialUgcbaseModerationImplSentimentProcessProperties::watchwordsPathIsSet() const
{
    return m_Watchwords_pathIsSet;
}
void ComAdobeCqSocialUgcbaseModerationImplSentimentProcessProperties::unsetWatchwords_path()
{
    m_Watchwords_pathIsSet = false;
}
ConfigNodePropertyString ComAdobeCqSocialUgcbaseModerationImplSentimentProcessProperties::getSentimentPath() const
{
    return m_Sentiment_path;
}
void ComAdobeCqSocialUgcbaseModerationImplSentimentProcessProperties::setSentimentPath(ConfigNodePropertyString const& value)
{
    m_Sentiment_path = value;
    m_Sentiment_pathIsSet = true;
}
bool ComAdobeCqSocialUgcbaseModerationImplSentimentProcessProperties::sentimentPathIsSet() const
{
    return m_Sentiment_pathIsSet;
}
void ComAdobeCqSocialUgcbaseModerationImplSentimentProcessProperties::unsetSentiment_path()
{
    m_Sentiment_pathIsSet = false;
}

}
}
}
}

