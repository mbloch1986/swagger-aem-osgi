/*
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OAS-api/OAS-codegen.git
 * Do not edit the class manually.
 */

/**
 * OASOrgApacheJackrabbitOakSegmentStan
 */
public class OASOrgApacheJackrabbitOakSegmentStan implements OAS.MappedProperties {
    /**
     * Get orgApacheSlingInstallerConfigurationPersist
     * @return orgApacheSlingInstallerConfigurationPersist
     */
    public OASConfigNodePropertyBoolean orgApacheSlingInstallerConfigurationPersist { get; set; }

    /**
     * Get mode
     * @return mode
     */
    public OASConfigNodePropertyDropDown mode { get; set; }

    /**
     * Get port
     * @return port
     */
    public OASConfigNodePropertyInteger port { get; set; }

    /**
     * Get primaryHost
     * @return primaryHost
     */
    public OASConfigNodePropertyString primaryHost { get; set; }

    /**
     * Get interval
     * @return interval
     */
    public OASConfigNodePropertyInteger interval { get; set; }

    /**
     * Get primaryAllowedClientIpRanges
     * @return primaryAllowedClientIpRanges
     */
    public OASConfigNodePropertyArray primaryAllowedClientIpRanges { get; set; }

    /**
     * Get secure
     * @return secure
     */
    public OASConfigNodePropertyBoolean secure { get; set; }

    /**
     * Get standbyReadtimeout
     * @return standbyReadtimeout
     */
    public OASConfigNodePropertyInteger standbyReadtimeout { get; set; }

    /**
     * Get standbyAutoclean
     * @return standbyAutoclean
     */
    public OASConfigNodePropertyBoolean standbyAutoclean { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'org.apache.sling.installer.configuration.persist' => 'orgApacheSlingInstallerConfigurationPersist',
        'primary.host' => 'primaryHost',
        'primary.allowed-client-ip-ranges' => 'primaryAllowedClientIpRanges',
        'standby.readtimeout' => 'standbyReadtimeout',
        'standby.autoclean' => 'standbyAutoclean'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public static OASOrgApacheJackrabbitOakSegmentStan getExample() {
        OASOrgApacheJackrabbitOakSegmentStan orgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties = new OASOrgApacheJackrabbitOakSegmentStan();
          orgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties.orgApacheSlingInstallerConfigurationPersist = OASConfigNodePropertyBoolean.getExample();
          orgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties.mode = OASConfigNodePropertyDropDown.getExample();
          orgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties.port = OASConfigNodePropertyInteger.getExample();
          orgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties.primaryHost = OASConfigNodePropertyString.getExample();
          orgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties.interval = OASConfigNodePropertyInteger.getExample();
          orgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties.primaryAllowedClientIpRanges = OASConfigNodePropertyArray.getExample();
          orgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties.secure = OASConfigNodePropertyBoolean.getExample();
          orgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties.standbyReadtimeout = OASConfigNodePropertyInteger.getExample();
          orgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties.standbyAutoclean = OASConfigNodePropertyBoolean.getExample();
        return orgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASOrgApacheJackrabbitOakSegmentStan) {           
            OASOrgApacheJackrabbitOakSegmentStan orgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties = (OASOrgApacheJackrabbitOakSegmentStan) obj;
            return this.orgApacheSlingInstallerConfigurationPersist == orgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties.orgApacheSlingInstallerConfigurationPersist
                && this.mode == orgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties.mode
                && this.port == orgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties.port
                && this.primaryHost == orgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties.primaryHost
                && this.interval == orgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties.interval
                && this.primaryAllowedClientIpRanges == orgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties.primaryAllowedClientIpRanges
                && this.secure == orgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties.secure
                && this.standbyReadtimeout == orgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties.standbyReadtimeout
                && this.standbyAutoclean == orgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceProperties.standbyAutoclean;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (orgApacheSlingInstallerConfigurationPersist == null ? 0 : System.hashCode(orgApacheSlingInstallerConfigurationPersist));
        hashCode = (17 * hashCode) + (mode == null ? 0 : System.hashCode(mode));
        hashCode = (17 * hashCode) + (port == null ? 0 : System.hashCode(port));
        hashCode = (17 * hashCode) + (primaryHost == null ? 0 : System.hashCode(primaryHost));
        hashCode = (17 * hashCode) + (interval == null ? 0 : System.hashCode(interval));
        hashCode = (17 * hashCode) + (primaryAllowedClientIpRanges == null ? 0 : System.hashCode(primaryAllowedClientIpRanges));
        hashCode = (17 * hashCode) + (secure == null ? 0 : System.hashCode(secure));
        hashCode = (17 * hashCode) + (standbyReadtimeout == null ? 0 : System.hashCode(standbyReadtimeout));
        hashCode = (17 * hashCode) + (standbyAutoclean == null ? 0 : System.hashCode(standbyAutoclean));
        return hashCode;
    }
}

