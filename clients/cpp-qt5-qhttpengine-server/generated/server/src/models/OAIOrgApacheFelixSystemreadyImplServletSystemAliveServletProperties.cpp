/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIOrgApacheFelixSystemreadyImplServletSystemAliveServletProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIOrgApacheFelixSystemreadyImplServletSystemAliveServletProperties::OAIOrgApacheFelixSystemreadyImplServletSystemAliveServletProperties(QString json) {
    this->fromJson(json);
}

OAIOrgApacheFelixSystemreadyImplServletSystemAliveServletProperties::OAIOrgApacheFelixSystemreadyImplServletSystemAliveServletProperties() {
    this->init();
}

OAIOrgApacheFelixSystemreadyImplServletSystemAliveServletProperties::~OAIOrgApacheFelixSystemreadyImplServletSystemAliveServletProperties() {
    
}

void
OAIOrgApacheFelixSystemreadyImplServletSystemAliveServletProperties::init() {
    m_osgi_http_whiteboard_servlet_pattern_isSet = false;
    m_osgi_http_whiteboard_context_select_isSet = false;
}

void
OAIOrgApacheFelixSystemreadyImplServletSystemAliveServletProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIOrgApacheFelixSystemreadyImplServletSystemAliveServletProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(osgi_http_whiteboard_servlet_pattern, json[QString("osgi.http.whiteboard.servlet.pattern")]);
    
    ::OpenAPI::fromJsonValue(osgi_http_whiteboard_context_select, json[QString("osgi.http.whiteboard.context.select")]);
    
}

QString
OAIOrgApacheFelixSystemreadyImplServletSystemAliveServletProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIOrgApacheFelixSystemreadyImplServletSystemAliveServletProperties::asJsonObject() const {
    QJsonObject obj;
	if(osgi_http_whiteboard_servlet_pattern.isSet()){
        obj.insert(QString("osgi.http.whiteboard.servlet.pattern"), ::OpenAPI::toJsonValue(osgi_http_whiteboard_servlet_pattern));
    }
	if(osgi_http_whiteboard_context_select.isSet()){
        obj.insert(QString("osgi.http.whiteboard.context.select"), ::OpenAPI::toJsonValue(osgi_http_whiteboard_context_select));
    }
    return obj;
}

OAIConfigNodePropertyString
OAIOrgApacheFelixSystemreadyImplServletSystemAliveServletProperties::getOsgiHttpWhiteboardServletPattern() const {
    return osgi_http_whiteboard_servlet_pattern;
}
void
OAIOrgApacheFelixSystemreadyImplServletSystemAliveServletProperties::setOsgiHttpWhiteboardServletPattern(const OAIConfigNodePropertyString &osgi_http_whiteboard_servlet_pattern) {
    this->osgi_http_whiteboard_servlet_pattern = osgi_http_whiteboard_servlet_pattern;
    this->m_osgi_http_whiteboard_servlet_pattern_isSet = true;
}

OAIConfigNodePropertyString
OAIOrgApacheFelixSystemreadyImplServletSystemAliveServletProperties::getOsgiHttpWhiteboardContextSelect() const {
    return osgi_http_whiteboard_context_select;
}
void
OAIOrgApacheFelixSystemreadyImplServletSystemAliveServletProperties::setOsgiHttpWhiteboardContextSelect(const OAIConfigNodePropertyString &osgi_http_whiteboard_context_select) {
    this->osgi_http_whiteboard_context_select = osgi_http_whiteboard_context_select;
    this->m_osgi_http_whiteboard_context_select_isSet = true;
}


bool
OAIOrgApacheFelixSystemreadyImplServletSystemAliveServletProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(osgi_http_whiteboard_servlet_pattern.isSet()){ isObjectUpdated = true; break;}
    
        if(osgi_http_whiteboard_context_select.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

