/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ComAdobeCqScreensDeviceImplDeviceServiceProperties.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_ComAdobeCqScreensDeviceImplDeviceServiceProperties_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_ComAdobeCqScreensDeviceImplDeviceServiceProperties_H_


#include "../ModelBase.h"

#include "ConfigNodePropertyInteger.h"
#include "ConfigNodePropertyString.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  ComAdobeCqScreensDeviceImplDeviceServiceProperties
    : public ModelBase
{
public:
    ComAdobeCqScreensDeviceImplDeviceServiceProperties();
    virtual ~ComAdobeCqScreensDeviceImplDeviceServiceProperties();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// ComAdobeCqScreensDeviceImplDeviceServiceProperties members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getComAdobeAemScreensPlayerPingfrequency() const;
    bool comAdobeAemScreensPlayerPingfrequencyIsSet() const;
    void unsetCom_adobe_aem_screens_player_pingfrequency();
    void setComAdobeAemScreensPlayerPingfrequency(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getComAdobeAemScreensDevicePaswordSpecialchars() const;
    bool comAdobeAemScreensDevicePaswordSpecialcharsIsSet() const;
    void unsetCom_adobe_aem_screens_device_pasword_specialchars();
    void setComAdobeAemScreensDevicePaswordSpecialchars(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getComAdobeAemScreensDevicePaswordMinlowercasechars() const;
    bool comAdobeAemScreensDevicePaswordMinlowercasecharsIsSet() const;
    void unsetCom_adobe_aem_screens_device_pasword_minlowercasechars();
    void setComAdobeAemScreensDevicePaswordMinlowercasechars(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getComAdobeAemScreensDevicePaswordMinuppercasechars() const;
    bool comAdobeAemScreensDevicePaswordMinuppercasecharsIsSet() const;
    void unsetCom_adobe_aem_screens_device_pasword_minuppercasechars();
    void setComAdobeAemScreensDevicePaswordMinuppercasechars(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getComAdobeAemScreensDevicePaswordMinnumberchars() const;
    bool comAdobeAemScreensDevicePaswordMinnumbercharsIsSet() const;
    void unsetCom_adobe_aem_screens_device_pasword_minnumberchars();
    void setComAdobeAemScreensDevicePaswordMinnumberchars(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getComAdobeAemScreensDevicePaswordMinspecialchars() const;
    bool comAdobeAemScreensDevicePaswordMinspecialcharsIsSet() const;
    void unsetCom_adobe_aem_screens_device_pasword_minspecialchars();
    void setComAdobeAemScreensDevicePaswordMinspecialchars(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getComAdobeAemScreensDevicePaswordMinlength() const;
    bool comAdobeAemScreensDevicePaswordMinlengthIsSet() const;
    void unsetCom_adobe_aem_screens_device_pasword_minlength();
    void setComAdobeAemScreensDevicePaswordMinlength(std::shared_ptr<ConfigNodePropertyInteger> value);

protected:
    std::shared_ptr<ConfigNodePropertyInteger> m_Com_adobe_aem_screens_player_pingfrequency;
    bool m_Com_adobe_aem_screens_player_pingfrequencyIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Com_adobe_aem_screens_device_pasword_specialchars;
    bool m_Com_adobe_aem_screens_device_pasword_specialcharsIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_Com_adobe_aem_screens_device_pasword_minlowercasechars;
    bool m_Com_adobe_aem_screens_device_pasword_minlowercasecharsIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_Com_adobe_aem_screens_device_pasword_minuppercasechars;
    bool m_Com_adobe_aem_screens_device_pasword_minuppercasecharsIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_Com_adobe_aem_screens_device_pasword_minnumberchars;
    bool m_Com_adobe_aem_screens_device_pasword_minnumbercharsIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_Com_adobe_aem_screens_device_pasword_minspecialchars;
    bool m_Com_adobe_aem_screens_device_pasword_minspecialcharsIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_Com_adobe_aem_screens_device_pasword_minlength;
    bool m_Com_adobe_aem_screens_device_pasword_minlengthIsSet;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_ComAdobeCqScreensDeviceImplDeviceServiceProperties_H_ */
