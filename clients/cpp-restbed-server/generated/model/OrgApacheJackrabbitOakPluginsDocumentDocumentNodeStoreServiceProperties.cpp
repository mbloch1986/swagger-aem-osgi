/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties.h"

#include <string>
#include <sstream>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties()
{
    
}

OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::~OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties()
{
}

std::string OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::toJsonString()
{
	std::stringstream ss;
	ptree pt;
	write_json(ss, pt, false);
	return ss.str();
}

void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getMongouri() const
{
    return m_Mongouri;
}
void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setMongouri(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Mongouri = value;
}
std::shared_ptr<ConfigNodePropertyString> OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getDb() const
{
    return m_Db;
}
void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setDb(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Db = value;
}
std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getSocketKeepAlive() const
{
    return m_SocketKeepAlive;
}
void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setSocketKeepAlive(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_SocketKeepAlive = value;
}
std::shared_ptr<ConfigNodePropertyInteger> OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getCache() const
{
    return m_Cache;
}
void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setCache(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Cache = value;
}
std::shared_ptr<ConfigNodePropertyInteger> OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getNodeCachePercentage() const
{
    return m_NodeCachePercentage;
}
void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setNodeCachePercentage(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_NodeCachePercentage = value;
}
std::shared_ptr<ConfigNodePropertyInteger> OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getPrevDocCachePercentage() const
{
    return m_PrevDocCachePercentage;
}
void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setPrevDocCachePercentage(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_PrevDocCachePercentage = value;
}
std::shared_ptr<ConfigNodePropertyInteger> OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getChildrenCachePercentage() const
{
    return m_ChildrenCachePercentage;
}
void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setChildrenCachePercentage(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_ChildrenCachePercentage = value;
}
std::shared_ptr<ConfigNodePropertyInteger> OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getDiffCachePercentage() const
{
    return m_DiffCachePercentage;
}
void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setDiffCachePercentage(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_DiffCachePercentage = value;
}
std::shared_ptr<ConfigNodePropertyInteger> OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getCacheSegmentCount() const
{
    return m_CacheSegmentCount;
}
void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setCacheSegmentCount(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_CacheSegmentCount = value;
}
std::shared_ptr<ConfigNodePropertyInteger> OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getCacheStackMoveDistance() const
{
    return m_CacheStackMoveDistance;
}
void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setCacheStackMoveDistance(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_CacheStackMoveDistance = value;
}
std::shared_ptr<ConfigNodePropertyInteger> OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getBlobCacheSize() const
{
    return m_BlobCacheSize;
}
void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setBlobCacheSize(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_BlobCacheSize = value;
}
std::shared_ptr<ConfigNodePropertyString> OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getPersistentCache() const
{
    return m_PersistentCache;
}
void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setPersistentCache(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_PersistentCache = value;
}
std::shared_ptr<ConfigNodePropertyString> OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getJournalCache() const
{
    return m_JournalCache;
}
void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setJournalCache(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_JournalCache = value;
}
std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getCustomBlobStore() const
{
    return m_CustomBlobStore;
}
void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setCustomBlobStore(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_CustomBlobStore = value;
}
std::shared_ptr<ConfigNodePropertyInteger> OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getJournalGCInterval() const
{
    return m_JournalGCInterval;
}
void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setJournalGCInterval(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_JournalGCInterval = value;
}
std::shared_ptr<ConfigNodePropertyInteger> OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getJournalGCMaxAge() const
{
    return m_JournalGCMaxAge;
}
void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setJournalGCMaxAge(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_JournalGCMaxAge = value;
}
std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getPrefetchExternalChanges() const
{
    return m_PrefetchExternalChanges;
}
void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setPrefetchExternalChanges(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_PrefetchExternalChanges = value;
}
std::shared_ptr<ConfigNodePropertyString> OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getRole() const
{
    return m_Role;
}
void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setRole(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Role = value;
}
std::shared_ptr<ConfigNodePropertyInteger> OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getVersionGcMaxAgeInSecs() const
{
    return m_VersionGcMaxAgeInSecs;
}
void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setVersionGcMaxAgeInSecs(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_VersionGcMaxAgeInSecs = value;
}
std::shared_ptr<ConfigNodePropertyString> OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getVersionGCExpression() const
{
    return m_VersionGCExpression;
}
void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setVersionGCExpression(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_VersionGCExpression = value;
}
std::shared_ptr<ConfigNodePropertyInteger> OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getVersionGCTimeLimitInSecs() const
{
    return m_VersionGCTimeLimitInSecs;
}
void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setVersionGCTimeLimitInSecs(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_VersionGCTimeLimitInSecs = value;
}
std::shared_ptr<ConfigNodePropertyInteger> OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getBlobGcMaxAgeInSecs() const
{
    return m_BlobGcMaxAgeInSecs;
}
void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setBlobGcMaxAgeInSecs(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_BlobGcMaxAgeInSecs = value;
}
std::shared_ptr<ConfigNodePropertyInteger> OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getBlobTrackSnapshotIntervalInSecs() const
{
    return m_BlobTrackSnapshotIntervalInSecs;
}
void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setBlobTrackSnapshotIntervalInSecs(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_BlobTrackSnapshotIntervalInSecs = value;
}
std::shared_ptr<ConfigNodePropertyString> OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getRepositoryHome() const
{
    return m_Repository_home;
}
void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setRepositoryHome(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Repository_home = value;
}
std::shared_ptr<ConfigNodePropertyInteger> OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getMaxReplicationLagInSecs() const
{
    return m_MaxReplicationLagInSecs;
}
void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setMaxReplicationLagInSecs(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_MaxReplicationLagInSecs = value;
}
std::shared_ptr<ConfigNodePropertyDropDown> OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getDocumentStoreType() const
{
    return m_DocumentStoreType;
}
void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setDocumentStoreType(std::shared_ptr<ConfigNodePropertyDropDown> value)
{
    m_DocumentStoreType = value;
}
std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getBundlingDisabled() const
{
    return m_BundlingDisabled;
}
void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setBundlingDisabled(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_BundlingDisabled = value;
}
std::shared_ptr<ConfigNodePropertyInteger> OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getUpdateLimit() const
{
    return m_UpdateLimit;
}
void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setUpdateLimit(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_UpdateLimit = value;
}
std::shared_ptr<ConfigNodePropertyArray> OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getPersistentCacheIncludes() const
{
    return m_PersistentCacheIncludes;
}
void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setPersistentCacheIncludes(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_PersistentCacheIncludes = value;
}
std::shared_ptr<ConfigNodePropertyDropDown> OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getLeaseCheckMode() const
{
    return m_LeaseCheckMode;
}
void OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setLeaseCheckMode(std::shared_ptr<ConfigNodePropertyDropDown> value)
{
    m_LeaseCheckMode = value;
}

}
}
}
}

