/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComAdobeGraniteLicenseImplLicenseCheckFilterProperties {
  #[serde(rename = "checkInternval")]
  check_internval: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "excludeIds")]
  exclude_ids: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "encryptPing")]
  encrypt_ping: Option<::models::ConfigNodePropertyBoolean>
}

impl ComAdobeGraniteLicenseImplLicenseCheckFilterProperties {
  pub fn new() -> ComAdobeGraniteLicenseImplLicenseCheckFilterProperties {
    ComAdobeGraniteLicenseImplLicenseCheckFilterProperties {
      check_internval: None,
      exclude_ids: None,
      encrypt_ping: None
    }
  }

  pub fn set_check_internval(&mut self, check_internval: ::models::ConfigNodePropertyInteger) {
    self.check_internval = Some(check_internval);
  }

  pub fn with_check_internval(mut self, check_internval: ::models::ConfigNodePropertyInteger) -> ComAdobeGraniteLicenseImplLicenseCheckFilterProperties {
    self.check_internval = Some(check_internval);
    self
  }

  pub fn check_internval(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.check_internval.as_ref()
  }

  pub fn reset_check_internval(&mut self) {
    self.check_internval = None;
  }

  pub fn set_exclude_ids(&mut self, exclude_ids: ::models::ConfigNodePropertyArray) {
    self.exclude_ids = Some(exclude_ids);
  }

  pub fn with_exclude_ids(mut self, exclude_ids: ::models::ConfigNodePropertyArray) -> ComAdobeGraniteLicenseImplLicenseCheckFilterProperties {
    self.exclude_ids = Some(exclude_ids);
    self
  }

  pub fn exclude_ids(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.exclude_ids.as_ref()
  }

  pub fn reset_exclude_ids(&mut self) {
    self.exclude_ids = None;
  }

  pub fn set_encrypt_ping(&mut self, encrypt_ping: ::models::ConfigNodePropertyBoolean) {
    self.encrypt_ping = Some(encrypt_ping);
  }

  pub fn with_encrypt_ping(mut self, encrypt_ping: ::models::ConfigNodePropertyBoolean) -> ComAdobeGraniteLicenseImplLicenseCheckFilterProperties {
    self.encrypt_ping = Some(encrypt_ping);
    self
  }

  pub fn encrypt_ping(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.encrypt_ping.as_ref()
  }

  pub fn reset_encrypt_ping(&mut self) {
    self.encrypt_ping = None;
  }

}



