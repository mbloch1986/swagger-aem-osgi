/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ComAdobeGraniteThreaddumpThreadDumpCollectorProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComAdobeGraniteThreaddumpThreadDumpCollectorProperties::ComAdobeGraniteThreaddumpThreadDumpCollectorProperties()
{
    m_Scheduler_periodIsSet = false;
    m_Scheduler_runOnIsSet = false;
    m_Granite_threaddump_enabledIsSet = false;
    m_Granite_threaddump_dumpsPerFileIsSet = false;
    m_Granite_threaddump_enableGzipCompressionIsSet = false;
    m_Granite_threaddump_enableDirectoriesCompressionIsSet = false;
    m_Granite_threaddump_enableJStackIsSet = false;
    m_Granite_threaddump_maxBackupDaysIsSet = false;
    m_Granite_threaddump_backupCleanTriggerIsSet = false;
    
}

ComAdobeGraniteThreaddumpThreadDumpCollectorProperties::~ComAdobeGraniteThreaddumpThreadDumpCollectorProperties()
{
}

void ComAdobeGraniteThreaddumpThreadDumpCollectorProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json ComAdobeGraniteThreaddumpThreadDumpCollectorProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_Scheduler_periodIsSet)
    {
        val["scheduler.period"] = ModelBase::toJson(m_Scheduler_period);
    }
    if(m_Scheduler_runOnIsSet)
    {
        val["scheduler.runOn"] = ModelBase::toJson(m_Scheduler_runOn);
    }
    if(m_Granite_threaddump_enabledIsSet)
    {
        val["granite.threaddump.enabled"] = ModelBase::toJson(m_Granite_threaddump_enabled);
    }
    if(m_Granite_threaddump_dumpsPerFileIsSet)
    {
        val["granite.threaddump.dumpsPerFile"] = ModelBase::toJson(m_Granite_threaddump_dumpsPerFile);
    }
    if(m_Granite_threaddump_enableGzipCompressionIsSet)
    {
        val["granite.threaddump.enableGzipCompression"] = ModelBase::toJson(m_Granite_threaddump_enableGzipCompression);
    }
    if(m_Granite_threaddump_enableDirectoriesCompressionIsSet)
    {
        val["granite.threaddump.enableDirectoriesCompression"] = ModelBase::toJson(m_Granite_threaddump_enableDirectoriesCompression);
    }
    if(m_Granite_threaddump_enableJStackIsSet)
    {
        val["granite.threaddump.enableJStack"] = ModelBase::toJson(m_Granite_threaddump_enableJStack);
    }
    if(m_Granite_threaddump_maxBackupDaysIsSet)
    {
        val["granite.threaddump.maxBackupDays"] = ModelBase::toJson(m_Granite_threaddump_maxBackupDays);
    }
    if(m_Granite_threaddump_backupCleanTriggerIsSet)
    {
        val["granite.threaddump.backupCleanTrigger"] = ModelBase::toJson(m_Granite_threaddump_backupCleanTrigger);
    }
    

    return val;
}

void ComAdobeGraniteThreaddumpThreadDumpCollectorProperties::fromJson(nlohmann::json& val)
{
    if(val.find("scheduler.period") != val.end())
    {
        if(!val["scheduler.period"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["scheduler.period"]);
            setSchedulerPeriod( newItem );
        }
        
    }
    if(val.find("scheduler.runOn") != val.end())
    {
        if(!val["scheduler.runOn"].is_null())
        {
            ConfigNodePropertyDropDown newItem;
            newItem.fromJson(val["scheduler.runOn"]);
            setSchedulerRunOn( newItem );
        }
        
    }
    if(val.find("granite.threaddump.enabled") != val.end())
    {
        if(!val["granite.threaddump.enabled"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["granite.threaddump.enabled"]);
            setGraniteThreaddumpEnabled( newItem );
        }
        
    }
    if(val.find("granite.threaddump.dumpsPerFile") != val.end())
    {
        if(!val["granite.threaddump.dumpsPerFile"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["granite.threaddump.dumpsPerFile"]);
            setGraniteThreaddumpDumpsPerFile( newItem );
        }
        
    }
    if(val.find("granite.threaddump.enableGzipCompression") != val.end())
    {
        if(!val["granite.threaddump.enableGzipCompression"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["granite.threaddump.enableGzipCompression"]);
            setGraniteThreaddumpEnableGzipCompression( newItem );
        }
        
    }
    if(val.find("granite.threaddump.enableDirectoriesCompression") != val.end())
    {
        if(!val["granite.threaddump.enableDirectoriesCompression"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["granite.threaddump.enableDirectoriesCompression"]);
            setGraniteThreaddumpEnableDirectoriesCompression( newItem );
        }
        
    }
    if(val.find("granite.threaddump.enableJStack") != val.end())
    {
        if(!val["granite.threaddump.enableJStack"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["granite.threaddump.enableJStack"]);
            setGraniteThreaddumpEnableJStack( newItem );
        }
        
    }
    if(val.find("granite.threaddump.maxBackupDays") != val.end())
    {
        if(!val["granite.threaddump.maxBackupDays"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["granite.threaddump.maxBackupDays"]);
            setGraniteThreaddumpMaxBackupDays( newItem );
        }
        
    }
    if(val.find("granite.threaddump.backupCleanTrigger") != val.end())
    {
        if(!val["granite.threaddump.backupCleanTrigger"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["granite.threaddump.backupCleanTrigger"]);
            setGraniteThreaddumpBackupCleanTrigger( newItem );
        }
        
    }
    
}


ConfigNodePropertyInteger ComAdobeGraniteThreaddumpThreadDumpCollectorProperties::getSchedulerPeriod() const
{
    return m_Scheduler_period;
}
void ComAdobeGraniteThreaddumpThreadDumpCollectorProperties::setSchedulerPeriod(ConfigNodePropertyInteger const& value)
{
    m_Scheduler_period = value;
    m_Scheduler_periodIsSet = true;
}
bool ComAdobeGraniteThreaddumpThreadDumpCollectorProperties::schedulerPeriodIsSet() const
{
    return m_Scheduler_periodIsSet;
}
void ComAdobeGraniteThreaddumpThreadDumpCollectorProperties::unsetScheduler_period()
{
    m_Scheduler_periodIsSet = false;
}
ConfigNodePropertyDropDown ComAdobeGraniteThreaddumpThreadDumpCollectorProperties::getSchedulerRunOn() const
{
    return m_Scheduler_runOn;
}
void ComAdobeGraniteThreaddumpThreadDumpCollectorProperties::setSchedulerRunOn(ConfigNodePropertyDropDown const& value)
{
    m_Scheduler_runOn = value;
    m_Scheduler_runOnIsSet = true;
}
bool ComAdobeGraniteThreaddumpThreadDumpCollectorProperties::schedulerRunOnIsSet() const
{
    return m_Scheduler_runOnIsSet;
}
void ComAdobeGraniteThreaddumpThreadDumpCollectorProperties::unsetScheduler_runOn()
{
    m_Scheduler_runOnIsSet = false;
}
ConfigNodePropertyBoolean ComAdobeGraniteThreaddumpThreadDumpCollectorProperties::getGraniteThreaddumpEnabled() const
{
    return m_Granite_threaddump_enabled;
}
void ComAdobeGraniteThreaddumpThreadDumpCollectorProperties::setGraniteThreaddumpEnabled(ConfigNodePropertyBoolean const& value)
{
    m_Granite_threaddump_enabled = value;
    m_Granite_threaddump_enabledIsSet = true;
}
bool ComAdobeGraniteThreaddumpThreadDumpCollectorProperties::graniteThreaddumpEnabledIsSet() const
{
    return m_Granite_threaddump_enabledIsSet;
}
void ComAdobeGraniteThreaddumpThreadDumpCollectorProperties::unsetGranite_threaddump_enabled()
{
    m_Granite_threaddump_enabledIsSet = false;
}
ConfigNodePropertyInteger ComAdobeGraniteThreaddumpThreadDumpCollectorProperties::getGraniteThreaddumpDumpsPerFile() const
{
    return m_Granite_threaddump_dumpsPerFile;
}
void ComAdobeGraniteThreaddumpThreadDumpCollectorProperties::setGraniteThreaddumpDumpsPerFile(ConfigNodePropertyInteger const& value)
{
    m_Granite_threaddump_dumpsPerFile = value;
    m_Granite_threaddump_dumpsPerFileIsSet = true;
}
bool ComAdobeGraniteThreaddumpThreadDumpCollectorProperties::graniteThreaddumpDumpsPerFileIsSet() const
{
    return m_Granite_threaddump_dumpsPerFileIsSet;
}
void ComAdobeGraniteThreaddumpThreadDumpCollectorProperties::unsetGranite_threaddump_dumpsPerFile()
{
    m_Granite_threaddump_dumpsPerFileIsSet = false;
}
ConfigNodePropertyBoolean ComAdobeGraniteThreaddumpThreadDumpCollectorProperties::getGraniteThreaddumpEnableGzipCompression() const
{
    return m_Granite_threaddump_enableGzipCompression;
}
void ComAdobeGraniteThreaddumpThreadDumpCollectorProperties::setGraniteThreaddumpEnableGzipCompression(ConfigNodePropertyBoolean const& value)
{
    m_Granite_threaddump_enableGzipCompression = value;
    m_Granite_threaddump_enableGzipCompressionIsSet = true;
}
bool ComAdobeGraniteThreaddumpThreadDumpCollectorProperties::graniteThreaddumpEnableGzipCompressionIsSet() const
{
    return m_Granite_threaddump_enableGzipCompressionIsSet;
}
void ComAdobeGraniteThreaddumpThreadDumpCollectorProperties::unsetGranite_threaddump_enableGzipCompression()
{
    m_Granite_threaddump_enableGzipCompressionIsSet = false;
}
ConfigNodePropertyBoolean ComAdobeGraniteThreaddumpThreadDumpCollectorProperties::getGraniteThreaddumpEnableDirectoriesCompression() const
{
    return m_Granite_threaddump_enableDirectoriesCompression;
}
void ComAdobeGraniteThreaddumpThreadDumpCollectorProperties::setGraniteThreaddumpEnableDirectoriesCompression(ConfigNodePropertyBoolean const& value)
{
    m_Granite_threaddump_enableDirectoriesCompression = value;
    m_Granite_threaddump_enableDirectoriesCompressionIsSet = true;
}
bool ComAdobeGraniteThreaddumpThreadDumpCollectorProperties::graniteThreaddumpEnableDirectoriesCompressionIsSet() const
{
    return m_Granite_threaddump_enableDirectoriesCompressionIsSet;
}
void ComAdobeGraniteThreaddumpThreadDumpCollectorProperties::unsetGranite_threaddump_enableDirectoriesCompression()
{
    m_Granite_threaddump_enableDirectoriesCompressionIsSet = false;
}
ConfigNodePropertyBoolean ComAdobeGraniteThreaddumpThreadDumpCollectorProperties::getGraniteThreaddumpEnableJStack() const
{
    return m_Granite_threaddump_enableJStack;
}
void ComAdobeGraniteThreaddumpThreadDumpCollectorProperties::setGraniteThreaddumpEnableJStack(ConfigNodePropertyBoolean const& value)
{
    m_Granite_threaddump_enableJStack = value;
    m_Granite_threaddump_enableJStackIsSet = true;
}
bool ComAdobeGraniteThreaddumpThreadDumpCollectorProperties::graniteThreaddumpEnableJStackIsSet() const
{
    return m_Granite_threaddump_enableJStackIsSet;
}
void ComAdobeGraniteThreaddumpThreadDumpCollectorProperties::unsetGranite_threaddump_enableJStack()
{
    m_Granite_threaddump_enableJStackIsSet = false;
}
ConfigNodePropertyInteger ComAdobeGraniteThreaddumpThreadDumpCollectorProperties::getGraniteThreaddumpMaxBackupDays() const
{
    return m_Granite_threaddump_maxBackupDays;
}
void ComAdobeGraniteThreaddumpThreadDumpCollectorProperties::setGraniteThreaddumpMaxBackupDays(ConfigNodePropertyInteger const& value)
{
    m_Granite_threaddump_maxBackupDays = value;
    m_Granite_threaddump_maxBackupDaysIsSet = true;
}
bool ComAdobeGraniteThreaddumpThreadDumpCollectorProperties::graniteThreaddumpMaxBackupDaysIsSet() const
{
    return m_Granite_threaddump_maxBackupDaysIsSet;
}
void ComAdobeGraniteThreaddumpThreadDumpCollectorProperties::unsetGranite_threaddump_maxBackupDays()
{
    m_Granite_threaddump_maxBackupDaysIsSet = false;
}
ConfigNodePropertyString ComAdobeGraniteThreaddumpThreadDumpCollectorProperties::getGraniteThreaddumpBackupCleanTrigger() const
{
    return m_Granite_threaddump_backupCleanTrigger;
}
void ComAdobeGraniteThreaddumpThreadDumpCollectorProperties::setGraniteThreaddumpBackupCleanTrigger(ConfigNodePropertyString const& value)
{
    m_Granite_threaddump_backupCleanTrigger = value;
    m_Granite_threaddump_backupCleanTriggerIsSet = true;
}
bool ComAdobeGraniteThreaddumpThreadDumpCollectorProperties::graniteThreaddumpBackupCleanTriggerIsSet() const
{
    return m_Granite_threaddump_backupCleanTriggerIsSet;
}
void ComAdobeGraniteThreaddumpThreadDumpCollectorProperties::unsetGranite_threaddump_backupCleanTrigger()
{
    m_Granite_threaddump_backupCleanTriggerIsSet = false;
}

}
}
}
}

