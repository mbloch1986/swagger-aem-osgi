/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskProperties.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskProperties_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskProperties_H_


#include "../ModelBase.h"

#include "ConfigNodePropertyBoolean.h"
#include "ConfigNodePropertyInteger.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskProperties
    : public ModelBase
{
public:
    ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskProperties();
    virtual ~ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskProperties();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskProperties members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getPurgeCompleted() const;
    bool purgeCompletedIsSet() const;
    void unsetPurgeCompleted();
    void setPurgeCompleted(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getCompletedAge() const;
    bool completedAgeIsSet() const;
    void unsetCompletedAge();
    void setCompletedAge(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getPurgeActive() const;
    bool purgeActiveIsSet() const;
    void unsetPurgeActive();
    void setPurgeActive(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getActiveAge() const;
    bool activeAgeIsSet() const;
    void unsetActiveAge();
    void setActiveAge(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getSaveThreshold() const;
    bool saveThresholdIsSet() const;
    void unsetSaveThreshold();
    void setSaveThreshold(std::shared_ptr<ConfigNodePropertyInteger> value);

protected:
    std::shared_ptr<ConfigNodePropertyBoolean> m_PurgeCompleted;
    bool m_PurgeCompletedIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_CompletedAge;
    bool m_CompletedAgeIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_PurgeActive;
    bool m_PurgeActiveIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_ActiveAge;
    bool m_ActiveAgeIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_SaveThreshold;
    bool m_SaveThresholdIsSet;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskProperties_H_ */
