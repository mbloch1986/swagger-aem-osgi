/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "OrgApacheSlingServletsResolverSlingServletResolverProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

OrgApacheSlingServletsResolverSlingServletResolverProperties::OrgApacheSlingServletsResolverSlingServletResolverProperties()
{
    m_Servletresolver_servletRootIsSet = false;
    m_Servletresolver_cacheSizeIsSet = false;
    m_Servletresolver_pathsIsSet = false;
    m_Servletresolver_defaultExtensionsIsSet = false;
    
}

OrgApacheSlingServletsResolverSlingServletResolverProperties::~OrgApacheSlingServletsResolverSlingServletResolverProperties()
{
}

void OrgApacheSlingServletsResolverSlingServletResolverProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json OrgApacheSlingServletsResolverSlingServletResolverProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_Servletresolver_servletRootIsSet)
    {
        val["servletresolver.servletRoot"] = ModelBase::toJson(m_Servletresolver_servletRoot);
    }
    if(m_Servletresolver_cacheSizeIsSet)
    {
        val["servletresolver.cacheSize"] = ModelBase::toJson(m_Servletresolver_cacheSize);
    }
    if(m_Servletresolver_pathsIsSet)
    {
        val["servletresolver.paths"] = ModelBase::toJson(m_Servletresolver_paths);
    }
    if(m_Servletresolver_defaultExtensionsIsSet)
    {
        val["servletresolver.defaultExtensions"] = ModelBase::toJson(m_Servletresolver_defaultExtensions);
    }
    

    return val;
}

void OrgApacheSlingServletsResolverSlingServletResolverProperties::fromJson(nlohmann::json& val)
{
    if(val.find("servletresolver.servletRoot") != val.end())
    {
        if(!val["servletresolver.servletRoot"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["servletresolver.servletRoot"]);
            setServletresolverServletRoot( newItem );
        }
        
    }
    if(val.find("servletresolver.cacheSize") != val.end())
    {
        if(!val["servletresolver.cacheSize"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["servletresolver.cacheSize"]);
            setServletresolverCacheSize( newItem );
        }
        
    }
    if(val.find("servletresolver.paths") != val.end())
    {
        if(!val["servletresolver.paths"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["servletresolver.paths"]);
            setServletresolverPaths( newItem );
        }
        
    }
    if(val.find("servletresolver.defaultExtensions") != val.end())
    {
        if(!val["servletresolver.defaultExtensions"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["servletresolver.defaultExtensions"]);
            setServletresolverDefaultExtensions( newItem );
        }
        
    }
    
}


ConfigNodePropertyString OrgApacheSlingServletsResolverSlingServletResolverProperties::getServletresolverServletRoot() const
{
    return m_Servletresolver_servletRoot;
}
void OrgApacheSlingServletsResolverSlingServletResolverProperties::setServletresolverServletRoot(ConfigNodePropertyString const& value)
{
    m_Servletresolver_servletRoot = value;
    m_Servletresolver_servletRootIsSet = true;
}
bool OrgApacheSlingServletsResolverSlingServletResolverProperties::servletresolverServletRootIsSet() const
{
    return m_Servletresolver_servletRootIsSet;
}
void OrgApacheSlingServletsResolverSlingServletResolverProperties::unsetServletresolver_servletRoot()
{
    m_Servletresolver_servletRootIsSet = false;
}
ConfigNodePropertyInteger OrgApacheSlingServletsResolverSlingServletResolverProperties::getServletresolverCacheSize() const
{
    return m_Servletresolver_cacheSize;
}
void OrgApacheSlingServletsResolverSlingServletResolverProperties::setServletresolverCacheSize(ConfigNodePropertyInteger const& value)
{
    m_Servletresolver_cacheSize = value;
    m_Servletresolver_cacheSizeIsSet = true;
}
bool OrgApacheSlingServletsResolverSlingServletResolverProperties::servletresolverCacheSizeIsSet() const
{
    return m_Servletresolver_cacheSizeIsSet;
}
void OrgApacheSlingServletsResolverSlingServletResolverProperties::unsetServletresolver_cacheSize()
{
    m_Servletresolver_cacheSizeIsSet = false;
}
ConfigNodePropertyArray OrgApacheSlingServletsResolverSlingServletResolverProperties::getServletresolverPaths() const
{
    return m_Servletresolver_paths;
}
void OrgApacheSlingServletsResolverSlingServletResolverProperties::setServletresolverPaths(ConfigNodePropertyArray const& value)
{
    m_Servletresolver_paths = value;
    m_Servletresolver_pathsIsSet = true;
}
bool OrgApacheSlingServletsResolverSlingServletResolverProperties::servletresolverPathsIsSet() const
{
    return m_Servletresolver_pathsIsSet;
}
void OrgApacheSlingServletsResolverSlingServletResolverProperties::unsetServletresolver_paths()
{
    m_Servletresolver_pathsIsSet = false;
}
ConfigNodePropertyArray OrgApacheSlingServletsResolverSlingServletResolverProperties::getServletresolverDefaultExtensions() const
{
    return m_Servletresolver_defaultExtensions;
}
void OrgApacheSlingServletsResolverSlingServletResolverProperties::setServletresolverDefaultExtensions(ConfigNodePropertyArray const& value)
{
    m_Servletresolver_defaultExtensions = value;
    m_Servletresolver_defaultExtensionsIsSet = true;
}
bool OrgApacheSlingServletsResolverSlingServletResolverProperties::servletresolverDefaultExtensionsIsSet() const
{
    return m_Servletresolver_defaultExtensionsIsSet;
}
void OrgApacheSlingServletsResolverSlingServletResolverProperties::unsetServletresolver_defaultExtensions()
{
    m_Servletresolver_defaultExtensionsIsSet = false;
}

}
}
}
}

