/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIOrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIOrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties::OAIOrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIOrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties::OAIOrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties() {
    init();
}

OAIOrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties::~OAIOrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties() {
    this->cleanup();
}

void
OAIOrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties::init() {
    extensions = new OAIConfigNodePropertyArray();
    m_extensions_isSet = false;
    min_duration_ms = new OAIConfigNodePropertyInteger();
    m_min_duration_ms_isSet = false;
    max_duration_ms = new OAIConfigNodePropertyInteger();
    m_max_duration_ms_isSet = false;
    compact_log_format = new OAIConfigNodePropertyBoolean();
    m_compact_log_format_isSet = false;
}

void
OAIOrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties::cleanup() {
    if(extensions != nullptr) { 
        delete extensions;
    }
    if(min_duration_ms != nullptr) { 
        delete min_duration_ms;
    }
    if(max_duration_ms != nullptr) { 
        delete max_duration_ms;
    }
    if(compact_log_format != nullptr) { 
        delete compact_log_format;
    }
}

OAIOrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties*
OAIOrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIOrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&extensions, pJson["extensions"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
    ::OpenAPI::setValue(&min_duration_ms, pJson["minDurationMs"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&max_duration_ms, pJson["maxDurationMs"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&compact_log_format, pJson["compactLogFormat"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
}

QString
OAIOrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIOrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties::asJsonObject() {
    QJsonObject obj;
    if((extensions != nullptr) && (extensions->isSet())){
        toJsonValue(QString("extensions"), extensions, obj, QString("OAIConfigNodePropertyArray"));
    }
    if((min_duration_ms != nullptr) && (min_duration_ms->isSet())){
        toJsonValue(QString("minDurationMs"), min_duration_ms, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((max_duration_ms != nullptr) && (max_duration_ms->isSet())){
        toJsonValue(QString("maxDurationMs"), max_duration_ms, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((compact_log_format != nullptr) && (compact_log_format->isSet())){
        toJsonValue(QString("compactLogFormat"), compact_log_format, obj, QString("OAIConfigNodePropertyBoolean"));
    }

    return obj;
}

OAIConfigNodePropertyArray*
OAIOrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties::getExtensions() {
    return extensions;
}
void
OAIOrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties::setExtensions(OAIConfigNodePropertyArray* extensions) {
    this->extensions = extensions;
    this->m_extensions_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIOrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties::getMinDurationMs() {
    return min_duration_ms;
}
void
OAIOrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties::setMinDurationMs(OAIConfigNodePropertyInteger* min_duration_ms) {
    this->min_duration_ms = min_duration_ms;
    this->m_min_duration_ms_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIOrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties::getMaxDurationMs() {
    return max_duration_ms;
}
void
OAIOrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties::setMaxDurationMs(OAIConfigNodePropertyInteger* max_duration_ms) {
    this->max_duration_ms = max_duration_ms;
    this->m_max_duration_ms_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIOrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties::getCompactLogFormat() {
    return compact_log_format;
}
void
OAIOrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties::setCompactLogFormat(OAIConfigNodePropertyBoolean* compact_log_format) {
    this->compact_log_format = compact_log_format;
    this->m_compact_log_format_isSet = true;
}


bool
OAIOrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(extensions != nullptr && extensions->isSet()){ isObjectUpdated = true; break;}
        if(min_duration_ms != nullptr && min_duration_ms->isSet()){ isObjectUpdated = true; break;}
        if(max_duration_ms != nullptr && max_duration_ms->isSet()){ isObjectUpdated = true; break;}
        if(compact_log_format != nullptr && compact_log_format->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

