/*
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties : IEquatable<OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties>
    { 
        /// <summary>
        /// Gets or Sets PermissionsJr2
        /// </summary>
        [DataMember(Name="permissionsJr2")]
        public ConfigNodePropertyDropDown PermissionsJr2 { get; set; }

        /// <summary>
        /// Gets or Sets ImportBehavior
        /// </summary>
        [DataMember(Name="importBehavior")]
        public ConfigNodePropertyDropDown ImportBehavior { get; set; }

        /// <summary>
        /// Gets or Sets ReadPaths
        /// </summary>
        [DataMember(Name="readPaths")]
        public ConfigNodePropertyArray ReadPaths { get; set; }

        /// <summary>
        /// Gets or Sets AdministrativePrincipals
        /// </summary>
        [DataMember(Name="administrativePrincipals")]
        public ConfigNodePropertyArray AdministrativePrincipals { get; set; }

        /// <summary>
        /// Gets or Sets ConfigurationRanking
        /// </summary>
        [DataMember(Name="configurationRanking")]
        public ConfigNodePropertyInteger ConfigurationRanking { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties {\n");
            sb.Append("  PermissionsJr2: ").Append(PermissionsJr2).Append("\n");
            sb.Append("  ImportBehavior: ").Append(ImportBehavior).Append("\n");
            sb.Append("  ReadPaths: ").Append(ReadPaths).Append("\n");
            sb.Append("  AdministrativePrincipals: ").Append(AdministrativePrincipals).Append("\n");
            sb.Append("  ConfigurationRanking: ").Append(ConfigurationRanking).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties)obj);
        }

        /// <summary>
        /// Returns true if OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties instances are equal
        /// </summary>
        /// <param name="other">Instance of OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    PermissionsJr2 == other.PermissionsJr2 ||
                    PermissionsJr2 != null &&
                    PermissionsJr2.Equals(other.PermissionsJr2)
                ) && 
                (
                    ImportBehavior == other.ImportBehavior ||
                    ImportBehavior != null &&
                    ImportBehavior.Equals(other.ImportBehavior)
                ) && 
                (
                    ReadPaths == other.ReadPaths ||
                    ReadPaths != null &&
                    ReadPaths.Equals(other.ReadPaths)
                ) && 
                (
                    AdministrativePrincipals == other.AdministrativePrincipals ||
                    AdministrativePrincipals != null &&
                    AdministrativePrincipals.Equals(other.AdministrativePrincipals)
                ) && 
                (
                    ConfigurationRanking == other.ConfigurationRanking ||
                    ConfigurationRanking != null &&
                    ConfigurationRanking.Equals(other.ConfigurationRanking)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (PermissionsJr2 != null)
                    hashCode = hashCode * 59 + PermissionsJr2.GetHashCode();
                    if (ImportBehavior != null)
                    hashCode = hashCode * 59 + ImportBehavior.GetHashCode();
                    if (ReadPaths != null)
                    hashCode = hashCode * 59 + ReadPaths.GetHashCode();
                    if (AdministrativePrincipals != null)
                    hashCode = hashCode * 59 + AdministrativePrincipals.GetHashCode();
                    if (ConfigurationRanking != null)
                    hashCode = hashCode * 59 + ConfigurationRanking.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties left, OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties left, OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
