/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceProperties::ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceProperties()
{
    m_ThresholdIsSet = false;
    m_JobTopicNameIsSet = false;
    m_EmailEnabledIsSet = false;
}

ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceProperties::~ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceProperties()
{
}

void ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_ThresholdIsSet)
    {
        val[utility::conversions::to_string_t("threshold")] = ModelBase::toJson(m_Threshold);
    }
    if(m_JobTopicNameIsSet)
    {
        val[utility::conversions::to_string_t("jobTopicName")] = ModelBase::toJson(m_JobTopicName);
    }
    if(m_EmailEnabledIsSet)
    {
        val[utility::conversions::to_string_t("emailEnabled")] = ModelBase::toJson(m_EmailEnabled);
    }

    return val;
}

void ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("threshold")))
    {
        if(!val[utility::conversions::to_string_t("threshold")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("threshold")]);
            setThreshold( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("jobTopicName")))
    {
        if(!val[utility::conversions::to_string_t("jobTopicName")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("jobTopicName")]);
            setJobTopicName( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("emailEnabled")))
    {
        if(!val[utility::conversions::to_string_t("emailEnabled")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("emailEnabled")]);
            setEmailEnabled( newItem );
        }
    }
}

void ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_ThresholdIsSet)
    {
        if (m_Threshold.get())
        {
            m_Threshold->toMultipart(multipart, utility::conversions::to_string_t("threshold."));
        }
    }
    if(m_JobTopicNameIsSet)
    {
        if (m_JobTopicName.get())
        {
            m_JobTopicName->toMultipart(multipart, utility::conversions::to_string_t("jobTopicName."));
        }
    }
    if(m_EmailEnabledIsSet)
    {
        if (m_EmailEnabled.get())
        {
            m_EmailEnabled->toMultipart(multipart, utility::conversions::to_string_t("emailEnabled."));
        }
    }
}

void ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("threshold")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("threshold")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("threshold."));
            setThreshold( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("jobTopicName")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("jobTopicName")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("jobTopicName."));
            setJobTopicName( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("emailEnabled")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("emailEnabled")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("emailEnabled."));
            setEmailEnabled( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceProperties::getThreshold() const
{
    return m_Threshold;
}


void ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceProperties::setThreshold(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Threshold = value;
    m_ThresholdIsSet = true;
}
bool ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceProperties::thresholdIsSet() const
{
    return m_ThresholdIsSet;
}

void ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceProperties::unsetThreshold()
{
    m_ThresholdIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceProperties::getJobTopicName() const
{
    return m_JobTopicName;
}


void ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceProperties::setJobTopicName(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_JobTopicName = value;
    m_JobTopicNameIsSet = true;
}
bool ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceProperties::jobTopicNameIsSet() const
{
    return m_JobTopicNameIsSet;
}

void ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceProperties::unsetJobTopicName()
{
    m_JobTopicNameIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceProperties::getEmailEnabled() const
{
    return m_EmailEnabled;
}


void ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceProperties::setEmailEnabled(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_EmailEnabled = value;
    m_EmailEnabledIsSet = true;
}
bool ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceProperties::emailEnabledIsSet() const
{
    return m_EmailEnabledIsSet;
}

void ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceProperties::unsetEmailEnabled()
{
    m_EmailEnabledIsSet = false;
}

}
}
}
}

