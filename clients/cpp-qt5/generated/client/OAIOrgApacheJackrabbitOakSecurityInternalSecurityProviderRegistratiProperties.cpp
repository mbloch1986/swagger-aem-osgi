/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIOrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIOrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiProperties::OAIOrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIOrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiProperties::OAIOrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiProperties() {
    init();
}

OAIOrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiProperties::~OAIOrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiProperties() {
    this->cleanup();
}

void
OAIOrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiProperties::init() {
    required_service_pids = new OAIConfigNodePropertyArray();
    m_required_service_pids_isSet = false;
    authorization_composition_type = new OAIConfigNodePropertyDropDown();
    m_authorization_composition_type_isSet = false;
}

void
OAIOrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiProperties::cleanup() {
    if(required_service_pids != nullptr) { 
        delete required_service_pids;
    }
    if(authorization_composition_type != nullptr) { 
        delete authorization_composition_type;
    }
}

OAIOrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiProperties*
OAIOrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIOrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&required_service_pids, pJson["requiredServicePids"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
    ::OpenAPI::setValue(&authorization_composition_type, pJson["authorizationCompositionType"], "OAIConfigNodePropertyDropDown", "OAIConfigNodePropertyDropDown");
    
}

QString
OAIOrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIOrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiProperties::asJsonObject() {
    QJsonObject obj;
    if((required_service_pids != nullptr) && (required_service_pids->isSet())){
        toJsonValue(QString("requiredServicePids"), required_service_pids, obj, QString("OAIConfigNodePropertyArray"));
    }
    if((authorization_composition_type != nullptr) && (authorization_composition_type->isSet())){
        toJsonValue(QString("authorizationCompositionType"), authorization_composition_type, obj, QString("OAIConfigNodePropertyDropDown"));
    }

    return obj;
}

OAIConfigNodePropertyArray*
OAIOrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiProperties::getRequiredServicePids() {
    return required_service_pids;
}
void
OAIOrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiProperties::setRequiredServicePids(OAIConfigNodePropertyArray* required_service_pids) {
    this->required_service_pids = required_service_pids;
    this->m_required_service_pids_isSet = true;
}

OAIConfigNodePropertyDropDown*
OAIOrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiProperties::getAuthorizationCompositionType() {
    return authorization_composition_type;
}
void
OAIOrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiProperties::setAuthorizationCompositionType(OAIConfigNodePropertyDropDown* authorization_composition_type) {
    this->authorization_composition_type = authorization_composition_type;
    this->m_authorization_composition_type_isSet = true;
}


bool
OAIOrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(required_service_pids != nullptr && required_service_pids->isSet()){ isObjectUpdated = true; break;}
        if(authorization_composition_type != nullptr && authorization_composition_type->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

