/*
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties : IEquatable<OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties>
    { 
        /// <summary>
        /// Gets or Sets PathDescField
        /// </summary>
        [DataMember(Name="path.desc.field")]
        public ConfigNodePropertyString PathDescField { get; set; }

        /// <summary>
        /// Gets or Sets PathChildField
        /// </summary>
        [DataMember(Name="path.child.field")]
        public ConfigNodePropertyString PathChildField { get; set; }

        /// <summary>
        /// Gets or Sets PathParentField
        /// </summary>
        [DataMember(Name="path.parent.field")]
        public ConfigNodePropertyString PathParentField { get; set; }

        /// <summary>
        /// Gets or Sets PathExactField
        /// </summary>
        [DataMember(Name="path.exact.field")]
        public ConfigNodePropertyString PathExactField { get; set; }

        /// <summary>
        /// Gets or Sets CatchAllField
        /// </summary>
        [DataMember(Name="catch.all.field")]
        public ConfigNodePropertyString CatchAllField { get; set; }

        /// <summary>
        /// Gets or Sets CollapsedPathField
        /// </summary>
        [DataMember(Name="collapsed.path.field")]
        public ConfigNodePropertyString CollapsedPathField { get; set; }

        /// <summary>
        /// Gets or Sets PathDepthField
        /// </summary>
        [DataMember(Name="path.depth.field")]
        public ConfigNodePropertyString PathDepthField { get; set; }

        /// <summary>
        /// Gets or Sets CommitPolicy
        /// </summary>
        [DataMember(Name="commit.policy")]
        public ConfigNodePropertyDropDown CommitPolicy { get; set; }

        /// <summary>
        /// Gets or Sets Rows
        /// </summary>
        [DataMember(Name="rows")]
        public ConfigNodePropertyInteger Rows { get; set; }

        /// <summary>
        /// Gets or Sets PathRestrictions
        /// </summary>
        [DataMember(Name="path.restrictions")]
        public ConfigNodePropertyBoolean PathRestrictions { get; set; }

        /// <summary>
        /// Gets or Sets PropertyRestrictions
        /// </summary>
        [DataMember(Name="property.restrictions")]
        public ConfigNodePropertyBoolean PropertyRestrictions { get; set; }

        /// <summary>
        /// Gets or Sets PrimarytypesRestrictions
        /// </summary>
        [DataMember(Name="primarytypes.restrictions")]
        public ConfigNodePropertyBoolean PrimarytypesRestrictions { get; set; }

        /// <summary>
        /// Gets or Sets IgnoredProperties
        /// </summary>
        [DataMember(Name="ignored.properties")]
        public ConfigNodePropertyArray IgnoredProperties { get; set; }

        /// <summary>
        /// Gets or Sets UsedProperties
        /// </summary>
        [DataMember(Name="used.properties")]
        public ConfigNodePropertyArray UsedProperties { get; set; }

        /// <summary>
        /// Gets or Sets TypeMappings
        /// </summary>
        [DataMember(Name="type.mappings")]
        public ConfigNodePropertyArray TypeMappings { get; set; }

        /// <summary>
        /// Gets or Sets PropertyMappings
        /// </summary>
        [DataMember(Name="property.mappings")]
        public ConfigNodePropertyArray PropertyMappings { get; set; }

        /// <summary>
        /// Gets or Sets CollapseJcrcontentNodes
        /// </summary>
        [DataMember(Name="collapse.jcrcontent.nodes")]
        public ConfigNodePropertyBoolean CollapseJcrcontentNodes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties {\n");
            sb.Append("  PathDescField: ").Append(PathDescField).Append("\n");
            sb.Append("  PathChildField: ").Append(PathChildField).Append("\n");
            sb.Append("  PathParentField: ").Append(PathParentField).Append("\n");
            sb.Append("  PathExactField: ").Append(PathExactField).Append("\n");
            sb.Append("  CatchAllField: ").Append(CatchAllField).Append("\n");
            sb.Append("  CollapsedPathField: ").Append(CollapsedPathField).Append("\n");
            sb.Append("  PathDepthField: ").Append(PathDepthField).Append("\n");
            sb.Append("  CommitPolicy: ").Append(CommitPolicy).Append("\n");
            sb.Append("  Rows: ").Append(Rows).Append("\n");
            sb.Append("  PathRestrictions: ").Append(PathRestrictions).Append("\n");
            sb.Append("  PropertyRestrictions: ").Append(PropertyRestrictions).Append("\n");
            sb.Append("  PrimarytypesRestrictions: ").Append(PrimarytypesRestrictions).Append("\n");
            sb.Append("  IgnoredProperties: ").Append(IgnoredProperties).Append("\n");
            sb.Append("  UsedProperties: ").Append(UsedProperties).Append("\n");
            sb.Append("  TypeMappings: ").Append(TypeMappings).Append("\n");
            sb.Append("  PropertyMappings: ").Append(PropertyMappings).Append("\n");
            sb.Append("  CollapseJcrcontentNodes: ").Append(CollapseJcrcontentNodes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties)obj);
        }

        /// <summary>
        /// Returns true if OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties instances are equal
        /// </summary>
        /// <param name="other">Instance of OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    PathDescField == other.PathDescField ||
                    PathDescField != null &&
                    PathDescField.Equals(other.PathDescField)
                ) && 
                (
                    PathChildField == other.PathChildField ||
                    PathChildField != null &&
                    PathChildField.Equals(other.PathChildField)
                ) && 
                (
                    PathParentField == other.PathParentField ||
                    PathParentField != null &&
                    PathParentField.Equals(other.PathParentField)
                ) && 
                (
                    PathExactField == other.PathExactField ||
                    PathExactField != null &&
                    PathExactField.Equals(other.PathExactField)
                ) && 
                (
                    CatchAllField == other.CatchAllField ||
                    CatchAllField != null &&
                    CatchAllField.Equals(other.CatchAllField)
                ) && 
                (
                    CollapsedPathField == other.CollapsedPathField ||
                    CollapsedPathField != null &&
                    CollapsedPathField.Equals(other.CollapsedPathField)
                ) && 
                (
                    PathDepthField == other.PathDepthField ||
                    PathDepthField != null &&
                    PathDepthField.Equals(other.PathDepthField)
                ) && 
                (
                    CommitPolicy == other.CommitPolicy ||
                    CommitPolicy != null &&
                    CommitPolicy.Equals(other.CommitPolicy)
                ) && 
                (
                    Rows == other.Rows ||
                    Rows != null &&
                    Rows.Equals(other.Rows)
                ) && 
                (
                    PathRestrictions == other.PathRestrictions ||
                    PathRestrictions != null &&
                    PathRestrictions.Equals(other.PathRestrictions)
                ) && 
                (
                    PropertyRestrictions == other.PropertyRestrictions ||
                    PropertyRestrictions != null &&
                    PropertyRestrictions.Equals(other.PropertyRestrictions)
                ) && 
                (
                    PrimarytypesRestrictions == other.PrimarytypesRestrictions ||
                    PrimarytypesRestrictions != null &&
                    PrimarytypesRestrictions.Equals(other.PrimarytypesRestrictions)
                ) && 
                (
                    IgnoredProperties == other.IgnoredProperties ||
                    IgnoredProperties != null &&
                    IgnoredProperties.Equals(other.IgnoredProperties)
                ) && 
                (
                    UsedProperties == other.UsedProperties ||
                    UsedProperties != null &&
                    UsedProperties.Equals(other.UsedProperties)
                ) && 
                (
                    TypeMappings == other.TypeMappings ||
                    TypeMappings != null &&
                    TypeMappings.Equals(other.TypeMappings)
                ) && 
                (
                    PropertyMappings == other.PropertyMappings ||
                    PropertyMappings != null &&
                    PropertyMappings.Equals(other.PropertyMappings)
                ) && 
                (
                    CollapseJcrcontentNodes == other.CollapseJcrcontentNodes ||
                    CollapseJcrcontentNodes != null &&
                    CollapseJcrcontentNodes.Equals(other.CollapseJcrcontentNodes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (PathDescField != null)
                    hashCode = hashCode * 59 + PathDescField.GetHashCode();
                    if (PathChildField != null)
                    hashCode = hashCode * 59 + PathChildField.GetHashCode();
                    if (PathParentField != null)
                    hashCode = hashCode * 59 + PathParentField.GetHashCode();
                    if (PathExactField != null)
                    hashCode = hashCode * 59 + PathExactField.GetHashCode();
                    if (CatchAllField != null)
                    hashCode = hashCode * 59 + CatchAllField.GetHashCode();
                    if (CollapsedPathField != null)
                    hashCode = hashCode * 59 + CollapsedPathField.GetHashCode();
                    if (PathDepthField != null)
                    hashCode = hashCode * 59 + PathDepthField.GetHashCode();
                    if (CommitPolicy != null)
                    hashCode = hashCode * 59 + CommitPolicy.GetHashCode();
                    if (Rows != null)
                    hashCode = hashCode * 59 + Rows.GetHashCode();
                    if (PathRestrictions != null)
                    hashCode = hashCode * 59 + PathRestrictions.GetHashCode();
                    if (PropertyRestrictions != null)
                    hashCode = hashCode * 59 + PropertyRestrictions.GetHashCode();
                    if (PrimarytypesRestrictions != null)
                    hashCode = hashCode * 59 + PrimarytypesRestrictions.GetHashCode();
                    if (IgnoredProperties != null)
                    hashCode = hashCode * 59 + IgnoredProperties.GetHashCode();
                    if (UsedProperties != null)
                    hashCode = hashCode * 59 + UsedProperties.GetHashCode();
                    if (TypeMappings != null)
                    hashCode = hashCode * 59 + TypeMappings.GetHashCode();
                    if (PropertyMappings != null)
                    hashCode = hashCode * 59 + PropertyMappings.GetHashCode();
                    if (CollapseJcrcontentNodes != null)
                    hashCode = hashCode * 59 + CollapseJcrcontentNodes.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties left, OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties left, OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationProperties right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
