/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties::OAIComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties::OAIComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties() {
    init();
}

OAIComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties::~OAIComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties() {
    this->cleanup();
}

void
OAIComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties::init() {
    linkcheckertransformer_disable_rewriting = new OAIConfigNodePropertyBoolean();
    m_linkcheckertransformer_disable_rewriting_isSet = false;
    linkcheckertransformer_disable_checking = new OAIConfigNodePropertyBoolean();
    m_linkcheckertransformer_disable_checking_isSet = false;
    linkcheckertransformer_map_cache_size = new OAIConfigNodePropertyInteger();
    m_linkcheckertransformer_map_cache_size_isSet = false;
    linkcheckertransformer_strict_extension_check = new OAIConfigNodePropertyBoolean();
    m_linkcheckertransformer_strict_extension_check_isSet = false;
    linkcheckertransformer_strip_htmlt_extension = new OAIConfigNodePropertyBoolean();
    m_linkcheckertransformer_strip_htmlt_extension_isSet = false;
    linkcheckertransformer_rewrite_elements = new OAIConfigNodePropertyArray();
    m_linkcheckertransformer_rewrite_elements_isSet = false;
    linkcheckertransformer_strip_extension_path_blacklist = new OAIConfigNodePropertyArray();
    m_linkcheckertransformer_strip_extension_path_blacklist_isSet = false;
}

void
OAIComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties::cleanup() {
    if(linkcheckertransformer_disable_rewriting != nullptr) { 
        delete linkcheckertransformer_disable_rewriting;
    }
    if(linkcheckertransformer_disable_checking != nullptr) { 
        delete linkcheckertransformer_disable_checking;
    }
    if(linkcheckertransformer_map_cache_size != nullptr) { 
        delete linkcheckertransformer_map_cache_size;
    }
    if(linkcheckertransformer_strict_extension_check != nullptr) { 
        delete linkcheckertransformer_strict_extension_check;
    }
    if(linkcheckertransformer_strip_htmlt_extension != nullptr) { 
        delete linkcheckertransformer_strip_htmlt_extension;
    }
    if(linkcheckertransformer_rewrite_elements != nullptr) { 
        delete linkcheckertransformer_rewrite_elements;
    }
    if(linkcheckertransformer_strip_extension_path_blacklist != nullptr) { 
        delete linkcheckertransformer_strip_extension_path_blacklist;
    }
}

OAIComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties*
OAIComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&linkcheckertransformer_disable_rewriting, pJson["linkcheckertransformer.disableRewriting"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&linkcheckertransformer_disable_checking, pJson["linkcheckertransformer.disableChecking"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&linkcheckertransformer_map_cache_size, pJson["linkcheckertransformer.mapCacheSize"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&linkcheckertransformer_strict_extension_check, pJson["linkcheckertransformer.strictExtensionCheck"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&linkcheckertransformer_strip_htmlt_extension, pJson["linkcheckertransformer.stripHtmltExtension"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&linkcheckertransformer_rewrite_elements, pJson["linkcheckertransformer.rewriteElements"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
    ::OpenAPI::setValue(&linkcheckertransformer_strip_extension_path_blacklist, pJson["linkcheckertransformer.stripExtensionPathBlacklist"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
}

QString
OAIComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties::asJsonObject() {
    QJsonObject obj;
    if((linkcheckertransformer_disable_rewriting != nullptr) && (linkcheckertransformer_disable_rewriting->isSet())){
        toJsonValue(QString("linkcheckertransformer.disableRewriting"), linkcheckertransformer_disable_rewriting, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((linkcheckertransformer_disable_checking != nullptr) && (linkcheckertransformer_disable_checking->isSet())){
        toJsonValue(QString("linkcheckertransformer.disableChecking"), linkcheckertransformer_disable_checking, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((linkcheckertransformer_map_cache_size != nullptr) && (linkcheckertransformer_map_cache_size->isSet())){
        toJsonValue(QString("linkcheckertransformer.mapCacheSize"), linkcheckertransformer_map_cache_size, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((linkcheckertransformer_strict_extension_check != nullptr) && (linkcheckertransformer_strict_extension_check->isSet())){
        toJsonValue(QString("linkcheckertransformer.strictExtensionCheck"), linkcheckertransformer_strict_extension_check, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((linkcheckertransformer_strip_htmlt_extension != nullptr) && (linkcheckertransformer_strip_htmlt_extension->isSet())){
        toJsonValue(QString("linkcheckertransformer.stripHtmltExtension"), linkcheckertransformer_strip_htmlt_extension, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((linkcheckertransformer_rewrite_elements != nullptr) && (linkcheckertransformer_rewrite_elements->isSet())){
        toJsonValue(QString("linkcheckertransformer.rewriteElements"), linkcheckertransformer_rewrite_elements, obj, QString("OAIConfigNodePropertyArray"));
    }
    if((linkcheckertransformer_strip_extension_path_blacklist != nullptr) && (linkcheckertransformer_strip_extension_path_blacklist->isSet())){
        toJsonValue(QString("linkcheckertransformer.stripExtensionPathBlacklist"), linkcheckertransformer_strip_extension_path_blacklist, obj, QString("OAIConfigNodePropertyArray"));
    }

    return obj;
}

OAIConfigNodePropertyBoolean*
OAIComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties::getLinkcheckertransformerDisableRewriting() {
    return linkcheckertransformer_disable_rewriting;
}
void
OAIComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties::setLinkcheckertransformerDisableRewriting(OAIConfigNodePropertyBoolean* linkcheckertransformer_disable_rewriting) {
    this->linkcheckertransformer_disable_rewriting = linkcheckertransformer_disable_rewriting;
    this->m_linkcheckertransformer_disable_rewriting_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties::getLinkcheckertransformerDisableChecking() {
    return linkcheckertransformer_disable_checking;
}
void
OAIComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties::setLinkcheckertransformerDisableChecking(OAIConfigNodePropertyBoolean* linkcheckertransformer_disable_checking) {
    this->linkcheckertransformer_disable_checking = linkcheckertransformer_disable_checking;
    this->m_linkcheckertransformer_disable_checking_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties::getLinkcheckertransformerMapCacheSize() {
    return linkcheckertransformer_map_cache_size;
}
void
OAIComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties::setLinkcheckertransformerMapCacheSize(OAIConfigNodePropertyInteger* linkcheckertransformer_map_cache_size) {
    this->linkcheckertransformer_map_cache_size = linkcheckertransformer_map_cache_size;
    this->m_linkcheckertransformer_map_cache_size_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties::getLinkcheckertransformerStrictExtensionCheck() {
    return linkcheckertransformer_strict_extension_check;
}
void
OAIComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties::setLinkcheckertransformerStrictExtensionCheck(OAIConfigNodePropertyBoolean* linkcheckertransformer_strict_extension_check) {
    this->linkcheckertransformer_strict_extension_check = linkcheckertransformer_strict_extension_check;
    this->m_linkcheckertransformer_strict_extension_check_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties::getLinkcheckertransformerStripHtmltExtension() {
    return linkcheckertransformer_strip_htmlt_extension;
}
void
OAIComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties::setLinkcheckertransformerStripHtmltExtension(OAIConfigNodePropertyBoolean* linkcheckertransformer_strip_htmlt_extension) {
    this->linkcheckertransformer_strip_htmlt_extension = linkcheckertransformer_strip_htmlt_extension;
    this->m_linkcheckertransformer_strip_htmlt_extension_isSet = true;
}

OAIConfigNodePropertyArray*
OAIComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties::getLinkcheckertransformerRewriteElements() {
    return linkcheckertransformer_rewrite_elements;
}
void
OAIComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties::setLinkcheckertransformerRewriteElements(OAIConfigNodePropertyArray* linkcheckertransformer_rewrite_elements) {
    this->linkcheckertransformer_rewrite_elements = linkcheckertransformer_rewrite_elements;
    this->m_linkcheckertransformer_rewrite_elements_isSet = true;
}

OAIConfigNodePropertyArray*
OAIComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties::getLinkcheckertransformerStripExtensionPathBlacklist() {
    return linkcheckertransformer_strip_extension_path_blacklist;
}
void
OAIComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties::setLinkcheckertransformerStripExtensionPathBlacklist(OAIConfigNodePropertyArray* linkcheckertransformer_strip_extension_path_blacklist) {
    this->linkcheckertransformer_strip_extension_path_blacklist = linkcheckertransformer_strip_extension_path_blacklist;
    this->m_linkcheckertransformer_strip_extension_path_blacklist_isSet = true;
}


bool
OAIComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(linkcheckertransformer_disable_rewriting != nullptr && linkcheckertransformer_disable_rewriting->isSet()){ isObjectUpdated = true; break;}
        if(linkcheckertransformer_disable_checking != nullptr && linkcheckertransformer_disable_checking->isSet()){ isObjectUpdated = true; break;}
        if(linkcheckertransformer_map_cache_size != nullptr && linkcheckertransformer_map_cache_size->isSet()){ isObjectUpdated = true; break;}
        if(linkcheckertransformer_strict_extension_check != nullptr && linkcheckertransformer_strict_extension_check->isSet()){ isObjectUpdated = true; break;}
        if(linkcheckertransformer_strip_htmlt_extension != nullptr && linkcheckertransformer_strip_htmlt_extension->isSet()){ isObjectUpdated = true; break;}
        if(linkcheckertransformer_rewrite_elements != nullptr && linkcheckertransformer_rewrite_elements->isSet()){ isObjectUpdated = true; break;}
        if(linkcheckertransformer_strip_extension_path_blacklist != nullptr && linkcheckertransformer_strip_extension_path_blacklist->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

