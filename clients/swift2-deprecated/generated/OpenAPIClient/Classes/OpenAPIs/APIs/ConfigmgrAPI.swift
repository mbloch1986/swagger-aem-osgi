//
// ConfigmgrAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Alamofire



public class ConfigmgrAPI: APIBase {
    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter showPlaceholder: (query)  (optional)
     - parameter maximumCacheEntries: (query)  (optional)
     - parameter afScriptingCompatversion: (query)  (optional)
     - parameter makeFileNameUnique: (query)  (optional)
     - parameter generatingCompliantData: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func adaptiveFormAndInteractiveCommunicationWebChannelConfiguration(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, showPlaceholder: Bool? = nil, maximumCacheEntries: Int32? = nil, afScriptingCompatversion: String? = nil, makeFileNameUnique: Bool? = nil, generatingCompliantData: Bool? = nil, completion: ((data: AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationInfo?, error: ErrorType?) -> Void)) {
        adaptiveFormAndInteractiveCommunicationWebChannelConfigurationWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, showPlaceholder: showPlaceholder, maximumCacheEntries: maximumCacheEntries, afScriptingCompatversion: afScriptingCompatversion, makeFileNameUnique: makeFileNameUnique, generatingCompliantData: generatingCompliantData).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/Adaptive Form and Interactive Communication Web Channel Configuration     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "generatingCompliantData" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "showPlaceholder" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "makeFileNameUnique" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "af.scripting.compatversion" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : {
        "values" : "",
        "labels" : ""
      },
      "value" : ""
    },
    "maximumCacheEntries" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter showPlaceholder: (query)  (optional)
     - parameter maximumCacheEntries: (query)  (optional)
     - parameter afScriptingCompatversion: (query)  (optional)
     - parameter makeFileNameUnique: (query)  (optional)
     - parameter generatingCompliantData: (query)  (optional)

     - returns: RequestBuilder<AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationInfo> 
     */
    public class func adaptiveFormAndInteractiveCommunicationWebChannelConfigurationWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, showPlaceholder: Bool? = nil, maximumCacheEntries: Int32? = nil, afScriptingCompatversion: String? = nil, makeFileNameUnique: Bool? = nil, generatingCompliantData: Bool? = nil) -> RequestBuilder<AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationInfo> {
        let path = "/system/console/configMgr/Adaptive Form and Interactive Communication Web Channel Configuration"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "showPlaceholder": showPlaceholder,
            "maximumCacheEntries": maximumCacheEntries?.encodeToJSON(),
            "af.scripting.compatversion": afScriptingCompatversion,
            "makeFileNameUnique": makeFileNameUnique,
            "generatingCompliantData": generatingCompliantData
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter fontList: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func adaptiveFormAndInteractiveCommunicationWebChannelThemeConfigur(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, fontList: [String]? = nil, completion: ((data: AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurInfo?, error: ErrorType?) -> Void)) {
        adaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, fontList: fontList).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/Adaptive Form and Interactive Communication Web Channel Theme Configuration     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "fontList" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter fontList: (query)  (optional)

     - returns: RequestBuilder<AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurInfo> 
     */
    public class func adaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, fontList: [String]? = nil) -> RequestBuilder<AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurInfo> {
        let path = "/system/console/configMgr/Adaptive Form and Interactive Communication Web Channel Theme Configuration"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "fontList": fontList
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqAnalyticsComponentQueryCacheSize: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func analyticsComponentQueryCacheService(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqAnalyticsComponentQueryCacheSize: Int32? = nil, completion: ((data: AnalyticsComponentQueryCacheServiceInfo?, error: ErrorType?) -> Void)) {
        analyticsComponentQueryCacheServiceWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqAnalyticsComponentQueryCacheSize: cqAnalyticsComponentQueryCacheSize).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/Analytics Component Query Cache Service     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "cq.analytics.component.query.cache.size" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqAnalyticsComponentQueryCacheSize: (query)  (optional)

     - returns: RequestBuilder<AnalyticsComponentQueryCacheServiceInfo> 
     */
    public class func analyticsComponentQueryCacheServiceWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqAnalyticsComponentQueryCacheSize: Int32? = nil) -> RequestBuilder<AnalyticsComponentQueryCacheServiceInfo> {
        let path = "/system/console/configMgr/Analytics Component Query Cache Service"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "cq.analytics.component.query.cache.size": cqAnalyticsComponentQueryCacheSize?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<AnalyticsComponentQueryCacheServiceInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter styleString: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func apacheSlingHealthCheckResultHTMLSerializer(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, styleString: String? = nil, completion: ((data: ApacheSlingHealthCheckResultHTMLSerializerInfo?, error: ErrorType?) -> Void)) {
        apacheSlingHealthCheckResultHTMLSerializerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, styleString: styleString).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/Apache Sling Health Check Result HTML Serializer     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "styleString" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter styleString: (query)  (optional)

     - returns: RequestBuilder<ApacheSlingHealthCheckResultHTMLSerializerInfo> 
     */
    public class func apacheSlingHealthCheckResultHTMLSerializerWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, styleString: String? = nil) -> RequestBuilder<ApacheSlingHealthCheckResultHTMLSerializerInfo> {
        let path = "/system/console/configMgr/Apache Sling Health Check Result HTML Serializer"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "styleString": styleString
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ApacheSlingHealthCheckResultHTMLSerializerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter formsManagerConfigIncludeOOTBTemplates: (query)  (optional)
     - parameter formsManagerConfigIncludeDeprecatedTemplates: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeAemFormsndocumentsConfigAEMFormsManagerConfiguration(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, formsManagerConfigIncludeOOTBTemplates: Bool? = nil, formsManagerConfigIncludeDeprecatedTemplates: Bool? = nil, completion: ((data: ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationInfo?, error: ErrorType?) -> Void)) {
        comAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, formsManagerConfigIncludeOOTBTemplates: formsManagerConfigIncludeOOTBTemplates, formsManagerConfigIncludeDeprecatedTemplates: formsManagerConfigIncludeDeprecatedTemplates).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.aem.formsndocuments.config.AEMFormsManagerConfiguration     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "formsManagerConfig.includeDeprecatedTemplates" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "formsManagerConfig.includeOOTBTemplates" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter formsManagerConfigIncludeOOTBTemplates: (query)  (optional)
     - parameter formsManagerConfigIncludeDeprecatedTemplates: (query)  (optional)

     - returns: RequestBuilder<ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationInfo> 
     */
    public class func comAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, formsManagerConfigIncludeOOTBTemplates: Bool? = nil, formsManagerConfigIncludeDeprecatedTemplates: Bool? = nil) -> RequestBuilder<ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationInfo> {
        let path = "/system/console/configMgr/com.adobe.aem.formsndocuments.config.AEMFormsManagerConfiguration"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "formsManagerConfig.includeOOTBTemplates": formsManagerConfigIncludeOOTBTemplates,
            "formsManagerConfig.includeDeprecatedTemplates": formsManagerConfigIncludeDeprecatedTemplates
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter isTransactionRecordingEnabled: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeAemTransactionCoreImplTransactionRecorder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, isTransactionRecordingEnabled: Bool? = nil, completion: ((data: ComAdobeAemTransactionCoreImplTransactionRecorderInfo?, error: ErrorType?) -> Void)) {
        comAdobeAemTransactionCoreImplTransactionRecorderWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, isTransactionRecordingEnabled: isTransactionRecordingEnabled).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.aem.transaction.core.impl.TransactionRecorder     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "isTransactionRecordingEnabled" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter isTransactionRecordingEnabled: (query)  (optional)

     - returns: RequestBuilder<ComAdobeAemTransactionCoreImplTransactionRecorderInfo> 
     */
    public class func comAdobeAemTransactionCoreImplTransactionRecorderWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, isTransactionRecordingEnabled: Bool? = nil) -> RequestBuilder<ComAdobeAemTransactionCoreImplTransactionRecorderInfo> {
        let path = "/system/console/configMgr/com.adobe.aem.transaction.core.impl.TransactionRecorder"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "isTransactionRecordingEnabled": isTransactionRecordingEnabled
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeAemTransactionCoreImplTransactionRecorderInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcName: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - parameter hcMbeanName: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeAemUpgradePrechecksHcImplDeprecateIndexesHC(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcName: String? = nil, hcTags: [String]? = nil, hcMbeanName: String? = nil, completion: ((data: ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCInfo?, error: ErrorType?) -> Void)) {
        comAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, hcName: hcName, hcTags: hcTags, hcMbeanName: hcMbeanName).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.aem.upgrade.prechecks.hc.impl.DeprecateIndexesHC     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "hc.tags" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "hc.name" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "hc.mbean.name" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcName: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - parameter hcMbeanName: (query)  (optional)

     - returns: RequestBuilder<ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCInfo> 
     */
    public class func comAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcName: String? = nil, hcTags: [String]? = nil, hcMbeanName: String? = nil) -> RequestBuilder<ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCInfo> {
        let path = "/system/console/configMgr/com.adobe.aem.upgrade.prechecks.hc.impl.DeprecateIndexesHC"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "hc.name": hcName,
            "hc.tags": hcTags,
            "hc.mbean.name": hcMbeanName
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcName: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - parameter hcMbeanName: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHC(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcName: String? = nil, hcTags: [String]? = nil, hcMbeanName: String? = nil, completion: ((data: ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCInfo?, error: ErrorType?) -> Void)) {
        comAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, hcName: hcName, hcTags: hcTags, hcMbeanName: hcMbeanName).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.aem.upgrade.prechecks.hc.impl.ReplicationAgentsDisabledHC     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "hc.tags" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "hc.name" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "hc.mbean.name" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcName: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - parameter hcMbeanName: (query)  (optional)

     - returns: RequestBuilder<ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCInfo> 
     */
    public class func comAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcName: String? = nil, hcTags: [String]? = nil, hcMbeanName: String? = nil) -> RequestBuilder<ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCInfo> {
        let path = "/system/console/configMgr/com.adobe.aem.upgrade.prechecks.hc.impl.ReplicationAgentsDisabledHC"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "hc.name": hcName,
            "hc.tags": hcTags,
            "hc.mbean.name": hcMbeanName
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter preUpgradeMaintenanceTasks: (query)  (optional)
     - parameter preUpgradeHcTags: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, preUpgradeMaintenanceTasks: [String]? = nil, preUpgradeHcTags: [String]? = nil, completion: ((data: ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplInfo?, error: ErrorType?) -> Void)) {
        comAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, preUpgradeMaintenanceTasks: preUpgradeMaintenanceTasks, preUpgradeHcTags: preUpgradeHcTags).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.aem.upgrade.prechecks.mbean.impl.PreUpgradeTasksMBeanImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "service_location" : "service_location",
  "bundle_location" : "bundle_location",
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "pre-upgrade.hc.tags" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "pre-upgrade.maintenance.tasks" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter preUpgradeMaintenanceTasks: (query)  (optional)
     - parameter preUpgradeHcTags: (query)  (optional)

     - returns: RequestBuilder<ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplInfo> 
     */
    public class func comAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, preUpgradeMaintenanceTasks: [String]? = nil, preUpgradeHcTags: [String]? = nil) -> RequestBuilder<ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplInfo> {
        let path = "/system/console/configMgr/com.adobe.aem.upgrade.prechecks.mbean.impl.PreUpgradeTasksMBeanImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "pre-upgrade.maintenance.tasks": preUpgradeMaintenanceTasks,
            "pre-upgrade.hc.tags": preUpgradeHcTags
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter rootPath: (query)  (optional)
     - parameter fixInconsistencies: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, rootPath: String? = nil, fixInconsistencies: Bool? = nil, completion: ((data: ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplInfo?, error: ErrorType?) -> Void)) {
        comAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, rootPath: rootPath, fixInconsistencies: fixInconsistencies).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.aem.upgrade.prechecks.tasks.impl.ConsistencyCheckTaskImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "fix.inconsistencies" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "root.path" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter rootPath: (query)  (optional)
     - parameter fixInconsistencies: (query)  (optional)

     - returns: RequestBuilder<ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplInfo> 
     */
    public class func comAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, rootPath: String? = nil, fixInconsistencies: Bool? = nil) -> RequestBuilder<ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplInfo> {
        let path = "/system/console/configMgr/com.adobe.aem.upgrade.prechecks.tasks.impl.ConsistencyCheckTaskImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "root.path": rootPath,
            "fix.inconsistencies": fixInconsistencies
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqAccountmanagerTokenValidityPeriod: (query)  (optional)
     - parameter cqAccountmanagerConfigRequestnewaccountMail: (query)  (optional)
     - parameter cqAccountmanagerConfigRequestnewpwdMail: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqAccountApiAccountManagementService(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqAccountmanagerTokenValidityPeriod: Int32? = nil, cqAccountmanagerConfigRequestnewaccountMail: String? = nil, cqAccountmanagerConfigRequestnewpwdMail: String? = nil, completion: ((data: ComAdobeCqAccountApiAccountManagementServiceInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqAccountApiAccountManagementServiceWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqAccountmanagerTokenValidityPeriod: cqAccountmanagerTokenValidityPeriod, cqAccountmanagerConfigRequestnewaccountMail: cqAccountmanagerConfigRequestnewaccountMail, cqAccountmanagerConfigRequestnewpwdMail: cqAccountmanagerConfigRequestnewpwdMail).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.account.api.AccountManagementService     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "service_location" : "service_location",
  "bundle_location" : "bundle_location",
  "description" : "description",
  "pid" : "pid",
  "additionalProperties" : "additionalProperties",
  "title" : "title",
  "properties" : {
    "cq.accountmanager.config.requestnewaccount.mail" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "cq.accountmanager.token.validity.period" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "cq.accountmanager.config.requestnewpwd.mail" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqAccountmanagerTokenValidityPeriod: (query)  (optional)
     - parameter cqAccountmanagerConfigRequestnewaccountMail: (query)  (optional)
     - parameter cqAccountmanagerConfigRequestnewpwdMail: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqAccountApiAccountManagementServiceInfo> 
     */
    public class func comAdobeCqAccountApiAccountManagementServiceWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqAccountmanagerTokenValidityPeriod: Int32? = nil, cqAccountmanagerConfigRequestnewaccountMail: String? = nil, cqAccountmanagerConfigRequestnewpwdMail: String? = nil) -> RequestBuilder<ComAdobeCqAccountApiAccountManagementServiceInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.account.api.AccountManagementService"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "cq.accountmanager.token.validity.period": cqAccountmanagerTokenValidityPeriod?.encodeToJSON(),
            "cq.accountmanager.config.requestnewaccount.mail": cqAccountmanagerConfigRequestnewaccountMail,
            "cq.accountmanager.config.requestnewpwd.mail": cqAccountmanagerConfigRequestnewpwdMail
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqAccountApiAccountManagementServiceInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqAccountmanagerConfigInformnewaccountMail: (query)  (optional)
     - parameter cqAccountmanagerConfigInformnewpwdMail: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqAccountImplAccountManagementServlet(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqAccountmanagerConfigInformnewaccountMail: String? = nil, cqAccountmanagerConfigInformnewpwdMail: String? = nil, completion: ((data: ComAdobeCqAccountImplAccountManagementServletInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqAccountImplAccountManagementServletWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqAccountmanagerConfigInformnewaccountMail: cqAccountmanagerConfigInformnewaccountMail, cqAccountmanagerConfigInformnewpwdMail: cqAccountmanagerConfigInformnewpwdMail).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.account.impl.AccountManagementServlet     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "cq.accountmanager.config.informnewaccount.mail" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "cq.accountmanager.config.informnewpwd.mail" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqAccountmanagerConfigInformnewaccountMail: (query)  (optional)
     - parameter cqAccountmanagerConfigInformnewpwdMail: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqAccountImplAccountManagementServletInfo> 
     */
    public class func comAdobeCqAccountImplAccountManagementServletWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqAccountmanagerConfigInformnewaccountMail: String? = nil, cqAccountmanagerConfigInformnewpwdMail: String? = nil) -> RequestBuilder<ComAdobeCqAccountImplAccountManagementServletInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.account.impl.AccountManagementServlet"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "cq.accountmanager.config.informnewaccount.mail": cqAccountmanagerConfigInformnewaccountMail,
            "cq.accountmanager.config.informnewpwd.mail": cqAccountmanagerConfigInformnewpwdMail
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqAccountImplAccountManagementServletInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqAddressLocationDefaultMaxResults: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqAddressImplLocationLocationListServlet(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqAddressLocationDefaultMaxResults: Int32? = nil, completion: ((data: ComAdobeCqAddressImplLocationLocationListServletInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqAddressImplLocationLocationListServletWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqAddressLocationDefaultMaxResults: cqAddressLocationDefaultMaxResults).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.address.impl.location.LocationListServlet     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "cq.address.location.default.maxResults" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqAddressLocationDefaultMaxResults: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqAddressImplLocationLocationListServletInfo> 
     */
    public class func comAdobeCqAddressImplLocationLocationListServletWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqAddressLocationDefaultMaxResults: Int32? = nil) -> RequestBuilder<ComAdobeCqAddressImplLocationLocationListServletInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.address.impl.location.LocationListServlet"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "cq.address.location.default.maxResults": cqAddressLocationDefaultMaxResults?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqAddressImplLocationLocationListServletInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter auditlogRuleName: (query)  (optional)
     - parameter auditlogRuleContentpath: (query)  (optional)
     - parameter auditlogRuleMinimumage: (query)  (optional)
     - parameter auditlogRuleTypes: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqAuditPurgeDam(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, auditlogRuleName: String? = nil, auditlogRuleContentpath: String? = nil, auditlogRuleMinimumage: Int32? = nil, auditlogRuleTypes: String? = nil, completion: ((data: ComAdobeCqAuditPurgeDamInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqAuditPurgeDamWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, auditlogRuleName: auditlogRuleName, auditlogRuleContentpath: auditlogRuleContentpath, auditlogRuleMinimumage: auditlogRuleMinimumage, auditlogRuleTypes: auditlogRuleTypes).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.audit.purge.Dam     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "auditlog.rule.contentpath" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "auditlog.rule.name" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "auditlog.rule.minimumage" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "auditlog.rule.types" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : {
        "values" : "",
        "labels" : ""
      },
      "value" : ""
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter auditlogRuleName: (query)  (optional)
     - parameter auditlogRuleContentpath: (query)  (optional)
     - parameter auditlogRuleMinimumage: (query)  (optional)
     - parameter auditlogRuleTypes: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqAuditPurgeDamInfo> 
     */
    public class func comAdobeCqAuditPurgeDamWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, auditlogRuleName: String? = nil, auditlogRuleContentpath: String? = nil, auditlogRuleMinimumage: Int32? = nil, auditlogRuleTypes: String? = nil) -> RequestBuilder<ComAdobeCqAuditPurgeDamInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.audit.purge.Dam"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "auditlog.rule.name": auditlogRuleName,
            "auditlog.rule.contentpath": auditlogRuleContentpath,
            "auditlog.rule.minimumage": auditlogRuleMinimumage?.encodeToJSON(),
            "auditlog.rule.types": auditlogRuleTypes
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqAuditPurgeDamInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter auditlogRuleName: (query)  (optional)
     - parameter auditlogRuleContentpath: (query)  (optional)
     - parameter auditlogRuleMinimumage: (query)  (optional)
     - parameter auditlogRuleTypes: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqAuditPurgePages(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, auditlogRuleName: String? = nil, auditlogRuleContentpath: String? = nil, auditlogRuleMinimumage: Int32? = nil, auditlogRuleTypes: String? = nil, completion: ((data: ComAdobeCqAuditPurgePagesInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqAuditPurgePagesWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, auditlogRuleName: auditlogRuleName, auditlogRuleContentpath: auditlogRuleContentpath, auditlogRuleMinimumage: auditlogRuleMinimumage, auditlogRuleTypes: auditlogRuleTypes).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.audit.purge.Pages     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "auditlog.rule.contentpath" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "auditlog.rule.name" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "auditlog.rule.minimumage" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "auditlog.rule.types" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : {
        "values" : "",
        "labels" : ""
      },
      "value" : ""
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter auditlogRuleName: (query)  (optional)
     - parameter auditlogRuleContentpath: (query)  (optional)
     - parameter auditlogRuleMinimumage: (query)  (optional)
     - parameter auditlogRuleTypes: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqAuditPurgePagesInfo> 
     */
    public class func comAdobeCqAuditPurgePagesWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, auditlogRuleName: String? = nil, auditlogRuleContentpath: String? = nil, auditlogRuleMinimumage: Int32? = nil, auditlogRuleTypes: String? = nil) -> RequestBuilder<ComAdobeCqAuditPurgePagesInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.audit.purge.Pages"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "auditlog.rule.name": auditlogRuleName,
            "auditlog.rule.contentpath": auditlogRuleContentpath,
            "auditlog.rule.minimumage": auditlogRuleMinimumage?.encodeToJSON(),
            "auditlog.rule.types": auditlogRuleTypes
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqAuditPurgePagesInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter auditlogRuleName: (query)  (optional)
     - parameter auditlogRuleContentpath: (query)  (optional)
     - parameter auditlogRuleMinimumage: (query)  (optional)
     - parameter auditlogRuleTypes: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqAuditPurgeReplication(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, auditlogRuleName: String? = nil, auditlogRuleContentpath: String? = nil, auditlogRuleMinimumage: Int32? = nil, auditlogRuleTypes: String? = nil, completion: ((data: ComAdobeCqAuditPurgeReplicationInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqAuditPurgeReplicationWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, auditlogRuleName: auditlogRuleName, auditlogRuleContentpath: auditlogRuleContentpath, auditlogRuleMinimumage: auditlogRuleMinimumage, auditlogRuleTypes: auditlogRuleTypes).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.audit.purge.Replication     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "auditlog.rule.contentpath" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "auditlog.rule.name" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "auditlog.rule.minimumage" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "auditlog.rule.types" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : {
        "values" : "",
        "labels" : ""
      },
      "value" : ""
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter auditlogRuleName: (query)  (optional)
     - parameter auditlogRuleContentpath: (query)  (optional)
     - parameter auditlogRuleMinimumage: (query)  (optional)
     - parameter auditlogRuleTypes: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqAuditPurgeReplicationInfo> 
     */
    public class func comAdobeCqAuditPurgeReplicationWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, auditlogRuleName: String? = nil, auditlogRuleContentpath: String? = nil, auditlogRuleMinimumage: Int32? = nil, auditlogRuleTypes: String? = nil) -> RequestBuilder<ComAdobeCqAuditPurgeReplicationInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.audit.purge.Replication"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "auditlog.rule.name": auditlogRuleName,
            "auditlog.rule.contentpath": auditlogRuleContentpath,
            "auditlog.rule.minimumage": auditlogRuleMinimumage?.encodeToJSON(),
            "auditlog.rule.types": auditlogRuleTypes
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqAuditPurgeReplicationInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter keypairId: (query)  (optional)
     - parameter keypairAlias: (query)  (optional)
     - parameter cdnrewriterAttributes: (query)  (optional)
     - parameter cdnRewriterDistributionDomain: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqCdnRewriterImplAWSCloudFrontRewriter(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int32? = nil, keypairId: String? = nil, keypairAlias: String? = nil, cdnrewriterAttributes: [String]? = nil, cdnRewriterDistributionDomain: String? = nil, completion: ((data: ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqCdnRewriterImplAWSCloudFrontRewriterWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, serviceRanking: serviceRanking, keypairId: keypairId, keypairAlias: keypairAlias, cdnrewriterAttributes: cdnrewriterAttributes, cdnRewriterDistributionDomain: cdnRewriterDistributionDomain).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.cdn.rewriter.impl.AWSCloudFrontRewriter     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "keypair.alias" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "cdnrewriter.attributes" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "cdn.rewriter.distribution.domain" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "keypair.id" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "service.ranking" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter keypairId: (query)  (optional)
     - parameter keypairAlias: (query)  (optional)
     - parameter cdnrewriterAttributes: (query)  (optional)
     - parameter cdnRewriterDistributionDomain: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterInfo> 
     */
    public class func comAdobeCqCdnRewriterImplAWSCloudFrontRewriterWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int32? = nil, keypairId: String? = nil, keypairAlias: String? = nil, cdnrewriterAttributes: [String]? = nil, cdnRewriterDistributionDomain: String? = nil) -> RequestBuilder<ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.cdn.rewriter.impl.AWSCloudFrontRewriter"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "service.ranking": serviceRanking?.encodeToJSON(),
            "keypair.id": keypairId,
            "keypair.alias": keypairAlias,
            "cdnrewriter.attributes": cdnrewriterAttributes,
            "cdn.rewriter.distribution.domain": cdnRewriterDistributionDomain
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cdnConfigDistributionDomain: (query)  (optional)
     - parameter cdnConfigEnableRewriting: (query)  (optional)
     - parameter cdnConfigPathPrefixes: (query)  (optional)
     - parameter cdnConfigCdnttl: (query)  (optional)
     - parameter cdnConfigApplicationProtocol: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqCdnRewriterImplCDNConfigServiceImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cdnConfigDistributionDomain: String? = nil, cdnConfigEnableRewriting: Bool? = nil, cdnConfigPathPrefixes: [String]? = nil, cdnConfigCdnttl: Int32? = nil, cdnConfigApplicationProtocol: String? = nil, completion: ((data: ComAdobeCqCdnRewriterImplCDNConfigServiceImplInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqCdnRewriterImplCDNConfigServiceImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cdnConfigDistributionDomain: cdnConfigDistributionDomain, cdnConfigEnableRewriting: cdnConfigEnableRewriting, cdnConfigPathPrefixes: cdnConfigPathPrefixes, cdnConfigCdnttl: cdnConfigCdnttl, cdnConfigApplicationProtocol: cdnConfigApplicationProtocol).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.cdn.rewriter.impl.CDNConfigServiceImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "cdn.config.distribution.domain" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "cdn.config.path.prefixes" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "cdn.config.enable.rewriting" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "cdn.config.cdnttl" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "cdn.config.application.protocol" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cdnConfigDistributionDomain: (query)  (optional)
     - parameter cdnConfigEnableRewriting: (query)  (optional)
     - parameter cdnConfigPathPrefixes: (query)  (optional)
     - parameter cdnConfigCdnttl: (query)  (optional)
     - parameter cdnConfigApplicationProtocol: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqCdnRewriterImplCDNConfigServiceImplInfo> 
     */
    public class func comAdobeCqCdnRewriterImplCDNConfigServiceImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cdnConfigDistributionDomain: String? = nil, cdnConfigEnableRewriting: Bool? = nil, cdnConfigPathPrefixes: [String]? = nil, cdnConfigCdnttl: Int32? = nil, cdnConfigApplicationProtocol: String? = nil) -> RequestBuilder<ComAdobeCqCdnRewriterImplCDNConfigServiceImplInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.cdn.rewriter.impl.CDNConfigServiceImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "cdn.config.distribution.domain": cdnConfigDistributionDomain,
            "cdn.config.enable.rewriting": cdnConfigEnableRewriting,
            "cdn.config.path.prefixes": cdnConfigPathPrefixes,
            "cdn.config.cdnttl": cdnConfigCdnttl?.encodeToJSON(),
            "cdn.config.application.protocol": cdnConfigApplicationProtocol
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqCdnRewriterImplCDNConfigServiceImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter cdnrewriterAttributes: (query)  (optional)
     - parameter cdnRewriterDistributionDomain: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqCdnRewriterImplCDNRewriter(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int32? = nil, cdnrewriterAttributes: [String]? = nil, cdnRewriterDistributionDomain: String? = nil, completion: ((data: ComAdobeCqCdnRewriterImplCDNRewriterInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqCdnRewriterImplCDNRewriterWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, serviceRanking: serviceRanking, cdnrewriterAttributes: cdnrewriterAttributes, cdnRewriterDistributionDomain: cdnRewriterDistributionDomain).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.cdn.rewriter.impl.CDNRewriter     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "cdnrewriter.attributes" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "cdn.rewriter.distribution.domain" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "service.ranking" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter cdnrewriterAttributes: (query)  (optional)
     - parameter cdnRewriterDistributionDomain: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqCdnRewriterImplCDNRewriterInfo> 
     */
    public class func comAdobeCqCdnRewriterImplCDNRewriterWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int32? = nil, cdnrewriterAttributes: [String]? = nil, cdnRewriterDistributionDomain: String? = nil) -> RequestBuilder<ComAdobeCqCdnRewriterImplCDNRewriterInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.cdn.rewriter.impl.CDNRewriter"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "service.ranking": serviceRanking?.encodeToJSON(),
            "cdnrewriter.attributes": cdnrewriterAttributes,
            "cdn.rewriter.distribution.domain": cdnRewriterDistributionDomain
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqCdnRewriterImplCDNRewriterInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter flushAgents: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandle(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, flushAgents: [String]? = nil, completion: ((data: ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, flushAgents: flushAgents).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.cloudconfig.core.impl.ConfigurationReplicationEventHandler     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "flush.agents" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter flushAgents: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleInfo> 
     */
    public class func comAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, flushAgents: [String]? = nil) -> RequestBuilder<ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.cloudconfig.core.impl.ConfigurationReplicationEventHandler"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "flush.agents": flushAgents
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqCommerceAssetHandlerActive: (query)  (optional)
     - parameter cqCommerceAssetHandlerName: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqCommerceImplAssetDynamicImageHandler(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqCommerceAssetHandlerActive: Bool? = nil, cqCommerceAssetHandlerName: String? = nil, completion: ((data: ComAdobeCqCommerceImplAssetDynamicImageHandlerInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqCommerceImplAssetDynamicImageHandlerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqCommerceAssetHandlerActive: cqCommerceAssetHandlerActive, cqCommerceAssetHandlerName: cqCommerceAssetHandlerName).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.commerce.impl.asset.DynamicImageHandler     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "cq.commerce.asset.handler.active" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "cq.commerce.asset.handler.name" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqCommerceAssetHandlerActive: (query)  (optional)
     - parameter cqCommerceAssetHandlerName: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqCommerceImplAssetDynamicImageHandlerInfo> 
     */
    public class func comAdobeCqCommerceImplAssetDynamicImageHandlerWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqCommerceAssetHandlerActive: Bool? = nil, cqCommerceAssetHandlerName: String? = nil) -> RequestBuilder<ComAdobeCqCommerceImplAssetDynamicImageHandlerInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.commerce.impl.asset.DynamicImageHandler"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "cq.commerce.asset.handler.active": cqCommerceAssetHandlerActive,
            "cq.commerce.asset.handler.name": cqCommerceAssetHandlerName
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqCommerceImplAssetDynamicImageHandlerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqCommerceAssetHandlerFallback: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqCommerceImplAssetProductAssetHandlerProviderImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqCommerceAssetHandlerFallback: String? = nil, completion: ((data: ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqCommerceImplAssetProductAssetHandlerProviderImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqCommerceAssetHandlerFallback: cqCommerceAssetHandlerFallback).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.commerce.impl.asset.ProductAssetHandlerProviderImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "cq.commerce.asset.handler.fallback" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqCommerceAssetHandlerFallback: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplInfo> 
     */
    public class func comAdobeCqCommerceImplAssetProductAssetHandlerProviderImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqCommerceAssetHandlerFallback: String? = nil) -> RequestBuilder<ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.commerce.impl.asset.ProductAssetHandlerProviderImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "cq.commerce.asset.handler.fallback": cqCommerceAssetHandlerFallback
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqCommerceAssetHandlerActive: (query)  (optional)
     - parameter cqCommerceAssetHandlerName: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqCommerceImplAssetStaticImageHandler(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqCommerceAssetHandlerActive: Bool? = nil, cqCommerceAssetHandlerName: String? = nil, completion: ((data: ComAdobeCqCommerceImplAssetStaticImageHandlerInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqCommerceImplAssetStaticImageHandlerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqCommerceAssetHandlerActive: cqCommerceAssetHandlerActive, cqCommerceAssetHandlerName: cqCommerceAssetHandlerName).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.commerce.impl.asset.StaticImageHandler     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "cq.commerce.asset.handler.active" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "cq.commerce.asset.handler.name" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqCommerceAssetHandlerActive: (query)  (optional)
     - parameter cqCommerceAssetHandlerName: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqCommerceImplAssetStaticImageHandlerInfo> 
     */
    public class func comAdobeCqCommerceImplAssetStaticImageHandlerWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqCommerceAssetHandlerActive: Bool? = nil, cqCommerceAssetHandlerName: String? = nil) -> RequestBuilder<ComAdobeCqCommerceImplAssetStaticImageHandlerInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.commerce.impl.asset.StaticImageHandler"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "cq.commerce.asset.handler.active": cqCommerceAssetHandlerActive,
            "cq.commerce.asset.handler.name": cqCommerceAssetHandlerName
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqCommerceImplAssetStaticImageHandlerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqCommerceAssetHandlerActive: (query)  (optional)
     - parameter cqCommerceAssetHandlerName: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqCommerceImplAssetVideoHandler(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqCommerceAssetHandlerActive: Bool? = nil, cqCommerceAssetHandlerName: String? = nil, completion: ((data: ComAdobeCqCommerceImplAssetVideoHandlerInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqCommerceImplAssetVideoHandlerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqCommerceAssetHandlerActive: cqCommerceAssetHandlerActive, cqCommerceAssetHandlerName: cqCommerceAssetHandlerName).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.commerce.impl.asset.VideoHandler     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "cq.commerce.asset.handler.active" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "cq.commerce.asset.handler.name" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqCommerceAssetHandlerActive: (query)  (optional)
     - parameter cqCommerceAssetHandlerName: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqCommerceImplAssetVideoHandlerInfo> 
     */
    public class func comAdobeCqCommerceImplAssetVideoHandlerWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqCommerceAssetHandlerActive: Bool? = nil, cqCommerceAssetHandlerName: String? = nil) -> RequestBuilder<ComAdobeCqCommerceImplAssetVideoHandlerInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.commerce.impl.asset.VideoHandler"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "cq.commerce.asset.handler.active": cqCommerceAssetHandlerActive,
            "cq.commerce.asset.handler.name": cqCommerceAssetHandlerName
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqCommerceImplAssetVideoHandlerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqCommercePromotionRoot: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqCommerceImplPromotionPromotionManagerImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqCommercePromotionRoot: String? = nil, completion: ((data: ComAdobeCqCommerceImplPromotionPromotionManagerImplInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqCommerceImplPromotionPromotionManagerImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqCommercePromotionRoot: cqCommercePromotionRoot).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.commerce.impl.promotion.PromotionManagerImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "cq.commerce.promotion.root" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqCommercePromotionRoot: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqCommerceImplPromotionPromotionManagerImplInfo> 
     */
    public class func comAdobeCqCommerceImplPromotionPromotionManagerImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqCommercePromotionRoot: String? = nil) -> RequestBuilder<ComAdobeCqCommerceImplPromotionPromotionManagerImplInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.commerce.impl.promotion.PromotionManagerImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "cq.commerce.promotion.root": cqCommercePromotionRoot
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqCommerceImplPromotionPromotionManagerImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqCommerceCataloggeneratorBucketsize: (query)  (optional)
     - parameter cqCommerceCataloggeneratorBucketname: (query)  (optional)
     - parameter cqCommerceCataloggeneratorExcludedtemplateproperties: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqCommerceCataloggeneratorBucketsize: Int32? = nil, cqCommerceCataloggeneratorBucketname: String? = nil, cqCommerceCataloggeneratorExcludedtemplateproperties: [String]? = nil, completion: ((data: ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqCommerceCataloggeneratorBucketsize: cqCommerceCataloggeneratorBucketsize, cqCommerceCataloggeneratorBucketname: cqCommerceCataloggeneratorBucketname, cqCommerceCataloggeneratorExcludedtemplateproperties: cqCommerceCataloggeneratorExcludedtemplateproperties).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.commerce.pim.impl.cataloggenerator.CatalogGeneratorImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "cq.commerce.cataloggenerator.bucketname" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "cq.commerce.cataloggenerator.bucketsize" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "cq.commerce.cataloggenerator.excludedtemplateproperties" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqCommerceCataloggeneratorBucketsize: (query)  (optional)
     - parameter cqCommerceCataloggeneratorBucketname: (query)  (optional)
     - parameter cqCommerceCataloggeneratorExcludedtemplateproperties: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplInfo> 
     */
    public class func comAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqCommerceCataloggeneratorBucketsize: Int32? = nil, cqCommerceCataloggeneratorBucketname: String? = nil, cqCommerceCataloggeneratorExcludedtemplateproperties: [String]? = nil) -> RequestBuilder<ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.commerce.pim.impl.cataloggenerator.CatalogGeneratorImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "cq.commerce.cataloggenerator.bucketsize": cqCommerceCataloggeneratorBucketsize?.encodeToJSON(),
            "cq.commerce.cataloggenerator.bucketname": cqCommerceCataloggeneratorBucketname,
            "cq.commerce.cataloggenerator.excludedtemplateproperties": cqCommerceCataloggeneratorExcludedtemplateproperties
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqCommercePageeventlistenerEnabled: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqCommercePimImplPageEventListener(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqCommercePageeventlistenerEnabled: Bool? = nil, completion: ((data: ComAdobeCqCommercePimImplPageEventListenerInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqCommercePimImplPageEventListenerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqCommercePageeventlistenerEnabled: cqCommercePageeventlistenerEnabled).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.commerce.pim.impl.PageEventListener     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "cq.commerce.pageeventlistener.enabled" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqCommercePageeventlistenerEnabled: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqCommercePimImplPageEventListenerInfo> 
     */
    public class func comAdobeCqCommercePimImplPageEventListenerWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqCommercePageeventlistenerEnabled: Bool? = nil) -> RequestBuilder<ComAdobeCqCommercePimImplPageEventListenerInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.commerce.pim.impl.PageEventListener"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "cq.commerce.pageeventlistener.enabled": cqCommercePageeventlistenerEnabled
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqCommercePimImplPageEventListenerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter feedGeneratorAlgorithm: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqCommercePimImplProductfeedProductFeedServiceImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, feedGeneratorAlgorithm: String? = nil, completion: ((data: ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqCommercePimImplProductfeedProductFeedServiceImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, feedGeneratorAlgorithm: feedGeneratorAlgorithm).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.commerce.pim.impl.productfeed.ProductFeedServiceImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "Feed generator algorithm" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : {
        "values" : "",
        "labels" : ""
      },
      "value" : ""
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter feedGeneratorAlgorithm: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplInfo> 
     */
    public class func comAdobeCqCommercePimImplProductfeedProductFeedServiceImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, feedGeneratorAlgorithm: String? = nil) -> RequestBuilder<ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.commerce.pim.impl.productfeed.ProductFeedServiceImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "Feed generator algorithm": feedGeneratorAlgorithm
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter reportingservicesUrl: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqContentinsightImplReportingServicesSettingsProvider(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, reportingservicesUrl: String? = nil, completion: ((data: ComAdobeCqContentinsightImplReportingServicesSettingsProviderInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqContentinsightImplReportingServicesSettingsProviderWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, reportingservicesUrl: reportingservicesUrl).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.contentinsight.impl.ReportingServicesSettingsProvider     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "reportingservices.url" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter reportingservicesUrl: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqContentinsightImplReportingServicesSettingsProviderInfo> 
     */
    public class func comAdobeCqContentinsightImplReportingServicesSettingsProviderWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, reportingservicesUrl: String? = nil) -> RequestBuilder<ComAdobeCqContentinsightImplReportingServicesSettingsProviderInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.contentinsight.impl.ReportingServicesSettingsProvider"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "reportingservices.url": reportingservicesUrl
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqContentinsightImplReportingServicesSettingsProviderInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter brightedgeUrl: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqContentinsightImplServletsBrightEdgeProxyServlet(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, brightedgeUrl: String? = nil, completion: ((data: ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqContentinsightImplServletsBrightEdgeProxyServletWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, brightedgeUrl: brightedgeUrl).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.contentinsight.impl.servlets.BrightEdgeProxyServlet     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "brightedge.url" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter brightedgeUrl: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletInfo> 
     */
    public class func comAdobeCqContentinsightImplServletsBrightEdgeProxyServletWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, brightedgeUrl: String? = nil) -> RequestBuilder<ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.contentinsight.impl.servlets.BrightEdgeProxyServlet"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "brightedge.url": brightedgeUrl
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter reportingservicesProxyWhitelist: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqContentinsightImplServletsReportingServicesProxyServle(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, reportingservicesProxyWhitelist: [String]? = nil, completion: ((data: ComAdobeCqContentinsightImplServletsReportingServicesProxyServleInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqContentinsightImplServletsReportingServicesProxyServleWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, reportingservicesProxyWhitelist: reportingservicesProxyWhitelist).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.contentinsight.impl.servlets.ReportingServicesProxyServlet     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "reportingservices.proxy.whitelist" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter reportingservicesProxyWhitelist: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqContentinsightImplServletsReportingServicesProxyServleInfo> 
     */
    public class func comAdobeCqContentinsightImplServletsReportingServicesProxyServleWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, reportingservicesProxyWhitelist: [String]? = nil) -> RequestBuilder<ComAdobeCqContentinsightImplServletsReportingServicesProxyServleInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.contentinsight.impl.servlets.ReportingServicesProxyServlet"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "reportingservices.proxy.whitelist": reportingservicesProxyWhitelist
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqContentinsightImplServletsReportingServicesProxyServleInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter damCfmComponentResourceType: (query)  (optional)
     - parameter damCfmComponentFileReferenceProp: (query)  (optional)
     - parameter damCfmComponentElementsProp: (query)  (optional)
     - parameter damCfmComponentVariationProp: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqDamCfmImplComponentComponentConfigImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, damCfmComponentResourceType: String? = nil, damCfmComponentFileReferenceProp: String? = nil, damCfmComponentElementsProp: String? = nil, damCfmComponentVariationProp: String? = nil, completion: ((data: ComAdobeCqDamCfmImplComponentComponentConfigImplInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqDamCfmImplComponentComponentConfigImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, damCfmComponentResourceType: damCfmComponentResourceType, damCfmComponentFileReferenceProp: damCfmComponentFileReferenceProp, damCfmComponentElementsProp: damCfmComponentElementsProp, damCfmComponentVariationProp: damCfmComponentVariationProp).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.dam.cfm.impl.component.ComponentConfigImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "dam.cfm.component.variationProp" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "dam.cfm.component.fileReferenceProp" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "dam.cfm.component.resourceType" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "dam.cfm.component.elementsProp" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter damCfmComponentResourceType: (query)  (optional)
     - parameter damCfmComponentFileReferenceProp: (query)  (optional)
     - parameter damCfmComponentElementsProp: (query)  (optional)
     - parameter damCfmComponentVariationProp: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqDamCfmImplComponentComponentConfigImplInfo> 
     */
    public class func comAdobeCqDamCfmImplComponentComponentConfigImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, damCfmComponentResourceType: String? = nil, damCfmComponentFileReferenceProp: String? = nil, damCfmComponentElementsProp: String? = nil, damCfmComponentVariationProp: String? = nil) -> RequestBuilder<ComAdobeCqDamCfmImplComponentComponentConfigImplInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.dam.cfm.impl.component.ComponentConfigImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "dam.cfm.component.resourceType": damCfmComponentResourceType,
            "dam.cfm.component.fileReferenceProp": damCfmComponentFileReferenceProp,
            "dam.cfm.component.elementsProp": damCfmComponentElementsProp,
            "dam.cfm.component.variationProp": damCfmComponentVariationProp
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqDamCfmImplComponentComponentConfigImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter damCfmResourceTypes: (query)  (optional)
     - parameter damCfmReferenceProperties: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqDamCfmImplConfFeatureConfigImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, damCfmResourceTypes: [String]? = nil, damCfmReferenceProperties: [String]? = nil, completion: ((data: ComAdobeCqDamCfmImplConfFeatureConfigImplInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqDamCfmImplConfFeatureConfigImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, damCfmResourceTypes: damCfmResourceTypes, damCfmReferenceProperties: damCfmReferenceProperties).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.dam.cfm.impl.conf.FeatureConfigImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "dam.cfm.referenceProperties" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "dam.cfm.resourceTypes" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter damCfmResourceTypes: (query)  (optional)
     - parameter damCfmReferenceProperties: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqDamCfmImplConfFeatureConfigImplInfo> 
     */
    public class func comAdobeCqDamCfmImplConfFeatureConfigImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, damCfmResourceTypes: [String]? = nil, damCfmReferenceProperties: [String]? = nil) -> RequestBuilder<ComAdobeCqDamCfmImplConfFeatureConfigImplInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.dam.cfm.impl.conf.FeatureConfigImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "dam.cfm.resourceTypes": damCfmResourceTypes,
            "dam.cfm.referenceProperties": damCfmReferenceProperties
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqDamCfmImplConfFeatureConfigImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter pipelineType: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqDamCfmImplContentRewriterAssetProcessor(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, pipelineType: String? = nil, completion: ((data: ComAdobeCqDamCfmImplContentRewriterAssetProcessorInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqDamCfmImplContentRewriterAssetProcessorWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, pipelineType: pipelineType).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.dam.cfm.impl.content.rewriter.AssetProcessor     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "pipeline.type" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter pipelineType: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqDamCfmImplContentRewriterAssetProcessorInfo> 
     */
    public class func comAdobeCqDamCfmImplContentRewriterAssetProcessorWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, pipelineType: String? = nil) -> RequestBuilder<ComAdobeCqDamCfmImplContentRewriterAssetProcessorInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.dam.cfm.impl.content.rewriter.AssetProcessor"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "pipeline.type": pipelineType
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqDamCfmImplContentRewriterAssetProcessorInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter pipelineType: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqDamCfmImplContentRewriterParRangeFilter(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, pipelineType: String? = nil, completion: ((data: ComAdobeCqDamCfmImplContentRewriterParRangeFilterInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqDamCfmImplContentRewriterParRangeFilterWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, pipelineType: pipelineType).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.dam.cfm.impl.content.rewriter.ParRangeFilter     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "pipeline.type" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter pipelineType: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqDamCfmImplContentRewriterParRangeFilterInfo> 
     */
    public class func comAdobeCqDamCfmImplContentRewriterParRangeFilterWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, pipelineType: String? = nil) -> RequestBuilder<ComAdobeCqDamCfmImplContentRewriterParRangeFilterInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.dam.cfm.impl.content.rewriter.ParRangeFilter"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "pipeline.type": pipelineType
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqDamCfmImplContentRewriterParRangeFilterInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter pipelineType: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqDamCfmImplContentRewriterPayloadFilter(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, pipelineType: String? = nil, completion: ((data: ComAdobeCqDamCfmImplContentRewriterPayloadFilterInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqDamCfmImplContentRewriterPayloadFilterWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, pipelineType: pipelineType).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.dam.cfm.impl.content.rewriter.PayloadFilter     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "pipeline.type" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter pipelineType: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqDamCfmImplContentRewriterPayloadFilterInfo> 
     */
    public class func comAdobeCqDamCfmImplContentRewriterPayloadFilterWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, pipelineType: String? = nil) -> RequestBuilder<ComAdobeCqDamCfmImplContentRewriterPayloadFilterInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.dam.cfm.impl.content.rewriter.PayloadFilter"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "pipeline.type": pipelineType
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqDamCfmImplContentRewriterPayloadFilterInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter maxMemory: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqDamDmProcessImagePTiffManagerImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, maxMemory: Int32? = nil, completion: ((data: ComAdobeCqDamDmProcessImagePTiffManagerImplInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqDamDmProcessImagePTiffManagerImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, maxMemory: maxMemory).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.dam.dm.process.image.PTiffManagerImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "maxMemory" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter maxMemory: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqDamDmProcessImagePTiffManagerImplInfo> 
     */
    public class func comAdobeCqDamDmProcessImagePTiffManagerImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, maxMemory: Int32? = nil) -> RequestBuilder<ComAdobeCqDamDmProcessImagePTiffManagerImplInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.dam.dm.process.image.PTiffManagerImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "maxMemory": maxMemory?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqDamDmProcessImagePTiffManagerImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter dmreplicateonmodifyEnabled: (query)  (optional)
     - parameter dmreplicateonmodifyForcesyncdeletes: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorker(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, dmreplicateonmodifyEnabled: Bool? = nil, dmreplicateonmodifyForcesyncdeletes: Bool? = nil, completion: ((data: ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, dmreplicateonmodifyEnabled: dmreplicateonmodifyEnabled, dmreplicateonmodifyForcesyncdeletes: dmreplicateonmodifyForcesyncdeletes).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.dam.ips.impl.replication.trigger.ReplicateOnModifyWorker     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "dmreplicateonmodify.enabled" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "dmreplicateonmodify.forcesyncdeletes" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter dmreplicateonmodifyEnabled: (query)  (optional)
     - parameter dmreplicateonmodifyForcesyncdeletes: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerInfo> 
     */
    public class func comAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, dmreplicateonmodifyEnabled: Bool? = nil, dmreplicateonmodifyForcesyncdeletes: Bool? = nil) -> RequestBuilder<ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.dam.ips.impl.replication.trigger.ReplicateOnModifyWorker"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "dmreplicateonmodify.enabled": dmreplicateonmodifyEnabled,
            "dmreplicateonmodify.forcesyncdeletes": dmreplicateonmodifyForcesyncdeletes
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter comAdobeDamMacSyncClientSoTimeout: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqDamMacSyncHelperImplMACSyncClientImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, comAdobeDamMacSyncClientSoTimeout: Int32? = nil, completion: ((data: ComAdobeCqDamMacSyncHelperImplMACSyncClientImplInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqDamMacSyncHelperImplMACSyncClientImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, comAdobeDamMacSyncClientSoTimeout: comAdobeDamMacSyncClientSoTimeout).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.dam.mac.sync.helper.impl.MACSyncClientImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "com.adobe.dam.mac.sync.client.so.timeout" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter comAdobeDamMacSyncClientSoTimeout: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqDamMacSyncHelperImplMACSyncClientImplInfo> 
     */
    public class func comAdobeCqDamMacSyncHelperImplMACSyncClientImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, comAdobeDamMacSyncClientSoTimeout: Int32? = nil) -> RequestBuilder<ComAdobeCqDamMacSyncHelperImplMACSyncClientImplInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.dam.mac.sync.helper.impl.MACSyncClientImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "com.adobe.dam.mac.sync.client.so.timeout": comAdobeDamMacSyncClientSoTimeout?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqDamMacSyncHelperImplMACSyncClientImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter comAdobeCqDamMacSyncDamsyncserviceRegisteredPaths: (query)  (optional)
     - parameter comAdobeCqDamMacSyncDamsyncserviceSyncRenditions: (query)  (optional)
     - parameter comAdobeCqDamMacSyncDamsyncserviceReplicateThreadWaitMs: (query)  (optional)
     - parameter comAdobeCqDamMacSyncDamsyncservicePlatform: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqDamMacSyncImplDAMSyncServiceImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, comAdobeCqDamMacSyncDamsyncserviceRegisteredPaths: [String]? = nil, comAdobeCqDamMacSyncDamsyncserviceSyncRenditions: Bool? = nil, comAdobeCqDamMacSyncDamsyncserviceReplicateThreadWaitMs: Int32? = nil, comAdobeCqDamMacSyncDamsyncservicePlatform: String? = nil, completion: ((data: ComAdobeCqDamMacSyncImplDAMSyncServiceImplInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqDamMacSyncImplDAMSyncServiceImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, comAdobeCqDamMacSyncDamsyncserviceRegisteredPaths: comAdobeCqDamMacSyncDamsyncserviceRegisteredPaths, comAdobeCqDamMacSyncDamsyncserviceSyncRenditions: comAdobeCqDamMacSyncDamsyncserviceSyncRenditions, comAdobeCqDamMacSyncDamsyncserviceReplicateThreadWaitMs: comAdobeCqDamMacSyncDamsyncserviceReplicateThreadWaitMs, comAdobeCqDamMacSyncDamsyncservicePlatform: comAdobeCqDamMacSyncDamsyncservicePlatform).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.dam.mac.sync.impl.DAMSyncServiceImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "com.adobe.cq.dam.mac.sync.damsyncservice.replicate.thread.wait.ms" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "com.adobe.cq.dam.mac.sync.damsyncservice.sync.renditions" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "com.adobe.cq.dam.mac.sync.damsyncservice.platform" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : {
        "values" : "",
        "labels" : ""
      },
      "value" : ""
    },
    "com.adobe.cq.dam.mac.sync.damsyncservice.registered_paths" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter comAdobeCqDamMacSyncDamsyncserviceRegisteredPaths: (query)  (optional)
     - parameter comAdobeCqDamMacSyncDamsyncserviceSyncRenditions: (query)  (optional)
     - parameter comAdobeCqDamMacSyncDamsyncserviceReplicateThreadWaitMs: (query)  (optional)
     - parameter comAdobeCqDamMacSyncDamsyncservicePlatform: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqDamMacSyncImplDAMSyncServiceImplInfo> 
     */
    public class func comAdobeCqDamMacSyncImplDAMSyncServiceImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, comAdobeCqDamMacSyncDamsyncserviceRegisteredPaths: [String]? = nil, comAdobeCqDamMacSyncDamsyncserviceSyncRenditions: Bool? = nil, comAdobeCqDamMacSyncDamsyncserviceReplicateThreadWaitMs: Int32? = nil, comAdobeCqDamMacSyncDamsyncservicePlatform: String? = nil) -> RequestBuilder<ComAdobeCqDamMacSyncImplDAMSyncServiceImplInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.dam.mac.sync.impl.DAMSyncServiceImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "com.adobe.cq.dam.mac.sync.damsyncservice.registered_paths": comAdobeCqDamMacSyncDamsyncserviceRegisteredPaths,
            "com.adobe.cq.dam.mac.sync.damsyncservice.sync.renditions": comAdobeCqDamMacSyncDamsyncserviceSyncRenditions,
            "com.adobe.cq.dam.mac.sync.damsyncservice.replicate.thread.wait.ms": comAdobeCqDamMacSyncDamsyncserviceReplicateThreadWaitMs?.encodeToJSON(),
            "com.adobe.cq.dam.mac.sync.damsyncservice.platform": comAdobeCqDamMacSyncDamsyncservicePlatform
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqDamMacSyncImplDAMSyncServiceImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter nuiEnabled: (query)  (optional)
     - parameter nuiServiceUrl: (query)  (optional)
     - parameter nuiApiKey: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqDamProcessorNuiImplNuiAssetProcessor(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, nuiEnabled: Bool? = nil, nuiServiceUrl: String? = nil, nuiApiKey: String? = nil, completion: ((data: ComAdobeCqDamProcessorNuiImplNuiAssetProcessorInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqDamProcessorNuiImplNuiAssetProcessorWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, nuiEnabled: nuiEnabled, nuiServiceUrl: nuiServiceUrl, nuiApiKey: nuiApiKey).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.dam.processor.nui.impl.NuiAssetProcessor     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "nuiServiceUrl" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "nuiApiKey" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "nuiEnabled" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter nuiEnabled: (query)  (optional)
     - parameter nuiServiceUrl: (query)  (optional)
     - parameter nuiApiKey: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqDamProcessorNuiImplNuiAssetProcessorInfo> 
     */
    public class func comAdobeCqDamProcessorNuiImplNuiAssetProcessorWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, nuiEnabled: Bool? = nil, nuiServiceUrl: String? = nil, nuiApiKey: String? = nil) -> RequestBuilder<ComAdobeCqDamProcessorNuiImplNuiAssetProcessorInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.dam.processor.nui.impl.NuiAssetProcessor"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "nuiEnabled": nuiEnabled,
            "nuiServiceUrl": nuiServiceUrl,
            "nuiApiKey": nuiApiKey
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqDamProcessorNuiImplNuiAssetProcessorInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter tcpPort: (query)  (optional)
     - parameter allowRemoteAccess: (query)  (optional)
     - parameter maxRenderRgnPixels: (query)  (optional)
     - parameter maxMessageSize: (query)  (optional)
     - parameter randomAccessUrlTimeout: (query)  (optional)
     - parameter workerThreads: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqDamS7imagingImplIsImageServerComponent(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, tcpPort: String? = nil, allowRemoteAccess: Bool? = nil, maxRenderRgnPixels: String? = nil, maxMessageSize: String? = nil, randomAccessUrlTimeout: Int32? = nil, workerThreads: Int32? = nil, completion: ((data: ComAdobeCqDamS7imagingImplIsImageServerComponentInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqDamS7imagingImplIsImageServerComponentWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, tcpPort: tcpPort, allowRemoteAccess: allowRemoteAccess, maxRenderRgnPixels: maxRenderRgnPixels, maxMessageSize: maxMessageSize, randomAccessUrlTimeout: randomAccessUrlTimeout, workerThreads: workerThreads).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.dam.s7imaging.impl.is.ImageServerComponent     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "MaxRenderRgnPixels" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "RandomAccessUrlTimeout" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "AllowRemoteAccess" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "TcpPort" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "MaxMessageSize" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "WorkerThreads" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter tcpPort: (query)  (optional)
     - parameter allowRemoteAccess: (query)  (optional)
     - parameter maxRenderRgnPixels: (query)  (optional)
     - parameter maxMessageSize: (query)  (optional)
     - parameter randomAccessUrlTimeout: (query)  (optional)
     - parameter workerThreads: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqDamS7imagingImplIsImageServerComponentInfo> 
     */
    public class func comAdobeCqDamS7imagingImplIsImageServerComponentWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, tcpPort: String? = nil, allowRemoteAccess: Bool? = nil, maxRenderRgnPixels: String? = nil, maxMessageSize: String? = nil, randomAccessUrlTimeout: Int32? = nil, workerThreads: Int32? = nil) -> RequestBuilder<ComAdobeCqDamS7imagingImplIsImageServerComponentInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.dam.s7imaging.impl.is.ImageServerComponent"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "TcpPort": tcpPort,
            "AllowRemoteAccess": allowRemoteAccess,
            "MaxRenderRgnPixels": maxRenderRgnPixels,
            "MaxMessageSize": maxMessageSize,
            "RandomAccessUrlTimeout": randomAccessUrlTimeout?.encodeToJSON(),
            "WorkerThreads": workerThreads?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqDamS7imagingImplIsImageServerComponentInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cacheEnable: (query)  (optional)
     - parameter cacheRootPaths: (query)  (optional)
     - parameter cacheMaxSize: (query)  (optional)
     - parameter cacheMaxEntries: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqDamS7imagingImplPsPlatformServerServlet(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cacheEnable: Bool? = nil, cacheRootPaths: [String]? = nil, cacheMaxSize: Int32? = nil, cacheMaxEntries: Int32? = nil, completion: ((data: ComAdobeCqDamS7imagingImplPsPlatformServerServletInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqDamS7imagingImplPsPlatformServerServletWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cacheEnable: cacheEnable, cacheRootPaths: cacheRootPaths, cacheMaxSize: cacheMaxSize, cacheMaxEntries: cacheMaxEntries).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.dam.s7imaging.impl.ps.PlatformServerServlet     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "cache.enable" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "cache.rootPaths" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "cache.maxEntries" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "cache.maxSize" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cacheEnable: (query)  (optional)
     - parameter cacheRootPaths: (query)  (optional)
     - parameter cacheMaxSize: (query)  (optional)
     - parameter cacheMaxEntries: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqDamS7imagingImplPsPlatformServerServletInfo> 
     */
    public class func comAdobeCqDamS7imagingImplPsPlatformServerServletWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cacheEnable: Bool? = nil, cacheRootPaths: [String]? = nil, cacheMaxSize: Int32? = nil, cacheMaxEntries: Int32? = nil) -> RequestBuilder<ComAdobeCqDamS7imagingImplPsPlatformServerServletInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.dam.s7imaging.impl.ps.PlatformServerServlet"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "cache.enable": cacheEnable,
            "cache.rootPaths": cacheRootPaths,
            "cache.maxSize": cacheMaxSize?.encodeToJSON(),
            "cache.maxEntries": cacheMaxEntries?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqDamS7imagingImplPsPlatformServerServletInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter pathPrefix: (query)  (optional)
     - parameter createVersion: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqDamWebdavImplIoAssetIOHandler(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int32? = nil, pathPrefix: String? = nil, createVersion: Bool? = nil, completion: ((data: ComAdobeCqDamWebdavImplIoAssetIOHandlerInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqDamWebdavImplIoAssetIOHandlerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, serviceRanking: serviceRanking, pathPrefix: pathPrefix, createVersion: createVersion).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.dam.webdav.impl.io.AssetIOHandler     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "createVersion" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "service.ranking" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "pathPrefix" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter pathPrefix: (query)  (optional)
     - parameter createVersion: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqDamWebdavImplIoAssetIOHandlerInfo> 
     */
    public class func comAdobeCqDamWebdavImplIoAssetIOHandlerWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int32? = nil, pathPrefix: String? = nil, createVersion: Bool? = nil) -> RequestBuilder<ComAdobeCqDamWebdavImplIoAssetIOHandlerInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.dam.webdav.impl.io.AssetIOHandler"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "service.ranking": serviceRanking?.encodeToJSON(),
            "pathPrefix": pathPrefix,
            "createVersion": createVersion
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqDamWebdavImplIoAssetIOHandlerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqDamWebdavVersionLinkingEnable: (query)  (optional)
     - parameter cqDamWebdavVersionLinkingSchedulerPeriod: (query)  (optional)
     - parameter cqDamWebdavVersionLinkingStagingTimeout: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJob(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqDamWebdavVersionLinkingEnable: Bool? = nil, cqDamWebdavVersionLinkingSchedulerPeriod: Int32? = nil, cqDamWebdavVersionLinkingStagingTimeout: Int32? = nil, completion: ((data: ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqDamWebdavVersionLinkingEnable: cqDamWebdavVersionLinkingEnable, cqDamWebdavVersionLinkingSchedulerPeriod: cqDamWebdavVersionLinkingSchedulerPeriod, cqDamWebdavVersionLinkingStagingTimeout: cqDamWebdavVersionLinkingStagingTimeout).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.dam.webdav.impl.io.DamWebdavVersionLinkingJob     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "cq.dam.webdav.version.linking.enable" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "cq.dam.webdav.version.linking.scheduler.period" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "cq.dam.webdav.version.linking.staging.timeout" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqDamWebdavVersionLinkingEnable: (query)  (optional)
     - parameter cqDamWebdavVersionLinkingSchedulerPeriod: (query)  (optional)
     - parameter cqDamWebdavVersionLinkingStagingTimeout: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobInfo> 
     */
    public class func comAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqDamWebdavVersionLinkingEnable: Bool? = nil, cqDamWebdavVersionLinkingSchedulerPeriod: Int32? = nil, cqDamWebdavVersionLinkingStagingTimeout: Int32? = nil) -> RequestBuilder<ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.dam.webdav.impl.io.DamWebdavVersionLinkingJob"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "cq.dam.webdav.version.linking.enable": cqDamWebdavVersionLinkingEnable,
            "cq.dam.webdav.version.linking.scheduler.period": cqDamWebdavVersionLinkingSchedulerPeriod?.encodeToJSON(),
            "cq.dam.webdav.version.linking.staging.timeout": cqDamWebdavVersionLinkingStagingTimeout?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter comDayCqDamCoreImplIoSpecialFilesHandlerFilepatters: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqDamWebdavImplIoSpecialFilesHandler(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, comDayCqDamCoreImplIoSpecialFilesHandlerFilepatters: [String]? = nil, completion: ((data: ComAdobeCqDamWebdavImplIoSpecialFilesHandlerInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqDamWebdavImplIoSpecialFilesHandlerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, comDayCqDamCoreImplIoSpecialFilesHandlerFilepatters: comDayCqDamCoreImplIoSpecialFilesHandlerFilepatters).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.dam.webdav.impl.io.SpecialFilesHandler     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "com.day.cq.dam.core.impl.io.SpecialFilesHandler.filepatters" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter comDayCqDamCoreImplIoSpecialFilesHandlerFilepatters: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqDamWebdavImplIoSpecialFilesHandlerInfo> 
     */
    public class func comAdobeCqDamWebdavImplIoSpecialFilesHandlerWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, comDayCqDamCoreImplIoSpecialFilesHandlerFilepatters: [String]? = nil) -> RequestBuilder<ComAdobeCqDamWebdavImplIoSpecialFilesHandlerInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.dam.webdav.impl.io.SpecialFilesHandler"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "com.day.cq.dam.core.impl.io.SpecialFilesHandler.filepatters": comDayCqDamCoreImplIoSpecialFilesHandlerFilepatters
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqDamWebdavImplIoSpecialFilesHandlerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter firewallDeserializationWhitelist: (query)  (optional)
     - parameter firewallDeserializationBlacklist: (query)  (optional)
     - parameter firewallDeserializationDiagnostics: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqDeserfwImplDeserializationFirewallImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, firewallDeserializationWhitelist: [String]? = nil, firewallDeserializationBlacklist: [String]? = nil, firewallDeserializationDiagnostics: String? = nil, completion: ((data: ComAdobeCqDeserfwImplDeserializationFirewallImplInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqDeserfwImplDeserializationFirewallImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, firewallDeserializationWhitelist: firewallDeserializationWhitelist, firewallDeserializationBlacklist: firewallDeserializationBlacklist, firewallDeserializationDiagnostics: firewallDeserializationDiagnostics).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.deserfw.impl.DeserializationFirewallImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "firewall.deserialization.blacklist" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "firewall.deserialization.whitelist" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "firewall.deserialization.diagnostics" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter firewallDeserializationWhitelist: (query)  (optional)
     - parameter firewallDeserializationBlacklist: (query)  (optional)
     - parameter firewallDeserializationDiagnostics: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqDeserfwImplDeserializationFirewallImplInfo> 
     */
    public class func comAdobeCqDeserfwImplDeserializationFirewallImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, firewallDeserializationWhitelist: [String]? = nil, firewallDeserializationBlacklist: [String]? = nil, firewallDeserializationDiagnostics: String? = nil) -> RequestBuilder<ComAdobeCqDeserfwImplDeserializationFirewallImplInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.deserfw.impl.DeserializationFirewallImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "firewall.deserialization.whitelist": firewallDeserializationWhitelist,
            "firewall.deserialization.blacklist": firewallDeserializationBlacklist,
            "firewall.deserialization.diagnostics": firewallDeserializationDiagnostics
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqDeserfwImplDeserializationFirewallImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter connectionTimeout: (query)  (optional)
     - parameter socketTimeout: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqDtmImplServiceDTMWebServiceImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, connectionTimeout: Int32? = nil, socketTimeout: Int32? = nil, completion: ((data: ComAdobeCqDtmImplServiceDTMWebServiceImplInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqDtmImplServiceDTMWebServiceImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, connectionTimeout: connectionTimeout, socketTimeout: socketTimeout).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.dtm.impl.service.DTMWebServiceImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "connection.timeout" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "socket.timeout" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter connectionTimeout: (query)  (optional)
     - parameter socketTimeout: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqDtmImplServiceDTMWebServiceImplInfo> 
     */
    public class func comAdobeCqDtmImplServiceDTMWebServiceImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, connectionTimeout: Int32? = nil, socketTimeout: Int32? = nil) -> RequestBuilder<ComAdobeCqDtmImplServiceDTMWebServiceImplInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.dtm.impl.service.DTMWebServiceImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "connection.timeout": connectionTimeout?.encodeToJSON(),
            "socket.timeout": socketTimeout?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqDtmImplServiceDTMWebServiceImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter dtmStagingIpWhitelist: (query)  (optional)
     - parameter dtmProductionIpWhitelist: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqDtmImplServletsDTMDeployHookServlet(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, dtmStagingIpWhitelist: [String]? = nil, dtmProductionIpWhitelist: [String]? = nil, completion: ((data: ComAdobeCqDtmImplServletsDTMDeployHookServletInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqDtmImplServletsDTMDeployHookServletWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, dtmStagingIpWhitelist: dtmStagingIpWhitelist, dtmProductionIpWhitelist: dtmProductionIpWhitelist).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.dtm.impl.servlets.DTMDeployHookServlet     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "dtm.staging.ip.whitelist" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "dtm.production.ip.whitelist" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter dtmStagingIpWhitelist: (query)  (optional)
     - parameter dtmProductionIpWhitelist: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqDtmImplServletsDTMDeployHookServletInfo> 
     */
    public class func comAdobeCqDtmImplServletsDTMDeployHookServletWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, dtmStagingIpWhitelist: [String]? = nil, dtmProductionIpWhitelist: [String]? = nil) -> RequestBuilder<ComAdobeCqDtmImplServletsDTMDeployHookServletInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.dtm.impl.servlets.DTMDeployHookServlet"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "dtm.staging.ip.whitelist": dtmStagingIpWhitelist,
            "dtm.production.ip.whitelist": dtmProductionIpWhitelist
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqDtmImplServletsDTMDeployHookServletInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter endpointUri: (query)  (optional)
     - parameter connectionTimeout: (query)  (optional)
     - parameter socketTimeout: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqDtmReactorImplServiceWebServiceImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, endpointUri: String? = nil, connectionTimeout: Int32? = nil, socketTimeout: Int32? = nil, completion: ((data: ComAdobeCqDtmReactorImplServiceWebServiceImplInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqDtmReactorImplServiceWebServiceImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, endpointUri: endpointUri, connectionTimeout: connectionTimeout, socketTimeout: socketTimeout).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.dtm.reactor.impl.service.WebServiceImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "socketTimeout" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "endpointUri" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "connectionTimeout" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter endpointUri: (query)  (optional)
     - parameter connectionTimeout: (query)  (optional)
     - parameter socketTimeout: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqDtmReactorImplServiceWebServiceImplInfo> 
     */
    public class func comAdobeCqDtmReactorImplServiceWebServiceImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, endpointUri: String? = nil, connectionTimeout: Int32? = nil, socketTimeout: Int32? = nil) -> RequestBuilder<ComAdobeCqDtmReactorImplServiceWebServiceImplInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.dtm.reactor.impl.service.WebServiceImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "endpointUri": endpointUri,
            "connectionTimeout": connectionTimeout?.encodeToJSON(),
            "socketTimeout": socketTimeout?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqDtmReactorImplServiceWebServiceImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter enabled: (query)  (optional)
     - parameter disabledForGroups: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqExperiencelogImplExperienceLogConfigServlet(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, enabled: Bool? = nil, disabledForGroups: [String]? = nil, completion: ((data: ComAdobeCqExperiencelogImplExperienceLogConfigServletInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqExperiencelogImplExperienceLogConfigServletWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, enabled: enabled, disabledForGroups: disabledForGroups).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.experiencelog.impl.ExperienceLogConfigServlet     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "service_location" : "service_location",
  "bundle_location" : "bundle_location",
  "description" : "description",
  "pid" : "pid",
  "additionalProperties" : "additionalProperties",
  "title" : "title",
  "properties" : {
    "enabled" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "disabledForGroups" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter enabled: (query)  (optional)
     - parameter disabledForGroups: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqExperiencelogImplExperienceLogConfigServletInfo> 
     */
    public class func comAdobeCqExperiencelogImplExperienceLogConfigServletWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, enabled: Bool? = nil, disabledForGroups: [String]? = nil) -> RequestBuilder<ComAdobeCqExperiencelogImplExperienceLogConfigServletInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.experiencelog.impl.ExperienceLogConfigServlet"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "enabled": enabled,
            "disabledForGroups": disabledForGroups
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqExperiencelogImplExperienceLogConfigServletInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcName: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - parameter hcMbeanName: (query)  (optional)
     - parameter packageNames: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqHcContentPackagesHealthCheck(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcName: String? = nil, hcTags: [String]? = nil, hcMbeanName: String? = nil, packageNames: [String]? = nil, completion: ((data: ComAdobeCqHcContentPackagesHealthCheckInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqHcContentPackagesHealthCheckWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, hcName: hcName, hcTags: hcTags, hcMbeanName: hcMbeanName, packageNames: packageNames).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.hc.ContentPackagesHealthCheck     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "hc.tags" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "hc.name" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "package.names" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "hc.mbean.name" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcName: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - parameter hcMbeanName: (query)  (optional)
     - parameter packageNames: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqHcContentPackagesHealthCheckInfo> 
     */
    public class func comAdobeCqHcContentPackagesHealthCheckWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcName: String? = nil, hcTags: [String]? = nil, hcMbeanName: String? = nil, packageNames: [String]? = nil) -> RequestBuilder<ComAdobeCqHcContentPackagesHealthCheckInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.hc.ContentPackagesHealthCheck"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "hc.name": hcName,
            "hc.tags": hcTags,
            "hc.mbean.name": hcMbeanName,
            "package.names": packageNames
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqHcContentPackagesHealthCheckInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter historyRequestFilterExcludedSelectors: (query)  (optional)
     - parameter historyRequestFilterExcludedExtensions: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqHistoryImplHistoryRequestFilter(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, historyRequestFilterExcludedSelectors: [String]? = nil, historyRequestFilterExcludedExtensions: [String]? = nil, completion: ((data: ComAdobeCqHistoryImplHistoryRequestFilterInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqHistoryImplHistoryRequestFilterWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, historyRequestFilterExcludedSelectors: historyRequestFilterExcludedSelectors, historyRequestFilterExcludedExtensions: historyRequestFilterExcludedExtensions).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.history.impl.HistoryRequestFilter     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "service_location" : "service_location",
  "bundle_location" : "bundle_location",
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "history.requestFilter.excludedExtensions" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "history.requestFilter.excludedSelectors" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter historyRequestFilterExcludedSelectors: (query)  (optional)
     - parameter historyRequestFilterExcludedExtensions: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqHistoryImplHistoryRequestFilterInfo> 
     */
    public class func comAdobeCqHistoryImplHistoryRequestFilterWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, historyRequestFilterExcludedSelectors: [String]? = nil, historyRequestFilterExcludedExtensions: [String]? = nil) -> RequestBuilder<ComAdobeCqHistoryImplHistoryRequestFilterInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.history.impl.HistoryRequestFilter"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "history.requestFilter.excludedSelectors": historyRequestFilterExcludedSelectors,
            "history.requestFilter.excludedExtensions": historyRequestFilterExcludedExtensions
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqHistoryImplHistoryRequestFilterInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter historyServiceResourceTypes: (query)  (optional)
     - parameter historyServicePathFilter: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqHistoryImplHistoryServiceImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, historyServiceResourceTypes: [String]? = nil, historyServicePathFilter: [String]? = nil, completion: ((data: ComAdobeCqHistoryImplHistoryServiceImplInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqHistoryImplHistoryServiceImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, historyServiceResourceTypes: historyServiceResourceTypes, historyServicePathFilter: historyServicePathFilter).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.history.impl.HistoryServiceImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "service_location" : "service_location",
  "bundle_location" : "bundle_location",
  "description" : "description",
  "pid" : "pid",
  "additionalProperties" : "additionalProperties",
  "title" : "title",
  "properties" : {
    "history.service.resourceTypes" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "history.service.pathFilter" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter historyServiceResourceTypes: (query)  (optional)
     - parameter historyServicePathFilter: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqHistoryImplHistoryServiceImplInfo> 
     */
    public class func comAdobeCqHistoryImplHistoryServiceImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, historyServiceResourceTypes: [String]? = nil, historyServicePathFilter: [String]? = nil) -> RequestBuilder<ComAdobeCqHistoryImplHistoryServiceImplInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.history.impl.HistoryServiceImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "history.service.resourceTypes": historyServiceResourceTypes,
            "history.service.pathFilter": historyServicePathFilter
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqHistoryImplHistoryServiceImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter inboxImplTypeproviderRegistrypaths: (query)  (optional)
     - parameter inboxImplTypeproviderLegacypaths: (query)  (optional)
     - parameter inboxImplTypeproviderDefaulturlFailureitem: (query)  (optional)
     - parameter inboxImplTypeproviderDefaulturlWorkitem: (query)  (optional)
     - parameter inboxImplTypeproviderDefaulturlTask: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqInboxImplTypeproviderItemTypeProvider(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, inboxImplTypeproviderRegistrypaths: [String]? = nil, inboxImplTypeproviderLegacypaths: [String]? = nil, inboxImplTypeproviderDefaulturlFailureitem: String? = nil, inboxImplTypeproviderDefaulturlWorkitem: String? = nil, inboxImplTypeproviderDefaulturlTask: String? = nil, completion: ((data: ComAdobeCqInboxImplTypeproviderItemTypeProviderInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqInboxImplTypeproviderItemTypeProviderWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, inboxImplTypeproviderRegistrypaths: inboxImplTypeproviderRegistrypaths, inboxImplTypeproviderLegacypaths: inboxImplTypeproviderLegacypaths, inboxImplTypeproviderDefaulturlFailureitem: inboxImplTypeproviderDefaulturlFailureitem, inboxImplTypeproviderDefaulturlWorkitem: inboxImplTypeproviderDefaulturlWorkitem, inboxImplTypeproviderDefaulturlTask: inboxImplTypeproviderDefaulturlTask).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.inbox.impl.typeprovider.ItemTypeProvider     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "inbox.impl.typeprovider.defaulturl.workitem" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "inbox.impl.typeprovider.defaulturl.task" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "inbox.impl.typeprovider.legacypaths" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "inbox.impl.typeprovider.defaulturl.failureitem" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "inbox.impl.typeprovider.registrypaths" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter inboxImplTypeproviderRegistrypaths: (query)  (optional)
     - parameter inboxImplTypeproviderLegacypaths: (query)  (optional)
     - parameter inboxImplTypeproviderDefaulturlFailureitem: (query)  (optional)
     - parameter inboxImplTypeproviderDefaulturlWorkitem: (query)  (optional)
     - parameter inboxImplTypeproviderDefaulturlTask: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqInboxImplTypeproviderItemTypeProviderInfo> 
     */
    public class func comAdobeCqInboxImplTypeproviderItemTypeProviderWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, inboxImplTypeproviderRegistrypaths: [String]? = nil, inboxImplTypeproviderLegacypaths: [String]? = nil, inboxImplTypeproviderDefaulturlFailureitem: String? = nil, inboxImplTypeproviderDefaulturlWorkitem: String? = nil, inboxImplTypeproviderDefaulturlTask: String? = nil) -> RequestBuilder<ComAdobeCqInboxImplTypeproviderItemTypeProviderInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.inbox.impl.typeprovider.ItemTypeProvider"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "inbox.impl.typeprovider.registrypaths": inboxImplTypeproviderRegistrypaths,
            "inbox.impl.typeprovider.legacypaths": inboxImplTypeproviderLegacypaths,
            "inbox.impl.typeprovider.defaulturl.failureitem": inboxImplTypeproviderDefaulturlFailureitem,
            "inbox.impl.typeprovider.defaulturl.workitem": inboxImplTypeproviderDefaulturlWorkitem,
            "inbox.impl.typeprovider.defaulturl.task": inboxImplTypeproviderDefaulturlTask
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqInboxImplTypeproviderItemTypeProviderInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter imageQuality: (query)  (optional)
     - parameter imageSupportedResolutions: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqProjectsImplServletProjectImageServlet(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, imageQuality: String? = nil, imageSupportedResolutions: String? = nil, completion: ((data: ComAdobeCqProjectsImplServletProjectImageServletInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqProjectsImplServletProjectImageServletWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, imageQuality: imageQuality, imageSupportedResolutions: imageSupportedResolutions).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.projects.impl.servlet.ProjectImageServlet     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "image.quality" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "image.supported.resolutions" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter imageQuality: (query)  (optional)
     - parameter imageSupportedResolutions: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqProjectsImplServletProjectImageServletInfo> 
     */
    public class func comAdobeCqProjectsImplServletProjectImageServletWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, imageQuality: String? = nil, imageSupportedResolutions: String? = nil) -> RequestBuilder<ComAdobeCqProjectsImplServletProjectImageServletInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.projects.impl.servlet.ProjectImageServlet"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "image.quality": imageQuality,
            "image.supported.resolutions": imageSupportedResolutions
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqProjectsImplServletProjectImageServletInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter scheduledpurgeName: (query)  (optional)
     - parameter scheduledpurgePurgeActive: (query)  (optional)
     - parameter scheduledpurgeTemplates: (query)  (optional)
     - parameter scheduledpurgePurgeGroups: (query)  (optional)
     - parameter scheduledpurgePurgeAssets: (query)  (optional)
     - parameter scheduledpurgeTerminateRunningWorkflows: (query)  (optional)
     - parameter scheduledpurgeDaysold: (query)  (optional)
     - parameter scheduledpurgeSaveThreshold: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqProjectsPurgeScheduler(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, scheduledpurgeName: String? = nil, scheduledpurgePurgeActive: Bool? = nil, scheduledpurgeTemplates: [String]? = nil, scheduledpurgePurgeGroups: Bool? = nil, scheduledpurgePurgeAssets: Bool? = nil, scheduledpurgeTerminateRunningWorkflows: Bool? = nil, scheduledpurgeDaysold: Int32? = nil, scheduledpurgeSaveThreshold: Int32? = nil, completion: ((data: ComAdobeCqProjectsPurgeSchedulerInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqProjectsPurgeSchedulerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, scheduledpurgeName: scheduledpurgeName, scheduledpurgePurgeActive: scheduledpurgePurgeActive, scheduledpurgeTemplates: scheduledpurgeTemplates, scheduledpurgePurgeGroups: scheduledpurgePurgeGroups, scheduledpurgePurgeAssets: scheduledpurgePurgeAssets, scheduledpurgeTerminateRunningWorkflows: scheduledpurgeTerminateRunningWorkflows, scheduledpurgeDaysold: scheduledpurgeDaysold, scheduledpurgeSaveThreshold: scheduledpurgeSaveThreshold).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.projects.purge.Scheduler     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "scheduledpurge.templates" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "scheduledpurge.terminateRunningWorkflows" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "scheduledpurge.name" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "scheduledpurge.purgeActive" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "scheduledpurge.purgeAssets" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "scheduledpurge.purgeGroups" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "scheduledpurge.saveThreshold" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "scheduledpurge.daysold" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter scheduledpurgeName: (query)  (optional)
     - parameter scheduledpurgePurgeActive: (query)  (optional)
     - parameter scheduledpurgeTemplates: (query)  (optional)
     - parameter scheduledpurgePurgeGroups: (query)  (optional)
     - parameter scheduledpurgePurgeAssets: (query)  (optional)
     - parameter scheduledpurgeTerminateRunningWorkflows: (query)  (optional)
     - parameter scheduledpurgeDaysold: (query)  (optional)
     - parameter scheduledpurgeSaveThreshold: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqProjectsPurgeSchedulerInfo> 
     */
    public class func comAdobeCqProjectsPurgeSchedulerWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, scheduledpurgeName: String? = nil, scheduledpurgePurgeActive: Bool? = nil, scheduledpurgeTemplates: [String]? = nil, scheduledpurgePurgeGroups: Bool? = nil, scheduledpurgePurgeAssets: Bool? = nil, scheduledpurgeTerminateRunningWorkflows: Bool? = nil, scheduledpurgeDaysold: Int32? = nil, scheduledpurgeSaveThreshold: Int32? = nil) -> RequestBuilder<ComAdobeCqProjectsPurgeSchedulerInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.projects.purge.Scheduler"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "scheduledpurge.name": scheduledpurgeName,
            "scheduledpurge.purgeActive": scheduledpurgePurgeActive,
            "scheduledpurge.templates": scheduledpurgeTemplates,
            "scheduledpurge.purgeGroups": scheduledpurgePurgeGroups,
            "scheduledpurge.purgeAssets": scheduledpurgePurgeAssets,
            "scheduledpurge.terminateRunningWorkflows": scheduledpurgeTerminateRunningWorkflows,
            "scheduledpurge.daysold": scheduledpurgeDaysold?.encodeToJSON(),
            "scheduledpurge.saveThreshold": scheduledpurgeSaveThreshold?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqProjectsPurgeSchedulerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter includePaths: (query)  (optional)
     - parameter exporterUser: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqScheduledExporterImplScheduledExporterImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, includePaths: [String]? = nil, exporterUser: String? = nil, completion: ((data: ComAdobeCqScheduledExporterImplScheduledExporterImplInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqScheduledExporterImplScheduledExporterImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, includePaths: includePaths, exporterUser: exporterUser).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.scheduled.exporter.impl.ScheduledExporterImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "include.paths" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "exporter.user" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter includePaths: (query)  (optional)
     - parameter exporterUser: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqScheduledExporterImplScheduledExporterImplInfo> 
     */
    public class func comAdobeCqScheduledExporterImplScheduledExporterImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, includePaths: [String]? = nil, exporterUser: String? = nil) -> RequestBuilder<ComAdobeCqScheduledExporterImplScheduledExporterImplInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.scheduled.exporter.impl.ScheduledExporterImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "include.paths": includePaths,
            "exporter.user": exporterUser
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqScheduledExporterImplScheduledExporterImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter comAdobeCqScreensAnalyticsImplUrl: (query)  (optional)
     - parameter comAdobeCqScreensAnalyticsImplApikey: (query)  (optional)
     - parameter comAdobeCqScreensAnalyticsImplProject: (query)  (optional)
     - parameter comAdobeCqScreensAnalyticsImplEnvironment: (query)  (optional)
     - parameter comAdobeCqScreensAnalyticsImplSendFrequency: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, comAdobeCqScreensAnalyticsImplUrl: String? = nil, comAdobeCqScreensAnalyticsImplApikey: String? = nil, comAdobeCqScreensAnalyticsImplProject: String? = nil, comAdobeCqScreensAnalyticsImplEnvironment: String? = nil, comAdobeCqScreensAnalyticsImplSendFrequency: Int32? = nil, completion: ((data: ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, comAdobeCqScreensAnalyticsImplUrl: comAdobeCqScreensAnalyticsImplUrl, comAdobeCqScreensAnalyticsImplApikey: comAdobeCqScreensAnalyticsImplApikey, comAdobeCqScreensAnalyticsImplProject: comAdobeCqScreensAnalyticsImplProject, comAdobeCqScreensAnalyticsImplEnvironment: comAdobeCqScreensAnalyticsImplEnvironment, comAdobeCqScreensAnalyticsImplSendFrequency: comAdobeCqScreensAnalyticsImplSendFrequency).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.screens.analytics.impl.ScreensAnalyticsServiceImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "com.adobe.cq.screens.analytics.impl.url" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "com.adobe.cq.screens.analytics.impl.apikey" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "com.adobe.cq.screens.analytics.impl.environment" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : {
        "values" : "",
        "labels" : ""
      },
      "value" : ""
    },
    "com.adobe.cq.screens.analytics.impl.project" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "com.adobe.cq.screens.analytics.impl.sendFrequency" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter comAdobeCqScreensAnalyticsImplUrl: (query)  (optional)
     - parameter comAdobeCqScreensAnalyticsImplApikey: (query)  (optional)
     - parameter comAdobeCqScreensAnalyticsImplProject: (query)  (optional)
     - parameter comAdobeCqScreensAnalyticsImplEnvironment: (query)  (optional)
     - parameter comAdobeCqScreensAnalyticsImplSendFrequency: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplInfo> 
     */
    public class func comAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, comAdobeCqScreensAnalyticsImplUrl: String? = nil, comAdobeCqScreensAnalyticsImplApikey: String? = nil, comAdobeCqScreensAnalyticsImplProject: String? = nil, comAdobeCqScreensAnalyticsImplEnvironment: String? = nil, comAdobeCqScreensAnalyticsImplSendFrequency: Int32? = nil) -> RequestBuilder<ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.screens.analytics.impl.ScreensAnalyticsServiceImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "com.adobe.cq.screens.analytics.impl.url": comAdobeCqScreensAnalyticsImplUrl,
            "com.adobe.cq.screens.analytics.impl.apikey": comAdobeCqScreensAnalyticsImplApikey,
            "com.adobe.cq.screens.analytics.impl.project": comAdobeCqScreensAnalyticsImplProject,
            "com.adobe.cq.screens.analytics.impl.environment": comAdobeCqScreensAnalyticsImplEnvironment,
            "com.adobe.cq.screens.analytics.impl.sendFrequency": comAdobeCqScreensAnalyticsImplSendFrequency?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter comAdobeAemScreensPlayerPingfrequency: (query)  (optional)
     - parameter comAdobeAemScreensDevicePaswordSpecialchars: (query)  (optional)
     - parameter comAdobeAemScreensDevicePaswordMinlowercasechars: (query)  (optional)
     - parameter comAdobeAemScreensDevicePaswordMinuppercasechars: (query)  (optional)
     - parameter comAdobeAemScreensDevicePaswordMinnumberchars: (query)  (optional)
     - parameter comAdobeAemScreensDevicePaswordMinspecialchars: (query)  (optional)
     - parameter comAdobeAemScreensDevicePaswordMinlength: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqScreensDeviceImplDeviceService(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, comAdobeAemScreensPlayerPingfrequency: Int32? = nil, comAdobeAemScreensDevicePaswordSpecialchars: String? = nil, comAdobeAemScreensDevicePaswordMinlowercasechars: Int32? = nil, comAdobeAemScreensDevicePaswordMinuppercasechars: Int32? = nil, comAdobeAemScreensDevicePaswordMinnumberchars: Int32? = nil, comAdobeAemScreensDevicePaswordMinspecialchars: Int32? = nil, comAdobeAemScreensDevicePaswordMinlength: Int32? = nil, completion: ((data: ComAdobeCqScreensDeviceImplDeviceServiceInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqScreensDeviceImplDeviceServiceWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, comAdobeAemScreensPlayerPingfrequency: comAdobeAemScreensPlayerPingfrequency, comAdobeAemScreensDevicePaswordSpecialchars: comAdobeAemScreensDevicePaswordSpecialchars, comAdobeAemScreensDevicePaswordMinlowercasechars: comAdobeAemScreensDevicePaswordMinlowercasechars, comAdobeAemScreensDevicePaswordMinuppercasechars: comAdobeAemScreensDevicePaswordMinuppercasechars, comAdobeAemScreensDevicePaswordMinnumberchars: comAdobeAemScreensDevicePaswordMinnumberchars, comAdobeAemScreensDevicePaswordMinspecialchars: comAdobeAemScreensDevicePaswordMinspecialchars, comAdobeAemScreensDevicePaswordMinlength: comAdobeAemScreensDevicePaswordMinlength).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.screens.device.impl.DeviceService     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "com.adobe.aem.screens.device.pasword.specialchars" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "com.adobe.aem.screens.device.pasword.minnumberchars" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "com.adobe.aem.screens.device.pasword.minlowercasechars" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "com.adobe.aem.screens.device.pasword.minuppercasechars" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "com.adobe.aem.screens.player.pingfrequency" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "com.adobe.aem.screens.device.pasword.minspecialchars" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "com.adobe.aem.screens.device.pasword.minlength" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter comAdobeAemScreensPlayerPingfrequency: (query)  (optional)
     - parameter comAdobeAemScreensDevicePaswordSpecialchars: (query)  (optional)
     - parameter comAdobeAemScreensDevicePaswordMinlowercasechars: (query)  (optional)
     - parameter comAdobeAemScreensDevicePaswordMinuppercasechars: (query)  (optional)
     - parameter comAdobeAemScreensDevicePaswordMinnumberchars: (query)  (optional)
     - parameter comAdobeAemScreensDevicePaswordMinspecialchars: (query)  (optional)
     - parameter comAdobeAemScreensDevicePaswordMinlength: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqScreensDeviceImplDeviceServiceInfo> 
     */
    public class func comAdobeCqScreensDeviceImplDeviceServiceWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, comAdobeAemScreensPlayerPingfrequency: Int32? = nil, comAdobeAemScreensDevicePaswordSpecialchars: String? = nil, comAdobeAemScreensDevicePaswordMinlowercasechars: Int32? = nil, comAdobeAemScreensDevicePaswordMinuppercasechars: Int32? = nil, comAdobeAemScreensDevicePaswordMinnumberchars: Int32? = nil, comAdobeAemScreensDevicePaswordMinspecialchars: Int32? = nil, comAdobeAemScreensDevicePaswordMinlength: Int32? = nil) -> RequestBuilder<ComAdobeCqScreensDeviceImplDeviceServiceInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.screens.device.impl.DeviceService"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "com.adobe.aem.screens.player.pingfrequency": comAdobeAemScreensPlayerPingfrequency?.encodeToJSON(),
            "com.adobe.aem.screens.device.pasword.specialchars": comAdobeAemScreensDevicePaswordSpecialchars,
            "com.adobe.aem.screens.device.pasword.minlowercasechars": comAdobeAemScreensDevicePaswordMinlowercasechars?.encodeToJSON(),
            "com.adobe.aem.screens.device.pasword.minuppercasechars": comAdobeAemScreensDevicePaswordMinuppercasechars?.encodeToJSON(),
            "com.adobe.aem.screens.device.pasword.minnumberchars": comAdobeAemScreensDevicePaswordMinnumberchars?.encodeToJSON(),
            "com.adobe.aem.screens.device.pasword.minspecialchars": comAdobeAemScreensDevicePaswordMinspecialchars?.encodeToJSON(),
            "com.adobe.aem.screens.device.pasword.minlength": comAdobeAemScreensDevicePaswordMinlength?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqScreensDeviceImplDeviceServiceInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter deviceRegistrationTimeout: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqScreensDeviceRegistrationImplRegistrationServiceImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, deviceRegistrationTimeout: Int32? = nil, completion: ((data: ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, deviceRegistrationTimeout: deviceRegistrationTimeout).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.screens.device.registration.impl.RegistrationServiceImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "deviceRegistrationTimeout" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter deviceRegistrationTimeout: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplInfo> 
     */
    public class func comAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, deviceRegistrationTimeout: Int32? = nil) -> RequestBuilder<ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.screens.device.registration.impl.RegistrationServiceImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "deviceRegistrationTimeout": deviceRegistrationTimeout?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqPagesupdatehandlerImageresourcetypes: (query)  (optional)
     - parameter cqPagesupdatehandlerProductresourcetypes: (query)  (optional)
     - parameter cqPagesupdatehandlerVideoresourcetypes: (query)  (optional)
     - parameter cqPagesupdatehandlerDynamicsequenceresourcetypes: (query)  (optional)
     - parameter cqPagesupdatehandlerPreviewmodepaths: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqScreensImplHandlerChannelsUpdateHandler(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqPagesupdatehandlerImageresourcetypes: [String]? = nil, cqPagesupdatehandlerProductresourcetypes: [String]? = nil, cqPagesupdatehandlerVideoresourcetypes: [String]? = nil, cqPagesupdatehandlerDynamicsequenceresourcetypes: [String]? = nil, cqPagesupdatehandlerPreviewmodepaths: [String]? = nil, completion: ((data: ComAdobeCqScreensImplHandlerChannelsUpdateHandlerInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqScreensImplHandlerChannelsUpdateHandlerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqPagesupdatehandlerImageresourcetypes: cqPagesupdatehandlerImageresourcetypes, cqPagesupdatehandlerProductresourcetypes: cqPagesupdatehandlerProductresourcetypes, cqPagesupdatehandlerVideoresourcetypes: cqPagesupdatehandlerVideoresourcetypes, cqPagesupdatehandlerDynamicsequenceresourcetypes: cqPagesupdatehandlerDynamicsequenceresourcetypes, cqPagesupdatehandlerPreviewmodepaths: cqPagesupdatehandlerPreviewmodepaths).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.screens.impl.handler.ChannelsUpdateHandler     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "cq.pagesupdatehandler.productresourcetypes" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "cq.pagesupdatehandler.dynamicsequenceresourcetypes" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "cq.pagesupdatehandler.videoresourcetypes" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "cq.pagesupdatehandler.imageresourcetypes" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "cq.pagesupdatehandler.previewmodepaths" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqPagesupdatehandlerImageresourcetypes: (query)  (optional)
     - parameter cqPagesupdatehandlerProductresourcetypes: (query)  (optional)
     - parameter cqPagesupdatehandlerVideoresourcetypes: (query)  (optional)
     - parameter cqPagesupdatehandlerDynamicsequenceresourcetypes: (query)  (optional)
     - parameter cqPagesupdatehandlerPreviewmodepaths: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqScreensImplHandlerChannelsUpdateHandlerInfo> 
     */
    public class func comAdobeCqScreensImplHandlerChannelsUpdateHandlerWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqPagesupdatehandlerImageresourcetypes: [String]? = nil, cqPagesupdatehandlerProductresourcetypes: [String]? = nil, cqPagesupdatehandlerVideoresourcetypes: [String]? = nil, cqPagesupdatehandlerDynamicsequenceresourcetypes: [String]? = nil, cqPagesupdatehandlerPreviewmodepaths: [String]? = nil) -> RequestBuilder<ComAdobeCqScreensImplHandlerChannelsUpdateHandlerInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.screens.impl.handler.ChannelsUpdateHandler"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "cq.pagesupdatehandler.imageresourcetypes": cqPagesupdatehandlerImageresourcetypes,
            "cq.pagesupdatehandler.productresourcetypes": cqPagesupdatehandlerProductresourcetypes,
            "cq.pagesupdatehandler.videoresourcetypes": cqPagesupdatehandlerVideoresourcetypes,
            "cq.pagesupdatehandler.dynamicsequenceresourcetypes": cqPagesupdatehandlerDynamicsequenceresourcetypes,
            "cq.pagesupdatehandler.previewmodepaths": cqPagesupdatehandlerPreviewmodepaths
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqScreensImplHandlerChannelsUpdateHandlerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter schedulerExpression: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJob(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, schedulerExpression: String? = nil, completion: ((data: ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, schedulerExpression: schedulerExpression).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.screens.impl.jobs.DistributedDevicesStatiUpdateJob     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "scheduler.expression" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter schedulerExpression: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobInfo> 
     */
    public class func comAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, schedulerExpression: String? = nil) -> RequestBuilder<ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.screens.impl.jobs.DistributedDevicesStatiUpdateJob"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "scheduler.expression": schedulerExpression
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter comAdobeAemScreensImplRemoteRequestTimeout: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqScreensImplRemoteImplDistributedHttpClientImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, comAdobeAemScreensImplRemoteRequestTimeout: Int32? = nil, completion: ((data: ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqScreensImplRemoteImplDistributedHttpClientImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, comAdobeAemScreensImplRemoteRequestTimeout: comAdobeAemScreensImplRemoteRequestTimeout).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.screens.impl.remote.impl.DistributedHttpClientImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "com.adobe.aem.screens.impl.remote.request_timeout" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter comAdobeAemScreensImplRemoteRequestTimeout: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplInfo> 
     */
    public class func comAdobeCqScreensImplRemoteImplDistributedHttpClientImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, comAdobeAemScreensImplRemoteRequestTimeout: Int32? = nil) -> RequestBuilder<ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.screens.impl.remote.impl.DistributedHttpClientImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "com.adobe.aem.screens.impl.remote.request_timeout": comAdobeAemScreensImplRemoteRequestTimeout?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter screensChannelsPropertiesToRemove: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqScreensImplScreensChannelPostProcessor(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, screensChannelsPropertiesToRemove: [String]? = nil, completion: ((data: ComAdobeCqScreensImplScreensChannelPostProcessorInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqScreensImplScreensChannelPostProcessorWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, screensChannelsPropertiesToRemove: screensChannelsPropertiesToRemove).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.screens.impl.ScreensChannelPostProcessor     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "screens.channels.properties.to.remove" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter screensChannelsPropertiesToRemove: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqScreensImplScreensChannelPostProcessorInfo> 
     */
    public class func comAdobeCqScreensImplScreensChannelPostProcessorWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, screensChannelsPropertiesToRemove: [String]? = nil) -> RequestBuilder<ComAdobeCqScreensImplScreensChannelPostProcessorInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.screens.impl.ScreensChannelPostProcessor"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "screens.channels.properties.to.remove": screensChannelsPropertiesToRemove
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqScreensImplScreensChannelPostProcessorInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProjectPath: (query)  (optional)
     - parameter comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplScheduleFrequency: (query)  (optional)
     - parameter comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPingTimeout: (query)  (optional)
     - parameter comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplRecipients: (query)  (optional)
     - parameter comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpserver: (query)  (optional)
     - parameter comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpport: (query)  (optional)
     - parameter comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsetls: (query)  (optional)
     - parameter comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsername: (query)  (optional)
     - parameter comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPassword: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqScreensMonitoringImplScreensMonitoringServiceImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProjectPath: [String]? = nil, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplScheduleFrequency: String? = nil, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPingTimeout: Int32? = nil, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplRecipients: String? = nil, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpserver: String? = nil, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpport: Int32? = nil, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsetls: Bool? = nil, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsername: String? = nil, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPassword: String? = nil, completion: ((data: ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProjectPath: comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProjectPath, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplScheduleFrequency: comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplScheduleFrequency, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPingTimeout: comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPingTimeout, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplRecipients: comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplRecipients, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpserver: comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpserver, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpport: comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpport, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsetls: comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsetls, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsername: comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsername, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPassword: comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPassword).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.password" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.pingTimeout" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.smtpserver" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.projectPath" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.recipients" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.scheduleFrequency" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.smtpport" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.usetls" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.username" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProjectPath: (query)  (optional)
     - parameter comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplScheduleFrequency: (query)  (optional)
     - parameter comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPingTimeout: (query)  (optional)
     - parameter comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplRecipients: (query)  (optional)
     - parameter comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpserver: (query)  (optional)
     - parameter comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpport: (query)  (optional)
     - parameter comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsetls: (query)  (optional)
     - parameter comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsername: (query)  (optional)
     - parameter comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPassword: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplInfo> 
     */
    public class func comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProjectPath: [String]? = nil, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplScheduleFrequency: String? = nil, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPingTimeout: Int32? = nil, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplRecipients: String? = nil, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpserver: String? = nil, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpport: Int32? = nil, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsetls: Bool? = nil, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsername: String? = nil, comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPassword: String? = nil) -> RequestBuilder<ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.projectPath": comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProjectPath,
            "com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.scheduleFrequency": comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplScheduleFrequency,
            "com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.pingTimeout": comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPingTimeout?.encodeToJSON(),
            "com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.recipients": comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplRecipients,
            "com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.smtpserver": comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpserver,
            "com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.smtpport": comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpport?.encodeToJSON(),
            "com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.usetls": comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsetls,
            "com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.username": comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsername,
            "com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.password": comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPassword
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter globalSize: (query)  (optional)
     - parameter maxDiskUsage: (query)  (optional)
     - parameter persistenceEnabled: (query)  (optional)
     - parameter threadPoolMaxSize: (query)  (optional)
     - parameter scheduledThreadPoolMaxSize: (query)  (optional)
     - parameter gracefulShutdownTimeout: (query)  (optional)
     - parameter queues: (query)  (optional)
     - parameter topics: (query)  (optional)
     - parameter addressesMaxDeliveryAttempts: (query)  (optional)
     - parameter addressesExpiryDelay: (query)  (optional)
     - parameter addressesAddressFullMessagePolicy: (query)  (optional)
     - parameter addressesMaxSizeBytes: (query)  (optional)
     - parameter addressesPageSizeBytes: (query)  (optional)
     - parameter addressesPageCacheMaxSize: (query)  (optional)
     - parameter clusterUser: (query)  (optional)
     - parameter clusterPassword: (query)  (optional)
     - parameter clusterCallTimeout: (query)  (optional)
     - parameter clusterCallFailoverTimeout: (query)  (optional)
     - parameter clusterClientFailureCheckPeriod: (query)  (optional)
     - parameter clusterNotificationAttempts: (query)  (optional)
     - parameter clusterNotificationInterval: (query)  (optional)
     - parameter idCacheSize: (query)  (optional)
     - parameter clusterConfirmationWindowSize: (query)  (optional)
     - parameter clusterConnectionTtl: (query)  (optional)
     - parameter clusterDuplicateDetection: (query)  (optional)
     - parameter clusterInitialConnectAttempts: (query)  (optional)
     - parameter clusterMaxRetryInterval: (query)  (optional)
     - parameter clusterMinLargeMessageSize: (query)  (optional)
     - parameter clusterProducerWindowSize: (query)  (optional)
     - parameter clusterReconnectAttempts: (query)  (optional)
     - parameter clusterRetryInterval: (query)  (optional)
     - parameter clusterRetryIntervalMultiplier: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqScreensMqActivemqImplArtemisJMSProvider(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int32? = nil, globalSize: Int32? = nil, maxDiskUsage: Int32? = nil, persistenceEnabled: Bool? = nil, threadPoolMaxSize: Int32? = nil, scheduledThreadPoolMaxSize: Int32? = nil, gracefulShutdownTimeout: Int32? = nil, queues: [String]? = nil, topics: [String]? = nil, addressesMaxDeliveryAttempts: Int32? = nil, addressesExpiryDelay: Int32? = nil, addressesAddressFullMessagePolicy: String? = nil, addressesMaxSizeBytes: Int32? = nil, addressesPageSizeBytes: Int32? = nil, addressesPageCacheMaxSize: Int32? = nil, clusterUser: String? = nil, clusterPassword: String? = nil, clusterCallTimeout: Int32? = nil, clusterCallFailoverTimeout: Int32? = nil, clusterClientFailureCheckPeriod: Int32? = nil, clusterNotificationAttempts: Int32? = nil, clusterNotificationInterval: Int32? = nil, idCacheSize: Int32? = nil, clusterConfirmationWindowSize: Int32? = nil, clusterConnectionTtl: Int32? = nil, clusterDuplicateDetection: Bool? = nil, clusterInitialConnectAttempts: Int32? = nil, clusterMaxRetryInterval: Int32? = nil, clusterMinLargeMessageSize: Int32? = nil, clusterProducerWindowSize: Int32? = nil, clusterReconnectAttempts: Int32? = nil, clusterRetryInterval: Int32? = nil, clusterRetryIntervalMultiplier: Double? = nil, completion: ((data: ComAdobeCqScreensMqActivemqImplArtemisJMSProviderInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqScreensMqActivemqImplArtemisJMSProviderWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, serviceRanking: serviceRanking, globalSize: globalSize, maxDiskUsage: maxDiskUsage, persistenceEnabled: persistenceEnabled, threadPoolMaxSize: threadPoolMaxSize, scheduledThreadPoolMaxSize: scheduledThreadPoolMaxSize, gracefulShutdownTimeout: gracefulShutdownTimeout, queues: queues, topics: topics, addressesMaxDeliveryAttempts: addressesMaxDeliveryAttempts, addressesExpiryDelay: addressesExpiryDelay, addressesAddressFullMessagePolicy: addressesAddressFullMessagePolicy, addressesMaxSizeBytes: addressesMaxSizeBytes, addressesPageSizeBytes: addressesPageSizeBytes, addressesPageCacheMaxSize: addressesPageCacheMaxSize, clusterUser: clusterUser, clusterPassword: clusterPassword, clusterCallTimeout: clusterCallTimeout, clusterCallFailoverTimeout: clusterCallFailoverTimeout, clusterClientFailureCheckPeriod: clusterClientFailureCheckPeriod, clusterNotificationAttempts: clusterNotificationAttempts, clusterNotificationInterval: clusterNotificationInterval, idCacheSize: idCacheSize, clusterConfirmationWindowSize: clusterConfirmationWindowSize, clusterConnectionTtl: clusterConnectionTtl, clusterDuplicateDetection: clusterDuplicateDetection, clusterInitialConnectAttempts: clusterInitialConnectAttempts, clusterMaxRetryInterval: clusterMaxRetryInterval, clusterMinLargeMessageSize: clusterMinLargeMessageSize, clusterProducerWindowSize: clusterProducerWindowSize, clusterReconnectAttempts: clusterReconnectAttempts, clusterRetryInterval: clusterRetryInterval, clusterRetryIntervalMultiplier: clusterRetryIntervalMultiplier).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.screens.mq.activemq.impl.ArtemisJMSProvider     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "cluster.call.timeout" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "cluster.notification.interval" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "cluster.confirmation.window.size" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "global.size" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "addresses.address.full.message.policy" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : {
        "values" : "",
        "labels" : ""
      },
      "value" : ""
    },
    "cluster.producer.window.size" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "addresses.page.size.bytes" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "cluster.min.large.message.size" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "scheduled.thread.pool.max.size" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "cluster.call.failover.timeout" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "cluster.max.retry.interval" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "graceful.shutdown.timeout" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "cluster.user" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "cluster.duplicate.detection" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "max.disk.usage" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "cluster.initial.connect.attempts" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "id.cache.size" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "cluster.retry.interval.multiplier" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : 6.02745618307040320615897144307382404804229736328125
    },
    "topics" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "addresses.max.size.bytes" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "cluster.client.failure.check.period" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "addresses.page.cache.max.size" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "cluster.reconnect.attempts" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "cluster.retry.interval" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "cluster.connection.ttl" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "queues" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "persistence.enabled" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "addresses.max.delivery.attempts" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "cluster.password" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "cluster.notification.attempts" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "addresses.expiry.delay" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "service.ranking" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "thread.pool.max.size" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter globalSize: (query)  (optional)
     - parameter maxDiskUsage: (query)  (optional)
     - parameter persistenceEnabled: (query)  (optional)
     - parameter threadPoolMaxSize: (query)  (optional)
     - parameter scheduledThreadPoolMaxSize: (query)  (optional)
     - parameter gracefulShutdownTimeout: (query)  (optional)
     - parameter queues: (query)  (optional)
     - parameter topics: (query)  (optional)
     - parameter addressesMaxDeliveryAttempts: (query)  (optional)
     - parameter addressesExpiryDelay: (query)  (optional)
     - parameter addressesAddressFullMessagePolicy: (query)  (optional)
     - parameter addressesMaxSizeBytes: (query)  (optional)
     - parameter addressesPageSizeBytes: (query)  (optional)
     - parameter addressesPageCacheMaxSize: (query)  (optional)
     - parameter clusterUser: (query)  (optional)
     - parameter clusterPassword: (query)  (optional)
     - parameter clusterCallTimeout: (query)  (optional)
     - parameter clusterCallFailoverTimeout: (query)  (optional)
     - parameter clusterClientFailureCheckPeriod: (query)  (optional)
     - parameter clusterNotificationAttempts: (query)  (optional)
     - parameter clusterNotificationInterval: (query)  (optional)
     - parameter idCacheSize: (query)  (optional)
     - parameter clusterConfirmationWindowSize: (query)  (optional)
     - parameter clusterConnectionTtl: (query)  (optional)
     - parameter clusterDuplicateDetection: (query)  (optional)
     - parameter clusterInitialConnectAttempts: (query)  (optional)
     - parameter clusterMaxRetryInterval: (query)  (optional)
     - parameter clusterMinLargeMessageSize: (query)  (optional)
     - parameter clusterProducerWindowSize: (query)  (optional)
     - parameter clusterReconnectAttempts: (query)  (optional)
     - parameter clusterRetryInterval: (query)  (optional)
     - parameter clusterRetryIntervalMultiplier: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqScreensMqActivemqImplArtemisJMSProviderInfo> 
     */
    public class func comAdobeCqScreensMqActivemqImplArtemisJMSProviderWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int32? = nil, globalSize: Int32? = nil, maxDiskUsage: Int32? = nil, persistenceEnabled: Bool? = nil, threadPoolMaxSize: Int32? = nil, scheduledThreadPoolMaxSize: Int32? = nil, gracefulShutdownTimeout: Int32? = nil, queues: [String]? = nil, topics: [String]? = nil, addressesMaxDeliveryAttempts: Int32? = nil, addressesExpiryDelay: Int32? = nil, addressesAddressFullMessagePolicy: String? = nil, addressesMaxSizeBytes: Int32? = nil, addressesPageSizeBytes: Int32? = nil, addressesPageCacheMaxSize: Int32? = nil, clusterUser: String? = nil, clusterPassword: String? = nil, clusterCallTimeout: Int32? = nil, clusterCallFailoverTimeout: Int32? = nil, clusterClientFailureCheckPeriod: Int32? = nil, clusterNotificationAttempts: Int32? = nil, clusterNotificationInterval: Int32? = nil, idCacheSize: Int32? = nil, clusterConfirmationWindowSize: Int32? = nil, clusterConnectionTtl: Int32? = nil, clusterDuplicateDetection: Bool? = nil, clusterInitialConnectAttempts: Int32? = nil, clusterMaxRetryInterval: Int32? = nil, clusterMinLargeMessageSize: Int32? = nil, clusterProducerWindowSize: Int32? = nil, clusterReconnectAttempts: Int32? = nil, clusterRetryInterval: Int32? = nil, clusterRetryIntervalMultiplier: Double? = nil) -> RequestBuilder<ComAdobeCqScreensMqActivemqImplArtemisJMSProviderInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.screens.mq.activemq.impl.ArtemisJMSProvider"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "service.ranking": serviceRanking?.encodeToJSON(),
            "global.size": globalSize?.encodeToJSON(),
            "max.disk.usage": maxDiskUsage?.encodeToJSON(),
            "persistence.enabled": persistenceEnabled,
            "thread.pool.max.size": threadPoolMaxSize?.encodeToJSON(),
            "scheduled.thread.pool.max.size": scheduledThreadPoolMaxSize?.encodeToJSON(),
            "graceful.shutdown.timeout": gracefulShutdownTimeout?.encodeToJSON(),
            "queues": queues,
            "topics": topics,
            "addresses.max.delivery.attempts": addressesMaxDeliveryAttempts?.encodeToJSON(),
            "addresses.expiry.delay": addressesExpiryDelay?.encodeToJSON(),
            "addresses.address.full.message.policy": addressesAddressFullMessagePolicy,
            "addresses.max.size.bytes": addressesMaxSizeBytes?.encodeToJSON(),
            "addresses.page.size.bytes": addressesPageSizeBytes?.encodeToJSON(),
            "addresses.page.cache.max.size": addressesPageCacheMaxSize?.encodeToJSON(),
            "cluster.user": clusterUser,
            "cluster.password": clusterPassword,
            "cluster.call.timeout": clusterCallTimeout?.encodeToJSON(),
            "cluster.call.failover.timeout": clusterCallFailoverTimeout?.encodeToJSON(),
            "cluster.client.failure.check.period": clusterClientFailureCheckPeriod?.encodeToJSON(),
            "cluster.notification.attempts": clusterNotificationAttempts?.encodeToJSON(),
            "cluster.notification.interval": clusterNotificationInterval?.encodeToJSON(),
            "id.cache.size": idCacheSize?.encodeToJSON(),
            "cluster.confirmation.window.size": clusterConfirmationWindowSize?.encodeToJSON(),
            "cluster.connection.ttl": clusterConnectionTtl?.encodeToJSON(),
            "cluster.duplicate.detection": clusterDuplicateDetection,
            "cluster.initial.connect.attempts": clusterInitialConnectAttempts?.encodeToJSON(),
            "cluster.max.retry.interval": clusterMaxRetryInterval?.encodeToJSON(),
            "cluster.min.large.message.size": clusterMinLargeMessageSize?.encodeToJSON(),
            "cluster.producer.window.size": clusterProducerWindowSize?.encodeToJSON(),
            "cluster.reconnect.attempts": clusterReconnectAttempts?.encodeToJSON(),
            "cluster.retry.interval": clusterRetryInterval?.encodeToJSON(),
            "cluster.retry.interval.multiplier": clusterRetryIntervalMultiplier
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqScreensMqActivemqImplArtemisJMSProviderInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProjectPath: (query)  (optional)
     - parameter comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplScheduleFrequency: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProjectPath: [String]? = nil, comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplScheduleFrequency: String? = nil, completion: ((data: ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProjectPath: comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProjectPath, comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplScheduleFrequency: comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplScheduleFrequency).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.screens.offlinecontent.impl.BulkOfflineUpdateServiceImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "com.adobe.cq.screens.offlinecontent.impl.BulkOfflineUpdateServiceImpl.projectPath" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "com.adobe.cq.screens.offlinecontent.impl.BulkOfflineUpdateServiceImpl.scheduleFrequency" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProjectPath: (query)  (optional)
     - parameter comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplScheduleFrequency: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplInfo> 
     */
    public class func comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProjectPath: [String]? = nil, comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplScheduleFrequency: String? = nil) -> RequestBuilder<ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.screens.offlinecontent.impl.BulkOfflineUpdateServiceImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "com.adobe.cq.screens.offlinecontent.impl.BulkOfflineUpdateServiceImpl.projectPath": comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProjectPath,
            "com.adobe.cq.screens.offlinecontent.impl.BulkOfflineUpdateServiceImpl.scheduleFrequency": comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplScheduleFrequency
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter disableSmartSync: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqScreensOfflinecontentImplOfflineContentServiceImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, disableSmartSync: Bool? = nil, completion: ((data: ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqScreensOfflinecontentImplOfflineContentServiceImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, disableSmartSync: disableSmartSync).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.screens.offlinecontent.impl.OfflineContentServiceImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "disableSmartSync" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter disableSmartSync: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplInfo> 
     */
    public class func comAdobeCqScreensOfflinecontentImplOfflineContentServiceImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, disableSmartSync: Bool? = nil) -> RequestBuilder<ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.screens.offlinecontent.impl.OfflineContentServiceImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "disableSmartSync": disableSmartSync
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter enableDataTriggeredContent: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqScreensSegmentationImplSegmentationFeatureFlag(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, enableDataTriggeredContent: Bool? = nil, completion: ((data: ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqScreensSegmentationImplSegmentationFeatureFlagWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, enableDataTriggeredContent: enableDataTriggeredContent).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.screens.segmentation.impl.SegmentationFeatureFlag     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "enableDataTriggeredContent" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter enableDataTriggeredContent: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagInfo> 
     */
    public class func comAdobeCqScreensSegmentationImplSegmentationFeatureFlagWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, enableDataTriggeredContent: Bool? = nil) -> RequestBuilder<ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.screens.segmentation.impl.SegmentationFeatureFlag"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "enableDataTriggeredContent": enableDataTriggeredContent
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthCh(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcTags: [String]? = nil, completion: ((data: ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, hcTags: hcTags).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.security.hc.bundles.impl.HtmlLibraryManagerConfigHealthCheck     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "hc.tags" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcTags: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChInfo> 
     */
    public class func comAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcTags: [String]? = nil) -> RequestBuilder<ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.security.hc.bundles.impl.HtmlLibraryManagerConfigHealthCheck"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "hc.tags": hcTags
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqSecurityHcBundlesImplWcmFilterHealthCheck(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcTags: [String]? = nil, completion: ((data: ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, hcTags: hcTags).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.security.hc.bundles.impl.WcmFilterHealthCheck     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "hc.tags" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcTags: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckInfo> 
     */
    public class func comAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcTags: [String]? = nil) -> RequestBuilder<ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.security.hc.bundles.impl.WcmFilterHealthCheck"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "hc.tags": hcTags
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - parameter dispatcherAddress: (query)  (optional)
     - parameter dispatcherFilterAllowed: (query)  (optional)
     - parameter dispatcherFilterBlocked: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheck(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcTags: [String]? = nil, dispatcherAddress: String? = nil, dispatcherFilterAllowed: [String]? = nil, dispatcherFilterBlocked: [String]? = nil, completion: ((data: ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, hcTags: hcTags, dispatcherAddress: dispatcherAddress, dispatcherFilterAllowed: dispatcherFilterAllowed, dispatcherFilterBlocked: dispatcherFilterBlocked).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.security.hc.dispatcher.impl.DispatcherAccessHealthCheck     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "dispatcher.filter.allowed" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "dispatcher.filter.blocked" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "hc.tags" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "dispatcher.address" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - parameter dispatcherAddress: (query)  (optional)
     - parameter dispatcherFilterAllowed: (query)  (optional)
     - parameter dispatcherFilterBlocked: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckInfo> 
     */
    public class func comAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcTags: [String]? = nil, dispatcherAddress: String? = nil, dispatcherFilterAllowed: [String]? = nil, dispatcherFilterBlocked: [String]? = nil) -> RequestBuilder<ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.security.hc.dispatcher.impl.DispatcherAccessHealthCheck"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "hc.tags": hcTags,
            "dispatcher.address": dispatcherAddress,
            "dispatcher.filter.allowed": dispatcherFilterAllowed,
            "dispatcher.filter.blocked": dispatcherFilterBlocked
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqSecurityHcPackagesImplExampleContentHealthCheck(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcTags: [String]? = nil, completion: ((data: ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqSecurityHcPackagesImplExampleContentHealthCheckWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, hcTags: hcTags).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.security.hc.packages.impl.ExampleContentHealthCheck     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "service_location" : "service_location",
  "bundle_location" : "bundle_location",
  "description" : "description",
  "pid" : "pid",
  "additionalProperties" : "additionalProperties",
  "title" : "title",
  "properties" : {
    "hc.tags" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcTags: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckInfo> 
     */
    public class func comAdobeCqSecurityHcPackagesImplExampleContentHealthCheckWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcTags: [String]? = nil) -> RequestBuilder<ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.security.hc.packages.impl.ExampleContentHealthCheck"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "hc.tags": hcTags
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - parameter webserverAddress: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqSecurityHcWebserverImplClickjackingHealthCheck(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcTags: [String]? = nil, webserverAddress: String? = nil, completion: ((data: ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqSecurityHcWebserverImplClickjackingHealthCheckWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, hcTags: hcTags, webserverAddress: webserverAddress).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.security.hc.webserver.impl.ClickjackingHealthCheck     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "webserver.address" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "hc.tags" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - parameter webserverAddress: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckInfo> 
     */
    public class func comAdobeCqSecurityHcWebserverImplClickjackingHealthCheckWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcTags: [String]? = nil, webserverAddress: String? = nil) -> RequestBuilder<ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.security.hc.webserver.impl.ClickjackingHealthCheck"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "hc.tags": hcTags,
            "webserver.address": webserverAddress
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter enable: (query)  (optional)
     - parameter ttl1: (query)  (optional)
     - parameter ttl2: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqSocialAccountverificationImplAccountManagementConfigIm(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, enable: Bool? = nil, ttl1: Int32? = nil, ttl2: Int32? = nil, completion: ((data: ComAdobeCqSocialAccountverificationImplAccountManagementConfigImInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqSocialAccountverificationImplAccountManagementConfigImWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, enable: enable, ttl1: ttl1, ttl2: ttl2).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.accountverification.impl.AccountManagementConfigImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "ttl2" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "ttl1" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "enable" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter enable: (query)  (optional)
     - parameter ttl1: (query)  (optional)
     - parameter ttl2: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqSocialAccountverificationImplAccountManagementConfigImInfo> 
     */
    public class func comAdobeCqSocialAccountverificationImplAccountManagementConfigImWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, enable: Bool? = nil, ttl1: Int32? = nil, ttl2: Int32? = nil) -> RequestBuilder<ComAdobeCqSocialAccountverificationImplAccountManagementConfigImInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.accountverification.impl.AccountManagementConfigImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "enable": enable,
            "ttl1": ttl1?.encodeToJSON(),
            "ttl2": ttl2?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqSocialAccountverificationImplAccountManagementConfigImInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter priority: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqSocialActivitystreamsClientImplSocialActivityComponen(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, priority: Int32? = nil, completion: ((data: ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqSocialActivitystreamsClientImplSocialActivityComponenWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, priority: priority).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.activitystreams.client.impl.SocialActivityComponentFactoryImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "priority" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter priority: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenInfo> 
     */
    public class func comAdobeCqSocialActivitystreamsClientImplSocialActivityComponenWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, priority: Int32? = nil) -> RequestBuilder<ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.activitystreams.client.impl.SocialActivityComponentFactoryImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "priority": priority?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter priority: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCo(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, priority: Int32? = nil, completion: ((data: ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, priority: priority).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.activitystreams.client.impl.SocialActivityStreamComponentFactory     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "priority" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter priority: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoInfo> 
     */
    public class func comAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, priority: Int32? = nil) -> RequestBuilder<ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.activitystreams.client.impl.SocialActivityStreamComponentFactory"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "priority": priority?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter eventTopics: (query)  (optional)
     - parameter eventFilter: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqSocialActivitystreamsListenerImplEventListenerHandler(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, eventTopics: String? = nil, eventFilter: String? = nil, completion: ((data: ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, eventTopics: eventTopics, eventFilter: eventFilter).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.activitystreams.listener.impl.EventListenerHandler     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "event.topics" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "event.filter" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter eventTopics: (query)  (optional)
     - parameter eventFilter: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerInfo> 
     */
    public class func comAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, eventTopics: String? = nil, eventFilter: String? = nil) -> RequestBuilder<ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.activitystreams.listener.impl.EventListenerHandler"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "event.topics": eventTopics,
            "event.filter": eventFilter
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter accepted: (query)  (optional)
     - parameter ranked: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqSocialActivitystreamsListenerImplModerationEventExten(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, accepted: Bool? = nil, ranked: Int32? = nil, completion: ((data: ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqSocialActivitystreamsListenerImplModerationEventExtenWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, accepted: accepted, ranked: ranked).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.activitystreams.listener.impl.ModerationEventExtension     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "accepted" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "ranked" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter accepted: (query)  (optional)
     - parameter ranked: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenInfo> 
     */
    public class func comAdobeCqSocialActivitystreamsListenerImplModerationEventExtenWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, accepted: Bool? = nil, ranked: Int32? = nil) -> RequestBuilder<ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.activitystreams.listener.impl.ModerationEventExtension"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "accepted": accepted,
            "ranked": ranked?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter ranking: (query)  (optional)
     - parameter enable: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqSocialActivitystreamsListenerImplRatingEventActivityS(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, ranking: Int32? = nil, enable: Bool? = nil, completion: ((data: ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, ranking: ranking, enable: enable).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.activitystreams.listener.impl.RatingEventActivitySuppressor     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "enable" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "ranking" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter ranking: (query)  (optional)
     - parameter enable: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySInfo> 
     */
    public class func comAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, ranking: Int32? = nil, enable: Bool? = nil) -> RequestBuilder<ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.activitystreams.listener.impl.RatingEventActivitySuppressor"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "ranking": ranking?.encodeToJSON(),
            "enable": enable
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter streamPath: (query)  (optional)
     - parameter streamName: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqSocialActivitystreamsListenerImplResourceActivityStre(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, streamPath: String? = nil, streamName: String? = nil, completion: ((data: ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqSocialActivitystreamsListenerImplResourceActivityStreWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, streamPath: streamPath, streamName: streamName).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.activitystreams.listener.impl.ResourceActivityStreamProviderFactory     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "service_location" : "service_location",
  "bundle_location" : "bundle_location",
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "streamPath" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "streamName" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter streamPath: (query)  (optional)
     - parameter streamName: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreInfo> 
     */
    public class func comAdobeCqSocialActivitystreamsListenerImplResourceActivityStreWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, streamPath: String? = nil, streamName: String? = nil) -> RequestBuilder<ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.activitystreams.listener.impl.ResourceActivityStreamProviderFactory"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "streamPath": streamPath,
            "streamName": streamName
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter maxRetry: (query)  (optional)
     - parameter fieldWhitelist: (query)  (optional)
     - parameter attachmentTypeBlacklist: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsI(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, maxRetry: Int32? = nil, fieldWhitelist: [String]? = nil, attachmentTypeBlacklist: [String]? = nil, completion: ((data: ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, maxRetry: maxRetry, fieldWhitelist: fieldWhitelist, attachmentTypeBlacklist: attachmentTypeBlacklist).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.calendar.client.endpoints.impl.CalendarOperationsImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "fieldWhitelist" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "attachmentTypeBlacklist" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "MaxRetry" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter maxRetry: (query)  (optional)
     - parameter fieldWhitelist: (query)  (optional)
     - parameter attachmentTypeBlacklist: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIInfo> 
     */
    public class func comAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, maxRetry: Int32? = nil, fieldWhitelist: [String]? = nil, attachmentTypeBlacklist: [String]? = nil) -> RequestBuilder<ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.calendar.client.endpoints.impl.CalendarOperationsImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "MaxRetry": maxRetry?.encodeToJSON(),
            "fieldWhitelist": fieldWhitelist,
            "attachmentTypeBlacklist": attachmentTypeBlacklist
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter attachmentTypeBlacklist: (query)  (optional)
     - parameter extensionOrder: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqSocialCalendarClientOperationextensionsEventAttachmen(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, attachmentTypeBlacklist: String? = nil, extensionOrder: Int32? = nil, completion: ((data: ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqSocialCalendarClientOperationextensionsEventAttachmenWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, attachmentTypeBlacklist: attachmentTypeBlacklist, extensionOrder: extensionOrder).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.calendar.client.operationextensions.EventAttachment     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "attachmentTypeBlacklist" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "extension.order" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter attachmentTypeBlacklist: (query)  (optional)
     - parameter extensionOrder: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenInfo> 
     */
    public class func comAdobeCqSocialCalendarClientOperationextensionsEventAttachmenWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, attachmentTypeBlacklist: String? = nil, extensionOrder: Int32? = nil) -> RequestBuilder<ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.calendar.client.operationextensions.EventAttachment"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "attachmentTypeBlacklist": attachmentTypeBlacklist,
            "extension.order": extensionOrder?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter timezonesExpirytime: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqSocialCalendarServletsTimeZoneServlet(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, timezonesExpirytime: Int32? = nil, completion: ((data: ComAdobeCqSocialCalendarServletsTimeZoneServletInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqSocialCalendarServletsTimeZoneServletWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, timezonesExpirytime: timezonesExpirytime).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.calendar.servlets.TimeZoneServlet     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "timezones.expirytime" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter timezonesExpirytime: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqSocialCalendarServletsTimeZoneServletInfo> 
     */
    public class func comAdobeCqSocialCalendarServletsTimeZoneServletWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, timezonesExpirytime: Int32? = nil) -> RequestBuilder<ComAdobeCqSocialCalendarServletsTimeZoneServletInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.calendar.servlets.TimeZoneServlet"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "timezones.expirytime": timezonesExpirytime?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqSocialCalendarServletsTimeZoneServletInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter ranking: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEvent(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, ranking: Int32? = nil, completion: ((data: ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, ranking: ranking).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.commons.comments.endpoints.impl.CommentDeleteEventActivitySuppressor     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "ranking" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter ranking: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventInfo> 
     */
    public class func comAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, ranking: Int32? = nil) -> RequestBuilder<ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.commons.comments.endpoints.impl.CommentDeleteEventActivitySuppressor"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "ranking": ranking?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter fieldWhitelist: (query)  (optional)
     - parameter attachmentTypeBlacklist: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSe(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, fieldWhitelist: [String]? = nil, attachmentTypeBlacklist: [String]? = nil, completion: ((data: ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, fieldWhitelist: fieldWhitelist, attachmentTypeBlacklist: attachmentTypeBlacklist).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.commons.comments.endpoints.impl.CommentOperationService     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "fieldWhitelist" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "attachmentTypeBlacklist" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter fieldWhitelist: (query)  (optional)
     - parameter attachmentTypeBlacklist: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeInfo> 
     */
    public class func comAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, fieldWhitelist: [String]? = nil, attachmentTypeBlacklist: [String]? = nil) -> RequestBuilder<ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.commons.comments.endpoints.impl.CommentOperationService"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "fieldWhitelist": fieldWhitelist,
            "attachmentTypeBlacklist": attachmentTypeBlacklist
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter fieldWhitelist: (query)  (optional)
     - parameter attachmentTypeBlacklist: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperati(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, fieldWhitelist: [String]? = nil, attachmentTypeBlacklist: [String]? = nil, completion: ((data: ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, fieldWhitelist: fieldWhitelist, attachmentTypeBlacklist: attachmentTypeBlacklist).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.commons.comments.endpoints.impl.TranslationOperationService     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "fieldWhitelist" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "attachmentTypeBlacklist" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter fieldWhitelist: (query)  (optional)
     - parameter attachmentTypeBlacklist: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiInfo> 
     */
    public class func comAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, fieldWhitelist: [String]? = nil, attachmentTypeBlacklist: [String]? = nil) -> RequestBuilder<ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.commons.comments.endpoints.impl.TranslationOperationService"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "fieldWhitelist": fieldWhitelist,
            "attachmentTypeBlacklist": attachmentTypeBlacklist
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter numUserLimit: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialC(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, numUserLimit: Int32? = nil, completion: ((data: ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, numUserLimit: numUserLimit).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.commons.comments.listing.impl.SearchCommentSocialComponentListProvider     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "numUserLimit" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter numUserLimit: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCInfo> 
     */
    public class func comAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, numUserLimit: Int32? = nil) -> RequestBuilder<ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.commons.comments.listing.impl.SearchCommentSocialComponentListProvider"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "numUserLimit": numUserLimit?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter enableScheduledPostsSearch: (query)  (optional)
     - parameter numberOfMinutes: (query)  (optional)
     - parameter maxSearchLimit: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPos(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, enableScheduledPostsSearch: Bool? = nil, numberOfMinutes: Int32? = nil, maxSearchLimit: Int32? = nil, completion: ((data: ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, enableScheduledPostsSearch: enableScheduledPostsSearch, numberOfMinutes: numberOfMinutes, maxSearchLimit: maxSearchLimit).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.commons.comments.scheduler.impl.SearchScheduledPosts     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "maxSearchLimit" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "enableScheduledPostsSearch" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "numberOfMinutes" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter enableScheduledPostsSearch: (query)  (optional)
     - parameter numberOfMinutes: (query)  (optional)
     - parameter maxSearchLimit: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosInfo> 
     */
    public class func comAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, enableScheduledPostsSearch: Bool? = nil, numberOfMinutes: Int32? = nil, maxSearchLimit: Int32? = nil) -> RequestBuilder<ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.commons.comments.scheduler.impl.SearchScheduledPosts"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "enableScheduledPostsSearch": enableScheduledPostsSearch,
            "numberOfMinutes": numberOfMinutes?.encodeToJSON(),
            "maxSearchLimit": maxSearchLimit?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter corsEnabling: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqSocialCommonsCorsCORSAuthenticationFilter(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, corsEnabling: Bool? = nil, completion: ((data: ComAdobeCqSocialCommonsCorsCORSAuthenticationFilterInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqSocialCommonsCorsCORSAuthenticationFilterWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, corsEnabling: corsEnabling).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.commons.cors.CORSAuthenticationFilter     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "cors.enabling" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter corsEnabling: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqSocialCommonsCorsCORSAuthenticationFilterInfo> 
     */
    public class func comAdobeCqSocialCommonsCorsCORSAuthenticationFilterWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, corsEnabling: Bool? = nil) -> RequestBuilder<ComAdobeCqSocialCommonsCorsCORSAuthenticationFilterInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.commons.cors.CORSAuthenticationFilter"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "cors.enabling": corsEnabling
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqSocialCommonsCorsCORSAuthenticationFilterInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter priorityOrder: (query)  (optional)
     - parameter replyEmailPatterns: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProvider(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, priorityOrder: Int32? = nil, replyEmailPatterns: [String]? = nil, completion: ((data: ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, priorityOrder: priorityOrder, replyEmailPatterns: replyEmailPatterns).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.AndroidEmailClientProvider     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "priorityOrder" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "replyEmailPatterns" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter priorityOrder: (query)  (optional)
     - parameter replyEmailPatterns: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderInfo> 
     */
    public class func comAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, priorityOrder: Int32? = nil, replyEmailPatterns: [String]? = nil) -> RequestBuilder<ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.AndroidEmailClientProvider"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "priorityOrder": priorityOrder?.encodeToJSON(),
            "replyEmailPatterns": replyEmailPatterns
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter contextPath: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, contextPath: String? = nil, completion: ((data: ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, contextPath: contextPath).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.CommentEmailBuilderImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "context.path" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter contextPath: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplInfo> 
     */
    public class func comAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, contextPath: String? = nil) -> RequestBuilder<ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.CommentEmailBuilderImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "context.path": contextPath
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter eventTopics: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListener(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, eventTopics: String? = nil, completion: ((data: ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, eventTopics: eventTopics).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.CommentEmailEventListener     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "event.topics" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter eventTopics: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerInfo> 
     */
    public class func comAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, eventTopics: String? = nil) -> RequestBuilder<ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.CommentEmailEventListener"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "event.topics": eventTopics
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter priorityOrder: (query)  (optional)
     - parameter replyEmailPatterns: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProvider(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, priorityOrder: Int32? = nil, replyEmailPatterns: [String]? = nil, completion: ((data: ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, priorityOrder: priorityOrder, replyEmailPatterns: replyEmailPatterns).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.CustomEmailClientProvider     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "priorityOrder" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "replyEmailPatterns" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter priorityOrder: (query)  (optional)
     - parameter replyEmailPatterns: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderInfo> 
     */
    public class func comAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, priorityOrder: Int32? = nil, replyEmailPatterns: [String]? = nil) -> RequestBuilder<ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.CustomEmailClientProvider"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "priorityOrder": priorityOrder?.encodeToJSON(),
            "replyEmailPatterns": replyEmailPatterns
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter patternTime: (query)  (optional)
     - parameter patternNewline: (query)  (optional)
     - parameter patternDayOfMonth: (query)  (optional)
     - parameter patternMonth: (query)  (optional)
     - parameter patternYear: (query)  (optional)
     - parameter patternDate: (query)  (optional)
     - parameter patternDateTime: (query)  (optional)
     - parameter patternEmail: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImp(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, patternTime: String? = nil, patternNewline: String? = nil, patternDayOfMonth: String? = nil, patternMonth: String? = nil, patternYear: String? = nil, patternDate: String? = nil, patternDateTime: String? = nil, patternEmail: String? = nil, completion: ((data: ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, patternTime: patternTime, patternNewline: patternNewline, patternDayOfMonth: patternDayOfMonth, patternMonth: patternMonth, patternYear: patternYear, patternDate: patternDate, patternDateTime: patternDateTime, patternEmail: patternEmail).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.EmailQuotedTextPatternsImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "pattern.time" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "pattern.email" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "pattern.month" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "pattern.year" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "pattern.dayOfMonth" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "pattern.newline" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "pattern.date" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "pattern.dateTime" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter patternTime: (query)  (optional)
     - parameter patternNewline: (query)  (optional)
     - parameter patternDayOfMonth: (query)  (optional)
     - parameter patternMonth: (query)  (optional)
     - parameter patternYear: (query)  (optional)
     - parameter patternDate: (query)  (optional)
     - parameter patternDateTime: (query)  (optional)
     - parameter patternEmail: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpInfo> 
     */
    public class func comAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, patternTime: String? = nil, patternNewline: String? = nil, patternDayOfMonth: String? = nil, patternMonth: String? = nil, patternYear: String? = nil, patternDate: String? = nil, patternDateTime: String? = nil, patternEmail: String? = nil) -> RequestBuilder<ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.EmailQuotedTextPatternsImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "pattern.time": patternTime,
            "pattern.newline": patternNewline,
            "pattern.dayOfMonth": patternDayOfMonth,
            "pattern.month": patternMonth,
            "pattern.year": patternYear,
            "pattern.date": patternDate,
            "pattern.dateTime": patternDateTime,
            "pattern.email": patternEmail
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter emailName: (query)  (optional)
     - parameter emailCreatePostFromReply: (query)  (optional)
     - parameter emailAddCommentIdTo: (query)  (optional)
     - parameter emailSubjectMaximumLength: (query)  (optional)
     - parameter emailReplyToAddress: (query)  (optional)
     - parameter emailReplyToDelimiter: (query)  (optional)
     - parameter emailTrackerIdPrefixInSubject: (query)  (optional)
     - parameter emailTrackerIdPrefixInBody: (query)  (optional)
     - parameter emailAsHTML: (query)  (optional)
     - parameter emailDefaultUserName: (query)  (optional)
     - parameter emailTemplatesRootPath: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImp(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, emailName: String? = nil, emailCreatePostFromReply: Bool? = nil, emailAddCommentIdTo: String? = nil, emailSubjectMaximumLength: Int32? = nil, emailReplyToAddress: String? = nil, emailReplyToDelimiter: String? = nil, emailTrackerIdPrefixInSubject: String? = nil, emailTrackerIdPrefixInBody: String? = nil, emailAsHTML: Bool? = nil, emailDefaultUserName: String? = nil, emailTemplatesRootPath: String? = nil, completion: ((data: ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, emailName: emailName, emailCreatePostFromReply: emailCreatePostFromReply, emailAddCommentIdTo: emailAddCommentIdTo, emailSubjectMaximumLength: emailSubjectMaximumLength, emailReplyToAddress: emailReplyToAddress, emailReplyToDelimiter: emailReplyToDelimiter, emailTrackerIdPrefixInSubject: emailTrackerIdPrefixInSubject, emailTrackerIdPrefixInBody: emailTrackerIdPrefixInBody, emailAsHTML: emailAsHTML, emailDefaultUserName: emailDefaultUserName, emailTemplatesRootPath: emailTemplatesRootPath).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.EmailReplyConfigurationImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "email.subjectMaximumLength" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "email.replyToAddress" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "email.trackerIdPrefixInSubject" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "email.addCommentIdTo" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : {
        "values" : "",
        "labels" : ""
      },
      "value" : ""
    },
    "email.templates.rootPath" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "email.name" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "email.asHTML" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "email.createPostFromReply" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "email.trackerIdPrefixInBody" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "email.defaultUserName" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "email.replyToDelimiter" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter emailName: (query)  (optional)
     - parameter emailCreatePostFromReply: (query)  (optional)
     - parameter emailAddCommentIdTo: (query)  (optional)
     - parameter emailSubjectMaximumLength: (query)  (optional)
     - parameter emailReplyToAddress: (query)  (optional)
     - parameter emailReplyToDelimiter: (query)  (optional)
     - parameter emailTrackerIdPrefixInSubject: (query)  (optional)
     - parameter emailTrackerIdPrefixInBody: (query)  (optional)
     - parameter emailAsHTML: (query)  (optional)
     - parameter emailDefaultUserName: (query)  (optional)
     - parameter emailTemplatesRootPath: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpInfo> 
     */
    public class func comAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, emailName: String? = nil, emailCreatePostFromReply: Bool? = nil, emailAddCommentIdTo: String? = nil, emailSubjectMaximumLength: Int32? = nil, emailReplyToAddress: String? = nil, emailReplyToDelimiter: String? = nil, emailTrackerIdPrefixInSubject: String? = nil, emailTrackerIdPrefixInBody: String? = nil, emailAsHTML: Bool? = nil, emailDefaultUserName: String? = nil, emailTemplatesRootPath: String? = nil) -> RequestBuilder<ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.EmailReplyConfigurationImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "email.name": emailName,
            "email.createPostFromReply": emailCreatePostFromReply,
            "email.addCommentIdTo": emailAddCommentIdTo,
            "email.subjectMaximumLength": emailSubjectMaximumLength?.encodeToJSON(),
            "email.replyToAddress": emailReplyToAddress,
            "email.replyToDelimiter": emailReplyToDelimiter,
            "email.trackerIdPrefixInSubject": emailTrackerIdPrefixInSubject,
            "email.trackerIdPrefixInBody": emailTrackerIdPrefixInBody,
            "email.asHTML": emailAsHTML,
            "email.defaultUserName": emailDefaultUserName,
            "email.templates.rootPath": emailTemplatesRootPath
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter connectProtocol: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqSocialCommonsEmailreplyImplEmailReplyImporter(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, connectProtocol: String? = nil, completion: ((data: ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, connectProtocol: connectProtocol).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.EmailReplyImporter     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "connectProtocol" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : {
        "values" : "",
        "labels" : ""
      },
      "value" : ""
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter connectProtocol: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterInfo> 
     */
    public class func comAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, connectProtocol: String? = nil) -> RequestBuilder<ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.EmailReplyImporter"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "connectProtocol": connectProtocol
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter priorityOrder: (query)  (optional)
     - parameter replyEmailPatterns: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProvider(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, priorityOrder: Int32? = nil, replyEmailPatterns: [String]? = nil, completion: ((data: ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, priorityOrder: priorityOrder, replyEmailPatterns: replyEmailPatterns).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.GmailEmailClientProvider     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "priorityOrder" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "replyEmailPatterns" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter priorityOrder: (query)  (optional)
     - parameter replyEmailPatterns: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderInfo> 
     */
    public class func comAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, priorityOrder: Int32? = nil, replyEmailPatterns: [String]? = nil) -> RequestBuilder<ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.GmailEmailClientProvider"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "priorityOrder": priorityOrder?.encodeToJSON(),
            "replyEmailPatterns": replyEmailPatterns
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter priorityOrder: (query)  (optional)
     - parameter replyEmailPatterns: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProvider(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, priorityOrder: Int32? = nil, replyEmailPatterns: [String]? = nil, completion: ((data: ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, priorityOrder: priorityOrder, replyEmailPatterns: replyEmailPatterns).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.IOSEmailClientProvider     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "priorityOrder" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "replyEmailPatterns" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter priorityOrder: (query)  (optional)
     - parameter replyEmailPatterns: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderInfo> 
     */
    public class func comAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, priorityOrder: Int32? = nil, replyEmailPatterns: [String]? = nil) -> RequestBuilder<ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.IOSEmailClientProvider"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "priorityOrder": priorityOrder?.encodeToJSON(),
            "replyEmailPatterns": replyEmailPatterns
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter priorityOrder: (query)  (optional)
     - parameter replyEmailPatterns: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProvider(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, priorityOrder: Int32? = nil, replyEmailPatterns: [String]? = nil, completion: ((data: ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, priorityOrder: priorityOrder, replyEmailPatterns: replyEmailPatterns).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.MacmailEmailClientProvider     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "priorityOrder" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "replyEmailPatterns" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter priorityOrder: (query)  (optional)
     - parameter replyEmailPatterns: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderInfo> 
     */
    public class func comAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, priorityOrder: Int32? = nil, replyEmailPatterns: [String]? = nil) -> RequestBuilder<ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.MacmailEmailClientProvider"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "priorityOrder": priorityOrder?.encodeToJSON(),
            "replyEmailPatterns": replyEmailPatterns
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter priorityOrder: (query)  (optional)
     - parameter replyEmailPatterns: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProvider(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, priorityOrder: Int32? = nil, replyEmailPatterns: [String]? = nil, completion: ((data: ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, priorityOrder: priorityOrder, replyEmailPatterns: replyEmailPatterns).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.OutLookEmailClientProvider     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "priorityOrder" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "replyEmailPatterns" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter priorityOrder: (query)  (optional)
     - parameter replyEmailPatterns: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderInfo> 
     */
    public class func comAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, priorityOrder: Int32? = nil, replyEmailPatterns: [String]? = nil) -> RequestBuilder<ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.OutLookEmailClientProvider"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "priorityOrder": priorityOrder?.encodeToJSON(),
            "replyEmailPatterns": replyEmailPatterns
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter replyEmailPatterns: (query)  (optional)
     - parameter priorityOrder: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProvider(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, replyEmailPatterns: [String]? = nil, priorityOrder: Int32? = nil, completion: ((data: ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, replyEmailPatterns: replyEmailPatterns, priorityOrder: priorityOrder).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.UnknownEmailClientProvider     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "priorityOrder" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "replyEmailPatterns" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter replyEmailPatterns: (query)  (optional)
     - parameter priorityOrder: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderInfo> 
     */
    public class func comAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, replyEmailPatterns: [String]? = nil, priorityOrder: Int32? = nil) -> RequestBuilder<ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.UnknownEmailClientProvider"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "replyEmailPatterns": replyEmailPatterns,
            "priorityOrder": priorityOrder?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter priorityOrder: (query)  (optional)
     - parameter replyEmailPatterns: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProvider(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, priorityOrder: Int32? = nil, replyEmailPatterns: [String]? = nil, completion: ((data: ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, priorityOrder: priorityOrder, replyEmailPatterns: replyEmailPatterns).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.YahooEmailClientProvider     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "priorityOrder" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "replyEmailPatterns" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter priorityOrder: (query)  (optional)
     - parameter replyEmailPatterns: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderInfo> 
     */
    public class func comAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, priorityOrder: Int32? = nil, replyEmailPatterns: [String]? = nil) -> RequestBuilder<ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.YahooEmailClientProvider"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "priorityOrder": priorityOrder?.encodeToJSON(),
            "replyEmailPatterns": replyEmailPatterns
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter numberOfDays: (query)  (optional)
     - parameter ageOfFile: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUpload(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, numberOfDays: Int32? = nil, ageOfFile: Int32? = nil, completion: ((data: ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, numberOfDays: numberOfDays, ageOfFile: ageOfFile).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.commons.maintainance.impl.DeleteTempUGCImageUploads     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "ageOfFile" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "numberOfDays" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter numberOfDays: (query)  (optional)
     - parameter ageOfFile: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadInfo> 
     */
    public class func comAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, numberOfDays: Int32? = nil, ageOfFile: Int32? = nil) -> RequestBuilder<ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.commons.maintainance.impl.DeleteTempUGCImageUploads"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "numberOfDays": numberOfDays?.encodeToJSON(),
            "ageOfFile": ageOfFile?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter eventTopics: (query)  (optional)
     - parameter eventFilter: (query)  (optional)
     - parameter verbs: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, eventTopics: String? = nil, eventFilter: String? = nil, verbs: [String]? = nil, completion: ((data: ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, eventTopics: eventTopics, eventFilter: eventFilter, verbs: verbs).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.commons.ugclimiter.impl.UGCLimiterServiceImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "event.topics" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "verbs" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "event.filter" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter eventTopics: (query)  (optional)
     - parameter eventFilter: (query)  (optional)
     - parameter verbs: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplInfo> 
     */
    public class func comAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, eventTopics: String? = nil, eventFilter: String? = nil, verbs: [String]? = nil) -> RequestBuilder<ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.commons.ugclimiter.impl.UGCLimiterServiceImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "event.topics": eventTopics,
            "event.filter": eventFilter,
            "verbs": verbs
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter enable: (query)  (optional)
     - parameter uGCLimit: (query)  (optional)
     - parameter ugcLimitDuration: (query)  (optional)
     - parameter domains: (query)  (optional)
     - parameter toList: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimit(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, enable: Bool? = nil, uGCLimit: Int32? = nil, ugcLimitDuration: Int32? = nil, domains: [String]? = nil, toList: [String]? = nil, completion: ((data: ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, enable: enable, uGCLimit: uGCLimit, ugcLimitDuration: ugcLimitDuration, domains: domains, toList: toList).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.commons.ugclimitsconfig.impl.CommunityUserUGCLimitsConfigImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "ugcLimitDuration" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "enable" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "UGCLimit" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "domains" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "toList" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter enable: (query)  (optional)
     - parameter uGCLimit: (query)  (optional)
     - parameter ugcLimitDuration: (query)  (optional)
     - parameter domains: (query)  (optional)
     - parameter toList: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitInfo> 
     */
    public class func comAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, enable: Bool? = nil, uGCLimit: Int32? = nil, ugcLimitDuration: Int32? = nil, domains: [String]? = nil, toList: [String]? = nil) -> RequestBuilder<ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.commons.ugclimitsconfig.impl.CommunityUserUGCLimitsConfigImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "enable": enable,
            "UGCLimit": uGCLimit?.encodeToJSON(),
            "ugcLimitDuration": ugcLimitDuration?.encodeToJSON(),
            "domains": domains,
            "toList": toList
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter oauthProviderId: (query)  (optional)
     - parameter oauthCloudConfigRoot: (query)  (optional)
     - parameter providerConfigRoot: (query)  (optional)
     - parameter providerConfigCreateTagsEnabled: (query)  (optional)
     - parameter providerConfigUserFolder: (query)  (optional)
     - parameter providerConfigFacebookFetchFields: (query)  (optional)
     - parameter providerConfigFacebookFields: (query)  (optional)
     - parameter providerConfigRefreshUserdataEnabled: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqSocialConnectOauthImplFacebookProviderImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, oauthProviderId: String? = nil, oauthCloudConfigRoot: String? = nil, providerConfigRoot: String? = nil, providerConfigCreateTagsEnabled: Bool? = nil, providerConfigUserFolder: String? = nil, providerConfigFacebookFetchFields: Bool? = nil, providerConfigFacebookFields: [String]? = nil, providerConfigRefreshUserdataEnabled: Bool? = nil, completion: ((data: ComAdobeCqSocialConnectOauthImplFacebookProviderImplInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqSocialConnectOauthImplFacebookProviderImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, oauthProviderId: oauthProviderId, oauthCloudConfigRoot: oauthCloudConfigRoot, providerConfigRoot: providerConfigRoot, providerConfigCreateTagsEnabled: providerConfigCreateTagsEnabled, providerConfigUserFolder: providerConfigUserFolder, providerConfigFacebookFetchFields: providerConfigFacebookFetchFields, providerConfigFacebookFields: providerConfigFacebookFields, providerConfigRefreshUserdataEnabled: providerConfigRefreshUserdataEnabled).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.connect.oauth.impl.FacebookProviderImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "provider.config.root" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "provider.config.facebook.fetch.fields" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "oauth.provider.id" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "oauth.cloud.config.root" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "provider.config.user.folder" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : {
        "values" : "",
        "labels" : ""
      },
      "value" : ""
    },
    "provider.config.facebook.fields" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "provider.config.refresh.userdata.enabled" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "provider.config.create.tags.enabled" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter oauthProviderId: (query)  (optional)
     - parameter oauthCloudConfigRoot: (query)  (optional)
     - parameter providerConfigRoot: (query)  (optional)
     - parameter providerConfigCreateTagsEnabled: (query)  (optional)
     - parameter providerConfigUserFolder: (query)  (optional)
     - parameter providerConfigFacebookFetchFields: (query)  (optional)
     - parameter providerConfigFacebookFields: (query)  (optional)
     - parameter providerConfigRefreshUserdataEnabled: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqSocialConnectOauthImplFacebookProviderImplInfo> 
     */
    public class func comAdobeCqSocialConnectOauthImplFacebookProviderImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, oauthProviderId: String? = nil, oauthCloudConfigRoot: String? = nil, providerConfigRoot: String? = nil, providerConfigCreateTagsEnabled: Bool? = nil, providerConfigUserFolder: String? = nil, providerConfigFacebookFetchFields: Bool? = nil, providerConfigFacebookFields: [String]? = nil, providerConfigRefreshUserdataEnabled: Bool? = nil) -> RequestBuilder<ComAdobeCqSocialConnectOauthImplFacebookProviderImplInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.connect.oauth.impl.FacebookProviderImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "oauth.provider.id": oauthProviderId,
            "oauth.cloud.config.root": oauthCloudConfigRoot,
            "provider.config.root": providerConfigRoot,
            "provider.config.create.tags.enabled": providerConfigCreateTagsEnabled,
            "provider.config.user.folder": providerConfigUserFolder,
            "provider.config.facebook.fetch.fields": providerConfigFacebookFetchFields,
            "provider.config.facebook.fields": providerConfigFacebookFields,
            "provider.config.refresh.userdata.enabled": providerConfigRefreshUserdataEnabled
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqSocialConnectOauthImplFacebookProviderImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter path: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandle(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, path: [String]? = nil, serviceRanking: Int32? = nil, completion: ((data: ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, path: path, serviceRanking: serviceRanking).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.connect.oauth.impl.SocialOAuthAuthenticationHandler     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "path" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "service.ranking" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter path: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleInfo> 
     */
    public class func comAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, path: [String]? = nil, serviceRanking: Int32? = nil) -> RequestBuilder<ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.connect.oauth.impl.SocialOAuthAuthenticationHandler"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "path": path,
            "service.ranking": serviceRanking?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter facebook: (query)  (optional)
     - parameter twitter: (query)  (optional)
     - parameter providerConfigUserFolder: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapper(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, facebook: [String]? = nil, twitter: [String]? = nil, providerConfigUserFolder: String? = nil, completion: ((data: ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, facebook: facebook, twitter: twitter, providerConfigUserFolder: providerConfigUserFolder).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.connect.oauth.impl.SocialOAuthUserProfileMapper     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "twitter" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "facebook" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "provider.config.user.folder" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter facebook: (query)  (optional)
     - parameter twitter: (query)  (optional)
     - parameter providerConfigUserFolder: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperInfo> 
     */
    public class func comAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, facebook: [String]? = nil, twitter: [String]? = nil, providerConfigUserFolder: String? = nil) -> RequestBuilder<ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.connect.oauth.impl.SocialOAuthUserProfileMapper"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "facebook": facebook,
            "twitter": twitter,
            "provider.config.user.folder": providerConfigUserFolder
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter oauthProviderId: (query)  (optional)
     - parameter oauthCloudConfigRoot: (query)  (optional)
     - parameter providerConfigRoot: (query)  (optional)
     - parameter providerConfigUserFolder: (query)  (optional)
     - parameter providerConfigTwitterEnableParams: (query)  (optional)
     - parameter providerConfigTwitterParams: (query)  (optional)
     - parameter providerConfigRefreshUserdataEnabled: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqSocialConnectOauthImplTwitterProviderImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, oauthProviderId: String? = nil, oauthCloudConfigRoot: String? = nil, providerConfigRoot: String? = nil, providerConfigUserFolder: String? = nil, providerConfigTwitterEnableParams: Bool? = nil, providerConfigTwitterParams: [String]? = nil, providerConfigRefreshUserdataEnabled: Bool? = nil, completion: ((data: ComAdobeCqSocialConnectOauthImplTwitterProviderImplInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqSocialConnectOauthImplTwitterProviderImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, oauthProviderId: oauthProviderId, oauthCloudConfigRoot: oauthCloudConfigRoot, providerConfigRoot: providerConfigRoot, providerConfigUserFolder: providerConfigUserFolder, providerConfigTwitterEnableParams: providerConfigTwitterEnableParams, providerConfigTwitterParams: providerConfigTwitterParams, providerConfigRefreshUserdataEnabled: providerConfigRefreshUserdataEnabled).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.connect.oauth.impl.TwitterProviderImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "provider.config.root" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "provider.config.twitter.enable.params" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "oauth.provider.id" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "provider.config.twitter.params" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "oauth.cloud.config.root" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "provider.config.user.folder" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : {
        "values" : "",
        "labels" : ""
      },
      "value" : ""
    },
    "provider.config.refresh.userdata.enabled" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter oauthProviderId: (query)  (optional)
     - parameter oauthCloudConfigRoot: (query)  (optional)
     - parameter providerConfigRoot: (query)  (optional)
     - parameter providerConfigUserFolder: (query)  (optional)
     - parameter providerConfigTwitterEnableParams: (query)  (optional)
     - parameter providerConfigTwitterParams: (query)  (optional)
     - parameter providerConfigRefreshUserdataEnabled: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqSocialConnectOauthImplTwitterProviderImplInfo> 
     */
    public class func comAdobeCqSocialConnectOauthImplTwitterProviderImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, oauthProviderId: String? = nil, oauthCloudConfigRoot: String? = nil, providerConfigRoot: String? = nil, providerConfigUserFolder: String? = nil, providerConfigTwitterEnableParams: Bool? = nil, providerConfigTwitterParams: [String]? = nil, providerConfigRefreshUserdataEnabled: Bool? = nil) -> RequestBuilder<ComAdobeCqSocialConnectOauthImplTwitterProviderImplInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.connect.oauth.impl.TwitterProviderImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "oauth.provider.id": oauthProviderId,
            "oauth.cloud.config.root": oauthCloudConfigRoot,
            "provider.config.root": providerConfigRoot,
            "provider.config.user.folder": providerConfigUserFolder,
            "provider.config.twitter.enable.params": providerConfigTwitterEnableParams,
            "provider.config.twitter.params": providerConfigTwitterParams,
            "provider.config.refresh.userdata.enabled": providerConfigRefreshUserdataEnabled
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqSocialConnectOauthImplTwitterProviderImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqSocialContentFragmentsServicesEnabled: (query)  (optional)
     - parameter cqSocialContentFragmentsServicesWaitTimeSeconds: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmen(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqSocialContentFragmentsServicesEnabled: Bool? = nil, cqSocialContentFragmentsServicesWaitTimeSeconds: Int32? = nil, completion: ((data: ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqSocialContentFragmentsServicesEnabled: cqSocialContentFragmentsServicesEnabled, cqSocialContentFragmentsServicesWaitTimeSeconds: cqSocialContentFragmentsServicesWaitTimeSeconds).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.content.fragments.services.impl.CommunitiesFragmentCreationServiceImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "cq.social.content.fragments.services.enabled" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "cq.social.content.fragments.services.waitTimeSeconds" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqSocialContentFragmentsServicesEnabled: (query)  (optional)
     - parameter cqSocialContentFragmentsServicesWaitTimeSeconds: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenInfo> 
     */
    public class func comAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqSocialContentFragmentsServicesEnabled: Bool? = nil, cqSocialContentFragmentsServicesWaitTimeSeconds: Int32? = nil) -> RequestBuilder<ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.content.fragments.services.impl.CommunitiesFragmentCreationServiceImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "cq.social.content.fragments.services.enabled": cqSocialContentFragmentsServicesEnabled,
            "cq.social.content.fragments.services.waitTimeSeconds": cqSocialContentFragmentsServicesWaitTimeSeconds?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter versionId: (query)  (optional)
     - parameter cacheOn: (query)  (optional)
     - parameter concurrencyLevel: (query)  (optional)
     - parameter cacheStartSize: (query)  (optional)
     - parameter cacheTtl: (query)  (optional)
     - parameter cacheSize: (query)  (optional)
     - parameter timeLimit: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqSocialDatastoreAsImplASResourceProviderFactory(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, versionId: String? = nil, cacheOn: Bool? = nil, concurrencyLevel: Int32? = nil, cacheStartSize: Int32? = nil, cacheTtl: Int32? = nil, cacheSize: Int32? = nil, timeLimit: Int32? = nil, completion: ((data: ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqSocialDatastoreAsImplASResourceProviderFactoryWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, versionId: versionId, cacheOn: cacheOn, concurrencyLevel: concurrencyLevel, cacheStartSize: cacheStartSize, cacheTtl: cacheTtl, cacheSize: cacheSize, timeLimit: timeLimit).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.datastore.as.impl.ASResourceProviderFactory     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "cache.on" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "concurrency.level" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "cache.size" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "version.id" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "time.limit" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "cache.start.size" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "cache.ttl" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter versionId: (query)  (optional)
     - parameter cacheOn: (query)  (optional)
     - parameter concurrencyLevel: (query)  (optional)
     - parameter cacheStartSize: (query)  (optional)
     - parameter cacheTtl: (query)  (optional)
     - parameter cacheSize: (query)  (optional)
     - parameter timeLimit: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryInfo> 
     */
    public class func comAdobeCqSocialDatastoreAsImplASResourceProviderFactoryWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, versionId: String? = nil, cacheOn: Bool? = nil, concurrencyLevel: Int32? = nil, cacheStartSize: Int32? = nil, cacheTtl: Int32? = nil, cacheSize: Int32? = nil, timeLimit: Int32? = nil) -> RequestBuilder<ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.datastore.as.impl.ASResourceProviderFactory"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "version.id": versionId,
            "cache.on": cacheOn,
            "concurrency.level": concurrencyLevel?.encodeToJSON(),
            "cache.start.size": cacheStartSize?.encodeToJSON(),
            "cache.ttl": cacheTtl?.encodeToJSON(),
            "cache.size": cacheSize?.encodeToJSON(),
            "time.limit": timeLimit?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter solrZkTimeout: (query)  (optional)
     - parameter solrCommit: (query)  (optional)
     - parameter cacheOn: (query)  (optional)
     - parameter concurrencyLevel: (query)  (optional)
     - parameter cacheStartSize: (query)  (optional)
     - parameter cacheTtl: (query)  (optional)
     - parameter cacheSize: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactory(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, solrZkTimeout: String? = nil, solrCommit: String? = nil, cacheOn: Bool? = nil, concurrencyLevel: Int32? = nil, cacheStartSize: Int32? = nil, cacheTtl: Int32? = nil, cacheSize: Int32? = nil, completion: ((data: ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, solrZkTimeout: solrZkTimeout, solrCommit: solrCommit, cacheOn: cacheOn, concurrencyLevel: concurrencyLevel, cacheStartSize: cacheStartSize, cacheTtl: cacheTtl, cacheSize: cacheSize).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.datastore.op.impl.SocialMSResourceProviderFactory     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "cache.on" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "concurrency.level" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "solr.zk.timeout" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "solr.commit" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "cache.size" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "cache.start.size" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "cache.ttl" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter solrZkTimeout: (query)  (optional)
     - parameter solrCommit: (query)  (optional)
     - parameter cacheOn: (query)  (optional)
     - parameter concurrencyLevel: (query)  (optional)
     - parameter cacheStartSize: (query)  (optional)
     - parameter cacheTtl: (query)  (optional)
     - parameter cacheSize: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryInfo> 
     */
    public class func comAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, solrZkTimeout: String? = nil, solrCommit: String? = nil, cacheOn: Bool? = nil, concurrencyLevel: Int32? = nil, cacheStartSize: Int32? = nil, cacheTtl: Int32? = nil, cacheSize: Int32? = nil) -> RequestBuilder<ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.datastore.op.impl.SocialMSResourceProviderFactory"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "solr.zk.timeout": solrZkTimeout,
            "solr.commit": solrCommit,
            "cache.on": cacheOn,
            "concurrency.level": concurrencyLevel?.encodeToJSON(),
            "cache.start.size": cacheStartSize?.encodeToJSON(),
            "cache.ttl": cacheTtl?.encodeToJSON(),
            "cache.size": cacheSize?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter solrZkTimeout: (query)  (optional)
     - parameter solrCommit: (query)  (optional)
     - parameter cacheOn: (query)  (optional)
     - parameter concurrencyLevel: (query)  (optional)
     - parameter cacheStartSize: (query)  (optional)
     - parameter cacheTtl: (query)  (optional)
     - parameter cacheSize: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactor(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, solrZkTimeout: String? = nil, solrCommit: String? = nil, cacheOn: Bool? = nil, concurrencyLevel: Int32? = nil, cacheStartSize: Int32? = nil, cacheTtl: Int32? = nil, cacheSize: Int32? = nil, completion: ((data: ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, solrZkTimeout: solrZkTimeout, solrCommit: solrCommit, cacheOn: cacheOn, concurrencyLevel: concurrencyLevel, cacheStartSize: cacheStartSize, cacheTtl: cacheTtl, cacheSize: cacheSize).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.datastore.rdb.impl.SocialRDBResourceProviderFactory     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "cache.on" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "concurrency.level" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "solr.zk.timeout" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "solr.commit" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "cache.size" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "cache.start.size" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "cache.ttl" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter solrZkTimeout: (query)  (optional)
     - parameter solrCommit: (query)  (optional)
     - parameter cacheOn: (query)  (optional)
     - parameter concurrencyLevel: (query)  (optional)
     - parameter cacheStartSize: (query)  (optional)
     - parameter cacheTtl: (query)  (optional)
     - parameter cacheSize: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorInfo> 
     */
    public class func comAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, solrZkTimeout: String? = nil, solrCommit: String? = nil, cacheOn: Bool? = nil, concurrencyLevel: Int32? = nil, cacheStartSize: Int32? = nil, cacheTtl: Int32? = nil, cacheSize: Int32? = nil) -> RequestBuilder<ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.datastore.rdb.impl.SocialRDBResourceProviderFactory"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "solr.zk.timeout": solrZkTimeout,
            "solr.commit": solrCommit,
            "cache.on": cacheOn,
            "concurrency.level": concurrencyLevel?.encodeToJSON(),
            "cache.start.size": cacheStartSize?.encodeToJSON(),
            "cache.ttl": cacheTtl?.encodeToJSON(),
            "cache.size": cacheSize?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter isMemberCheck: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorF(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, isMemberCheck: Bool? = nil, completion: ((data: ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, isMemberCheck: isMemberCheck).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.enablement.adaptors.EnablementLearningPathAdaptorFactory     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "isMemberCheck" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter isMemberCheck: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFInfo> 
     */
    public class func comAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, isMemberCheck: Bool? = nil) -> RequestBuilder<ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.enablement.adaptors.EnablementLearningPathAdaptorFactory"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "isMemberCheck": isMemberCheck
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter isMemberCheck: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFacto(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, isMemberCheck: Bool? = nil, completion: ((data: ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, isMemberCheck: isMemberCheck).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.enablement.adaptors.EnablementResourceAdaptorFactory     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "isMemberCheck" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter isMemberCheck: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoInfo> 
     */
    public class func comAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, isMemberCheck: Bool? = nil) -> RequestBuilder<ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.enablement.adaptors.EnablementResourceAdaptorFactory"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "isMemberCheck": isMemberCheck
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter fieldWhitelist: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqSocialEnablementLearningpathEndpointsImplEnablementL(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, fieldWhitelist: [String]? = nil, completion: ((data: ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, fieldWhitelist: fieldWhitelist).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.enablement.learningpath.endpoints.impl.EnablementLearningPathModelOperationService     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "fieldWhitelist" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter fieldWhitelist: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLInfo> 
     */
    public class func comAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, fieldWhitelist: [String]? = nil) -> RequestBuilder<ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.enablement.learningpath.endpoints.impl.EnablementLearningPathModelOperationService"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "fieldWhitelist": fieldWhitelist
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter fieldWhitelist: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqSocialEnablementResourceEndpointsImplEnablementResou(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, fieldWhitelist: [String]? = nil, completion: ((data: ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqSocialEnablementResourceEndpointsImplEnablementResouWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, fieldWhitelist: fieldWhitelist).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.enablement.resource.endpoints.impl.EnablementResourceModelOperationService     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "fieldWhitelist" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter fieldWhitelist: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouInfo> 
     */
    public class func comAdobeCqSocialEnablementResourceEndpointsImplEnablementResouWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, fieldWhitelist: [String]? = nil) -> RequestBuilder<ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.enablement.resource.endpoints.impl.EnablementResourceModelOperationService"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "fieldWhitelist": fieldWhitelist
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqSocialEnablementServicesImplAuthorMarkerImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int32? = nil, completion: ((data: ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqSocialEnablementServicesImplAuthorMarkerImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, serviceRanking: serviceRanking).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.enablement.services.impl.AuthorMarkerImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "service_location" : "service_location",
  "bundle_location" : "bundle_location",
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "service.ranking" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplInfo> 
     */
    public class func comAdobeCqSocialEnablementServicesImplAuthorMarkerImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int32? = nil) -> RequestBuilder<ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.enablement.services.impl.AuthorMarkerImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "service.ranking": serviceRanking?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter slingServletSelectors: (query)  (optional)
     - parameter slingServletExtensions: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGe(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, slingServletSelectors: String? = nil, slingServletExtensions: String? = nil, completion: ((data: ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, slingServletSelectors: slingServletSelectors, slingServletExtensions: slingServletExtensions).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.filelibrary.client.endpoints.FilelibraryDownloadGetServlet     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "sling.servlet.extensions" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "sling.servlet.selectors" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter slingServletSelectors: (query)  (optional)
     - parameter slingServletExtensions: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeInfo> 
     */
    public class func comAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, slingServletSelectors: String? = nil, slingServletExtensions: String? = nil) -> RequestBuilder<ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.filelibrary.client.endpoints.FilelibraryDownloadGetServlet"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "sling.servlet.selectors": slingServletSelectors,
            "sling.servlet.extensions": slingServletExtensions
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter fieldWhitelist: (query)  (optional)
     - parameter attachmentTypeBlacklist: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOpera(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, fieldWhitelist: [String]? = nil, attachmentTypeBlacklist: [String]? = nil, completion: ((data: ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, fieldWhitelist: fieldWhitelist, attachmentTypeBlacklist: attachmentTypeBlacklist).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.filelibrary.client.endpoints.impl.FileLibraryOperationsService     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "fieldWhitelist" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "attachmentTypeBlacklist" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter fieldWhitelist: (query)  (optional)
     - parameter attachmentTypeBlacklist: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaInfo> 
     */
    public class func comAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, fieldWhitelist: [String]? = nil, attachmentTypeBlacklist: [String]? = nil) -> RequestBuilder<ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.filelibrary.client.endpoints.impl.FileLibraryOperationsService"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "fieldWhitelist": fieldWhitelist,
            "attachmentTypeBlacklist": attachmentTypeBlacklist
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter fieldWhitelist: (query)  (optional)
     - parameter attachmentTypeBlacklist: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqSocialForumClientEndpointsImplForumOperationsService(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, fieldWhitelist: [String]? = nil, attachmentTypeBlacklist: [String]? = nil, completion: ((data: ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqSocialForumClientEndpointsImplForumOperationsServiceWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, fieldWhitelist: fieldWhitelist, attachmentTypeBlacklist: attachmentTypeBlacklist).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.forum.client.endpoints.impl.ForumOperationsService     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "fieldWhitelist" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "attachmentTypeBlacklist" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter fieldWhitelist: (query)  (optional)
     - parameter attachmentTypeBlacklist: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceInfo> 
     */
    public class func comAdobeCqSocialForumClientEndpointsImplForumOperationsServiceWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, fieldWhitelist: [String]? = nil, attachmentTypeBlacklist: [String]? = nil) -> RequestBuilder<ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.forum.client.endpoints.impl.ForumOperationsService"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "fieldWhitelist": fieldWhitelist,
            "attachmentTypeBlacklist": attachmentTypeBlacklist
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter extensionOrder: (query)  (optional)
     - parameter flushForumontopic: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqSocialForumDispatcherImplFlushOperations(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, extensionOrder: Int32? = nil, flushForumontopic: Bool? = nil, completion: ((data: ComAdobeCqSocialForumDispatcherImplFlushOperationsInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqSocialForumDispatcherImplFlushOperationsWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, extensionOrder: extensionOrder, flushForumontopic: flushForumontopic).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.forum.dispatcher.impl.FlushOperations     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "extension.order" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "flush.forumontopic" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter extensionOrder: (query)  (optional)
     - parameter flushForumontopic: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqSocialForumDispatcherImplFlushOperationsInfo> 
     */
    public class func comAdobeCqSocialForumDispatcherImplFlushOperationsWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, extensionOrder: Int32? = nil, flushForumontopic: Bool? = nil) -> RequestBuilder<ComAdobeCqSocialForumDispatcherImplFlushOperationsInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.forum.dispatcher.impl.FlushOperations"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "extension.order": extensionOrder?.encodeToJSON(),
            "flush.forumontopic": flushForumontopic
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqSocialForumDispatcherImplFlushOperationsInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter groupListingPaginationEnable: (query)  (optional)
     - parameter groupListingLazyloadingEnable: (query)  (optional)
     - parameter pageSize: (query)  (optional)
     - parameter priority: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqSocialGroupClientImplCommunityGroupCollectionComponen(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, groupListingPaginationEnable: Bool? = nil, groupListingLazyloadingEnable: Bool? = nil, pageSize: Int32? = nil, priority: Int32? = nil, completion: ((data: ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, groupListingPaginationEnable: groupListingPaginationEnable, groupListingLazyloadingEnable: groupListingLazyloadingEnable, pageSize: pageSize, priority: priority).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.group.client.impl.CommunityGroupCollectionComponentFactory     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "page.size" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "priority" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "group.listing.pagination.enable" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "group.listing.lazyloading.enable" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter groupListingPaginationEnable: (query)  (optional)
     - parameter groupListingLazyloadingEnable: (query)  (optional)
     - parameter pageSize: (query)  (optional)
     - parameter priority: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenInfo> 
     */
    public class func comAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, groupListingPaginationEnable: Bool? = nil, groupListingLazyloadingEnable: Bool? = nil, pageSize: Int32? = nil, priority: Int32? = nil) -> RequestBuilder<ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.group.client.impl.CommunityGroupCollectionComponentFactory"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "group.listing.pagination.enable": groupListingPaginationEnable,
            "group.listing.lazyloading.enable": groupListingLazyloadingEnable,
            "page.size": pageSize?.encodeToJSON(),
            "priority": priority?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter maxWaitTime: (query)  (optional)
     - parameter minWaitBetweenRetries: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqSocialGroupImplGroupServiceImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, maxWaitTime: Int32? = nil, minWaitBetweenRetries: Int32? = nil, completion: ((data: ComAdobeCqSocialGroupImplGroupServiceImplInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqSocialGroupImplGroupServiceImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, maxWaitTime: maxWaitTime, minWaitBetweenRetries: minWaitBetweenRetries).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.group.impl.GroupServiceImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "minWaitBetweenRetries" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "maxWaitTime" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter maxWaitTime: (query)  (optional)
     - parameter minWaitBetweenRetries: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqSocialGroupImplGroupServiceImplInfo> 
     */
    public class func comAdobeCqSocialGroupImplGroupServiceImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, maxWaitTime: Int32? = nil, minWaitBetweenRetries: Int32? = nil) -> RequestBuilder<ComAdobeCqSocialGroupImplGroupServiceImplInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.group.impl.GroupServiceImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "maxWaitTime": maxWaitTime?.encodeToJSON(),
            "minWaitBetweenRetries": minWaitBetweenRetries?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqSocialGroupImplGroupServiceImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter parameterGuavaCacheEnabled: (query)  (optional)
     - parameter parameterGuavaCacheParams: (query)  (optional)
     - parameter parameterGuavaCacheReload: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqSocialHandlebarsGuavaTemplateCacheImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, parameterGuavaCacheEnabled: Bool? = nil, parameterGuavaCacheParams: String? = nil, parameterGuavaCacheReload: Bool? = nil, serviceRanking: Int32? = nil, completion: ((data: ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqSocialHandlebarsGuavaTemplateCacheImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, parameterGuavaCacheEnabled: parameterGuavaCacheEnabled, parameterGuavaCacheParams: parameterGuavaCacheParams, parameterGuavaCacheReload: parameterGuavaCacheReload, serviceRanking: serviceRanking).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.handlebars.GuavaTemplateCacheImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "service_location" : "service_location",
  "bundle_location" : "bundle_location",
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "parameter.guava.cache.reload" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "parameter.guava.cache.params" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "parameter.guava.cache.enabled" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "service.ranking" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter parameterGuavaCacheEnabled: (query)  (optional)
     - parameter parameterGuavaCacheParams: (query)  (optional)
     - parameter parameterGuavaCacheReload: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplInfo> 
     */
    public class func comAdobeCqSocialHandlebarsGuavaTemplateCacheImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, parameterGuavaCacheEnabled: Bool? = nil, parameterGuavaCacheParams: String? = nil, parameterGuavaCacheReload: Bool? = nil, serviceRanking: Int32? = nil) -> RequestBuilder<ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.handlebars.GuavaTemplateCacheImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "parameter.guava.cache.enabled": parameterGuavaCacheEnabled,
            "parameter.guava.cache.params": parameterGuavaCacheParams,
            "parameter.guava.cache.reload": parameterGuavaCacheReload,
            "service.ranking": serviceRanking?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter fieldWhitelist: (query)  (optional)
     - parameter attachmentTypeBlacklist: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsS(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, fieldWhitelist: [String]? = nil, attachmentTypeBlacklist: [String]? = nil, completion: ((data: ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, fieldWhitelist: fieldWhitelist, attachmentTypeBlacklist: attachmentTypeBlacklist).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.ideation.client.endpoints.impl.IdeationOperationsService     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "fieldWhitelist" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "attachmentTypeBlacklist" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter fieldWhitelist: (query)  (optional)
     - parameter attachmentTypeBlacklist: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSInfo> 
     */
    public class func comAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, fieldWhitelist: [String]? = nil, attachmentTypeBlacklist: [String]? = nil) -> RequestBuilder<ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.ideation.client.endpoints.impl.IdeationOperationsService"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "fieldWhitelist": fieldWhitelist,
            "attachmentTypeBlacklist": attachmentTypeBlacklist
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter fieldWhitelist: (query)  (optional)
     - parameter attachmentTypeBlacklist: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqSocialJournalClientEndpointsImplJournalOperationsSer(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, fieldWhitelist: [String]? = nil, attachmentTypeBlacklist: [String]? = nil, completion: ((data: ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, fieldWhitelist: fieldWhitelist, attachmentTypeBlacklist: attachmentTypeBlacklist).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.journal.client.endpoints.impl.JournalOperationsService     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "fieldWhitelist" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "attachmentTypeBlacklist" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter fieldWhitelist: (query)  (optional)
     - parameter attachmentTypeBlacklist: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerInfo> 
     */
    public class func comAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, fieldWhitelist: [String]? = nil, attachmentTypeBlacklist: [String]? = nil) -> RequestBuilder<ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.journal.client.endpoints.impl.JournalOperationsService"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "fieldWhitelist": fieldWhitelist,
            "attachmentTypeBlacklist": attachmentTypeBlacklist
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter fieldWhitelist: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfile(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, fieldWhitelist: [String]? = nil, completion: ((data: ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, fieldWhitelist: fieldWhitelist).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.members.endpoints.impl.CommunityMemberGroupProfileOperationService     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "fieldWhitelist" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter fieldWhitelist: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileInfo> 
     */
    public class func comAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, fieldWhitelist: [String]? = nil) -> RequestBuilder<ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.members.endpoints.impl.CommunityMemberGroupProfileOperationService"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "fieldWhitelist": fieldWhitelist
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter fieldWhitelist: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileO(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, fieldWhitelist: [String]? = nil, completion: ((data: ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, fieldWhitelist: fieldWhitelist).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.members.endpoints.impl.CommunityMemberUserProfileOperationService     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "fieldWhitelist" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter fieldWhitelist: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOInfo> 
     */
    public class func comAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, fieldWhitelist: [String]? = nil) -> RequestBuilder<ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.members.endpoints.impl.CommunityMemberUserProfileOperationService"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "fieldWhitelist": fieldWhitelist
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter everyoneLimit: (query)  (optional)
     - parameter priority: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentF(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, everyoneLimit: Int32? = nil, priority: Int32? = nil, completion: ((data: ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, everyoneLimit: everyoneLimit, priority: priority).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.members.impl.CommunityMemberGroupProfileComponentFactory     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "everyoneLimit" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "priority" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter everyoneLimit: (query)  (optional)
     - parameter priority: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFInfo> 
     */
    public class func comAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, everyoneLimit: Int32? = nil, priority: Int32? = nil) -> RequestBuilder<ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.members.impl.CommunityMemberGroupProfileComponentFactory"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "everyoneLimit": everyoneLimit?.encodeToJSON(),
            "priority": priority?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter messageProperties: (query)  (optional)
     - parameter messageBoxSizeLimit: (query)  (optional)
     - parameter messageCountLimit: (query)  (optional)
     - parameter notifyFailure: (query)  (optional)
     - parameter failureMessageFrom: (query)  (optional)
     - parameter failureTemplatePath: (query)  (optional)
     - parameter maxRetries: (query)  (optional)
     - parameter minWaitBetweenRetries: (query)  (optional)
     - parameter countUpdatePoolSize: (query)  (optional)
     - parameter inboxPath: (query)  (optional)
     - parameter sentitemsPath: (query)  (optional)
     - parameter supportAttachments: (query)  (optional)
     - parameter supportGroupMessaging: (query)  (optional)
     - parameter maxTotalRecipients: (query)  (optional)
     - parameter batchSize: (query)  (optional)
     - parameter maxTotalAttachmentSize: (query)  (optional)
     - parameter attachmentTypeBlacklist: (query)  (optional)
     - parameter allowedAttachmentTypes: (query)  (optional)
     - parameter serviceSelector: (query)  (optional)
     - parameter fieldWhitelist: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqSocialMessagingClientEndpointsImplMessagingOperation(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, messageProperties: [String]? = nil, messageBoxSizeLimit: Int32? = nil, messageCountLimit: Int32? = nil, notifyFailure: Bool? = nil, failureMessageFrom: String? = nil, failureTemplatePath: String? = nil, maxRetries: Int32? = nil, minWaitBetweenRetries: Int32? = nil, countUpdatePoolSize: Int32? = nil, inboxPath: String? = nil, sentitemsPath: String? = nil, supportAttachments: Bool? = nil, supportGroupMessaging: Bool? = nil, maxTotalRecipients: Int32? = nil, batchSize: Int32? = nil, maxTotalAttachmentSize: Int32? = nil, attachmentTypeBlacklist: [String]? = nil, allowedAttachmentTypes: [String]? = nil, serviceSelector: String? = nil, fieldWhitelist: [String]? = nil, completion: ((data: ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqSocialMessagingClientEndpointsImplMessagingOperationWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, messageProperties: messageProperties, messageBoxSizeLimit: messageBoxSizeLimit, messageCountLimit: messageCountLimit, notifyFailure: notifyFailure, failureMessageFrom: failureMessageFrom, failureTemplatePath: failureTemplatePath, maxRetries: maxRetries, minWaitBetweenRetries: minWaitBetweenRetries, countUpdatePoolSize: countUpdatePoolSize, inboxPath: inboxPath, sentitemsPath: sentitemsPath, supportAttachments: supportAttachments, supportGroupMessaging: supportGroupMessaging, maxTotalRecipients: maxTotalRecipients, batchSize: batchSize, maxTotalAttachmentSize: maxTotalAttachmentSize, attachmentTypeBlacklist: attachmentTypeBlacklist, allowedAttachmentTypes: allowedAttachmentTypes, serviceSelector: serviceSelector, fieldWhitelist: fieldWhitelist).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.messaging.client.endpoints.impl.MessagingOperationsServiceImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "failureMessageFrom" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "minWaitBetweenRetries" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "allowedAttachmentTypes" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "messageCountLimit" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "sentitems.path" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "countUpdatePoolSize" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "message.properties" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "supportGroupMessaging" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "failureTemplatePath" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "fieldWhitelist" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "maxRetries" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "maxTotalAttachmentSize" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "serviceSelector" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "messageBoxSizeLimit" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "maxTotalRecipients" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "attachmentTypeBlacklist" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "notifyFailure" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "supportAttachments" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "batchSize" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "inbox.path" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter messageProperties: (query)  (optional)
     - parameter messageBoxSizeLimit: (query)  (optional)
     - parameter messageCountLimit: (query)  (optional)
     - parameter notifyFailure: (query)  (optional)
     - parameter failureMessageFrom: (query)  (optional)
     - parameter failureTemplatePath: (query)  (optional)
     - parameter maxRetries: (query)  (optional)
     - parameter minWaitBetweenRetries: (query)  (optional)
     - parameter countUpdatePoolSize: (query)  (optional)
     - parameter inboxPath: (query)  (optional)
     - parameter sentitemsPath: (query)  (optional)
     - parameter supportAttachments: (query)  (optional)
     - parameter supportGroupMessaging: (query)  (optional)
     - parameter maxTotalRecipients: (query)  (optional)
     - parameter batchSize: (query)  (optional)
     - parameter maxTotalAttachmentSize: (query)  (optional)
     - parameter attachmentTypeBlacklist: (query)  (optional)
     - parameter allowedAttachmentTypes: (query)  (optional)
     - parameter serviceSelector: (query)  (optional)
     - parameter fieldWhitelist: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationInfo> 
     */
    public class func comAdobeCqSocialMessagingClientEndpointsImplMessagingOperationWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, messageProperties: [String]? = nil, messageBoxSizeLimit: Int32? = nil, messageCountLimit: Int32? = nil, notifyFailure: Bool? = nil, failureMessageFrom: String? = nil, failureTemplatePath: String? = nil, maxRetries: Int32? = nil, minWaitBetweenRetries: Int32? = nil, countUpdatePoolSize: Int32? = nil, inboxPath: String? = nil, sentitemsPath: String? = nil, supportAttachments: Bool? = nil, supportGroupMessaging: Bool? = nil, maxTotalRecipients: Int32? = nil, batchSize: Int32? = nil, maxTotalAttachmentSize: Int32? = nil, attachmentTypeBlacklist: [String]? = nil, allowedAttachmentTypes: [String]? = nil, serviceSelector: String? = nil, fieldWhitelist: [String]? = nil) -> RequestBuilder<ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.messaging.client.endpoints.impl.MessagingOperationsServiceImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "message.properties": messageProperties,
            "messageBoxSizeLimit": messageBoxSizeLimit?.encodeToJSON(),
            "messageCountLimit": messageCountLimit?.encodeToJSON(),
            "notifyFailure": notifyFailure,
            "failureMessageFrom": failureMessageFrom,
            "failureTemplatePath": failureTemplatePath,
            "maxRetries": maxRetries?.encodeToJSON(),
            "minWaitBetweenRetries": minWaitBetweenRetries?.encodeToJSON(),
            "countUpdatePoolSize": countUpdatePoolSize?.encodeToJSON(),
            "inbox.path": inboxPath,
            "sentitems.path": sentitemsPath,
            "supportAttachments": supportAttachments,
            "supportGroupMessaging": supportGroupMessaging,
            "maxTotalRecipients": maxTotalRecipients?.encodeToJSON(),
            "batchSize": batchSize?.encodeToJSON(),
            "maxTotalAttachmentSize": maxTotalAttachmentSize?.encodeToJSON(),
            "attachmentTypeBlacklist": attachmentTypeBlacklist,
            "allowedAttachmentTypes": allowedAttachmentTypes,
            "serviceSelector": serviceSelector,
            "fieldWhitelist": fieldWhitelist
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter resourceTypeFilters: (query)  (optional)
     - parameter priority: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqSocialModerationDashboardApiFilterGroupSocialComponen(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, resourceTypeFilters: [String]? = nil, priority: Int32? = nil, completion: ((data: ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, resourceTypeFilters: resourceTypeFilters, priority: priority).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.moderation.dashboard.api.FilterGroupSocialComponentFactory     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "priority" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "resourceType.filters" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter resourceTypeFilters: (query)  (optional)
     - parameter priority: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenInfo> 
     */
    public class func comAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, resourceTypeFilters: [String]? = nil, priority: Int32? = nil) -> RequestBuilder<ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.moderation.dashboard.api.FilterGroupSocialComponentFactory"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "resourceType.filters": resourceTypeFilters,
            "priority": priority?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter priority: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqSocialModerationDashboardApiModerationDashboardSocial(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, priority: Int32? = nil, completion: ((data: ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqSocialModerationDashboardApiModerationDashboardSocialWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, priority: priority).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.moderation.dashboard.api.ModerationDashboardSocialComponentFactory     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "priority" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter priority: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialInfo> 
     */
    public class func comAdobeCqSocialModerationDashboardApiModerationDashboardSocialWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, priority: Int32? = nil) -> RequestBuilder<ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.moderation.dashboard.api.ModerationDashboardSocialComponentFactory"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "priority": priority?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter priority: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqSocialModerationDashboardApiUserDetailsSocialComponen(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, priority: Int32? = nil, completion: ((data: ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, priority: priority).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.moderation.dashboard.api.UserDetailsSocialComponentFactory     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "priority" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter priority: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenInfo> 
     */
    public class func comAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, priority: Int32? = nil) -> RequestBuilder<ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.moderation.dashboard.api.UserDetailsSocialComponentFactory"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "priority": priority?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter resourceTypeFilters: (query)  (optional)
     - parameter priority: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqSocialModerationDashboardInternalImplFilterGroupSoci(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, resourceTypeFilters: [String]? = nil, priority: Int32? = nil, completion: ((data: ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqSocialModerationDashboardInternalImplFilterGroupSociWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, resourceTypeFilters: resourceTypeFilters, priority: priority).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.moderation.dashboard.internal.impl.FilterGroupSocialComponentFactoryV2     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "priority" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "resourceType.filters" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter resourceTypeFilters: (query)  (optional)
     - parameter priority: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociInfo> 
     */
    public class func comAdobeCqSocialModerationDashboardInternalImplFilterGroupSociWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, resourceTypeFilters: [String]? = nil, priority: Int32? = nil) -> RequestBuilder<ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.moderation.dashboard.internal.impl.FilterGroupSocialComponentFactoryV2"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "resourceType.filters": resourceTypeFilters,
            "priority": priority?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter eventTopics: (query)  (optional)
     - parameter eventFilter: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqSocialNotificationsImplMentionsRouter(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, eventTopics: String? = nil, eventFilter: String? = nil, completion: ((data: ComAdobeCqSocialNotificationsImplMentionsRouterInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqSocialNotificationsImplMentionsRouterWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, eventTopics: eventTopics, eventFilter: eventFilter).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.notifications.impl.MentionsRouter     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "event.topics" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "event.filter" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter eventTopics: (query)  (optional)
     - parameter eventFilter: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqSocialNotificationsImplMentionsRouterInfo> 
     */
    public class func comAdobeCqSocialNotificationsImplMentionsRouterWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, eventTopics: String? = nil, eventFilter: String? = nil) -> RequestBuilder<ComAdobeCqSocialNotificationsImplMentionsRouterInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.notifications.impl.MentionsRouter"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "event.topics": eventTopics,
            "event.filter": eventFilter
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqSocialNotificationsImplMentionsRouterInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter maxUnreadNotificationCount: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqSocialNotificationsImplNotificationManagerImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, maxUnreadNotificationCount: Int32? = nil, completion: ((data: ComAdobeCqSocialNotificationsImplNotificationManagerImplInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqSocialNotificationsImplNotificationManagerImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, maxUnreadNotificationCount: maxUnreadNotificationCount).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.notifications.impl.NotificationManagerImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "max.unread.notification.count" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter maxUnreadNotificationCount: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqSocialNotificationsImplNotificationManagerImplInfo> 
     */
    public class func comAdobeCqSocialNotificationsImplNotificationManagerImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, maxUnreadNotificationCount: Int32? = nil) -> RequestBuilder<ComAdobeCqSocialNotificationsImplNotificationManagerImplInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.notifications.impl.NotificationManagerImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "max.unread.notification.count": maxUnreadNotificationCount?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqSocialNotificationsImplNotificationManagerImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter eventTopics: (query)  (optional)
     - parameter eventFilter: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqSocialNotificationsImplNotificationsRouter(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, eventTopics: String? = nil, eventFilter: String? = nil, completion: ((data: ComAdobeCqSocialNotificationsImplNotificationsRouterInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqSocialNotificationsImplNotificationsRouterWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, eventTopics: eventTopics, eventFilter: eventFilter).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.notifications.impl.NotificationsRouter     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "event.topics" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "event.filter" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter eventTopics: (query)  (optional)
     - parameter eventFilter: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqSocialNotificationsImplNotificationsRouterInfo> 
     */
    public class func comAdobeCqSocialNotificationsImplNotificationsRouterWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, eventTopics: String? = nil, eventFilter: String? = nil) -> RequestBuilder<ComAdobeCqSocialNotificationsImplNotificationsRouterInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.notifications.impl.NotificationsRouter"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "event.topics": eventTopics,
            "event.filter": eventFilter
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqSocialNotificationsImplNotificationsRouterInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter fieldWhitelist: (query)  (optional)
     - parameter attachmentTypeBlacklist: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServic(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, fieldWhitelist: [String]? = nil, attachmentTypeBlacklist: [String]? = nil, completion: ((data: ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, fieldWhitelist: fieldWhitelist, attachmentTypeBlacklist: attachmentTypeBlacklist).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.qna.client.endpoints.impl.QnaForumOperationsService     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "fieldWhitelist" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "attachmentTypeBlacklist" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter fieldWhitelist: (query)  (optional)
     - parameter attachmentTypeBlacklist: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicInfo> 
     */
    public class func comAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, fieldWhitelist: [String]? = nil, attachmentTypeBlacklist: [String]? = nil) -> RequestBuilder<ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.qna.client.endpoints.impl.QnaForumOperationsService"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "fieldWhitelist": fieldWhitelist,
            "attachmentTypeBlacklist": attachmentTypeBlacklist
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqSocialReportingAnalyticsPollingImporterInterval: (query)  (optional)
     - parameter cqSocialReportingAnalyticsPollingImporterPageSize: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportI(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqSocialReportingAnalyticsPollingImporterInterval: Int32? = nil, cqSocialReportingAnalyticsPollingImporterPageSize: Int32? = nil, completion: ((data: ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqSocialReportingAnalyticsPollingImporterInterval: cqSocialReportingAnalyticsPollingImporterInterval, cqSocialReportingAnalyticsPollingImporterPageSize: cqSocialReportingAnalyticsPollingImporterPageSize).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.reporting.analytics.services.impl.AnalyticsReportImporterServiceImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "cq.social.reporting.analytics.polling.importer.pageSize" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "cq.social.reporting.analytics.polling.importer.interval" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqSocialReportingAnalyticsPollingImporterInterval: (query)  (optional)
     - parameter cqSocialReportingAnalyticsPollingImporterPageSize: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIInfo> 
     */
    public class func comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqSocialReportingAnalyticsPollingImporterInterval: Int32? = nil, cqSocialReportingAnalyticsPollingImporterPageSize: Int32? = nil) -> RequestBuilder<ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.reporting.analytics.services.impl.AnalyticsReportImporterServiceImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "cq.social.reporting.analytics.polling.importer.interval": cqSocialReportingAnalyticsPollingImporterInterval?.encodeToJSON(),
            "cq.social.reporting.analytics.polling.importer.pageSize": cqSocialReportingAnalyticsPollingImporterPageSize?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter reportFetchDelay: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportM(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, reportFetchDelay: Int32? = nil, completion: ((data: ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, reportFetchDelay: reportFetchDelay).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.reporting.analytics.services.impl.AnalyticsReportManagementServiceImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "report.fetch.delay" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter reportFetchDelay: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMInfo> 
     */
    public class func comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, reportFetchDelay: Int32? = nil) -> RequestBuilder<ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.reporting.analytics.services.impl.AnalyticsReportManagementServiceImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "report.fetch.delay": reportFetchDelay?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqSocialConsoleAnalyticsSitesMapping: (query)  (optional)
     - parameter priority: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportS(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqSocialConsoleAnalyticsSitesMapping: [String]? = nil, priority: Int32? = nil, completion: ((data: ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqSocialConsoleAnalyticsSitesMapping: cqSocialConsoleAnalyticsSitesMapping, priority: priority).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.reporting.analytics.services.impl.SiteTrendReportSocialComponentFactory     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "priority" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "cq.social.console.analytics.sites.mapping" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqSocialConsoleAnalyticsSitesMapping: (query)  (optional)
     - parameter priority: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSInfo> 
     */
    public class func comAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqSocialConsoleAnalyticsSitesMapping: [String]? = nil, priority: Int32? = nil) -> RequestBuilder<ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.reporting.analytics.services.impl.SiteTrendReportSocialComponentFactory"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "cq.social.console.analytics.sites.mapping": cqSocialConsoleAnalyticsSitesMapping,
            "priority": priority?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter fieldWhitelist: (query)  (optional)
     - parameter attachmentTypeBlacklist: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqSocialReviewClientEndpointsImplReviewOperationsServi(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, fieldWhitelist: [String]? = nil, attachmentTypeBlacklist: [String]? = nil, completion: ((data: ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, fieldWhitelist: fieldWhitelist, attachmentTypeBlacklist: attachmentTypeBlacklist).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.review.client.endpoints.impl.ReviewOperationsService     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "fieldWhitelist" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "attachmentTypeBlacklist" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter fieldWhitelist: (query)  (optional)
     - parameter attachmentTypeBlacklist: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiInfo> 
     */
    public class func comAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, fieldWhitelist: [String]? = nil, attachmentTypeBlacklist: [String]? = nil) -> RequestBuilder<ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.review.client.endpoints.impl.ReviewOperationsService"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "fieldWhitelist": fieldWhitelist,
            "attachmentTypeBlacklist": attachmentTypeBlacklist
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter slingServletSelectors: (query)  (optional)
     - parameter slingServletExtensions: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqSocialScfCoreOperationsImplSocialOperationsServlet(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, slingServletSelectors: String? = nil, slingServletExtensions: String? = nil, completion: ((data: ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqSocialScfCoreOperationsImplSocialOperationsServletWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, slingServletSelectors: slingServletSelectors, slingServletExtensions: slingServletExtensions).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.scf.core.operations.impl.SocialOperationsServlet     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "sling.servlet.extensions" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "sling.servlet.selectors" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter slingServletSelectors: (query)  (optional)
     - parameter slingServletExtensions: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletInfo> 
     */
    public class func comAdobeCqSocialScfCoreOperationsImplSocialOperationsServletWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, slingServletSelectors: String? = nil, slingServletExtensions: String? = nil) -> RequestBuilder<ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.scf.core.operations.impl.SocialOperationsServlet"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "sling.servlet.selectors": slingServletSelectors,
            "sling.servlet.extensions": slingServletExtensions
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter slingServletSelectors: (query)  (optional)
     - parameter slingServletExtensions: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqSocialScfEndpointsImplDefaultSocialGetServlet(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, slingServletSelectors: [String]? = nil, slingServletExtensions: String? = nil, completion: ((data: ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqSocialScfEndpointsImplDefaultSocialGetServletWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, slingServletSelectors: slingServletSelectors, slingServletExtensions: slingServletExtensions).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.scf.endpoints.impl.DefaultSocialGetServlet     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "sling.servlet.extensions" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "sling.servlet.selectors" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter slingServletSelectors: (query)  (optional)
     - parameter slingServletExtensions: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletInfo> 
     */
    public class func comAdobeCqSocialScfEndpointsImplDefaultSocialGetServletWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, slingServletSelectors: [String]? = nil, slingServletExtensions: String? = nil) -> RequestBuilder<ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.scf.endpoints.impl.DefaultSocialGetServlet"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "sling.servlet.selectors": slingServletSelectors,
            "sling.servlet.extensions": slingServletExtensions
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter eventTopics: (query)  (optional)
     - parameter eventFilter: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqSocialScoringImplScoringEventListener(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, eventTopics: String? = nil, eventFilter: String? = nil, completion: ((data: ComAdobeCqSocialScoringImplScoringEventListenerInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqSocialScoringImplScoringEventListenerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, eventTopics: eventTopics, eventFilter: eventFilter).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.scoring.impl.ScoringEventListener     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "event.topics" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "event.filter" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter eventTopics: (query)  (optional)
     - parameter eventFilter: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqSocialScoringImplScoringEventListenerInfo> 
     */
    public class func comAdobeCqSocialScoringImplScoringEventListenerWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, eventTopics: String? = nil, eventFilter: String? = nil) -> RequestBuilder<ComAdobeCqSocialScoringImplScoringEventListenerInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.scoring.impl.ScoringEventListener"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "event.topics": eventTopics,
            "event.filter": eventFilter
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqSocialScoringImplScoringEventListenerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter enableFallback: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqSocialServiceusersInternalImplServiceUserWrapperImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, enableFallback: Bool? = nil, completion: ((data: ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, enableFallback: enableFallback).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.serviceusers.internal.impl.ServiceUserWrapperImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "enableFallback" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter enableFallback: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplInfo> 
     */
    public class func comAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, enableFallback: Bool? = nil) -> RequestBuilder<ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.serviceusers.internal.impl.ServiceUserWrapperImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "enableFallback": enableFallback
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter fieldWhitelist: (query)  (optional)
     - parameter sitePathFilters: (query)  (optional)
     - parameter sitePackageGroup: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqSocialSiteEndpointsImplSiteOperationService(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, fieldWhitelist: [String]? = nil, sitePathFilters: [String]? = nil, sitePackageGroup: String? = nil, completion: ((data: ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqSocialSiteEndpointsImplSiteOperationServiceWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, fieldWhitelist: fieldWhitelist, sitePathFilters: sitePathFilters, sitePackageGroup: sitePackageGroup).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.site.endpoints.impl.SiteOperationService     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "sitePathFilters" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "fieldWhitelist" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "sitePackageGroup" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter fieldWhitelist: (query)  (optional)
     - parameter sitePathFilters: (query)  (optional)
     - parameter sitePackageGroup: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceInfo> 
     */
    public class func comAdobeCqSocialSiteEndpointsImplSiteOperationServiceWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, fieldWhitelist: [String]? = nil, sitePathFilters: [String]? = nil, sitePackageGroup: String? = nil) -> RequestBuilder<ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.site.endpoints.impl.SiteOperationService"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "fieldWhitelist": fieldWhitelist,
            "sitePathFilters": sitePathFilters,
            "sitePackageGroup": sitePackageGroup
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqSocialConsoleAnalyticsComponents: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceIm(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqSocialConsoleAnalyticsComponents: [String]? = nil, completion: ((data: ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqSocialConsoleAnalyticsComponents: cqSocialConsoleAnalyticsComponents).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.site.impl.AnalyticsComponentConfigurationServiceImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "cq.social.console.analytics.components" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqSocialConsoleAnalyticsComponents: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImInfo> 
     */
    public class func comAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqSocialConsoleAnalyticsComponents: [String]? = nil) -> RequestBuilder<ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.site.impl.AnalyticsComponentConfigurationServiceImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "cq.social.console.analytics.components": cqSocialConsoleAnalyticsComponents
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter componentsUsingTags: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqSocialSiteImplSiteConfiguratorImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, componentsUsingTags: [String]? = nil, completion: ((data: ComAdobeCqSocialSiteImplSiteConfiguratorImplInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqSocialSiteImplSiteConfiguratorImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, componentsUsingTags: componentsUsingTags).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.site.impl.SiteConfiguratorImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "componentsUsingTags" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter componentsUsingTags: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqSocialSiteImplSiteConfiguratorImplInfo> 
     */
    public class func comAdobeCqSocialSiteImplSiteConfiguratorImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, componentsUsingTags: [String]? = nil) -> RequestBuilder<ComAdobeCqSocialSiteImplSiteConfiguratorImplInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.site.impl.SiteConfiguratorImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "componentsUsingTags": componentsUsingTags
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqSocialSiteImplSiteConfiguratorImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter srpType: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqSocialSrpImplSocialSolrConnector(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, srpType: String? = nil, completion: ((data: ComAdobeCqSocialSrpImplSocialSolrConnectorInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqSocialSrpImplSocialSolrConnectorWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, srpType: srpType).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.srp.impl.SocialSolrConnector     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "srp.type" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter srpType: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqSocialSrpImplSocialSolrConnectorInfo> 
     */
    public class func comAdobeCqSocialSrpImplSocialSolrConnectorWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, srpType: String? = nil) -> RequestBuilder<ComAdobeCqSocialSrpImplSocialSolrConnectorInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.srp.impl.SocialSolrConnector"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "srp.type": srpType
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqSocialSrpImplSocialSolrConnectorInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter enabled: (query)  (optional)
     - parameter agentName: (query)  (optional)
     - parameter diffPath: (query)  (optional)
     - parameter propertyNames: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqSocialSyncImplDiffChangesObserver(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, enabled: Bool? = nil, agentName: String? = nil, diffPath: String? = nil, propertyNames: String? = nil, completion: ((data: ComAdobeCqSocialSyncImplDiffChangesObserverInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqSocialSyncImplDiffChangesObserverWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, enabled: enabled, agentName: agentName, diffPath: diffPath, propertyNames: propertyNames).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.sync.impl.DiffChangesObserver     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "propertyNames" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "agentName" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "enabled" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "diffPath" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter enabled: (query)  (optional)
     - parameter agentName: (query)  (optional)
     - parameter diffPath: (query)  (optional)
     - parameter propertyNames: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqSocialSyncImplDiffChangesObserverInfo> 
     */
    public class func comAdobeCqSocialSyncImplDiffChangesObserverWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, enabled: Bool? = nil, agentName: String? = nil, diffPath: String? = nil, propertyNames: String? = nil) -> RequestBuilder<ComAdobeCqSocialSyncImplDiffChangesObserverInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.sync.impl.DiffChangesObserver"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "enabled": enabled,
            "agentName": agentName,
            "diffPath": diffPath,
            "propertyNames": propertyNames
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqSocialSyncImplDiffChangesObserverInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter nodetypes: (query)  (optional)
     - parameter ignorableprops: (query)  (optional)
     - parameter ignorablenodes: (query)  (optional)
     - parameter enabled: (query)  (optional)
     - parameter distfolders: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqSocialSyncImplGroupSyncListenerImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, nodetypes: [String]? = nil, ignorableprops: [String]? = nil, ignorablenodes: String? = nil, enabled: Bool? = nil, distfolders: String? = nil, completion: ((data: ComAdobeCqSocialSyncImplGroupSyncListenerImplInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqSocialSyncImplGroupSyncListenerImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, nodetypes: nodetypes, ignorableprops: ignorableprops, ignorablenodes: ignorablenodes, enabled: enabled, distfolders: distfolders).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.sync.impl.GroupSyncListenerImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "ignorablenodes" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "nodetypes" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "ignorableprops" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "enabled" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "distfolders" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter nodetypes: (query)  (optional)
     - parameter ignorableprops: (query)  (optional)
     - parameter ignorablenodes: (query)  (optional)
     - parameter enabled: (query)  (optional)
     - parameter distfolders: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqSocialSyncImplGroupSyncListenerImplInfo> 
     */
    public class func comAdobeCqSocialSyncImplGroupSyncListenerImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, nodetypes: [String]? = nil, ignorableprops: [String]? = nil, ignorablenodes: String? = nil, enabled: Bool? = nil, distfolders: String? = nil) -> RequestBuilder<ComAdobeCqSocialSyncImplGroupSyncListenerImplInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.sync.impl.GroupSyncListenerImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "nodetypes": nodetypes,
            "ignorableprops": ignorableprops,
            "ignorablenodes": ignorablenodes,
            "enabled": enabled,
            "distfolders": distfolders
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqSocialSyncImplGroupSyncListenerImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter activeRunModes: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqSocialSyncImplPublisherSyncServiceImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, activeRunModes: [String]? = nil, completion: ((data: ComAdobeCqSocialSyncImplPublisherSyncServiceImplInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqSocialSyncImplPublisherSyncServiceImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, activeRunModes: activeRunModes).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.sync.impl.PublisherSyncServiceImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "activeRunModes" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter activeRunModes: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqSocialSyncImplPublisherSyncServiceImplInfo> 
     */
    public class func comAdobeCqSocialSyncImplPublisherSyncServiceImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, activeRunModes: [String]? = nil) -> RequestBuilder<ComAdobeCqSocialSyncImplPublisherSyncServiceImplInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.sync.impl.PublisherSyncServiceImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "activeRunModes": activeRunModes
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqSocialSyncImplPublisherSyncServiceImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter nodetypes: (query)  (optional)
     - parameter ignorableprops: (query)  (optional)
     - parameter ignorablenodes: (query)  (optional)
     - parameter enabled: (query)  (optional)
     - parameter distfolders: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqSocialSyncImplUserSyncListenerImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, nodetypes: [String]? = nil, ignorableprops: [String]? = nil, ignorablenodes: [String]? = nil, enabled: Bool? = nil, distfolders: [String]? = nil, completion: ((data: ComAdobeCqSocialSyncImplUserSyncListenerImplInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqSocialSyncImplUserSyncListenerImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, nodetypes: nodetypes, ignorableprops: ignorableprops, ignorablenodes: ignorablenodes, enabled: enabled, distfolders: distfolders).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.sync.impl.UserSyncListenerImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "ignorablenodes" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "nodetypes" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "ignorableprops" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "enabled" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "distfolders" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter nodetypes: (query)  (optional)
     - parameter ignorableprops: (query)  (optional)
     - parameter ignorablenodes: (query)  (optional)
     - parameter enabled: (query)  (optional)
     - parameter distfolders: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqSocialSyncImplUserSyncListenerImplInfo> 
     */
    public class func comAdobeCqSocialSyncImplUserSyncListenerImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, nodetypes: [String]? = nil, ignorableprops: [String]? = nil, ignorablenodes: [String]? = nil, enabled: Bool? = nil, distfolders: [String]? = nil) -> RequestBuilder<ComAdobeCqSocialSyncImplUserSyncListenerImplInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.sync.impl.UserSyncListenerImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "nodetypes": nodetypes,
            "ignorableprops": ignorableprops,
            "ignorablenodes": ignorablenodes,
            "enabled": enabled,
            "distfolders": distfolders
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqSocialSyncImplUserSyncListenerImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter translateLanguage: (query)  (optional)
     - parameter translateDisplay: (query)  (optional)
     - parameter translateAttribution: (query)  (optional)
     - parameter translateCaching: (query)  (optional)
     - parameter translateSmartRendering: (query)  (optional)
     - parameter translateCachingDuration: (query)  (optional)
     - parameter translateSessionSaveInterval: (query)  (optional)
     - parameter translateSessionSaveBatchLimit: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqSocialTranslationImplTranslationServiceConfigManager(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, translateLanguage: String? = nil, translateDisplay: String? = nil, translateAttribution: Bool? = nil, translateCaching: String? = nil, translateSmartRendering: String? = nil, translateCachingDuration: String? = nil, translateSessionSaveInterval: String? = nil, translateSessionSaveBatchLimit: String? = nil, completion: ((data: ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqSocialTranslationImplTranslationServiceConfigManagerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, translateLanguage: translateLanguage, translateDisplay: translateDisplay, translateAttribution: translateAttribution, translateCaching: translateCaching, translateSmartRendering: translateSmartRendering, translateCachingDuration: translateCachingDuration, translateSessionSaveInterval: translateSessionSaveInterval, translateSessionSaveBatchLimit: translateSessionSaveBatchLimit).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.translation.impl.TranslationServiceConfigManager     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "translate.attribution" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "translate.caching.duration" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "translate.session.save.batchLimit" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "translate.language" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : {
        "values" : "",
        "labels" : ""
      },
      "value" : ""
    },
    "translate.display" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : {
        "values" : "",
        "labels" : ""
      },
      "value" : ""
    },
    "translate.smart.rendering" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : {
        "values" : "",
        "labels" : ""
      },
      "value" : ""
    },
    "translate.session.save.interval" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "translate.caching" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : {
        "values" : "",
        "labels" : ""
      },
      "value" : ""
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter translateLanguage: (query)  (optional)
     - parameter translateDisplay: (query)  (optional)
     - parameter translateAttribution: (query)  (optional)
     - parameter translateCaching: (query)  (optional)
     - parameter translateSmartRendering: (query)  (optional)
     - parameter translateCachingDuration: (query)  (optional)
     - parameter translateSessionSaveInterval: (query)  (optional)
     - parameter translateSessionSaveBatchLimit: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerInfo> 
     */
    public class func comAdobeCqSocialTranslationImplTranslationServiceConfigManagerWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, translateLanguage: String? = nil, translateDisplay: String? = nil, translateAttribution: Bool? = nil, translateCaching: String? = nil, translateSmartRendering: String? = nil, translateCachingDuration: String? = nil, translateSessionSaveInterval: String? = nil, translateSessionSaveBatchLimit: String? = nil) -> RequestBuilder<ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.translation.impl.TranslationServiceConfigManager"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "translate.language": translateLanguage,
            "translate.display": translateDisplay,
            "translate.attribution": translateAttribution,
            "translate.caching": translateCaching,
            "translate.smart.rendering": translateSmartRendering,
            "translate.caching.duration": translateCachingDuration,
            "translate.session.save.interval": translateSessionSaveInterval,
            "translate.session.save.batchLimit": translateSessionSaveBatchLimit
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter eventTopics: (query)  (optional)
     - parameter eventFilter: (query)  (optional)
     - parameter translateListenerType: (query)  (optional)
     - parameter translatePropertyList: (query)  (optional)
     - parameter poolSize: (query)  (optional)
     - parameter maxPoolSize: (query)  (optional)
     - parameter queueSize: (query)  (optional)
     - parameter keepAliveTime: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqSocialTranslationImplUGCLanguageDetector(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, eventTopics: String? = nil, eventFilter: String? = nil, translateListenerType: [String]? = nil, translatePropertyList: [String]? = nil, poolSize: Int32? = nil, maxPoolSize: Int32? = nil, queueSize: Int32? = nil, keepAliveTime: Int32? = nil, completion: ((data: ComAdobeCqSocialTranslationImplUGCLanguageDetectorInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqSocialTranslationImplUGCLanguageDetectorWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, eventTopics: eventTopics, eventFilter: eventFilter, translateListenerType: translateListenerType, translatePropertyList: translatePropertyList, poolSize: poolSize, maxPoolSize: maxPoolSize, queueSize: queueSize, keepAliveTime: keepAliveTime).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.translation.impl.UGCLanguageDetector     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "event.topics" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "queueSize" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "keepAliveTime" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "translate.listener.type" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "translate.property.list" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "poolSize" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "event.filter" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "maxPoolSize" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter eventTopics: (query)  (optional)
     - parameter eventFilter: (query)  (optional)
     - parameter translateListenerType: (query)  (optional)
     - parameter translatePropertyList: (query)  (optional)
     - parameter poolSize: (query)  (optional)
     - parameter maxPoolSize: (query)  (optional)
     - parameter queueSize: (query)  (optional)
     - parameter keepAliveTime: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqSocialTranslationImplUGCLanguageDetectorInfo> 
     */
    public class func comAdobeCqSocialTranslationImplUGCLanguageDetectorWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, eventTopics: String? = nil, eventFilter: String? = nil, translateListenerType: [String]? = nil, translatePropertyList: [String]? = nil, poolSize: Int32? = nil, maxPoolSize: Int32? = nil, queueSize: Int32? = nil, keepAliveTime: Int32? = nil) -> RequestBuilder<ComAdobeCqSocialTranslationImplUGCLanguageDetectorInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.translation.impl.UGCLanguageDetector"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "event.topics": eventTopics,
            "event.filter": eventFilter,
            "translate.listener.type": translateListenerType,
            "translate.property.list": translatePropertyList,
            "poolSize": poolSize?.encodeToJSON(),
            "maxPoolSize": maxPoolSize?.encodeToJSON(),
            "queueSize": queueSize?.encodeToJSON(),
            "keepAliveTime": keepAliveTime?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqSocialTranslationImplUGCLanguageDetectorInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter threadPoolSize: (query)  (optional)
     - parameter delayTime: (query)  (optional)
     - parameter workerSleepTime: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqSocialUgcbaseDispatcherImplFlushServiceImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, threadPoolSize: Int32? = nil, delayTime: Int32? = nil, workerSleepTime: Int32? = nil, completion: ((data: ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, threadPoolSize: threadPoolSize, delayTime: delayTime, workerSleepTime: workerSleepTime).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.ugcbase.dispatcher.impl.FlushServiceImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "threadPoolSize" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "workerSleepTime" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "delayTime" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter threadPoolSize: (query)  (optional)
     - parameter delayTime: (query)  (optional)
     - parameter workerSleepTime: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplInfo> 
     */
    public class func comAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, threadPoolSize: Int32? = nil, delayTime: Int32? = nil, workerSleepTime: Int32? = nil) -> RequestBuilder<ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.ugcbase.dispatcher.impl.FlushServiceImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "threadPoolSize": threadPoolSize?.encodeToJSON(),
            "delayTime": delayTime?.encodeToJSON(),
            "workerSleepTime": workerSleepTime?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter poolSize: (query)  (optional)
     - parameter maxPoolSize: (query)  (optional)
     - parameter queueSize: (query)  (optional)
     - parameter keepAliveTime: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqSocialUgcbaseImplAysncReverseReplicatorImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, poolSize: Int32? = nil, maxPoolSize: Int32? = nil, queueSize: Int32? = nil, keepAliveTime: Int32? = nil, completion: ((data: ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, poolSize: poolSize, maxPoolSize: maxPoolSize, queueSize: queueSize, keepAliveTime: keepAliveTime).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.ugcbase.impl.AysncReverseReplicatorImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "queueSize" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "keepAliveTime" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "poolSize" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "maxPoolSize" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter poolSize: (query)  (optional)
     - parameter maxPoolSize: (query)  (optional)
     - parameter queueSize: (query)  (optional)
     - parameter keepAliveTime: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplInfo> 
     */
    public class func comAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, poolSize: Int32? = nil, maxPoolSize: Int32? = nil, queueSize: Int32? = nil, keepAliveTime: Int32? = nil) -> RequestBuilder<ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.ugcbase.impl.AysncReverseReplicatorImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "poolSize": poolSize?.encodeToJSON(),
            "maxPoolSize": maxPoolSize?.encodeToJSON(),
            "queueSize": queueSize?.encodeToJSON(),
            "keepAliveTime": keepAliveTime?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter isPrimaryPublisher: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqSocialUgcbaseImplPublisherConfigurationImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, isPrimaryPublisher: Bool? = nil, completion: ((data: ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqSocialUgcbaseImplPublisherConfigurationImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, isPrimaryPublisher: isPrimaryPublisher).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.ugcbase.impl.PublisherConfigurationImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "isPrimaryPublisher" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter isPrimaryPublisher: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplInfo> 
     */
    public class func comAdobeCqSocialUgcbaseImplPublisherConfigurationImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, isPrimaryPublisher: Bool? = nil) -> RequestBuilder<ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.ugcbase.impl.PublisherConfigurationImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "isPrimaryPublisher": isPrimaryPublisher
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter legacyCloudUGCPathMapping: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqSocialUgcbaseImplSocialUtilsImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, legacyCloudUGCPathMapping: Bool? = nil, completion: ((data: ComAdobeCqSocialUgcbaseImplSocialUtilsImplInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqSocialUgcbaseImplSocialUtilsImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, legacyCloudUGCPathMapping: legacyCloudUGCPathMapping).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.ugcbase.impl.SocialUtilsImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "legacyCloudUGCPathMapping" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter legacyCloudUGCPathMapping: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqSocialUgcbaseImplSocialUtilsImplInfo> 
     */
    public class func comAdobeCqSocialUgcbaseImplSocialUtilsImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, legacyCloudUGCPathMapping: Bool? = nil) -> RequestBuilder<ComAdobeCqSocialUgcbaseImplSocialUtilsImplInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.ugcbase.impl.SocialUtilsImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "legacyCloudUGCPathMapping": legacyCloudUGCPathMapping
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqSocialUgcbaseImplSocialUtilsImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter automoderationSequence: (query)  (optional)
     - parameter automoderationOnfailurestop: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqSocialUgcbaseModerationImplAutoModerationImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, automoderationSequence: [String]? = nil, automoderationOnfailurestop: Bool? = nil, completion: ((data: ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqSocialUgcbaseModerationImplAutoModerationImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, automoderationSequence: automoderationSequence, automoderationOnfailurestop: automoderationOnfailurestop).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.ugcbase.moderation.impl.AutoModerationImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "automoderation.onfailurestop" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "automoderation.sequence" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter automoderationSequence: (query)  (optional)
     - parameter automoderationOnfailurestop: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplInfo> 
     */
    public class func comAdobeCqSocialUgcbaseModerationImplAutoModerationImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, automoderationSequence: [String]? = nil, automoderationOnfailurestop: Bool? = nil) -> RequestBuilder<ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.ugcbase.moderation.impl.AutoModerationImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "automoderation.sequence": automoderationSequence,
            "automoderation.onfailurestop": automoderationOnfailurestop
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter watchwordsPositive: (query)  (optional)
     - parameter watchwordsNegative: (query)  (optional)
     - parameter watchwordsPath: (query)  (optional)
     - parameter sentimentPath: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqSocialUgcbaseModerationImplSentimentProcess(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, watchwordsPositive: [String]? = nil, watchwordsNegative: [String]? = nil, watchwordsPath: String? = nil, sentimentPath: String? = nil, completion: ((data: ComAdobeCqSocialUgcbaseModerationImplSentimentProcessInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqSocialUgcbaseModerationImplSentimentProcessWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, watchwordsPositive: watchwordsPositive, watchwordsNegative: watchwordsNegative, watchwordsPath: watchwordsPath, sentimentPath: sentimentPath).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.ugcbase.moderation.impl.SentimentProcess     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "watchwords.negative" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "watchwords.positive" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "watchwords.path" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "sentiment.path" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter watchwordsPositive: (query)  (optional)
     - parameter watchwordsNegative: (query)  (optional)
     - parameter watchwordsPath: (query)  (optional)
     - parameter sentimentPath: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqSocialUgcbaseModerationImplSentimentProcessInfo> 
     */
    public class func comAdobeCqSocialUgcbaseModerationImplSentimentProcessWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, watchwordsPositive: [String]? = nil, watchwordsNegative: [String]? = nil, watchwordsPath: String? = nil, sentimentPath: String? = nil) -> RequestBuilder<ComAdobeCqSocialUgcbaseModerationImplSentimentProcessInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.ugcbase.moderation.impl.SentimentProcess"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "watchwords.positive": watchwordsPositive,
            "watchwords.negative": watchwordsNegative,
            "watchwords.path": watchwordsPath,
            "sentiment.path": sentimentPath
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqSocialUgcbaseModerationImplSentimentProcessInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter defaultAttachmentTypeBlacklist: (query)  (optional)
     - parameter baselineAttachmentTypeBlacklist: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackli(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, defaultAttachmentTypeBlacklist: [String]? = nil, baselineAttachmentTypeBlacklist: [String]? = nil, completion: ((data: ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, defaultAttachmentTypeBlacklist: defaultAttachmentTypeBlacklist, baselineAttachmentTypeBlacklist: baselineAttachmentTypeBlacklist).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.ugcbase.security.impl.DefaultAttachmentTypeBlacklistService     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "default.attachment.type.blacklist" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "baseline.attachment.type.blacklist" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter defaultAttachmentTypeBlacklist: (query)  (optional)
     - parameter baselineAttachmentTypeBlacklist: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliInfo> 
     */
    public class func comAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, defaultAttachmentTypeBlacklist: [String]? = nil, baselineAttachmentTypeBlacklist: [String]? = nil) -> RequestBuilder<ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.ugcbase.security.impl.DefaultAttachmentTypeBlacklistService"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "default.attachment.type.blacklist": defaultAttachmentTypeBlacklist,
            "baseline.attachment.type.blacklist": baselineAttachmentTypeBlacklist
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter parameterWhitelist: (query)  (optional)
     - parameter parameterWhitelistPrefixes: (query)  (optional)
     - parameter binaryParameterWhitelist: (query)  (optional)
     - parameter modifierWhitelist: (query)  (optional)
     - parameter operationWhitelist: (query)  (optional)
     - parameter operationWhitelistPrefixes: (query)  (optional)
     - parameter typehintWhitelist: (query)  (optional)
     - parameter resourcetypeWhitelist: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, parameterWhitelist: [String]? = nil, parameterWhitelistPrefixes: [String]? = nil, binaryParameterWhitelist: [String]? = nil, modifierWhitelist: [String]? = nil, operationWhitelist: [String]? = nil, operationWhitelistPrefixes: [String]? = nil, typehintWhitelist: [String]? = nil, resourcetypeWhitelist: [String]? = nil, completion: ((data: ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, parameterWhitelist: parameterWhitelist, parameterWhitelistPrefixes: parameterWhitelistPrefixes, binaryParameterWhitelist: binaryParameterWhitelist, modifierWhitelist: modifierWhitelist, operationWhitelist: operationWhitelist, operationWhitelistPrefixes: operationWhitelistPrefixes, typehintWhitelist: typehintWhitelist, resourcetypeWhitelist: resourcetypeWhitelist).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.ugcbase.security.impl.SaferSlingPostValidatorImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "parameter.whitelist" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "resourcetype.whitelist" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "modifier.whitelist" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "operation.whitelist" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "operation.whitelist.prefixes" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "typehint.whitelist" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "binary.parameter.whitelist" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "parameter.whitelist.prefixes" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter parameterWhitelist: (query)  (optional)
     - parameter parameterWhitelistPrefixes: (query)  (optional)
     - parameter binaryParameterWhitelist: (query)  (optional)
     - parameter modifierWhitelist: (query)  (optional)
     - parameter operationWhitelist: (query)  (optional)
     - parameter operationWhitelistPrefixes: (query)  (optional)
     - parameter typehintWhitelist: (query)  (optional)
     - parameter resourcetypeWhitelist: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplInfo> 
     */
    public class func comAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, parameterWhitelist: [String]? = nil, parameterWhitelistPrefixes: [String]? = nil, binaryParameterWhitelist: [String]? = nil, modifierWhitelist: [String]? = nil, operationWhitelist: [String]? = nil, operationWhitelistPrefixes: [String]? = nil, typehintWhitelist: [String]? = nil, resourcetypeWhitelist: [String]? = nil) -> RequestBuilder<ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.ugcbase.security.impl.SaferSlingPostValidatorImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "parameter.whitelist": parameterWhitelist,
            "parameter.whitelist.prefixes": parameterWhitelistPrefixes,
            "binary.parameter.whitelist": binaryParameterWhitelist,
            "modifier.whitelist": modifierWhitelist,
            "operation.whitelist": operationWhitelist,
            "operation.whitelist.prefixes": operationWhitelistPrefixes,
            "typehint.whitelist": typehintWhitelist,
            "resourcetype.whitelist": resourcetypeWhitelist
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter slingServletExtensions: (query)  (optional)
     - parameter slingServletPaths: (query)  (optional)
     - parameter slingServletMethods: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServlet(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, slingServletExtensions: String? = nil, slingServletPaths: String? = nil, slingServletMethods: String? = nil, completion: ((data: ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, slingServletExtensions: slingServletExtensions, slingServletPaths: slingServletPaths, slingServletMethods: slingServletMethods).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.user.endpoints.impl.UsersGroupFromPublishServlet     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "sling.servlet.extensions" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "sling.servlet.paths" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "sling.servlet.methods" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter slingServletExtensions: (query)  (optional)
     - parameter slingServletPaths: (query)  (optional)
     - parameter slingServletMethods: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletInfo> 
     */
    public class func comAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, slingServletExtensions: String? = nil, slingServletPaths: String? = nil, slingServletMethods: String? = nil) -> RequestBuilder<ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.user.endpoints.impl.UsersGroupFromPublishServlet"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "sling.servlet.extensions": slingServletExtensions,
            "sling.servlet.paths": slingServletPaths,
            "sling.servlet.methods": slingServletMethods
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter enable: (query)  (optional)
     - parameter agentConfiguration: (query)  (optional)
     - parameter contextPath: (query)  (optional)
     - parameter disabledCipherSuites: (query)  (optional)
     - parameter enabledCipherSuites: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqSocialUserImplTransportHttpToPublisher(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, enable: Bool? = nil, agentConfiguration: [String]? = nil, contextPath: String? = nil, disabledCipherSuites: [String]? = nil, enabledCipherSuites: [String]? = nil, completion: ((data: ComAdobeCqSocialUserImplTransportHttpToPublisherInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqSocialUserImplTransportHttpToPublisherWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, enable: enable, agentConfiguration: agentConfiguration, contextPath: contextPath, disabledCipherSuites: disabledCipherSuites, enabledCipherSuites: enabledCipherSuites).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.social.user.impl.transport.HttpToPublisher     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "agent.configuration" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "enabled.cipher.suites" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "enable" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "disabled.cipher.suites" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "context.path" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter enable: (query)  (optional)
     - parameter agentConfiguration: (query)  (optional)
     - parameter contextPath: (query)  (optional)
     - parameter disabledCipherSuites: (query)  (optional)
     - parameter enabledCipherSuites: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqSocialUserImplTransportHttpToPublisherInfo> 
     */
    public class func comAdobeCqSocialUserImplTransportHttpToPublisherWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, enable: Bool? = nil, agentConfiguration: [String]? = nil, contextPath: String? = nil, disabledCipherSuites: [String]? = nil, enabledCipherSuites: [String]? = nil) -> RequestBuilder<ComAdobeCqSocialUserImplTransportHttpToPublisherInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.social.user.impl.transport.HttpToPublisher"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "enable": enable,
            "agent.configuration": agentConfiguration,
            "context.path": contextPath,
            "disabled.cipher.suites": disabledCipherSuites,
            "enabled.cipher.suites": enabledCipherSuites
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqSocialUserImplTransportHttpToPublisherInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter resourceTypes: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFact(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, resourceTypes: [String]? = nil, completion: ((data: ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, resourceTypes: resourceTypes).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.ui.wcm.commons.internal.servlets.rte.RTEFilterServletFactory.amended     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "resource.types" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter resourceTypes: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactInfo> 
     */
    public class func comAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, resourceTypes: [String]? = nil) -> RequestBuilder<ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.ui.wcm.commons.internal.servlets.rte.RTEFilterServletFactory.amended"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "resource.types": resourceTypes
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter deletePathRegexps: (query)  (optional)
     - parameter deleteSql2Query: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqUpgradesCleanupImplUpgradeContentCleanup(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, deletePathRegexps: [String]? = nil, deleteSql2Query: String? = nil, completion: ((data: ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqUpgradesCleanupImplUpgradeContentCleanupWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, deletePathRegexps: deletePathRegexps, deleteSql2Query: deleteSql2Query).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.upgrades.cleanup.impl.UpgradeContentCleanup     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "delete.path.regexps" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "delete.sql2.query" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter deletePathRegexps: (query)  (optional)
     - parameter deleteSql2Query: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupInfo> 
     */
    public class func comAdobeCqUpgradesCleanupImplUpgradeContentCleanupWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, deletePathRegexps: [String]? = nil, deleteSql2Query: String? = nil) -> RequestBuilder<ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.upgrades.cleanup.impl.UpgradeContentCleanup"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "delete.path.regexps": deletePathRegexps,
            "delete.sql2.query": deleteSql2Query
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter deleteNameRegexps: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanup(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, deleteNameRegexps: [String]? = nil, completion: ((data: ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, deleteNameRegexps: deleteNameRegexps).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.upgrades.cleanup.impl.UpgradeInstallFolderCleanup     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "delete.name.regexps" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter deleteNameRegexps: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupInfo> 
     */
    public class func comAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, deleteNameRegexps: [String]? = nil) -> RequestBuilder<ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.upgrades.cleanup.impl.UpgradeInstallFolderCleanup"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "delete.name.regexps": deleteNameRegexps
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter threshold: (query)  (optional)
     - parameter jobTopicName: (query)  (optional)
     - parameter emailEnabled: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderService(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, threshold: Int32? = nil, jobTopicName: String? = nil, emailEnabled: Bool? = nil, completion: ((data: ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, threshold: threshold, jobTopicName: jobTopicName, emailEnabled: emailEnabled).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.wcm.jobs.async.impl.AsyncDeleteConfigProviderService     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "jobTopicName" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "emailEnabled" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "threshold" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter threshold: (query)  (optional)
     - parameter jobTopicName: (query)  (optional)
     - parameter emailEnabled: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceInfo> 
     */
    public class func comAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, threshold: Int32? = nil, jobTopicName: String? = nil, emailEnabled: Bool? = nil) -> RequestBuilder<ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.wcm.jobs.async.impl.AsyncDeleteConfigProviderService"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "threshold": threshold?.encodeToJSON(),
            "jobTopicName": jobTopicName,
            "emailEnabled": emailEnabled
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter schedulerExpression: (query)  (optional)
     - parameter jobPurgeThreshold: (query)  (optional)
     - parameter jobPurgeMaxJobs: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTask(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, schedulerExpression: String? = nil, jobPurgeThreshold: Int32? = nil, jobPurgeMaxJobs: Int32? = nil, completion: ((data: ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, schedulerExpression: schedulerExpression, jobPurgeThreshold: jobPurgeThreshold, jobPurgeMaxJobs: jobPurgeMaxJobs).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.wcm.jobs.async.impl.AsyncJobCleanUpTask     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "job.purge.threshold" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "scheduler.expression" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "job.purge.max.jobs" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter schedulerExpression: (query)  (optional)
     - parameter jobPurgeThreshold: (query)  (optional)
     - parameter jobPurgeMaxJobs: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskInfo> 
     */
    public class func comAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, schedulerExpression: String? = nil, jobPurgeThreshold: Int32? = nil, jobPurgeMaxJobs: Int32? = nil) -> RequestBuilder<ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.wcm.jobs.async.impl.AsyncJobCleanUpTask"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "scheduler.expression": schedulerExpression,
            "job.purge.threshold": jobPurgeThreshold?.encodeToJSON(),
            "job.purge.max.jobs": jobPurgeMaxJobs?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter threshold: (query)  (optional)
     - parameter jobTopicName: (query)  (optional)
     - parameter emailEnabled: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderService(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, threshold: Int32? = nil, jobTopicName: String? = nil, emailEnabled: Bool? = nil, completion: ((data: ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, threshold: threshold, jobTopicName: jobTopicName, emailEnabled: emailEnabled).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.wcm.jobs.async.impl.AsyncMoveConfigProviderService     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "jobTopicName" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "emailEnabled" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "threshold" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter threshold: (query)  (optional)
     - parameter jobTopicName: (query)  (optional)
     - parameter emailEnabled: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceInfo> 
     */
    public class func comAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, threshold: Int32? = nil, jobTopicName: String? = nil, emailEnabled: Bool? = nil) -> RequestBuilder<ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.wcm.jobs.async.impl.AsyncMoveConfigProviderService"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "threshold": threshold?.encodeToJSON(),
            "jobTopicName": jobTopicName,
            "emailEnabled": emailEnabled
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter threshold: (query)  (optional)
     - parameter jobTopicName: (query)  (optional)
     - parameter emailEnabled: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderService(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, threshold: Int32? = nil, jobTopicName: String? = nil, emailEnabled: Bool? = nil, completion: ((data: ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, threshold: threshold, jobTopicName: jobTopicName, emailEnabled: emailEnabled).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.wcm.jobs.async.impl.AsyncPageMoveConfigProviderService     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "jobTopicName" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "emailEnabled" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "threshold" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter threshold: (query)  (optional)
     - parameter jobTopicName: (query)  (optional)
     - parameter emailEnabled: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceInfo> 
     */
    public class func comAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, threshold: Int32? = nil, jobTopicName: String? = nil, emailEnabled: Bool? = nil) -> RequestBuilder<ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.wcm.jobs.async.impl.AsyncPageMoveConfigProviderService"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "threshold": threshold?.encodeToJSON(),
            "jobTopicName": jobTopicName,
            "emailEnabled": emailEnabled
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter eventFilter: (query)  (optional)
     - parameter launchesEventhandlerThreadpoolMaxsize: (query)  (optional)
     - parameter launchesEventhandlerThreadpoolPriority: (query)  (optional)
     - parameter launchesEventhandlerUpdatelastmodification: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqWcmLaunchesImplLaunchesEventHandler(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, eventFilter: String? = nil, launchesEventhandlerThreadpoolMaxsize: Int32? = nil, launchesEventhandlerThreadpoolPriority: String? = nil, launchesEventhandlerUpdatelastmodification: Bool? = nil, completion: ((data: ComAdobeCqWcmLaunchesImplLaunchesEventHandlerInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqWcmLaunchesImplLaunchesEventHandlerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, eventFilter: eventFilter, launchesEventhandlerThreadpoolMaxsize: launchesEventhandlerThreadpoolMaxsize, launchesEventhandlerThreadpoolPriority: launchesEventhandlerThreadpoolPriority, launchesEventhandlerUpdatelastmodification: launchesEventhandlerUpdatelastmodification).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.wcm.launches.impl.LaunchesEventHandler     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "launches.eventhandler.threadpool.maxsize" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "launches.eventhandler.updatelastmodification" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "event.filter" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "launches.eventhandler.threadpool.priority" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : {
        "values" : "",
        "labels" : ""
      },
      "value" : ""
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter eventFilter: (query)  (optional)
     - parameter launchesEventhandlerThreadpoolMaxsize: (query)  (optional)
     - parameter launchesEventhandlerThreadpoolPriority: (query)  (optional)
     - parameter launchesEventhandlerUpdatelastmodification: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqWcmLaunchesImplLaunchesEventHandlerInfo> 
     */
    public class func comAdobeCqWcmLaunchesImplLaunchesEventHandlerWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, eventFilter: String? = nil, launchesEventhandlerThreadpoolMaxsize: Int32? = nil, launchesEventhandlerThreadpoolPriority: String? = nil, launchesEventhandlerUpdatelastmodification: Bool? = nil) -> RequestBuilder<ComAdobeCqWcmLaunchesImplLaunchesEventHandlerInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.wcm.launches.impl.LaunchesEventHandler"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "event.filter": eventFilter,
            "launches.eventhandler.threadpool.maxsize": launchesEventhandlerThreadpoolMaxsize?.encodeToJSON(),
            "launches.eventhandler.threadpool.priority": launchesEventhandlerThreadpoolPriority,
            "launches.eventhandler.updatelastmodification": launchesEventhandlerUpdatelastmodification
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqWcmLaunchesImplLaunchesEventHandlerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqWcmQrcodeServletWhitelist: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqWcmMobileQrcodeServletQRCodeImageGenerator(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqWcmQrcodeServletWhitelist: [String]? = nil, completion: ((data: ComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqWcmQrcodeServletWhitelist: cqWcmQrcodeServletWhitelist).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.wcm.mobile.qrcode.servlet.QRCodeImageGenerator     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "cq.wcm.qrcode.servlet.whitelist" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqWcmQrcodeServletWhitelist: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorInfo> 
     */
    public class func comAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqWcmQrcodeServletWhitelist: [String]? = nil) -> RequestBuilder<ComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.wcm.mobile.qrcode.servlet.QRCodeImageGenerator"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "cq.wcm.qrcode.servlet.whitelist": cqWcmQrcodeServletWhitelist
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter size: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqWcmStyleInternalComponentStyleInfoCacheImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, size: Int32? = nil, completion: ((data: ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqWcmStyleInternalComponentStyleInfoCacheImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, size: size).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.wcm.style.internal.ComponentStyleInfoCacheImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "size" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter size: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplInfo> 
     */
    public class func comAdobeCqWcmStyleInternalComponentStyleInfoCacheImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, size: Int32? = nil) -> RequestBuilder<ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.wcm.style.internal.ComponentStyleInfoCacheImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "size": size?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter syncTranslationStateSchedulingFormat: (query)  (optional)
     - parameter schedulingRepeatTranslationSchedulingFormat: (query)  (optional)
     - parameter syncTranslationStateLockTimeoutInMinutes: (query)  (optional)
     - parameter exportFormat: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeCqWcmTranslationImplTranslationPlatformConfigurationImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, syncTranslationStateSchedulingFormat: String? = nil, schedulingRepeatTranslationSchedulingFormat: String? = nil, syncTranslationStateLockTimeoutInMinutes: String? = nil, exportFormat: String? = nil, completion: ((data: ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplInfo?, error: ErrorType?) -> Void)) {
        comAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, syncTranslationStateSchedulingFormat: syncTranslationStateSchedulingFormat, schedulingRepeatTranslationSchedulingFormat: schedulingRepeatTranslationSchedulingFormat, syncTranslationStateLockTimeoutInMinutes: syncTranslationStateLockTimeoutInMinutes, exportFormat: exportFormat).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.cq.wcm.translation.impl.TranslationPlatformConfigurationImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "syncTranslationState.lockTimeoutInMinutes" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "schedulingRepeatTranslation.schedulingFormat" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "syncTranslationState.schedulingFormat" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "export.format" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : {
        "values" : "",
        "labels" : ""
      },
      "value" : ""
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter syncTranslationStateSchedulingFormat: (query)  (optional)
     - parameter schedulingRepeatTranslationSchedulingFormat: (query)  (optional)
     - parameter syncTranslationStateLockTimeoutInMinutes: (query)  (optional)
     - parameter exportFormat: (query)  (optional)

     - returns: RequestBuilder<ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplInfo> 
     */
    public class func comAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, syncTranslationStateSchedulingFormat: String? = nil, schedulingRepeatTranslationSchedulingFormat: String? = nil, syncTranslationStateLockTimeoutInMinutes: String? = nil, exportFormat: String? = nil) -> RequestBuilder<ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplInfo> {
        let path = "/system/console/configMgr/com.adobe.cq.wcm.translation.impl.TranslationPlatformConfigurationImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "syncTranslationState.schedulingFormat": syncTranslationStateSchedulingFormat,
            "schedulingRepeatTranslation.schedulingFormat": schedulingRepeatTranslationSchedulingFormat,
            "syncTranslationState.lockTimeoutInMinutes": syncTranslationStateLockTimeoutInMinutes,
            "export.format": exportFormat
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter portalOutboxes: (query)  (optional)
     - parameter draftDataService: (query)  (optional)
     - parameter draftMetadataService: (query)  (optional)
     - parameter submitDataService: (query)  (optional)
     - parameter submitMetadataService: (query)  (optional)
     - parameter pendingSignDataService: (query)  (optional)
     - parameter pendingSignMetadataService: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigService(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, portalOutboxes: [String]? = nil, draftDataService: String? = nil, draftMetadataService: String? = nil, submitDataService: String? = nil, submitMetadataService: String? = nil, pendingSignDataService: String? = nil, pendingSignMetadataService: String? = nil, completion: ((data: ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceInfo?, error: ErrorType?) -> Void)) {
        comAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, portalOutboxes: portalOutboxes, draftDataService: draftDataService, draftMetadataService: draftMetadataService, submitDataService: submitDataService, submitMetadataService: submitMetadataService, pendingSignDataService: pendingSignDataService, pendingSignMetadataService: pendingSignMetadataService).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.fd.fp.config.FormsPortalDraftsandSubmissionConfigService     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "draft.data.service" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "submit.metadata.service" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "pendingSign.metadata.service" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "portal.outboxes" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "submit.data.service" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "pendingSign.data.service" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "draft.metadata.service" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter portalOutboxes: (query)  (optional)
     - parameter draftDataService: (query)  (optional)
     - parameter draftMetadataService: (query)  (optional)
     - parameter submitDataService: (query)  (optional)
     - parameter submitMetadataService: (query)  (optional)
     - parameter pendingSignDataService: (query)  (optional)
     - parameter pendingSignMetadataService: (query)  (optional)

     - returns: RequestBuilder<ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceInfo> 
     */
    public class func comAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, portalOutboxes: [String]? = nil, draftDataService: String? = nil, draftMetadataService: String? = nil, submitDataService: String? = nil, submitMetadataService: String? = nil, pendingSignDataService: String? = nil, pendingSignMetadataService: String? = nil) -> RequestBuilder<ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceInfo> {
        let path = "/system/console/configMgr/com.adobe.fd.fp.config.FormsPortalDraftsandSubmissionConfigService"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "portal.outboxes": portalOutboxes,
            "draft.data.service": draftDataService,
            "draft.metadata.service": draftMetadataService,
            "submit.data.service": submitDataService,
            "submit.metadata.service": submitMetadataService,
            "pendingSign.data.service": pendingSignDataService,
            "pendingSign.metadata.service": pendingSignMetadataService
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter formportalInterval: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeFdFpConfigFormsPortalSchedulerService(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, formportalInterval: String? = nil, completion: ((data: ComAdobeFdFpConfigFormsPortalSchedulerServiceInfo?, error: ErrorType?) -> Void)) {
        comAdobeFdFpConfigFormsPortalSchedulerServiceWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, formportalInterval: formportalInterval).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.fd.fp.config.FormsPortalSchedulerService     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "formportal.interval" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter formportalInterval: (query)  (optional)

     - returns: RequestBuilder<ComAdobeFdFpConfigFormsPortalSchedulerServiceInfo> 
     */
    public class func comAdobeFdFpConfigFormsPortalSchedulerServiceWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, formportalInterval: String? = nil) -> RequestBuilder<ComAdobeFdFpConfigFormsPortalSchedulerServiceInfo> {
        let path = "/system/console/configMgr/com.adobe.fd.fp.config.FormsPortalSchedulerService"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "formportal.interval": formportalInterval
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeFdFpConfigFormsPortalSchedulerServiceInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter alloweddataFileLocations: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeFormsCommonServiceImplDefaultDataProvider(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, alloweddataFileLocations: [String]? = nil, completion: ((data: ComAdobeFormsCommonServiceImplDefaultDataProviderInfo?, error: ErrorType?) -> Void)) {
        comAdobeFormsCommonServiceImplDefaultDataProviderWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, alloweddataFileLocations: alloweddataFileLocations).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.forms.common.service.impl.DefaultDataProvider     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "alloweddataFileLocations" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter alloweddataFileLocations: (query)  (optional)

     - returns: RequestBuilder<ComAdobeFormsCommonServiceImplDefaultDataProviderInfo> 
     */
    public class func comAdobeFormsCommonServiceImplDefaultDataProviderWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, alloweddataFileLocations: [String]? = nil) -> RequestBuilder<ComAdobeFormsCommonServiceImplDefaultDataProviderInfo> {
        let path = "/system/console/configMgr/com.adobe.forms.common.service.impl.DefaultDataProvider"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "alloweddataFileLocations": alloweddataFileLocations
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeFormsCommonServiceImplDefaultDataProviderInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter tempStorageConfig: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImp(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, tempStorageConfig: String? = nil, completion: ((data: ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpInfo?, error: ErrorType?) -> Void)) {
        comAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, tempStorageConfig: tempStorageConfig).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.forms.common.service.impl.FormsCommonConfigurationServiceImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "tempStorageConfig" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : {
        "values" : "",
        "labels" : ""
      },
      "value" : ""
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter tempStorageConfig: (query)  (optional)

     - returns: RequestBuilder<ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpInfo> 
     */
    public class func comAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, tempStorageConfig: String? = nil) -> RequestBuilder<ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpInfo> {
        let path = "/system/console/configMgr/com.adobe.forms.common.service.impl.FormsCommonConfigurationServiceImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "tempStorageConfig": tempStorageConfig
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter schedulerExpression: (query)  (optional)
     - parameter durationForTemporaryStorage: (query)  (optional)
     - parameter durationForAnonymousStorage: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeFormsCommonServletTempCleanUpTask(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, schedulerExpression: String? = nil, durationForTemporaryStorage: String? = nil, durationForAnonymousStorage: String? = nil, completion: ((data: ComAdobeFormsCommonServletTempCleanUpTaskInfo?, error: ErrorType?) -> Void)) {
        comAdobeFormsCommonServletTempCleanUpTaskWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, schedulerExpression: schedulerExpression, durationForTemporaryStorage: durationForTemporaryStorage, durationForAnonymousStorage: durationForAnonymousStorage).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.forms.common.servlet.TempCleanUpTask     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "scheduler.expression" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "Duration for Temporary Storage" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "Duration for Anonymous Storage" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter schedulerExpression: (query)  (optional)
     - parameter durationForTemporaryStorage: (query)  (optional)
     - parameter durationForAnonymousStorage: (query)  (optional)

     - returns: RequestBuilder<ComAdobeFormsCommonServletTempCleanUpTaskInfo> 
     */
    public class func comAdobeFormsCommonServletTempCleanUpTaskWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, schedulerExpression: String? = nil, durationForTemporaryStorage: String? = nil, durationForAnonymousStorage: String? = nil) -> RequestBuilder<ComAdobeFormsCommonServletTempCleanUpTaskInfo> {
        let path = "/system/console/configMgr/com.adobe.forms.common.servlet.TempCleanUpTask"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "scheduler.expression": schedulerExpression,
            "Duration for Temporary Storage": durationForTemporaryStorage,
            "Duration for Anonymous Storage": durationForAnonymousStorage
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeFormsCommonServletTempCleanUpTaskInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter queryLimit: (query)  (optional)
     - parameter fileTypeExtensionMap: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeGraniteAcpPlatformPlatformServlet(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, queryLimit: Int32? = nil, fileTypeExtensionMap: [String]? = nil, completion: ((data: ComAdobeGraniteAcpPlatformPlatformServletInfo?, error: ErrorType?) -> Void)) {
        comAdobeGraniteAcpPlatformPlatformServletWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, queryLimit: queryLimit, fileTypeExtensionMap: fileTypeExtensionMap).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.acp.platform.PlatformServlet     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "file.type.extension.map" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "query.limit" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter queryLimit: (query)  (optional)
     - parameter fileTypeExtensionMap: (query)  (optional)

     - returns: RequestBuilder<ComAdobeGraniteAcpPlatformPlatformServletInfo> 
     */
    public class func comAdobeGraniteAcpPlatformPlatformServletWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, queryLimit: Int32? = nil, fileTypeExtensionMap: [String]? = nil) -> RequestBuilder<ComAdobeGraniteAcpPlatformPlatformServletInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.acp.platform.PlatformServlet"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "query.limit": queryLimit?.encodeToJSON(),
            "file.type.extension.map": fileTypeExtensionMap
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeGraniteAcpPlatformPlatformServletInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter aggregateRelationships: (query)  (optional)
     - parameter aggregateDescendVirtual: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeGraniteActivitystreamsImplActivityManagerImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, aggregateRelationships: [String]? = nil, aggregateDescendVirtual: Bool? = nil, completion: ((data: ComAdobeGraniteActivitystreamsImplActivityManagerImplInfo?, error: ErrorType?) -> Void)) {
        comAdobeGraniteActivitystreamsImplActivityManagerImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, aggregateRelationships: aggregateRelationships, aggregateDescendVirtual: aggregateDescendVirtual).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.activitystreams.impl.ActivityManagerImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "aggregate.relationships" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "aggregate.descend.virtual" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter aggregateRelationships: (query)  (optional)
     - parameter aggregateDescendVirtual: (query)  (optional)

     - returns: RequestBuilder<ComAdobeGraniteActivitystreamsImplActivityManagerImplInfo> 
     */
    public class func comAdobeGraniteActivitystreamsImplActivityManagerImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, aggregateRelationships: [String]? = nil, aggregateDescendVirtual: Bool? = nil) -> RequestBuilder<ComAdobeGraniteActivitystreamsImplActivityManagerImplInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.activitystreams.impl.ActivityManagerImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "aggregate.relationships": aggregateRelationships,
            "aggregate.descend.virtual": aggregateDescendVirtual
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeGraniteActivitystreamsImplActivityManagerImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter disabled: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeGraniteAnalyzerBaseSystemStatusServlet(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, disabled: Bool? = nil, completion: ((data: ComAdobeGraniteAnalyzerBaseSystemStatusServletInfo?, error: ErrorType?) -> Void)) {
        comAdobeGraniteAnalyzerBaseSystemStatusServletWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, disabled: disabled).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.analyzer.base.SystemStatusServlet     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "service_location" : "service_location",
  "bundle_location" : "bundle_location",
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "disabled" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter disabled: (query)  (optional)

     - returns: RequestBuilder<ComAdobeGraniteAnalyzerBaseSystemStatusServletInfo> 
     */
    public class func comAdobeGraniteAnalyzerBaseSystemStatusServletWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, disabled: Bool? = nil) -> RequestBuilder<ComAdobeGraniteAnalyzerBaseSystemStatusServletInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.analyzer.base.SystemStatusServlet"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "disabled": disabled
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeGraniteAnalyzerBaseSystemStatusServletInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter disabled: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServlet(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, disabled: Bool? = nil, completion: ((data: ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletInfo?, error: ErrorType?) -> Void)) {
        comAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, disabled: disabled).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.analyzer.scripts.compile.AllScriptsCompilerServlet     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "service_location" : "service_location",
  "bundle_location" : "bundle_location",
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "disabled" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter disabled: (query)  (optional)

     - returns: RequestBuilder<ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletInfo> 
     */
    public class func comAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, disabled: Bool? = nil) -> RequestBuilder<ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.analyzer.scripts.compile.AllScriptsCompilerServlet"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "disabled": disabled
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter comAdobeCqCdnCdnRewriter: (query)  (optional)
     - parameter comAdobeCqCloudConfigComponents: (query)  (optional)
     - parameter comAdobeCqCloudConfigCore: (query)  (optional)
     - parameter comAdobeCqCloudConfigUi: (query)  (optional)
     - parameter comAdobeCqComAdobeCqEditor: (query)  (optional)
     - parameter comAdobeCqComAdobeCqProjectsCore: (query)  (optional)
     - parameter comAdobeCqComAdobeCqProjectsWcmCore: (query)  (optional)
     - parameter comAdobeCqComAdobeCqUiCommons: (query)  (optional)
     - parameter comAdobeCqComAdobeCqWcmStyle: (query)  (optional)
     - parameter comAdobeCqCqActivitymapIntegration: (query)  (optional)
     - parameter comAdobeCqCqContexthubCommons: (query)  (optional)
     - parameter comAdobeCqCqDtm: (query)  (optional)
     - parameter comAdobeCqCqHealthcheck: (query)  (optional)
     - parameter comAdobeCqCqMultisiteTargeting: (query)  (optional)
     - parameter comAdobeCqCqPreUpgradeCleanup: (query)  (optional)
     - parameter comAdobeCqCqProductInfoProvider: (query)  (optional)
     - parameter comAdobeCqCqRestSites: (query)  (optional)
     - parameter comAdobeCqCqSecurityHc: (query)  (optional)
     - parameter comAdobeCqDamCqDamSvgHandler: (query)  (optional)
     - parameter comAdobeCqDamCqScene7Imaging: (query)  (optional)
     - parameter comAdobeCqDtmReactorCore: (query)  (optional)
     - parameter comAdobeCqDtmReactorUi: (query)  (optional)
     - parameter comAdobeCqExpJspelResolver: (query)  (optional)
     - parameter comAdobeCqInboxCqInbox: (query)  (optional)
     - parameter comAdobeCqJsonSchemaParser: (query)  (optional)
     - parameter comAdobeCqMediaCqMediaPublishingDpsFpCore: (query)  (optional)
     - parameter comAdobeCqMobileCqMobileCaas: (query)  (optional)
     - parameter comAdobeCqMobileCqMobileIndexBuilder: (query)  (optional)
     - parameter comAdobeCqMobileCqMobilePhonegapBuild: (query)  (optional)
     - parameter comAdobeCqMyspell: (query)  (optional)
     - parameter comAdobeCqSampleWeRetailCore: (query)  (optional)
     - parameter comAdobeCqScreensComAdobeCqScreensDcc: (query)  (optional)
     - parameter comAdobeCqScreensComAdobeCqScreensMqCore: (query)  (optional)
     - parameter comAdobeCqSocialCqSocialAsProvider: (query)  (optional)
     - parameter comAdobeCqSocialCqSocialBadgingBasicImpl: (query)  (optional)
     - parameter comAdobeCqSocialCqSocialBadgingImpl: (query)  (optional)
     - parameter comAdobeCqSocialCqSocialCalendarImpl: (query)  (optional)
     - parameter comAdobeCqSocialCqSocialContentFragmentsImpl: (query)  (optional)
     - parameter comAdobeCqSocialCqSocialEnablementImpl: (query)  (optional)
     - parameter comAdobeCqSocialCqSocialGraphImpl: (query)  (optional)
     - parameter comAdobeCqSocialCqSocialIdeationImpl: (query)  (optional)
     - parameter comAdobeCqSocialCqSocialJcrProvider: (query)  (optional)
     - parameter comAdobeCqSocialCqSocialMembersImpl: (query)  (optional)
     - parameter comAdobeCqSocialCqSocialMsProvider: (query)  (optional)
     - parameter comAdobeCqSocialCqSocialNotificationsChannelsWeb: (query)  (optional)
     - parameter comAdobeCqSocialCqSocialNotificationsImpl: (query)  (optional)
     - parameter comAdobeCqSocialCqSocialRdbProvider: (query)  (optional)
     - parameter comAdobeCqSocialCqSocialScfImpl: (query)  (optional)
     - parameter comAdobeCqSocialCqSocialScoringBasicImpl: (query)  (optional)
     - parameter comAdobeCqSocialCqSocialScoringImpl: (query)  (optional)
     - parameter comAdobeCqSocialCqSocialServiceusersImpl: (query)  (optional)
     - parameter comAdobeCqSocialCqSocialSrpImpl: (query)  (optional)
     - parameter comAdobeCqSocialCqSocialUgcbaseImpl: (query)  (optional)
     - parameter comAdobeDamCqDamCfmImpl: (query)  (optional)
     - parameter comAdobeFormsFoundationFormsFoundationBase: (query)  (optional)
     - parameter comAdobeGraniteApicontroller: (query)  (optional)
     - parameter comAdobeGraniteAssetCore: (query)  (optional)
     - parameter comAdobeGraniteAuthSso: (query)  (optional)
     - parameter comAdobeGraniteBundlesHcImpl: (query)  (optional)
     - parameter comAdobeGraniteCompatRouter: (query)  (optional)
     - parameter comAdobeGraniteConf: (query)  (optional)
     - parameter comAdobeGraniteConfUiCore: (query)  (optional)
     - parameter comAdobeGraniteCors: (query)  (optional)
     - parameter comAdobeGraniteCrxExplorer: (query)  (optional)
     - parameter comAdobeGraniteCrxdeLite: (query)  (optional)
     - parameter comAdobeGraniteCryptoConfig: (query)  (optional)
     - parameter comAdobeGraniteCryptoExtension: (query)  (optional)
     - parameter comAdobeGraniteCryptoFile: (query)  (optional)
     - parameter comAdobeGraniteCryptoJcr: (query)  (optional)
     - parameter comAdobeGraniteCsrf: (query)  (optional)
     - parameter comAdobeGraniteDistributionCore: (query)  (optional)
     - parameter comAdobeGraniteDropwizardMetrics: (query)  (optional)
     - parameter comAdobeGraniteFragsImpl: (query)  (optional)
     - parameter comAdobeGraniteGibson: (query)  (optional)
     - parameter comAdobeGraniteInfocollector: (query)  (optional)
     - parameter comAdobeGraniteInstallerFactoryPackages: (query)  (optional)
     - parameter comAdobeGraniteJettySsl: (query)  (optional)
     - parameter comAdobeGraniteJobsAsync: (query)  (optional)
     - parameter comAdobeGraniteMaintenanceOak: (query)  (optional)
     - parameter comAdobeGraniteMonitoringCore: (query)  (optional)
     - parameter comAdobeGraniteQueries: (query)  (optional)
     - parameter comAdobeGraniteReplicationHcImpl: (query)  (optional)
     - parameter comAdobeGraniteRepositoryChecker: (query)  (optional)
     - parameter comAdobeGraniteRepositoryHcImpl: (query)  (optional)
     - parameter comAdobeGraniteRestAssets: (query)  (optional)
     - parameter comAdobeGraniteSecurityUi: (query)  (optional)
     - parameter comAdobeGraniteStartup: (query)  (optional)
     - parameter comAdobeGraniteTagsoup: (query)  (optional)
     - parameter comAdobeGraniteTaskmanagementCore: (query)  (optional)
     - parameter comAdobeGraniteTaskmanagementWorkflow: (query)  (optional)
     - parameter comAdobeGraniteUiClientlibsCompilerLess: (query)  (optional)
     - parameter comAdobeGraniteUiClientlibsProcessorGcc: (query)  (optional)
     - parameter comAdobeGraniteWebconsolePlugins: (query)  (optional)
     - parameter comAdobeGraniteWorkflowConsole: (query)  (optional)
     - parameter comAdobeXmpWorkerFilesNativeFragmentLinux: (query)  (optional)
     - parameter comAdobeXmpWorkerFilesNativeFragmentMacosx: (query)  (optional)
     - parameter comAdobeXmpWorkerFilesNativeFragmentWin: (query)  (optional)
     - parameter comDayCommonsOsgiWrapperSimpleJndi: (query)  (optional)
     - parameter comDayCqCqAuthhandler: (query)  (optional)
     - parameter comDayCqCqCompatConfigupdate: (query)  (optional)
     - parameter comDayCqCqLicensebranding: (query)  (optional)
     - parameter comDayCqCqNotifcationImpl: (query)  (optional)
     - parameter comDayCqCqReplicationAudit: (query)  (optional)
     - parameter comDayCqCqSearchExt: (query)  (optional)
     - parameter comDayCqDamCqDamAnnotationPrint: (query)  (optional)
     - parameter comDayCqDamCqDamAssetUsage: (query)  (optional)
     - parameter comDayCqDamCqDamS7dam: (query)  (optional)
     - parameter comDayCqDamCqDamSimilaritysearch: (query)  (optional)
     - parameter comDayCqDamDamWebdavSupport: (query)  (optional)
     - parameter comDayCqPreUpgradeTasks: (query)  (optional)
     - parameter comDayCqReplicationExtensions: (query)  (optional)
     - parameter comDayCqWcmCqMsmCore: (query)  (optional)
     - parameter comDayCqWcmCqWcmTranslation: (query)  (optional)
     - parameter dayCommonsJrawio: (query)  (optional)
     - parameter orgApacheAriesJmxWhiteboard: (query)  (optional)
     - parameter orgApacheFelixHttpSslfilter: (query)  (optional)
     - parameter orgApacheFelixOrgApacheFelixThreaddump: (query)  (optional)
     - parameter orgApacheFelixWebconsolePluginsDs: (query)  (optional)
     - parameter orgApacheFelixWebconsolePluginsEvent: (query)  (optional)
     - parameter orgApacheFelixWebconsolePluginsMemoryusage: (query)  (optional)
     - parameter orgApacheFelixWebconsolePluginsPackageadmin: (query)  (optional)
     - parameter orgApacheJackrabbitOakAuthLdap: (query)  (optional)
     - parameter orgApacheJackrabbitOakSegmentTar: (query)  (optional)
     - parameter orgApacheJackrabbitOakSolrOsgi: (query)  (optional)
     - parameter orgApacheSlingBundleresourceImpl: (query)  (optional)
     - parameter orgApacheSlingCommonsFsclassloader: (query)  (optional)
     - parameter orgApacheSlingCommonsLogWebconsole: (query)  (optional)
     - parameter orgApacheSlingDatasource: (query)  (optional)
     - parameter orgApacheSlingDiscoveryBase: (query)  (optional)
     - parameter orgApacheSlingDiscoveryOak: (query)  (optional)
     - parameter orgApacheSlingDiscoverySupport: (query)  (optional)
     - parameter orgApacheSlingDistributionApi: (query)  (optional)
     - parameter orgApacheSlingDistributionCore: (query)  (optional)
     - parameter orgApacheSlingExtensionsWebconsolesecurityprovider: (query)  (optional)
     - parameter orgApacheSlingHcWebconsole: (query)  (optional)
     - parameter orgApacheSlingInstallerConsole: (query)  (optional)
     - parameter orgApacheSlingInstallerProviderFile: (query)  (optional)
     - parameter orgApacheSlingInstallerProviderJcr: (query)  (optional)
     - parameter orgApacheSlingJcrDavex: (query)  (optional)
     - parameter orgApacheSlingJcrResourcesecurity: (query)  (optional)
     - parameter orgApacheSlingJmxProvider: (query)  (optional)
     - parameter orgApacheSlingLaunchpadInstaller: (query)  (optional)
     - parameter orgApacheSlingModelsImpl: (query)  (optional)
     - parameter orgApacheSlingRepoinitParser: (query)  (optional)
     - parameter orgApacheSlingResourceInventory: (query)  (optional)
     - parameter orgApacheSlingResourceresolver: (query)  (optional)
     - parameter orgApacheSlingScriptingJavascript: (query)  (optional)
     - parameter orgApacheSlingScriptingJst: (query)  (optional)
     - parameter orgApacheSlingScriptingSightlyJsProvider: (query)  (optional)
     - parameter orgApacheSlingScriptingSightlyModelsProvider: (query)  (optional)
     - parameter orgApacheSlingSecurity: (query)  (optional)
     - parameter orgApacheSlingServletsCompat: (query)  (optional)
     - parameter orgApacheSlingServletsGet: (query)  (optional)
     - parameter orgApacheSlingStartupfilterDisabler: (query)  (optional)
     - parameter orgApacheSlingTracer: (query)  (optional)
     - parameter weRetailClientAppCore: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeGraniteApicontrollerFilterResolverHookFactory(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, comAdobeCqCdnCdnRewriter: String? = nil, comAdobeCqCloudConfigComponents: String? = nil, comAdobeCqCloudConfigCore: String? = nil, comAdobeCqCloudConfigUi: String? = nil, comAdobeCqComAdobeCqEditor: String? = nil, comAdobeCqComAdobeCqProjectsCore: String? = nil, comAdobeCqComAdobeCqProjectsWcmCore: String? = nil, comAdobeCqComAdobeCqUiCommons: String? = nil, comAdobeCqComAdobeCqWcmStyle: String? = nil, comAdobeCqCqActivitymapIntegration: String? = nil, comAdobeCqCqContexthubCommons: String? = nil, comAdobeCqCqDtm: String? = nil, comAdobeCqCqHealthcheck: String? = nil, comAdobeCqCqMultisiteTargeting: String? = nil, comAdobeCqCqPreUpgradeCleanup: String? = nil, comAdobeCqCqProductInfoProvider: String? = nil, comAdobeCqCqRestSites: String? = nil, comAdobeCqCqSecurityHc: String? = nil, comAdobeCqDamCqDamSvgHandler: String? = nil, comAdobeCqDamCqScene7Imaging: String? = nil, comAdobeCqDtmReactorCore: String? = nil, comAdobeCqDtmReactorUi: String? = nil, comAdobeCqExpJspelResolver: String? = nil, comAdobeCqInboxCqInbox: String? = nil, comAdobeCqJsonSchemaParser: String? = nil, comAdobeCqMediaCqMediaPublishingDpsFpCore: String? = nil, comAdobeCqMobileCqMobileCaas: String? = nil, comAdobeCqMobileCqMobileIndexBuilder: String? = nil, comAdobeCqMobileCqMobilePhonegapBuild: String? = nil, comAdobeCqMyspell: String? = nil, comAdobeCqSampleWeRetailCore: String? = nil, comAdobeCqScreensComAdobeCqScreensDcc: String? = nil, comAdobeCqScreensComAdobeCqScreensMqCore: String? = nil, comAdobeCqSocialCqSocialAsProvider: String? = nil, comAdobeCqSocialCqSocialBadgingBasicImpl: String? = nil, comAdobeCqSocialCqSocialBadgingImpl: String? = nil, comAdobeCqSocialCqSocialCalendarImpl: String? = nil, comAdobeCqSocialCqSocialContentFragmentsImpl: String? = nil, comAdobeCqSocialCqSocialEnablementImpl: String? = nil, comAdobeCqSocialCqSocialGraphImpl: String? = nil, comAdobeCqSocialCqSocialIdeationImpl: String? = nil, comAdobeCqSocialCqSocialJcrProvider: String? = nil, comAdobeCqSocialCqSocialMembersImpl: String? = nil, comAdobeCqSocialCqSocialMsProvider: String? = nil, comAdobeCqSocialCqSocialNotificationsChannelsWeb: String? = nil, comAdobeCqSocialCqSocialNotificationsImpl: String? = nil, comAdobeCqSocialCqSocialRdbProvider: String? = nil, comAdobeCqSocialCqSocialScfImpl: String? = nil, comAdobeCqSocialCqSocialScoringBasicImpl: String? = nil, comAdobeCqSocialCqSocialScoringImpl: String? = nil, comAdobeCqSocialCqSocialServiceusersImpl: String? = nil, comAdobeCqSocialCqSocialSrpImpl: String? = nil, comAdobeCqSocialCqSocialUgcbaseImpl: String? = nil, comAdobeDamCqDamCfmImpl: String? = nil, comAdobeFormsFoundationFormsFoundationBase: String? = nil, comAdobeGraniteApicontroller: String? = nil, comAdobeGraniteAssetCore: String? = nil, comAdobeGraniteAuthSso: String? = nil, comAdobeGraniteBundlesHcImpl: String? = nil, comAdobeGraniteCompatRouter: String? = nil, comAdobeGraniteConf: String? = nil, comAdobeGraniteConfUiCore: String? = nil, comAdobeGraniteCors: String? = nil, comAdobeGraniteCrxExplorer: String? = nil, comAdobeGraniteCrxdeLite: String? = nil, comAdobeGraniteCryptoConfig: String? = nil, comAdobeGraniteCryptoExtension: String? = nil, comAdobeGraniteCryptoFile: String? = nil, comAdobeGraniteCryptoJcr: String? = nil, comAdobeGraniteCsrf: String? = nil, comAdobeGraniteDistributionCore: String? = nil, comAdobeGraniteDropwizardMetrics: String? = nil, comAdobeGraniteFragsImpl: String? = nil, comAdobeGraniteGibson: String? = nil, comAdobeGraniteInfocollector: String? = nil, comAdobeGraniteInstallerFactoryPackages: String? = nil, comAdobeGraniteJettySsl: String? = nil, comAdobeGraniteJobsAsync: String? = nil, comAdobeGraniteMaintenanceOak: String? = nil, comAdobeGraniteMonitoringCore: String? = nil, comAdobeGraniteQueries: String? = nil, comAdobeGraniteReplicationHcImpl: String? = nil, comAdobeGraniteRepositoryChecker: String? = nil, comAdobeGraniteRepositoryHcImpl: String? = nil, comAdobeGraniteRestAssets: String? = nil, comAdobeGraniteSecurityUi: String? = nil, comAdobeGraniteStartup: String? = nil, comAdobeGraniteTagsoup: String? = nil, comAdobeGraniteTaskmanagementCore: String? = nil, comAdobeGraniteTaskmanagementWorkflow: String? = nil, comAdobeGraniteUiClientlibsCompilerLess: String? = nil, comAdobeGraniteUiClientlibsProcessorGcc: String? = nil, comAdobeGraniteWebconsolePlugins: String? = nil, comAdobeGraniteWorkflowConsole: String? = nil, comAdobeXmpWorkerFilesNativeFragmentLinux: String? = nil, comAdobeXmpWorkerFilesNativeFragmentMacosx: String? = nil, comAdobeXmpWorkerFilesNativeFragmentWin: String? = nil, comDayCommonsOsgiWrapperSimpleJndi: String? = nil, comDayCqCqAuthhandler: String? = nil, comDayCqCqCompatConfigupdate: String? = nil, comDayCqCqLicensebranding: String? = nil, comDayCqCqNotifcationImpl: String? = nil, comDayCqCqReplicationAudit: String? = nil, comDayCqCqSearchExt: String? = nil, comDayCqDamCqDamAnnotationPrint: String? = nil, comDayCqDamCqDamAssetUsage: String? = nil, comDayCqDamCqDamS7dam: String? = nil, comDayCqDamCqDamSimilaritysearch: String? = nil, comDayCqDamDamWebdavSupport: String? = nil, comDayCqPreUpgradeTasks: String? = nil, comDayCqReplicationExtensions: String? = nil, comDayCqWcmCqMsmCore: String? = nil, comDayCqWcmCqWcmTranslation: String? = nil, dayCommonsJrawio: String? = nil, orgApacheAriesJmxWhiteboard: String? = nil, orgApacheFelixHttpSslfilter: String? = nil, orgApacheFelixOrgApacheFelixThreaddump: String? = nil, orgApacheFelixWebconsolePluginsDs: String? = nil, orgApacheFelixWebconsolePluginsEvent: String? = nil, orgApacheFelixWebconsolePluginsMemoryusage: String? = nil, orgApacheFelixWebconsolePluginsPackageadmin: String? = nil, orgApacheJackrabbitOakAuthLdap: String? = nil, orgApacheJackrabbitOakSegmentTar: String? = nil, orgApacheJackrabbitOakSolrOsgi: String? = nil, orgApacheSlingBundleresourceImpl: String? = nil, orgApacheSlingCommonsFsclassloader: String? = nil, orgApacheSlingCommonsLogWebconsole: String? = nil, orgApacheSlingDatasource: String? = nil, orgApacheSlingDiscoveryBase: String? = nil, orgApacheSlingDiscoveryOak: String? = nil, orgApacheSlingDiscoverySupport: String? = nil, orgApacheSlingDistributionApi: String? = nil, orgApacheSlingDistributionCore: String? = nil, orgApacheSlingExtensionsWebconsolesecurityprovider: String? = nil, orgApacheSlingHcWebconsole: String? = nil, orgApacheSlingInstallerConsole: String? = nil, orgApacheSlingInstallerProviderFile: String? = nil, orgApacheSlingInstallerProviderJcr: String? = nil, orgApacheSlingJcrDavex: String? = nil, orgApacheSlingJcrResourcesecurity: String? = nil, orgApacheSlingJmxProvider: String? = nil, orgApacheSlingLaunchpadInstaller: String? = nil, orgApacheSlingModelsImpl: String? = nil, orgApacheSlingRepoinitParser: String? = nil, orgApacheSlingResourceInventory: String? = nil, orgApacheSlingResourceresolver: String? = nil, orgApacheSlingScriptingJavascript: String? = nil, orgApacheSlingScriptingJst: String? = nil, orgApacheSlingScriptingSightlyJsProvider: String? = nil, orgApacheSlingScriptingSightlyModelsProvider: String? = nil, orgApacheSlingSecurity: String? = nil, orgApacheSlingServletsCompat: String? = nil, orgApacheSlingServletsGet: String? = nil, orgApacheSlingStartupfilterDisabler: String? = nil, orgApacheSlingTracer: String? = nil, weRetailClientAppCore: String? = nil, completion: ((data: ComAdobeGraniteApicontrollerFilterResolverHookFactoryInfo?, error: ErrorType?) -> Void)) {
        comAdobeGraniteApicontrollerFilterResolverHookFactoryWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, comAdobeCqCdnCdnRewriter: comAdobeCqCdnCdnRewriter, comAdobeCqCloudConfigComponents: comAdobeCqCloudConfigComponents, comAdobeCqCloudConfigCore: comAdobeCqCloudConfigCore, comAdobeCqCloudConfigUi: comAdobeCqCloudConfigUi, comAdobeCqComAdobeCqEditor: comAdobeCqComAdobeCqEditor, comAdobeCqComAdobeCqProjectsCore: comAdobeCqComAdobeCqProjectsCore, comAdobeCqComAdobeCqProjectsWcmCore: comAdobeCqComAdobeCqProjectsWcmCore, comAdobeCqComAdobeCqUiCommons: comAdobeCqComAdobeCqUiCommons, comAdobeCqComAdobeCqWcmStyle: comAdobeCqComAdobeCqWcmStyle, comAdobeCqCqActivitymapIntegration: comAdobeCqCqActivitymapIntegration, comAdobeCqCqContexthubCommons: comAdobeCqCqContexthubCommons, comAdobeCqCqDtm: comAdobeCqCqDtm, comAdobeCqCqHealthcheck: comAdobeCqCqHealthcheck, comAdobeCqCqMultisiteTargeting: comAdobeCqCqMultisiteTargeting, comAdobeCqCqPreUpgradeCleanup: comAdobeCqCqPreUpgradeCleanup, comAdobeCqCqProductInfoProvider: comAdobeCqCqProductInfoProvider, comAdobeCqCqRestSites: comAdobeCqCqRestSites, comAdobeCqCqSecurityHc: comAdobeCqCqSecurityHc, comAdobeCqDamCqDamSvgHandler: comAdobeCqDamCqDamSvgHandler, comAdobeCqDamCqScene7Imaging: comAdobeCqDamCqScene7Imaging, comAdobeCqDtmReactorCore: comAdobeCqDtmReactorCore, comAdobeCqDtmReactorUi: comAdobeCqDtmReactorUi, comAdobeCqExpJspelResolver: comAdobeCqExpJspelResolver, comAdobeCqInboxCqInbox: comAdobeCqInboxCqInbox, comAdobeCqJsonSchemaParser: comAdobeCqJsonSchemaParser, comAdobeCqMediaCqMediaPublishingDpsFpCore: comAdobeCqMediaCqMediaPublishingDpsFpCore, comAdobeCqMobileCqMobileCaas: comAdobeCqMobileCqMobileCaas, comAdobeCqMobileCqMobileIndexBuilder: comAdobeCqMobileCqMobileIndexBuilder, comAdobeCqMobileCqMobilePhonegapBuild: comAdobeCqMobileCqMobilePhonegapBuild, comAdobeCqMyspell: comAdobeCqMyspell, comAdobeCqSampleWeRetailCore: comAdobeCqSampleWeRetailCore, comAdobeCqScreensComAdobeCqScreensDcc: comAdobeCqScreensComAdobeCqScreensDcc, comAdobeCqScreensComAdobeCqScreensMqCore: comAdobeCqScreensComAdobeCqScreensMqCore, comAdobeCqSocialCqSocialAsProvider: comAdobeCqSocialCqSocialAsProvider, comAdobeCqSocialCqSocialBadgingBasicImpl: comAdobeCqSocialCqSocialBadgingBasicImpl, comAdobeCqSocialCqSocialBadgingImpl: comAdobeCqSocialCqSocialBadgingImpl, comAdobeCqSocialCqSocialCalendarImpl: comAdobeCqSocialCqSocialCalendarImpl, comAdobeCqSocialCqSocialContentFragmentsImpl: comAdobeCqSocialCqSocialContentFragmentsImpl, comAdobeCqSocialCqSocialEnablementImpl: comAdobeCqSocialCqSocialEnablementImpl, comAdobeCqSocialCqSocialGraphImpl: comAdobeCqSocialCqSocialGraphImpl, comAdobeCqSocialCqSocialIdeationImpl: comAdobeCqSocialCqSocialIdeationImpl, comAdobeCqSocialCqSocialJcrProvider: comAdobeCqSocialCqSocialJcrProvider, comAdobeCqSocialCqSocialMembersImpl: comAdobeCqSocialCqSocialMembersImpl, comAdobeCqSocialCqSocialMsProvider: comAdobeCqSocialCqSocialMsProvider, comAdobeCqSocialCqSocialNotificationsChannelsWeb: comAdobeCqSocialCqSocialNotificationsChannelsWeb, comAdobeCqSocialCqSocialNotificationsImpl: comAdobeCqSocialCqSocialNotificationsImpl, comAdobeCqSocialCqSocialRdbProvider: comAdobeCqSocialCqSocialRdbProvider, comAdobeCqSocialCqSocialScfImpl: comAdobeCqSocialCqSocialScfImpl, comAdobeCqSocialCqSocialScoringBasicImpl: comAdobeCqSocialCqSocialScoringBasicImpl, comAdobeCqSocialCqSocialScoringImpl: comAdobeCqSocialCqSocialScoringImpl, comAdobeCqSocialCqSocialServiceusersImpl: comAdobeCqSocialCqSocialServiceusersImpl, comAdobeCqSocialCqSocialSrpImpl: comAdobeCqSocialCqSocialSrpImpl, comAdobeCqSocialCqSocialUgcbaseImpl: comAdobeCqSocialCqSocialUgcbaseImpl, comAdobeDamCqDamCfmImpl: comAdobeDamCqDamCfmImpl, comAdobeFormsFoundationFormsFoundationBase: comAdobeFormsFoundationFormsFoundationBase, comAdobeGraniteApicontroller: comAdobeGraniteApicontroller, comAdobeGraniteAssetCore: comAdobeGraniteAssetCore, comAdobeGraniteAuthSso: comAdobeGraniteAuthSso, comAdobeGraniteBundlesHcImpl: comAdobeGraniteBundlesHcImpl, comAdobeGraniteCompatRouter: comAdobeGraniteCompatRouter, comAdobeGraniteConf: comAdobeGraniteConf, comAdobeGraniteConfUiCore: comAdobeGraniteConfUiCore, comAdobeGraniteCors: comAdobeGraniteCors, comAdobeGraniteCrxExplorer: comAdobeGraniteCrxExplorer, comAdobeGraniteCrxdeLite: comAdobeGraniteCrxdeLite, comAdobeGraniteCryptoConfig: comAdobeGraniteCryptoConfig, comAdobeGraniteCryptoExtension: comAdobeGraniteCryptoExtension, comAdobeGraniteCryptoFile: comAdobeGraniteCryptoFile, comAdobeGraniteCryptoJcr: comAdobeGraniteCryptoJcr, comAdobeGraniteCsrf: comAdobeGraniteCsrf, comAdobeGraniteDistributionCore: comAdobeGraniteDistributionCore, comAdobeGraniteDropwizardMetrics: comAdobeGraniteDropwizardMetrics, comAdobeGraniteFragsImpl: comAdobeGraniteFragsImpl, comAdobeGraniteGibson: comAdobeGraniteGibson, comAdobeGraniteInfocollector: comAdobeGraniteInfocollector, comAdobeGraniteInstallerFactoryPackages: comAdobeGraniteInstallerFactoryPackages, comAdobeGraniteJettySsl: comAdobeGraniteJettySsl, comAdobeGraniteJobsAsync: comAdobeGraniteJobsAsync, comAdobeGraniteMaintenanceOak: comAdobeGraniteMaintenanceOak, comAdobeGraniteMonitoringCore: comAdobeGraniteMonitoringCore, comAdobeGraniteQueries: comAdobeGraniteQueries, comAdobeGraniteReplicationHcImpl: comAdobeGraniteReplicationHcImpl, comAdobeGraniteRepositoryChecker: comAdobeGraniteRepositoryChecker, comAdobeGraniteRepositoryHcImpl: comAdobeGraniteRepositoryHcImpl, comAdobeGraniteRestAssets: comAdobeGraniteRestAssets, comAdobeGraniteSecurityUi: comAdobeGraniteSecurityUi, comAdobeGraniteStartup: comAdobeGraniteStartup, comAdobeGraniteTagsoup: comAdobeGraniteTagsoup, comAdobeGraniteTaskmanagementCore: comAdobeGraniteTaskmanagementCore, comAdobeGraniteTaskmanagementWorkflow: comAdobeGraniteTaskmanagementWorkflow, comAdobeGraniteUiClientlibsCompilerLess: comAdobeGraniteUiClientlibsCompilerLess, comAdobeGraniteUiClientlibsProcessorGcc: comAdobeGraniteUiClientlibsProcessorGcc, comAdobeGraniteWebconsolePlugins: comAdobeGraniteWebconsolePlugins, comAdobeGraniteWorkflowConsole: comAdobeGraniteWorkflowConsole, comAdobeXmpWorkerFilesNativeFragmentLinux: comAdobeXmpWorkerFilesNativeFragmentLinux, comAdobeXmpWorkerFilesNativeFragmentMacosx: comAdobeXmpWorkerFilesNativeFragmentMacosx, comAdobeXmpWorkerFilesNativeFragmentWin: comAdobeXmpWorkerFilesNativeFragmentWin, comDayCommonsOsgiWrapperSimpleJndi: comDayCommonsOsgiWrapperSimpleJndi, comDayCqCqAuthhandler: comDayCqCqAuthhandler, comDayCqCqCompatConfigupdate: comDayCqCqCompatConfigupdate, comDayCqCqLicensebranding: comDayCqCqLicensebranding, comDayCqCqNotifcationImpl: comDayCqCqNotifcationImpl, comDayCqCqReplicationAudit: comDayCqCqReplicationAudit, comDayCqCqSearchExt: comDayCqCqSearchExt, comDayCqDamCqDamAnnotationPrint: comDayCqDamCqDamAnnotationPrint, comDayCqDamCqDamAssetUsage: comDayCqDamCqDamAssetUsage, comDayCqDamCqDamS7dam: comDayCqDamCqDamS7dam, comDayCqDamCqDamSimilaritysearch: comDayCqDamCqDamSimilaritysearch, comDayCqDamDamWebdavSupport: comDayCqDamDamWebdavSupport, comDayCqPreUpgradeTasks: comDayCqPreUpgradeTasks, comDayCqReplicationExtensions: comDayCqReplicationExtensions, comDayCqWcmCqMsmCore: comDayCqWcmCqMsmCore, comDayCqWcmCqWcmTranslation: comDayCqWcmCqWcmTranslation, dayCommonsJrawio: dayCommonsJrawio, orgApacheAriesJmxWhiteboard: orgApacheAriesJmxWhiteboard, orgApacheFelixHttpSslfilter: orgApacheFelixHttpSslfilter, orgApacheFelixOrgApacheFelixThreaddump: orgApacheFelixOrgApacheFelixThreaddump, orgApacheFelixWebconsolePluginsDs: orgApacheFelixWebconsolePluginsDs, orgApacheFelixWebconsolePluginsEvent: orgApacheFelixWebconsolePluginsEvent, orgApacheFelixWebconsolePluginsMemoryusage: orgApacheFelixWebconsolePluginsMemoryusage, orgApacheFelixWebconsolePluginsPackageadmin: orgApacheFelixWebconsolePluginsPackageadmin, orgApacheJackrabbitOakAuthLdap: orgApacheJackrabbitOakAuthLdap, orgApacheJackrabbitOakSegmentTar: orgApacheJackrabbitOakSegmentTar, orgApacheJackrabbitOakSolrOsgi: orgApacheJackrabbitOakSolrOsgi, orgApacheSlingBundleresourceImpl: orgApacheSlingBundleresourceImpl, orgApacheSlingCommonsFsclassloader: orgApacheSlingCommonsFsclassloader, orgApacheSlingCommonsLogWebconsole: orgApacheSlingCommonsLogWebconsole, orgApacheSlingDatasource: orgApacheSlingDatasource, orgApacheSlingDiscoveryBase: orgApacheSlingDiscoveryBase, orgApacheSlingDiscoveryOak: orgApacheSlingDiscoveryOak, orgApacheSlingDiscoverySupport: orgApacheSlingDiscoverySupport, orgApacheSlingDistributionApi: orgApacheSlingDistributionApi, orgApacheSlingDistributionCore: orgApacheSlingDistributionCore, orgApacheSlingExtensionsWebconsolesecurityprovider: orgApacheSlingExtensionsWebconsolesecurityprovider, orgApacheSlingHcWebconsole: orgApacheSlingHcWebconsole, orgApacheSlingInstallerConsole: orgApacheSlingInstallerConsole, orgApacheSlingInstallerProviderFile: orgApacheSlingInstallerProviderFile, orgApacheSlingInstallerProviderJcr: orgApacheSlingInstallerProviderJcr, orgApacheSlingJcrDavex: orgApacheSlingJcrDavex, orgApacheSlingJcrResourcesecurity: orgApacheSlingJcrResourcesecurity, orgApacheSlingJmxProvider: orgApacheSlingJmxProvider, orgApacheSlingLaunchpadInstaller: orgApacheSlingLaunchpadInstaller, orgApacheSlingModelsImpl: orgApacheSlingModelsImpl, orgApacheSlingRepoinitParser: orgApacheSlingRepoinitParser, orgApacheSlingResourceInventory: orgApacheSlingResourceInventory, orgApacheSlingResourceresolver: orgApacheSlingResourceresolver, orgApacheSlingScriptingJavascript: orgApacheSlingScriptingJavascript, orgApacheSlingScriptingJst: orgApacheSlingScriptingJst, orgApacheSlingScriptingSightlyJsProvider: orgApacheSlingScriptingSightlyJsProvider, orgApacheSlingScriptingSightlyModelsProvider: orgApacheSlingScriptingSightlyModelsProvider, orgApacheSlingSecurity: orgApacheSlingSecurity, orgApacheSlingServletsCompat: orgApacheSlingServletsCompat, orgApacheSlingServletsGet: orgApacheSlingServletsGet, orgApacheSlingStartupfilterDisabler: orgApacheSlingStartupfilterDisabler, orgApacheSlingTracer: orgApacheSlingTracer, weRetailClientAppCore: weRetailClientAppCore).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.apicontroller.FilterResolverHookFactory     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "service_location" : "service_location",
  "bundle_location" : "bundle_location",
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "com.adobe.cq.social.cq-social-serviceusers-impl" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "org.apache.sling.jcr.davex" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "com.adobe.xmp.worker.files.native.fragment.win" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "com.adobe.cq.media.cq-media-publishing-dps-fp-core" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "com.adobe.cq.exp-jspel-resolver" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "com.adobe.cq.social.cq-social-calendar-impl" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "com.adobe.cq.com.adobe.cq.projects.core" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "org.apache.sling.models.impl" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "com.adobe.cq.dam.cq-scene7-imaging" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "com.adobe.cq.cloud-config.components" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "com.adobe.cq.cq-pre-upgrade-cleanup" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "com.adobe.cq.social.cq-social-ms-provider" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "com.day.cq.dam.dam-webdav-support" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "com.day.cq.cq-licensebranding" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "com.adobe.cq.myspell" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "com.adobe.granite.replication.hc.impl" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "com.adobe.cq.cq-contexthub-commons" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "org.apache.felix.webconsole.plugins.memoryusage" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "org.apache.sling.bundleresource.impl" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "org.apache.sling.distribution.core" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "com.adobe.cq.com.adobe.cq.wcm.style" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "com.adobe.granite.compat-router" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "org.apache.sling.distribution.api" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "com.adobe.dam.cq-dam-cfm-impl" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "org.apache.sling.datasource" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "org.apache.sling.scripting.sightly.models.provider" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "com.adobe.granite.bundles.hc.impl" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "org.apache.jackrabbit.oak-solr-osgi" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "com.adobe.cq.social.cq-social-scoring-basic-impl" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "com.adobe.cq.com.adobe.cq.editor" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "com.adobe.granite.crypto.config" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "com.adobe.granite.queries" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "we.retail.client.app.core" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "com.adobe.granite.csrf" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "com.adobe.granite.startup" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "org.apache.sling.tracer" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "org.apache.sling.servlets.get" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "com.adobe.granite.crxde-lite" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "com.adobe.cq.sample.we.retail.core" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "org.apache.sling.servlets.compat" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "org.apache.sling.discovery.base" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "org.apache.jackrabbit.oak-segment-tar" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "com.adobe.cq.screens.com.adobe.cq.screens.dcc" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "org.apache.sling.resourceresolver" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "org.apache.sling.launchpad.installer" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "com.adobe.cq.social.cq-social-badging-impl" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "org.apache.sling.scripting.sightly.js.provider" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "com.adobe.granite.taskmanagement.workflow" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "com.adobe.cq.social.cq-social-jcr-provider" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "com.adobe.cq.social.cq-social-scoring-impl" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "com.adobe.cq.cloud-config.core" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "com.adobe.cq.social.cq-social-notifications-channels-web" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "day-commons-jrawio" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "com.adobe.granite.crx-explorer" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "com.adobe.granite.rest.assets" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "com.adobe.cq.social.cq-social-badging-basic-impl" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "com.adobe.cq.cq-activitymap-integration" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "org.apache.sling.installer.provider.jcr" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "com.adobe.granite.auth.sso" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "com.day.cq.cq-authhandler" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "com.adobe.granite.jetty.ssl" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "com.adobe.cq.cq-rest-sites" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "org.apache.felix.org.apache.felix.threaddump" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "org.apache.felix.webconsole.plugins.event" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "org.apache.sling.scripting.jst" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "com.adobe.granite.jobs.async" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "com.adobe.granite.ui.clientlibs.compiler.less" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "org.apache.sling.discovery.oak" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "com.adobe.granite.crypto.file" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "com.adobe.cq.social.cq-social-as-provider" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "com.adobe.xmp.worker.files.native.fragment.linux" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "com.adobe.xmp.worker.files.native.fragment.macosx" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "com.adobe.cq.social.cq-social-scf-impl" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "com.adobe.granite.repository.hc.impl" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "org.apache.sling.security" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "org.apache.sling.jmx.provider" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "com.adobe.cq.cq-security-hc" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "org.apache.felix.http.sslfilter" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "org.apache.sling.extensions.webconsolesecurityprovider" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "org.apache.sling.hc.webconsole" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "com.adobe.granite.webconsole.plugins" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "com.day.cq.cq-notifcation-impl" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "com.adobe.cq.social.cq-social-notifications-impl" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "com.adobe.granite.security.ui" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "org.apache.sling.scripting.javascript" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "com.adobe.granite.maintenance.oak" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "com.adobe.cq.social.cq-social-enablement-impl" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "com.day.cq.dam.cq-dam-asset-usage" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "com.adobe.cq.social.cq-social-srp-impl" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "com.day.commons.osgi.wrapper.simple-jndi" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "com.adobe.granite.dropwizard.metrics" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "com.adobe.cq.social.cq-social-members-impl" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "com.adobe.granite.installer.factory.packages" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "com.adobe.granite.ui.clientlibs.processor.gcc" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "org.apache.sling.startupfilter.disabler" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "com.adobe.cq.cq-healthcheck" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "org.apache.sling.installer.provider.file" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "com.adobe.cq.dtm-reactor.core" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "com.adobe.cq.cloud-config.ui" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "org.apache.sling.commons.log.webconsole" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "org.apache.sling.installer.console" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "org.apache.felix.webconsole.plugins.packageadmin" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "com.adobe.granite.conf.ui.core" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "com.adobe.cq.social.cq-social-rdb-provider" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "org.apache.sling.repoinit.parser" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "org.apache.sling.discovery.support" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "com.adobe.cq.social.cq-social-graph-impl" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "com.day.cq.dam.cq-dam-s7dam" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "com.adobe.granite.apicontroller" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "org.apache.jackrabbit.oak-auth-ldap" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "com.adobe.granite.conf" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "com.day.cq.dam.cq-dam-similaritysearch" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "com.day.cq.wcm.cq-msm-core" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "com.adobe.granite.frags.impl" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "com.adobe.granite.cors" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "com.adobe.granite.workflow.console" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "com.day.cq.cq-compat-configupdate" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "com.adobe.granite.crypto.jcr" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "com.day.cq.replication.extensions" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "com.adobe.forms.foundation-forms-foundation-base" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "org.apache.sling.commons.fsclassloader" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "com.adobe.granite.gibson" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "com.adobe.granite.infocollector" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "com.adobe.granite.taskmanagement.core" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "com.adobe.cq.cdn.cdn-rewriter" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "com.adobe.granite.tagsoup" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "com.adobe.cq.cq-multisite-targeting" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "com.adobe.cq.social.cq-social-ugcbase-impl" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "com.adobe.cq.json-schema-parser" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "com.day.cq.pre-upgrade-tasks" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "com.adobe.cq.mobile.cq-mobile-index-builder" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "com.adobe.cq.screens.com.adobe.cq.screens.mq.core" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "com.adobe.cq.mobile.cq-mobile-caas" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "com.adobe.cq.social.cq-social-ideation-impl" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "com.adobe.cq.com.adobe.cq.ui.commons" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "com.day.cq.cq-search-ext" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "com.day.cq.dam.cq-dam-annotation-print" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "com.adobe.cq.social.cq-social-content-fragments-impl" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "com.adobe.granite.crypto.extension" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "com.adobe.granite.monitoring.core" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "com.day.cq.wcm.cq-wcm-translation" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "com.day.cq.cq-replication-audit" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "com.adobe.cq.inbox.cq-inbox" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "org.apache.felix.webconsole.plugins.ds" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "org.apache.sling.resource.inventory" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "com.adobe.cq.dtm-reactor.ui" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "com.adobe.cq.mobile.cq-mobile-phonegap-build" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "com.adobe.granite.repository.checker" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "com.adobe.cq.dam.cq-dam-svg-handler" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "com.adobe.cq.cq-dtm" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "com.adobe.granite.distribution.core" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "org.apache.aries.jmx.whiteboard" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "com.adobe.cq.com.adobe.cq.projects.wcm.core" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "com.adobe.cq.cq-product-info-provider" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "org.apache.sling.jcr.resourcesecurity" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "com.adobe.granite.asset.core" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter comAdobeCqCdnCdnRewriter: (query)  (optional)
     - parameter comAdobeCqCloudConfigComponents: (query)  (optional)
     - parameter comAdobeCqCloudConfigCore: (query)  (optional)
     - parameter comAdobeCqCloudConfigUi: (query)  (optional)
     - parameter comAdobeCqComAdobeCqEditor: (query)  (optional)
     - parameter comAdobeCqComAdobeCqProjectsCore: (query)  (optional)
     - parameter comAdobeCqComAdobeCqProjectsWcmCore: (query)  (optional)
     - parameter comAdobeCqComAdobeCqUiCommons: (query)  (optional)
     - parameter comAdobeCqComAdobeCqWcmStyle: (query)  (optional)
     - parameter comAdobeCqCqActivitymapIntegration: (query)  (optional)
     - parameter comAdobeCqCqContexthubCommons: (query)  (optional)
     - parameter comAdobeCqCqDtm: (query)  (optional)
     - parameter comAdobeCqCqHealthcheck: (query)  (optional)
     - parameter comAdobeCqCqMultisiteTargeting: (query)  (optional)
     - parameter comAdobeCqCqPreUpgradeCleanup: (query)  (optional)
     - parameter comAdobeCqCqProductInfoProvider: (query)  (optional)
     - parameter comAdobeCqCqRestSites: (query)  (optional)
     - parameter comAdobeCqCqSecurityHc: (query)  (optional)
     - parameter comAdobeCqDamCqDamSvgHandler: (query)  (optional)
     - parameter comAdobeCqDamCqScene7Imaging: (query)  (optional)
     - parameter comAdobeCqDtmReactorCore: (query)  (optional)
     - parameter comAdobeCqDtmReactorUi: (query)  (optional)
     - parameter comAdobeCqExpJspelResolver: (query)  (optional)
     - parameter comAdobeCqInboxCqInbox: (query)  (optional)
     - parameter comAdobeCqJsonSchemaParser: (query)  (optional)
     - parameter comAdobeCqMediaCqMediaPublishingDpsFpCore: (query)  (optional)
     - parameter comAdobeCqMobileCqMobileCaas: (query)  (optional)
     - parameter comAdobeCqMobileCqMobileIndexBuilder: (query)  (optional)
     - parameter comAdobeCqMobileCqMobilePhonegapBuild: (query)  (optional)
     - parameter comAdobeCqMyspell: (query)  (optional)
     - parameter comAdobeCqSampleWeRetailCore: (query)  (optional)
     - parameter comAdobeCqScreensComAdobeCqScreensDcc: (query)  (optional)
     - parameter comAdobeCqScreensComAdobeCqScreensMqCore: (query)  (optional)
     - parameter comAdobeCqSocialCqSocialAsProvider: (query)  (optional)
     - parameter comAdobeCqSocialCqSocialBadgingBasicImpl: (query)  (optional)
     - parameter comAdobeCqSocialCqSocialBadgingImpl: (query)  (optional)
     - parameter comAdobeCqSocialCqSocialCalendarImpl: (query)  (optional)
     - parameter comAdobeCqSocialCqSocialContentFragmentsImpl: (query)  (optional)
     - parameter comAdobeCqSocialCqSocialEnablementImpl: (query)  (optional)
     - parameter comAdobeCqSocialCqSocialGraphImpl: (query)  (optional)
     - parameter comAdobeCqSocialCqSocialIdeationImpl: (query)  (optional)
     - parameter comAdobeCqSocialCqSocialJcrProvider: (query)  (optional)
     - parameter comAdobeCqSocialCqSocialMembersImpl: (query)  (optional)
     - parameter comAdobeCqSocialCqSocialMsProvider: (query)  (optional)
     - parameter comAdobeCqSocialCqSocialNotificationsChannelsWeb: (query)  (optional)
     - parameter comAdobeCqSocialCqSocialNotificationsImpl: (query)  (optional)
     - parameter comAdobeCqSocialCqSocialRdbProvider: (query)  (optional)
     - parameter comAdobeCqSocialCqSocialScfImpl: (query)  (optional)
     - parameter comAdobeCqSocialCqSocialScoringBasicImpl: (query)  (optional)
     - parameter comAdobeCqSocialCqSocialScoringImpl: (query)  (optional)
     - parameter comAdobeCqSocialCqSocialServiceusersImpl: (query)  (optional)
     - parameter comAdobeCqSocialCqSocialSrpImpl: (query)  (optional)
     - parameter comAdobeCqSocialCqSocialUgcbaseImpl: (query)  (optional)
     - parameter comAdobeDamCqDamCfmImpl: (query)  (optional)
     - parameter comAdobeFormsFoundationFormsFoundationBase: (query)  (optional)
     - parameter comAdobeGraniteApicontroller: (query)  (optional)
     - parameter comAdobeGraniteAssetCore: (query)  (optional)
     - parameter comAdobeGraniteAuthSso: (query)  (optional)
     - parameter comAdobeGraniteBundlesHcImpl: (query)  (optional)
     - parameter comAdobeGraniteCompatRouter: (query)  (optional)
     - parameter comAdobeGraniteConf: (query)  (optional)
     - parameter comAdobeGraniteConfUiCore: (query)  (optional)
     - parameter comAdobeGraniteCors: (query)  (optional)
     - parameter comAdobeGraniteCrxExplorer: (query)  (optional)
     - parameter comAdobeGraniteCrxdeLite: (query)  (optional)
     - parameter comAdobeGraniteCryptoConfig: (query)  (optional)
     - parameter comAdobeGraniteCryptoExtension: (query)  (optional)
     - parameter comAdobeGraniteCryptoFile: (query)  (optional)
     - parameter comAdobeGraniteCryptoJcr: (query)  (optional)
     - parameter comAdobeGraniteCsrf: (query)  (optional)
     - parameter comAdobeGraniteDistributionCore: (query)  (optional)
     - parameter comAdobeGraniteDropwizardMetrics: (query)  (optional)
     - parameter comAdobeGraniteFragsImpl: (query)  (optional)
     - parameter comAdobeGraniteGibson: (query)  (optional)
     - parameter comAdobeGraniteInfocollector: (query)  (optional)
     - parameter comAdobeGraniteInstallerFactoryPackages: (query)  (optional)
     - parameter comAdobeGraniteJettySsl: (query)  (optional)
     - parameter comAdobeGraniteJobsAsync: (query)  (optional)
     - parameter comAdobeGraniteMaintenanceOak: (query)  (optional)
     - parameter comAdobeGraniteMonitoringCore: (query)  (optional)
     - parameter comAdobeGraniteQueries: (query)  (optional)
     - parameter comAdobeGraniteReplicationHcImpl: (query)  (optional)
     - parameter comAdobeGraniteRepositoryChecker: (query)  (optional)
     - parameter comAdobeGraniteRepositoryHcImpl: (query)  (optional)
     - parameter comAdobeGraniteRestAssets: (query)  (optional)
     - parameter comAdobeGraniteSecurityUi: (query)  (optional)
     - parameter comAdobeGraniteStartup: (query)  (optional)
     - parameter comAdobeGraniteTagsoup: (query)  (optional)
     - parameter comAdobeGraniteTaskmanagementCore: (query)  (optional)
     - parameter comAdobeGraniteTaskmanagementWorkflow: (query)  (optional)
     - parameter comAdobeGraniteUiClientlibsCompilerLess: (query)  (optional)
     - parameter comAdobeGraniteUiClientlibsProcessorGcc: (query)  (optional)
     - parameter comAdobeGraniteWebconsolePlugins: (query)  (optional)
     - parameter comAdobeGraniteWorkflowConsole: (query)  (optional)
     - parameter comAdobeXmpWorkerFilesNativeFragmentLinux: (query)  (optional)
     - parameter comAdobeXmpWorkerFilesNativeFragmentMacosx: (query)  (optional)
     - parameter comAdobeXmpWorkerFilesNativeFragmentWin: (query)  (optional)
     - parameter comDayCommonsOsgiWrapperSimpleJndi: (query)  (optional)
     - parameter comDayCqCqAuthhandler: (query)  (optional)
     - parameter comDayCqCqCompatConfigupdate: (query)  (optional)
     - parameter comDayCqCqLicensebranding: (query)  (optional)
     - parameter comDayCqCqNotifcationImpl: (query)  (optional)
     - parameter comDayCqCqReplicationAudit: (query)  (optional)
     - parameter comDayCqCqSearchExt: (query)  (optional)
     - parameter comDayCqDamCqDamAnnotationPrint: (query)  (optional)
     - parameter comDayCqDamCqDamAssetUsage: (query)  (optional)
     - parameter comDayCqDamCqDamS7dam: (query)  (optional)
     - parameter comDayCqDamCqDamSimilaritysearch: (query)  (optional)
     - parameter comDayCqDamDamWebdavSupport: (query)  (optional)
     - parameter comDayCqPreUpgradeTasks: (query)  (optional)
     - parameter comDayCqReplicationExtensions: (query)  (optional)
     - parameter comDayCqWcmCqMsmCore: (query)  (optional)
     - parameter comDayCqWcmCqWcmTranslation: (query)  (optional)
     - parameter dayCommonsJrawio: (query)  (optional)
     - parameter orgApacheAriesJmxWhiteboard: (query)  (optional)
     - parameter orgApacheFelixHttpSslfilter: (query)  (optional)
     - parameter orgApacheFelixOrgApacheFelixThreaddump: (query)  (optional)
     - parameter orgApacheFelixWebconsolePluginsDs: (query)  (optional)
     - parameter orgApacheFelixWebconsolePluginsEvent: (query)  (optional)
     - parameter orgApacheFelixWebconsolePluginsMemoryusage: (query)  (optional)
     - parameter orgApacheFelixWebconsolePluginsPackageadmin: (query)  (optional)
     - parameter orgApacheJackrabbitOakAuthLdap: (query)  (optional)
     - parameter orgApacheJackrabbitOakSegmentTar: (query)  (optional)
     - parameter orgApacheJackrabbitOakSolrOsgi: (query)  (optional)
     - parameter orgApacheSlingBundleresourceImpl: (query)  (optional)
     - parameter orgApacheSlingCommonsFsclassloader: (query)  (optional)
     - parameter orgApacheSlingCommonsLogWebconsole: (query)  (optional)
     - parameter orgApacheSlingDatasource: (query)  (optional)
     - parameter orgApacheSlingDiscoveryBase: (query)  (optional)
     - parameter orgApacheSlingDiscoveryOak: (query)  (optional)
     - parameter orgApacheSlingDiscoverySupport: (query)  (optional)
     - parameter orgApacheSlingDistributionApi: (query)  (optional)
     - parameter orgApacheSlingDistributionCore: (query)  (optional)
     - parameter orgApacheSlingExtensionsWebconsolesecurityprovider: (query)  (optional)
     - parameter orgApacheSlingHcWebconsole: (query)  (optional)
     - parameter orgApacheSlingInstallerConsole: (query)  (optional)
     - parameter orgApacheSlingInstallerProviderFile: (query)  (optional)
     - parameter orgApacheSlingInstallerProviderJcr: (query)  (optional)
     - parameter orgApacheSlingJcrDavex: (query)  (optional)
     - parameter orgApacheSlingJcrResourcesecurity: (query)  (optional)
     - parameter orgApacheSlingJmxProvider: (query)  (optional)
     - parameter orgApacheSlingLaunchpadInstaller: (query)  (optional)
     - parameter orgApacheSlingModelsImpl: (query)  (optional)
     - parameter orgApacheSlingRepoinitParser: (query)  (optional)
     - parameter orgApacheSlingResourceInventory: (query)  (optional)
     - parameter orgApacheSlingResourceresolver: (query)  (optional)
     - parameter orgApacheSlingScriptingJavascript: (query)  (optional)
     - parameter orgApacheSlingScriptingJst: (query)  (optional)
     - parameter orgApacheSlingScriptingSightlyJsProvider: (query)  (optional)
     - parameter orgApacheSlingScriptingSightlyModelsProvider: (query)  (optional)
     - parameter orgApacheSlingSecurity: (query)  (optional)
     - parameter orgApacheSlingServletsCompat: (query)  (optional)
     - parameter orgApacheSlingServletsGet: (query)  (optional)
     - parameter orgApacheSlingStartupfilterDisabler: (query)  (optional)
     - parameter orgApacheSlingTracer: (query)  (optional)
     - parameter weRetailClientAppCore: (query)  (optional)

     - returns: RequestBuilder<ComAdobeGraniteApicontrollerFilterResolverHookFactoryInfo> 
     */
    public class func comAdobeGraniteApicontrollerFilterResolverHookFactoryWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, comAdobeCqCdnCdnRewriter: String? = nil, comAdobeCqCloudConfigComponents: String? = nil, comAdobeCqCloudConfigCore: String? = nil, comAdobeCqCloudConfigUi: String? = nil, comAdobeCqComAdobeCqEditor: String? = nil, comAdobeCqComAdobeCqProjectsCore: String? = nil, comAdobeCqComAdobeCqProjectsWcmCore: String? = nil, comAdobeCqComAdobeCqUiCommons: String? = nil, comAdobeCqComAdobeCqWcmStyle: String? = nil, comAdobeCqCqActivitymapIntegration: String? = nil, comAdobeCqCqContexthubCommons: String? = nil, comAdobeCqCqDtm: String? = nil, comAdobeCqCqHealthcheck: String? = nil, comAdobeCqCqMultisiteTargeting: String? = nil, comAdobeCqCqPreUpgradeCleanup: String? = nil, comAdobeCqCqProductInfoProvider: String? = nil, comAdobeCqCqRestSites: String? = nil, comAdobeCqCqSecurityHc: String? = nil, comAdobeCqDamCqDamSvgHandler: String? = nil, comAdobeCqDamCqScene7Imaging: String? = nil, comAdobeCqDtmReactorCore: String? = nil, comAdobeCqDtmReactorUi: String? = nil, comAdobeCqExpJspelResolver: String? = nil, comAdobeCqInboxCqInbox: String? = nil, comAdobeCqJsonSchemaParser: String? = nil, comAdobeCqMediaCqMediaPublishingDpsFpCore: String? = nil, comAdobeCqMobileCqMobileCaas: String? = nil, comAdobeCqMobileCqMobileIndexBuilder: String? = nil, comAdobeCqMobileCqMobilePhonegapBuild: String? = nil, comAdobeCqMyspell: String? = nil, comAdobeCqSampleWeRetailCore: String? = nil, comAdobeCqScreensComAdobeCqScreensDcc: String? = nil, comAdobeCqScreensComAdobeCqScreensMqCore: String? = nil, comAdobeCqSocialCqSocialAsProvider: String? = nil, comAdobeCqSocialCqSocialBadgingBasicImpl: String? = nil, comAdobeCqSocialCqSocialBadgingImpl: String? = nil, comAdobeCqSocialCqSocialCalendarImpl: String? = nil, comAdobeCqSocialCqSocialContentFragmentsImpl: String? = nil, comAdobeCqSocialCqSocialEnablementImpl: String? = nil, comAdobeCqSocialCqSocialGraphImpl: String? = nil, comAdobeCqSocialCqSocialIdeationImpl: String? = nil, comAdobeCqSocialCqSocialJcrProvider: String? = nil, comAdobeCqSocialCqSocialMembersImpl: String? = nil, comAdobeCqSocialCqSocialMsProvider: String? = nil, comAdobeCqSocialCqSocialNotificationsChannelsWeb: String? = nil, comAdobeCqSocialCqSocialNotificationsImpl: String? = nil, comAdobeCqSocialCqSocialRdbProvider: String? = nil, comAdobeCqSocialCqSocialScfImpl: String? = nil, comAdobeCqSocialCqSocialScoringBasicImpl: String? = nil, comAdobeCqSocialCqSocialScoringImpl: String? = nil, comAdobeCqSocialCqSocialServiceusersImpl: String? = nil, comAdobeCqSocialCqSocialSrpImpl: String? = nil, comAdobeCqSocialCqSocialUgcbaseImpl: String? = nil, comAdobeDamCqDamCfmImpl: String? = nil, comAdobeFormsFoundationFormsFoundationBase: String? = nil, comAdobeGraniteApicontroller: String? = nil, comAdobeGraniteAssetCore: String? = nil, comAdobeGraniteAuthSso: String? = nil, comAdobeGraniteBundlesHcImpl: String? = nil, comAdobeGraniteCompatRouter: String? = nil, comAdobeGraniteConf: String? = nil, comAdobeGraniteConfUiCore: String? = nil, comAdobeGraniteCors: String? = nil, comAdobeGraniteCrxExplorer: String? = nil, comAdobeGraniteCrxdeLite: String? = nil, comAdobeGraniteCryptoConfig: String? = nil, comAdobeGraniteCryptoExtension: String? = nil, comAdobeGraniteCryptoFile: String? = nil, comAdobeGraniteCryptoJcr: String? = nil, comAdobeGraniteCsrf: String? = nil, comAdobeGraniteDistributionCore: String? = nil, comAdobeGraniteDropwizardMetrics: String? = nil, comAdobeGraniteFragsImpl: String? = nil, comAdobeGraniteGibson: String? = nil, comAdobeGraniteInfocollector: String? = nil, comAdobeGraniteInstallerFactoryPackages: String? = nil, comAdobeGraniteJettySsl: String? = nil, comAdobeGraniteJobsAsync: String? = nil, comAdobeGraniteMaintenanceOak: String? = nil, comAdobeGraniteMonitoringCore: String? = nil, comAdobeGraniteQueries: String? = nil, comAdobeGraniteReplicationHcImpl: String? = nil, comAdobeGraniteRepositoryChecker: String? = nil, comAdobeGraniteRepositoryHcImpl: String? = nil, comAdobeGraniteRestAssets: String? = nil, comAdobeGraniteSecurityUi: String? = nil, comAdobeGraniteStartup: String? = nil, comAdobeGraniteTagsoup: String? = nil, comAdobeGraniteTaskmanagementCore: String? = nil, comAdobeGraniteTaskmanagementWorkflow: String? = nil, comAdobeGraniteUiClientlibsCompilerLess: String? = nil, comAdobeGraniteUiClientlibsProcessorGcc: String? = nil, comAdobeGraniteWebconsolePlugins: String? = nil, comAdobeGraniteWorkflowConsole: String? = nil, comAdobeXmpWorkerFilesNativeFragmentLinux: String? = nil, comAdobeXmpWorkerFilesNativeFragmentMacosx: String? = nil, comAdobeXmpWorkerFilesNativeFragmentWin: String? = nil, comDayCommonsOsgiWrapperSimpleJndi: String? = nil, comDayCqCqAuthhandler: String? = nil, comDayCqCqCompatConfigupdate: String? = nil, comDayCqCqLicensebranding: String? = nil, comDayCqCqNotifcationImpl: String? = nil, comDayCqCqReplicationAudit: String? = nil, comDayCqCqSearchExt: String? = nil, comDayCqDamCqDamAnnotationPrint: String? = nil, comDayCqDamCqDamAssetUsage: String? = nil, comDayCqDamCqDamS7dam: String? = nil, comDayCqDamCqDamSimilaritysearch: String? = nil, comDayCqDamDamWebdavSupport: String? = nil, comDayCqPreUpgradeTasks: String? = nil, comDayCqReplicationExtensions: String? = nil, comDayCqWcmCqMsmCore: String? = nil, comDayCqWcmCqWcmTranslation: String? = nil, dayCommonsJrawio: String? = nil, orgApacheAriesJmxWhiteboard: String? = nil, orgApacheFelixHttpSslfilter: String? = nil, orgApacheFelixOrgApacheFelixThreaddump: String? = nil, orgApacheFelixWebconsolePluginsDs: String? = nil, orgApacheFelixWebconsolePluginsEvent: String? = nil, orgApacheFelixWebconsolePluginsMemoryusage: String? = nil, orgApacheFelixWebconsolePluginsPackageadmin: String? = nil, orgApacheJackrabbitOakAuthLdap: String? = nil, orgApacheJackrabbitOakSegmentTar: String? = nil, orgApacheJackrabbitOakSolrOsgi: String? = nil, orgApacheSlingBundleresourceImpl: String? = nil, orgApacheSlingCommonsFsclassloader: String? = nil, orgApacheSlingCommonsLogWebconsole: String? = nil, orgApacheSlingDatasource: String? = nil, orgApacheSlingDiscoveryBase: String? = nil, orgApacheSlingDiscoveryOak: String? = nil, orgApacheSlingDiscoverySupport: String? = nil, orgApacheSlingDistributionApi: String? = nil, orgApacheSlingDistributionCore: String? = nil, orgApacheSlingExtensionsWebconsolesecurityprovider: String? = nil, orgApacheSlingHcWebconsole: String? = nil, orgApacheSlingInstallerConsole: String? = nil, orgApacheSlingInstallerProviderFile: String? = nil, orgApacheSlingInstallerProviderJcr: String? = nil, orgApacheSlingJcrDavex: String? = nil, orgApacheSlingJcrResourcesecurity: String? = nil, orgApacheSlingJmxProvider: String? = nil, orgApacheSlingLaunchpadInstaller: String? = nil, orgApacheSlingModelsImpl: String? = nil, orgApacheSlingRepoinitParser: String? = nil, orgApacheSlingResourceInventory: String? = nil, orgApacheSlingResourceresolver: String? = nil, orgApacheSlingScriptingJavascript: String? = nil, orgApacheSlingScriptingJst: String? = nil, orgApacheSlingScriptingSightlyJsProvider: String? = nil, orgApacheSlingScriptingSightlyModelsProvider: String? = nil, orgApacheSlingSecurity: String? = nil, orgApacheSlingServletsCompat: String? = nil, orgApacheSlingServletsGet: String? = nil, orgApacheSlingStartupfilterDisabler: String? = nil, orgApacheSlingTracer: String? = nil, weRetailClientAppCore: String? = nil) -> RequestBuilder<ComAdobeGraniteApicontrollerFilterResolverHookFactoryInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.apicontroller.FilterResolverHookFactory"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "com.adobe.cq.cdn.cdn-rewriter": comAdobeCqCdnCdnRewriter,
            "com.adobe.cq.cloud-config.components": comAdobeCqCloudConfigComponents,
            "com.adobe.cq.cloud-config.core": comAdobeCqCloudConfigCore,
            "com.adobe.cq.cloud-config.ui": comAdobeCqCloudConfigUi,
            "com.adobe.cq.com.adobe.cq.editor": comAdobeCqComAdobeCqEditor,
            "com.adobe.cq.com.adobe.cq.projects.core": comAdobeCqComAdobeCqProjectsCore,
            "com.adobe.cq.com.adobe.cq.projects.wcm.core": comAdobeCqComAdobeCqProjectsWcmCore,
            "com.adobe.cq.com.adobe.cq.ui.commons": comAdobeCqComAdobeCqUiCommons,
            "com.adobe.cq.com.adobe.cq.wcm.style": comAdobeCqComAdobeCqWcmStyle,
            "com.adobe.cq.cq-activitymap-integration": comAdobeCqCqActivitymapIntegration,
            "com.adobe.cq.cq-contexthub-commons": comAdobeCqCqContexthubCommons,
            "com.adobe.cq.cq-dtm": comAdobeCqCqDtm,
            "com.adobe.cq.cq-healthcheck": comAdobeCqCqHealthcheck,
            "com.adobe.cq.cq-multisite-targeting": comAdobeCqCqMultisiteTargeting,
            "com.adobe.cq.cq-pre-upgrade-cleanup": comAdobeCqCqPreUpgradeCleanup,
            "com.adobe.cq.cq-product-info-provider": comAdobeCqCqProductInfoProvider,
            "com.adobe.cq.cq-rest-sites": comAdobeCqCqRestSites,
            "com.adobe.cq.cq-security-hc": comAdobeCqCqSecurityHc,
            "com.adobe.cq.dam.cq-dam-svg-handler": comAdobeCqDamCqDamSvgHandler,
            "com.adobe.cq.dam.cq-scene7-imaging": comAdobeCqDamCqScene7Imaging,
            "com.adobe.cq.dtm-reactor.core": comAdobeCqDtmReactorCore,
            "com.adobe.cq.dtm-reactor.ui": comAdobeCqDtmReactorUi,
            "com.adobe.cq.exp-jspel-resolver": comAdobeCqExpJspelResolver,
            "com.adobe.cq.inbox.cq-inbox": comAdobeCqInboxCqInbox,
            "com.adobe.cq.json-schema-parser": comAdobeCqJsonSchemaParser,
            "com.adobe.cq.media.cq-media-publishing-dps-fp-core": comAdobeCqMediaCqMediaPublishingDpsFpCore,
            "com.adobe.cq.mobile.cq-mobile-caas": comAdobeCqMobileCqMobileCaas,
            "com.adobe.cq.mobile.cq-mobile-index-builder": comAdobeCqMobileCqMobileIndexBuilder,
            "com.adobe.cq.mobile.cq-mobile-phonegap-build": comAdobeCqMobileCqMobilePhonegapBuild,
            "com.adobe.cq.myspell": comAdobeCqMyspell,
            "com.adobe.cq.sample.we.retail.core": comAdobeCqSampleWeRetailCore,
            "com.adobe.cq.screens.com.adobe.cq.screens.dcc": comAdobeCqScreensComAdobeCqScreensDcc,
            "com.adobe.cq.screens.com.adobe.cq.screens.mq.core": comAdobeCqScreensComAdobeCqScreensMqCore,
            "com.adobe.cq.social.cq-social-as-provider": comAdobeCqSocialCqSocialAsProvider,
            "com.adobe.cq.social.cq-social-badging-basic-impl": comAdobeCqSocialCqSocialBadgingBasicImpl,
            "com.adobe.cq.social.cq-social-badging-impl": comAdobeCqSocialCqSocialBadgingImpl,
            "com.adobe.cq.social.cq-social-calendar-impl": comAdobeCqSocialCqSocialCalendarImpl,
            "com.adobe.cq.social.cq-social-content-fragments-impl": comAdobeCqSocialCqSocialContentFragmentsImpl,
            "com.adobe.cq.social.cq-social-enablement-impl": comAdobeCqSocialCqSocialEnablementImpl,
            "com.adobe.cq.social.cq-social-graph-impl": comAdobeCqSocialCqSocialGraphImpl,
            "com.adobe.cq.social.cq-social-ideation-impl": comAdobeCqSocialCqSocialIdeationImpl,
            "com.adobe.cq.social.cq-social-jcr-provider": comAdobeCqSocialCqSocialJcrProvider,
            "com.adobe.cq.social.cq-social-members-impl": comAdobeCqSocialCqSocialMembersImpl,
            "com.adobe.cq.social.cq-social-ms-provider": comAdobeCqSocialCqSocialMsProvider,
            "com.adobe.cq.social.cq-social-notifications-channels-web": comAdobeCqSocialCqSocialNotificationsChannelsWeb,
            "com.adobe.cq.social.cq-social-notifications-impl": comAdobeCqSocialCqSocialNotificationsImpl,
            "com.adobe.cq.social.cq-social-rdb-provider": comAdobeCqSocialCqSocialRdbProvider,
            "com.adobe.cq.social.cq-social-scf-impl": comAdobeCqSocialCqSocialScfImpl,
            "com.adobe.cq.social.cq-social-scoring-basic-impl": comAdobeCqSocialCqSocialScoringBasicImpl,
            "com.adobe.cq.social.cq-social-scoring-impl": comAdobeCqSocialCqSocialScoringImpl,
            "com.adobe.cq.social.cq-social-serviceusers-impl": comAdobeCqSocialCqSocialServiceusersImpl,
            "com.adobe.cq.social.cq-social-srp-impl": comAdobeCqSocialCqSocialSrpImpl,
            "com.adobe.cq.social.cq-social-ugcbase-impl": comAdobeCqSocialCqSocialUgcbaseImpl,
            "com.adobe.dam.cq-dam-cfm-impl": comAdobeDamCqDamCfmImpl,
            "com.adobe.forms.foundation-forms-foundation-base": comAdobeFormsFoundationFormsFoundationBase,
            "com.adobe.granite.apicontroller": comAdobeGraniteApicontroller,
            "com.adobe.granite.asset.core": comAdobeGraniteAssetCore,
            "com.adobe.granite.auth.sso": comAdobeGraniteAuthSso,
            "com.adobe.granite.bundles.hc.impl": comAdobeGraniteBundlesHcImpl,
            "com.adobe.granite.compat-router": comAdobeGraniteCompatRouter,
            "com.adobe.granite.conf": comAdobeGraniteConf,
            "com.adobe.granite.conf.ui.core": comAdobeGraniteConfUiCore,
            "com.adobe.granite.cors": comAdobeGraniteCors,
            "com.adobe.granite.crx-explorer": comAdobeGraniteCrxExplorer,
            "com.adobe.granite.crxde-lite": comAdobeGraniteCrxdeLite,
            "com.adobe.granite.crypto.config": comAdobeGraniteCryptoConfig,
            "com.adobe.granite.crypto.extension": comAdobeGraniteCryptoExtension,
            "com.adobe.granite.crypto.file": comAdobeGraniteCryptoFile,
            "com.adobe.granite.crypto.jcr": comAdobeGraniteCryptoJcr,
            "com.adobe.granite.csrf": comAdobeGraniteCsrf,
            "com.adobe.granite.distribution.core": comAdobeGraniteDistributionCore,
            "com.adobe.granite.dropwizard.metrics": comAdobeGraniteDropwizardMetrics,
            "com.adobe.granite.frags.impl": comAdobeGraniteFragsImpl,
            "com.adobe.granite.gibson": comAdobeGraniteGibson,
            "com.adobe.granite.infocollector": comAdobeGraniteInfocollector,
            "com.adobe.granite.installer.factory.packages": comAdobeGraniteInstallerFactoryPackages,
            "com.adobe.granite.jetty.ssl": comAdobeGraniteJettySsl,
            "com.adobe.granite.jobs.async": comAdobeGraniteJobsAsync,
            "com.adobe.granite.maintenance.oak": comAdobeGraniteMaintenanceOak,
            "com.adobe.granite.monitoring.core": comAdobeGraniteMonitoringCore,
            "com.adobe.granite.queries": comAdobeGraniteQueries,
            "com.adobe.granite.replication.hc.impl": comAdobeGraniteReplicationHcImpl,
            "com.adobe.granite.repository.checker": comAdobeGraniteRepositoryChecker,
            "com.adobe.granite.repository.hc.impl": comAdobeGraniteRepositoryHcImpl,
            "com.adobe.granite.rest.assets": comAdobeGraniteRestAssets,
            "com.adobe.granite.security.ui": comAdobeGraniteSecurityUi,
            "com.adobe.granite.startup": comAdobeGraniteStartup,
            "com.adobe.granite.tagsoup": comAdobeGraniteTagsoup,
            "com.adobe.granite.taskmanagement.core": comAdobeGraniteTaskmanagementCore,
            "com.adobe.granite.taskmanagement.workflow": comAdobeGraniteTaskmanagementWorkflow,
            "com.adobe.granite.ui.clientlibs.compiler.less": comAdobeGraniteUiClientlibsCompilerLess,
            "com.adobe.granite.ui.clientlibs.processor.gcc": comAdobeGraniteUiClientlibsProcessorGcc,
            "com.adobe.granite.webconsole.plugins": comAdobeGraniteWebconsolePlugins,
            "com.adobe.granite.workflow.console": comAdobeGraniteWorkflowConsole,
            "com.adobe.xmp.worker.files.native.fragment.linux": comAdobeXmpWorkerFilesNativeFragmentLinux,
            "com.adobe.xmp.worker.files.native.fragment.macosx": comAdobeXmpWorkerFilesNativeFragmentMacosx,
            "com.adobe.xmp.worker.files.native.fragment.win": comAdobeXmpWorkerFilesNativeFragmentWin,
            "com.day.commons.osgi.wrapper.simple-jndi": comDayCommonsOsgiWrapperSimpleJndi,
            "com.day.cq.cq-authhandler": comDayCqCqAuthhandler,
            "com.day.cq.cq-compat-configupdate": comDayCqCqCompatConfigupdate,
            "com.day.cq.cq-licensebranding": comDayCqCqLicensebranding,
            "com.day.cq.cq-notifcation-impl": comDayCqCqNotifcationImpl,
            "com.day.cq.cq-replication-audit": comDayCqCqReplicationAudit,
            "com.day.cq.cq-search-ext": comDayCqCqSearchExt,
            "com.day.cq.dam.cq-dam-annotation-print": comDayCqDamCqDamAnnotationPrint,
            "com.day.cq.dam.cq-dam-asset-usage": comDayCqDamCqDamAssetUsage,
            "com.day.cq.dam.cq-dam-s7dam": comDayCqDamCqDamS7dam,
            "com.day.cq.dam.cq-dam-similaritysearch": comDayCqDamCqDamSimilaritysearch,
            "com.day.cq.dam.dam-webdav-support": comDayCqDamDamWebdavSupport,
            "com.day.cq.pre-upgrade-tasks": comDayCqPreUpgradeTasks,
            "com.day.cq.replication.extensions": comDayCqReplicationExtensions,
            "com.day.cq.wcm.cq-msm-core": comDayCqWcmCqMsmCore,
            "com.day.cq.wcm.cq-wcm-translation": comDayCqWcmCqWcmTranslation,
            "day-commons-jrawio": dayCommonsJrawio,
            "org.apache.aries.jmx.whiteboard": orgApacheAriesJmxWhiteboard,
            "org.apache.felix.http.sslfilter": orgApacheFelixHttpSslfilter,
            "org.apache.felix.org.apache.felix.threaddump": orgApacheFelixOrgApacheFelixThreaddump,
            "org.apache.felix.webconsole.plugins.ds": orgApacheFelixWebconsolePluginsDs,
            "org.apache.felix.webconsole.plugins.event": orgApacheFelixWebconsolePluginsEvent,
            "org.apache.felix.webconsole.plugins.memoryusage": orgApacheFelixWebconsolePluginsMemoryusage,
            "org.apache.felix.webconsole.plugins.packageadmin": orgApacheFelixWebconsolePluginsPackageadmin,
            "org.apache.jackrabbit.oak-auth-ldap": orgApacheJackrabbitOakAuthLdap,
            "org.apache.jackrabbit.oak-segment-tar": orgApacheJackrabbitOakSegmentTar,
            "org.apache.jackrabbit.oak-solr-osgi": orgApacheJackrabbitOakSolrOsgi,
            "org.apache.sling.bundleresource.impl": orgApacheSlingBundleresourceImpl,
            "org.apache.sling.commons.fsclassloader": orgApacheSlingCommonsFsclassloader,
            "org.apache.sling.commons.log.webconsole": orgApacheSlingCommonsLogWebconsole,
            "org.apache.sling.datasource": orgApacheSlingDatasource,
            "org.apache.sling.discovery.base": orgApacheSlingDiscoveryBase,
            "org.apache.sling.discovery.oak": orgApacheSlingDiscoveryOak,
            "org.apache.sling.discovery.support": orgApacheSlingDiscoverySupport,
            "org.apache.sling.distribution.api": orgApacheSlingDistributionApi,
            "org.apache.sling.distribution.core": orgApacheSlingDistributionCore,
            "org.apache.sling.extensions.webconsolesecurityprovider": orgApacheSlingExtensionsWebconsolesecurityprovider,
            "org.apache.sling.hc.webconsole": orgApacheSlingHcWebconsole,
            "org.apache.sling.installer.console": orgApacheSlingInstallerConsole,
            "org.apache.sling.installer.provider.file": orgApacheSlingInstallerProviderFile,
            "org.apache.sling.installer.provider.jcr": orgApacheSlingInstallerProviderJcr,
            "org.apache.sling.jcr.davex": orgApacheSlingJcrDavex,
            "org.apache.sling.jcr.resourcesecurity": orgApacheSlingJcrResourcesecurity,
            "org.apache.sling.jmx.provider": orgApacheSlingJmxProvider,
            "org.apache.sling.launchpad.installer": orgApacheSlingLaunchpadInstaller,
            "org.apache.sling.models.impl": orgApacheSlingModelsImpl,
            "org.apache.sling.repoinit.parser": orgApacheSlingRepoinitParser,
            "org.apache.sling.resource.inventory": orgApacheSlingResourceInventory,
            "org.apache.sling.resourceresolver": orgApacheSlingResourceresolver,
            "org.apache.sling.scripting.javascript": orgApacheSlingScriptingJavascript,
            "org.apache.sling.scripting.jst": orgApacheSlingScriptingJst,
            "org.apache.sling.scripting.sightly.js.provider": orgApacheSlingScriptingSightlyJsProvider,
            "org.apache.sling.scripting.sightly.models.provider": orgApacheSlingScriptingSightlyModelsProvider,
            "org.apache.sling.security": orgApacheSlingSecurity,
            "org.apache.sling.servlets.compat": orgApacheSlingServletsCompat,
            "org.apache.sling.servlets.get": orgApacheSlingServletsGet,
            "org.apache.sling.startupfilter.disabler": orgApacheSlingStartupfilterDisabler,
            "org.apache.sling.tracer": orgApacheSlingTracer,
            "we.retail.client.app.core": weRetailClientAppCore
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeGraniteApicontrollerFilterResolverHookFactoryInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter path: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeGraniteAuthCertImplClientCertAuthHandler(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, path: String? = nil, serviceRanking: Int32? = nil, completion: ((data: ComAdobeGraniteAuthCertImplClientCertAuthHandlerInfo?, error: ErrorType?) -> Void)) {
        comAdobeGraniteAuthCertImplClientCertAuthHandlerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, path: path, serviceRanking: serviceRanking).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.auth.cert.impl.ClientCertAuthHandler     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "path" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "service.ranking" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter path: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)

     - returns: RequestBuilder<ComAdobeGraniteAuthCertImplClientCertAuthHandlerInfo> 
     */
    public class func comAdobeGraniteAuthCertImplClientCertAuthHandlerWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, path: String? = nil, serviceRanking: Int32? = nil) -> RequestBuilder<ComAdobeGraniteAuthCertImplClientCertAuthHandlerInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.auth.cert.impl.ClientCertAuthHandler"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "path": path,
            "service.ranking": serviceRanking?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeGraniteAuthCertImplClientCertAuthHandlerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter configid: (query)  (optional)
     - parameter scope: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeGraniteAuthIms(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, configid: String? = nil, scope: String? = nil, completion: ((data: ComAdobeGraniteAuthImsInfo?, error: ErrorType?) -> Void)) {
        comAdobeGraniteAuthImsWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, configid: configid, scope: scope).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.auth.ims     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "service_location" : "service_location",
  "bundle_location" : "bundle_location",
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "configid" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "scope" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter configid: (query)  (optional)
     - parameter scope: (query)  (optional)

     - returns: RequestBuilder<ComAdobeGraniteAuthImsInfo> 
     */
    public class func comAdobeGraniteAuthImsWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, configid: String? = nil, scope: String? = nil) -> RequestBuilder<ComAdobeGraniteAuthImsInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.auth.ims"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "configid": configid,
            "scope": scope
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeGraniteAuthImsInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter oauthProviderId: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtension(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, oauthProviderId: String? = nil, completion: ((data: ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionInfo?, error: ErrorType?) -> Void)) {
        comAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, oauthProviderId: oauthProviderId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.auth.ims.impl.ExternalUserIdMappingProviderExtension     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "oauth.provider.id" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter oauthProviderId: (query)  (optional)

     - returns: RequestBuilder<ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionInfo> 
     */
    public class func comAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, oauthProviderId: String? = nil) -> RequestBuilder<ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.auth.ims.impl.ExternalUserIdMappingProviderExtension"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "oauth.provider.id": oauthProviderId
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter authImsClientSecret: (query)  (optional)
     - parameter customizerType: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, authImsClientSecret: String? = nil, customizerType: String? = nil, completion: ((data: ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplInfo?, error: ErrorType?) -> Void)) {
        comAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, authImsClientSecret: authImsClientSecret, customizerType: customizerType).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.auth.ims.impl.IMSAccessTokenRequestCustomizerImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "auth.ims.client.secret" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "customizer.type" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter authImsClientSecret: (query)  (optional)
     - parameter customizerType: (query)  (optional)

     - returns: RequestBuilder<ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplInfo> 
     */
    public class func comAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, authImsClientSecret: String? = nil, customizerType: String? = nil) -> RequestBuilder<ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.auth.ims.impl.IMSAccessTokenRequestCustomizerImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "auth.ims.client.secret": authImsClientSecret,
            "customizer.type": customizerType
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter oauthProviderId: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeGraniteAuthImsImplIMSInstanceCredentialsValidator(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, oauthProviderId: String? = nil, completion: ((data: ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorInfo?, error: ErrorType?) -> Void)) {
        comAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, oauthProviderId: oauthProviderId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.auth.ims.impl.IMSInstanceCredentialsValidator     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "oauth.provider.id" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter oauthProviderId: (query)  (optional)

     - returns: RequestBuilder<ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorInfo> 
     */
    public class func comAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, oauthProviderId: String? = nil) -> RequestBuilder<ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.auth.ims.impl.IMSInstanceCredentialsValidator"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "oauth.provider.id": oauthProviderId
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter oauthProviderId: (query)  (optional)
     - parameter oauthProviderImsAuthorizationUrl: (query)  (optional)
     - parameter oauthProviderImsTokenUrl: (query)  (optional)
     - parameter oauthProviderImsProfileUrl: (query)  (optional)
     - parameter oauthProviderImsExtendedDetailsUrls: (query)  (optional)
     - parameter oauthProviderImsValidateTokenUrl: (query)  (optional)
     - parameter oauthProviderImsSessionProperty: (query)  (optional)
     - parameter oauthProviderImsServiceTokenClientId: (query)  (optional)
     - parameter oauthProviderImsServiceTokenClientSecret: (query)  (optional)
     - parameter oauthProviderImsServiceToken: (query)  (optional)
     - parameter imsOrgRef: (query)  (optional)
     - parameter imsGroupMapping: (query)  (optional)
     - parameter oauthProviderImsOnlyLicenseGroup: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeGraniteAuthImsImplIMSProviderImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, oauthProviderId: String? = nil, oauthProviderImsAuthorizationUrl: String? = nil, oauthProviderImsTokenUrl: String? = nil, oauthProviderImsProfileUrl: String? = nil, oauthProviderImsExtendedDetailsUrls: [String]? = nil, oauthProviderImsValidateTokenUrl: String? = nil, oauthProviderImsSessionProperty: String? = nil, oauthProviderImsServiceTokenClientId: String? = nil, oauthProviderImsServiceTokenClientSecret: String? = nil, oauthProviderImsServiceToken: String? = nil, imsOrgRef: String? = nil, imsGroupMapping: [String]? = nil, oauthProviderImsOnlyLicenseGroup: Bool? = nil, completion: ((data: ComAdobeGraniteAuthImsImplIMSProviderImplInfo?, error: ErrorType?) -> Void)) {
        comAdobeGraniteAuthImsImplIMSProviderImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, oauthProviderId: oauthProviderId, oauthProviderImsAuthorizationUrl: oauthProviderImsAuthorizationUrl, oauthProviderImsTokenUrl: oauthProviderImsTokenUrl, oauthProviderImsProfileUrl: oauthProviderImsProfileUrl, oauthProviderImsExtendedDetailsUrls: oauthProviderImsExtendedDetailsUrls, oauthProviderImsValidateTokenUrl: oauthProviderImsValidateTokenUrl, oauthProviderImsSessionProperty: oauthProviderImsSessionProperty, oauthProviderImsServiceTokenClientId: oauthProviderImsServiceTokenClientId, oauthProviderImsServiceTokenClientSecret: oauthProviderImsServiceTokenClientSecret, oauthProviderImsServiceToken: oauthProviderImsServiceToken, imsOrgRef: imsOrgRef, imsGroupMapping: imsGroupMapping, oauthProviderImsOnlyLicenseGroup: oauthProviderImsOnlyLicenseGroup).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.auth.ims.impl.IMSProviderImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "oauth.provider.ims.session.property" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "oauth.provider.ims.extended.details.urls" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "oauth.provider.ims.validate.token.url" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "oauth.provider.id" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "oauth.provider.ims.only.license.group" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "oauth.provider.ims.authorization.url" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "oauth.provider.ims.service.token.client.secret" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "ims.org.ref" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "oauth.provider.ims.profile.url" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "oauth.provider.ims.service.token" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "ims.group.mapping" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "oauth.provider.ims.service.token.client.id" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "oauth.provider.ims.token.url" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter oauthProviderId: (query)  (optional)
     - parameter oauthProviderImsAuthorizationUrl: (query)  (optional)
     - parameter oauthProviderImsTokenUrl: (query)  (optional)
     - parameter oauthProviderImsProfileUrl: (query)  (optional)
     - parameter oauthProviderImsExtendedDetailsUrls: (query)  (optional)
     - parameter oauthProviderImsValidateTokenUrl: (query)  (optional)
     - parameter oauthProviderImsSessionProperty: (query)  (optional)
     - parameter oauthProviderImsServiceTokenClientId: (query)  (optional)
     - parameter oauthProviderImsServiceTokenClientSecret: (query)  (optional)
     - parameter oauthProviderImsServiceToken: (query)  (optional)
     - parameter imsOrgRef: (query)  (optional)
     - parameter imsGroupMapping: (query)  (optional)
     - parameter oauthProviderImsOnlyLicenseGroup: (query)  (optional)

     - returns: RequestBuilder<ComAdobeGraniteAuthImsImplIMSProviderImplInfo> 
     */
    public class func comAdobeGraniteAuthImsImplIMSProviderImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, oauthProviderId: String? = nil, oauthProviderImsAuthorizationUrl: String? = nil, oauthProviderImsTokenUrl: String? = nil, oauthProviderImsProfileUrl: String? = nil, oauthProviderImsExtendedDetailsUrls: [String]? = nil, oauthProviderImsValidateTokenUrl: String? = nil, oauthProviderImsSessionProperty: String? = nil, oauthProviderImsServiceTokenClientId: String? = nil, oauthProviderImsServiceTokenClientSecret: String? = nil, oauthProviderImsServiceToken: String? = nil, imsOrgRef: String? = nil, imsGroupMapping: [String]? = nil, oauthProviderImsOnlyLicenseGroup: Bool? = nil) -> RequestBuilder<ComAdobeGraniteAuthImsImplIMSProviderImplInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.auth.ims.impl.IMSProviderImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "oauth.provider.id": oauthProviderId,
            "oauth.provider.ims.authorization.url": oauthProviderImsAuthorizationUrl,
            "oauth.provider.ims.token.url": oauthProviderImsTokenUrl,
            "oauth.provider.ims.profile.url": oauthProviderImsProfileUrl,
            "oauth.provider.ims.extended.details.urls": oauthProviderImsExtendedDetailsUrls,
            "oauth.provider.ims.validate.token.url": oauthProviderImsValidateTokenUrl,
            "oauth.provider.ims.session.property": oauthProviderImsSessionProperty,
            "oauth.provider.ims.service.token.client.id": oauthProviderImsServiceTokenClientId,
            "oauth.provider.ims.service.token.client.secret": oauthProviderImsServiceTokenClientSecret,
            "oauth.provider.ims.service.token": oauthProviderImsServiceToken,
            "ims.org.ref": imsOrgRef,
            "ims.group.mapping": imsGroupMapping,
            "oauth.provider.ims.only.license.group": oauthProviderImsOnlyLicenseGroup
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeGraniteAuthImsImplIMSProviderImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter oauthConfigmanagerImsConfigid: (query)  (optional)
     - parameter imsOwningEntity: (query)  (optional)
     - parameter aemInstanceId: (query)  (optional)
     - parameter imsServiceCode: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeGraniteAuthImsImplImsConfigProviderImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, oauthConfigmanagerImsConfigid: String? = nil, imsOwningEntity: String? = nil, aemInstanceId: String? = nil, imsServiceCode: String? = nil, completion: ((data: ComAdobeGraniteAuthImsImplImsConfigProviderImplInfo?, error: ErrorType?) -> Void)) {
        comAdobeGraniteAuthImsImplImsConfigProviderImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, oauthConfigmanagerImsConfigid: oauthConfigmanagerImsConfigid, imsOwningEntity: imsOwningEntity, aemInstanceId: aemInstanceId, imsServiceCode: imsServiceCode).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.auth.ims.impl.ImsConfigProviderImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "ims.owningEntity" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "oauth.configmanager.ims.configid" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "aem.instanceId" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "ims.serviceCode" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter oauthConfigmanagerImsConfigid: (query)  (optional)
     - parameter imsOwningEntity: (query)  (optional)
     - parameter aemInstanceId: (query)  (optional)
     - parameter imsServiceCode: (query)  (optional)

     - returns: RequestBuilder<ComAdobeGraniteAuthImsImplImsConfigProviderImplInfo> 
     */
    public class func comAdobeGraniteAuthImsImplImsConfigProviderImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, oauthConfigmanagerImsConfigid: String? = nil, imsOwningEntity: String? = nil, aemInstanceId: String? = nil, imsServiceCode: String? = nil) -> RequestBuilder<ComAdobeGraniteAuthImsImplImsConfigProviderImplInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.auth.ims.impl.ImsConfigProviderImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "oauth.configmanager.ims.configid": oauthConfigmanagerImsConfigid,
            "ims.owningEntity": imsOwningEntity,
            "aem.instanceId": aemInstanceId,
            "ims.serviceCode": imsServiceCode
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeGraniteAuthImsImplImsConfigProviderImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter authTokenProviderTitle: (query)  (optional)
     - parameter authTokenProviderDefaultClaims: (query)  (optional)
     - parameter authTokenProviderEndpoint: (query)  (optional)
     - parameter authAccessTokenRequest: (query)  (optional)
     - parameter authTokenProviderKeypairAlias: (query)  (optional)
     - parameter authTokenProviderConnTimeout: (query)  (optional)
     - parameter authTokenProviderSoTimeout: (query)  (optional)
     - parameter authTokenProviderClientId: (query)  (optional)
     - parameter authTokenProviderScope: (query)  (optional)
     - parameter authTokenProviderReuseAccessToken: (query)  (optional)
     - parameter authTokenProviderRelaxedSsl: (query)  (optional)
     - parameter tokenRequestCustomizerType: (query)  (optional)
     - parameter authTokenValidatorType: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeGraniteAuthOauthAccesstokenProvider(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, name: String? = nil, authTokenProviderTitle: String? = nil, authTokenProviderDefaultClaims: [String]? = nil, authTokenProviderEndpoint: String? = nil, authAccessTokenRequest: String? = nil, authTokenProviderKeypairAlias: String? = nil, authTokenProviderConnTimeout: Int32? = nil, authTokenProviderSoTimeout: Int32? = nil, authTokenProviderClientId: String? = nil, authTokenProviderScope: String? = nil, authTokenProviderReuseAccessToken: Bool? = nil, authTokenProviderRelaxedSsl: Bool? = nil, tokenRequestCustomizerType: String? = nil, authTokenValidatorType: String? = nil, completion: ((data: ComAdobeGraniteAuthOauthAccesstokenProviderInfo?, error: ErrorType?) -> Void)) {
        comAdobeGraniteAuthOauthAccesstokenProviderWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, name: name, authTokenProviderTitle: authTokenProviderTitle, authTokenProviderDefaultClaims: authTokenProviderDefaultClaims, authTokenProviderEndpoint: authTokenProviderEndpoint, authAccessTokenRequest: authAccessTokenRequest, authTokenProviderKeypairAlias: authTokenProviderKeypairAlias, authTokenProviderConnTimeout: authTokenProviderConnTimeout, authTokenProviderSoTimeout: authTokenProviderSoTimeout, authTokenProviderClientId: authTokenProviderClientId, authTokenProviderScope: authTokenProviderScope, authTokenProviderReuseAccessToken: authTokenProviderReuseAccessToken, authTokenProviderRelaxedSsl: authTokenProviderRelaxedSsl, tokenRequestCustomizerType: tokenRequestCustomizerType, authTokenValidatorType: authTokenValidatorType).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.auth.oauth.accesstoken.provider     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "auth.token.provider.relaxed.ssl" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "auth.token.provider.conn.timeout" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "auth.token.provider.client.id" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "auth.token.provider.endpoint" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "token.request.customizer.type" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "auth.token.provider.default.claims" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "auth.token.validator.type" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "auth.token.provider.so.timeout" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "auth.token.provider.title" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "auth.access.token.request" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "auth.token.provider.keypair.alias" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "auth.token.provider.scope" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "auth.token.provider.reuse.access.token" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "name" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter authTokenProviderTitle: (query)  (optional)
     - parameter authTokenProviderDefaultClaims: (query)  (optional)
     - parameter authTokenProviderEndpoint: (query)  (optional)
     - parameter authAccessTokenRequest: (query)  (optional)
     - parameter authTokenProviderKeypairAlias: (query)  (optional)
     - parameter authTokenProviderConnTimeout: (query)  (optional)
     - parameter authTokenProviderSoTimeout: (query)  (optional)
     - parameter authTokenProviderClientId: (query)  (optional)
     - parameter authTokenProviderScope: (query)  (optional)
     - parameter authTokenProviderReuseAccessToken: (query)  (optional)
     - parameter authTokenProviderRelaxedSsl: (query)  (optional)
     - parameter tokenRequestCustomizerType: (query)  (optional)
     - parameter authTokenValidatorType: (query)  (optional)

     - returns: RequestBuilder<ComAdobeGraniteAuthOauthAccesstokenProviderInfo> 
     */
    public class func comAdobeGraniteAuthOauthAccesstokenProviderWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, name: String? = nil, authTokenProviderTitle: String? = nil, authTokenProviderDefaultClaims: [String]? = nil, authTokenProviderEndpoint: String? = nil, authAccessTokenRequest: String? = nil, authTokenProviderKeypairAlias: String? = nil, authTokenProviderConnTimeout: Int32? = nil, authTokenProviderSoTimeout: Int32? = nil, authTokenProviderClientId: String? = nil, authTokenProviderScope: String? = nil, authTokenProviderReuseAccessToken: Bool? = nil, authTokenProviderRelaxedSsl: Bool? = nil, tokenRequestCustomizerType: String? = nil, authTokenValidatorType: String? = nil) -> RequestBuilder<ComAdobeGraniteAuthOauthAccesstokenProviderInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.auth.oauth.accesstoken.provider"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "name": name,
            "auth.token.provider.title": authTokenProviderTitle,
            "auth.token.provider.default.claims": authTokenProviderDefaultClaims,
            "auth.token.provider.endpoint": authTokenProviderEndpoint,
            "auth.access.token.request": authAccessTokenRequest,
            "auth.token.provider.keypair.alias": authTokenProviderKeypairAlias,
            "auth.token.provider.conn.timeout": authTokenProviderConnTimeout?.encodeToJSON(),
            "auth.token.provider.so.timeout": authTokenProviderSoTimeout?.encodeToJSON(),
            "auth.token.provider.client.id": authTokenProviderClientId,
            "auth.token.provider.scope": authTokenProviderScope,
            "auth.token.provider.reuse.access.token": authTokenProviderReuseAccessToken,
            "auth.token.provider.relaxed.ssl": authTokenProviderRelaxedSsl,
            "token.request.customizer.type": tokenRequestCustomizerType,
            "auth.token.validator.type": authTokenValidatorType
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeGraniteAuthOauthAccesstokenProviderInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter path: (query)  (optional)
     - parameter oauthClientIdsAllowed: (query)  (optional)
     - parameter authBearerSyncIms: (query)  (optional)
     - parameter authTokenRequestParameter: (query)  (optional)
     - parameter oauthBearerConfigid: (query)  (optional)
     - parameter oauthJwtSupport: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeGraniteAuthOauthImplBearerAuthenticationHandler(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, path: String? = nil, oauthClientIdsAllowed: [String]? = nil, authBearerSyncIms: Bool? = nil, authTokenRequestParameter: String? = nil, oauthBearerConfigid: String? = nil, oauthJwtSupport: Bool? = nil, completion: ((data: ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerInfo?, error: ErrorType?) -> Void)) {
        comAdobeGraniteAuthOauthImplBearerAuthenticationHandlerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, path: path, oauthClientIdsAllowed: oauthClientIdsAllowed, authBearerSyncIms: authBearerSyncIms, authTokenRequestParameter: authTokenRequestParameter, oauthBearerConfigid: oauthBearerConfigid, oauthJwtSupport: oauthJwtSupport).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.auth.oauth.impl.BearerAuthenticationHandler     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "path" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "auth.bearer.sync.ims" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "auth.tokenRequestParameter" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "oauth.clientIds.allowed" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "oauth.jwt.support" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "oauth.bearer.configid" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter path: (query)  (optional)
     - parameter oauthClientIdsAllowed: (query)  (optional)
     - parameter authBearerSyncIms: (query)  (optional)
     - parameter authTokenRequestParameter: (query)  (optional)
     - parameter oauthBearerConfigid: (query)  (optional)
     - parameter oauthJwtSupport: (query)  (optional)

     - returns: RequestBuilder<ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerInfo> 
     */
    public class func comAdobeGraniteAuthOauthImplBearerAuthenticationHandlerWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, path: String? = nil, oauthClientIdsAllowed: [String]? = nil, authBearerSyncIms: Bool? = nil, authTokenRequestParameter: String? = nil, oauthBearerConfigid: String? = nil, oauthJwtSupport: Bool? = nil) -> RequestBuilder<ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.auth.oauth.impl.BearerAuthenticationHandler"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "path": path,
            "oauth.clientIds.allowed": oauthClientIdsAllowed,
            "auth.bearer.sync.ims": authBearerSyncIms,
            "auth.tokenRequestParameter": authTokenRequestParameter,
            "oauth.bearer.configid": oauthBearerConfigid,
            "oauth.jwt.support": oauthJwtSupport
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter authTokenValidatorType: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeGraniteAuthOauthImplDefaultTokenValidatorImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, authTokenValidatorType: String? = nil, completion: ((data: ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplInfo?, error: ErrorType?) -> Void)) {
        comAdobeGraniteAuthOauthImplDefaultTokenValidatorImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, authTokenValidatorType: authTokenValidatorType).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.auth.oauth.impl.DefaultTokenValidatorImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "auth.token.validator.type" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter authTokenValidatorType: (query)  (optional)

     - returns: RequestBuilder<ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplInfo> 
     */
    public class func comAdobeGraniteAuthOauthImplDefaultTokenValidatorImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, authTokenValidatorType: String? = nil) -> RequestBuilder<ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.auth.oauth.impl.DefaultTokenValidatorImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "auth.token.validator.type": authTokenValidatorType
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter oauthProviderId: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeGraniteAuthOauthImplFacebookProviderImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, oauthProviderId: String? = nil, completion: ((data: ComAdobeGraniteAuthOauthImplFacebookProviderImplInfo?, error: ErrorType?) -> Void)) {
        comAdobeGraniteAuthOauthImplFacebookProviderImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, oauthProviderId: oauthProviderId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.auth.oauth.impl.FacebookProviderImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "oauth.provider.id" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter oauthProviderId: (query)  (optional)

     - returns: RequestBuilder<ComAdobeGraniteAuthOauthImplFacebookProviderImplInfo> 
     */
    public class func comAdobeGraniteAuthOauthImplFacebookProviderImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, oauthProviderId: String? = nil) -> RequestBuilder<ComAdobeGraniteAuthOauthImplFacebookProviderImplInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.auth.oauth.impl.FacebookProviderImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "oauth.provider.id": oauthProviderId
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeGraniteAuthOauthImplFacebookProviderImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter oauthProviderId: (query)  (optional)
     - parameter oauthProviderGithubAuthorizationUrl: (query)  (optional)
     - parameter oauthProviderGithubTokenUrl: (query)  (optional)
     - parameter oauthProviderGithubProfileUrl: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeGraniteAuthOauthImplGithubProviderImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, oauthProviderId: String? = nil, oauthProviderGithubAuthorizationUrl: String? = nil, oauthProviderGithubTokenUrl: String? = nil, oauthProviderGithubProfileUrl: String? = nil, completion: ((data: ComAdobeGraniteAuthOauthImplGithubProviderImplInfo?, error: ErrorType?) -> Void)) {
        comAdobeGraniteAuthOauthImplGithubProviderImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, oauthProviderId: oauthProviderId, oauthProviderGithubAuthorizationUrl: oauthProviderGithubAuthorizationUrl, oauthProviderGithubTokenUrl: oauthProviderGithubTokenUrl, oauthProviderGithubProfileUrl: oauthProviderGithubProfileUrl).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.auth.oauth.impl.GithubProviderImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "oauth.provider.id" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "oauth.provider.github.profile.url" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "oauth.provider.github.authorization.url" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "oauth.provider.github.token.url" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter oauthProviderId: (query)  (optional)
     - parameter oauthProviderGithubAuthorizationUrl: (query)  (optional)
     - parameter oauthProviderGithubTokenUrl: (query)  (optional)
     - parameter oauthProviderGithubProfileUrl: (query)  (optional)

     - returns: RequestBuilder<ComAdobeGraniteAuthOauthImplGithubProviderImplInfo> 
     */
    public class func comAdobeGraniteAuthOauthImplGithubProviderImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, oauthProviderId: String? = nil, oauthProviderGithubAuthorizationUrl: String? = nil, oauthProviderGithubTokenUrl: String? = nil, oauthProviderGithubProfileUrl: String? = nil) -> RequestBuilder<ComAdobeGraniteAuthOauthImplGithubProviderImplInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.auth.oauth.impl.GithubProviderImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "oauth.provider.id": oauthProviderId,
            "oauth.provider.github.authorization.url": oauthProviderGithubAuthorizationUrl,
            "oauth.provider.github.token.url": oauthProviderGithubTokenUrl,
            "oauth.provider.github.profile.url": oauthProviderGithubProfileUrl
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeGraniteAuthOauthImplGithubProviderImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter oauthProviderId: (query)  (optional)
     - parameter oauthProviderGraniteAuthorizationUrl: (query)  (optional)
     - parameter oauthProviderGraniteTokenUrl: (query)  (optional)
     - parameter oauthProviderGraniteProfileUrl: (query)  (optional)
     - parameter oauthProviderGraniteExtendedDetailsUrls: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeGraniteAuthOauthImplGraniteProvider(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, oauthProviderId: String? = nil, oauthProviderGraniteAuthorizationUrl: String? = nil, oauthProviderGraniteTokenUrl: String? = nil, oauthProviderGraniteProfileUrl: String? = nil, oauthProviderGraniteExtendedDetailsUrls: String? = nil, completion: ((data: ComAdobeGraniteAuthOauthImplGraniteProviderInfo?, error: ErrorType?) -> Void)) {
        comAdobeGraniteAuthOauthImplGraniteProviderWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, oauthProviderId: oauthProviderId, oauthProviderGraniteAuthorizationUrl: oauthProviderGraniteAuthorizationUrl, oauthProviderGraniteTokenUrl: oauthProviderGraniteTokenUrl, oauthProviderGraniteProfileUrl: oauthProviderGraniteProfileUrl, oauthProviderGraniteExtendedDetailsUrls: oauthProviderGraniteExtendedDetailsUrls).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.auth.oauth.impl.GraniteProvider     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "oauth.provider.granite.authorization.url" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "oauth.provider.id" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "oauth.provider.granite.profile.url" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "oauth.provider.granite.token.url" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "oauth.provider.granite.extended.details.urls" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter oauthProviderId: (query)  (optional)
     - parameter oauthProviderGraniteAuthorizationUrl: (query)  (optional)
     - parameter oauthProviderGraniteTokenUrl: (query)  (optional)
     - parameter oauthProviderGraniteProfileUrl: (query)  (optional)
     - parameter oauthProviderGraniteExtendedDetailsUrls: (query)  (optional)

     - returns: RequestBuilder<ComAdobeGraniteAuthOauthImplGraniteProviderInfo> 
     */
    public class func comAdobeGraniteAuthOauthImplGraniteProviderWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, oauthProviderId: String? = nil, oauthProviderGraniteAuthorizationUrl: String? = nil, oauthProviderGraniteTokenUrl: String? = nil, oauthProviderGraniteProfileUrl: String? = nil, oauthProviderGraniteExtendedDetailsUrls: String? = nil) -> RequestBuilder<ComAdobeGraniteAuthOauthImplGraniteProviderInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.auth.oauth.impl.GraniteProvider"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "oauth.provider.id": oauthProviderId,
            "oauth.provider.granite.authorization.url": oauthProviderGraniteAuthorizationUrl,
            "oauth.provider.granite.token.url": oauthProviderGraniteTokenUrl,
            "oauth.provider.granite.profile.url": oauthProviderGraniteProfileUrl,
            "oauth.provider.granite.extended.details.urls": oauthProviderGraniteExtendedDetailsUrls
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeGraniteAuthOauthImplGraniteProviderInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter oauthCookieLoginTimeout: (query)  (optional)
     - parameter oauthCookieMaxAge: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeGraniteAuthOauthImplHelperProviderConfigManager(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, oauthCookieLoginTimeout: String? = nil, oauthCookieMaxAge: String? = nil, completion: ((data: ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInfo?, error: ErrorType?) -> Void)) {
        comAdobeGraniteAuthOauthImplHelperProviderConfigManagerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, oauthCookieLoginTimeout: oauthCookieLoginTimeout, oauthCookieMaxAge: oauthCookieMaxAge).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.auth.oauth.impl.helper.ProviderConfigManager     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "service_location" : "service_location",
  "bundle_location" : "bundle_location",
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "oauth.cookie.login.timeout" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "oauth.cookie.max.age" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter oauthCookieLoginTimeout: (query)  (optional)
     - parameter oauthCookieMaxAge: (query)  (optional)

     - returns: RequestBuilder<ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInfo> 
     */
    public class func comAdobeGraniteAuthOauthImplHelperProviderConfigManagerWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, oauthCookieLoginTimeout: String? = nil, oauthCookieMaxAge: String? = nil) -> RequestBuilder<ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.auth.oauth.impl.helper.ProviderConfigManager"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "oauth.cookie.login.timeout": oauthCookieLoginTimeout,
            "oauth.cookie.max.age": oauthCookieMaxAge
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter oauthCookieLoginTimeout: (query)  (optional)
     - parameter oauthCookieMaxAge: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternal(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, oauthCookieLoginTimeout: String? = nil, oauthCookieMaxAge: String? = nil, completion: ((data: ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalInfo?, error: ErrorType?) -> Void)) {
        comAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, oauthCookieLoginTimeout: oauthCookieLoginTimeout, oauthCookieMaxAge: oauthCookieMaxAge).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.auth.oauth.impl.helper.ProviderConfigManagerInternal     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "oauth.cookie.login.timeout" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "oauth.cookie.max.age" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter oauthCookieLoginTimeout: (query)  (optional)
     - parameter oauthCookieMaxAge: (query)  (optional)

     - returns: RequestBuilder<ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalInfo> 
     */
    public class func comAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, oauthCookieLoginTimeout: String? = nil, oauthCookieMaxAge: String? = nil) -> RequestBuilder<ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.auth.oauth.impl.helper.ProviderConfigManagerInternal"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "oauth.cookie.login.timeout": oauthCookieLoginTimeout,
            "oauth.cookie.max.age": oauthCookieMaxAge
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter path: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeGraniteAuthOauthImplOAuthAuthenticationHandler(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, path: String? = nil, completion: ((data: ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerInfo?, error: ErrorType?) -> Void)) {
        comAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, path: path).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.auth.oauth.impl.OAuthAuthenticationHandler     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "path" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter path: (query)  (optional)

     - returns: RequestBuilder<ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerInfo> 
     */
    public class func comAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, path: String? = nil) -> RequestBuilder<ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.auth.oauth.impl.OAuthAuthenticationHandler"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "path": path
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter oauthProviderId: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeGraniteAuthOauthImplTwitterProviderImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, oauthProviderId: String? = nil, completion: ((data: ComAdobeGraniteAuthOauthImplTwitterProviderImplInfo?, error: ErrorType?) -> Void)) {
        comAdobeGraniteAuthOauthImplTwitterProviderImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, oauthProviderId: oauthProviderId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.auth.oauth.impl.TwitterProviderImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "oauth.provider.id" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter oauthProviderId: (query)  (optional)

     - returns: RequestBuilder<ComAdobeGraniteAuthOauthImplTwitterProviderImplInfo> 
     */
    public class func comAdobeGraniteAuthOauthImplTwitterProviderImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, oauthProviderId: String? = nil) -> RequestBuilder<ComAdobeGraniteAuthOauthImplTwitterProviderImplInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.auth.oauth.impl.TwitterProviderImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "oauth.provider.id": oauthProviderId
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeGraniteAuthOauthImplTwitterProviderImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter oauthConfigId: (query)  (optional)
     - parameter oauthClientId: (query)  (optional)
     - parameter oauthClientSecret: (query)  (optional)
     - parameter oauthScope: (query)  (optional)
     - parameter oauthConfigProviderId: (query)  (optional)
     - parameter oauthCreateUsers: (query)  (optional)
     - parameter oauthUseridProperty: (query)  (optional)
     - parameter forceStrictUsernameMatching: (query)  (optional)
     - parameter oauthEncodeUserids: (query)  (optional)
     - parameter oauthHashUserids: (query)  (optional)
     - parameter oauthCallBackUrl: (query)  (optional)
     - parameter oauthAccessTokenPersist: (query)  (optional)
     - parameter oauthAccessTokenPersistCookie: (query)  (optional)
     - parameter oauthCsrfStateProtection: (query)  (optional)
     - parameter oauthRedirectRequestParams: (query)  (optional)
     - parameter oauthConfigSiblingsAllow: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeGraniteAuthOauthProvider(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, oauthConfigId: String? = nil, oauthClientId: String? = nil, oauthClientSecret: String? = nil, oauthScope: [String]? = nil, oauthConfigProviderId: String? = nil, oauthCreateUsers: Bool? = nil, oauthUseridProperty: String? = nil, forceStrictUsernameMatching: Bool? = nil, oauthEncodeUserids: Bool? = nil, oauthHashUserids: Bool? = nil, oauthCallBackUrl: String? = nil, oauthAccessTokenPersist: Bool? = nil, oauthAccessTokenPersistCookie: Bool? = nil, oauthCsrfStateProtection: Bool? = nil, oauthRedirectRequestParams: Bool? = nil, oauthConfigSiblingsAllow: Bool? = nil, completion: ((data: ComAdobeGraniteAuthOauthProviderInfo?, error: ErrorType?) -> Void)) {
        comAdobeGraniteAuthOauthProviderWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, oauthConfigId: oauthConfigId, oauthClientId: oauthClientId, oauthClientSecret: oauthClientSecret, oauthScope: oauthScope, oauthConfigProviderId: oauthConfigProviderId, oauthCreateUsers: oauthCreateUsers, oauthUseridProperty: oauthUseridProperty, forceStrictUsernameMatching: forceStrictUsernameMatching, oauthEncodeUserids: oauthEncodeUserids, oauthHashUserids: oauthHashUserids, oauthCallBackUrl: oauthCallBackUrl, oauthAccessTokenPersist: oauthAccessTokenPersist, oauthAccessTokenPersistCookie: oauthAccessTokenPersistCookie, oauthCsrfStateProtection: oauthCsrfStateProtection, oauthRedirectRequestParams: oauthRedirectRequestParams, oauthConfigSiblingsAllow: oauthConfigSiblingsAllow).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.auth.oauth.provider     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "oauth.create.users" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "oauth.config.id" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "oauth.userid.property" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "oauth.access.token.persist.cookie" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "force.strict.username.matching" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "oauth.scope" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "oauth.hash.userids" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "oauth.client.id" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "oauth.access.token.persist" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "oauth.client.secret" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "oauth.callBackUrl" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "oauth.redirect.request.params" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "oauth.encode.userids" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "oauth.csrf.state.protection" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "oauth.config.siblings.allow" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "oauth.config.provider.id" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter oauthConfigId: (query)  (optional)
     - parameter oauthClientId: (query)  (optional)
     - parameter oauthClientSecret: (query)  (optional)
     - parameter oauthScope: (query)  (optional)
     - parameter oauthConfigProviderId: (query)  (optional)
     - parameter oauthCreateUsers: (query)  (optional)
     - parameter oauthUseridProperty: (query)  (optional)
     - parameter forceStrictUsernameMatching: (query)  (optional)
     - parameter oauthEncodeUserids: (query)  (optional)
     - parameter oauthHashUserids: (query)  (optional)
     - parameter oauthCallBackUrl: (query)  (optional)
     - parameter oauthAccessTokenPersist: (query)  (optional)
     - parameter oauthAccessTokenPersistCookie: (query)  (optional)
     - parameter oauthCsrfStateProtection: (query)  (optional)
     - parameter oauthRedirectRequestParams: (query)  (optional)
     - parameter oauthConfigSiblingsAllow: (query)  (optional)

     - returns: RequestBuilder<ComAdobeGraniteAuthOauthProviderInfo> 
     */
    public class func comAdobeGraniteAuthOauthProviderWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, oauthConfigId: String? = nil, oauthClientId: String? = nil, oauthClientSecret: String? = nil, oauthScope: [String]? = nil, oauthConfigProviderId: String? = nil, oauthCreateUsers: Bool? = nil, oauthUseridProperty: String? = nil, forceStrictUsernameMatching: Bool? = nil, oauthEncodeUserids: Bool? = nil, oauthHashUserids: Bool? = nil, oauthCallBackUrl: String? = nil, oauthAccessTokenPersist: Bool? = nil, oauthAccessTokenPersistCookie: Bool? = nil, oauthCsrfStateProtection: Bool? = nil, oauthRedirectRequestParams: Bool? = nil, oauthConfigSiblingsAllow: Bool? = nil) -> RequestBuilder<ComAdobeGraniteAuthOauthProviderInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.auth.oauth.provider"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "oauth.config.id": oauthConfigId,
            "oauth.client.id": oauthClientId,
            "oauth.client.secret": oauthClientSecret,
            "oauth.scope": oauthScope,
            "oauth.config.provider.id": oauthConfigProviderId,
            "oauth.create.users": oauthCreateUsers,
            "oauth.userid.property": oauthUseridProperty,
            "force.strict.username.matching": forceStrictUsernameMatching,
            "oauth.encode.userids": oauthEncodeUserids,
            "oauth.hash.userids": oauthHashUserids,
            "oauth.callBackUrl": oauthCallBackUrl,
            "oauth.access.token.persist": oauthAccessTokenPersist,
            "oauth.access.token.persist.cookie": oauthAccessTokenPersistCookie,
            "oauth.csrf.state.protection": oauthCsrfStateProtection,
            "oauth.redirect.request.params": oauthRedirectRequestParams,
            "oauth.config.siblings.allow": oauthConfigSiblingsAllow
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeGraniteAuthOauthProviderInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter supportedPaths: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeGraniteAuthRequirementImplDefaultRequirementHandler(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, supportedPaths: [String]? = nil, completion: ((data: ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerInfo?, error: ErrorType?) -> Void)) {
        comAdobeGraniteAuthRequirementImplDefaultRequirementHandlerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, supportedPaths: supportedPaths).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.auth.requirement.impl.DefaultRequirementHandler     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "supportedPaths" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter supportedPaths: (query)  (optional)

     - returns: RequestBuilder<ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerInfo> 
     */
    public class func comAdobeGraniteAuthRequirementImplDefaultRequirementHandlerWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, supportedPaths: [String]? = nil) -> RequestBuilder<ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.auth.requirement.impl.DefaultRequirementHandler"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "supportedPaths": supportedPaths
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter path: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter idpUrl: (query)  (optional)
     - parameter idpCertAlias: (query)  (optional)
     - parameter idpHttpRedirect: (query)  (optional)
     - parameter serviceProviderEntityId: (query)  (optional)
     - parameter assertionConsumerServiceURL: (query)  (optional)
     - parameter spPrivateKeyAlias: (query)  (optional)
     - parameter keyStorePassword: (query)  (optional)
     - parameter defaultRedirectUrl: (query)  (optional)
     - parameter userIDAttribute: (query)  (optional)
     - parameter useEncryption: (query)  (optional)
     - parameter createUser: (query)  (optional)
     - parameter userIntermediatePath: (query)  (optional)
     - parameter addGroupMemberships: (query)  (optional)
     - parameter groupMembershipAttribute: (query)  (optional)
     - parameter defaultGroups: (query)  (optional)
     - parameter nameIdFormat: (query)  (optional)
     - parameter synchronizeAttributes: (query)  (optional)
     - parameter handleLogout: (query)  (optional)
     - parameter logoutUrl: (query)  (optional)
     - parameter clockTolerance: (query)  (optional)
     - parameter digestMethod: (query)  (optional)
     - parameter signatureMethod: (query)  (optional)
     - parameter identitySyncType: (query)  (optional)
     - parameter idpIdentifier: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeGraniteAuthSamlSamlAuthenticationHandler(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, path: [String]? = nil, serviceRanking: Int32? = nil, idpUrl: String? = nil, idpCertAlias: String? = nil, idpHttpRedirect: Bool? = nil, serviceProviderEntityId: String? = nil, assertionConsumerServiceURL: String? = nil, spPrivateKeyAlias: String? = nil, keyStorePassword: String? = nil, defaultRedirectUrl: String? = nil, userIDAttribute: String? = nil, useEncryption: Bool? = nil, createUser: Bool? = nil, userIntermediatePath: String? = nil, addGroupMemberships: Bool? = nil, groupMembershipAttribute: String? = nil, defaultGroups: [String]? = nil, nameIdFormat: String? = nil, synchronizeAttributes: [String]? = nil, handleLogout: Bool? = nil, logoutUrl: String? = nil, clockTolerance: Int32? = nil, digestMethod: String? = nil, signatureMethod: String? = nil, identitySyncType: String? = nil, idpIdentifier: String? = nil, completion: ((data: ComAdobeGraniteAuthSamlSamlAuthenticationHandlerInfo?, error: ErrorType?) -> Void)) {
        comAdobeGraniteAuthSamlSamlAuthenticationHandlerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, path: path, serviceRanking: serviceRanking, idpUrl: idpUrl, idpCertAlias: idpCertAlias, idpHttpRedirect: idpHttpRedirect, serviceProviderEntityId: serviceProviderEntityId, assertionConsumerServiceURL: assertionConsumerServiceURL, spPrivateKeyAlias: spPrivateKeyAlias, keyStorePassword: keyStorePassword, defaultRedirectUrl: defaultRedirectUrl, userIDAttribute: userIDAttribute, useEncryption: useEncryption, createUser: createUser, userIntermediatePath: userIntermediatePath, addGroupMemberships: addGroupMemberships, groupMembershipAttribute: groupMembershipAttribute, defaultGroups: defaultGroups, nameIdFormat: nameIdFormat, synchronizeAttributes: synchronizeAttributes, handleLogout: handleLogout, logoutUrl: logoutUrl, clockTolerance: clockTolerance, digestMethod: digestMethod, signatureMethod: signatureMethod, identitySyncType: identitySyncType, idpIdentifier: idpIdentifier).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.auth.saml.SamlAuthenticationHandler     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "service_location" : "service_location",
  "bundle_location" : "bundle_location",
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "groupMembershipAttribute" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "idpHttpRedirect" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "idpCertAlias" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "defaultGroups" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "addGroupMemberships" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "path" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "assertionConsumerServiceURL" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "idpUrl" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "synchronizeAttributes" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "userIntermediatePath" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "serviceProviderEntityId" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "clockTolerance" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "spPrivateKeyAlias" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "keyStorePassword" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "digestMethod" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "signatureMethod" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "defaultRedirectUrl" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "identitySyncType" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : {
        "values" : "",
        "labels" : ""
      },
      "value" : ""
    },
    "idpIdentifier" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "nameIdFormat" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "logoutUrl" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "useEncryption" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "createUser" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "handleLogout" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "service.ranking" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "userIDAttribute" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter path: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter idpUrl: (query)  (optional)
     - parameter idpCertAlias: (query)  (optional)
     - parameter idpHttpRedirect: (query)  (optional)
     - parameter serviceProviderEntityId: (query)  (optional)
     - parameter assertionConsumerServiceURL: (query)  (optional)
     - parameter spPrivateKeyAlias: (query)  (optional)
     - parameter keyStorePassword: (query)  (optional)
     - parameter defaultRedirectUrl: (query)  (optional)
     - parameter userIDAttribute: (query)  (optional)
     - parameter useEncryption: (query)  (optional)
     - parameter createUser: (query)  (optional)
     - parameter userIntermediatePath: (query)  (optional)
     - parameter addGroupMemberships: (query)  (optional)
     - parameter groupMembershipAttribute: (query)  (optional)
     - parameter defaultGroups: (query)  (optional)
     - parameter nameIdFormat: (query)  (optional)
     - parameter synchronizeAttributes: (query)  (optional)
     - parameter handleLogout: (query)  (optional)
     - parameter logoutUrl: (query)  (optional)
     - parameter clockTolerance: (query)  (optional)
     - parameter digestMethod: (query)  (optional)
     - parameter signatureMethod: (query)  (optional)
     - parameter identitySyncType: (query)  (optional)
     - parameter idpIdentifier: (query)  (optional)

     - returns: RequestBuilder<ComAdobeGraniteAuthSamlSamlAuthenticationHandlerInfo> 
     */
    public class func comAdobeGraniteAuthSamlSamlAuthenticationHandlerWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, path: [String]? = nil, serviceRanking: Int32? = nil, idpUrl: String? = nil, idpCertAlias: String? = nil, idpHttpRedirect: Bool? = nil, serviceProviderEntityId: String? = nil, assertionConsumerServiceURL: String? = nil, spPrivateKeyAlias: String? = nil, keyStorePassword: String? = nil, defaultRedirectUrl: String? = nil, userIDAttribute: String? = nil, useEncryption: Bool? = nil, createUser: Bool? = nil, userIntermediatePath: String? = nil, addGroupMemberships: Bool? = nil, groupMembershipAttribute: String? = nil, defaultGroups: [String]? = nil, nameIdFormat: String? = nil, synchronizeAttributes: [String]? = nil, handleLogout: Bool? = nil, logoutUrl: String? = nil, clockTolerance: Int32? = nil, digestMethod: String? = nil, signatureMethod: String? = nil, identitySyncType: String? = nil, idpIdentifier: String? = nil) -> RequestBuilder<ComAdobeGraniteAuthSamlSamlAuthenticationHandlerInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.auth.saml.SamlAuthenticationHandler"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "path": path,
            "service.ranking": serviceRanking?.encodeToJSON(),
            "idpUrl": idpUrl,
            "idpCertAlias": idpCertAlias,
            "idpHttpRedirect": idpHttpRedirect,
            "serviceProviderEntityId": serviceProviderEntityId,
            "assertionConsumerServiceURL": assertionConsumerServiceURL,
            "spPrivateKeyAlias": spPrivateKeyAlias,
            "keyStorePassword": keyStorePassword,
            "defaultRedirectUrl": defaultRedirectUrl,
            "userIDAttribute": userIDAttribute,
            "useEncryption": useEncryption,
            "createUser": createUser,
            "userIntermediatePath": userIntermediatePath,
            "addGroupMemberships": addGroupMemberships,
            "groupMembershipAttribute": groupMembershipAttribute,
            "defaultGroups": defaultGroups,
            "nameIdFormat": nameIdFormat,
            "synchronizeAttributes": synchronizeAttributes,
            "handleLogout": handleLogout,
            "logoutUrl": logoutUrl,
            "clockTolerance": clockTolerance?.encodeToJSON(),
            "digestMethod": digestMethod,
            "signatureMethod": signatureMethod,
            "identitySyncType": identitySyncType,
            "idpIdentifier": idpIdentifier
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeGraniteAuthSamlSamlAuthenticationHandlerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter path: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter jaasControlFlag: (query)  (optional)
     - parameter jaasRealmName: (query)  (optional)
     - parameter jaasRanking: (query)  (optional)
     - parameter headers: (query)  (optional)
     - parameter cookies: (query)  (optional)
     - parameter parameters: (query)  (optional)
     - parameter usermap: (query)  (optional)
     - parameter format: (query)  (optional)
     - parameter trustedCredentialsAttribute: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeGraniteAuthSsoImplSsoAuthenticationHandler(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, path: String? = nil, serviceRanking: Int32? = nil, jaasControlFlag: String? = nil, jaasRealmName: String? = nil, jaasRanking: Int32? = nil, headers: [String]? = nil, cookies: [String]? = nil, parameters: [String]? = nil, usermap: [String]? = nil, format: String? = nil, trustedCredentialsAttribute: String? = nil, completion: ((data: ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerInfo?, error: ErrorType?) -> Void)) {
        comAdobeGraniteAuthSsoImplSsoAuthenticationHandlerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, path: path, serviceRanking: serviceRanking, jaasControlFlag: jaasControlFlag, jaasRealmName: jaasRealmName, jaasRanking: jaasRanking, headers: headers, cookies: cookies, parameters: parameters, usermap: usermap, format: format, trustedCredentialsAttribute: trustedCredentialsAttribute).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.auth.sso.impl.SsoAuthenticationHandler     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "path" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "headers" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "jaas.controlFlag" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "jaas.realmName" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "format" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "usermap" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "jaas.ranking" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "trustedCredentialsAttribute" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "parameters" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "service.ranking" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "cookies" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter path: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter jaasControlFlag: (query)  (optional)
     - parameter jaasRealmName: (query)  (optional)
     - parameter jaasRanking: (query)  (optional)
     - parameter headers: (query)  (optional)
     - parameter cookies: (query)  (optional)
     - parameter parameters: (query)  (optional)
     - parameter usermap: (query)  (optional)
     - parameter format: (query)  (optional)
     - parameter trustedCredentialsAttribute: (query)  (optional)

     - returns: RequestBuilder<ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerInfo> 
     */
    public class func comAdobeGraniteAuthSsoImplSsoAuthenticationHandlerWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, path: String? = nil, serviceRanking: Int32? = nil, jaasControlFlag: String? = nil, jaasRealmName: String? = nil, jaasRanking: Int32? = nil, headers: [String]? = nil, cookies: [String]? = nil, parameters: [String]? = nil, usermap: [String]? = nil, format: String? = nil, trustedCredentialsAttribute: String? = nil) -> RequestBuilder<ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.auth.sso.impl.SsoAuthenticationHandler"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "path": path,
            "service.ranking": serviceRanking?.encodeToJSON(),
            "jaas.controlFlag": jaasControlFlag,
            "jaas.realmName": jaasRealmName,
            "jaas.ranking": jaasRanking?.encodeToJSON(),
            "headers": headers,
            "cookies": cookies,
            "parameters": parameters,
            "usermap": usermap,
            "format": format,
            "trustedCredentialsAttribute": trustedCredentialsAttribute
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - parameter minimumCodeCacheSize: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeGraniteBundlesHcImplCodeCacheHealthCheck(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcTags: [String]? = nil, minimumCodeCacheSize: Int32? = nil, completion: ((data: ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckInfo?, error: ErrorType?) -> Void)) {
        comAdobeGraniteBundlesHcImplCodeCacheHealthCheckWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, hcTags: hcTags, minimumCodeCacheSize: minimumCodeCacheSize).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.bundles.hc.impl.CodeCacheHealthCheck     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "minimum.code.cache.size" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "hc.tags" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - parameter minimumCodeCacheSize: (query)  (optional)

     - returns: RequestBuilder<ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckInfo> 
     */
    public class func comAdobeGraniteBundlesHcImplCodeCacheHealthCheckWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcTags: [String]? = nil, minimumCodeCacheSize: Int32? = nil) -> RequestBuilder<ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.bundles.hc.impl.CodeCacheHealthCheck"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "hc.tags": hcTags,
            "minimum.code.cache.size": minimumCodeCacheSize?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheck(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcTags: [String]? = nil, completion: ((data: ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckInfo?, error: ErrorType?) -> Void)) {
        comAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, hcTags: hcTags).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.bundles.hc.impl.CrxdeSupportBundleHealthCheck     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "hc.tags" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcTags: (query)  (optional)

     - returns: RequestBuilder<ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckInfo> 
     */
    public class func comAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcTags: [String]? = nil) -> RequestBuilder<ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.bundles.hc.impl.CrxdeSupportBundleHealthCheck"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "hc.tags": hcTags
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeGraniteBundlesHcImplDavExBundleHealthCheck(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcTags: [String]? = nil, completion: ((data: ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckInfo?, error: ErrorType?) -> Void)) {
        comAdobeGraniteBundlesHcImplDavExBundleHealthCheckWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, hcTags: hcTags).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.bundles.hc.impl.DavExBundleHealthCheck     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "hc.tags" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcTags: (query)  (optional)

     - returns: RequestBuilder<ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckInfo> 
     */
    public class func comAdobeGraniteBundlesHcImplDavExBundleHealthCheckWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcTags: [String]? = nil) -> RequestBuilder<ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.bundles.hc.impl.DavExBundleHealthCheck"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "hc.tags": hcTags
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - parameter ignoredBundles: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeGraniteBundlesHcImplInactiveBundlesHealthCheck(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcTags: [String]? = nil, ignoredBundles: [String]? = nil, completion: ((data: ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckInfo?, error: ErrorType?) -> Void)) {
        comAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, hcTags: hcTags, ignoredBundles: ignoredBundles).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.bundles.hc.impl.InactiveBundlesHealthCheck     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "ignored.bundles" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "hc.tags" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - parameter ignoredBundles: (query)  (optional)

     - returns: RequestBuilder<ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckInfo> 
     */
    public class func comAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcTags: [String]? = nil, ignoredBundles: [String]? = nil) -> RequestBuilder<ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.bundles.hc.impl.InactiveBundlesHealthCheck"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "hc.tags": hcTags,
            "ignored.bundles": ignoredBundles
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - parameter maxQueuedJobs: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeGraniteBundlesHcImplJobsHealthCheck(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcTags: [String]? = nil, maxQueuedJobs: Int32? = nil, completion: ((data: ComAdobeGraniteBundlesHcImplJobsHealthCheckInfo?, error: ErrorType?) -> Void)) {
        comAdobeGraniteBundlesHcImplJobsHealthCheckWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, hcTags: hcTags, maxQueuedJobs: maxQueuedJobs).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.bundles.hc.impl.JobsHealthCheck     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "hc.tags" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "max.queued.jobs" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - parameter maxQueuedJobs: (query)  (optional)

     - returns: RequestBuilder<ComAdobeGraniteBundlesHcImplJobsHealthCheckInfo> 
     */
    public class func comAdobeGraniteBundlesHcImplJobsHealthCheckWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcTags: [String]? = nil, maxQueuedJobs: Int32? = nil) -> RequestBuilder<ComAdobeGraniteBundlesHcImplJobsHealthCheckInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.bundles.hc.impl.JobsHealthCheck"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "hc.tags": hcTags,
            "max.queued.jobs": maxQueuedJobs?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeGraniteBundlesHcImplJobsHealthCheckInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeGraniteBundlesHcImplSlingGetServletHealthCheck(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcTags: [String]? = nil, completion: ((data: ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckInfo?, error: ErrorType?) -> Void)) {
        comAdobeGraniteBundlesHcImplSlingGetServletHealthCheckWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, hcTags: hcTags).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.bundles.hc.impl.SlingGetServletHealthCheck     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "hc.tags" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcTags: (query)  (optional)

     - returns: RequestBuilder<ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckInfo> 
     */
    public class func comAdobeGraniteBundlesHcImplSlingGetServletHealthCheckWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcTags: [String]? = nil) -> RequestBuilder<ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.bundles.hc.impl.SlingGetServletHealthCheck"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "hc.tags": hcTags
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheck(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcTags: [String]? = nil, completion: ((data: ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckInfo?, error: ErrorType?) -> Void)) {
        comAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, hcTags: hcTags).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.bundles.hc.impl.SlingJavaScriptHandlerHealthCheck     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "hc.tags" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcTags: (query)  (optional)

     - returns: RequestBuilder<ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckInfo> 
     */
    public class func comAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcTags: [String]? = nil) -> RequestBuilder<ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.bundles.hc.impl.SlingJavaScriptHandlerHealthCheck"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "hc.tags": hcTags
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheck(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcTags: [String]? = nil, completion: ((data: ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckInfo?, error: ErrorType?) -> Void)) {
        comAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, hcTags: hcTags).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.bundles.hc.impl.SlingJspScriptHandlerHealthCheck     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "hc.tags" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcTags: (query)  (optional)

     - returns: RequestBuilder<ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckInfo> 
     */
    public class func comAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcTags: [String]? = nil) -> RequestBuilder<ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.bundles.hc.impl.SlingJspScriptHandlerHealthCheck"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "hc.tags": hcTags
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheck(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcTags: [String]? = nil, completion: ((data: ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckInfo?, error: ErrorType?) -> Void)) {
        comAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, hcTags: hcTags).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.bundles.hc.impl.SlingReferrerFilterHealthCheck     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "hc.tags" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcTags: (query)  (optional)

     - returns: RequestBuilder<ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckInfo> 
     */
    public class func comAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcTags: [String]? = nil) -> RequestBuilder<ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.bundles.hc.impl.SlingReferrerFilterHealthCheck"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "hc.tags": hcTags
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeGraniteBundlesHcImplWebDavBundleHealthCheck(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcTags: [String]? = nil, completion: ((data: ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckInfo?, error: ErrorType?) -> Void)) {
        comAdobeGraniteBundlesHcImplWebDavBundleHealthCheckWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, hcTags: hcTags).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.bundles.hc.impl.WebDavBundleHealthCheck     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "hc.tags" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcTags: (query)  (optional)

     - returns: RequestBuilder<ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckInfo> 
     */
    public class func comAdobeGraniteBundlesHcImplWebDavBundleHealthCheckWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcTags: [String]? = nil) -> RequestBuilder<ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.bundles.hc.impl.WebDavBundleHealthCheck"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "hc.tags": hcTags
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter replicateCommentResourceTypes: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeGraniteCommentsInternalCommentReplicationContentFilterFac(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, replicateCommentResourceTypes: [String]? = nil, completion: ((data: ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacInfo?, error: ErrorType?) -> Void)) {
        comAdobeGraniteCommentsInternalCommentReplicationContentFilterFacWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, replicateCommentResourceTypes: replicateCommentResourceTypes).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.comments.internal.CommentReplicationContentFilterFactory     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "replicate.comment.resourceTypes" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter replicateCommentResourceTypes: (query)  (optional)

     - returns: RequestBuilder<ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacInfo> 
     */
    public class func comAdobeGraniteCommentsInternalCommentReplicationContentFilterFacWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, replicateCommentResourceTypes: [String]? = nil) -> RequestBuilder<ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.comments.internal.CommentReplicationContentFilterFactory"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "replicate.comment.resourceTypes": replicateCommentResourceTypes
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter compatgroups: (query)  (optional)
     - parameter enabled: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeGraniteCompatrouterImplCompatSwitchingServiceImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, compatgroups: [String]? = nil, enabled: Bool? = nil, completion: ((data: ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplInfo?, error: ErrorType?) -> Void)) {
        comAdobeGraniteCompatrouterImplCompatSwitchingServiceImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, compatgroups: compatgroups, enabled: enabled).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.compatrouter.impl.CompatSwitchingServiceImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "compatgroups" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "enabled" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter compatgroups: (query)  (optional)
     - parameter enabled: (query)  (optional)

     - returns: RequestBuilder<ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplInfo> 
     */
    public class func comAdobeGraniteCompatrouterImplCompatSwitchingServiceImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, compatgroups: [String]? = nil, enabled: Bool? = nil) -> RequestBuilder<ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.compatrouter.impl.CompatSwitchingServiceImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "compatgroups": compatgroups,
            "enabled": enabled
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter id: (query)  (optional)
     - parameter compatPath: (query)  (optional)
     - parameter newPath: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeGraniteCompatrouterImplRoutingConfig(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, id: String? = nil, compatPath: String? = nil, newPath: String? = nil, completion: ((data: ComAdobeGraniteCompatrouterImplRoutingConfigInfo?, error: ErrorType?) -> Void)) {
        comAdobeGraniteCompatrouterImplRoutingConfigWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, id: id, compatPath: compatPath, newPath: newPath).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.compatrouter.impl.RoutingConfig     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "id" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "compatPath" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "newPath" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter id: (query)  (optional)
     - parameter compatPath: (query)  (optional)
     - parameter newPath: (query)  (optional)

     - returns: RequestBuilder<ComAdobeGraniteCompatrouterImplRoutingConfigInfo> 
     */
    public class func comAdobeGraniteCompatrouterImplRoutingConfigWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, id: String? = nil, compatPath: String? = nil, newPath: String? = nil) -> RequestBuilder<ComAdobeGraniteCompatrouterImplRoutingConfigInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.compatrouter.impl.RoutingConfig"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "id": id,
            "compatPath": compatPath,
            "newPath": newPath
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeGraniteCompatrouterImplRoutingConfigInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter group: (query)  (optional)
     - parameter ids: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeGraniteCompatrouterImplSwitchMappingConfig(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, group: String? = nil, ids: [String]? = nil, completion: ((data: ComAdobeGraniteCompatrouterImplSwitchMappingConfigInfo?, error: ErrorType?) -> Void)) {
        comAdobeGraniteCompatrouterImplSwitchMappingConfigWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, group: group, ids: ids).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.compatrouter.impl.SwitchMappingConfig     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "ids" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "group" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter group: (query)  (optional)
     - parameter ids: (query)  (optional)

     - returns: RequestBuilder<ComAdobeGraniteCompatrouterImplSwitchMappingConfigInfo> 
     */
    public class func comAdobeGraniteCompatrouterImplSwitchMappingConfigWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, group: String? = nil, ids: [String]? = nil) -> RequestBuilder<ComAdobeGraniteCompatrouterImplSwitchMappingConfigInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.compatrouter.impl.SwitchMappingConfig"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "group": group,
            "ids": ids
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeGraniteCompatrouterImplSwitchMappingConfigInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter enabled: (query)  (optional)
     - parameter fallbackPaths: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolving(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, enabled: Bool? = nil, fallbackPaths: [String]? = nil, completion: ((data: ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingInfo?, error: ErrorType?) -> Void)) {
        comAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, enabled: enabled, fallbackPaths: fallbackPaths).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.conf.impl.RuntimeAwareConfigurationResourceResolvingStrategy     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "fallbackPaths" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "enabled" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter enabled: (query)  (optional)
     - parameter fallbackPaths: (query)  (optional)

     - returns: RequestBuilder<ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingInfo> 
     */
    public class func comAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, enabled: Bool? = nil, fallbackPaths: [String]? = nil) -> RequestBuilder<ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.conf.impl.RuntimeAwareConfigurationResourceResolvingStrategy"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "enabled": enabled,
            "fallbackPaths": fallbackPaths
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter comAdobeGraniteContexthubSilentMode: (query)  (optional)
     - parameter comAdobeGraniteContexthubShowUi: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeGraniteContexthubImplContextHubImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, comAdobeGraniteContexthubSilentMode: Bool? = nil, comAdobeGraniteContexthubShowUi: Bool? = nil, completion: ((data: ComAdobeGraniteContexthubImplContextHubImplInfo?, error: ErrorType?) -> Void)) {
        comAdobeGraniteContexthubImplContextHubImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, comAdobeGraniteContexthubSilentMode: comAdobeGraniteContexthubSilentMode, comAdobeGraniteContexthubShowUi: comAdobeGraniteContexthubShowUi).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.contexthub.impl.ContextHubImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "com.adobe.granite.contexthub.show_ui" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "com.adobe.granite.contexthub.silent_mode" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter comAdobeGraniteContexthubSilentMode: (query)  (optional)
     - parameter comAdobeGraniteContexthubShowUi: (query)  (optional)

     - returns: RequestBuilder<ComAdobeGraniteContexthubImplContextHubImplInfo> 
     */
    public class func comAdobeGraniteContexthubImplContextHubImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, comAdobeGraniteContexthubSilentMode: Bool? = nil, comAdobeGraniteContexthubShowUi: Bool? = nil) -> RequestBuilder<ComAdobeGraniteContexthubImplContextHubImplInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.contexthub.impl.ContextHubImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "com.adobe.granite.contexthub.silent_mode": comAdobeGraniteContexthubSilentMode,
            "com.adobe.granite.contexthub.show_ui": comAdobeGraniteContexthubShowUi
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeGraniteContexthubImplContextHubImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter alloworigin: (query)  (optional)
     - parameter alloworiginregexp: (query)  (optional)
     - parameter allowedpaths: (query)  (optional)
     - parameter exposedheaders: (query)  (optional)
     - parameter maxage: (query)  (optional)
     - parameter supportedheaders: (query)  (optional)
     - parameter supportedmethods: (query)  (optional)
     - parameter supportscredentials: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeGraniteCorsImplCORSPolicyImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, alloworigin: [String]? = nil, alloworiginregexp: [String]? = nil, allowedpaths: [String]? = nil, exposedheaders: [String]? = nil, maxage: Int32? = nil, supportedheaders: [String]? = nil, supportedmethods: [String]? = nil, supportscredentials: Bool? = nil, completion: ((data: ComAdobeGraniteCorsImplCORSPolicyImplInfo?, error: ErrorType?) -> Void)) {
        comAdobeGraniteCorsImplCORSPolicyImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, alloworigin: alloworigin, alloworiginregexp: alloworiginregexp, allowedpaths: allowedpaths, exposedheaders: exposedheaders, maxage: maxage, supportedheaders: supportedheaders, supportedmethods: supportedmethods, supportscredentials: supportscredentials).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.cors.impl.CORSPolicyImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "supportedheaders" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "alloworigin" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "maxage" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "allowedpaths" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "alloworiginregexp" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "supportedmethods" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "supportscredentials" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "exposedheaders" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter alloworigin: (query)  (optional)
     - parameter alloworiginregexp: (query)  (optional)
     - parameter allowedpaths: (query)  (optional)
     - parameter exposedheaders: (query)  (optional)
     - parameter maxage: (query)  (optional)
     - parameter supportedheaders: (query)  (optional)
     - parameter supportedmethods: (query)  (optional)
     - parameter supportscredentials: (query)  (optional)

     - returns: RequestBuilder<ComAdobeGraniteCorsImplCORSPolicyImplInfo> 
     */
    public class func comAdobeGraniteCorsImplCORSPolicyImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, alloworigin: [String]? = nil, alloworiginregexp: [String]? = nil, allowedpaths: [String]? = nil, exposedheaders: [String]? = nil, maxage: Int32? = nil, supportedheaders: [String]? = nil, supportedmethods: [String]? = nil, supportscredentials: Bool? = nil) -> RequestBuilder<ComAdobeGraniteCorsImplCORSPolicyImplInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.cors.impl.CORSPolicyImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "alloworigin": alloworigin,
            "alloworiginregexp": alloworiginregexp,
            "allowedpaths": allowedpaths,
            "exposedheaders": exposedheaders,
            "maxage": maxage?.encodeToJSON(),
            "supportedheaders": supportedheaders,
            "supportedmethods": supportedmethods,
            "supportscredentials": supportscredentials
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeGraniteCorsImplCORSPolicyImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter filterMethods: (query)  (optional)
     - parameter filterEnableSafeUserAgents: (query)  (optional)
     - parameter filterSafeUserAgents: (query)  (optional)
     - parameter filterExcludedPaths: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeGraniteCsrfImplCSRFFilter(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, filterMethods: [String]? = nil, filterEnableSafeUserAgents: Bool? = nil, filterSafeUserAgents: [String]? = nil, filterExcludedPaths: [String]? = nil, completion: ((data: ComAdobeGraniteCsrfImplCSRFFilterInfo?, error: ErrorType?) -> Void)) {
        comAdobeGraniteCsrfImplCSRFFilterWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, filterMethods: filterMethods, filterEnableSafeUserAgents: filterEnableSafeUserAgents, filterSafeUserAgents: filterSafeUserAgents, filterExcludedPaths: filterExcludedPaths).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.csrf.impl.CSRFFilter     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "service_location" : "service_location",
  "bundle_location" : "bundle_location",
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "filter.methods" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "filter.excluded.paths" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "filter.safe.user.agents" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "filter.enable.safe.user.agents" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter filterMethods: (query)  (optional)
     - parameter filterEnableSafeUserAgents: (query)  (optional)
     - parameter filterSafeUserAgents: (query)  (optional)
     - parameter filterExcludedPaths: (query)  (optional)

     - returns: RequestBuilder<ComAdobeGraniteCsrfImplCSRFFilterInfo> 
     */
    public class func comAdobeGraniteCsrfImplCSRFFilterWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, filterMethods: [String]? = nil, filterEnableSafeUserAgents: Bool? = nil, filterSafeUserAgents: [String]? = nil, filterExcludedPaths: [String]? = nil) -> RequestBuilder<ComAdobeGraniteCsrfImplCSRFFilterInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.csrf.impl.CSRFFilter"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "filter.methods": filterMethods,
            "filter.enable.safe.user.agents": filterEnableSafeUserAgents,
            "filter.safe.user.agents": filterSafeUserAgents,
            "filter.excluded.paths": filterExcludedPaths
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeGraniteCsrfImplCSRFFilterInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter csrfTokenExpiresIn: (query)  (optional)
     - parameter slingAuthRequirements: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeGraniteCsrfImplCSRFServlet(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, csrfTokenExpiresIn: Int32? = nil, slingAuthRequirements: String? = nil, completion: ((data: ComAdobeGraniteCsrfImplCSRFServletInfo?, error: ErrorType?) -> Void)) {
        comAdobeGraniteCsrfImplCSRFServletWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, csrfTokenExpiresIn: csrfTokenExpiresIn, slingAuthRequirements: slingAuthRequirements).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.csrf.impl.CSRFServlet     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "csrf.token.expires.in" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "sling.auth.requirements" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter csrfTokenExpiresIn: (query)  (optional)
     - parameter slingAuthRequirements: (query)  (optional)

     - returns: RequestBuilder<ComAdobeGraniteCsrfImplCSRFServletInfo> 
     */
    public class func comAdobeGraniteCsrfImplCSRFServletWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, csrfTokenExpiresIn: Int32? = nil, slingAuthRequirements: String? = nil) -> RequestBuilder<ComAdobeGraniteCsrfImplCSRFServletInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.csrf.impl.CSRFServlet"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "csrf.token.expires.in": csrfTokenExpiresIn?.encodeToJSON(),
            "sling.auth.requirements": slingAuthRequirements
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeGraniteCsrfImplCSRFServletInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter username: (query)  (optional)
     - parameter encryptedPassword: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeGraniteDistributionCoreImplCryptoDistributionTransportSe(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, name: String? = nil, username: String? = nil, encryptedPassword: String? = nil, completion: ((data: ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeInfo?, error: ErrorType?) -> Void)) {
        comAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, name: name, username: username, encryptedPassword: encryptedPassword).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.distribution.core.impl.CryptoDistributionTransportSecretProvider     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "name" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "username" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "encryptedPassword" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter username: (query)  (optional)
     - parameter encryptedPassword: (query)  (optional)

     - returns: RequestBuilder<ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeInfo> 
     */
    public class func comAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, name: String? = nil, username: String? = nil, encryptedPassword: String? = nil) -> RequestBuilder<ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.distribution.core.impl.CryptoDistributionTransportSecretProvider"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "name": name,
            "username": username,
            "encryptedPassword": encryptedPassword
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter enabled: (query)  (optional)
     - parameter agentName: (query)  (optional)
     - parameter diffPath: (query)  (optional)
     - parameter observedPath: (query)  (optional)
     - parameter serviceName: (query)  (optional)
     - parameter propertyNames: (query)  (optional)
     - parameter distributionDelay: (query)  (optional)
     - parameter serviceUserTarget: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeGraniteDistributionCoreImplDiffDiffChangesObserver(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, enabled: Bool? = nil, agentName: String? = nil, diffPath: String? = nil, observedPath: String? = nil, serviceName: String? = nil, propertyNames: String? = nil, distributionDelay: Int32? = nil, serviceUserTarget: String? = nil, completion: ((data: ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverInfo?, error: ErrorType?) -> Void)) {
        comAdobeGraniteDistributionCoreImplDiffDiffChangesObserverWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, enabled: enabled, agentName: agentName, diffPath: diffPath, observedPath: observedPath, serviceName: serviceName, propertyNames: propertyNames, distributionDelay: distributionDelay, serviceUserTarget: serviceUserTarget).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.distribution.core.impl.diff.DiffChangesObserver     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "serviceUser.target" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "propertyNames" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "agentName" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "distributionDelay" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "observedPath" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "serviceName" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "enabled" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "diffPath" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter enabled: (query)  (optional)
     - parameter agentName: (query)  (optional)
     - parameter diffPath: (query)  (optional)
     - parameter observedPath: (query)  (optional)
     - parameter serviceName: (query)  (optional)
     - parameter propertyNames: (query)  (optional)
     - parameter distributionDelay: (query)  (optional)
     - parameter serviceUserTarget: (query)  (optional)

     - returns: RequestBuilder<ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverInfo> 
     */
    public class func comAdobeGraniteDistributionCoreImplDiffDiffChangesObserverWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, enabled: Bool? = nil, agentName: String? = nil, diffPath: String? = nil, observedPath: String? = nil, serviceName: String? = nil, propertyNames: String? = nil, distributionDelay: Int32? = nil, serviceUserTarget: String? = nil) -> RequestBuilder<ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.distribution.core.impl.diff.DiffChangesObserver"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "enabled": enabled,
            "agentName": agentName,
            "diffPath": diffPath,
            "observedPath": observedPath,
            "serviceName": serviceName,
            "propertyNames": propertyNames,
            "distributionDelay": distributionDelay?.encodeToJSON(),
            "serviceUser.target": serviceUserTarget
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter diffPath: (query)  (optional)
     - parameter serviceName: (query)  (optional)
     - parameter serviceUserTarget: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeGraniteDistributionCoreImplDiffDiffEventListener(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, diffPath: String? = nil, serviceName: String? = nil, serviceUserTarget: String? = nil, completion: ((data: ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerInfo?, error: ErrorType?) -> Void)) {
        comAdobeGraniteDistributionCoreImplDiffDiffEventListenerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, diffPath: diffPath, serviceName: serviceName, serviceUserTarget: serviceUserTarget).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.distribution.core.impl.diff.DiffEventListener     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "serviceUser.target" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "serviceName" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "diffPath" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter diffPath: (query)  (optional)
     - parameter serviceName: (query)  (optional)
     - parameter serviceUserTarget: (query)  (optional)

     - returns: RequestBuilder<ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerInfo> 
     */
    public class func comAdobeGraniteDistributionCoreImplDiffDiffEventListenerWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, diffPath: String? = nil, serviceName: String? = nil, serviceUserTarget: String? = nil) -> RequestBuilder<ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.distribution.core.impl.diff.DiffEventListener"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "diffPath": diffPath,
            "serviceName": serviceName,
            "serviceUser.target": serviceUserTarget
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter importerName: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeGraniteDistributionCoreImplDistributionToReplicationEven(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, importerName: [String]? = nil, completion: ((data: ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenInfo?, error: ErrorType?) -> Void)) {
        comAdobeGraniteDistributionCoreImplDistributionToReplicationEvenWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, importerName: importerName).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.distribution.core.impl.DistributionToReplicationEventTransformer     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "importer.name" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter importerName: (query)  (optional)

     - returns: RequestBuilder<ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenInfo> 
     */
    public class func comAdobeGraniteDistributionCoreImplDistributionToReplicationEvenWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, importerName: [String]? = nil) -> RequestBuilder<ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.distribution.core.impl.DistributionToReplicationEventTransformer"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "importer.name": importerName
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter providerName: (query)  (optional)
     - parameter forwardRequests: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeGraniteDistributionCoreImplReplicationAdaptersReplicat(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, providerName: String? = nil, forwardRequests: Bool? = nil, completion: ((data: ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatInfo?, error: ErrorType?) -> Void)) {
        comAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, providerName: providerName, forwardRequests: forwardRequests).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.distribution.core.impl.replication.adapters.ReplicationAgentProvider     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "forward.requests" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "providerName" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter providerName: (query)  (optional)
     - parameter forwardRequests: (query)  (optional)

     - returns: RequestBuilder<ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatInfo> 
     */
    public class func comAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, providerName: String? = nil, forwardRequests: Bool? = nil) -> RequestBuilder<ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.distribution.core.impl.replication.adapters.ReplicationAgentProvider"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "providerName": providerName,
            "forward.requests": forwardRequests
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter forwardRequests: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeGraniteDistributionCoreImplReplicationDistributionTrans(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, forwardRequests: Bool? = nil, completion: ((data: ComAdobeGraniteDistributionCoreImplReplicationDistributionTransInfo?, error: ErrorType?) -> Void)) {
        comAdobeGraniteDistributionCoreImplReplicationDistributionTransWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, forwardRequests: forwardRequests).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.distribution.core.impl.replication.DistributionTransportHandler     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "forward.requests" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter forwardRequests: (query)  (optional)

     - returns: RequestBuilder<ComAdobeGraniteDistributionCoreImplReplicationDistributionTransInfo> 
     */
    public class func comAdobeGraniteDistributionCoreImplReplicationDistributionTransWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, forwardRequests: Bool? = nil) -> RequestBuilder<ComAdobeGraniteDistributionCoreImplReplicationDistributionTransInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.distribution.core.impl.replication.DistributionTransportHandler"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "forward.requests": forwardRequests
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeGraniteDistributionCoreImplReplicationDistributionTransInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter serviceName: (query)  (optional)
     - parameter userId: (query)  (optional)
     - parameter accessTokenProviderTarget: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeGraniteDistributionCoreImplTransportAccessTokenDistribu(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, name: String? = nil, serviceName: String? = nil, userId: String? = nil, accessTokenProviderTarget: String? = nil, completion: ((data: ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuInfo?, error: ErrorType?) -> Void)) {
        comAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, name: name, serviceName: serviceName, userId: userId, accessTokenProviderTarget: accessTokenProviderTarget).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.distribution.core.impl.transport.AccessTokenDistributionTransportSecretProvider     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "accessTokenProvider.target" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "name" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "serviceName" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "userId" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter serviceName: (query)  (optional)
     - parameter userId: (query)  (optional)
     - parameter accessTokenProviderTarget: (query)  (optional)

     - returns: RequestBuilder<ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuInfo> 
     */
    public class func comAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, name: String? = nil, serviceName: String? = nil, userId: String? = nil, accessTokenProviderTarget: String? = nil) -> RequestBuilder<ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.distribution.core.impl.transport.AccessTokenDistributionTransportSecretProvider"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "name": name,
            "serviceName": serviceName,
            "userId": userId,
            "accessTokenProvider.target": accessTokenProviderTarget
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter featureName: (query)  (optional)
     - parameter featureDescription: (query)  (optional)
     - parameter httpHeaderName: (query)  (optional)
     - parameter httpHeaderValuepattern: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeGraniteFragsImplCheckHttpHeaderFlag(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, featureName: String? = nil, featureDescription: String? = nil, httpHeaderName: String? = nil, httpHeaderValuepattern: String? = nil, completion: ((data: ComAdobeGraniteFragsImplCheckHttpHeaderFlagInfo?, error: ErrorType?) -> Void)) {
        comAdobeGraniteFragsImplCheckHttpHeaderFlagWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, featureName: featureName, featureDescription: featureDescription, httpHeaderName: httpHeaderName, httpHeaderValuepattern: httpHeaderValuepattern).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.frags.impl.CheckHttpHeaderFlag     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "feature.description" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "http.header.valuepattern" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "http.header.name" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "feature.name" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter featureName: (query)  (optional)
     - parameter featureDescription: (query)  (optional)
     - parameter httpHeaderName: (query)  (optional)
     - parameter httpHeaderValuepattern: (query)  (optional)

     - returns: RequestBuilder<ComAdobeGraniteFragsImplCheckHttpHeaderFlagInfo> 
     */
    public class func comAdobeGraniteFragsImplCheckHttpHeaderFlagWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, featureName: String? = nil, featureDescription: String? = nil, httpHeaderName: String? = nil, httpHeaderValuepattern: String? = nil) -> RequestBuilder<ComAdobeGraniteFragsImplCheckHttpHeaderFlagInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.frags.impl.CheckHttpHeaderFlag"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "feature.name": featureName,
            "feature.description": featureDescription,
            "http.header.name": httpHeaderName,
            "http.header.valuepattern": httpHeaderValuepattern
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeGraniteFragsImplCheckHttpHeaderFlagInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter featureName: (query)  (optional)
     - parameter featureDescription: (query)  (optional)
     - parameter activePercentage: (query)  (optional)
     - parameter cookieName: (query)  (optional)
     - parameter cookieMaxAge: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeGraniteFragsImplRandomFeature(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, featureName: String? = nil, featureDescription: String? = nil, activePercentage: String? = nil, cookieName: String? = nil, cookieMaxAge: Int32? = nil, completion: ((data: ComAdobeGraniteFragsImplRandomFeatureInfo?, error: ErrorType?) -> Void)) {
        comAdobeGraniteFragsImplRandomFeatureWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, featureName: featureName, featureDescription: featureDescription, activePercentage: activePercentage, cookieName: cookieName, cookieMaxAge: cookieMaxAge).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.frags.impl.RandomFeature     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "feature.description" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "cookie.name" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "cookie.maxAge" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "active.percentage" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "feature.name" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter featureName: (query)  (optional)
     - parameter featureDescription: (query)  (optional)
     - parameter activePercentage: (query)  (optional)
     - parameter cookieName: (query)  (optional)
     - parameter cookieMaxAge: (query)  (optional)

     - returns: RequestBuilder<ComAdobeGraniteFragsImplRandomFeatureInfo> 
     */
    public class func comAdobeGraniteFragsImplRandomFeatureWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, featureName: String? = nil, featureDescription: String? = nil, activePercentage: String? = nil, cookieName: String? = nil, cookieMaxAge: Int32? = nil) -> RequestBuilder<ComAdobeGraniteFragsImplRandomFeatureInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.frags.impl.RandomFeature"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "feature.name": featureName,
            "feature.description": featureDescription,
            "active.percentage": activePercentage,
            "cookie.name": cookieName,
            "cookie.maxAge": cookieMaxAge?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeGraniteFragsImplRandomFeatureInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter comAdobeGraniteHttpcacheFileDocumentRoot: (query)  (optional)
     - parameter comAdobeGraniteHttpcacheFileIncludeHost: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeGraniteHttpcacheFileFileCacheStore(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, comAdobeGraniteHttpcacheFileDocumentRoot: String? = nil, comAdobeGraniteHttpcacheFileIncludeHost: String? = nil, completion: ((data: ComAdobeGraniteHttpcacheFileFileCacheStoreInfo?, error: ErrorType?) -> Void)) {
        comAdobeGraniteHttpcacheFileFileCacheStoreWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, comAdobeGraniteHttpcacheFileDocumentRoot: comAdobeGraniteHttpcacheFileDocumentRoot, comAdobeGraniteHttpcacheFileIncludeHost: comAdobeGraniteHttpcacheFileIncludeHost).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.httpcache.file.FileCacheStore     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "com.adobe.granite.httpcache.file.documentRoot" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "com.adobe.granite.httpcache.file.includeHost" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter comAdobeGraniteHttpcacheFileDocumentRoot: (query)  (optional)
     - parameter comAdobeGraniteHttpcacheFileIncludeHost: (query)  (optional)

     - returns: RequestBuilder<ComAdobeGraniteHttpcacheFileFileCacheStoreInfo> 
     */
    public class func comAdobeGraniteHttpcacheFileFileCacheStoreWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, comAdobeGraniteHttpcacheFileDocumentRoot: String? = nil, comAdobeGraniteHttpcacheFileIncludeHost: String? = nil) -> RequestBuilder<ComAdobeGraniteHttpcacheFileFileCacheStoreInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.httpcache.file.FileCacheStore"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "com.adobe.granite.httpcache.file.documentRoot": comAdobeGraniteHttpcacheFileDocumentRoot,
            "com.adobe.granite.httpcache.file.includeHost": comAdobeGraniteHttpcacheFileIncludeHost
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeGraniteHttpcacheFileFileCacheStoreInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter comAdobeGraniteHttpcacheUrlPaths: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeGraniteHttpcacheImplOuterCacheFilter(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, comAdobeGraniteHttpcacheUrlPaths: [String]? = nil, completion: ((data: ComAdobeGraniteHttpcacheImplOuterCacheFilterInfo?, error: ErrorType?) -> Void)) {
        comAdobeGraniteHttpcacheImplOuterCacheFilterWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, comAdobeGraniteHttpcacheUrlPaths: comAdobeGraniteHttpcacheUrlPaths).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.httpcache.impl.OuterCacheFilter     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "com.adobe.granite.httpcache.url.paths" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter comAdobeGraniteHttpcacheUrlPaths: (query)  (optional)

     - returns: RequestBuilder<ComAdobeGraniteHttpcacheImplOuterCacheFilterInfo> 
     */
    public class func comAdobeGraniteHttpcacheImplOuterCacheFilterWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, comAdobeGraniteHttpcacheUrlPaths: [String]? = nil) -> RequestBuilder<ComAdobeGraniteHttpcacheImplOuterCacheFilterInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.httpcache.impl.OuterCacheFilter"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "com.adobe.granite.httpcache.url.paths": comAdobeGraniteHttpcacheUrlPaths
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeGraniteHttpcacheImplOuterCacheFilterInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter pseudoPatterns: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeGraniteI18nImplBundlePseudoTranslations(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, pseudoPatterns: [String]? = nil, completion: ((data: ComAdobeGraniteI18nImplBundlePseudoTranslationsInfo?, error: ErrorType?) -> Void)) {
        comAdobeGraniteI18nImplBundlePseudoTranslationsWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, pseudoPatterns: pseudoPatterns).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.i18n.impl.bundle.PseudoTranslations     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "pseudo.patterns" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter pseudoPatterns: (query)  (optional)

     - returns: RequestBuilder<ComAdobeGraniteI18nImplBundlePseudoTranslationsInfo> 
     */
    public class func comAdobeGraniteI18nImplBundlePseudoTranslationsWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, pseudoPatterns: [String]? = nil) -> RequestBuilder<ComAdobeGraniteI18nImplBundlePseudoTranslationsInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.i18n.impl.bundle.PseudoTranslations"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "pseudo.patterns": pseudoPatterns
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeGraniteI18nImplBundlePseudoTranslationsInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter securityPreferencesName: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeGraniteI18nImplPreferencesLocaleResolverService(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, securityPreferencesName: String? = nil, completion: ((data: ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceInfo?, error: ErrorType?) -> Void)) {
        comAdobeGraniteI18nImplPreferencesLocaleResolverServiceWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, securityPreferencesName: securityPreferencesName).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.i18n.impl.PreferencesLocaleResolverService     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "security.preferences.name" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter securityPreferencesName: (query)  (optional)

     - returns: RequestBuilder<ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceInfo> 
     */
    public class func comAdobeGraniteI18nImplPreferencesLocaleResolverServiceWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, securityPreferencesName: String? = nil) -> RequestBuilder<ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.i18n.impl.PreferencesLocaleResolverService"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "security.preferences.name": securityPreferencesName
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter graniteInfocollectorIncludeThreadDumps: (query)  (optional)
     - parameter graniteInfocollectorIncludeHeapDump: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeGraniteInfocollectorInfoCollector(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, graniteInfocollectorIncludeThreadDumps: Bool? = nil, graniteInfocollectorIncludeHeapDump: Bool? = nil, completion: ((data: ComAdobeGraniteInfocollectorInfoCollectorInfo?, error: ErrorType?) -> Void)) {
        comAdobeGraniteInfocollectorInfoCollectorWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, graniteInfocollectorIncludeThreadDumps: graniteInfocollectorIncludeThreadDumps, graniteInfocollectorIncludeHeapDump: graniteInfocollectorIncludeHeapDump).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.infocollector.InfoCollector     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "granite.infocollector.includeThreadDumps" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "granite.infocollector.includeHeapDump" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter graniteInfocollectorIncludeThreadDumps: (query)  (optional)
     - parameter graniteInfocollectorIncludeHeapDump: (query)  (optional)

     - returns: RequestBuilder<ComAdobeGraniteInfocollectorInfoCollectorInfo> 
     */
    public class func comAdobeGraniteInfocollectorInfoCollectorWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, graniteInfocollectorIncludeThreadDumps: Bool? = nil, graniteInfocollectorIncludeHeapDump: Bool? = nil) -> RequestBuilder<ComAdobeGraniteInfocollectorInfoCollectorInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.infocollector.InfoCollector"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "granite.infocollector.includeThreadDumps": graniteInfocollectorIncludeThreadDumps,
            "granite.infocollector.includeHeapDump": graniteInfocollectorIncludeHeapDump
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeGraniteInfocollectorInfoCollectorInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter comAdobeGraniteJettySslPort: (query)  (optional)
     - parameter comAdobeGraniteJettySslKeystoreUser: (query)  (optional)
     - parameter comAdobeGraniteJettySslKeystorePassword: (query)  (optional)
     - parameter comAdobeGraniteJettySslCiphersuitesExcluded: (query)  (optional)
     - parameter comAdobeGraniteJettySslCiphersuitesIncluded: (query)  (optional)
     - parameter comAdobeGraniteJettySslClientCertificate: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeGraniteJettySslInternalGraniteSslConnectorFactory(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, comAdobeGraniteJettySslPort: Int32? = nil, comAdobeGraniteJettySslKeystoreUser: String? = nil, comAdobeGraniteJettySslKeystorePassword: String? = nil, comAdobeGraniteJettySslCiphersuitesExcluded: [String]? = nil, comAdobeGraniteJettySslCiphersuitesIncluded: [String]? = nil, comAdobeGraniteJettySslClientCertificate: String? = nil, completion: ((data: ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryInfo?, error: ErrorType?) -> Void)) {
        comAdobeGraniteJettySslInternalGraniteSslConnectorFactoryWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, comAdobeGraniteJettySslPort: comAdobeGraniteJettySslPort, comAdobeGraniteJettySslKeystoreUser: comAdobeGraniteJettySslKeystoreUser, comAdobeGraniteJettySslKeystorePassword: comAdobeGraniteJettySslKeystorePassword, comAdobeGraniteJettySslCiphersuitesExcluded: comAdobeGraniteJettySslCiphersuitesExcluded, comAdobeGraniteJettySslCiphersuitesIncluded: comAdobeGraniteJettySslCiphersuitesIncluded, comAdobeGraniteJettySslClientCertificate: comAdobeGraniteJettySslClientCertificate).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.jetty.ssl.internal.GraniteSslConnectorFactory     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "service_location" : "service_location",
  "bundle_location" : "bundle_location",
  "description" : "description",
  "pid" : "pid",
  "additionalProperties" : "additionalProperties",
  "title" : "title",
  "properties" : {
    "com.adobe.granite.jetty.ssl.ciphersuites.included" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "com.adobe.granite.jetty.ssl.keystore.password" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "com.adobe.granite.jetty.ssl.keystore.user" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "com.adobe.granite.jetty.ssl.client.certificate" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : {
        "values" : "",
        "labels" : ""
      },
      "value" : ""
    },
    "com.adobe.granite.jetty.ssl.ciphersuites.excluded" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "com.adobe.granite.jetty.ssl.port" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter comAdobeGraniteJettySslPort: (query)  (optional)
     - parameter comAdobeGraniteJettySslKeystoreUser: (query)  (optional)
     - parameter comAdobeGraniteJettySslKeystorePassword: (query)  (optional)
     - parameter comAdobeGraniteJettySslCiphersuitesExcluded: (query)  (optional)
     - parameter comAdobeGraniteJettySslCiphersuitesIncluded: (query)  (optional)
     - parameter comAdobeGraniteJettySslClientCertificate: (query)  (optional)

     - returns: RequestBuilder<ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryInfo> 
     */
    public class func comAdobeGraniteJettySslInternalGraniteSslConnectorFactoryWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, comAdobeGraniteJettySslPort: Int32? = nil, comAdobeGraniteJettySslKeystoreUser: String? = nil, comAdobeGraniteJettySslKeystorePassword: String? = nil, comAdobeGraniteJettySslCiphersuitesExcluded: [String]? = nil, comAdobeGraniteJettySslCiphersuitesIncluded: [String]? = nil, comAdobeGraniteJettySslClientCertificate: String? = nil) -> RequestBuilder<ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.jetty.ssl.internal.GraniteSslConnectorFactory"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "com.adobe.granite.jetty.ssl.port": comAdobeGraniteJettySslPort?.encodeToJSON(),
            "com.adobe.granite.jetty.ssl.keystore.user": comAdobeGraniteJettySslKeystoreUser,
            "com.adobe.granite.jetty.ssl.keystore.password": comAdobeGraniteJettySslKeystorePassword,
            "com.adobe.granite.jetty.ssl.ciphersuites.excluded": comAdobeGraniteJettySslCiphersuitesExcluded,
            "com.adobe.granite.jetty.ssl.ciphersuites.included": comAdobeGraniteJettySslCiphersuitesIncluded,
            "com.adobe.granite.jetty.ssl.client.certificate": comAdobeGraniteJettySslClientCertificate
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter checkInternval: (query)  (optional)
     - parameter excludeIds: (query)  (optional)
     - parameter encryptPing: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeGraniteLicenseImplLicenseCheckFilter(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, checkInternval: Int32? = nil, excludeIds: [String]? = nil, encryptPing: Bool? = nil, completion: ((data: ComAdobeGraniteLicenseImplLicenseCheckFilterInfo?, error: ErrorType?) -> Void)) {
        comAdobeGraniteLicenseImplLicenseCheckFilterWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, checkInternval: checkInternval, excludeIds: excludeIds, encryptPing: encryptPing).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.license.impl.LicenseCheckFilter     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "checkInternval" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "excludeIds" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "encryptPing" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter checkInternval: (query)  (optional)
     - parameter excludeIds: (query)  (optional)
     - parameter encryptPing: (query)  (optional)

     - returns: RequestBuilder<ComAdobeGraniteLicenseImplLicenseCheckFilterInfo> 
     */
    public class func comAdobeGraniteLicenseImplLicenseCheckFilterWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, checkInternval: Int32? = nil, excludeIds: [String]? = nil, encryptPing: Bool? = nil) -> RequestBuilder<ComAdobeGraniteLicenseImplLicenseCheckFilterInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.license.impl.LicenseCheckFilter"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "checkInternval": checkInternval?.encodeToJSON(),
            "excludeIds": excludeIds,
            "encryptPing": encryptPing
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeGraniteLicenseImplLicenseCheckFilterInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter messagesQueueSize: (query)  (optional)
     - parameter loggerConfig: (query)  (optional)
     - parameter messagesSize: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeGraniteLoggingImplLogAnalyserImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, messagesQueueSize: Int32? = nil, loggerConfig: [String]? = nil, messagesSize: Int32? = nil, completion: ((data: ComAdobeGraniteLoggingImplLogAnalyserImplInfo?, error: ErrorType?) -> Void)) {
        comAdobeGraniteLoggingImplLogAnalyserImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, messagesQueueSize: messagesQueueSize, loggerConfig: loggerConfig, messagesSize: messagesSize).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.logging.impl.LogAnalyserImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "logger.config" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "messages.size" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "messages.queue.size" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter messagesQueueSize: (query)  (optional)
     - parameter loggerConfig: (query)  (optional)
     - parameter messagesSize: (query)  (optional)

     - returns: RequestBuilder<ComAdobeGraniteLoggingImplLogAnalyserImplInfo> 
     */
    public class func comAdobeGraniteLoggingImplLogAnalyserImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, messagesQueueSize: Int32? = nil, loggerConfig: [String]? = nil, messagesSize: Int32? = nil) -> RequestBuilder<ComAdobeGraniteLoggingImplLogAnalyserImplInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.logging.impl.LogAnalyserImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "messages.queue.size": messagesQueueSize?.encodeToJSON(),
            "logger.config": loggerConfig,
            "messages.size": messagesSize?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeGraniteLoggingImplLogAnalyserImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeGraniteLoggingImplLogErrorHealthCheck(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcTags: [String]? = nil, completion: ((data: ComAdobeGraniteLoggingImplLogErrorHealthCheckInfo?, error: ErrorType?) -> Void)) {
        comAdobeGraniteLoggingImplLogErrorHealthCheckWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, hcTags: hcTags).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.logging.impl.LogErrorHealthCheck     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "hc.tags" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcTags: (query)  (optional)

     - returns: RequestBuilder<ComAdobeGraniteLoggingImplLogErrorHealthCheckInfo> 
     */
    public class func comAdobeGraniteLoggingImplLogErrorHealthCheckWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcTags: [String]? = nil) -> RequestBuilder<ComAdobeGraniteLoggingImplLogErrorHealthCheckInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.logging.impl.LogErrorHealthCheck"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "hc.tags": hcTags
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeGraniteLoggingImplLogErrorHealthCheckInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter graniteMaintenanceMandatory: (query)  (optional)
     - parameter jobTopics: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTask(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, graniteMaintenanceMandatory: Bool? = nil, jobTopics: String? = nil, completion: ((data: ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskInfo?, error: ErrorType?) -> Void)) {
        comAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, graniteMaintenanceMandatory: graniteMaintenanceMandatory, jobTopics: jobTopics).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.maintenance.crx.impl.DataStoreGarbageCollectionTask     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "service_location" : "service_location",
  "bundle_location" : "bundle_location",
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "job.topics" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "granite.maintenance.mandatory" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter graniteMaintenanceMandatory: (query)  (optional)
     - parameter jobTopics: (query)  (optional)

     - returns: RequestBuilder<ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskInfo> 
     */
    public class func comAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, graniteMaintenanceMandatory: Bool? = nil, jobTopics: String? = nil) -> RequestBuilder<ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.maintenance.crx.impl.DataStoreGarbageCollectionTask"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "granite.maintenance.mandatory": graniteMaintenanceMandatory,
            "job.topics": jobTopics
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter jobTopics: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTask(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, jobTopics: String? = nil, completion: ((data: ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskInfo?, error: ErrorType?) -> Void)) {
        comAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, jobTopics: jobTopics).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.maintenance.crx.impl.LuceneBinariesCleanupTask     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "service_location" : "service_location",
  "bundle_location" : "bundle_location",
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "job.topics" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter jobTopics: (query)  (optional)

     - returns: RequestBuilder<ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskInfo> 
     */
    public class func comAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, jobTopics: String? = nil) -> RequestBuilder<ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.maintenance.crx.impl.LuceneBinariesCleanupTask"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "job.topics": jobTopics
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter fullGcDays: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeGraniteMaintenanceCrxImplRevisionCleanupTask(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, fullGcDays: [String]? = nil, completion: ((data: ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskInfo?, error: ErrorType?) -> Void)) {
        comAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, fullGcDays: fullGcDays).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.maintenance.crx.impl.RevisionCleanupTask     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "full.gc.days" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter fullGcDays: (query)  (optional)

     - returns: RequestBuilder<ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskInfo> 
     */
    public class func comAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, fullGcDays: [String]? = nil) -> RequestBuilder<ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.maintenance.crx.impl.RevisionCleanupTask"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "full.gc.days": fullGcDays
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter scriptFilename: (query)  (optional)
     - parameter scriptDisplay: (query)  (optional)
     - parameter scriptPath: (query)  (optional)
     - parameter scriptPlatform: (query)  (optional)
     - parameter interval: (query)  (optional)
     - parameter jmxdomain: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeGraniteMonitoringImplScriptConfigImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, scriptFilename: String? = nil, scriptDisplay: String? = nil, scriptPath: String? = nil, scriptPlatform: [String]? = nil, interval: Int32? = nil, jmxdomain: String? = nil, completion: ((data: ComAdobeGraniteMonitoringImplScriptConfigImplInfo?, error: ErrorType?) -> Void)) {
        comAdobeGraniteMonitoringImplScriptConfigImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, scriptFilename: scriptFilename, scriptDisplay: scriptDisplay, scriptPath: scriptPath, scriptPlatform: scriptPlatform, interval: interval, jmxdomain: jmxdomain).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.monitoring.impl.ScriptConfigImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "script.path" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "interval" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "script.filename" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "script.display" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "script.platform" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "jmxdomain" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter scriptFilename: (query)  (optional)
     - parameter scriptDisplay: (query)  (optional)
     - parameter scriptPath: (query)  (optional)
     - parameter scriptPlatform: (query)  (optional)
     - parameter interval: (query)  (optional)
     - parameter jmxdomain: (query)  (optional)

     - returns: RequestBuilder<ComAdobeGraniteMonitoringImplScriptConfigImplInfo> 
     */
    public class func comAdobeGraniteMonitoringImplScriptConfigImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, scriptFilename: String? = nil, scriptDisplay: String? = nil, scriptPath: String? = nil, scriptPlatform: [String]? = nil, interval: Int32? = nil, jmxdomain: String? = nil) -> RequestBuilder<ComAdobeGraniteMonitoringImplScriptConfigImplInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.monitoring.impl.ScriptConfigImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "script.filename": scriptFilename,
            "script.display": scriptDisplay,
            "script.path": scriptPath,
            "script.platform": scriptPlatform,
            "interval": interval?.encodeToJSON(),
            "jmxdomain": jmxdomain
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeGraniteMonitoringImplScriptConfigImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter path: (query)  (optional)
     - parameter jaasControlFlag: (query)  (optional)
     - parameter jaasRealmName: (query)  (optional)
     - parameter jaasRanking: (query)  (optional)
     - parameter oauthOfflineValidation: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHan(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, path: String? = nil, jaasControlFlag: String? = nil, jaasRealmName: String? = nil, jaasRanking: Int32? = nil, oauthOfflineValidation: Bool? = nil, completion: ((data: ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanInfo?, error: ErrorType?) -> Void)) {
        comAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, path: path, jaasControlFlag: jaasControlFlag, jaasRealmName: jaasRealmName, jaasRanking: jaasRanking, oauthOfflineValidation: oauthOfflineValidation).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.oauth.server.auth.impl.OAuth2ServerAuthenticationHandler     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "oauth.offline.validation" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "path" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "jaas.controlFlag" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "jaas.realmName" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "jaas.ranking" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter path: (query)  (optional)
     - parameter jaasControlFlag: (query)  (optional)
     - parameter jaasRealmName: (query)  (optional)
     - parameter jaasRanking: (query)  (optional)
     - parameter oauthOfflineValidation: (query)  (optional)

     - returns: RequestBuilder<ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanInfo> 
     */
    public class func comAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, path: String? = nil, jaasControlFlag: String? = nil, jaasRealmName: String? = nil, jaasRanking: Int32? = nil, oauthOfflineValidation: Bool? = nil) -> RequestBuilder<ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.oauth.server.auth.impl.OAuth2ServerAuthenticationHandler"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "path": path,
            "jaas.controlFlag": jaasControlFlag,
            "jaas.realmName": jaasRealmName,
            "jaas.ranking": jaasRanking?.encodeToJSON(),
            "oauth.offline.validation": oauthOfflineValidation
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter schedulerExpression: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeGraniteOauthServerImplAccessTokenCleanupTask(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, schedulerExpression: String? = nil, completion: ((data: ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskInfo?, error: ErrorType?) -> Void)) {
        comAdobeGraniteOauthServerImplAccessTokenCleanupTaskWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, schedulerExpression: schedulerExpression).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.oauth.server.impl.AccessTokenCleanupTask     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "scheduler.expression" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter schedulerExpression: (query)  (optional)

     - returns: RequestBuilder<ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskInfo> 
     */
    public class func comAdobeGraniteOauthServerImplAccessTokenCleanupTaskWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, schedulerExpression: String? = nil) -> RequestBuilder<ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.oauth.server.impl.AccessTokenCleanupTask"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "scheduler.expression": schedulerExpression
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter oauthClientRevocationActive: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeGraniteOauthServerImplOAuth2ClientRevocationServlet(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, oauthClientRevocationActive: Bool? = nil, completion: ((data: ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletInfo?, error: ErrorType?) -> Void)) {
        comAdobeGraniteOauthServerImplOAuth2ClientRevocationServletWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, oauthClientRevocationActive: oauthClientRevocationActive).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.oauth.server.impl.OAuth2ClientRevocationServlet     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "oauth.client.revocation.active" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter oauthClientRevocationActive: (query)  (optional)

     - returns: RequestBuilder<ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletInfo> 
     */
    public class func comAdobeGraniteOauthServerImplOAuth2ClientRevocationServletWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, oauthClientRevocationActive: Bool? = nil) -> RequestBuilder<ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.oauth.server.impl.OAuth2ClientRevocationServlet"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "oauth.client.revocation.active": oauthClientRevocationActive
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter slingServletPaths: (query)  (optional)
     - parameter oauthRevocationActive: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeGraniteOauthServerImplOAuth2RevocationEndpointServlet(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, slingServletPaths: String? = nil, oauthRevocationActive: Bool? = nil, completion: ((data: ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletInfo?, error: ErrorType?) -> Void)) {
        comAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, slingServletPaths: slingServletPaths, oauthRevocationActive: oauthRevocationActive).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.oauth.server.impl.OAuth2RevocationEndpointServlet     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "oauth.revocation.active" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "sling.servlet.paths" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter slingServletPaths: (query)  (optional)
     - parameter oauthRevocationActive: (query)  (optional)

     - returns: RequestBuilder<ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletInfo> 
     */
    public class func comAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, slingServletPaths: String? = nil, oauthRevocationActive: Bool? = nil) -> RequestBuilder<ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.oauth.server.impl.OAuth2RevocationEndpointServlet"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "sling.servlet.paths": slingServletPaths,
            "oauth.revocation.active": oauthRevocationActive
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter oauthIssuer: (query)  (optional)
     - parameter oauthAccessTokenExpiresIn: (query)  (optional)
     - parameter osgiHttpWhiteboardServletPattern: (query)  (optional)
     - parameter osgiHttpWhiteboardContextSelect: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeGraniteOauthServerImplOAuth2TokenEndpointServlet(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, oauthIssuer: String? = nil, oauthAccessTokenExpiresIn: String? = nil, osgiHttpWhiteboardServletPattern: String? = nil, osgiHttpWhiteboardContextSelect: String? = nil, completion: ((data: ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletInfo?, error: ErrorType?) -> Void)) {
        comAdobeGraniteOauthServerImplOAuth2TokenEndpointServletWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, oauthIssuer: oauthIssuer, oauthAccessTokenExpiresIn: oauthAccessTokenExpiresIn, osgiHttpWhiteboardServletPattern: osgiHttpWhiteboardServletPattern, osgiHttpWhiteboardContextSelect: osgiHttpWhiteboardContextSelect).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.oauth.server.impl.OAuth2TokenEndpointServlet     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "oauth.issuer" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "osgi.http.whiteboard.servlet.pattern" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "osgi.http.whiteboard.context.select" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "oauth.access.token.expires.in" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter oauthIssuer: (query)  (optional)
     - parameter oauthAccessTokenExpiresIn: (query)  (optional)
     - parameter osgiHttpWhiteboardServletPattern: (query)  (optional)
     - parameter osgiHttpWhiteboardContextSelect: (query)  (optional)

     - returns: RequestBuilder<ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletInfo> 
     */
    public class func comAdobeGraniteOauthServerImplOAuth2TokenEndpointServletWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, oauthIssuer: String? = nil, oauthAccessTokenExpiresIn: String? = nil, osgiHttpWhiteboardServletPattern: String? = nil, osgiHttpWhiteboardContextSelect: String? = nil) -> RequestBuilder<ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.oauth.server.impl.OAuth2TokenEndpointServlet"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "oauth.issuer": oauthIssuer,
            "oauth.access.token.expires.in": oauthAccessTokenExpiresIn,
            "osgi.http.whiteboard.servlet.pattern": osgiHttpWhiteboardServletPattern,
            "osgi.http.whiteboard.context.select": osgiHttpWhiteboardContextSelect
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter oauthTokenRevocationActive: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeGraniteOauthServerImplOAuth2TokenRevocationServlet(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, oauthTokenRevocationActive: Bool? = nil, completion: ((data: ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletInfo?, error: ErrorType?) -> Void)) {
        comAdobeGraniteOauthServerImplOAuth2TokenRevocationServletWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, oauthTokenRevocationActive: oauthTokenRevocationActive).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.oauth.server.impl.OAuth2TokenRevocationServlet     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "oauth.token.revocation.active" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter oauthTokenRevocationActive: (query)  (optional)

     - returns: RequestBuilder<ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletInfo> 
     */
    public class func comAdobeGraniteOauthServerImplOAuth2TokenRevocationServletWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, oauthTokenRevocationActive: Bool? = nil) -> RequestBuilder<ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.oauth.server.impl.OAuth2TokenRevocationServlet"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "oauth.token.revocation.active": oauthTokenRevocationActive
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter offloadingTransporter: (query)  (optional)
     - parameter offloadingCleanupPayload: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeGraniteOffloadingImplOffloadingConfigurator(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, offloadingTransporter: String? = nil, offloadingCleanupPayload: Bool? = nil, completion: ((data: ComAdobeGraniteOffloadingImplOffloadingConfiguratorInfo?, error: ErrorType?) -> Void)) {
        comAdobeGraniteOffloadingImplOffloadingConfiguratorWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, offloadingTransporter: offloadingTransporter, offloadingCleanupPayload: offloadingCleanupPayload).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.offloading.impl.OffloadingConfigurator     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "offloading.cleanup.payload" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "offloading.transporter" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter offloadingTransporter: (query)  (optional)
     - parameter offloadingCleanupPayload: (query)  (optional)

     - returns: RequestBuilder<ComAdobeGraniteOffloadingImplOffloadingConfiguratorInfo> 
     */
    public class func comAdobeGraniteOffloadingImplOffloadingConfiguratorWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, offloadingTransporter: String? = nil, offloadingCleanupPayload: Bool? = nil) -> RequestBuilder<ComAdobeGraniteOffloadingImplOffloadingConfiguratorInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.offloading.impl.OffloadingConfigurator"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "offloading.transporter": offloadingTransporter,
            "offloading.cleanup.payload": offloadingCleanupPayload
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeGraniteOffloadingImplOffloadingConfiguratorInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter offloadingJobclonerEnabled: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeGraniteOffloadingImplOffloadingJobCloner(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, offloadingJobclonerEnabled: Bool? = nil, completion: ((data: ComAdobeGraniteOffloadingImplOffloadingJobClonerInfo?, error: ErrorType?) -> Void)) {
        comAdobeGraniteOffloadingImplOffloadingJobClonerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, offloadingJobclonerEnabled: offloadingJobclonerEnabled).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.offloading.impl.OffloadingJobCloner     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "service_location" : "service_location",
  "bundle_location" : "bundle_location",
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "offloading.jobcloner.enabled" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter offloadingJobclonerEnabled: (query)  (optional)

     - returns: RequestBuilder<ComAdobeGraniteOffloadingImplOffloadingJobClonerInfo> 
     */
    public class func comAdobeGraniteOffloadingImplOffloadingJobClonerWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, offloadingJobclonerEnabled: Bool? = nil) -> RequestBuilder<ComAdobeGraniteOffloadingImplOffloadingJobClonerInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.offloading.impl.OffloadingJobCloner"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "offloading.jobcloner.enabled": offloadingJobclonerEnabled
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeGraniteOffloadingImplOffloadingJobClonerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter offloadingOffloaderEnabled: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeGraniteOffloadingImplOffloadingJobOffloader(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, offloadingOffloaderEnabled: Bool? = nil, completion: ((data: ComAdobeGraniteOffloadingImplOffloadingJobOffloaderInfo?, error: ErrorType?) -> Void)) {
        comAdobeGraniteOffloadingImplOffloadingJobOffloaderWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, offloadingOffloaderEnabled: offloadingOffloaderEnabled).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.offloading.impl.OffloadingJobOffloader     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "service_location" : "service_location",
  "bundle_location" : "bundle_location",
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "offloading.offloader.enabled" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter offloadingOffloaderEnabled: (query)  (optional)

     - returns: RequestBuilder<ComAdobeGraniteOffloadingImplOffloadingJobOffloaderInfo> 
     */
    public class func comAdobeGraniteOffloadingImplOffloadingJobOffloaderWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, offloadingOffloaderEnabled: Bool? = nil) -> RequestBuilder<ComAdobeGraniteOffloadingImplOffloadingJobOffloaderInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.offloading.impl.OffloadingJobOffloader"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "offloading.offloader.enabled": offloadingOffloaderEnabled
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeGraniteOffloadingImplOffloadingJobOffloaderInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter offloadingAgentmanagerEnabled: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeGraniteOffloadingImplTransporterOffloadingAgentManager(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, offloadingAgentmanagerEnabled: Bool? = nil, completion: ((data: ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerInfo?, error: ErrorType?) -> Void)) {
        comAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, offloadingAgentmanagerEnabled: offloadingAgentmanagerEnabled).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.offloading.impl.transporter.OffloadingAgentManager     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "service_location" : "service_location",
  "bundle_location" : "bundle_location",
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "offloading.agentmanager.enabled" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter offloadingAgentmanagerEnabled: (query)  (optional)

     - returns: RequestBuilder<ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerInfo> 
     */
    public class func comAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, offloadingAgentmanagerEnabled: Bool? = nil) -> RequestBuilder<ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.offloading.impl.transporter.OffloadingAgentManager"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "offloading.agentmanager.enabled": offloadingAgentmanagerEnabled
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter defaultTransportAgentToWorkerPrefix: (query)  (optional)
     - parameter defaultTransportAgentToMasterPrefix: (query)  (optional)
     - parameter defaultTransportInputPackage: (query)  (optional)
     - parameter defaultTransportOutputPackage: (query)  (optional)
     - parameter defaultTransportReplicationSynchronous: (query)  (optional)
     - parameter defaultTransportContentpackage: (query)  (optional)
     - parameter offloadingTransporterDefaultEnabled: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspo(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, defaultTransportAgentToWorkerPrefix: String? = nil, defaultTransportAgentToMasterPrefix: String? = nil, defaultTransportInputPackage: String? = nil, defaultTransportOutputPackage: String? = nil, defaultTransportReplicationSynchronous: Bool? = nil, defaultTransportContentpackage: Bool? = nil, offloadingTransporterDefaultEnabled: Bool? = nil, completion: ((data: ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoInfo?, error: ErrorType?) -> Void)) {
        comAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, defaultTransportAgentToWorkerPrefix: defaultTransportAgentToWorkerPrefix, defaultTransportAgentToMasterPrefix: defaultTransportAgentToMasterPrefix, defaultTransportInputPackage: defaultTransportInputPackage, defaultTransportOutputPackage: defaultTransportOutputPackage, defaultTransportReplicationSynchronous: defaultTransportReplicationSynchronous, defaultTransportContentpackage: defaultTransportContentpackage, offloadingTransporterDefaultEnabled: offloadingTransporterDefaultEnabled).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.offloading.impl.transporter.OffloadingDefaultTransporter     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "service_location" : "service_location",
  "bundle_location" : "bundle_location",
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "default.transport.agent-to-worker.prefix" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "default.transport.input.package" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "offloading.transporter.default.enabled" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "default.transport.contentpackage" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "default.transport.agent-to-master.prefix" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "default.transport.output.package" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "default.transport.replication.synchronous" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter defaultTransportAgentToWorkerPrefix: (query)  (optional)
     - parameter defaultTransportAgentToMasterPrefix: (query)  (optional)
     - parameter defaultTransportInputPackage: (query)  (optional)
     - parameter defaultTransportOutputPackage: (query)  (optional)
     - parameter defaultTransportReplicationSynchronous: (query)  (optional)
     - parameter defaultTransportContentpackage: (query)  (optional)
     - parameter offloadingTransporterDefaultEnabled: (query)  (optional)

     - returns: RequestBuilder<ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoInfo> 
     */
    public class func comAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, defaultTransportAgentToWorkerPrefix: String? = nil, defaultTransportAgentToMasterPrefix: String? = nil, defaultTransportInputPackage: String? = nil, defaultTransportOutputPackage: String? = nil, defaultTransportReplicationSynchronous: Bool? = nil, defaultTransportContentpackage: Bool? = nil, offloadingTransporterDefaultEnabled: Bool? = nil) -> RequestBuilder<ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.offloading.impl.transporter.OffloadingDefaultTransporter"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "default.transport.agent-to-worker.prefix": defaultTransportAgentToWorkerPrefix,
            "default.transport.agent-to-master.prefix": defaultTransportAgentToMasterPrefix,
            "default.transport.input.package": defaultTransportInputPackage,
            "default.transport.output.package": defaultTransportOutputPackage,
            "default.transport.replication.synchronous": defaultTransportReplicationSynchronous,
            "default.transport.contentpackage": defaultTransportContentpackage,
            "offloading.transporter.default.enabled": offloadingTransporterDefaultEnabled
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter omnisearchSuggestionRequiretextMin: (query)  (optional)
     - parameter omnisearchSuggestionSpellcheckRequire: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeGraniteOmnisearchImplCoreOmniSearchServiceImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, omnisearchSuggestionRequiretextMin: Int32? = nil, omnisearchSuggestionSpellcheckRequire: Bool? = nil, completion: ((data: ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplInfo?, error: ErrorType?) -> Void)) {
        comAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, omnisearchSuggestionRequiretextMin: omnisearchSuggestionRequiretextMin, omnisearchSuggestionSpellcheckRequire: omnisearchSuggestionSpellcheckRequire).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.omnisearch.impl.core.OmniSearchServiceImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "omnisearch.suggestion.requiretext.min" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "omnisearch.suggestion.spellcheck.require" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter omnisearchSuggestionRequiretextMin: (query)  (optional)
     - parameter omnisearchSuggestionSpellcheckRequire: (query)  (optional)

     - returns: RequestBuilder<ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplInfo> 
     */
    public class func comAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, omnisearchSuggestionRequiretextMin: Int32? = nil, omnisearchSuggestionSpellcheckRequire: Bool? = nil) -> RequestBuilder<ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.omnisearch.impl.core.OmniSearchServiceImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "omnisearch.suggestion.requiretext.min": omnisearchSuggestionRequiretextMin?.encodeToJSON(),
            "omnisearch.suggestion.spellcheck.require": omnisearchSuggestionSpellcheckRequire
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter optoutCookies: (query)  (optional)
     - parameter optoutHeaders: (query)  (optional)
     - parameter optoutWhitelistCookies: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeGraniteOptoutImplOptOutServiceImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, optoutCookies: [String]? = nil, optoutHeaders: [String]? = nil, optoutWhitelistCookies: [String]? = nil, completion: ((data: ComAdobeGraniteOptoutImplOptOutServiceImplInfo?, error: ErrorType?) -> Void)) {
        comAdobeGraniteOptoutImplOptOutServiceImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, optoutCookies: optoutCookies, optoutHeaders: optoutHeaders, optoutWhitelistCookies: optoutWhitelistCookies).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.optout.impl.OptOutServiceImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "service_location" : "service_location",
  "bundle_location" : "bundle_location",
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "optout.headers" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "optout.cookies" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "optout.whitelist.cookies" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter optoutCookies: (query)  (optional)
     - parameter optoutHeaders: (query)  (optional)
     - parameter optoutWhitelistCookies: (query)  (optional)

     - returns: RequestBuilder<ComAdobeGraniteOptoutImplOptOutServiceImplInfo> 
     */
    public class func comAdobeGraniteOptoutImplOptOutServiceImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, optoutCookies: [String]? = nil, optoutHeaders: [String]? = nil, optoutWhitelistCookies: [String]? = nil) -> RequestBuilder<ComAdobeGraniteOptoutImplOptOutServiceImplInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.optout.impl.OptOutServiceImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "optout.cookies": optoutCookies,
            "optout.headers": optoutHeaders,
            "optout.whitelist.cookies": optoutWhitelistCookies
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeGraniteOptoutImplOptOutServiceImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter indexingCriticalThreshold: (query)  (optional)
     - parameter indexingWarnThreshold: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeGraniteQueriesImplHcAsyncIndexHealthCheck(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, indexingCriticalThreshold: Int32? = nil, indexingWarnThreshold: Int32? = nil, hcTags: [String]? = nil, completion: ((data: ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckInfo?, error: ErrorType?) -> Void)) {
        comAdobeGraniteQueriesImplHcAsyncIndexHealthCheckWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, indexingCriticalThreshold: indexingCriticalThreshold, indexingWarnThreshold: indexingWarnThreshold, hcTags: hcTags).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.queries.impl.hc.AsyncIndexHealthCheck     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "indexing.critical.threshold" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "indexing.warn.threshold" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "hc.tags" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter indexingCriticalThreshold: (query)  (optional)
     - parameter indexingWarnThreshold: (query)  (optional)
     - parameter hcTags: (query)  (optional)

     - returns: RequestBuilder<ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckInfo> 
     */
    public class func comAdobeGraniteQueriesImplHcAsyncIndexHealthCheckWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, indexingCriticalThreshold: Int32? = nil, indexingWarnThreshold: Int32? = nil, hcTags: [String]? = nil) -> RequestBuilder<ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.queries.impl.hc.AsyncIndexHealthCheck"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "indexing.critical.threshold": indexingCriticalThreshold?.encodeToJSON(),
            "indexing.warn.threshold": indexingWarnThreshold?.encodeToJSON(),
            "hc.tags": hcTags
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter largeIndexCriticalThreshold: (query)  (optional)
     - parameter largeIndexWarnThreshold: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeGraniteQueriesImplHcLargeIndexHealthCheck(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, largeIndexCriticalThreshold: Int32? = nil, largeIndexWarnThreshold: Int32? = nil, hcTags: [String]? = nil, completion: ((data: ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckInfo?, error: ErrorType?) -> Void)) {
        comAdobeGraniteQueriesImplHcLargeIndexHealthCheckWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, largeIndexCriticalThreshold: largeIndexCriticalThreshold, largeIndexWarnThreshold: largeIndexWarnThreshold, hcTags: hcTags).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.queries.impl.hc.LargeIndexHealthCheck     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "large.index.critical.threshold" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "hc.tags" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "large.index.warn.threshold" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter largeIndexCriticalThreshold: (query)  (optional)
     - parameter largeIndexWarnThreshold: (query)  (optional)
     - parameter hcTags: (query)  (optional)

     - returns: RequestBuilder<ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckInfo> 
     */
    public class func comAdobeGraniteQueriesImplHcLargeIndexHealthCheckWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, largeIndexCriticalThreshold: Int32? = nil, largeIndexWarnThreshold: Int32? = nil, hcTags: [String]? = nil) -> RequestBuilder<ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.queries.impl.hc.LargeIndexHealthCheck"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "large.index.critical.threshold": largeIndexCriticalThreshold?.encodeToJSON(),
            "large.index.warn.threshold": largeIndexWarnThreshold?.encodeToJSON(),
            "hc.tags": hcTags
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeGraniteQueriesImplHcQueriesStatusHealthCheck(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcTags: [String]? = nil, completion: ((data: ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckInfo?, error: ErrorType?) -> Void)) {
        comAdobeGraniteQueriesImplHcQueriesStatusHealthCheckWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, hcTags: hcTags).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.queries.impl.hc.QueriesStatusHealthCheck     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "hc.tags" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcTags: (query)  (optional)

     - returns: RequestBuilder<ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckInfo> 
     */
    public class func comAdobeGraniteQueriesImplHcQueriesStatusHealthCheckWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcTags: [String]? = nil) -> RequestBuilder<ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.queries.impl.hc.QueriesStatusHealthCheck"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "hc.tags": hcTags
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter getPeriod: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeGraniteQueriesImplHcQueryHealthCheckMetrics(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, getPeriod: Int32? = nil, completion: ((data: ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsInfo?, error: ErrorType?) -> Void)) {
        comAdobeGraniteQueriesImplHcQueryHealthCheckMetricsWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, getPeriod: getPeriod).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.queries.impl.hc.QueryHealthCheckMetrics     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "getPeriod" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter getPeriod: (query)  (optional)

     - returns: RequestBuilder<ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsInfo> 
     */
    public class func comAdobeGraniteQueriesImplHcQueryHealthCheckMetricsWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, getPeriod: Int32? = nil) -> RequestBuilder<ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.queries.impl.hc.QueryHealthCheckMetrics"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "getPeriod": getPeriod?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeGraniteQueriesImplHcQueryLimitsHealthCheck(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcTags: [String]? = nil, completion: ((data: ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckInfo?, error: ErrorType?) -> Void)) {
        comAdobeGraniteQueriesImplHcQueryLimitsHealthCheckWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, hcTags: hcTags).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.queries.impl.hc.QueryLimitsHealthCheck     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "hc.tags" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcTags: (query)  (optional)

     - returns: RequestBuilder<ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckInfo> 
     */
    public class func comAdobeGraniteQueriesImplHcQueryLimitsHealthCheckWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcTags: [String]? = nil) -> RequestBuilder<ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.queries.impl.hc.QueryLimitsHealthCheck"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "hc.tags": hcTags
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter numberOfRetriesAllowed: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeGraniteReplicationHcImplReplicationQueueHealthCheck(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, numberOfRetriesAllowed: Int32? = nil, hcTags: [String]? = nil, completion: ((data: ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckInfo?, error: ErrorType?) -> Void)) {
        comAdobeGraniteReplicationHcImplReplicationQueueHealthCheckWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, numberOfRetriesAllowed: numberOfRetriesAllowed, hcTags: hcTags).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.replication.hc.impl.ReplicationQueueHealthCheck     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "number.of.retries.allowed" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "hc.tags" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter numberOfRetriesAllowed: (query)  (optional)
     - parameter hcTags: (query)  (optional)

     - returns: RequestBuilder<ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckInfo> 
     */
    public class func comAdobeGraniteReplicationHcImplReplicationQueueHealthCheckWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, numberOfRetriesAllowed: Int32? = nil, hcTags: [String]? = nil) -> RequestBuilder<ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.replication.hc.impl.ReplicationQueueHealthCheck"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "number.of.retries.allowed": numberOfRetriesAllowed?.encodeToJSON(),
            "hc.tags": hcTags
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeGraniteReplicationHcImplReplicationTransportUsersHealthC(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcTags: [String]? = nil, completion: ((data: ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCInfo?, error: ErrorType?) -> Void)) {
        comAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, hcTags: hcTags).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.replication.hc.impl.ReplicationTransportUsersHealthCheck     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "hc.tags" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcTags: (query)  (optional)

     - returns: RequestBuilder<ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCInfo> 
     */
    public class func comAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcTags: [String]? = nil) -> RequestBuilder<ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.replication.hc.impl.ReplicationTransportUsersHealthCheck"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "hc.tags": hcTags
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheck(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcTags: [String]? = nil, completion: ((data: ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckInfo?, error: ErrorType?) -> Void)) {
        comAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, hcTags: hcTags).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.repository.hc.impl.AuthorizableNodeNameHealthCheck     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "hc.tags" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcTags: (query)  (optional)

     - returns: RequestBuilder<ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckInfo> 
     */
    public class func comAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcTags: [String]? = nil) -> RequestBuilder<ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.repository.hc.impl.AuthorizableNodeNameHealthCheck"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "hc.tags": hcTags
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - parameter excludeSearchPath: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthC(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcTags: [String]? = nil, excludeSearchPath: [String]? = nil, completion: ((data: ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCInfo?, error: ErrorType?) -> Void)) {
        comAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, hcTags: hcTags, excludeSearchPath: excludeSearchPath).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.repository.hc.impl.content.sling.SlingContentHealthCheck     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "exclude.search.path" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "hc.tags" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - parameter excludeSearchPath: (query)  (optional)

     - returns: RequestBuilder<ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCInfo> 
     */
    public class func comAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcTags: [String]? = nil, excludeSearchPath: [String]? = nil) -> RequestBuilder<ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.repository.hc.impl.content.sling.SlingContentHealthCheck"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "hc.tags": hcTags,
            "exclude.search.path": excludeSearchPath
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeGraniteRepositoryHcImplContinuousRGCHealthCheck(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcTags: [String]? = nil, completion: ((data: ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckInfo?, error: ErrorType?) -> Void)) {
        comAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, hcTags: hcTags).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.repository.hc.impl.ContinuousRGCHealthCheck     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "hc.tags" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcTags: (query)  (optional)

     - returns: RequestBuilder<ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckInfo> 
     */
    public class func comAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcTags: [String]? = nil) -> RequestBuilder<ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.repository.hc.impl.ContinuousRGCHealthCheck"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "hc.tags": hcTags
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthChe(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcTags: [String]? = nil, completion: ((data: ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheInfo?, error: ErrorType?) -> Void)) {
        comAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, hcTags: hcTags).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.repository.hc.impl.DefaultAccessUserProfileHealthCheck     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "hc.tags" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcTags: (query)  (optional)

     - returns: RequestBuilder<ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheInfo> 
     */
    public class func comAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcTags: [String]? = nil) -> RequestBuilder<ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.repository.hc.impl.DefaultAccessUserProfileHealthCheck"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "hc.tags": hcTags
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - parameter accountLogins: (query)  (optional)
     - parameter consoleLogins: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheck(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcTags: [String]? = nil, accountLogins: [String]? = nil, consoleLogins: [String]? = nil, completion: ((data: ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckInfo?, error: ErrorType?) -> Void)) {
        comAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, hcTags: hcTags, accountLogins: accountLogins, consoleLogins: consoleLogins).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.repository.hc.impl.DefaultLoginsHealthCheck     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "account.logins" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "hc.tags" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "console.logins" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - parameter accountLogins: (query)  (optional)
     - parameter consoleLogins: (query)  (optional)

     - returns: RequestBuilder<ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckInfo> 
     */
    public class func comAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcTags: [String]? = nil, accountLogins: [String]? = nil, consoleLogins: [String]? = nil) -> RequestBuilder<ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.repository.hc.impl.DefaultLoginsHealthCheck"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "hc.tags": hcTags,
            "account.logins": accountLogins,
            "console.logins": consoleLogins
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - parameter diskSpaceWarnThreshold: (query)  (optional)
     - parameter diskSpaceErrorThreshold: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeGraniteRepositoryHcImplDiskSpaceHealthCheck(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcTags: [String]? = nil, diskSpaceWarnThreshold: Int32? = nil, diskSpaceErrorThreshold: Int32? = nil, completion: ((data: ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckInfo?, error: ErrorType?) -> Void)) {
        comAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, hcTags: hcTags, diskSpaceWarnThreshold: diskSpaceWarnThreshold, diskSpaceErrorThreshold: diskSpaceErrorThreshold).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.repository.hc.impl.DiskSpaceHealthCheck     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "disk.space.warn.threshold" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "hc.tags" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "disk.space.error.threshold" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - parameter diskSpaceWarnThreshold: (query)  (optional)
     - parameter diskSpaceErrorThreshold: (query)  (optional)

     - returns: RequestBuilder<ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckInfo> 
     */
    public class func comAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcTags: [String]? = nil, diskSpaceWarnThreshold: Int32? = nil, diskSpaceErrorThreshold: Int32? = nil) -> RequestBuilder<ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.repository.hc.impl.DiskSpaceHealthCheck"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "hc.tags": hcTags,
            "disk.space.warn.threshold": diskSpaceWarnThreshold?.encodeToJSON(),
            "disk.space.error.threshold": diskSpaceErrorThreshold?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheck(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcTags: [String]? = nil, completion: ((data: ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckInfo?, error: ErrorType?) -> Void)) {
        comAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, hcTags: hcTags).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.repository.hc.impl.ObservationQueueLengthHealthCheck     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "hc.tags" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcTags: (query)  (optional)

     - returns: RequestBuilder<ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckInfo> 
     */
    public class func comAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcTags: [String]? = nil) -> RequestBuilder<ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.repository.hc.impl.ObservationQueueLengthHealthCheck"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "hc.tags": hcTags
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter enabled: (query)  (optional)
     - parameter intervalSeconds: (query)  (optional)
     - parameter commitsPerIntervalThreshold: (query)  (optional)
     - parameter maxLocationLength: (query)  (optional)
     - parameter maxDetailsShown: (query)  (optional)
     - parameter minDetailsPercentage: (query)  (optional)
     - parameter threadMatchers: (query)  (optional)
     - parameter maxGreedyDepth: (query)  (optional)
     - parameter greedyStackMatchers: (query)  (optional)
     - parameter stackFilters: (query)  (optional)
     - parameter stackMatchers: (query)  (optional)
     - parameter stackCategorizers: (query)  (optional)
     - parameter stackShorteners: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeGraniteRepositoryImplCommitStatsConfig(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, enabled: Bool? = nil, intervalSeconds: Int32? = nil, commitsPerIntervalThreshold: Int32? = nil, maxLocationLength: Int32? = nil, maxDetailsShown: Int32? = nil, minDetailsPercentage: Int32? = nil, threadMatchers: [String]? = nil, maxGreedyDepth: Int32? = nil, greedyStackMatchers: String? = nil, stackFilters: [String]? = nil, stackMatchers: [String]? = nil, stackCategorizers: [String]? = nil, stackShorteners: [String]? = nil, completion: ((data: ComAdobeGraniteRepositoryImplCommitStatsConfigInfo?, error: ErrorType?) -> Void)) {
        comAdobeGraniteRepositoryImplCommitStatsConfigWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, enabled: enabled, intervalSeconds: intervalSeconds, commitsPerIntervalThreshold: commitsPerIntervalThreshold, maxLocationLength: maxLocationLength, maxDetailsShown: maxDetailsShown, minDetailsPercentage: minDetailsPercentage, threadMatchers: threadMatchers, maxGreedyDepth: maxGreedyDepth, greedyStackMatchers: greedyStackMatchers, stackFilters: stackFilters, stackMatchers: stackMatchers, stackCategorizers: stackCategorizers, stackShorteners: stackShorteners).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.repository.impl.CommitStatsConfig     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "service_location" : "service_location",
  "bundle_location" : "bundle_location",
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "threadMatchers" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "greedyStackMatchers" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "minDetailsPercentage" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "enabled" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "maxLocationLength" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "maxDetailsShown" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "commitsPerIntervalThreshold" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "stackShorteners" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "stackFilters" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "stackCategorizers" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "maxGreedyDepth" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "stackMatchers" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "intervalSeconds" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter enabled: (query)  (optional)
     - parameter intervalSeconds: (query)  (optional)
     - parameter commitsPerIntervalThreshold: (query)  (optional)
     - parameter maxLocationLength: (query)  (optional)
     - parameter maxDetailsShown: (query)  (optional)
     - parameter minDetailsPercentage: (query)  (optional)
     - parameter threadMatchers: (query)  (optional)
     - parameter maxGreedyDepth: (query)  (optional)
     - parameter greedyStackMatchers: (query)  (optional)
     - parameter stackFilters: (query)  (optional)
     - parameter stackMatchers: (query)  (optional)
     - parameter stackCategorizers: (query)  (optional)
     - parameter stackShorteners: (query)  (optional)

     - returns: RequestBuilder<ComAdobeGraniteRepositoryImplCommitStatsConfigInfo> 
     */
    public class func comAdobeGraniteRepositoryImplCommitStatsConfigWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, enabled: Bool? = nil, intervalSeconds: Int32? = nil, commitsPerIntervalThreshold: Int32? = nil, maxLocationLength: Int32? = nil, maxDetailsShown: Int32? = nil, minDetailsPercentage: Int32? = nil, threadMatchers: [String]? = nil, maxGreedyDepth: Int32? = nil, greedyStackMatchers: String? = nil, stackFilters: [String]? = nil, stackMatchers: [String]? = nil, stackCategorizers: [String]? = nil, stackShorteners: [String]? = nil) -> RequestBuilder<ComAdobeGraniteRepositoryImplCommitStatsConfigInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.repository.impl.CommitStatsConfig"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "enabled": enabled,
            "intervalSeconds": intervalSeconds?.encodeToJSON(),
            "commitsPerIntervalThreshold": commitsPerIntervalThreshold?.encodeToJSON(),
            "maxLocationLength": maxLocationLength?.encodeToJSON(),
            "maxDetailsShown": maxDetailsShown?.encodeToJSON(),
            "minDetailsPercentage": minDetailsPercentage?.encodeToJSON(),
            "threadMatchers": threadMatchers,
            "maxGreedyDepth": maxGreedyDepth?.encodeToJSON(),
            "greedyStackMatchers": greedyStackMatchers,
            "stackFilters": stackFilters,
            "stackMatchers": stackMatchers,
            "stackCategorizers": stackCategorizers,
            "stackShorteners": stackShorteners
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeGraniteRepositoryImplCommitStatsConfigInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter serviceusersSimpleSubjectPopulation: (query)  (optional)
     - parameter serviceusersList: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeGraniteRepositoryServiceUserConfiguration(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int32? = nil, serviceusersSimpleSubjectPopulation: Bool? = nil, serviceusersList: [String]? = nil, completion: ((data: ComAdobeGraniteRepositoryServiceUserConfigurationInfo?, error: ErrorType?) -> Void)) {
        comAdobeGraniteRepositoryServiceUserConfigurationWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, serviceRanking: serviceRanking, serviceusersSimpleSubjectPopulation: serviceusersSimpleSubjectPopulation, serviceusersList: serviceusersList).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.repository.ServiceUserConfiguration     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "serviceusers.list" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "serviceusers.simpleSubjectPopulation" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "service.ranking" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter serviceusersSimpleSubjectPopulation: (query)  (optional)
     - parameter serviceusersList: (query)  (optional)

     - returns: RequestBuilder<ComAdobeGraniteRepositoryServiceUserConfigurationInfo> 
     */
    public class func comAdobeGraniteRepositoryServiceUserConfigurationWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int32? = nil, serviceusersSimpleSubjectPopulation: Bool? = nil, serviceusersList: [String]? = nil) -> RequestBuilder<ComAdobeGraniteRepositoryServiceUserConfigurationInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.repository.ServiceUserConfiguration"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "service.ranking": serviceRanking?.encodeToJSON(),
            "serviceusers.simpleSubjectPopulation": serviceusersSimpleSubjectPopulation,
            "serviceusers.list": serviceusersList
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeGraniteRepositoryServiceUserConfigurationInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckIm(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcTags: [String]? = nil, completion: ((data: ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImInfo?, error: ErrorType?) -> Void)) {
        comAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, hcTags: hcTags).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.requests.logging.impl.hc.RequestsStatusHealthCheckImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "hc.tags" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcTags: (query)  (optional)

     - returns: RequestBuilder<ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImInfo> 
     */
    public class func comAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcTags: [String]? = nil) -> RequestBuilder<ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.requests.logging.impl.hc.RequestsStatusHealthCheckImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "hc.tags": hcTags
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter types: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeGraniteResourcestatusImplCompositeStatusType(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, name: String? = nil, types: [String]? = nil, completion: ((data: ComAdobeGraniteResourcestatusImplCompositeStatusTypeInfo?, error: ErrorType?) -> Void)) {
        comAdobeGraniteResourcestatusImplCompositeStatusTypeWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, name: name, types: types).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.resourcestatus.impl.CompositeStatusType     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "types" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "name" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter types: (query)  (optional)

     - returns: RequestBuilder<ComAdobeGraniteResourcestatusImplCompositeStatusTypeInfo> 
     */
    public class func comAdobeGraniteResourcestatusImplCompositeStatusTypeWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, name: String? = nil, types: [String]? = nil) -> RequestBuilder<ComAdobeGraniteResourcestatusImplCompositeStatusTypeInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.resourcestatus.impl.CompositeStatusType"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "name": name,
            "types": types
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeGraniteResourcestatusImplCompositeStatusTypeInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter providerRoot: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeGraniteResourcestatusImplStatusResourceProviderImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, providerRoot: String? = nil, completion: ((data: ComAdobeGraniteResourcestatusImplStatusResourceProviderImplInfo?, error: ErrorType?) -> Void)) {
        comAdobeGraniteResourcestatusImplStatusResourceProviderImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, providerRoot: providerRoot).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.resourcestatus.impl.StatusResourceProviderImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "provider.root" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter providerRoot: (query)  (optional)

     - returns: RequestBuilder<ComAdobeGraniteResourcestatusImplStatusResourceProviderImplInfo> 
     */
    public class func comAdobeGraniteResourcestatusImplStatusResourceProviderImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, providerRoot: String? = nil) -> RequestBuilder<ComAdobeGraniteResourcestatusImplStatusResourceProviderImplInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.resourcestatus.impl.StatusResourceProviderImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "provider.root": providerRoot
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeGraniteResourcestatusImplStatusResourceProviderImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter mimeAllowEmpty: (query)  (optional)
     - parameter mimeAllowed: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeGraniteRestAssetsImplAssetContentDispositionFilter(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, mimeAllowEmpty: Bool? = nil, mimeAllowed: [String]? = nil, completion: ((data: ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterInfo?, error: ErrorType?) -> Void)) {
        comAdobeGraniteRestAssetsImplAssetContentDispositionFilterWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, mimeAllowEmpty: mimeAllowEmpty, mimeAllowed: mimeAllowed).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.rest.assets.impl.AssetContentDispositionFilter     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "mime.allowed" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "mime.allowEmpty" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter mimeAllowEmpty: (query)  (optional)
     - parameter mimeAllowed: (query)  (optional)

     - returns: RequestBuilder<ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterInfo> 
     */
    public class func comAdobeGraniteRestAssetsImplAssetContentDispositionFilterWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, mimeAllowEmpty: Bool? = nil, mimeAllowed: [String]? = nil) -> RequestBuilder<ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.rest.assets.impl.AssetContentDispositionFilter"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "mime.allowEmpty": mimeAllowEmpty,
            "mime.allowed": mimeAllowed
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter providerRoots: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeGraniteRestImplApiEndpointResourceProviderFactoryImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, providerRoots: String? = nil, completion: ((data: ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplInfo?, error: ErrorType?) -> Void)) {
        comAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, providerRoots: providerRoots).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.rest.impl.ApiEndpointResourceProviderFactoryImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "provider.roots" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter providerRoots: (query)  (optional)

     - returns: RequestBuilder<ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplInfo> 
     */
    public class func comAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, providerRoots: String? = nil) -> RequestBuilder<ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.rest.impl.ApiEndpointResourceProviderFactoryImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "provider.roots": providerRoots
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter defaultLimit: (query)  (optional)
     - parameter useAbsoluteUri: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeGraniteRestImplServletDefaultGETServlet(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, defaultLimit: Int32? = nil, useAbsoluteUri: Bool? = nil, completion: ((data: ComAdobeGraniteRestImplServletDefaultGETServletInfo?, error: ErrorType?) -> Void)) {
        comAdobeGraniteRestImplServletDefaultGETServletWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, defaultLimit: defaultLimit, useAbsoluteUri: useAbsoluteUri).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.rest.impl.servlet.DefaultGETServlet     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "use.absolute.uri" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "default.limit" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter defaultLimit: (query)  (optional)
     - parameter useAbsoluteUri: (query)  (optional)

     - returns: RequestBuilder<ComAdobeGraniteRestImplServletDefaultGETServletInfo> 
     */
    public class func comAdobeGraniteRestImplServletDefaultGETServletWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, defaultLimit: Int32? = nil, useAbsoluteUri: Bool? = nil) -> RequestBuilder<ComAdobeGraniteRestImplServletDefaultGETServletInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.rest.impl.servlet.DefaultGETServlet"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "default.limit": defaultLimit?.encodeToJSON(),
            "use.absolute.uri": useAbsoluteUri
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeGraniteRestImplServletDefaultGETServletInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationS(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcTags: [String]? = nil, completion: ((data: ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSInfo?, error: ErrorType?) -> Void)) {
        comAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, hcTags: hcTags).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.security.user.ui.internal.servlets.SSLConfigurationServlet     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "hc.tags" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcTags: (query)  (optional)

     - returns: RequestBuilder<ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSInfo> 
     */
    public class func comAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcTags: [String]? = nil) -> RequestBuilder<ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.security.user.ui.internal.servlets.SSLConfigurationServlet"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "hc.tags": hcTags
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter adapterCondition: (query)  (optional)
     - parameter graniteUserpropertiesNodetypes: (query)  (optional)
     - parameter graniteUserpropertiesResourcetypes: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeGraniteSecurityUserUserPropertiesService(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, adapterCondition: String? = nil, graniteUserpropertiesNodetypes: [String]? = nil, graniteUserpropertiesResourcetypes: [String]? = nil, completion: ((data: ComAdobeGraniteSecurityUserUserPropertiesServiceInfo?, error: ErrorType?) -> Void)) {
        comAdobeGraniteSecurityUserUserPropertiesServiceWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, adapterCondition: adapterCondition, graniteUserpropertiesNodetypes: graniteUserpropertiesNodetypes, graniteUserpropertiesResourcetypes: graniteUserpropertiesResourcetypes).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.security.user.UserPropertiesService     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "service_location" : "service_location",
  "bundle_location" : "bundle_location",
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "granite.userproperties.resourcetypes" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "granite.userproperties.nodetypes" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "adapter.condition" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter adapterCondition: (query)  (optional)
     - parameter graniteUserpropertiesNodetypes: (query)  (optional)
     - parameter graniteUserpropertiesResourcetypes: (query)  (optional)

     - returns: RequestBuilder<ComAdobeGraniteSecurityUserUserPropertiesServiceInfo> 
     */
    public class func comAdobeGraniteSecurityUserUserPropertiesServiceWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, adapterCondition: String? = nil, graniteUserpropertiesNodetypes: [String]? = nil, graniteUserpropertiesResourcetypes: [String]? = nil) -> RequestBuilder<ComAdobeGraniteSecurityUserUserPropertiesServiceInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.security.user.UserPropertiesService"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "adapter.condition": adapterCondition,
            "granite.userproperties.nodetypes": graniteUserpropertiesNodetypes,
            "granite.userproperties.resourcetypes": graniteUserpropertiesResourcetypes
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeGraniteSecurityUserUserPropertiesServiceInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter group2memberRelationshipOutgoing: (query)  (optional)
     - parameter group2memberExcludedOutgoing: (query)  (optional)
     - parameter group2memberRelationshipIncoming: (query)  (optional)
     - parameter group2memberExcludedIncoming: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeGraniteSocialgraphImplSocialGraphFactoryImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, group2memberRelationshipOutgoing: String? = nil, group2memberExcludedOutgoing: [String]? = nil, group2memberRelationshipIncoming: String? = nil, group2memberExcludedIncoming: [String]? = nil, completion: ((data: ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplInfo?, error: ErrorType?) -> Void)) {
        comAdobeGraniteSocialgraphImplSocialGraphFactoryImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, group2memberRelationshipOutgoing: group2memberRelationshipOutgoing, group2memberExcludedOutgoing: group2memberExcludedOutgoing, group2memberRelationshipIncoming: group2memberRelationshipIncoming, group2memberExcludedIncoming: group2memberExcludedIncoming).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.socialgraph.impl.SocialGraphFactoryImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "group2member.relationship.outgoing" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "group2member.excluded.incoming" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "group2member.relationship.incoming" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "group2member.excluded.outgoing" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter group2memberRelationshipOutgoing: (query)  (optional)
     - parameter group2memberExcludedOutgoing: (query)  (optional)
     - parameter group2memberRelationshipIncoming: (query)  (optional)
     - parameter group2memberExcludedIncoming: (query)  (optional)

     - returns: RequestBuilder<ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplInfo> 
     */
    public class func comAdobeGraniteSocialgraphImplSocialGraphFactoryImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, group2memberRelationshipOutgoing: String? = nil, group2memberExcludedOutgoing: [String]? = nil, group2memberRelationshipIncoming: String? = nil, group2memberExcludedIncoming: [String]? = nil) -> RequestBuilder<ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.socialgraph.impl.SocialGraphFactoryImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "group2member.relationship.outgoing": group2memberRelationshipOutgoing,
            "group2member.excluded.outgoing": group2memberExcludedOutgoing,
            "group2member.relationship.incoming": group2memberRelationshipIncoming,
            "group2member.excluded.incoming": group2memberExcludedIncoming
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter schedulerExpression: (query)  (optional)
     - parameter jmxObjectname: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeGraniteSystemMonitoringImplSystemStatsMBeanImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, schedulerExpression: String? = nil, jmxObjectname: String? = nil, completion: ((data: ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplInfo?, error: ErrorType?) -> Void)) {
        comAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, schedulerExpression: schedulerExpression, jmxObjectname: jmxObjectname).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.system.monitoring.impl.SystemStatsMBeanImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "scheduler.expression" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "jmx.objectname" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter schedulerExpression: (query)  (optional)
     - parameter jmxObjectname: (query)  (optional)

     - returns: RequestBuilder<ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplInfo> 
     */
    public class func comAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, schedulerExpression: String? = nil, jmxObjectname: String? = nil) -> RequestBuilder<ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.system.monitoring.impl.SystemStatsMBeanImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "scheduler.expression": schedulerExpression,
            "jmx.objectname": jmxObjectname
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter adapterCondition: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeGraniteTaskmanagementImplJcrTaskAdapterFactory(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, adapterCondition: String? = nil, completion: ((data: ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryInfo?, error: ErrorType?) -> Void)) {
        comAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, adapterCondition: adapterCondition).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.taskmanagement.impl.jcr.TaskAdapterFactory     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "adapter.condition" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter adapterCondition: (query)  (optional)

     - returns: RequestBuilder<ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryInfo> 
     */
    public class func comAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, adapterCondition: String? = nil) -> RequestBuilder<ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.taskmanagement.impl.jcr.TaskAdapterFactory"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "adapter.condition": adapterCondition
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter archivingEnabled: (query)  (optional)
     - parameter schedulerExpression: (query)  (optional)
     - parameter archiveSinceDaysCompleted: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeGraniteTaskmanagementImplJcrTaskArchiveService(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, archivingEnabled: Bool? = nil, schedulerExpression: String? = nil, archiveSinceDaysCompleted: Int32? = nil, completion: ((data: ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceInfo?, error: ErrorType?) -> Void)) {
        comAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, archivingEnabled: archivingEnabled, schedulerExpression: schedulerExpression, archiveSinceDaysCompleted: archiveSinceDaysCompleted).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.taskmanagement.impl.jcr.TaskArchiveService     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "archive.since.days.completed" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "archiving.enabled" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "scheduler.expression" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter archivingEnabled: (query)  (optional)
     - parameter schedulerExpression: (query)  (optional)
     - parameter archiveSinceDaysCompleted: (query)  (optional)

     - returns: RequestBuilder<ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceInfo> 
     */
    public class func comAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, archivingEnabled: Bool? = nil, schedulerExpression: String? = nil, archiveSinceDaysCompleted: Int32? = nil) -> RequestBuilder<ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.taskmanagement.impl.jcr.TaskArchiveService"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "archiving.enabled": archivingEnabled,
            "scheduler.expression": schedulerExpression,
            "archive.since.days.completed": archiveSinceDaysCompleted?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter purgeCompleted: (query)  (optional)
     - parameter completedAge: (query)  (optional)
     - parameter purgeActive: (query)  (optional)
     - parameter activeAge: (query)  (optional)
     - parameter saveThreshold: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTask(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, purgeCompleted: Bool? = nil, completedAge: Int32? = nil, purgeActive: Bool? = nil, activeAge: Int32? = nil, saveThreshold: Int32? = nil, completion: ((data: ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskInfo?, error: ErrorType?) -> Void)) {
        comAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, purgeCompleted: purgeCompleted, completedAge: completedAge, purgeActive: purgeActive, activeAge: activeAge, saveThreshold: saveThreshold).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.taskmanagement.impl.purge.TaskPurgeMaintenanceTask     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "completedAge" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "purgeCompleted" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "activeAge" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "purgeActive" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "saveThreshold" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter purgeCompleted: (query)  (optional)
     - parameter completedAge: (query)  (optional)
     - parameter purgeActive: (query)  (optional)
     - parameter activeAge: (query)  (optional)
     - parameter saveThreshold: (query)  (optional)

     - returns: RequestBuilder<ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskInfo> 
     */
    public class func comAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, purgeCompleted: Bool? = nil, completedAge: Int32? = nil, purgeActive: Bool? = nil, activeAge: Int32? = nil, saveThreshold: Int32? = nil) -> RequestBuilder<ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.taskmanagement.impl.purge.TaskPurgeMaintenanceTask"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "purgeCompleted": purgeCompleted,
            "completedAge": completedAge?.encodeToJSON(),
            "purgeActive": purgeActive,
            "activeAge": activeAge?.encodeToJSON(),
            "saveThreshold": saveThreshold?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter adapterCondition: (query)  (optional)
     - parameter taskmanagerAdmingroups: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactor(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, adapterCondition: String? = nil, taskmanagerAdmingroups: [String]? = nil, completion: ((data: ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorInfo?, error: ErrorType?) -> Void)) {
        comAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, adapterCondition: adapterCondition, taskmanagerAdmingroups: taskmanagerAdmingroups).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.taskmanagement.impl.service.TaskManagerAdapterFactory     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "adapter.condition" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "taskmanager.admingroups" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter adapterCondition: (query)  (optional)
     - parameter taskmanagerAdmingroups: (query)  (optional)

     - returns: RequestBuilder<ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorInfo> 
     */
    public class func comAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, adapterCondition: String? = nil, taskmanagerAdmingroups: [String]? = nil) -> RequestBuilder<ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.taskmanagement.impl.service.TaskManagerAdapterFactory"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "adapter.condition": adapterCondition,
            "taskmanager.admingroups": taskmanagerAdmingroups
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter schedulerPeriod: (query)  (optional)
     - parameter schedulerRunOn: (query)  (optional)
     - parameter graniteThreaddumpEnabled: (query)  (optional)
     - parameter graniteThreaddumpDumpsPerFile: (query)  (optional)
     - parameter graniteThreaddumpEnableGzipCompression: (query)  (optional)
     - parameter graniteThreaddumpEnableDirectoriesCompression: (query)  (optional)
     - parameter graniteThreaddumpEnableJStack: (query)  (optional)
     - parameter graniteThreaddumpMaxBackupDays: (query)  (optional)
     - parameter graniteThreaddumpBackupCleanTrigger: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeGraniteThreaddumpThreadDumpCollector(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, schedulerPeriod: Int32? = nil, schedulerRunOn: String? = nil, graniteThreaddumpEnabled: Bool? = nil, graniteThreaddumpDumpsPerFile: Int32? = nil, graniteThreaddumpEnableGzipCompression: Bool? = nil, graniteThreaddumpEnableDirectoriesCompression: Bool? = nil, graniteThreaddumpEnableJStack: Bool? = nil, graniteThreaddumpMaxBackupDays: Int32? = nil, graniteThreaddumpBackupCleanTrigger: String? = nil, completion: ((data: ComAdobeGraniteThreaddumpThreadDumpCollectorInfo?, error: ErrorType?) -> Void)) {
        comAdobeGraniteThreaddumpThreadDumpCollectorWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, schedulerPeriod: schedulerPeriod, schedulerRunOn: schedulerRunOn, graniteThreaddumpEnabled: graniteThreaddumpEnabled, graniteThreaddumpDumpsPerFile: graniteThreaddumpDumpsPerFile, graniteThreaddumpEnableGzipCompression: graniteThreaddumpEnableGzipCompression, graniteThreaddumpEnableDirectoriesCompression: graniteThreaddumpEnableDirectoriesCompression, graniteThreaddumpEnableJStack: graniteThreaddumpEnableJStack, graniteThreaddumpMaxBackupDays: graniteThreaddumpMaxBackupDays, graniteThreaddumpBackupCleanTrigger: graniteThreaddumpBackupCleanTrigger).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.threaddump.ThreadDumpCollector     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "scheduler.runOn" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : {
        "values" : "",
        "labels" : ""
      },
      "value" : ""
    },
    "granite.threaddump.backupCleanTrigger" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "granite.threaddump.enabled" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "granite.threaddump.enableGzipCompression" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "granite.threaddump.dumpsPerFile" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "scheduler.period" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "granite.threaddump.enableJStack" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "granite.threaddump.enableDirectoriesCompression" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "granite.threaddump.maxBackupDays" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter schedulerPeriod: (query)  (optional)
     - parameter schedulerRunOn: (query)  (optional)
     - parameter graniteThreaddumpEnabled: (query)  (optional)
     - parameter graniteThreaddumpDumpsPerFile: (query)  (optional)
     - parameter graniteThreaddumpEnableGzipCompression: (query)  (optional)
     - parameter graniteThreaddumpEnableDirectoriesCompression: (query)  (optional)
     - parameter graniteThreaddumpEnableJStack: (query)  (optional)
     - parameter graniteThreaddumpMaxBackupDays: (query)  (optional)
     - parameter graniteThreaddumpBackupCleanTrigger: (query)  (optional)

     - returns: RequestBuilder<ComAdobeGraniteThreaddumpThreadDumpCollectorInfo> 
     */
    public class func comAdobeGraniteThreaddumpThreadDumpCollectorWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, schedulerPeriod: Int32? = nil, schedulerRunOn: String? = nil, graniteThreaddumpEnabled: Bool? = nil, graniteThreaddumpDumpsPerFile: Int32? = nil, graniteThreaddumpEnableGzipCompression: Bool? = nil, graniteThreaddumpEnableDirectoriesCompression: Bool? = nil, graniteThreaddumpEnableJStack: Bool? = nil, graniteThreaddumpMaxBackupDays: Int32? = nil, graniteThreaddumpBackupCleanTrigger: String? = nil) -> RequestBuilder<ComAdobeGraniteThreaddumpThreadDumpCollectorInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.threaddump.ThreadDumpCollector"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "scheduler.period": schedulerPeriod?.encodeToJSON(),
            "scheduler.runOn": schedulerRunOn,
            "granite.threaddump.enabled": graniteThreaddumpEnabled,
            "granite.threaddump.dumpsPerFile": graniteThreaddumpDumpsPerFile?.encodeToJSON(),
            "granite.threaddump.enableGzipCompression": graniteThreaddumpEnableGzipCompression,
            "granite.threaddump.enableDirectoriesCompression": graniteThreaddumpEnableDirectoriesCompression,
            "granite.threaddump.enableJStack": graniteThreaddumpEnableJStack,
            "granite.threaddump.maxBackupDays": graniteThreaddumpMaxBackupDays?.encodeToJSON(),
            "granite.threaddump.backupCleanTrigger": graniteThreaddumpBackupCleanTrigger
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeGraniteThreaddumpThreadDumpCollectorInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter translationFactory: (query)  (optional)
     - parameter defaultConnectorLabel: (query)  (optional)
     - parameter defaultConnectorAttribution: (query)  (optional)
     - parameter defaultConnectorWorkspaceId: (query)  (optional)
     - parameter defaultConnectorSubscriptionKey: (query)  (optional)
     - parameter languageMapLocation: (query)  (optional)
     - parameter categoryMapLocation: (query)  (optional)
     - parameter retryAttempts: (query)  (optional)
     - parameter timeoutCount: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTransl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, translationFactory: String? = nil, defaultConnectorLabel: String? = nil, defaultConnectorAttribution: String? = nil, defaultConnectorWorkspaceId: String? = nil, defaultConnectorSubscriptionKey: String? = nil, languageMapLocation: String? = nil, categoryMapLocation: String? = nil, retryAttempts: Int32? = nil, timeoutCount: Int32? = nil, completion: ((data: ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslInfo?, error: ErrorType?) -> Void)) {
        comAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, translationFactory: translationFactory, defaultConnectorLabel: defaultConnectorLabel, defaultConnectorAttribution: defaultConnectorAttribution, defaultConnectorWorkspaceId: defaultConnectorWorkspaceId, defaultConnectorSubscriptionKey: defaultConnectorSubscriptionKey, languageMapLocation: languageMapLocation, categoryMapLocation: categoryMapLocation, retryAttempts: retryAttempts, timeoutCount: timeoutCount).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.translation.connector.msft.core.impl.MicrosoftTranslationServiceFactoryImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "defaultConnectorWorkspaceId" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "defaultConnectorSubscriptionKey" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "languageMapLocation" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "categoryMapLocation" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "defaultConnectorLabel" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "translationFactory" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "timeoutCount" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "defaultConnectorAttribution" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "retryAttempts" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter translationFactory: (query)  (optional)
     - parameter defaultConnectorLabel: (query)  (optional)
     - parameter defaultConnectorAttribution: (query)  (optional)
     - parameter defaultConnectorWorkspaceId: (query)  (optional)
     - parameter defaultConnectorSubscriptionKey: (query)  (optional)
     - parameter languageMapLocation: (query)  (optional)
     - parameter categoryMapLocation: (query)  (optional)
     - parameter retryAttempts: (query)  (optional)
     - parameter timeoutCount: (query)  (optional)

     - returns: RequestBuilder<ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslInfo> 
     */
    public class func comAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, translationFactory: String? = nil, defaultConnectorLabel: String? = nil, defaultConnectorAttribution: String? = nil, defaultConnectorWorkspaceId: String? = nil, defaultConnectorSubscriptionKey: String? = nil, languageMapLocation: String? = nil, categoryMapLocation: String? = nil, retryAttempts: Int32? = nil, timeoutCount: Int32? = nil) -> RequestBuilder<ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.translation.connector.msft.core.impl.MicrosoftTranslationServiceFactoryImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "translationFactory": translationFactory,
            "defaultConnectorLabel": defaultConnectorLabel,
            "defaultConnectorAttribution": defaultConnectorAttribution,
            "defaultConnectorWorkspaceId": defaultConnectorWorkspaceId,
            "defaultConnectorSubscriptionKey": defaultConnectorSubscriptionKey,
            "languageMapLocation": languageMapLocation,
            "categoryMapLocation": categoryMapLocation,
            "retryAttempts": retryAttempts?.encodeToJSON(),
            "timeoutCount": timeoutCount?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter defaultConnectorName: (query)  (optional)
     - parameter defaultCategory: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeGraniteTranslationCoreImplTranslationManagerImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, defaultConnectorName: String? = nil, defaultCategory: String? = nil, completion: ((data: ComAdobeGraniteTranslationCoreImplTranslationManagerImplInfo?, error: ErrorType?) -> Void)) {
        comAdobeGraniteTranslationCoreImplTranslationManagerImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, defaultConnectorName: defaultConnectorName, defaultCategory: defaultCategory).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.translation.core.impl.TranslationManagerImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "defaultCategory" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "defaultConnectorName" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter defaultConnectorName: (query)  (optional)
     - parameter defaultCategory: (query)  (optional)

     - returns: RequestBuilder<ComAdobeGraniteTranslationCoreImplTranslationManagerImplInfo> 
     */
    public class func comAdobeGraniteTranslationCoreImplTranslationManagerImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, defaultConnectorName: String? = nil, defaultCategory: String? = nil) -> RequestBuilder<ComAdobeGraniteTranslationCoreImplTranslationManagerImplInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.translation.core.impl.TranslationManagerImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "defaultConnectorName": defaultConnectorName,
            "defaultCategory": defaultCategory
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeGraniteTranslationCoreImplTranslationManagerImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter htmllibmanagerTiming: (query)  (optional)
     - parameter htmllibmanagerDebugInitJs: (query)  (optional)
     - parameter htmllibmanagerMinify: (query)  (optional)
     - parameter htmllibmanagerDebug: (query)  (optional)
     - parameter htmllibmanagerGzip: (query)  (optional)
     - parameter htmllibmanagerMaxDataUriSize: (query)  (optional)
     - parameter htmllibmanagerMaxage: (query)  (optional)
     - parameter htmllibmanagerForceCQUrlInfo: (query)  (optional)
     - parameter htmllibmanagerDefaultthemename: (query)  (optional)
     - parameter htmllibmanagerDefaultuserthemename: (query)  (optional)
     - parameter htmllibmanagerClientmanager: (query)  (optional)
     - parameter htmllibmanagerPathList: (query)  (optional)
     - parameter htmllibmanagerExcludedPathList: (query)  (optional)
     - parameter htmllibmanagerProcessorJs: (query)  (optional)
     - parameter htmllibmanagerProcessorCss: (query)  (optional)
     - parameter htmllibmanagerLongcachePatterns: (query)  (optional)
     - parameter htmllibmanagerLongcacheFormat: (query)  (optional)
     - parameter htmllibmanagerUseFileSystemOutputCache: (query)  (optional)
     - parameter htmllibmanagerFileSystemOutputCacheLocation: (query)  (optional)
     - parameter htmllibmanagerDisableReplacement: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeGraniteUiClientlibsImplHtmlLibraryManagerImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, htmllibmanagerTiming: Bool? = nil, htmllibmanagerDebugInitJs: String? = nil, htmllibmanagerMinify: Bool? = nil, htmllibmanagerDebug: Bool? = nil, htmllibmanagerGzip: Bool? = nil, htmllibmanagerMaxDataUriSize: Int32? = nil, htmllibmanagerMaxage: Int32? = nil, htmllibmanagerForceCQUrlInfo: Bool? = nil, htmllibmanagerDefaultthemename: String? = nil, htmllibmanagerDefaultuserthemename: String? = nil, htmllibmanagerClientmanager: String? = nil, htmllibmanagerPathList: [String]? = nil, htmllibmanagerExcludedPathList: [String]? = nil, htmllibmanagerProcessorJs: [String]? = nil, htmllibmanagerProcessorCss: [String]? = nil, htmllibmanagerLongcachePatterns: [String]? = nil, htmllibmanagerLongcacheFormat: String? = nil, htmllibmanagerUseFileSystemOutputCache: Bool? = nil, htmllibmanagerFileSystemOutputCacheLocation: String? = nil, htmllibmanagerDisableReplacement: [String]? = nil, completion: ((data: ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplInfo?, error: ErrorType?) -> Void)) {
        comAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, htmllibmanagerTiming: htmllibmanagerTiming, htmllibmanagerDebugInitJs: htmllibmanagerDebugInitJs, htmllibmanagerMinify: htmllibmanagerMinify, htmllibmanagerDebug: htmllibmanagerDebug, htmllibmanagerGzip: htmllibmanagerGzip, htmllibmanagerMaxDataUriSize: htmllibmanagerMaxDataUriSize, htmllibmanagerMaxage: htmllibmanagerMaxage, htmllibmanagerForceCQUrlInfo: htmllibmanagerForceCQUrlInfo, htmllibmanagerDefaultthemename: htmllibmanagerDefaultthemename, htmllibmanagerDefaultuserthemename: htmllibmanagerDefaultuserthemename, htmllibmanagerClientmanager: htmllibmanagerClientmanager, htmllibmanagerPathList: htmllibmanagerPathList, htmllibmanagerExcludedPathList: htmllibmanagerExcludedPathList, htmllibmanagerProcessorJs: htmllibmanagerProcessorJs, htmllibmanagerProcessorCss: htmllibmanagerProcessorCss, htmllibmanagerLongcachePatterns: htmllibmanagerLongcachePatterns, htmllibmanagerLongcacheFormat: htmllibmanagerLongcacheFormat, htmllibmanagerUseFileSystemOutputCache: htmllibmanagerUseFileSystemOutputCache, htmllibmanagerFileSystemOutputCacheLocation: htmllibmanagerFileSystemOutputCacheLocation, htmllibmanagerDisableReplacement: htmllibmanagerDisableReplacement).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.ui.clientlibs.impl.HtmlLibraryManagerImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "service_location" : "service_location",
  "bundle_location" : "bundle_location",
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "htmllibmanager.gzip" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "htmllibmanager.defaultuserthemename" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "htmllibmanager.clientmanager" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "htmllibmanager.longcache.format" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "htmllibmanager.debug" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "htmllibmanager.maxage" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "htmllibmanager.minify" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "htmllibmanager.disable.replacement" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "htmllibmanager.defaultthemename" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "htmllibmanager.useFileSystemOutputCache" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "htmllibmanager.longcache.patterns" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "htmllibmanager.processor.css" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "htmllibmanager.path.list" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "htmllibmanager.excluded.path.list" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "htmllibmanager.fileSystemOutputCacheLocation" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "htmllibmanager.debug.init.js" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "htmllibmanager.processor.js" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "htmllibmanager.maxDataUriSize" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "htmllibmanager.forceCQUrlInfo" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "htmllibmanager.timing" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter htmllibmanagerTiming: (query)  (optional)
     - parameter htmllibmanagerDebugInitJs: (query)  (optional)
     - parameter htmllibmanagerMinify: (query)  (optional)
     - parameter htmllibmanagerDebug: (query)  (optional)
     - parameter htmllibmanagerGzip: (query)  (optional)
     - parameter htmllibmanagerMaxDataUriSize: (query)  (optional)
     - parameter htmllibmanagerMaxage: (query)  (optional)
     - parameter htmllibmanagerForceCQUrlInfo: (query)  (optional)
     - parameter htmllibmanagerDefaultthemename: (query)  (optional)
     - parameter htmllibmanagerDefaultuserthemename: (query)  (optional)
     - parameter htmllibmanagerClientmanager: (query)  (optional)
     - parameter htmllibmanagerPathList: (query)  (optional)
     - parameter htmllibmanagerExcludedPathList: (query)  (optional)
     - parameter htmllibmanagerProcessorJs: (query)  (optional)
     - parameter htmllibmanagerProcessorCss: (query)  (optional)
     - parameter htmllibmanagerLongcachePatterns: (query)  (optional)
     - parameter htmllibmanagerLongcacheFormat: (query)  (optional)
     - parameter htmllibmanagerUseFileSystemOutputCache: (query)  (optional)
     - parameter htmllibmanagerFileSystemOutputCacheLocation: (query)  (optional)
     - parameter htmllibmanagerDisableReplacement: (query)  (optional)

     - returns: RequestBuilder<ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplInfo> 
     */
    public class func comAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, htmllibmanagerTiming: Bool? = nil, htmllibmanagerDebugInitJs: String? = nil, htmllibmanagerMinify: Bool? = nil, htmllibmanagerDebug: Bool? = nil, htmllibmanagerGzip: Bool? = nil, htmllibmanagerMaxDataUriSize: Int32? = nil, htmllibmanagerMaxage: Int32? = nil, htmllibmanagerForceCQUrlInfo: Bool? = nil, htmllibmanagerDefaultthemename: String? = nil, htmllibmanagerDefaultuserthemename: String? = nil, htmllibmanagerClientmanager: String? = nil, htmllibmanagerPathList: [String]? = nil, htmllibmanagerExcludedPathList: [String]? = nil, htmllibmanagerProcessorJs: [String]? = nil, htmllibmanagerProcessorCss: [String]? = nil, htmllibmanagerLongcachePatterns: [String]? = nil, htmllibmanagerLongcacheFormat: String? = nil, htmllibmanagerUseFileSystemOutputCache: Bool? = nil, htmllibmanagerFileSystemOutputCacheLocation: String? = nil, htmllibmanagerDisableReplacement: [String]? = nil) -> RequestBuilder<ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.ui.clientlibs.impl.HtmlLibraryManagerImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "htmllibmanager.timing": htmllibmanagerTiming,
            "htmllibmanager.debug.init.js": htmllibmanagerDebugInitJs,
            "htmllibmanager.minify": htmllibmanagerMinify,
            "htmllibmanager.debug": htmllibmanagerDebug,
            "htmllibmanager.gzip": htmllibmanagerGzip,
            "htmllibmanager.maxDataUriSize": htmllibmanagerMaxDataUriSize?.encodeToJSON(),
            "htmllibmanager.maxage": htmllibmanagerMaxage?.encodeToJSON(),
            "htmllibmanager.forceCQUrlInfo": htmllibmanagerForceCQUrlInfo,
            "htmllibmanager.defaultthemename": htmllibmanagerDefaultthemename,
            "htmllibmanager.defaultuserthemename": htmllibmanagerDefaultuserthemename,
            "htmllibmanager.clientmanager": htmllibmanagerClientmanager,
            "htmllibmanager.path.list": htmllibmanagerPathList,
            "htmllibmanager.excluded.path.list": htmllibmanagerExcludedPathList,
            "htmllibmanager.processor.js": htmllibmanagerProcessorJs,
            "htmllibmanager.processor.css": htmllibmanagerProcessorCss,
            "htmllibmanager.longcache.patterns": htmllibmanagerLongcachePatterns,
            "htmllibmanager.longcache.format": htmllibmanagerLongcacheFormat,
            "htmllibmanager.useFileSystemOutputCache": htmllibmanagerUseFileSystemOutputCache,
            "htmllibmanager.fileSystemOutputCacheLocation": htmllibmanagerFileSystemOutputCacheLocation,
            "htmllibmanager.disable.replacement": htmllibmanagerDisableReplacement
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter enabled: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeature(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, enabled: Bool? = nil, completion: ((data: ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureInfo?, error: ErrorType?) -> Void)) {
        comAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, enabled: enabled).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.workflow.console.frags.WorkflowWithdrawFeature     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "enabled" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter enabled: (query)  (optional)

     - returns: RequestBuilder<ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureInfo> 
     */
    public class func comAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, enabled: Bool? = nil) -> RequestBuilder<ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.workflow.console.frags.WorkflowWithdrawFeature"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "enabled": enabled
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter graniteWorkflowWorkflowPublishEventServiceEnabled: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeGraniteWorkflowConsolePublishWorkflowPublishEventService(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, graniteWorkflowWorkflowPublishEventServiceEnabled: Bool? = nil, completion: ((data: ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceInfo?, error: ErrorType?) -> Void)) {
        comAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, graniteWorkflowWorkflowPublishEventServiceEnabled: graniteWorkflowWorkflowPublishEventServiceEnabled).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.workflow.console.publish.WorkflowPublishEventService     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "granite.workflow.WorkflowPublishEventService.enabled" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter graniteWorkflowWorkflowPublishEventServiceEnabled: (query)  (optional)

     - returns: RequestBuilder<ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceInfo> 
     */
    public class func comAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, graniteWorkflowWorkflowPublishEventServiceEnabled: Bool? = nil) -> RequestBuilder<ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.workflow.console.publish.WorkflowPublishEventService"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "granite.workflow.WorkflowPublishEventService.enabled": graniteWorkflowWorkflowPublishEventServiceEnabled
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter bucketSize: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeGraniteWorkflowCoreJcrWorkflowBucketManager(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, bucketSize: Int32? = nil, completion: ((data: ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerInfo?, error: ErrorType?) -> Void)) {
        comAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, bucketSize: bucketSize).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.workflow.core.jcr.WorkflowBucketManager     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "bucketSize" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter bucketSize: (query)  (optional)

     - returns: RequestBuilder<ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerInfo> 
     */
    public class func comAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, bucketSize: Int32? = nil) -> RequestBuilder<ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.workflow.core.jcr.WorkflowBucketManager"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "bucketSize": bucketSize?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter defaultTimeout: (query)  (optional)
     - parameter maxTimeout: (query)  (optional)
     - parameter defaultPeriod: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeGraniteWorkflowCoreJobExternalProcessJobHandler(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, defaultTimeout: Int32? = nil, maxTimeout: Int32? = nil, defaultPeriod: Int32? = nil, completion: ((data: ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerInfo?, error: ErrorType?) -> Void)) {
        comAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, defaultTimeout: defaultTimeout, maxTimeout: maxTimeout, defaultPeriod: defaultPeriod).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.workflow.core.job.ExternalProcessJobHandler     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "default.period" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "default.timeout" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "max.timeout" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter defaultTimeout: (query)  (optional)
     - parameter maxTimeout: (query)  (optional)
     - parameter defaultPeriod: (query)  (optional)

     - returns: RequestBuilder<ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerInfo> 
     */
    public class func comAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, defaultTimeout: Int32? = nil, maxTimeout: Int32? = nil, defaultPeriod: Int32? = nil) -> RequestBuilder<ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.workflow.core.job.ExternalProcessJobHandler"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "default.timeout": defaultTimeout?.encodeToJSON(),
            "max.timeout": maxTimeout?.encodeToJSON(),
            "default.period": defaultPeriod?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter jobTopics: (query)  (optional)
     - parameter allowSelfProcessTermination: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeGraniteWorkflowCoreJobJobHandler(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, jobTopics: [String]? = nil, allowSelfProcessTermination: Bool? = nil, completion: ((data: ComAdobeGraniteWorkflowCoreJobJobHandlerInfo?, error: ErrorType?) -> Void)) {
        comAdobeGraniteWorkflowCoreJobJobHandlerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, jobTopics: jobTopics, allowSelfProcessTermination: allowSelfProcessTermination).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.workflow.core.job.JobHandler     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "allow.self.process.termination" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "job.topics" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter jobTopics: (query)  (optional)
     - parameter allowSelfProcessTermination: (query)  (optional)

     - returns: RequestBuilder<ComAdobeGraniteWorkflowCoreJobJobHandlerInfo> 
     */
    public class func comAdobeGraniteWorkflowCoreJobJobHandlerWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, jobTopics: [String]? = nil, allowSelfProcessTermination: Bool? = nil) -> RequestBuilder<ComAdobeGraniteWorkflowCoreJobJobHandlerInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.workflow.core.job.JobHandler"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "job.topics": jobTopics,
            "allow.self.process.termination": allowSelfProcessTermination
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeGraniteWorkflowCoreJobJobHandlerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter jobTopics: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsum(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, jobTopics: String? = nil, completion: ((data: ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumInfo?, error: ErrorType?) -> Void)) {
        comAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, jobTopics: jobTopics).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.workflow.core.offloading.WorkflowOffloadingJobConsumer     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "job.topics" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter jobTopics: (query)  (optional)

     - returns: RequestBuilder<ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumInfo> 
     */
    public class func comAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, jobTopics: String? = nil) -> RequestBuilder<ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.workflow.core.offloading.WorkflowOffloadingJobConsumer"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "job.topics": jobTopics
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter getSystemWorkflowModels: (query)  (optional)
     - parameter getPackageRootPath: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeGraniteWorkflowCorePayloadMapCache(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, getSystemWorkflowModels: [String]? = nil, getPackageRootPath: String? = nil, completion: ((data: ComAdobeGraniteWorkflowCorePayloadMapCacheInfo?, error: ErrorType?) -> Void)) {
        comAdobeGraniteWorkflowCorePayloadMapCacheWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, getSystemWorkflowModels: getSystemWorkflowModels, getPackageRootPath: getPackageRootPath).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.workflow.core.PayloadMapCache     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "getSystemWorkflowModels" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "getPackageRootPath" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter getSystemWorkflowModels: (query)  (optional)
     - parameter getPackageRootPath: (query)  (optional)

     - returns: RequestBuilder<ComAdobeGraniteWorkflowCorePayloadMapCacheInfo> 
     */
    public class func comAdobeGraniteWorkflowCorePayloadMapCacheWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, getSystemWorkflowModels: [String]? = nil, getPackageRootPath: String? = nil) -> RequestBuilder<ComAdobeGraniteWorkflowCorePayloadMapCacheInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.workflow.core.PayloadMapCache"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "getSystemWorkflowModels": getSystemWorkflowModels,
            "getPackageRootPath": getPackageRootPath
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeGraniteWorkflowCorePayloadMapCacheInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter payloadMoveWhiteList: (query)  (optional)
     - parameter payloadMoveHandleFromWorkflowProcess: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeGraniteWorkflowCorePayloadmapPayloadMoveListener(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, payloadMoveWhiteList: [String]? = nil, payloadMoveHandleFromWorkflowProcess: Bool? = nil, completion: ((data: ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerInfo?, error: ErrorType?) -> Void)) {
        comAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, payloadMoveWhiteList: payloadMoveWhiteList, payloadMoveHandleFromWorkflowProcess: payloadMoveHandleFromWorkflowProcess).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.workflow.core.payloadmap.PayloadMoveListener     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "payload.move.white.list" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "payload.move.handle.from.workflow.process" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter payloadMoveWhiteList: (query)  (optional)
     - parameter payloadMoveHandleFromWorkflowProcess: (query)  (optional)

     - returns: RequestBuilder<ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerInfo> 
     */
    public class func comAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, payloadMoveWhiteList: [String]? = nil, payloadMoveHandleFromWorkflowProcess: Bool? = nil) -> RequestBuilder<ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.workflow.core.payloadmap.PayloadMoveListener"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "payload.move.white.list": payloadMoveWhiteList,
            "payload.move.handle.from.workflow.process": payloadMoveHandleFromWorkflowProcess
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqWorkflowConfigWorkflowPackagesRootPath: (query)  (optional)
     - parameter cqWorkflowConfigWorkflowProcessLegacyMode: (query)  (optional)
     - parameter cqWorkflowConfigAllowLocking: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeGraniteWorkflowCoreWorkflowConfig(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqWorkflowConfigWorkflowPackagesRootPath: [String]? = nil, cqWorkflowConfigWorkflowProcessLegacyMode: Bool? = nil, cqWorkflowConfigAllowLocking: Bool? = nil, completion: ((data: ComAdobeGraniteWorkflowCoreWorkflowConfigInfo?, error: ErrorType?) -> Void)) {
        comAdobeGraniteWorkflowCoreWorkflowConfigWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqWorkflowConfigWorkflowPackagesRootPath: cqWorkflowConfigWorkflowPackagesRootPath, cqWorkflowConfigWorkflowProcessLegacyMode: cqWorkflowConfigWorkflowProcessLegacyMode, cqWorkflowConfigAllowLocking: cqWorkflowConfigAllowLocking).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.workflow.core.WorkflowConfig     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "cq.workflow.config.workflow.process.legacy.mode" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "cq.workflow.config.allow.locking" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "cq.workflow.config.workflow.packages.root.path" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqWorkflowConfigWorkflowPackagesRootPath: (query)  (optional)
     - parameter cqWorkflowConfigWorkflowProcessLegacyMode: (query)  (optional)
     - parameter cqWorkflowConfigAllowLocking: (query)  (optional)

     - returns: RequestBuilder<ComAdobeGraniteWorkflowCoreWorkflowConfigInfo> 
     */
    public class func comAdobeGraniteWorkflowCoreWorkflowConfigWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqWorkflowConfigWorkflowPackagesRootPath: [String]? = nil, cqWorkflowConfigWorkflowProcessLegacyMode: Bool? = nil, cqWorkflowConfigAllowLocking: Bool? = nil) -> RequestBuilder<ComAdobeGraniteWorkflowCoreWorkflowConfigInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.workflow.core.WorkflowConfig"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "cq.workflow.config.workflow.packages.root.path": cqWorkflowConfigWorkflowPackagesRootPath,
            "cq.workflow.config.workflow.process.legacy.mode": cqWorkflowConfigWorkflowProcessLegacyMode,
            "cq.workflow.config.allow.locking": cqWorkflowConfigAllowLocking
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeGraniteWorkflowCoreWorkflowConfigInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter graniteWorkflowinboxSortPropertyName: (query)  (optional)
     - parameter graniteWorkflowinboxSortOrder: (query)  (optional)
     - parameter cqWorkflowJobRetry: (query)  (optional)
     - parameter cqWorkflowSuperuser: (query)  (optional)
     - parameter graniteWorkflowInboxQuerySize: (query)  (optional)
     - parameter graniteWorkflowAdminUserGroupFilter: (query)  (optional)
     - parameter graniteWorkflowEnforceWorkitemAssigneePermissions: (query)  (optional)
     - parameter graniteWorkflowEnforceWorkflowInitiatorPermissions: (query)  (optional)
     - parameter graniteWorkflowInjectTenantIdInJobTopics: (query)  (optional)
     - parameter graniteWorkflowMaxPurgeSaveThreshold: (query)  (optional)
     - parameter graniteWorkflowMaxPurgeQueryCount: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeGraniteWorkflowCoreWorkflowSessionFactory(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, graniteWorkflowinboxSortPropertyName: String? = nil, graniteWorkflowinboxSortOrder: String? = nil, cqWorkflowJobRetry: Int32? = nil, cqWorkflowSuperuser: [String]? = nil, graniteWorkflowInboxQuerySize: Int32? = nil, graniteWorkflowAdminUserGroupFilter: Bool? = nil, graniteWorkflowEnforceWorkitemAssigneePermissions: Bool? = nil, graniteWorkflowEnforceWorkflowInitiatorPermissions: Bool? = nil, graniteWorkflowInjectTenantIdInJobTopics: Bool? = nil, graniteWorkflowMaxPurgeSaveThreshold: Int32? = nil, graniteWorkflowMaxPurgeQueryCount: Int32? = nil, completion: ((data: ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryInfo?, error: ErrorType?) -> Void)) {
        comAdobeGraniteWorkflowCoreWorkflowSessionFactoryWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, graniteWorkflowinboxSortPropertyName: graniteWorkflowinboxSortPropertyName, graniteWorkflowinboxSortOrder: graniteWorkflowinboxSortOrder, cqWorkflowJobRetry: cqWorkflowJobRetry, cqWorkflowSuperuser: cqWorkflowSuperuser, graniteWorkflowInboxQuerySize: graniteWorkflowInboxQuerySize, graniteWorkflowAdminUserGroupFilter: graniteWorkflowAdminUserGroupFilter, graniteWorkflowEnforceWorkitemAssigneePermissions: graniteWorkflowEnforceWorkitemAssigneePermissions, graniteWorkflowEnforceWorkflowInitiatorPermissions: graniteWorkflowEnforceWorkflowInitiatorPermissions, graniteWorkflowInjectTenantIdInJobTopics: graniteWorkflowInjectTenantIdInJobTopics, graniteWorkflowMaxPurgeSaveThreshold: graniteWorkflowMaxPurgeSaveThreshold, graniteWorkflowMaxPurgeQueryCount: graniteWorkflowMaxPurgeQueryCount).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.workflow.core.WorkflowSessionFactory     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "granite.workflow.maxPurgeQueryCount" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "granite.workflow.enforceWorkitemAssigneePermissions" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "granite.workflowinbox.sort.propertyName" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : {
        "values" : "",
        "labels" : ""
      },
      "value" : ""
    },
    "granite.workflowinbox.sort.order" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "granite.workflow.enforceWorkflowInitiatorPermissions" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "granite.workflow.injectTenantIdInJobTopics" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "cq.workflow.job.retry" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "cq.workflow.superuser" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "granite.workflow.maxPurgeSaveThreshold" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "granite.workflow.inboxQuerySize" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "granite.workflow.adminUserGroupFilter" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter graniteWorkflowinboxSortPropertyName: (query)  (optional)
     - parameter graniteWorkflowinboxSortOrder: (query)  (optional)
     - parameter cqWorkflowJobRetry: (query)  (optional)
     - parameter cqWorkflowSuperuser: (query)  (optional)
     - parameter graniteWorkflowInboxQuerySize: (query)  (optional)
     - parameter graniteWorkflowAdminUserGroupFilter: (query)  (optional)
     - parameter graniteWorkflowEnforceWorkitemAssigneePermissions: (query)  (optional)
     - parameter graniteWorkflowEnforceWorkflowInitiatorPermissions: (query)  (optional)
     - parameter graniteWorkflowInjectTenantIdInJobTopics: (query)  (optional)
     - parameter graniteWorkflowMaxPurgeSaveThreshold: (query)  (optional)
     - parameter graniteWorkflowMaxPurgeQueryCount: (query)  (optional)

     - returns: RequestBuilder<ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryInfo> 
     */
    public class func comAdobeGraniteWorkflowCoreWorkflowSessionFactoryWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, graniteWorkflowinboxSortPropertyName: String? = nil, graniteWorkflowinboxSortOrder: String? = nil, cqWorkflowJobRetry: Int32? = nil, cqWorkflowSuperuser: [String]? = nil, graniteWorkflowInboxQuerySize: Int32? = nil, graniteWorkflowAdminUserGroupFilter: Bool? = nil, graniteWorkflowEnforceWorkitemAssigneePermissions: Bool? = nil, graniteWorkflowEnforceWorkflowInitiatorPermissions: Bool? = nil, graniteWorkflowInjectTenantIdInJobTopics: Bool? = nil, graniteWorkflowMaxPurgeSaveThreshold: Int32? = nil, graniteWorkflowMaxPurgeQueryCount: Int32? = nil) -> RequestBuilder<ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.workflow.core.WorkflowSessionFactory"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "granite.workflowinbox.sort.propertyName": graniteWorkflowinboxSortPropertyName,
            "granite.workflowinbox.sort.order": graniteWorkflowinboxSortOrder,
            "cq.workflow.job.retry": cqWorkflowJobRetry?.encodeToJSON(),
            "cq.workflow.superuser": cqWorkflowSuperuser,
            "granite.workflow.inboxQuerySize": graniteWorkflowInboxQuerySize?.encodeToJSON(),
            "granite.workflow.adminUserGroupFilter": graniteWorkflowAdminUserGroupFilter,
            "granite.workflow.enforceWorkitemAssigneePermissions": graniteWorkflowEnforceWorkitemAssigneePermissions,
            "granite.workflow.enforceWorkflowInitiatorPermissions": graniteWorkflowEnforceWorkflowInitiatorPermissions,
            "granite.workflow.injectTenantIdInJobTopics": graniteWorkflowInjectTenantIdInJobTopics,
            "granite.workflow.maxPurgeSaveThreshold": graniteWorkflowMaxPurgeSaveThreshold?.encodeToJSON(),
            "granite.workflow.maxPurgeQueryCount": graniteWorkflowMaxPurgeQueryCount?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter scheduledpurgeName: (query)  (optional)
     - parameter scheduledpurgeWorkflowStatus: (query)  (optional)
     - parameter scheduledpurgeModelIds: (query)  (optional)
     - parameter scheduledpurgeDaysold: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeGraniteWorkflowPurgeScheduler(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, scheduledpurgeName: String? = nil, scheduledpurgeWorkflowStatus: String? = nil, scheduledpurgeModelIds: [String]? = nil, scheduledpurgeDaysold: Int32? = nil, completion: ((data: ComAdobeGraniteWorkflowPurgeSchedulerInfo?, error: ErrorType?) -> Void)) {
        comAdobeGraniteWorkflowPurgeSchedulerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, scheduledpurgeName: scheduledpurgeName, scheduledpurgeWorkflowStatus: scheduledpurgeWorkflowStatus, scheduledpurgeModelIds: scheduledpurgeModelIds, scheduledpurgeDaysold: scheduledpurgeDaysold).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.workflow.purge.Scheduler     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "scheduledpurge.modelIds" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "scheduledpurge.name" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "scheduledpurge.workflowStatus" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : {
        "values" : "",
        "labels" : ""
      },
      "value" : ""
    },
    "scheduledpurge.daysold" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter scheduledpurgeName: (query)  (optional)
     - parameter scheduledpurgeWorkflowStatus: (query)  (optional)
     - parameter scheduledpurgeModelIds: (query)  (optional)
     - parameter scheduledpurgeDaysold: (query)  (optional)

     - returns: RequestBuilder<ComAdobeGraniteWorkflowPurgeSchedulerInfo> 
     */
    public class func comAdobeGraniteWorkflowPurgeSchedulerWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, scheduledpurgeName: String? = nil, scheduledpurgeWorkflowStatus: String? = nil, scheduledpurgeModelIds: [String]? = nil, scheduledpurgeDaysold: Int32? = nil) -> RequestBuilder<ComAdobeGraniteWorkflowPurgeSchedulerInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.workflow.purge.Scheduler"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "scheduledpurge.name": scheduledpurgeName,
            "scheduledpurge.workflowStatus": scheduledpurgeWorkflowStatus,
            "scheduledpurge.modelIds": scheduledpurgeModelIds,
            "scheduledpurge.daysold": scheduledpurgeDaysold?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeGraniteWorkflowPurgeSchedulerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter maxConnections: (query)  (optional)
     - parameter maxRequests: (query)  (optional)
     - parameter requestTimeout: (query)  (optional)
     - parameter requestRetries: (query)  (optional)
     - parameter launchTimeout: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeOctopusNcommBootstrap(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, maxConnections: Int32? = nil, maxRequests: Int32? = nil, requestTimeout: Int32? = nil, requestRetries: Int32? = nil, launchTimeout: Int32? = nil, completion: ((data: ComAdobeOctopusNcommBootstrapInfo?, error: ErrorType?) -> Void)) {
        comAdobeOctopusNcommBootstrapWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, maxConnections: maxConnections, maxRequests: maxRequests, requestTimeout: requestTimeout, requestRetries: requestRetries, launchTimeout: launchTimeout).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.octopus.ncomm.bootstrap     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "requestRetries" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "maxRequests" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "launchTimeout" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "requestTimeout" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "maxConnections" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter maxConnections: (query)  (optional)
     - parameter maxRequests: (query)  (optional)
     - parameter requestTimeout: (query)  (optional)
     - parameter requestRetries: (query)  (optional)
     - parameter launchTimeout: (query)  (optional)

     - returns: RequestBuilder<ComAdobeOctopusNcommBootstrapInfo> 
     */
    public class func comAdobeOctopusNcommBootstrapWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, maxConnections: Int32? = nil, maxRequests: Int32? = nil, requestTimeout: Int32? = nil, requestRetries: Int32? = nil, launchTimeout: Int32? = nil) -> RequestBuilder<ComAdobeOctopusNcommBootstrapInfo> {
        let path = "/system/console/configMgr/com.adobe.octopus.ncomm.bootstrap"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "maxConnections": maxConnections?.encodeToJSON(),
            "maxRequests": maxRequests?.encodeToJSON(),
            "requestTimeout": requestTimeout?.encodeToJSON(),
            "requestRetries": requestRetries?.encodeToJSON(),
            "launchTimeout": launchTimeout?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeOctopusNcommBootstrapInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter communitiesIntegrationLivefyreSlingEventFilter: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullS(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, communitiesIntegrationLivefyreSlingEventFilter: String? = nil, completion: ((data: ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSInfo?, error: ErrorType?) -> Void)) {
        comAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, communitiesIntegrationLivefyreSlingEventFilter: communitiesIntegrationLivefyreSlingEventFilter).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.social.integrations.livefyre.user.pingforpull.impl.PingPullServlet     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "communities.integration.livefyre.sling.event.filter" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter communitiesIntegrationLivefyreSlingEventFilter: (query)  (optional)

     - returns: RequestBuilder<ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSInfo> 
     */
    public class func comAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, communitiesIntegrationLivefyreSlingEventFilter: String? = nil) -> RequestBuilder<ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSInfo> {
        let path = "/system/console/configMgr/com.adobe.social.integrations.livefyre.user.pingforpull.impl.PingPullServlet"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "communities.integration.livefyre.sling.event.filter": communitiesIntegrationLivefyreSlingEventFilter
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter maxConnections: (query)  (optional)
     - parameter maxRequests: (query)  (optional)
     - parameter requestTimeout: (query)  (optional)
     - parameter logDir: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comAdobeXmpWorkerFilesNcommXMPFilesNComm(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, maxConnections: String? = nil, maxRequests: String? = nil, requestTimeout: String? = nil, logDir: String? = nil, completion: ((data: ComAdobeXmpWorkerFilesNcommXMPFilesNCommInfo?, error: ErrorType?) -> Void)) {
        comAdobeXmpWorkerFilesNcommXMPFilesNCommWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, maxConnections: maxConnections, maxRequests: maxRequests, requestTimeout: requestTimeout, logDir: logDir).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.xmp.worker.files.ncomm.XMPFilesNComm     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "service_location" : "service_location",
  "bundle_location" : "bundle_location",
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "maxRequests" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "requestTimeout" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "logDir" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "maxConnections" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter maxConnections: (query)  (optional)
     - parameter maxRequests: (query)  (optional)
     - parameter requestTimeout: (query)  (optional)
     - parameter logDir: (query)  (optional)

     - returns: RequestBuilder<ComAdobeXmpWorkerFilesNcommXMPFilesNCommInfo> 
     */
    public class func comAdobeXmpWorkerFilesNcommXMPFilesNCommWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, maxConnections: String? = nil, maxRequests: String? = nil, requestTimeout: String? = nil, logDir: String? = nil) -> RequestBuilder<ComAdobeXmpWorkerFilesNcommXMPFilesNCommInfo> {
        let path = "/system/console/configMgr/com.adobe.xmp.worker.files.ncomm.XMPFilesNComm"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "maxConnections": maxConnections,
            "maxRequests": maxRequests,
            "requestTimeout": requestTimeout,
            "logDir": logDir
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComAdobeXmpWorkerFilesNcommXMPFilesNCommInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter jdbcDriverClass: (query)  (optional)
     - parameter jdbcConnectionUri: (query)  (optional)
     - parameter jdbcUsername: (query)  (optional)
     - parameter jdbcPassword: (query)  (optional)
     - parameter jdbcValidationQuery: (query)  (optional)
     - parameter defaultReadonly: (query)  (optional)
     - parameter defaultAutocommit: (query)  (optional)
     - parameter poolSize: (query)  (optional)
     - parameter poolMaxWaitMsec: (query)  (optional)
     - parameter datasourceName: (query)  (optional)
     - parameter datasourceSvcProperties: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCommonsDatasourceJdbcpoolJdbcPoolService(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, jdbcDriverClass: String? = nil, jdbcConnectionUri: String? = nil, jdbcUsername: String? = nil, jdbcPassword: String? = nil, jdbcValidationQuery: String? = nil, defaultReadonly: Bool? = nil, defaultAutocommit: Bool? = nil, poolSize: Int32? = nil, poolMaxWaitMsec: Int32? = nil, datasourceName: String? = nil, datasourceSvcProperties: [String]? = nil, completion: ((data: ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceInfo?, error: ErrorType?) -> Void)) {
        comDayCommonsDatasourceJdbcpoolJdbcPoolServiceWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, jdbcDriverClass: jdbcDriverClass, jdbcConnectionUri: jdbcConnectionUri, jdbcUsername: jdbcUsername, jdbcPassword: jdbcPassword, jdbcValidationQuery: jdbcValidationQuery, defaultReadonly: defaultReadonly, defaultAutocommit: defaultAutocommit, poolSize: poolSize, poolMaxWaitMsec: poolMaxWaitMsec, datasourceName: datasourceName, datasourceSvcProperties: datasourceSvcProperties).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.commons.datasource.jdbcpool.JdbcPoolService     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "jdbc.password" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "default.autocommit" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "pool.max.wait.msec" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "datasource.svc.properties" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "jdbc.driver.class" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "pool.size" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "jdbc.username" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "jdbc.connection.uri" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "datasource.name" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "default.readonly" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "jdbc.validation.query" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter jdbcDriverClass: (query)  (optional)
     - parameter jdbcConnectionUri: (query)  (optional)
     - parameter jdbcUsername: (query)  (optional)
     - parameter jdbcPassword: (query)  (optional)
     - parameter jdbcValidationQuery: (query)  (optional)
     - parameter defaultReadonly: (query)  (optional)
     - parameter defaultAutocommit: (query)  (optional)
     - parameter poolSize: (query)  (optional)
     - parameter poolMaxWaitMsec: (query)  (optional)
     - parameter datasourceName: (query)  (optional)
     - parameter datasourceSvcProperties: (query)  (optional)

     - returns: RequestBuilder<ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceInfo> 
     */
    public class func comDayCommonsDatasourceJdbcpoolJdbcPoolServiceWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, jdbcDriverClass: String? = nil, jdbcConnectionUri: String? = nil, jdbcUsername: String? = nil, jdbcPassword: String? = nil, jdbcValidationQuery: String? = nil, defaultReadonly: Bool? = nil, defaultAutocommit: Bool? = nil, poolSize: Int32? = nil, poolMaxWaitMsec: Int32? = nil, datasourceName: String? = nil, datasourceSvcProperties: [String]? = nil) -> RequestBuilder<ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceInfo> {
        let path = "/system/console/configMgr/com.day.commons.datasource.jdbcpool.JdbcPoolService"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "jdbc.driver.class": jdbcDriverClass,
            "jdbc.connection.uri": jdbcConnectionUri,
            "jdbc.username": jdbcUsername,
            "jdbc.password": jdbcPassword,
            "jdbc.validation.query": jdbcValidationQuery,
            "default.readonly": defaultReadonly,
            "default.autocommit": defaultAutocommit,
            "pool.size": poolSize?.encodeToJSON(),
            "pool.max.wait.msec": poolMaxWaitMsec?.encodeToJSON(),
            "datasource.name": datasourceName,
            "datasource.svc.properties": datasourceSvcProperties
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter proxyEnabled: (query)  (optional)
     - parameter proxyHost: (query)  (optional)
     - parameter proxyUser: (query)  (optional)
     - parameter proxyPassword: (query)  (optional)
     - parameter proxyNtlmHost: (query)  (optional)
     - parameter proxyNtlmDomain: (query)  (optional)
     - parameter proxyExceptions: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCommonsHttpclient(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, proxyEnabled: Bool? = nil, proxyHost: String? = nil, proxyUser: String? = nil, proxyPassword: String? = nil, proxyNtlmHost: String? = nil, proxyNtlmDomain: String? = nil, proxyExceptions: [String]? = nil, completion: ((data: ComDayCommonsHttpclientInfo?, error: ErrorType?) -> Void)) {
        comDayCommonsHttpclientWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, proxyEnabled: proxyEnabled, proxyHost: proxyHost, proxyUser: proxyUser, proxyPassword: proxyPassword, proxyNtlmHost: proxyNtlmHost, proxyNtlmDomain: proxyNtlmDomain, proxyExceptions: proxyExceptions).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.commons.httpclient     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "proxy.exceptions" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "proxy.enabled" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "proxy.ntlm.host" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "proxy.host" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "proxy.user" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "proxy.password" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "proxy.ntlm.domain" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter proxyEnabled: (query)  (optional)
     - parameter proxyHost: (query)  (optional)
     - parameter proxyUser: (query)  (optional)
     - parameter proxyPassword: (query)  (optional)
     - parameter proxyNtlmHost: (query)  (optional)
     - parameter proxyNtlmDomain: (query)  (optional)
     - parameter proxyExceptions: (query)  (optional)

     - returns: RequestBuilder<ComDayCommonsHttpclientInfo> 
     */
    public class func comDayCommonsHttpclientWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, proxyEnabled: Bool? = nil, proxyHost: String? = nil, proxyUser: String? = nil, proxyPassword: String? = nil, proxyNtlmHost: String? = nil, proxyNtlmDomain: String? = nil, proxyExceptions: [String]? = nil) -> RequestBuilder<ComDayCommonsHttpclientInfo> {
        let path = "/system/console/configMgr/com.day.commons.httpclient"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "proxy.enabled": proxyEnabled,
            "proxy.host": proxyHost,
            "proxy.user": proxyUser,
            "proxy.password": proxyPassword,
            "proxy.ntlm.host": proxyNtlmHost,
            "proxy.ntlm.domain": proxyNtlmDomain,
            "proxy.exceptions": proxyExceptions
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCommonsHttpclientInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqStoreListenerAdditionalStorePaths: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqAnalyticsImplStorePropertiesChangeListener(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqStoreListenerAdditionalStorePaths: [String]? = nil, completion: ((data: ComDayCqAnalyticsImplStorePropertiesChangeListenerInfo?, error: ErrorType?) -> Void)) {
        comDayCqAnalyticsImplStorePropertiesChangeListenerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqStoreListenerAdditionalStorePaths: cqStoreListenerAdditionalStorePaths).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.analytics.impl.StorePropertiesChangeListener     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "cq.store.listener.additionalStorePaths" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqStoreListenerAdditionalStorePaths: (query)  (optional)

     - returns: RequestBuilder<ComDayCqAnalyticsImplStorePropertiesChangeListenerInfo> 
     */
    public class func comDayCqAnalyticsImplStorePropertiesChangeListenerWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqStoreListenerAdditionalStorePaths: [String]? = nil) -> RequestBuilder<ComDayCqAnalyticsImplStorePropertiesChangeListenerInfo> {
        let path = "/system/console/configMgr/com.day.cq.analytics.impl.StorePropertiesChangeListener"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "cq.store.listener.additionalStorePaths": cqStoreListenerAdditionalStorePaths
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqAnalyticsImplStorePropertiesChangeListenerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter allowedPaths: (query)  (optional)
     - parameter cqAnalyticsSaintExporterPagesize: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqAnalyticsSitecatalystImplExporterClassificationsExporte(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, allowedPaths: [String]? = nil, cqAnalyticsSaintExporterPagesize: Int32? = nil, completion: ((data: ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteInfo?, error: ErrorType?) -> Void)) {
        comDayCqAnalyticsSitecatalystImplExporterClassificationsExporteWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, allowedPaths: allowedPaths, cqAnalyticsSaintExporterPagesize: cqAnalyticsSaintExporterPagesize).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.analytics.sitecatalyst.impl.exporter.ClassificationsExporter     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "cq.analytics.saint.exporter.pagesize" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "allowed.paths" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter allowedPaths: (query)  (optional)
     - parameter cqAnalyticsSaintExporterPagesize: (query)  (optional)

     - returns: RequestBuilder<ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteInfo> 
     */
    public class func comDayCqAnalyticsSitecatalystImplExporterClassificationsExporteWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, allowedPaths: [String]? = nil, cqAnalyticsSaintExporterPagesize: Int32? = nil) -> RequestBuilder<ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteInfo> {
        let path = "/system/console/configMgr/com.day.cq.analytics.sitecatalyst.impl.exporter.ClassificationsExporter"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "allowed.paths": allowedPaths,
            "cq.analytics.saint.exporter.pagesize": cqAnalyticsSaintExporterPagesize?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter reportFetchAttempts: (query)  (optional)
     - parameter reportFetchDelay: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqAnalyticsSitecatalystImplImporterReportImporter(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, reportFetchAttempts: Int32? = nil, reportFetchDelay: Int32? = nil, completion: ((data: ComDayCqAnalyticsSitecatalystImplImporterReportImporterInfo?, error: ErrorType?) -> Void)) {
        comDayCqAnalyticsSitecatalystImplImporterReportImporterWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, reportFetchAttempts: reportFetchAttempts, reportFetchDelay: reportFetchDelay).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.analytics.sitecatalyst.impl.importer.ReportImporter     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "report.fetch.delay" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "report.fetch.attempts" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter reportFetchAttempts: (query)  (optional)
     - parameter reportFetchDelay: (query)  (optional)

     - returns: RequestBuilder<ComDayCqAnalyticsSitecatalystImplImporterReportImporterInfo> 
     */
    public class func comDayCqAnalyticsSitecatalystImplImporterReportImporterWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, reportFetchAttempts: Int32? = nil, reportFetchDelay: Int32? = nil) -> RequestBuilder<ComDayCqAnalyticsSitecatalystImplImporterReportImporterInfo> {
        let path = "/system/console/configMgr/com.day.cq.analytics.sitecatalyst.impl.importer.ReportImporter"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "report.fetch.attempts": reportFetchAttempts?.encodeToJSON(),
            "report.fetch.delay": reportFetchDelay?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqAnalyticsSitecatalystImplImporterReportImporterInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqAnalyticsAdapterfactoryContextstores: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactory(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqAnalyticsAdapterfactoryContextstores: [String]? = nil, completion: ((data: ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryInfo?, error: ErrorType?) -> Void)) {
        comDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqAnalyticsAdapterfactoryContextstores: cqAnalyticsAdapterfactoryContextstores).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.analytics.sitecatalyst.impl.SitecatalystAdapterFactory     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "cq.analytics.adapterfactory.contextstores" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqAnalyticsAdapterfactoryContextstores: (query)  (optional)

     - returns: RequestBuilder<ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryInfo> 
     */
    public class func comDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqAnalyticsAdapterfactoryContextstores: [String]? = nil) -> RequestBuilder<ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryInfo> {
        let path = "/system/console/configMgr/com.day.cq.analytics.sitecatalyst.impl.SitecatalystAdapterFactory"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "cq.analytics.adapterfactory.contextstores": cqAnalyticsAdapterfactoryContextstores
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqAnalyticsSitecatalystServiceDatacenterUrl: (query)  (optional)
     - parameter devhostnamepatterns: (query)  (optional)
     - parameter connectionTimeout: (query)  (optional)
     - parameter socketTimeout: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqAnalyticsSitecatalystServiceDatacenterUrl: [String]? = nil, devhostnamepatterns: [String]? = nil, connectionTimeout: Int32? = nil, socketTimeout: Int32? = nil, completion: ((data: ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplInfo?, error: ErrorType?) -> Void)) {
        comDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqAnalyticsSitecatalystServiceDatacenterUrl: cqAnalyticsSitecatalystServiceDatacenterUrl, devhostnamepatterns: devhostnamepatterns, connectionTimeout: connectionTimeout, socketTimeout: socketTimeout).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.analytics.sitecatalyst.impl.SitecatalystHttpClientImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "service_location" : "service_location",
  "bundle_location" : "bundle_location",
  "description" : "description",
  "pid" : "pid",
  "additionalProperties" : "additionalProperties",
  "title" : "title",
  "properties" : {
    "connection.timeout" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "cq.analytics.sitecatalyst.service.datacenter.url" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "socket.timeout" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "devhostnamepatterns" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqAnalyticsSitecatalystServiceDatacenterUrl: (query)  (optional)
     - parameter devhostnamepatterns: (query)  (optional)
     - parameter connectionTimeout: (query)  (optional)
     - parameter socketTimeout: (query)  (optional)

     - returns: RequestBuilder<ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplInfo> 
     */
    public class func comDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqAnalyticsSitecatalystServiceDatacenterUrl: [String]? = nil, devhostnamepatterns: [String]? = nil, connectionTimeout: Int32? = nil, socketTimeout: Int32? = nil) -> RequestBuilder<ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplInfo> {
        let path = "/system/console/configMgr/com.day.cq.analytics.sitecatalyst.impl.SitecatalystHttpClientImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "cq.analytics.sitecatalyst.service.datacenter.url": cqAnalyticsSitecatalystServiceDatacenterUrl,
            "devhostnamepatterns": devhostnamepatterns,
            "connection.timeout": connectionTimeout?.encodeToJSON(),
            "socket.timeout": socketTimeout?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqAnalyticsTestandtargetAccountoptionsupdaterEnabled: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqAnalyticsTestandtargetImplAccountOptionsUpdater(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqAnalyticsTestandtargetAccountoptionsupdaterEnabled: Bool? = nil, completion: ((data: ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterInfo?, error: ErrorType?) -> Void)) {
        comDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqAnalyticsTestandtargetAccountoptionsupdaterEnabled: cqAnalyticsTestandtargetAccountoptionsupdaterEnabled).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.analytics.testandtarget.impl.AccountOptionsUpdater     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "cq.analytics.testandtarget.accountoptionsupdater.enabled" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqAnalyticsTestandtargetAccountoptionsupdaterEnabled: (query)  (optional)

     - returns: RequestBuilder<ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterInfo> 
     */
    public class func comDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqAnalyticsTestandtargetAccountoptionsupdaterEnabled: Bool? = nil) -> RequestBuilder<ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterInfo> {
        let path = "/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.AccountOptionsUpdater"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "cq.analytics.testandtarget.accountoptionsupdater.enabled": cqAnalyticsTestandtargetAccountoptionsupdaterEnabled
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqAnalyticsTestandtargetDeleteauthoractivitylistenerEnabled: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListener(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqAnalyticsTestandtargetDeleteauthoractivitylistenerEnabled: Bool? = nil, completion: ((data: ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerInfo?, error: ErrorType?) -> Void)) {
        comDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqAnalyticsTestandtargetDeleteauthoractivitylistenerEnabled: cqAnalyticsTestandtargetDeleteauthoractivitylistenerEnabled).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.analytics.testandtarget.impl.DeleteAuthorActivityListener     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "cq.analytics.testandtarget.deleteauthoractivitylistener.enabled" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqAnalyticsTestandtargetDeleteauthoractivitylistenerEnabled: (query)  (optional)

     - returns: RequestBuilder<ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerInfo> 
     */
    public class func comDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqAnalyticsTestandtargetDeleteauthoractivitylistenerEnabled: Bool? = nil) -> RequestBuilder<ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerInfo> {
        let path = "/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.DeleteAuthorActivityListener"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "cq.analytics.testandtarget.deleteauthoractivitylistener.enabled": cqAnalyticsTestandtargetDeleteauthoractivitylistenerEnabled
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqAnalyticsTestandtargetPushauthorcampaignpagelistenerEnabled: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListener(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqAnalyticsTestandtargetPushauthorcampaignpagelistenerEnabled: Bool? = nil, completion: ((data: ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerInfo?, error: ErrorType?) -> Void)) {
        comDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqAnalyticsTestandtargetPushauthorcampaignpagelistenerEnabled: cqAnalyticsTestandtargetPushauthorcampaignpagelistenerEnabled).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.analytics.testandtarget.impl.PushAuthorCampaignPageListener     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "service_location" : "service_location",
  "bundle_location" : "bundle_location",
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "cq.analytics.testandtarget.pushauthorcampaignpagelistener.enabled" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqAnalyticsTestandtargetPushauthorcampaignpagelistenerEnabled: (query)  (optional)

     - returns: RequestBuilder<ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerInfo> 
     */
    public class func comDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqAnalyticsTestandtargetPushauthorcampaignpagelistenerEnabled: Bool? = nil) -> RequestBuilder<ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerInfo> {
        let path = "/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.PushAuthorCampaignPageListener"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "cq.analytics.testandtarget.pushauthorcampaignpagelistener.enabled": cqAnalyticsTestandtargetPushauthorcampaignpagelistenerEnabled
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqAnalyticsTestandtargetSegmentimporterEnabled: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqAnalyticsTestandtargetImplSegmentImporter(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqAnalyticsTestandtargetSegmentimporterEnabled: Bool? = nil, completion: ((data: ComDayCqAnalyticsTestandtargetImplSegmentImporterInfo?, error: ErrorType?) -> Void)) {
        comDayCqAnalyticsTestandtargetImplSegmentImporterWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqAnalyticsTestandtargetSegmentimporterEnabled: cqAnalyticsTestandtargetSegmentimporterEnabled).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.analytics.testandtarget.impl.SegmentImporter     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "cq.analytics.testandtarget.segmentimporter.enabled" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqAnalyticsTestandtargetSegmentimporterEnabled: (query)  (optional)

     - returns: RequestBuilder<ComDayCqAnalyticsTestandtargetImplSegmentImporterInfo> 
     */
    public class func comDayCqAnalyticsTestandtargetImplSegmentImporterWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqAnalyticsTestandtargetSegmentimporterEnabled: Bool? = nil) -> RequestBuilder<ComDayCqAnalyticsTestandtargetImplSegmentImporterInfo> {
        let path = "/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.SegmentImporter"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "cq.analytics.testandtarget.segmentimporter.enabled": cqAnalyticsTestandtargetSegmentimporterEnabled
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqAnalyticsTestandtargetImplSegmentImporterInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter endpointUri: (query)  (optional)
     - parameter connectionTimeout: (query)  (optional)
     - parameter socketTimeout: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqAnalyticsTestandtargetImplServiceWebServiceImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, endpointUri: String? = nil, connectionTimeout: Int32? = nil, socketTimeout: Int32? = nil, completion: ((data: ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplInfo?, error: ErrorType?) -> Void)) {
        comDayCqAnalyticsTestandtargetImplServiceWebServiceImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, endpointUri: endpointUri, connectionTimeout: connectionTimeout, socketTimeout: socketTimeout).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.analytics.testandtarget.impl.service.WebServiceImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "socketTimeout" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "endpointUri" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "connectionTimeout" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter endpointUri: (query)  (optional)
     - parameter connectionTimeout: (query)  (optional)
     - parameter socketTimeout: (query)  (optional)

     - returns: RequestBuilder<ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplInfo> 
     */
    public class func comDayCqAnalyticsTestandtargetImplServiceWebServiceImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, endpointUri: String? = nil, connectionTimeout: Int32? = nil, socketTimeout: Int32? = nil) -> RequestBuilder<ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplInfo> {
        let path = "/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.service.WebServiceImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "endpointUri": endpointUri,
            "connectionTimeout": connectionTimeout?.encodeToJSON(),
            "socketTimeout": socketTimeout?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter testandtargetEndpointUrl: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqAnalyticsTestandtargetImplServletsAdminServerServlet(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, testandtargetEndpointUrl: String? = nil, completion: ((data: ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletInfo?, error: ErrorType?) -> Void)) {
        comDayCqAnalyticsTestandtargetImplServletsAdminServerServletWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, testandtargetEndpointUrl: testandtargetEndpointUrl).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.analytics.testandtarget.impl.servlets.AdminServerServlet     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "testandtarget.endpoint.url" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter testandtargetEndpointUrl: (query)  (optional)

     - returns: RequestBuilder<ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletInfo> 
     */
    public class func comDayCqAnalyticsTestandtargetImplServletsAdminServerServletWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, testandtargetEndpointUrl: String? = nil) -> RequestBuilder<ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletInfo> {
        let path = "/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.servlets.AdminServerServlet"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "testandtarget.endpoint.url": testandtargetEndpointUrl
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqAnalyticsTestandtargetApiUrl: (query)  (optional)
     - parameter cqAnalyticsTestandtargetTimeout: (query)  (optional)
     - parameter cqAnalyticsTestandtargetSockettimeout: (query)  (optional)
     - parameter cqAnalyticsTestandtargetRecommendationsUrlReplace: (query)  (optional)
     - parameter cqAnalyticsTestandtargetRecommendationsUrlReplacewith: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqAnalyticsTestandtargetApiUrl: String? = nil, cqAnalyticsTestandtargetTimeout: Int32? = nil, cqAnalyticsTestandtargetSockettimeout: Int32? = nil, cqAnalyticsTestandtargetRecommendationsUrlReplace: String? = nil, cqAnalyticsTestandtargetRecommendationsUrlReplacewith: String? = nil, completion: ((data: ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplInfo?, error: ErrorType?) -> Void)) {
        comDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqAnalyticsTestandtargetApiUrl: cqAnalyticsTestandtargetApiUrl, cqAnalyticsTestandtargetTimeout: cqAnalyticsTestandtargetTimeout, cqAnalyticsTestandtargetSockettimeout: cqAnalyticsTestandtargetSockettimeout, cqAnalyticsTestandtargetRecommendationsUrlReplace: cqAnalyticsTestandtargetRecommendationsUrlReplace, cqAnalyticsTestandtargetRecommendationsUrlReplacewith: cqAnalyticsTestandtargetRecommendationsUrlReplacewith).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.analytics.testandtarget.impl.TestandtargetHttpClientImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "cq.analytics.testandtarget.sockettimeout" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "cq.analytics.testandtarget.api.url" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "cq.analytics.testandtarget.recommendations.url.replacewith" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "cq.analytics.testandtarget.recommendations.url.replace" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "cq.analytics.testandtarget.timeout" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqAnalyticsTestandtargetApiUrl: (query)  (optional)
     - parameter cqAnalyticsTestandtargetTimeout: (query)  (optional)
     - parameter cqAnalyticsTestandtargetSockettimeout: (query)  (optional)
     - parameter cqAnalyticsTestandtargetRecommendationsUrlReplace: (query)  (optional)
     - parameter cqAnalyticsTestandtargetRecommendationsUrlReplacewith: (query)  (optional)

     - returns: RequestBuilder<ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplInfo> 
     */
    public class func comDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqAnalyticsTestandtargetApiUrl: String? = nil, cqAnalyticsTestandtargetTimeout: Int32? = nil, cqAnalyticsTestandtargetSockettimeout: Int32? = nil, cqAnalyticsTestandtargetRecommendationsUrlReplace: String? = nil, cqAnalyticsTestandtargetRecommendationsUrlReplacewith: String? = nil) -> RequestBuilder<ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplInfo> {
        let path = "/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.TestandtargetHttpClientImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "cq.analytics.testandtarget.api.url": cqAnalyticsTestandtargetApiUrl,
            "cq.analytics.testandtarget.timeout": cqAnalyticsTestandtargetTimeout?.encodeToJSON(),
            "cq.analytics.testandtarget.sockettimeout": cqAnalyticsTestandtargetSockettimeout?.encodeToJSON(),
            "cq.analytics.testandtarget.recommendations.url.replace": cqAnalyticsTestandtargetRecommendationsUrlReplace,
            "cq.analytics.testandtarget.recommendations.url.replacewith": cqAnalyticsTestandtargetRecommendationsUrlReplacewith
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cugExemptedPrincipals: (query)  (optional)
     - parameter cugEnabled: (query)  (optional)
     - parameter cugPrincipalsRegex: (query)  (optional)
     - parameter cugPrincipalsReplacement: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqAuthImplCugCugSupportImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cugExemptedPrincipals: [String]? = nil, cugEnabled: Bool? = nil, cugPrincipalsRegex: String? = nil, cugPrincipalsReplacement: String? = nil, completion: ((data: ComDayCqAuthImplCugCugSupportImplInfo?, error: ErrorType?) -> Void)) {
        comDayCqAuthImplCugCugSupportImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cugExemptedPrincipals: cugExemptedPrincipals, cugEnabled: cugEnabled, cugPrincipalsRegex: cugPrincipalsRegex, cugPrincipalsReplacement: cugPrincipalsReplacement).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.auth.impl.cug.CugSupportImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "cug.principals.regex" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "cug.principals.replacement" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "cug.enabled" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "cug.exempted.principals" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cugExemptedPrincipals: (query)  (optional)
     - parameter cugEnabled: (query)  (optional)
     - parameter cugPrincipalsRegex: (query)  (optional)
     - parameter cugPrincipalsReplacement: (query)  (optional)

     - returns: RequestBuilder<ComDayCqAuthImplCugCugSupportImplInfo> 
     */
    public class func comDayCqAuthImplCugCugSupportImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cugExemptedPrincipals: [String]? = nil, cugEnabled: Bool? = nil, cugPrincipalsRegex: String? = nil, cugPrincipalsReplacement: String? = nil) -> RequestBuilder<ComDayCqAuthImplCugCugSupportImplInfo> {
        let path = "/system/console/configMgr/com.day.cq.auth.impl.cug.CugSupportImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "cug.exempted.principals": cugExemptedPrincipals,
            "cug.enabled": cugEnabled,
            "cug.principals.regex": cugPrincipalsRegex,
            "cug.principals.replacement": cugPrincipalsReplacement
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqAuthImplCugCugSupportImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter path: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter authLoginselectorMappings: (query)  (optional)
     - parameter authLoginselectorChangepwMappings: (query)  (optional)
     - parameter authLoginselectorDefaultloginpage: (query)  (optional)
     - parameter authLoginselectorDefaultchangepwpage: (query)  (optional)
     - parameter authLoginselectorHandle: (query)  (optional)
     - parameter authLoginselectorHandleAllExtensions: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqAuthImplLoginSelectorHandler(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, path: String? = nil, serviceRanking: Int32? = nil, authLoginselectorMappings: [String]? = nil, authLoginselectorChangepwMappings: [String]? = nil, authLoginselectorDefaultloginpage: String? = nil, authLoginselectorDefaultchangepwpage: String? = nil, authLoginselectorHandle: [String]? = nil, authLoginselectorHandleAllExtensions: Bool? = nil, completion: ((data: ComDayCqAuthImplLoginSelectorHandlerInfo?, error: ErrorType?) -> Void)) {
        comDayCqAuthImplLoginSelectorHandlerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, path: path, serviceRanking: serviceRanking, authLoginselectorMappings: authLoginselectorMappings, authLoginselectorChangepwMappings: authLoginselectorChangepwMappings, authLoginselectorDefaultloginpage: authLoginselectorDefaultloginpage, authLoginselectorDefaultchangepwpage: authLoginselectorDefaultchangepwpage, authLoginselectorHandle: authLoginselectorHandle, authLoginselectorHandleAllExtensions: authLoginselectorHandleAllExtensions).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.auth.impl.LoginSelectorHandler     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "service_location" : "service_location",
  "bundle_location" : "bundle_location",
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "auth.loginselector.handle.all.extensions" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "path" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "auth.loginselector.changepw.mappings" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "auth.loginselector.defaultloginpage" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "auth.loginselector.handle" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "auth.loginselector.mappings" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "service.ranking" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "auth.loginselector.defaultchangepwpage" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter path: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter authLoginselectorMappings: (query)  (optional)
     - parameter authLoginselectorChangepwMappings: (query)  (optional)
     - parameter authLoginselectorDefaultloginpage: (query)  (optional)
     - parameter authLoginselectorDefaultchangepwpage: (query)  (optional)
     - parameter authLoginselectorHandle: (query)  (optional)
     - parameter authLoginselectorHandleAllExtensions: (query)  (optional)

     - returns: RequestBuilder<ComDayCqAuthImplLoginSelectorHandlerInfo> 
     */
    public class func comDayCqAuthImplLoginSelectorHandlerWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, path: String? = nil, serviceRanking: Int32? = nil, authLoginselectorMappings: [String]? = nil, authLoginselectorChangepwMappings: [String]? = nil, authLoginselectorDefaultloginpage: String? = nil, authLoginselectorDefaultchangepwpage: String? = nil, authLoginselectorHandle: [String]? = nil, authLoginselectorHandleAllExtensions: Bool? = nil) -> RequestBuilder<ComDayCqAuthImplLoginSelectorHandlerInfo> {
        let path = "/system/console/configMgr/com.day.cq.auth.impl.LoginSelectorHandler"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "path": path,
            "service.ranking": serviceRanking?.encodeToJSON(),
            "auth.loginselector.mappings": authLoginselectorMappings,
            "auth.loginselector.changepw.mappings": authLoginselectorChangepwMappings,
            "auth.loginselector.defaultloginpage": authLoginselectorDefaultloginpage,
            "auth.loginselector.defaultchangepwpage": authLoginselectorDefaultchangepwpage,
            "auth.loginselector.handle": authLoginselectorHandle,
            "auth.loginselector.handle.all.extensions": authLoginselectorHandleAllExtensions
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqAuthImplLoginSelectorHandlerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter externalizerDomains: (query)  (optional)
     - parameter externalizerHost: (query)  (optional)
     - parameter externalizerContextpath: (query)  (optional)
     - parameter externalizerEncodedpath: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqCommonsImplExternalizerImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, externalizerDomains: [String]? = nil, externalizerHost: String? = nil, externalizerContextpath: String? = nil, externalizerEncodedpath: Bool? = nil, completion: ((data: ComDayCqCommonsImplExternalizerImplInfo?, error: ErrorType?) -> Void)) {
        comDayCqCommonsImplExternalizerImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, externalizerDomains: externalizerDomains, externalizerHost: externalizerHost, externalizerContextpath: externalizerContextpath, externalizerEncodedpath: externalizerEncodedpath).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.commons.impl.ExternalizerImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "service_location" : "service_location",
  "bundle_location" : "bundle_location",
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "externalizer.contextpath" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "externalizer.domains" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "externalizer.host" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "externalizer.encodedpath" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter externalizerDomains: (query)  (optional)
     - parameter externalizerHost: (query)  (optional)
     - parameter externalizerContextpath: (query)  (optional)
     - parameter externalizerEncodedpath: (query)  (optional)

     - returns: RequestBuilder<ComDayCqCommonsImplExternalizerImplInfo> 
     */
    public class func comDayCqCommonsImplExternalizerImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, externalizerDomains: [String]? = nil, externalizerHost: String? = nil, externalizerContextpath: String? = nil, externalizerEncodedpath: Bool? = nil) -> RequestBuilder<ComDayCqCommonsImplExternalizerImplInfo> {
        let path = "/system/console/configMgr/com.day.cq.commons.impl.ExternalizerImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "externalizer.domains": externalizerDomains,
            "externalizer.host": externalizerHost,
            "externalizer.contextpath": externalizerContextpath,
            "externalizer.encodedpath": externalizerEncodedpath
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqCommonsImplExternalizerImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter rootmappingTarget: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqCommonsServletsRootMappingServlet(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, rootmappingTarget: String? = nil, completion: ((data: ComDayCqCommonsServletsRootMappingServletInfo?, error: ErrorType?) -> Void)) {
        comDayCqCommonsServletsRootMappingServletWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, rootmappingTarget: rootmappingTarget).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.commons.servlets.RootMappingServlet     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "service_location" : "service_location",
  "bundle_location" : "bundle_location",
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "rootmapping.target" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter rootmappingTarget: (query)  (optional)

     - returns: RequestBuilder<ComDayCqCommonsServletsRootMappingServletInfo> 
     */
    public class func comDayCqCommonsServletsRootMappingServletWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, rootmappingTarget: String? = nil) -> RequestBuilder<ComDayCqCommonsServletsRootMappingServletInfo> {
        let path = "/system/console/configMgr/com.day.cq.commons.servlets.RootMappingServlet"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "rootmapping.target": rootmappingTarget
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqCommonsServletsRootMappingServletInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter codeupgradetasks: (query)  (optional)
     - parameter codeupgradetaskfilters: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionChecke(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, codeupgradetasks: [String]? = nil, codeupgradetaskfilters: [String]? = nil, completion: ((data: ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfo?, error: ErrorType?) -> Void)) {
        comDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, codeupgradetasks: codeupgradetasks, codeupgradetaskfilters: codeupgradetaskfilters).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.compat.codeupgrade.impl.CodeUpgradeExecutionConditionChecker     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "codeupgradetaskfilters" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "codeupgradetasks" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter codeupgradetasks: (query)  (optional)
     - parameter codeupgradetaskfilters: (query)  (optional)

     - returns: RequestBuilder<ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfo> 
     */
    public class func comDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, codeupgradetasks: [String]? = nil, codeupgradetaskfilters: [String]? = nil) -> RequestBuilder<ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfo> {
        let path = "/system/console/configMgr/com.day.cq.compat.codeupgrade.impl.CodeUpgradeExecutionConditionChecker"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "codeupgradetasks": codeupgradetasks,
            "codeupgradetaskfilters": codeupgradetaskfilters
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter upgradeTaskIgnoreList: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqCompatCodeupgradeImplUpgradeTaskIgnoreList(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, upgradeTaskIgnoreList: [String]? = nil, completion: ((data: ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListInfo?, error: ErrorType?) -> Void)) {
        comDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, upgradeTaskIgnoreList: upgradeTaskIgnoreList).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.compat.codeupgrade.impl.UpgradeTaskIgnoreList     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "upgradeTaskIgnoreList" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter upgradeTaskIgnoreList: (query)  (optional)

     - returns: RequestBuilder<ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListInfo> 
     */
    public class func comDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, upgradeTaskIgnoreList: [String]? = nil) -> RequestBuilder<ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListInfo> {
        let path = "/system/console/configMgr/com.day.cq.compat.codeupgrade.impl.UpgradeTaskIgnoreList"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "upgradeTaskIgnoreList": upgradeTaskIgnoreList
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter effectiveBundleListPath: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelist(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, effectiveBundleListPath: String? = nil, completion: ((data: ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistInfo?, error: ErrorType?) -> Void)) {
        comDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, effectiveBundleListPath: effectiveBundleListPath).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.compat.codeupgrade.impl.VersionRangeTaskIgnorelist     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "effectiveBundleListPath" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter effectiveBundleListPath: (query)  (optional)

     - returns: RequestBuilder<ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistInfo> 
     */
    public class func comDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, effectiveBundleListPath: String? = nil) -> RequestBuilder<ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistInfo> {
        let path = "/system/console/configMgr/com.day.cq.compat.codeupgrade.impl.VersionRangeTaskIgnorelist"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "effectiveBundleListPath": effectiveBundleListPath
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter contentsyncFallbackAuthorizable: (query)  (optional)
     - parameter contentsyncFallbackUpdateuser: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqContentsyncImplContentSyncManagerImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, contentsyncFallbackAuthorizable: String? = nil, contentsyncFallbackUpdateuser: String? = nil, completion: ((data: ComDayCqContentsyncImplContentSyncManagerImplInfo?, error: ErrorType?) -> Void)) {
        comDayCqContentsyncImplContentSyncManagerImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, contentsyncFallbackAuthorizable: contentsyncFallbackAuthorizable, contentsyncFallbackUpdateuser: contentsyncFallbackUpdateuser).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.contentsync.impl.ContentSyncManagerImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "contentsync.fallback.authorizable" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "contentsync.fallback.updateuser" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter contentsyncFallbackAuthorizable: (query)  (optional)
     - parameter contentsyncFallbackUpdateuser: (query)  (optional)

     - returns: RequestBuilder<ComDayCqContentsyncImplContentSyncManagerImplInfo> 
     */
    public class func comDayCqContentsyncImplContentSyncManagerImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, contentsyncFallbackAuthorizable: String? = nil, contentsyncFallbackUpdateuser: String? = nil) -> RequestBuilder<ComDayCqContentsyncImplContentSyncManagerImplInfo> {
        let path = "/system/console/configMgr/com.day.cq.contentsync.impl.ContentSyncManagerImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "contentsync.fallback.authorizable": contentsyncFallbackAuthorizable,
            "contentsync.fallback.updateuser": contentsyncFallbackUpdateuser
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqContentsyncImplContentSyncManagerImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter largeFileThreshold: (query)  (optional)
     - parameter largeCommentThreshold: (query)  (optional)
     - parameter cqDamEnableExtMetaExtraction: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqDamCommonsHandlerStandardImageHandler(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, largeFileThreshold: Int32? = nil, largeCommentThreshold: Int32? = nil, cqDamEnableExtMetaExtraction: Bool? = nil, completion: ((data: ComDayCqDamCommonsHandlerStandardImageHandlerInfo?, error: ErrorType?) -> Void)) {
        comDayCqDamCommonsHandlerStandardImageHandlerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, largeFileThreshold: largeFileThreshold, largeCommentThreshold: largeCommentThreshold, cqDamEnableExtMetaExtraction: cqDamEnableExtMetaExtraction).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.commons.handler.StandardImageHandler     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "large_comment_threshold" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "large_file_threshold" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "cq.dam.enable.ext.meta.extraction" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter largeFileThreshold: (query)  (optional)
     - parameter largeCommentThreshold: (query)  (optional)
     - parameter cqDamEnableExtMetaExtraction: (query)  (optional)

     - returns: RequestBuilder<ComDayCqDamCommonsHandlerStandardImageHandlerInfo> 
     */
    public class func comDayCqDamCommonsHandlerStandardImageHandlerWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, largeFileThreshold: Int32? = nil, largeCommentThreshold: Int32? = nil, cqDamEnableExtMetaExtraction: Bool? = nil) -> RequestBuilder<ComDayCqDamCommonsHandlerStandardImageHandlerInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.commons.handler.StandardImageHandler"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "large_file_threshold": largeFileThreshold?.encodeToJSON(),
            "large_comment_threshold": largeCommentThreshold?.encodeToJSON(),
            "cq.dam.enable.ext.meta.extraction": cqDamEnableExtMetaExtraction
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqDamCommonsHandlerStandardImageHandlerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter xmpFilterApplyWhitelist: (query)  (optional)
     - parameter xmpFilterWhitelist: (query)  (optional)
     - parameter xmpFilterApplyBlacklist: (query)  (optional)
     - parameter xmpFilterBlacklist: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqDamCommonsMetadataXmpFilterBlackWhite(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, xmpFilterApplyWhitelist: Bool? = nil, xmpFilterWhitelist: [String]? = nil, xmpFilterApplyBlacklist: Bool? = nil, xmpFilterBlacklist: [String]? = nil, completion: ((data: ComDayCqDamCommonsMetadataXmpFilterBlackWhiteInfo?, error: ErrorType?) -> Void)) {
        comDayCqDamCommonsMetadataXmpFilterBlackWhiteWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, xmpFilterApplyWhitelist: xmpFilterApplyWhitelist, xmpFilterWhitelist: xmpFilterWhitelist, xmpFilterApplyBlacklist: xmpFilterApplyBlacklist, xmpFilterBlacklist: xmpFilterBlacklist).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.commons.metadata.XmpFilterBlackWhite     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "xmp.filter.apply_whitelist" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "xmp.filter.apply_blacklist" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "xmp.filter.blacklist" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "xmp.filter.whitelist" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter xmpFilterApplyWhitelist: (query)  (optional)
     - parameter xmpFilterWhitelist: (query)  (optional)
     - parameter xmpFilterApplyBlacklist: (query)  (optional)
     - parameter xmpFilterBlacklist: (query)  (optional)

     - returns: RequestBuilder<ComDayCqDamCommonsMetadataXmpFilterBlackWhiteInfo> 
     */
    public class func comDayCqDamCommonsMetadataXmpFilterBlackWhiteWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, xmpFilterApplyWhitelist: Bool? = nil, xmpFilterWhitelist: [String]? = nil, xmpFilterApplyBlacklist: Bool? = nil, xmpFilterBlacklist: [String]? = nil) -> RequestBuilder<ComDayCqDamCommonsMetadataXmpFilterBlackWhiteInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.commons.metadata.XmpFilterBlackWhite"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "xmp.filter.apply_whitelist": xmpFilterApplyWhitelist,
            "xmp.filter.whitelist": xmpFilterWhitelist,
            "xmp.filter.apply_blacklist": xmpFilterApplyBlacklist,
            "xmp.filter.blacklist": xmpFilterBlacklist
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqDamCommonsMetadataXmpFilterBlackWhiteInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter largeFileMin: (query)  (optional)
     - parameter cacheApply: (query)  (optional)
     - parameter mimeTypes: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqDamCommonsUtilImplAssetCacheImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, largeFileMin: Int32? = nil, cacheApply: Bool? = nil, mimeTypes: [String]? = nil, completion: ((data: ComDayCqDamCommonsUtilImplAssetCacheImplInfo?, error: ErrorType?) -> Void)) {
        comDayCqDamCommonsUtilImplAssetCacheImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, largeFileMin: largeFileMin, cacheApply: cacheApply, mimeTypes: mimeTypes).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.commons.util.impl.AssetCacheImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "large.file.min" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "cache.apply" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "mime.types" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter largeFileMin: (query)  (optional)
     - parameter cacheApply: (query)  (optional)
     - parameter mimeTypes: (query)  (optional)

     - returns: RequestBuilder<ComDayCqDamCommonsUtilImplAssetCacheImplInfo> 
     */
    public class func comDayCqDamCommonsUtilImplAssetCacheImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, largeFileMin: Int32? = nil, cacheApply: Bool? = nil, mimeTypes: [String]? = nil) -> RequestBuilder<ComDayCqDamCommonsUtilImplAssetCacheImplInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.commons.util.impl.AssetCacheImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "large.file.min": largeFileMin?.encodeToJSON(),
            "cache.apply": cacheApply,
            "mime.types": mimeTypes
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqDamCommonsUtilImplAssetCacheImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqDamConfigAnnotationPdfDocumentWidth: (query)  (optional)
     - parameter cqDamConfigAnnotationPdfDocumentHeight: (query)  (optional)
     - parameter cqDamConfigAnnotationPdfDocumentPaddingHorizontal: (query)  (optional)
     - parameter cqDamConfigAnnotationPdfDocumentPaddingVertical: (query)  (optional)
     - parameter cqDamConfigAnnotationPdfFontSize: (query)  (optional)
     - parameter cqDamConfigAnnotationPdfFontColor: (query)  (optional)
     - parameter cqDamConfigAnnotationPdfFontFamily: (query)  (optional)
     - parameter cqDamConfigAnnotationPdfFontLight: (query)  (optional)
     - parameter cqDamConfigAnnotationPdfMarginTextImage: (query)  (optional)
     - parameter cqDamConfigAnnotationPdfMinImageHeight: (query)  (optional)
     - parameter cqDamConfigAnnotationPdfReviewStatusWidth: (query)  (optional)
     - parameter cqDamConfigAnnotationPdfReviewStatusColorApproved: (query)  (optional)
     - parameter cqDamConfigAnnotationPdfReviewStatusColorRejected: (query)  (optional)
     - parameter cqDamConfigAnnotationPdfReviewStatusColorChangesRequested: (query)  (optional)
     - parameter cqDamConfigAnnotationPdfAnnotationMarkerWidth: (query)  (optional)
     - parameter cqDamConfigAnnotationPdfAssetMinheight: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqDamCoreImplAnnotationPdfAnnotationPdfConfig(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqDamConfigAnnotationPdfDocumentWidth: Int32? = nil, cqDamConfigAnnotationPdfDocumentHeight: Int32? = nil, cqDamConfigAnnotationPdfDocumentPaddingHorizontal: Int32? = nil, cqDamConfigAnnotationPdfDocumentPaddingVertical: Int32? = nil, cqDamConfigAnnotationPdfFontSize: Int32? = nil, cqDamConfigAnnotationPdfFontColor: String? = nil, cqDamConfigAnnotationPdfFontFamily: String? = nil, cqDamConfigAnnotationPdfFontLight: String? = nil, cqDamConfigAnnotationPdfMarginTextImage: Int32? = nil, cqDamConfigAnnotationPdfMinImageHeight: Int32? = nil, cqDamConfigAnnotationPdfReviewStatusWidth: Int32? = nil, cqDamConfigAnnotationPdfReviewStatusColorApproved: String? = nil, cqDamConfigAnnotationPdfReviewStatusColorRejected: String? = nil, cqDamConfigAnnotationPdfReviewStatusColorChangesRequested: String? = nil, cqDamConfigAnnotationPdfAnnotationMarkerWidth: Int32? = nil, cqDamConfigAnnotationPdfAssetMinheight: Int32? = nil, completion: ((data: ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigInfo?, error: ErrorType?) -> Void)) {
        comDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqDamConfigAnnotationPdfDocumentWidth: cqDamConfigAnnotationPdfDocumentWidth, cqDamConfigAnnotationPdfDocumentHeight: cqDamConfigAnnotationPdfDocumentHeight, cqDamConfigAnnotationPdfDocumentPaddingHorizontal: cqDamConfigAnnotationPdfDocumentPaddingHorizontal, cqDamConfigAnnotationPdfDocumentPaddingVertical: cqDamConfigAnnotationPdfDocumentPaddingVertical, cqDamConfigAnnotationPdfFontSize: cqDamConfigAnnotationPdfFontSize, cqDamConfigAnnotationPdfFontColor: cqDamConfigAnnotationPdfFontColor, cqDamConfigAnnotationPdfFontFamily: cqDamConfigAnnotationPdfFontFamily, cqDamConfigAnnotationPdfFontLight: cqDamConfigAnnotationPdfFontLight, cqDamConfigAnnotationPdfMarginTextImage: cqDamConfigAnnotationPdfMarginTextImage, cqDamConfigAnnotationPdfMinImageHeight: cqDamConfigAnnotationPdfMinImageHeight, cqDamConfigAnnotationPdfReviewStatusWidth: cqDamConfigAnnotationPdfReviewStatusWidth, cqDamConfigAnnotationPdfReviewStatusColorApproved: cqDamConfigAnnotationPdfReviewStatusColorApproved, cqDamConfigAnnotationPdfReviewStatusColorRejected: cqDamConfigAnnotationPdfReviewStatusColorRejected, cqDamConfigAnnotationPdfReviewStatusColorChangesRequested: cqDamConfigAnnotationPdfReviewStatusColorChangesRequested, cqDamConfigAnnotationPdfAnnotationMarkerWidth: cqDamConfigAnnotationPdfAnnotationMarkerWidth, cqDamConfigAnnotationPdfAssetMinheight: cqDamConfigAnnotationPdfAssetMinheight).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.core.impl.annotation.pdf.AnnotationPdfConfig     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "cq.dam.config.annotation.pdf.font.family" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "cq.dam.config.annotation.pdf.reviewStatus.color.approved" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "cq.dam.config.annotation.pdf.font.color" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "cq.dam.config.annotation.pdf.asset.minheight" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "cq.dam.config.annotation.pdf.document.padding.horizontal" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "cq.dam.config.annotation.pdf.font.light" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "cq.dam.config.annotation.pdf.reviewStatus.width" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "cq.dam.config.annotation.pdf.reviewStatus.color.changesRequested" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "cq.dam.config.annotation.pdf.marginTextImage" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "cq.dam.config.annotation.pdf.reviewStatus.color.rejected" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "cq.dam.config.annotation.pdf.document.width" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "cq.dam.config.annotation.pdf.minImageHeight" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "cq.dam.config.annotation.pdf.document.height" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "cq.dam.config.annotation.pdf.font.size" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "cq.dam.config.annotation.pdf.annotationMarker.width" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "cq.dam.config.annotation.pdf.document.padding.vertical" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqDamConfigAnnotationPdfDocumentWidth: (query)  (optional)
     - parameter cqDamConfigAnnotationPdfDocumentHeight: (query)  (optional)
     - parameter cqDamConfigAnnotationPdfDocumentPaddingHorizontal: (query)  (optional)
     - parameter cqDamConfigAnnotationPdfDocumentPaddingVertical: (query)  (optional)
     - parameter cqDamConfigAnnotationPdfFontSize: (query)  (optional)
     - parameter cqDamConfigAnnotationPdfFontColor: (query)  (optional)
     - parameter cqDamConfigAnnotationPdfFontFamily: (query)  (optional)
     - parameter cqDamConfigAnnotationPdfFontLight: (query)  (optional)
     - parameter cqDamConfigAnnotationPdfMarginTextImage: (query)  (optional)
     - parameter cqDamConfigAnnotationPdfMinImageHeight: (query)  (optional)
     - parameter cqDamConfigAnnotationPdfReviewStatusWidth: (query)  (optional)
     - parameter cqDamConfigAnnotationPdfReviewStatusColorApproved: (query)  (optional)
     - parameter cqDamConfigAnnotationPdfReviewStatusColorRejected: (query)  (optional)
     - parameter cqDamConfigAnnotationPdfReviewStatusColorChangesRequested: (query)  (optional)
     - parameter cqDamConfigAnnotationPdfAnnotationMarkerWidth: (query)  (optional)
     - parameter cqDamConfigAnnotationPdfAssetMinheight: (query)  (optional)

     - returns: RequestBuilder<ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigInfo> 
     */
    public class func comDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqDamConfigAnnotationPdfDocumentWidth: Int32? = nil, cqDamConfigAnnotationPdfDocumentHeight: Int32? = nil, cqDamConfigAnnotationPdfDocumentPaddingHorizontal: Int32? = nil, cqDamConfigAnnotationPdfDocumentPaddingVertical: Int32? = nil, cqDamConfigAnnotationPdfFontSize: Int32? = nil, cqDamConfigAnnotationPdfFontColor: String? = nil, cqDamConfigAnnotationPdfFontFamily: String? = nil, cqDamConfigAnnotationPdfFontLight: String? = nil, cqDamConfigAnnotationPdfMarginTextImage: Int32? = nil, cqDamConfigAnnotationPdfMinImageHeight: Int32? = nil, cqDamConfigAnnotationPdfReviewStatusWidth: Int32? = nil, cqDamConfigAnnotationPdfReviewStatusColorApproved: String? = nil, cqDamConfigAnnotationPdfReviewStatusColorRejected: String? = nil, cqDamConfigAnnotationPdfReviewStatusColorChangesRequested: String? = nil, cqDamConfigAnnotationPdfAnnotationMarkerWidth: Int32? = nil, cqDamConfigAnnotationPdfAssetMinheight: Int32? = nil) -> RequestBuilder<ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.core.impl.annotation.pdf.AnnotationPdfConfig"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "cq.dam.config.annotation.pdf.document.width": cqDamConfigAnnotationPdfDocumentWidth?.encodeToJSON(),
            "cq.dam.config.annotation.pdf.document.height": cqDamConfigAnnotationPdfDocumentHeight?.encodeToJSON(),
            "cq.dam.config.annotation.pdf.document.padding.horizontal": cqDamConfigAnnotationPdfDocumentPaddingHorizontal?.encodeToJSON(),
            "cq.dam.config.annotation.pdf.document.padding.vertical": cqDamConfigAnnotationPdfDocumentPaddingVertical?.encodeToJSON(),
            "cq.dam.config.annotation.pdf.font.size": cqDamConfigAnnotationPdfFontSize?.encodeToJSON(),
            "cq.dam.config.annotation.pdf.font.color": cqDamConfigAnnotationPdfFontColor,
            "cq.dam.config.annotation.pdf.font.family": cqDamConfigAnnotationPdfFontFamily,
            "cq.dam.config.annotation.pdf.font.light": cqDamConfigAnnotationPdfFontLight,
            "cq.dam.config.annotation.pdf.marginTextImage": cqDamConfigAnnotationPdfMarginTextImage?.encodeToJSON(),
            "cq.dam.config.annotation.pdf.minImageHeight": cqDamConfigAnnotationPdfMinImageHeight?.encodeToJSON(),
            "cq.dam.config.annotation.pdf.reviewStatus.width": cqDamConfigAnnotationPdfReviewStatusWidth?.encodeToJSON(),
            "cq.dam.config.annotation.pdf.reviewStatus.color.approved": cqDamConfigAnnotationPdfReviewStatusColorApproved,
            "cq.dam.config.annotation.pdf.reviewStatus.color.rejected": cqDamConfigAnnotationPdfReviewStatusColorRejected,
            "cq.dam.config.annotation.pdf.reviewStatus.color.changesRequested": cqDamConfigAnnotationPdfReviewStatusColorChangesRequested,
            "cq.dam.config.annotation.pdf.annotationMarker.width": cqDamConfigAnnotationPdfAnnotationMarkerWidth?.encodeToJSON(),
            "cq.dam.config.annotation.pdf.asset.minheight": cqDamConfigAnnotationPdfAssetMinheight?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter enabled: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqDamCoreImplAssetMoveListener(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, enabled: Bool? = nil, completion: ((data: ComDayCqDamCoreImplAssetMoveListenerInfo?, error: ErrorType?) -> Void)) {
        comDayCqDamCoreImplAssetMoveListenerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, enabled: enabled).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.core.impl.AssetMoveListener     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "enabled" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter enabled: (query)  (optional)

     - returns: RequestBuilder<ComDayCqDamCoreImplAssetMoveListenerInfo> 
     */
    public class func comDayCqDamCoreImplAssetMoveListenerWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, enabled: Bool? = nil) -> RequestBuilder<ComDayCqDamCoreImplAssetMoveListenerInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.core.impl.AssetMoveListener"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "enabled": enabled
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqDamCoreImplAssetMoveListenerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter isEnabled: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqDamCoreImplAssethomeAssetHomePageConfiguration(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, isEnabled: Bool? = nil, completion: ((data: ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationInfo?, error: ErrorType?) -> Void)) {
        comDayCqDamCoreImplAssethomeAssetHomePageConfigurationWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, isEnabled: isEnabled).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.core.impl.assethome.AssetHomePageConfiguration     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "isEnabled" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter isEnabled: (query)  (optional)

     - returns: RequestBuilder<ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationInfo> 
     */
    public class func comDayCqDamCoreImplAssethomeAssetHomePageConfigurationWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, isEnabled: Bool? = nil) -> RequestBuilder<ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.core.impl.assethome.AssetHomePageConfiguration"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "isEnabled": isEnabled
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqDamAdhocAssetSharePrezipMaxcontentsize: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServlet(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqDamAdhocAssetSharePrezipMaxcontentsize: Int32? = nil, completion: ((data: ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletInfo?, error: ErrorType?) -> Void)) {
        comDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqDamAdhocAssetSharePrezipMaxcontentsize: cqDamAdhocAssetSharePrezipMaxcontentsize).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.core.impl.assetlinkshare.AdhocAssetShareProxyServlet     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "cq.dam.adhoc.asset.share.prezip.maxcontentsize" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqDamAdhocAssetSharePrezipMaxcontentsize: (query)  (optional)

     - returns: RequestBuilder<ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletInfo> 
     */
    public class func comDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqDamAdhocAssetSharePrezipMaxcontentsize: Int32? = nil) -> RequestBuilder<ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.core.impl.assetlinkshare.AdhocAssetShareProxyServlet"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "cq.dam.adhoc.asset.share.prezip.maxcontentsize": cqDamAdhocAssetSharePrezipMaxcontentsize?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqDamImageCacheMaxMemory: (query)  (optional)
     - parameter cqDamImageCacheMaxAge: (query)  (optional)
     - parameter cqDamImageCacheMaxDimension: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqDamCoreImplCacheCQBufferedImageCache(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqDamImageCacheMaxMemory: Int32? = nil, cqDamImageCacheMaxAge: Int32? = nil, cqDamImageCacheMaxDimension: String? = nil, completion: ((data: ComDayCqDamCoreImplCacheCQBufferedImageCacheInfo?, error: ErrorType?) -> Void)) {
        comDayCqDamCoreImplCacheCQBufferedImageCacheWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqDamImageCacheMaxMemory: cqDamImageCacheMaxMemory, cqDamImageCacheMaxAge: cqDamImageCacheMaxAge, cqDamImageCacheMaxDimension: cqDamImageCacheMaxDimension).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.core.impl.cache.CQBufferedImageCache     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "cq.dam.image.cache.max.memory" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "cq.dam.image.cache.max.dimension" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "cq.dam.image.cache.max.age" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqDamImageCacheMaxMemory: (query)  (optional)
     - parameter cqDamImageCacheMaxAge: (query)  (optional)
     - parameter cqDamImageCacheMaxDimension: (query)  (optional)

     - returns: RequestBuilder<ComDayCqDamCoreImplCacheCQBufferedImageCacheInfo> 
     */
    public class func comDayCqDamCoreImplCacheCQBufferedImageCacheWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqDamImageCacheMaxMemory: Int32? = nil, cqDamImageCacheMaxAge: Int32? = nil, cqDamImageCacheMaxDimension: String? = nil) -> RequestBuilder<ComDayCqDamCoreImplCacheCQBufferedImageCacheInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.core.impl.cache.CQBufferedImageCache"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "cq.dam.image.cache.max.memory": cqDamImageCacheMaxMemory?.encodeToJSON(),
            "cq.dam.image.cache.max.age": cqDamImageCacheMaxAge?.encodeToJSON(),
            "cq.dam.image.cache.max.dimension": cqDamImageCacheMaxDimension
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqDamCoreImplCacheCQBufferedImageCacheInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter changeeventlistenerObservedPaths: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqDamCoreImplDamChangeEventListener(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, changeeventlistenerObservedPaths: [String]? = nil, completion: ((data: ComDayCqDamCoreImplDamChangeEventListenerInfo?, error: ErrorType?) -> Void)) {
        comDayCqDamCoreImplDamChangeEventListenerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, changeeventlistenerObservedPaths: changeeventlistenerObservedPaths).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.core.impl.DamChangeEventListener     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "changeeventlistener.observed.paths" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter changeeventlistenerObservedPaths: (query)  (optional)

     - returns: RequestBuilder<ComDayCqDamCoreImplDamChangeEventListenerInfo> 
     */
    public class func comDayCqDamCoreImplDamChangeEventListenerWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, changeeventlistenerObservedPaths: [String]? = nil) -> RequestBuilder<ComDayCqDamCoreImplDamChangeEventListenerInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.core.impl.DamChangeEventListener"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "changeeventlistener.observed.paths": changeeventlistenerObservedPaths
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqDamCoreImplDamChangeEventListenerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter schedulerExpression: (query)  (optional)
     - parameter maxSavedActivities: (query)  (optional)
     - parameter saveInterval: (query)  (optional)
     - parameter enableActivityPurge: (query)  (optional)
     - parameter eventTypes: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqDamCoreImplDamEventPurgeService(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, schedulerExpression: String? = nil, maxSavedActivities: Int32? = nil, saveInterval: Int32? = nil, enableActivityPurge: Bool? = nil, eventTypes: String? = nil, completion: ((data: ComDayCqDamCoreImplDamEventPurgeServiceInfo?, error: ErrorType?) -> Void)) {
        comDayCqDamCoreImplDamEventPurgeServiceWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, schedulerExpression: schedulerExpression, maxSavedActivities: maxSavedActivities, saveInterval: saveInterval, enableActivityPurge: enableActivityPurge, eventTypes: eventTypes).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.core.impl.DamEventPurgeService     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "maxSavedActivities" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "scheduler.expression" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "saveInterval" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "eventTypes" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : {
        "values" : "",
        "labels" : ""
      },
      "value" : ""
    },
    "enableActivityPurge" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter schedulerExpression: (query)  (optional)
     - parameter maxSavedActivities: (query)  (optional)
     - parameter saveInterval: (query)  (optional)
     - parameter enableActivityPurge: (query)  (optional)
     - parameter eventTypes: (query)  (optional)

     - returns: RequestBuilder<ComDayCqDamCoreImplDamEventPurgeServiceInfo> 
     */
    public class func comDayCqDamCoreImplDamEventPurgeServiceWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, schedulerExpression: String? = nil, maxSavedActivities: Int32? = nil, saveInterval: Int32? = nil, enableActivityPurge: Bool? = nil, eventTypes: String? = nil) -> RequestBuilder<ComDayCqDamCoreImplDamEventPurgeServiceInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.core.impl.DamEventPurgeService"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "scheduler.expression": schedulerExpression,
            "maxSavedActivities": maxSavedActivities?.encodeToJSON(),
            "saveInterval": saveInterval?.encodeToJSON(),
            "enableActivityPurge": enableActivityPurge,
            "eventTypes": eventTypes
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqDamCoreImplDamEventPurgeServiceInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter eventFilter: (query)  (optional)
     - parameter eventQueueLength: (query)  (optional)
     - parameter eventrecorderEnabled: (query)  (optional)
     - parameter eventrecorderBlacklist: (query)  (optional)
     - parameter eventrecorderEventtypes: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqDamCoreImplDamEventRecorderImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, eventFilter: String? = nil, eventQueueLength: Int32? = nil, eventrecorderEnabled: Bool? = nil, eventrecorderBlacklist: [String]? = nil, eventrecorderEventtypes: String? = nil, completion: ((data: ComDayCqDamCoreImplDamEventRecorderImplInfo?, error: ErrorType?) -> Void)) {
        comDayCqDamCoreImplDamEventRecorderImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, eventFilter: eventFilter, eventQueueLength: eventQueueLength, eventrecorderEnabled: eventrecorderEnabled, eventrecorderBlacklist: eventrecorderBlacklist, eventrecorderEventtypes: eventrecorderEventtypes).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.core.impl.DamEventRecorderImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "eventrecorder.eventtypes" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : {
        "values" : "",
        "labels" : ""
      },
      "value" : ""
    },
    "event.queue.length" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "event.filter" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "eventrecorder.enabled" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "eventrecorder.blacklist" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter eventFilter: (query)  (optional)
     - parameter eventQueueLength: (query)  (optional)
     - parameter eventrecorderEnabled: (query)  (optional)
     - parameter eventrecorderBlacklist: (query)  (optional)
     - parameter eventrecorderEventtypes: (query)  (optional)

     - returns: RequestBuilder<ComDayCqDamCoreImplDamEventRecorderImplInfo> 
     */
    public class func comDayCqDamCoreImplDamEventRecorderImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, eventFilter: String? = nil, eventQueueLength: Int32? = nil, eventrecorderEnabled: Bool? = nil, eventrecorderBlacklist: [String]? = nil, eventrecorderEventtypes: String? = nil) -> RequestBuilder<ComDayCqDamCoreImplDamEventRecorderImplInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.core.impl.DamEventRecorderImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "event.filter": eventFilter,
            "event.queue.length": eventQueueLength?.encodeToJSON(),
            "eventrecorder.enabled": eventrecorderEnabled,
            "eventrecorder.blacklist": eventrecorderBlacklist,
            "eventrecorder.eventtypes": eventrecorderEventtypes
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqDamCoreImplDamEventRecorderImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter eventFilter: (query)  (optional)
     - parameter enabled: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqDamCoreImplEventDamEventAuditListener(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, eventFilter: String? = nil, enabled: Bool? = nil, completion: ((data: ComDayCqDamCoreImplEventDamEventAuditListenerInfo?, error: ErrorType?) -> Void)) {
        comDayCqDamCoreImplEventDamEventAuditListenerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, eventFilter: eventFilter, enabled: enabled).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.core.impl.event.DamEventAuditListener     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "event.filter" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "enabled" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter eventFilter: (query)  (optional)
     - parameter enabled: (query)  (optional)

     - returns: RequestBuilder<ComDayCqDamCoreImplEventDamEventAuditListenerInfo> 
     */
    public class func comDayCqDamCoreImplEventDamEventAuditListenerWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, eventFilter: String? = nil, enabled: Bool? = nil) -> RequestBuilder<ComDayCqDamCoreImplEventDamEventAuditListenerInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.core.impl.event.DamEventAuditListener"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "event.filter": eventFilter,
            "enabled": enabled
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqDamCoreImplEventDamEventAuditListenerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqDamExpiryNotificationSchedulerIstimebased: (query)  (optional)
     - parameter cqDamExpiryNotificationSchedulerTimebasedRule: (query)  (optional)
     - parameter cqDamExpiryNotificationSchedulerPeriodRule: (query)  (optional)
     - parameter sendEmail: (query)  (optional)
     - parameter assetExpiredLimit: (query)  (optional)
     - parameter priorNotificationSeconds: (query)  (optional)
     - parameter cqDamExpiryNotificationUrlProtocol: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqDamCoreImplExpiryNotificationJobImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqDamExpiryNotificationSchedulerIstimebased: Bool? = nil, cqDamExpiryNotificationSchedulerTimebasedRule: String? = nil, cqDamExpiryNotificationSchedulerPeriodRule: Int32? = nil, sendEmail: Bool? = nil, assetExpiredLimit: Int32? = nil, priorNotificationSeconds: Int32? = nil, cqDamExpiryNotificationUrlProtocol: String? = nil, completion: ((data: ComDayCqDamCoreImplExpiryNotificationJobImplInfo?, error: ErrorType?) -> Void)) {
        comDayCqDamCoreImplExpiryNotificationJobImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqDamExpiryNotificationSchedulerIstimebased: cqDamExpiryNotificationSchedulerIstimebased, cqDamExpiryNotificationSchedulerTimebasedRule: cqDamExpiryNotificationSchedulerTimebasedRule, cqDamExpiryNotificationSchedulerPeriodRule: cqDamExpiryNotificationSchedulerPeriodRule, sendEmail: sendEmail, assetExpiredLimit: assetExpiredLimit, priorNotificationSeconds: priorNotificationSeconds, cqDamExpiryNotificationUrlProtocol: cqDamExpiryNotificationUrlProtocol).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.core.impl.ExpiryNotificationJobImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "asset_expired_limit" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "cq.dam.expiry.notification.scheduler.istimebased" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "cq.dam.expiry.notification.url.protocol" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "send_email" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "cq.dam.expiry.notification.scheduler.period.rule" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "cq.dam.expiry.notification.scheduler.timebased.rule" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "prior_notification_seconds" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqDamExpiryNotificationSchedulerIstimebased: (query)  (optional)
     - parameter cqDamExpiryNotificationSchedulerTimebasedRule: (query)  (optional)
     - parameter cqDamExpiryNotificationSchedulerPeriodRule: (query)  (optional)
     - parameter sendEmail: (query)  (optional)
     - parameter assetExpiredLimit: (query)  (optional)
     - parameter priorNotificationSeconds: (query)  (optional)
     - parameter cqDamExpiryNotificationUrlProtocol: (query)  (optional)

     - returns: RequestBuilder<ComDayCqDamCoreImplExpiryNotificationJobImplInfo> 
     */
    public class func comDayCqDamCoreImplExpiryNotificationJobImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqDamExpiryNotificationSchedulerIstimebased: Bool? = nil, cqDamExpiryNotificationSchedulerTimebasedRule: String? = nil, cqDamExpiryNotificationSchedulerPeriodRule: Int32? = nil, sendEmail: Bool? = nil, assetExpiredLimit: Int32? = nil, priorNotificationSeconds: Int32? = nil, cqDamExpiryNotificationUrlProtocol: String? = nil) -> RequestBuilder<ComDayCqDamCoreImplExpiryNotificationJobImplInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.core.impl.ExpiryNotificationJobImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "cq.dam.expiry.notification.scheduler.istimebased": cqDamExpiryNotificationSchedulerIstimebased,
            "cq.dam.expiry.notification.scheduler.timebased.rule": cqDamExpiryNotificationSchedulerTimebasedRule,
            "cq.dam.expiry.notification.scheduler.period.rule": cqDamExpiryNotificationSchedulerPeriodRule?.encodeToJSON(),
            "send_email": sendEmail,
            "asset_expired_limit": assetExpiredLimit?.encodeToJSON(),
            "prior_notification_seconds": priorNotificationSeconds?.encodeToJSON(),
            "cq.dam.expiry.notification.url.protocol": cqDamExpiryNotificationUrlProtocol
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqDamCoreImplExpiryNotificationJobImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter isEnabled: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeat(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, isEnabled: Bool? = nil, completion: ((data: ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatInfo?, error: ErrorType?) -> Void)) {
        comDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, isEnabled: isEnabled).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.core.impl.foldermetadataschema.FolderMetadataSchemaFeatureFlag     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "isEnabled" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter isEnabled: (query)  (optional)

     - returns: RequestBuilder<ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatInfo> 
     */
    public class func comDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, isEnabled: Bool? = nil) -> RequestBuilder<ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.core.impl.foldermetadataschema.FolderMetadataSchemaFeatureFlag"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "isEnabled": isEnabled
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter skipBufferedcache: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqDamCoreImplGfxCommonsGfxRenderer(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, skipBufferedcache: Bool? = nil, completion: ((data: ComDayCqDamCoreImplGfxCommonsGfxRendererInfo?, error: ErrorType?) -> Void)) {
        comDayCqDamCoreImplGfxCommonsGfxRendererWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, skipBufferedcache: skipBufferedcache).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.core.impl.gfx.CommonsGfxRenderer     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "skip.bufferedcache" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter skipBufferedcache: (query)  (optional)

     - returns: RequestBuilder<ComDayCqDamCoreImplGfxCommonsGfxRendererInfo> 
     */
    public class func comDayCqDamCoreImplGfxCommonsGfxRendererWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, skipBufferedcache: Bool? = nil) -> RequestBuilder<ComDayCqDamCoreImplGfxCommonsGfxRendererInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.core.impl.gfx.CommonsGfxRenderer"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "skip.bufferedcache": skipBufferedcache
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqDamCoreImplGfxCommonsGfxRendererInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter mimetype: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqDamCoreImplHandlerEPSFormatHandler(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, mimetype: String? = nil, completion: ((data: ComDayCqDamCoreImplHandlerEPSFormatHandlerInfo?, error: ErrorType?) -> Void)) {
        comDayCqDamCoreImplHandlerEPSFormatHandlerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, mimetype: mimetype).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.core.impl.handler.EPSFormatHandler     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "mimetype" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter mimetype: (query)  (optional)

     - returns: RequestBuilder<ComDayCqDamCoreImplHandlerEPSFormatHandlerInfo> 
     */
    public class func comDayCqDamCoreImplHandlerEPSFormatHandlerWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, mimetype: String? = nil) -> RequestBuilder<ComDayCqDamCoreImplHandlerEPSFormatHandlerInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.core.impl.handler.EPSFormatHandler"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "mimetype": mimetype
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqDamCoreImplHandlerEPSFormatHandlerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter mimetype: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqDamCoreImplHandlerIndesignFormatHandler(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, mimetype: [String]? = nil, completion: ((data: ComDayCqDamCoreImplHandlerIndesignFormatHandlerInfo?, error: ErrorType?) -> Void)) {
        comDayCqDamCoreImplHandlerIndesignFormatHandlerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, mimetype: mimetype).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.core.impl.handler.IndesignFormatHandler     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "mimetype" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter mimetype: (query)  (optional)

     - returns: RequestBuilder<ComDayCqDamCoreImplHandlerIndesignFormatHandlerInfo> 
     */
    public class func comDayCqDamCoreImplHandlerIndesignFormatHandlerWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, mimetype: [String]? = nil) -> RequestBuilder<ComDayCqDamCoreImplHandlerIndesignFormatHandlerInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.core.impl.handler.IndesignFormatHandler"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "mimetype": mimetype
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqDamCoreImplHandlerIndesignFormatHandlerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqDamEnableExtMetaExtraction: (query)  (optional)
     - parameter largeFileThreshold: (query)  (optional)
     - parameter largeCommentThreshold: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqDamCoreImplHandlerJpegHandler(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqDamEnableExtMetaExtraction: Bool? = nil, largeFileThreshold: Int32? = nil, largeCommentThreshold: Int32? = nil, completion: ((data: ComDayCqDamCoreImplHandlerJpegHandlerInfo?, error: ErrorType?) -> Void)) {
        comDayCqDamCoreImplHandlerJpegHandlerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqDamEnableExtMetaExtraction: cqDamEnableExtMetaExtraction, largeFileThreshold: largeFileThreshold, largeCommentThreshold: largeCommentThreshold).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.core.impl.handler.JpegHandler     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "large_comment_threshold" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "large_file_threshold" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "cq.dam.enable.ext.meta.extraction" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqDamEnableExtMetaExtraction: (query)  (optional)
     - parameter largeFileThreshold: (query)  (optional)
     - parameter largeCommentThreshold: (query)  (optional)

     - returns: RequestBuilder<ComDayCqDamCoreImplHandlerJpegHandlerInfo> 
     */
    public class func comDayCqDamCoreImplHandlerJpegHandlerWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqDamEnableExtMetaExtraction: Bool? = nil, largeFileThreshold: Int32? = nil, largeCommentThreshold: Int32? = nil) -> RequestBuilder<ComDayCqDamCoreImplHandlerJpegHandlerInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.core.impl.handler.JpegHandler"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "cq.dam.enable.ext.meta.extraction": cqDamEnableExtMetaExtraction,
            "large_file_threshold": largeFileThreshold?.encodeToJSON(),
            "large_comment_threshold": largeCommentThreshold?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqDamCoreImplHandlerJpegHandlerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter xmphandlerCqFormats: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqDamCoreImplHandlerXmpNCommXMPHandler(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, xmphandlerCqFormats: [String]? = nil, completion: ((data: ComDayCqDamCoreImplHandlerXmpNCommXMPHandlerInfo?, error: ErrorType?) -> Void)) {
        comDayCqDamCoreImplHandlerXmpNCommXMPHandlerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, xmphandlerCqFormats: xmphandlerCqFormats).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.core.impl.handler.xmp.NCommXMPHandler     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "xmphandler.cq.formats" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter xmphandlerCqFormats: (query)  (optional)

     - returns: RequestBuilder<ComDayCqDamCoreImplHandlerXmpNCommXMPHandlerInfo> 
     */
    public class func comDayCqDamCoreImplHandlerXmpNCommXMPHandlerWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, xmphandlerCqFormats: [String]? = nil) -> RequestBuilder<ComDayCqDamCoreImplHandlerXmpNCommXMPHandlerInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.core.impl.handler.xmp.NCommXMPHandler"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "xmphandler.cq.formats": xmphandlerCqFormats
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqDamCoreImplHandlerXmpNCommXMPHandlerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter jmxObjectname: (query)  (optional)
     - parameter propertyMeasureEnabled: (query)  (optional)
     - parameter propertyName: (query)  (optional)
     - parameter propertyMaxWaitMs: (query)  (optional)
     - parameter propertyMaxRate: (query)  (optional)
     - parameter fulltextMeasureEnabled: (query)  (optional)
     - parameter fulltextName: (query)  (optional)
     - parameter fulltextMaxWaitMs: (query)  (optional)
     - parameter fulltextMaxRate: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqDamCoreImplJmxAssetIndexUpdateMonitor(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, jmxObjectname: String? = nil, propertyMeasureEnabled: Bool? = nil, propertyName: String? = nil, propertyMaxWaitMs: Int32? = nil, propertyMaxRate: Double? = nil, fulltextMeasureEnabled: Bool? = nil, fulltextName: String? = nil, fulltextMaxWaitMs: Int32? = nil, fulltextMaxRate: Double? = nil, completion: ((data: ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorInfo?, error: ErrorType?) -> Void)) {
        comDayCqDamCoreImplJmxAssetIndexUpdateMonitorWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, jmxObjectname: jmxObjectname, propertyMeasureEnabled: propertyMeasureEnabled, propertyName: propertyName, propertyMaxWaitMs: propertyMaxWaitMs, propertyMaxRate: propertyMaxRate, fulltextMeasureEnabled: fulltextMeasureEnabled, fulltextName: fulltextName, fulltextMaxWaitMs: fulltextMaxWaitMs, fulltextMaxRate: fulltextMaxRate).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.core.impl.jmx.AssetIndexUpdateMonitor     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "property.max.rate" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : 6.02745618307040320615897144307382404804229736328125
    },
    "fulltext.name" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "fulltext.max.wait.ms" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "property.measure.enabled" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "fulltext.measure.enabled" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "fulltext.max.rate" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : 6.02745618307040320615897144307382404804229736328125
    },
    "jmx.objectname" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "property.name" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "property.max.wait.ms" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter jmxObjectname: (query)  (optional)
     - parameter propertyMeasureEnabled: (query)  (optional)
     - parameter propertyName: (query)  (optional)
     - parameter propertyMaxWaitMs: (query)  (optional)
     - parameter propertyMaxRate: (query)  (optional)
     - parameter fulltextMeasureEnabled: (query)  (optional)
     - parameter fulltextName: (query)  (optional)
     - parameter fulltextMaxWaitMs: (query)  (optional)
     - parameter fulltextMaxRate: (query)  (optional)

     - returns: RequestBuilder<ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorInfo> 
     */
    public class func comDayCqDamCoreImplJmxAssetIndexUpdateMonitorWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, jmxObjectname: String? = nil, propertyMeasureEnabled: Bool? = nil, propertyName: String? = nil, propertyMaxWaitMs: Int32? = nil, propertyMaxRate: Double? = nil, fulltextMeasureEnabled: Bool? = nil, fulltextName: String? = nil, fulltextMaxWaitMs: Int32? = nil, fulltextMaxRate: Double? = nil) -> RequestBuilder<ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.core.impl.jmx.AssetIndexUpdateMonitor"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "jmx.objectname": jmxObjectname,
            "property.measure.enabled": propertyMeasureEnabled,
            "property.name": propertyName,
            "property.max.wait.ms": propertyMaxWaitMs?.encodeToJSON(),
            "property.max.rate": propertyMaxRate,
            "fulltext.measure.enabled": fulltextMeasureEnabled,
            "fulltext.name": fulltextName,
            "fulltext.max.wait.ms": fulltextMaxWaitMs?.encodeToJSON(),
            "fulltext.max.rate": fulltextMaxRate
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter jmxObjectname: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqDamCoreImplJmxAssetMigrationMBeanImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, jmxObjectname: String? = nil, completion: ((data: ComDayCqDamCoreImplJmxAssetMigrationMBeanImplInfo?, error: ErrorType?) -> Void)) {
        comDayCqDamCoreImplJmxAssetMigrationMBeanImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, jmxObjectname: jmxObjectname).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.core.impl.jmx.AssetMigrationMBeanImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "service_location" : "service_location",
  "bundle_location" : "bundle_location",
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "jmx.objectname" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter jmxObjectname: (query)  (optional)

     - returns: RequestBuilder<ComDayCqDamCoreImplJmxAssetMigrationMBeanImplInfo> 
     */
    public class func comDayCqDamCoreImplJmxAssetMigrationMBeanImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, jmxObjectname: String? = nil) -> RequestBuilder<ComDayCqDamCoreImplJmxAssetMigrationMBeanImplInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.core.impl.jmx.AssetMigrationMBeanImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "jmx.objectname": jmxObjectname
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqDamCoreImplJmxAssetMigrationMBeanImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter jmxObjectname: (query)  (optional)
     - parameter active: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqDamCoreImplJmxAssetUpdateMonitorImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, jmxObjectname: String? = nil, active: Bool? = nil, completion: ((data: ComDayCqDamCoreImplJmxAssetUpdateMonitorImplInfo?, error: ErrorType?) -> Void)) {
        comDayCqDamCoreImplJmxAssetUpdateMonitorImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, jmxObjectname: jmxObjectname, active: active).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.core.impl.jmx.AssetUpdateMonitorImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "active" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "jmx.objectname" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter jmxObjectname: (query)  (optional)
     - parameter active: (query)  (optional)

     - returns: RequestBuilder<ComDayCqDamCoreImplJmxAssetUpdateMonitorImplInfo> 
     */
    public class func comDayCqDamCoreImplJmxAssetUpdateMonitorImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, jmxObjectname: String? = nil, active: Bool? = nil) -> RequestBuilder<ComDayCqDamCoreImplJmxAssetUpdateMonitorImplInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.core.impl.jmx.AssetUpdateMonitorImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "jmx.objectname": jmxObjectname,
            "active": active
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqDamCoreImplJmxAssetUpdateMonitorImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter operation: (query)  (optional)
     - parameter emailEnabled: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfig(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, operation: String? = nil, emailEnabled: Bool? = nil, completion: ((data: ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigInfo?, error: ErrorType?) -> Void)) {
        comDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, operation: operation, emailEnabled: emailEnabled).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.core.impl.jobs.metadataexport.AsyncMetadataExportConfigProviderService     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "emailEnabled" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "operation" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter operation: (query)  (optional)
     - parameter emailEnabled: (query)  (optional)

     - returns: RequestBuilder<ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigInfo> 
     */
    public class func comDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, operation: String? = nil, emailEnabled: Bool? = nil) -> RequestBuilder<ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.core.impl.jobs.metadataexport.AsyncMetadataExportConfigProviderService"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "operation": operation,
            "emailEnabled": emailEnabled
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter operation: (query)  (optional)
     - parameter operationIcon: (query)  (optional)
     - parameter topicName: (query)  (optional)
     - parameter emailEnabled: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfig(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, operation: String? = nil, operationIcon: String? = nil, topicName: String? = nil, emailEnabled: Bool? = nil, completion: ((data: ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigInfo?, error: ErrorType?) -> Void)) {
        comDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, operation: operation, operationIcon: operationIcon, topicName: topicName, emailEnabled: emailEnabled).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.core.impl.jobs.metadataimport.AsyncMetadataImportConfigProviderService     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "operationIcon" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "emailEnabled" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "topicName" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "operation" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter operation: (query)  (optional)
     - parameter operationIcon: (query)  (optional)
     - parameter topicName: (query)  (optional)
     - parameter emailEnabled: (query)  (optional)

     - returns: RequestBuilder<ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigInfo> 
     */
    public class func comDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, operation: String? = nil, operationIcon: String? = nil, topicName: String? = nil, emailEnabled: Bool? = nil) -> RequestBuilder<ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.core.impl.jobs.metadataimport.AsyncMetadataImportConfigProviderService"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "operation": operation,
            "operationIcon": operationIcon,
            "topicName": topicName,
            "emailEnabled": emailEnabled
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter slingServletPaths: (query)  (optional)
     - parameter slingServletMethods: (query)  (optional)
     - parameter cqDamEnableAnonymous: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqDamCoreImplLightboxLightboxServlet(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, slingServletPaths: String? = nil, slingServletMethods: [String]? = nil, cqDamEnableAnonymous: Bool? = nil, completion: ((data: ComDayCqDamCoreImplLightboxLightboxServletInfo?, error: ErrorType?) -> Void)) {
        comDayCqDamCoreImplLightboxLightboxServletWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, slingServletPaths: slingServletPaths, slingServletMethods: slingServletMethods, cqDamEnableAnonymous: cqDamEnableAnonymous).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.core.impl.lightbox.LightboxServlet     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "sling.servlet.paths" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "cq.dam.enable.anonymous" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "sling.servlet.methods" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter slingServletPaths: (query)  (optional)
     - parameter slingServletMethods: (query)  (optional)
     - parameter cqDamEnableAnonymous: (query)  (optional)

     - returns: RequestBuilder<ComDayCqDamCoreImplLightboxLightboxServletInfo> 
     */
    public class func comDayCqDamCoreImplLightboxLightboxServletWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, slingServletPaths: String? = nil, slingServletMethods: [String]? = nil, cqDamEnableAnonymous: Bool? = nil) -> RequestBuilder<ComDayCqDamCoreImplLightboxLightboxServletInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.core.impl.lightbox.LightboxServlet"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "sling.servlet.paths": slingServletPaths,
            "sling.servlet.methods": slingServletMethods,
            "cq.dam.enable.anonymous": cqDamEnableAnonymous
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqDamCoreImplLightboxLightboxServletInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter granitedata: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqDamCoreImplMetadataEditorSelectComponentHandler(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, granitedata: [String]? = nil, completion: ((data: ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerInfo?, error: ErrorType?) -> Void)) {
        comDayCqDamCoreImplMetadataEditorSelectComponentHandlerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, granitedata: granitedata).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.core.impl.metadata.editor.SelectComponentHandler     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "granite:data" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter granitedata: (query)  (optional)

     - returns: RequestBuilder<ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerInfo> 
     */
    public class func comDayCqDamCoreImplMetadataEditorSelectComponentHandlerWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, granitedata: [String]? = nil) -> RequestBuilder<ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.core.impl.metadata.editor.SelectComponentHandler"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "granite:data": granitedata
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqDamAllowAllMime: (query)  (optional)
     - parameter cqDamAllowedAssetMimes: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelper(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqDamAllowAllMime: Bool? = nil, cqDamAllowedAssetMimes: [String]? = nil, completion: ((data: ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperInfo?, error: ErrorType?) -> Void)) {
        comDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqDamAllowAllMime: cqDamAllowAllMime, cqDamAllowedAssetMimes: cqDamAllowedAssetMimes).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.core.impl.mimeType.AssetUploadRestrictionHelper     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "cq.dam.allowed.asset.mimes" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "cq.dam.allow.all.mime" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqDamAllowAllMime: (query)  (optional)
     - parameter cqDamAllowedAssetMimes: (query)  (optional)

     - returns: RequestBuilder<ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperInfo> 
     */
    public class func comDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqDamAllowAllMime: Bool? = nil, cqDamAllowedAssetMimes: [String]? = nil) -> RequestBuilder<ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.core.impl.mimeType.AssetUploadRestrictionHelper"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "cq.dam.allow.all.mime": cqDamAllowAllMime,
            "cq.dam.allowed.asset.mimes": cqDamAllowedAssetMimes
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqDamDetectAssetMimeFromContent: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqDamCoreImplMimeTypeDamMimeTypeServiceImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqDamDetectAssetMimeFromContent: Bool? = nil, completion: ((data: ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplInfo?, error: ErrorType?) -> Void)) {
        comDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqDamDetectAssetMimeFromContent: cqDamDetectAssetMimeFromContent).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.core.impl.mimeType.DamMimeTypeServiceImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "cq.dam.detect.asset.mime.from.content" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqDamDetectAssetMimeFromContent: (query)  (optional)

     - returns: RequestBuilder<ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplInfo> 
     */
    public class func comDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqDamDetectAssetMimeFromContent: Bool? = nil) -> RequestBuilder<ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.core.impl.mimeType.DamMimeTypeServiceImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "cq.dam.detect.asset.mime.from.content": cqDamDetectAssetMimeFromContent
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqDamMissingmetadataNotificationSchedulerIstimebased: (query)  (optional)
     - parameter cqDamMissingmetadataNotificationSchedulerTimebasedRule: (query)  (optional)
     - parameter cqDamMissingmetadataNotificationSchedulerPeriodRule: (query)  (optional)
     - parameter cqDamMissingmetadataNotificationRecipient: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqDamCoreImplMissingMetadataNotificationJob(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqDamMissingmetadataNotificationSchedulerIstimebased: Bool? = nil, cqDamMissingmetadataNotificationSchedulerTimebasedRule: String? = nil, cqDamMissingmetadataNotificationSchedulerPeriodRule: Int32? = nil, cqDamMissingmetadataNotificationRecipient: String? = nil, completion: ((data: ComDayCqDamCoreImplMissingMetadataNotificationJobInfo?, error: ErrorType?) -> Void)) {
        comDayCqDamCoreImplMissingMetadataNotificationJobWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqDamMissingmetadataNotificationSchedulerIstimebased: cqDamMissingmetadataNotificationSchedulerIstimebased, cqDamMissingmetadataNotificationSchedulerTimebasedRule: cqDamMissingmetadataNotificationSchedulerTimebasedRule, cqDamMissingmetadataNotificationSchedulerPeriodRule: cqDamMissingmetadataNotificationSchedulerPeriodRule, cqDamMissingmetadataNotificationRecipient: cqDamMissingmetadataNotificationRecipient).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.core.impl.MissingMetadataNotificationJob     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "cq.dam.missingmetadata.notification.scheduler.period.rule" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "cq.dam.missingmetadata.notification.scheduler.istimebased" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "cq.dam.missingmetadata.notification.scheduler.timebased.rule" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "cq.dam.missingmetadata.notification.recipient" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqDamMissingmetadataNotificationSchedulerIstimebased: (query)  (optional)
     - parameter cqDamMissingmetadataNotificationSchedulerTimebasedRule: (query)  (optional)
     - parameter cqDamMissingmetadataNotificationSchedulerPeriodRule: (query)  (optional)
     - parameter cqDamMissingmetadataNotificationRecipient: (query)  (optional)

     - returns: RequestBuilder<ComDayCqDamCoreImplMissingMetadataNotificationJobInfo> 
     */
    public class func comDayCqDamCoreImplMissingMetadataNotificationJobWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqDamMissingmetadataNotificationSchedulerIstimebased: Bool? = nil, cqDamMissingmetadataNotificationSchedulerTimebasedRule: String? = nil, cqDamMissingmetadataNotificationSchedulerPeriodRule: Int32? = nil, cqDamMissingmetadataNotificationRecipient: String? = nil) -> RequestBuilder<ComDayCqDamCoreImplMissingMetadataNotificationJobInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.core.impl.MissingMetadataNotificationJob"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "cq.dam.missingmetadata.notification.scheduler.istimebased": cqDamMissingmetadataNotificationSchedulerIstimebased,
            "cq.dam.missingmetadata.notification.scheduler.timebased.rule": cqDamMissingmetadataNotificationSchedulerTimebasedRule,
            "cq.dam.missingmetadata.notification.scheduler.period.rule": cqDamMissingmetadataNotificationSchedulerPeriodRule?.encodeToJSON(),
            "cq.dam.missingmetadata.notification.recipient": cqDamMissingmetadataNotificationRecipient
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqDamCoreImplMissingMetadataNotificationJobInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter processLabel: (query)  (optional)
     - parameter notifyOnComplete: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPr(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, processLabel: String? = nil, notifyOnComplete: Bool? = nil, completion: ((data: ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrInfo?, error: ErrorType?) -> Void)) {
        comDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, processLabel: processLabel, notifyOnComplete: notifyOnComplete).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.core.impl.process.SendTransientWorkflowCompletedEmailProcess     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "Notify on Complete" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "process.label" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter processLabel: (query)  (optional)
     - parameter notifyOnComplete: (query)  (optional)

     - returns: RequestBuilder<ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrInfo> 
     */
    public class func comDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, processLabel: String? = nil, notifyOnComplete: Bool? = nil) -> RequestBuilder<ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.core.impl.process.SendTransientWorkflowCompletedEmailProcess"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "process.label": processLabel,
            "Notify on Complete": notifyOnComplete
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter mimeTypes: (query)  (optional)
     - parameter maxExtract: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqDamCoreImplProcessTextExtractionProcess(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, mimeTypes: [String]? = nil, maxExtract: Int32? = nil, completion: ((data: ComDayCqDamCoreImplProcessTextExtractionProcessInfo?, error: ErrorType?) -> Void)) {
        comDayCqDamCoreImplProcessTextExtractionProcessWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, mimeTypes: mimeTypes, maxExtract: maxExtract).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.core.impl.process.TextExtractionProcess     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "mimeTypes" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "maxExtract" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter mimeTypes: (query)  (optional)
     - parameter maxExtract: (query)  (optional)

     - returns: RequestBuilder<ComDayCqDamCoreImplProcessTextExtractionProcessInfo> 
     */
    public class func comDayCqDamCoreImplProcessTextExtractionProcessWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, mimeTypes: [String]? = nil, maxExtract: Int32? = nil) -> RequestBuilder<ComDayCqDamCoreImplProcessTextExtractionProcessInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.core.impl.process.TextExtractionProcess"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "mimeTypes": mimeTypes,
            "maxExtract": maxExtract?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqDamCoreImplProcessTextExtractionProcessInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter xmpPropagate: (query)  (optional)
     - parameter xmpExcludes: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqDamCoreImplRenditionMakerImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, xmpPropagate: Bool? = nil, xmpExcludes: [String]? = nil, completion: ((data: ComDayCqDamCoreImplRenditionMakerImplInfo?, error: ErrorType?) -> Void)) {
        comDayCqDamCoreImplRenditionMakerImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, xmpPropagate: xmpPropagate, xmpExcludes: xmpExcludes).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.core.impl.RenditionMakerImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "xmp.excludes" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "xmp.propagate" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter xmpPropagate: (query)  (optional)
     - parameter xmpExcludes: (query)  (optional)

     - returns: RequestBuilder<ComDayCqDamCoreImplRenditionMakerImplInfo> 
     */
    public class func comDayCqDamCoreImplRenditionMakerImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, xmpPropagate: Bool? = nil, xmpExcludes: [String]? = nil) -> RequestBuilder<ComDayCqDamCoreImplRenditionMakerImplInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.core.impl.RenditionMakerImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "xmp.propagate": xmpPropagate,
            "xmp.excludes": xmpExcludes
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqDamCoreImplRenditionMakerImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter queryBatchSize: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqDamCoreImplReportsReportExportService(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, queryBatchSize: Int32? = nil, completion: ((data: ComDayCqDamCoreImplReportsReportExportServiceInfo?, error: ErrorType?) -> Void)) {
        comDayCqDamCoreImplReportsReportExportServiceWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, queryBatchSize: queryBatchSize).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.core.impl.reports.ReportExportService     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "queryBatchSize" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter queryBatchSize: (query)  (optional)

     - returns: RequestBuilder<ComDayCqDamCoreImplReportsReportExportServiceInfo> 
     */
    public class func comDayCqDamCoreImplReportsReportExportServiceWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, queryBatchSize: Int32? = nil) -> RequestBuilder<ComDayCqDamCoreImplReportsReportExportServiceInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.core.impl.reports.ReportExportService"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "queryBatchSize": queryBatchSize?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqDamCoreImplReportsReportExportServiceInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter schedulerExpression: (query)  (optional)
     - parameter maxSavedReports: (query)  (optional)
     - parameter timeDuration: (query)  (optional)
     - parameter enableReportPurge: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqDamCoreImplReportsReportPurgeService(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, schedulerExpression: String? = nil, maxSavedReports: Int32? = nil, timeDuration: Int32? = nil, enableReportPurge: Bool? = nil, completion: ((data: ComDayCqDamCoreImplReportsReportPurgeServiceInfo?, error: ErrorType?) -> Void)) {
        comDayCqDamCoreImplReportsReportPurgeServiceWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, schedulerExpression: schedulerExpression, maxSavedReports: maxSavedReports, timeDuration: timeDuration, enableReportPurge: enableReportPurge).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.core.impl.reports.ReportPurgeService     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "scheduler.expression" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "enableReportPurge" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "maxSavedReports" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "timeDuration" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter schedulerExpression: (query)  (optional)
     - parameter maxSavedReports: (query)  (optional)
     - parameter timeDuration: (query)  (optional)
     - parameter enableReportPurge: (query)  (optional)

     - returns: RequestBuilder<ComDayCqDamCoreImplReportsReportPurgeServiceInfo> 
     */
    public class func comDayCqDamCoreImplReportsReportPurgeServiceWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, schedulerExpression: String? = nil, maxSavedReports: Int32? = nil, timeDuration: Int32? = nil, enableReportPurge: Bool? = nil) -> RequestBuilder<ComDayCqDamCoreImplReportsReportPurgeServiceInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.core.impl.reports.ReportPurgeService"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "scheduler.expression": schedulerExpression,
            "maxSavedReports": maxSavedReports?.encodeToJSON(),
            "timeDuration": timeDuration?.encodeToJSON(),
            "enableReportPurge": enableReportPurge
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqDamCoreImplReportsReportPurgeServiceInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter enabled: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqDamCoreImplServletAssetDownloadServlet(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, enabled: Bool? = nil, completion: ((data: ComDayCqDamCoreImplServletAssetDownloadServletInfo?, error: ErrorType?) -> Void)) {
        comDayCqDamCoreImplServletAssetDownloadServletWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, enabled: enabled).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.core.impl.servlet.AssetDownloadServlet     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "service_location" : "service_location",
  "bundle_location" : "bundle_location",
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "enabled" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter enabled: (query)  (optional)

     - returns: RequestBuilder<ComDayCqDamCoreImplServletAssetDownloadServletInfo> 
     */
    public class func comDayCqDamCoreImplServletAssetDownloadServletWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, enabled: Bool? = nil) -> RequestBuilder<ComDayCqDamCoreImplServletAssetDownloadServletInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.AssetDownloadServlet"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "enabled": enabled
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqDamCoreImplServletAssetDownloadServletInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqDamBatchStatusMaxassets: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqDamCoreImplServletAssetStatusServlet(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqDamBatchStatusMaxassets: Int32? = nil, completion: ((data: ComDayCqDamCoreImplServletAssetStatusServletInfo?, error: ErrorType?) -> Void)) {
        comDayCqDamCoreImplServletAssetStatusServletWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqDamBatchStatusMaxassets: cqDamBatchStatusMaxassets).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.core.impl.servlet.AssetStatusServlet     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "cq.dam.batch.status.maxassets" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqDamBatchStatusMaxassets: (query)  (optional)

     - returns: RequestBuilder<ComDayCqDamCoreImplServletAssetStatusServletInfo> 
     */
    public class func comDayCqDamCoreImplServletAssetStatusServletWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqDamBatchStatusMaxassets: Int32? = nil) -> RequestBuilder<ComDayCqDamCoreImplServletAssetStatusServletInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.AssetStatusServlet"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "cq.dam.batch.status.maxassets": cqDamBatchStatusMaxassets?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqDamCoreImplServletAssetStatusServletInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqDamBatchIndesignMaxassets: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqDamCoreImplServletAssetXMPSearchServlet(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqDamBatchIndesignMaxassets: Int32? = nil, completion: ((data: ComDayCqDamCoreImplServletAssetXMPSearchServletInfo?, error: ErrorType?) -> Void)) {
        comDayCqDamCoreImplServletAssetXMPSearchServletWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqDamBatchIndesignMaxassets: cqDamBatchIndesignMaxassets).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.core.impl.servlet.AssetXMPSearchServlet     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "cq.dam.batch.indesign.maxassets" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqDamBatchIndesignMaxassets: (query)  (optional)

     - returns: RequestBuilder<ComDayCqDamCoreImplServletAssetXMPSearchServletInfo> 
     */
    public class func comDayCqDamCoreImplServletAssetXMPSearchServletWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqDamBatchIndesignMaxassets: Int32? = nil) -> RequestBuilder<ComDayCqDamCoreImplServletAssetXMPSearchServletInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.AssetXMPSearchServlet"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "cq.dam.batch.indesign.maxassets": cqDamBatchIndesignMaxassets?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqDamCoreImplServletAssetXMPSearchServletInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqDamBatchMetadataAssetDefault: (query)  (optional)
     - parameter cqDamBatchMetadataCollectionDefault: (query)  (optional)
     - parameter cqDamBatchMetadataMaxresources: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqDamCoreImplServletBatchMetadataServlet(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqDamBatchMetadataAssetDefault: [String]? = nil, cqDamBatchMetadataCollectionDefault: [String]? = nil, cqDamBatchMetadataMaxresources: Int32? = nil, completion: ((data: ComDayCqDamCoreImplServletBatchMetadataServletInfo?, error: ErrorType?) -> Void)) {
        comDayCqDamCoreImplServletBatchMetadataServletWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqDamBatchMetadataAssetDefault: cqDamBatchMetadataAssetDefault, cqDamBatchMetadataCollectionDefault: cqDamBatchMetadataCollectionDefault, cqDamBatchMetadataMaxresources: cqDamBatchMetadataMaxresources).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.core.impl.servlet.BatchMetadataServlet     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "cq.dam.batch.metadata.collection.default" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "cq.dam.batch.metadata.maxresources" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "cq.dam.batch.metadata.asset.default" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqDamBatchMetadataAssetDefault: (query)  (optional)
     - parameter cqDamBatchMetadataCollectionDefault: (query)  (optional)
     - parameter cqDamBatchMetadataMaxresources: (query)  (optional)

     - returns: RequestBuilder<ComDayCqDamCoreImplServletBatchMetadataServletInfo> 
     */
    public class func comDayCqDamCoreImplServletBatchMetadataServletWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqDamBatchMetadataAssetDefault: [String]? = nil, cqDamBatchMetadataCollectionDefault: [String]? = nil, cqDamBatchMetadataMaxresources: Int32? = nil) -> RequestBuilder<ComDayCqDamCoreImplServletBatchMetadataServletInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.BatchMetadataServlet"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "cq.dam.batch.metadata.asset.default": cqDamBatchMetadataAssetDefault,
            "cq.dam.batch.metadata.collection.default": cqDamBatchMetadataCollectionDefault,
            "cq.dam.batch.metadata.maxresources": cqDamBatchMetadataMaxresources?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqDamCoreImplServletBatchMetadataServletInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter slingServletResourceTypes: (query)  (optional)
     - parameter slingServletMethods: (query)  (optional)
     - parameter cqDamDrmEnable: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqDamCoreImplServletBinaryProviderServlet(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, slingServletResourceTypes: [String]? = nil, slingServletMethods: [String]? = nil, cqDamDrmEnable: Bool? = nil, completion: ((data: ComDayCqDamCoreImplServletBinaryProviderServletInfo?, error: ErrorType?) -> Void)) {
        comDayCqDamCoreImplServletBinaryProviderServletWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, slingServletResourceTypes: slingServletResourceTypes, slingServletMethods: slingServletMethods, cqDamDrmEnable: cqDamDrmEnable).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.core.impl.servlet.BinaryProviderServlet     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "cq.dam.drm.enable" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "sling.servlet.resourceTypes" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "sling.servlet.methods" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter slingServletResourceTypes: (query)  (optional)
     - parameter slingServletMethods: (query)  (optional)
     - parameter cqDamDrmEnable: (query)  (optional)

     - returns: RequestBuilder<ComDayCqDamCoreImplServletBinaryProviderServletInfo> 
     */
    public class func comDayCqDamCoreImplServletBinaryProviderServletWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, slingServletResourceTypes: [String]? = nil, slingServletMethods: [String]? = nil, cqDamDrmEnable: Bool? = nil) -> RequestBuilder<ComDayCqDamCoreImplServletBinaryProviderServletInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.BinaryProviderServlet"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "sling.servlet.resourceTypes": slingServletResourceTypes,
            "sling.servlet.methods": slingServletMethods,
            "cq.dam.drm.enable": cqDamDrmEnable
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqDamCoreImplServletBinaryProviderServletInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqDamBatchCollectionProperties: (query)  (optional)
     - parameter cqDamBatchCollectionMaxcollections: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqDamCoreImplServletCollectionServlet(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqDamBatchCollectionProperties: [String]? = nil, cqDamBatchCollectionMaxcollections: Int32? = nil, completion: ((data: ComDayCqDamCoreImplServletCollectionServletInfo?, error: ErrorType?) -> Void)) {
        comDayCqDamCoreImplServletCollectionServletWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqDamBatchCollectionProperties: cqDamBatchCollectionProperties, cqDamBatchCollectionMaxcollections: cqDamBatchCollectionMaxcollections).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.core.impl.servlet.CollectionServlet     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "cq.dam.batch.collection.properties" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "cq.dam.batch.collection.maxcollections" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqDamBatchCollectionProperties: (query)  (optional)
     - parameter cqDamBatchCollectionMaxcollections: (query)  (optional)

     - returns: RequestBuilder<ComDayCqDamCoreImplServletCollectionServletInfo> 
     */
    public class func comDayCqDamCoreImplServletCollectionServletWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqDamBatchCollectionProperties: [String]? = nil, cqDamBatchCollectionMaxcollections: Int32? = nil) -> RequestBuilder<ComDayCqDamCoreImplServletCollectionServletInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.CollectionServlet"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "cq.dam.batch.collection.properties": cqDamBatchCollectionProperties,
            "cq.dam.batch.collection.maxcollections": cqDamBatchCollectionMaxcollections?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqDamCoreImplServletCollectionServletInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqDamBatchCollectionsProperties: (query)  (optional)
     - parameter cqDamBatchCollectionsLimit: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqDamCoreImplServletCollectionsServlet(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqDamBatchCollectionsProperties: [String]? = nil, cqDamBatchCollectionsLimit: Int32? = nil, completion: ((data: ComDayCqDamCoreImplServletCollectionsServletInfo?, error: ErrorType?) -> Void)) {
        comDayCqDamCoreImplServletCollectionsServletWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqDamBatchCollectionsProperties: cqDamBatchCollectionsProperties, cqDamBatchCollectionsLimit: cqDamBatchCollectionsLimit).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.core.impl.servlet.CollectionsServlet     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "cq.dam.batch.collections.limit" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "cq.dam.batch.collections.properties" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqDamBatchCollectionsProperties: (query)  (optional)
     - parameter cqDamBatchCollectionsLimit: (query)  (optional)

     - returns: RequestBuilder<ComDayCqDamCoreImplServletCollectionsServletInfo> 
     */
    public class func comDayCqDamCoreImplServletCollectionsServletWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqDamBatchCollectionsProperties: [String]? = nil, cqDamBatchCollectionsLimit: Int32? = nil) -> RequestBuilder<ComDayCqDamCoreImplServletCollectionsServletInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.CollectionsServlet"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "cq.dam.batch.collections.properties": cqDamBatchCollectionsProperties,
            "cq.dam.batch.collections.limit": cqDamBatchCollectionsLimit?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqDamCoreImplServletCollectionsServletInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter moreInfo: (query)  (optional)
     - parameter mntoverlaydamguicontentassetsmoreinfoHtmlpath: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqDamCoreImplServletCompanionServlet(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, moreInfo: String? = nil, mntoverlaydamguicontentassetsmoreinfoHtmlpath: String? = nil, completion: ((data: ComDayCqDamCoreImplServletCompanionServletInfo?, error: ErrorType?) -> Void)) {
        comDayCqDamCoreImplServletCompanionServletWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, moreInfo: moreInfo, mntoverlaydamguicontentassetsmoreinfoHtmlpath: mntoverlaydamguicontentassetsmoreinfoHtmlpath).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.core.impl.servlet.CompanionServlet     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "More Info" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "/mnt/overlay/dam/gui/content/assets/moreinfo.html/${path}" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter moreInfo: (query)  (optional)
     - parameter mntoverlaydamguicontentassetsmoreinfoHtmlpath: (query)  (optional)

     - returns: RequestBuilder<ComDayCqDamCoreImplServletCompanionServletInfo> 
     */
    public class func comDayCqDamCoreImplServletCompanionServletWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, moreInfo: String? = nil, mntoverlaydamguicontentassetsmoreinfoHtmlpath: String? = nil) -> RequestBuilder<ComDayCqDamCoreImplServletCompanionServletInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.CompanionServlet"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "More Info": moreInfo,
            "/mnt/overlay/dam/gui/content/assets/moreinfo.html/${path}": mntoverlaydamguicontentassetsmoreinfoHtmlpath
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqDamCoreImplServletCompanionServletInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter detectDuplicate: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqDamCoreImplServletCreateAssetServlet(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, detectDuplicate: Bool? = nil, completion: ((data: ComDayCqDamCoreImplServletCreateAssetServletInfo?, error: ErrorType?) -> Void)) {
        comDayCqDamCoreImplServletCreateAssetServletWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, detectDuplicate: detectDuplicate).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.core.impl.servlet.CreateAssetServlet     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "detect_duplicate" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter detectDuplicate: (query)  (optional)

     - returns: RequestBuilder<ComDayCqDamCoreImplServletCreateAssetServletInfo> 
     */
    public class func comDayCqDamCoreImplServletCreateAssetServletWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, detectDuplicate: Bool? = nil) -> RequestBuilder<ComDayCqDamCoreImplServletCreateAssetServletInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.CreateAssetServlet"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "detect_duplicate": detectDuplicate
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqDamCoreImplServletCreateAssetServletInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqMimeTypeBlacklist: (query)  (optional)
     - parameter cqDamEmptyMime: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqDamCoreImplServletDamContentDispositionFilter(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqMimeTypeBlacklist: [String]? = nil, cqDamEmptyMime: Bool? = nil, completion: ((data: ComDayCqDamCoreImplServletDamContentDispositionFilterInfo?, error: ErrorType?) -> Void)) {
        comDayCqDamCoreImplServletDamContentDispositionFilterWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqMimeTypeBlacklist: cqMimeTypeBlacklist, cqDamEmptyMime: cqDamEmptyMime).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.core.impl.servlet.DamContentDispositionFilter     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "cq.mime.type.blacklist" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "cq.dam.empty.mime" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqMimeTypeBlacklist: (query)  (optional)
     - parameter cqDamEmptyMime: (query)  (optional)

     - returns: RequestBuilder<ComDayCqDamCoreImplServletDamContentDispositionFilterInfo> 
     */
    public class func comDayCqDamCoreImplServletDamContentDispositionFilterWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqMimeTypeBlacklist: [String]? = nil, cqDamEmptyMime: Bool? = nil) -> RequestBuilder<ComDayCqDamCoreImplServletDamContentDispositionFilterInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.DamContentDispositionFilter"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "cq.mime.type.blacklist": cqMimeTypeBlacklist,
            "cq.dam.empty.mime": cqDamEmptyMime
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqDamCoreImplServletDamContentDispositionFilterInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqDamCoreGuidlookupfilterEnabled: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqDamCoreImplServletGuidLookupFilter(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqDamCoreGuidlookupfilterEnabled: Bool? = nil, completion: ((data: ComDayCqDamCoreImplServletGuidLookupFilterInfo?, error: ErrorType?) -> Void)) {
        comDayCqDamCoreImplServletGuidLookupFilterWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqDamCoreGuidlookupfilterEnabled: cqDamCoreGuidlookupfilterEnabled).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.core.impl.servlet.GuidLookupFilter     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "service_location" : "service_location",
  "bundle_location" : "bundle_location",
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "cq.dam.core.guidlookupfilter.enabled" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqDamCoreGuidlookupfilterEnabled: (query)  (optional)

     - returns: RequestBuilder<ComDayCqDamCoreImplServletGuidLookupFilterInfo> 
     */
    public class func comDayCqDamCoreImplServletGuidLookupFilterWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqDamCoreGuidlookupfilterEnabled: Bool? = nil) -> RequestBuilder<ComDayCqDamCoreImplServletGuidLookupFilterInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.GuidLookupFilter"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "cq.dam.core.guidlookupfilter.enabled": cqDamCoreGuidlookupfilterEnabled
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqDamCoreImplServletGuidLookupFilterInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqDamSyncWorkflowId: (query)  (optional)
     - parameter cqDamSyncFolderTypes: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqDamCoreImplServletHealthCheckServlet(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqDamSyncWorkflowId: String? = nil, cqDamSyncFolderTypes: [String]? = nil, completion: ((data: ComDayCqDamCoreImplServletHealthCheckServletInfo?, error: ErrorType?) -> Void)) {
        comDayCqDamCoreImplServletHealthCheckServletWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqDamSyncWorkflowId: cqDamSyncWorkflowId, cqDamSyncFolderTypes: cqDamSyncFolderTypes).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.core.impl.servlet.HealthCheckServlet     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "cq.dam.sync.workflow.id" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "cq.dam.sync.folder.types" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqDamSyncWorkflowId: (query)  (optional)
     - parameter cqDamSyncFolderTypes: (query)  (optional)

     - returns: RequestBuilder<ComDayCqDamCoreImplServletHealthCheckServletInfo> 
     */
    public class func comDayCqDamCoreImplServletHealthCheckServletWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqDamSyncWorkflowId: String? = nil, cqDamSyncFolderTypes: [String]? = nil) -> RequestBuilder<ComDayCqDamCoreImplServletHealthCheckServletInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.HealthCheckServlet"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "cq.dam.sync.workflow.id": cqDamSyncWorkflowId,
            "cq.dam.sync.folder.types": cqDamSyncFolderTypes
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqDamCoreImplServletHealthCheckServletInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter slingServletResourceTypes: (query)  (optional)
     - parameter slingServletMethods: (query)  (optional)
     - parameter slingServletExtensions: (query)  (optional)
     - parameter slingServletSelectors: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqDamCoreImplServletMetadataGetServlet(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, slingServletResourceTypes: String? = nil, slingServletMethods: String? = nil, slingServletExtensions: String? = nil, slingServletSelectors: String? = nil, completion: ((data: ComDayCqDamCoreImplServletMetadataGetServletInfo?, error: ErrorType?) -> Void)) {
        comDayCqDamCoreImplServletMetadataGetServletWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, slingServletResourceTypes: slingServletResourceTypes, slingServletMethods: slingServletMethods, slingServletExtensions: slingServletExtensions, slingServletSelectors: slingServletSelectors).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.core.impl.servlet.MetadataGetServlet     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "sling.servlet.extensions" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "sling.servlet.selectors" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "sling.servlet.resourceTypes" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "sling.servlet.methods" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter slingServletResourceTypes: (query)  (optional)
     - parameter slingServletMethods: (query)  (optional)
     - parameter slingServletExtensions: (query)  (optional)
     - parameter slingServletSelectors: (query)  (optional)

     - returns: RequestBuilder<ComDayCqDamCoreImplServletMetadataGetServletInfo> 
     */
    public class func comDayCqDamCoreImplServletMetadataGetServletWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, slingServletResourceTypes: String? = nil, slingServletMethods: String? = nil, slingServletExtensions: String? = nil, slingServletSelectors: String? = nil) -> RequestBuilder<ComDayCqDamCoreImplServletMetadataGetServletInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.MetadataGetServlet"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "sling.servlet.resourceTypes": slingServletResourceTypes,
            "sling.servlet.methods": slingServletMethods,
            "sling.servlet.extensions": slingServletExtensions,
            "sling.servlet.selectors": slingServletSelectors
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqDamCoreImplServletMetadataGetServletInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqDamDrmEnable: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqDamCoreImplServletMultipleLicenseAcceptServlet(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqDamDrmEnable: Bool? = nil, completion: ((data: ComDayCqDamCoreImplServletMultipleLicenseAcceptServletInfo?, error: ErrorType?) -> Void)) {
        comDayCqDamCoreImplServletMultipleLicenseAcceptServletWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqDamDrmEnable: cqDamDrmEnable).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.core.impl.servlet.MultipleLicenseAcceptServlet     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "cq.dam.drm.enable" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqDamDrmEnable: (query)  (optional)

     - returns: RequestBuilder<ComDayCqDamCoreImplServletMultipleLicenseAcceptServletInfo> 
     */
    public class func comDayCqDamCoreImplServletMultipleLicenseAcceptServletWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqDamDrmEnable: Bool? = nil) -> RequestBuilder<ComDayCqDamCoreImplServletMultipleLicenseAcceptServletInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.MultipleLicenseAcceptServlet"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "cq.dam.drm.enable": cqDamDrmEnable
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqDamCoreImplServletMultipleLicenseAcceptServletInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter slingServletResourceTypes: (query)  (optional)
     - parameter slingServletMethods: (query)  (optional)
     - parameter slingServletSelectors: (query)  (optional)
     - parameter downloadConfig: (query)  (optional)
     - parameter viewSelector: (query)  (optional)
     - parameter sendEmail: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqDamCoreImplServletResourceCollectionServlet(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, slingServletResourceTypes: [String]? = nil, slingServletMethods: String? = nil, slingServletSelectors: String? = nil, downloadConfig: String? = nil, viewSelector: String? = nil, sendEmail: Bool? = nil, completion: ((data: ComDayCqDamCoreImplServletResourceCollectionServletInfo?, error: ErrorType?) -> Void)) {
        comDayCqDamCoreImplServletResourceCollectionServletWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, slingServletResourceTypes: slingServletResourceTypes, slingServletMethods: slingServletMethods, slingServletSelectors: slingServletSelectors, downloadConfig: downloadConfig, viewSelector: viewSelector, sendEmail: sendEmail).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.core.impl.servlet.ResourceCollectionServlet     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "sling.servlet.selectors" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "sling.servlet.resourceTypes" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "view.selector" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "send_email" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "download.config" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "sling.servlet.methods" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter slingServletResourceTypes: (query)  (optional)
     - parameter slingServletMethods: (query)  (optional)
     - parameter slingServletSelectors: (query)  (optional)
     - parameter downloadConfig: (query)  (optional)
     - parameter viewSelector: (query)  (optional)
     - parameter sendEmail: (query)  (optional)

     - returns: RequestBuilder<ComDayCqDamCoreImplServletResourceCollectionServletInfo> 
     */
    public class func comDayCqDamCoreImplServletResourceCollectionServletWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, slingServletResourceTypes: [String]? = nil, slingServletMethods: String? = nil, slingServletSelectors: String? = nil, downloadConfig: String? = nil, viewSelector: String? = nil, sendEmail: Bool? = nil) -> RequestBuilder<ComDayCqDamCoreImplServletResourceCollectionServletInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.ResourceCollectionServlet"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "sling.servlet.resourceTypes": slingServletResourceTypes,
            "sling.servlet.methods": slingServletMethods,
            "sling.servlet.selectors": slingServletSelectors,
            "download.config": downloadConfig,
            "view.selector": viewSelector,
            "send_email": sendEmail
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqDamCoreImplServletResourceCollectionServletInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter createPreviewEnabled: (query)  (optional)
     - parameter updatePreviewEnabled: (query)  (optional)
     - parameter queueSize: (query)  (optional)
     - parameter folderPreviewRenditionRegex: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, createPreviewEnabled: Bool? = nil, updatePreviewEnabled: Bool? = nil, queueSize: Int32? = nil, folderPreviewRenditionRegex: String? = nil, completion: ((data: ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplInfo?, error: ErrorType?) -> Void)) {
        comDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, createPreviewEnabled: createPreviewEnabled, updatePreviewEnabled: updatePreviewEnabled, queueSize: queueSize, folderPreviewRenditionRegex: folderPreviewRenditionRegex).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.core.impl.ui.preview.FolderPreviewUpdaterImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "createPreviewEnabled" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "updatePreviewEnabled" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "queueSize" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "folderPreviewRenditionRegex" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter createPreviewEnabled: (query)  (optional)
     - parameter updatePreviewEnabled: (query)  (optional)
     - parameter queueSize: (query)  (optional)
     - parameter folderPreviewRenditionRegex: (query)  (optional)

     - returns: RequestBuilder<ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplInfo> 
     */
    public class func comDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, createPreviewEnabled: Bool? = nil, updatePreviewEnabled: Bool? = nil, queueSize: Int32? = nil, folderPreviewRenditionRegex: String? = nil) -> RequestBuilder<ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.core.impl.ui.preview.FolderPreviewUpdaterImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "createPreviewEnabled": createPreviewEnabled,
            "updatePreviewEnabled": updatePreviewEnabled,
            "queueSize": queueSize?.encodeToJSON(),
            "folderPreviewRenditionRegex": folderPreviewRenditionRegex
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqDamConfigUnzipMaxuncompressedsize: (query)  (optional)
     - parameter cqDamConfigUnzipEncoding: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqDamCoreImplUnzipUnzipConfig(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqDamConfigUnzipMaxuncompressedsize: Int32? = nil, cqDamConfigUnzipEncoding: String? = nil, completion: ((data: ComDayCqDamCoreImplUnzipUnzipConfigInfo?, error: ErrorType?) -> Void)) {
        comDayCqDamCoreImplUnzipUnzipConfigWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqDamConfigUnzipMaxuncompressedsize: cqDamConfigUnzipMaxuncompressedsize, cqDamConfigUnzipEncoding: cqDamConfigUnzipEncoding).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.core.impl.unzip.UnzipConfig     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "cq.dam.config.unzip.encoding" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "cq.dam.config.unzip.maxuncompressedsize" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqDamConfigUnzipMaxuncompressedsize: (query)  (optional)
     - parameter cqDamConfigUnzipEncoding: (query)  (optional)

     - returns: RequestBuilder<ComDayCqDamCoreImplUnzipUnzipConfigInfo> 
     */
    public class func comDayCqDamCoreImplUnzipUnzipConfigWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqDamConfigUnzipMaxuncompressedsize: Int32? = nil, cqDamConfigUnzipEncoding: String? = nil) -> RequestBuilder<ComDayCqDamCoreImplUnzipUnzipConfigInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.core.impl.unzip.UnzipConfig"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "cq.dam.config.unzip.maxuncompressedsize": cqDamConfigUnzipMaxuncompressedsize?.encodeToJSON(),
            "cq.dam.config.unzip.encoding": cqDamConfigUnzipEncoding
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqDamCoreImplUnzipUnzipConfigInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter processLabel: (query)  (optional)
     - parameter cqDamEnableSha1: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqDamCoreProcessExifToolExtractMetadataProcess(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, processLabel: String? = nil, cqDamEnableSha1: Bool? = nil, completion: ((data: ComDayCqDamCoreProcessExifToolExtractMetadataProcessInfo?, error: ErrorType?) -> Void)) {
        comDayCqDamCoreProcessExifToolExtractMetadataProcessWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, processLabel: processLabel, cqDamEnableSha1: cqDamEnableSha1).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.core.process.ExifToolExtractMetadataProcess     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "cq.dam.enable.sha1" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "process.label" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter processLabel: (query)  (optional)
     - parameter cqDamEnableSha1: (query)  (optional)

     - returns: RequestBuilder<ComDayCqDamCoreProcessExifToolExtractMetadataProcessInfo> 
     */
    public class func comDayCqDamCoreProcessExifToolExtractMetadataProcessWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, processLabel: String? = nil, cqDamEnableSha1: Bool? = nil) -> RequestBuilder<ComDayCqDamCoreProcessExifToolExtractMetadataProcessInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.core.process.ExifToolExtractMetadataProcess"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "process.label": processLabel,
            "cq.dam.enable.sha1": cqDamEnableSha1
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqDamCoreProcessExifToolExtractMetadataProcessInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter processLabel: (query)  (optional)
     - parameter cqDamEnableSha1: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqDamCoreProcessExtractMetadataProcess(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, processLabel: String? = nil, cqDamEnableSha1: Bool? = nil, completion: ((data: ComDayCqDamCoreProcessExtractMetadataProcessInfo?, error: ErrorType?) -> Void)) {
        comDayCqDamCoreProcessExtractMetadataProcessWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, processLabel: processLabel, cqDamEnableSha1: cqDamEnableSha1).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.core.process.ExtractMetadataProcess     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "cq.dam.enable.sha1" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "process.label" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter processLabel: (query)  (optional)
     - parameter cqDamEnableSha1: (query)  (optional)

     - returns: RequestBuilder<ComDayCqDamCoreProcessExtractMetadataProcessInfo> 
     */
    public class func comDayCqDamCoreProcessExtractMetadataProcessWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, processLabel: String? = nil, cqDamEnableSha1: Bool? = nil) -> RequestBuilder<ComDayCqDamCoreProcessExtractMetadataProcessInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.core.process.ExtractMetadataProcess"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "process.label": processLabel,
            "cq.dam.enable.sha1": cqDamEnableSha1
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqDamCoreProcessExtractMetadataProcessInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter processLabel: (query)  (optional)
     - parameter cqDamEnableSha1: (query)  (optional)
     - parameter cqDamMetadataXssprotectedProperties: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqDamCoreProcessMetadataProcessorProcess(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, processLabel: String? = nil, cqDamEnableSha1: Bool? = nil, cqDamMetadataXssprotectedProperties: [String]? = nil, completion: ((data: ComDayCqDamCoreProcessMetadataProcessorProcessInfo?, error: ErrorType?) -> Void)) {
        comDayCqDamCoreProcessMetadataProcessorProcessWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, processLabel: processLabel, cqDamEnableSha1: cqDamEnableSha1, cqDamMetadataXssprotectedProperties: cqDamMetadataXssprotectedProperties).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.core.process.MetadataProcessorProcess     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "cq.dam.enable.sha1" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "process.label" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "cq.dam.metadata.xssprotected.properties" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter processLabel: (query)  (optional)
     - parameter cqDamEnableSha1: (query)  (optional)
     - parameter cqDamMetadataXssprotectedProperties: (query)  (optional)

     - returns: RequestBuilder<ComDayCqDamCoreProcessMetadataProcessorProcessInfo> 
     */
    public class func comDayCqDamCoreProcessMetadataProcessorProcessWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, processLabel: String? = nil, cqDamEnableSha1: Bool? = nil, cqDamMetadataXssprotectedProperties: [String]? = nil) -> RequestBuilder<ComDayCqDamCoreProcessMetadataProcessorProcessInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.core.process.MetadataProcessorProcess"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "process.label": processLabel,
            "cq.dam.enable.sha1": cqDamEnableSha1,
            "cq.dam.metadata.xssprotected.properties": cqDamMetadataXssprotectedProperties
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqDamCoreProcessMetadataProcessorProcessInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter executableSearchpath: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqDamHandlerFfmpegLocatorImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, executableSearchpath: [String]? = nil, completion: ((data: ComDayCqDamHandlerFfmpegLocatorImplInfo?, error: ErrorType?) -> Void)) {
        comDayCqDamHandlerFfmpegLocatorImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, executableSearchpath: executableSearchpath).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.handler.ffmpeg.LocatorImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "executable.searchpath" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter executableSearchpath: (query)  (optional)

     - returns: RequestBuilder<ComDayCqDamHandlerFfmpegLocatorImplInfo> 
     */
    public class func comDayCqDamHandlerFfmpegLocatorImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, executableSearchpath: [String]? = nil) -> RequestBuilder<ComDayCqDamHandlerFfmpegLocatorImplInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.handler.ffmpeg.LocatorImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "executable.searchpath": executableSearchpath
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqDamHandlerFfmpegLocatorImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter eventFilter: (query)  (optional)
     - parameter fontmgrSystemFontDir: (query)  (optional)
     - parameter fontmgrAdobeFontDir: (query)  (optional)
     - parameter fontmgrCustomerFontDir: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, eventFilter: String? = nil, fontmgrSystemFontDir: [String]? = nil, fontmgrAdobeFontDir: String? = nil, fontmgrCustomerFontDir: String? = nil, completion: ((data: ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplInfo?, error: ErrorType?) -> Void)) {
        comDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, eventFilter: eventFilter, fontmgrSystemFontDir: fontmgrSystemFontDir, fontmgrAdobeFontDir: fontmgrAdobeFontDir, fontmgrCustomerFontDir: fontmgrCustomerFontDir).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.handler.gibson.fontmanager.impl.FontManagerServiceImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "fontmgr.customer.font.dir" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "fontmgr.system.font.dir" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "fontmgr.adobe.font.dir" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "event.filter" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter eventFilter: (query)  (optional)
     - parameter fontmgrSystemFontDir: (query)  (optional)
     - parameter fontmgrAdobeFontDir: (query)  (optional)
     - parameter fontmgrCustomerFontDir: (query)  (optional)

     - returns: RequestBuilder<ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplInfo> 
     */
    public class func comDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, eventFilter: String? = nil, fontmgrSystemFontDir: [String]? = nil, fontmgrAdobeFontDir: String? = nil, fontmgrCustomerFontDir: String? = nil) -> RequestBuilder<ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.handler.gibson.fontmanager.impl.FontManagerServiceImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "event.filter": eventFilter,
            "fontmgr.system.font.dir": fontmgrSystemFontDir,
            "fontmgr.adobe.font.dir": fontmgrAdobeFontDir,
            "fontmgr.customer.font.dir": fontmgrCustomerFontDir
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter rasterAnnotation: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqDamHandlerStandardPdfPdfHandler(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, rasterAnnotation: Bool? = nil, completion: ((data: ComDayCqDamHandlerStandardPdfPdfHandlerInfo?, error: ErrorType?) -> Void)) {
        comDayCqDamHandlerStandardPdfPdfHandlerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, rasterAnnotation: rasterAnnotation).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.handler.standard.pdf.PdfHandler     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "raster.annotation" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter rasterAnnotation: (query)  (optional)

     - returns: RequestBuilder<ComDayCqDamHandlerStandardPdfPdfHandlerInfo> 
     */
    public class func comDayCqDamHandlerStandardPdfPdfHandlerWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, rasterAnnotation: Bool? = nil) -> RequestBuilder<ComDayCqDamHandlerStandardPdfPdfHandlerInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.handler.standard.pdf.PdfHandler"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "raster.annotation": rasterAnnotation
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqDamHandlerStandardPdfPdfHandlerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter rasterAnnotation: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqDamHandlerStandardPsPostScriptHandler(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, rasterAnnotation: Bool? = nil, completion: ((data: ComDayCqDamHandlerStandardPsPostScriptHandlerInfo?, error: ErrorType?) -> Void)) {
        comDayCqDamHandlerStandardPsPostScriptHandlerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, rasterAnnotation: rasterAnnotation).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.handler.standard.ps.PostScriptHandler     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "raster.annotation" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter rasterAnnotation: (query)  (optional)

     - returns: RequestBuilder<ComDayCqDamHandlerStandardPsPostScriptHandlerInfo> 
     */
    public class func comDayCqDamHandlerStandardPsPostScriptHandlerWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, rasterAnnotation: Bool? = nil) -> RequestBuilder<ComDayCqDamHandlerStandardPsPostScriptHandlerInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.handler.standard.ps.PostScriptHandler"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "raster.annotation": rasterAnnotation
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqDamHandlerStandardPsPostScriptHandlerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter largeFileThreshold: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqDamHandlerStandardPsdPsdHandler(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, largeFileThreshold: Int32? = nil, completion: ((data: ComDayCqDamHandlerStandardPsdPsdHandlerInfo?, error: ErrorType?) -> Void)) {
        comDayCqDamHandlerStandardPsdPsdHandlerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, largeFileThreshold: largeFileThreshold).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.handler.standard.psd.PsdHandler     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "large_file_threshold" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter largeFileThreshold: (query)  (optional)

     - returns: RequestBuilder<ComDayCqDamHandlerStandardPsdPsdHandlerInfo> 
     */
    public class func comDayCqDamHandlerStandardPsdPsdHandlerWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, largeFileThreshold: Int32? = nil) -> RequestBuilder<ComDayCqDamHandlerStandardPsdPsdHandlerInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.handler.standard.psd.PsdHandler"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "large_file_threshold": largeFileThreshold?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqDamHandlerStandardPsdPsdHandlerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter enableMultisession: (query)  (optional)
     - parameter idsCcEnable: (query)  (optional)
     - parameter enableRetry: (query)  (optional)
     - parameter enableRetryScripterror: (query)  (optional)
     - parameter externalizerDomainCqhost: (query)  (optional)
     - parameter externalizerDomainHttp: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqDamIdsImplIDSJobProcessor(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, enableMultisession: Bool? = nil, idsCcEnable: Bool? = nil, enableRetry: Bool? = nil, enableRetryScripterror: Bool? = nil, externalizerDomainCqhost: String? = nil, externalizerDomainHttp: String? = nil, completion: ((data: ComDayCqDamIdsImplIDSJobProcessorInfo?, error: ErrorType?) -> Void)) {
        comDayCqDamIdsImplIDSJobProcessorWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, enableMultisession: enableMultisession, idsCcEnable: idsCcEnable, enableRetry: enableRetry, enableRetryScripterror: enableRetryScripterror, externalizerDomainCqhost: externalizerDomainCqhost, externalizerDomainHttp: externalizerDomainHttp).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.ids.impl.IDSJobProcessor     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "externalizer.domain.cqhost" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "enable.multisession" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "ids.cc.enable" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "enable.retry" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "enable.retry.scripterror" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "externalizer.domain.http" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter enableMultisession: (query)  (optional)
     - parameter idsCcEnable: (query)  (optional)
     - parameter enableRetry: (query)  (optional)
     - parameter enableRetryScripterror: (query)  (optional)
     - parameter externalizerDomainCqhost: (query)  (optional)
     - parameter externalizerDomainHttp: (query)  (optional)

     - returns: RequestBuilder<ComDayCqDamIdsImplIDSJobProcessorInfo> 
     */
    public class func comDayCqDamIdsImplIDSJobProcessorWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, enableMultisession: Bool? = nil, idsCcEnable: Bool? = nil, enableRetry: Bool? = nil, enableRetryScripterror: Bool? = nil, externalizerDomainCqhost: String? = nil, externalizerDomainHttp: String? = nil) -> RequestBuilder<ComDayCqDamIdsImplIDSJobProcessorInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.ids.impl.IDSJobProcessor"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "enable.multisession": enableMultisession,
            "ids.cc.enable": idsCcEnable,
            "enable.retry": enableRetry,
            "enable.retry.scripterror": enableRetryScripterror,
            "externalizer.domain.cqhost": externalizerDomainCqhost,
            "externalizer.domain.http": externalizerDomainHttp
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqDamIdsImplIDSJobProcessorInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter maxErrorsToBlacklist: (query)  (optional)
     - parameter retryIntervalToWhitelist: (query)  (optional)
     - parameter connectTimeout: (query)  (optional)
     - parameter socketTimeout: (query)  (optional)
     - parameter processLabel: (query)  (optional)
     - parameter connectionUseMax: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqDamIdsImplIDSPoolManagerImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, maxErrorsToBlacklist: Int32? = nil, retryIntervalToWhitelist: Int32? = nil, connectTimeout: Int32? = nil, socketTimeout: Int32? = nil, processLabel: String? = nil, connectionUseMax: Int32? = nil, completion: ((data: ComDayCqDamIdsImplIDSPoolManagerImplInfo?, error: ErrorType?) -> Void)) {
        comDayCqDamIdsImplIDSPoolManagerImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, maxErrorsToBlacklist: maxErrorsToBlacklist, retryIntervalToWhitelist: retryIntervalToWhitelist, connectTimeout: connectTimeout, socketTimeout: socketTimeout, processLabel: processLabel, connectionUseMax: connectionUseMax).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.ids.impl.IDSPoolManagerImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "retry.interval.to.whitelist" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "connect.timeout" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "process.label" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "max.errors.to.blacklist" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "socket.timeout" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "connection.use.max" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter maxErrorsToBlacklist: (query)  (optional)
     - parameter retryIntervalToWhitelist: (query)  (optional)
     - parameter connectTimeout: (query)  (optional)
     - parameter socketTimeout: (query)  (optional)
     - parameter processLabel: (query)  (optional)
     - parameter connectionUseMax: (query)  (optional)

     - returns: RequestBuilder<ComDayCqDamIdsImplIDSPoolManagerImplInfo> 
     */
    public class func comDayCqDamIdsImplIDSPoolManagerImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, maxErrorsToBlacklist: Int32? = nil, retryIntervalToWhitelist: Int32? = nil, connectTimeout: Int32? = nil, socketTimeout: Int32? = nil, processLabel: String? = nil, connectionUseMax: Int32? = nil) -> RequestBuilder<ComDayCqDamIdsImplIDSPoolManagerImplInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.ids.impl.IDSPoolManagerImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "max.errors.to.blacklist": maxErrorsToBlacklist?.encodeToJSON(),
            "retry.interval.to.whitelist": retryIntervalToWhitelist?.encodeToJSON(),
            "connect.timeout": connectTimeout?.encodeToJSON(),
            "socket.timeout": socketTimeout?.encodeToJSON(),
            "process.label": processLabel,
            "connection.use.max": connectionUseMax?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqDamIdsImplIDSPoolManagerImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter processLabel: (query)  (optional)
     - parameter extractPages: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqDamInddImplHandlerIndesignXMPHandler(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, processLabel: String? = nil, extractPages: Bool? = nil, completion: ((data: ComDayCqDamInddImplHandlerIndesignXMPHandlerInfo?, error: ErrorType?) -> Void)) {
        comDayCqDamInddImplHandlerIndesignXMPHandlerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, processLabel: processLabel, extractPages: extractPages).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.indd.impl.handler.IndesignXMPHandler     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "process.label" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "extract.pages" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter processLabel: (query)  (optional)
     - parameter extractPages: (query)  (optional)

     - returns: RequestBuilder<ComDayCqDamInddImplHandlerIndesignXMPHandlerInfo> 
     */
    public class func comDayCqDamInddImplHandlerIndesignXMPHandlerWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, processLabel: String? = nil, extractPages: Bool? = nil) -> RequestBuilder<ComDayCqDamInddImplHandlerIndesignXMPHandlerInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.indd.impl.handler.IndesignXMPHandler"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "process.label": processLabel,
            "extract.pages": extractPages
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqDamInddImplHandlerIndesignXMPHandlerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter snippetcreationMaxcollections: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqDamInddImplServletSnippetCreationServlet(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, snippetcreationMaxcollections: Int32? = nil, completion: ((data: ComDayCqDamInddImplServletSnippetCreationServletInfo?, error: ErrorType?) -> Void)) {
        comDayCqDamInddImplServletSnippetCreationServletWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, snippetcreationMaxcollections: snippetcreationMaxcollections).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.indd.impl.servlet.SnippetCreationServlet     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "snippetcreation.maxcollections" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter snippetcreationMaxcollections: (query)  (optional)

     - returns: RequestBuilder<ComDayCqDamInddImplServletSnippetCreationServletInfo> 
     */
    public class func comDayCqDamInddImplServletSnippetCreationServletWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, snippetcreationMaxcollections: Int32? = nil) -> RequestBuilder<ComDayCqDamInddImplServletSnippetCreationServletInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.indd.impl.servlet.SnippetCreationServlet"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "snippetcreation.maxcollections": snippetcreationMaxcollections?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqDamInddImplServletSnippetCreationServletInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter processLabel: (query)  (optional)
     - parameter cqDamInddPagesRegex: (query)  (optional)
     - parameter idsJobDecoupled: (query)  (optional)
     - parameter idsJobWorkflowModel: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqDamInddProcessINDDMediaExtractProcess(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, processLabel: String? = nil, cqDamInddPagesRegex: String? = nil, idsJobDecoupled: Bool? = nil, idsJobWorkflowModel: String? = nil, completion: ((data: ComDayCqDamInddProcessINDDMediaExtractProcessInfo?, error: ErrorType?) -> Void)) {
        comDayCqDamInddProcessINDDMediaExtractProcessWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, processLabel: processLabel, cqDamInddPagesRegex: cqDamInddPagesRegex, idsJobDecoupled: idsJobDecoupled, idsJobWorkflowModel: idsJobWorkflowModel).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.indd.process.INDDMediaExtractProcess     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "process.label" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "cq.dam.indd.pages.regex" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "ids.job.workflow.model" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "ids.job.decoupled" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter processLabel: (query)  (optional)
     - parameter cqDamInddPagesRegex: (query)  (optional)
     - parameter idsJobDecoupled: (query)  (optional)
     - parameter idsJobWorkflowModel: (query)  (optional)

     - returns: RequestBuilder<ComDayCqDamInddProcessINDDMediaExtractProcessInfo> 
     */
    public class func comDayCqDamInddProcessINDDMediaExtractProcessWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, processLabel: String? = nil, cqDamInddPagesRegex: String? = nil, idsJobDecoupled: Bool? = nil, idsJobWorkflowModel: String? = nil) -> RequestBuilder<ComDayCqDamInddProcessINDDMediaExtractProcessInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.indd.process.INDDMediaExtractProcess"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "process.label": processLabel,
            "cq.dam.indd.pages.regex": cqDamInddPagesRegex,
            "ids.job.decoupled": idsJobDecoupled,
            "ids.job.workflow.model": idsJobWorkflowModel
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqDamInddProcessINDDMediaExtractProcessInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter batchCommitSize: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqDamPerformanceInternalAssetPerformanceDataHandlerImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, batchCommitSize: Int32? = nil, completion: ((data: ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplInfo?, error: ErrorType?) -> Void)) {
        comDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, batchCommitSize: batchCommitSize).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.performance.internal.AssetPerformanceDataHandlerImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "batch.commit.size" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter batchCommitSize: (query)  (optional)

     - returns: RequestBuilder<ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplInfo> 
     */
    public class func comDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, batchCommitSize: Int32? = nil) -> RequestBuilder<ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.performance.internal.AssetPerformanceDataHandlerImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "batch.commit.size": batchCommitSize?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter schedulerExpression: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqDamPerformanceInternalAssetPerformanceReportSyncJob(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, schedulerExpression: String? = nil, completion: ((data: ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobInfo?, error: ErrorType?) -> Void)) {
        comDayCqDamPerformanceInternalAssetPerformanceReportSyncJobWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, schedulerExpression: schedulerExpression).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.performance.internal.AssetPerformanceReportSyncJob     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "scheduler.expression" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter schedulerExpression: (query)  (optional)

     - returns: RequestBuilder<ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobInfo> 
     */
    public class func comDayCqDamPerformanceInternalAssetPerformanceReportSyncJobWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, schedulerExpression: String? = nil) -> RequestBuilder<ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.performance.internal.AssetPerformanceReportSyncJob"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "scheduler.expression": schedulerExpression
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter deleteZipFile: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqDamPimImplSourcingUploadProcessProductAssetsUploadPro(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, deleteZipFile: Bool? = nil, completion: ((data: ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProInfo?, error: ErrorType?) -> Void)) {
        comDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, deleteZipFile: deleteZipFile).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.pim.impl.sourcing.upload.process.ProductAssetsUploadProcess     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "delete.zip.file" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter deleteZipFile: (query)  (optional)

     - returns: RequestBuilder<ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProInfo> 
     */
    public class func comDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, deleteZipFile: Bool? = nil) -> RequestBuilder<ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.pim.impl.sourcing.upload.process.ProductAssetsUploadProcess"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "delete.zip.file": deleteZipFile
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqDamS7damDynamicmediaconfigeventlistenerEnabled: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEven(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqDamS7damDynamicmediaconfigeventlistenerEnabled: Bool? = nil, completion: ((data: ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenInfo?, error: ErrorType?) -> Void)) {
        comDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqDamS7damDynamicmediaconfigeventlistenerEnabled: cqDamS7damDynamicmediaconfigeventlistenerEnabled).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.s7dam.common.analytics.impl.S7damDynamicMediaConfigEventListener     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "cq.dam.s7dam.dynamicmediaconfigeventlistener.enabled" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqDamS7damDynamicmediaconfigeventlistenerEnabled: (query)  (optional)

     - returns: RequestBuilder<ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenInfo> 
     */
    public class func comDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqDamS7damDynamicmediaconfigeventlistenerEnabled: Bool? = nil) -> RequestBuilder<ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.s7dam.common.analytics.impl.S7damDynamicMediaConfigEventListener"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "cq.dam.s7dam.dynamicmediaconfigeventlistener.enabled": cqDamS7damDynamicmediaconfigeventlistenerEnabled
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter schedulerExpression: (query)  (optional)
     - parameter schedulerConcurrent: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunner(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, schedulerExpression: String? = nil, schedulerConcurrent: Bool? = nil, completion: ((data: ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerInfo?, error: ErrorType?) -> Void)) {
        comDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, schedulerExpression: schedulerExpression, schedulerConcurrent: schedulerConcurrent).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.s7dam.common.analytics.impl.SiteCatalystReportRunner     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "scheduler.concurrent" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "scheduler.expression" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter schedulerExpression: (query)  (optional)
     - parameter schedulerConcurrent: (query)  (optional)

     - returns: RequestBuilder<ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerInfo> 
     */
    public class func comDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, schedulerExpression: String? = nil, schedulerConcurrent: Bool? = nil) -> RequestBuilder<ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.s7dam.common.analytics.impl.SiteCatalystReportRunner"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "scheduler.expression": schedulerExpression,
            "scheduler.concurrent": schedulerConcurrent
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter slingPostOperation: (query)  (optional)
     - parameter slingServletMethods: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqDamS7damCommonPostServletsSetCreateHandler(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, slingPostOperation: String? = nil, slingServletMethods: String? = nil, completion: ((data: ComDayCqDamS7damCommonPostServletsSetCreateHandlerInfo?, error: ErrorType?) -> Void)) {
        comDayCqDamS7damCommonPostServletsSetCreateHandlerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, slingPostOperation: slingPostOperation, slingServletMethods: slingServletMethods).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.s7dam.common.post.servlets.SetCreateHandler     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "sling.post.operation" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "sling.servlet.methods" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter slingPostOperation: (query)  (optional)
     - parameter slingServletMethods: (query)  (optional)

     - returns: RequestBuilder<ComDayCqDamS7damCommonPostServletsSetCreateHandlerInfo> 
     */
    public class func comDayCqDamS7damCommonPostServletsSetCreateHandlerWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, slingPostOperation: String? = nil, slingServletMethods: String? = nil) -> RequestBuilder<ComDayCqDamS7damCommonPostServletsSetCreateHandlerInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.s7dam.common.post.servlets.SetCreateHandler"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "sling.post.operation": slingPostOperation,
            "sling.servlet.methods": slingServletMethods
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqDamS7damCommonPostServletsSetCreateHandlerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter slingPostOperation: (query)  (optional)
     - parameter slingServletMethods: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqDamS7damCommonPostServletsSetModifyHandler(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, slingPostOperation: String? = nil, slingServletMethods: String? = nil, completion: ((data: ComDayCqDamS7damCommonPostServletsSetModifyHandlerInfo?, error: ErrorType?) -> Void)) {
        comDayCqDamS7damCommonPostServletsSetModifyHandlerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, slingPostOperation: slingPostOperation, slingServletMethods: slingServletMethods).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.s7dam.common.post.servlets.SetModifyHandler     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "sling.post.operation" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "sling.servlet.methods" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter slingPostOperation: (query)  (optional)
     - parameter slingServletMethods: (query)  (optional)

     - returns: RequestBuilder<ComDayCqDamS7damCommonPostServletsSetModifyHandlerInfo> 
     */
    public class func comDayCqDamS7damCommonPostServletsSetModifyHandlerWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, slingPostOperation: String? = nil, slingServletMethods: String? = nil) -> RequestBuilder<ComDayCqDamS7damCommonPostServletsSetModifyHandlerInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.s7dam.common.post.servlets.SetModifyHandler"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "sling.post.operation": slingPostOperation,
            "sling.servlet.methods": slingServletMethods
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqDamS7damCommonPostServletsSetModifyHandlerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter processLabel: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqDamS7damCommonProcessVideoThumbnailDownloadProcess(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, processLabel: String? = nil, completion: ((data: ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessInfo?, error: ErrorType?) -> Void)) {
        comDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, processLabel: processLabel).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.s7dam.common.process.VideoThumbnailDownloadProcess     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "process.label" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter processLabel: (query)  (optional)

     - returns: RequestBuilder<ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessInfo> 
     */
    public class func comDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, processLabel: String? = nil) -> RequestBuilder<ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.s7dam.common.process.VideoThumbnailDownloadProcess"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "process.label": processLabel
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqDamS7damDamchangeeventlistenerEnabled: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqDamS7damCommonS7damDamChangeEventListener(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqDamS7damDamchangeeventlistenerEnabled: Bool? = nil, completion: ((data: ComDayCqDamS7damCommonS7damDamChangeEventListenerInfo?, error: ErrorType?) -> Void)) {
        comDayCqDamS7damCommonS7damDamChangeEventListenerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqDamS7damDamchangeeventlistenerEnabled: cqDamS7damDamchangeeventlistenerEnabled).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.s7dam.common.S7damDamChangeEventListener     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "cq.dam.s7dam.damchangeeventlistener.enabled" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqDamS7damDamchangeeventlistenerEnabled: (query)  (optional)

     - returns: RequestBuilder<ComDayCqDamS7damCommonS7damDamChangeEventListenerInfo> 
     */
    public class func comDayCqDamS7damCommonS7damDamChangeEventListenerWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqDamS7damDamchangeeventlistenerEnabled: Bool? = nil) -> RequestBuilder<ComDayCqDamS7damCommonS7damDamChangeEventListenerInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.s7dam.common.S7damDamChangeEventListener"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "cq.dam.s7dam.damchangeeventlistener.enabled": cqDamS7damDamchangeeventlistenerEnabled
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqDamS7damCommonS7damDamChangeEventListenerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter slingServletPaths: (query)  (optional)
     - parameter slingServletMethods: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqDamS7damCommonServletsS7damProductInfoServlet(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, slingServletPaths: String? = nil, slingServletMethods: String? = nil, completion: ((data: ComDayCqDamS7damCommonServletsS7damProductInfoServletInfo?, error: ErrorType?) -> Void)) {
        comDayCqDamS7damCommonServletsS7damProductInfoServletWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, slingServletPaths: slingServletPaths, slingServletMethods: slingServletMethods).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.s7dam.common.servlets.S7damProductInfoServlet     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "sling.servlet.paths" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "sling.servlet.methods" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter slingServletPaths: (query)  (optional)
     - parameter slingServletMethods: (query)  (optional)

     - returns: RequestBuilder<ComDayCqDamS7damCommonServletsS7damProductInfoServletInfo> 
     */
    public class func comDayCqDamS7damCommonServletsS7damProductInfoServletWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, slingServletPaths: String? = nil, slingServletMethods: String? = nil) -> RequestBuilder<ComDayCqDamS7damCommonServletsS7damProductInfoServletInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.s7dam.common.servlets.S7damProductInfoServlet"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "sling.servlet.paths": slingServletPaths,
            "sling.servlet.methods": slingServletMethods
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqDamS7damCommonServletsS7damProductInfoServletInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqDamS7damVideoproxyclientserviceMultipartuploadMinsizeName: (query)  (optional)
     - parameter cqDamS7damVideoproxyclientserviceMultipartuploadPartsizeName: (query)  (optional)
     - parameter cqDamS7damVideoproxyclientserviceMultipartuploadNumthreadName: (query)  (optional)
     - parameter cqDamS7damVideoproxyclientserviceHttpReadtimeoutName: (query)  (optional)
     - parameter cqDamS7damVideoproxyclientserviceHttpConnectiontimeoutName: (query)  (optional)
     - parameter cqDamS7damVideoproxyclientserviceHttpMaxretrycountName: (query)  (optional)
     - parameter cqDamS7damVideoproxyclientserviceUploadprogressIntervalName: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqDamS7damCommonVideoImplVideoProxyClientServiceImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqDamS7damVideoproxyclientserviceMultipartuploadMinsizeName: Int32? = nil, cqDamS7damVideoproxyclientserviceMultipartuploadPartsizeName: Int32? = nil, cqDamS7damVideoproxyclientserviceMultipartuploadNumthreadName: Int32? = nil, cqDamS7damVideoproxyclientserviceHttpReadtimeoutName: Int32? = nil, cqDamS7damVideoproxyclientserviceHttpConnectiontimeoutName: Int32? = nil, cqDamS7damVideoproxyclientserviceHttpMaxretrycountName: Int32? = nil, cqDamS7damVideoproxyclientserviceUploadprogressIntervalName: Int32? = nil, completion: ((data: ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplInfo?, error: ErrorType?) -> Void)) {
        comDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqDamS7damVideoproxyclientserviceMultipartuploadMinsizeName: cqDamS7damVideoproxyclientserviceMultipartuploadMinsizeName, cqDamS7damVideoproxyclientserviceMultipartuploadPartsizeName: cqDamS7damVideoproxyclientserviceMultipartuploadPartsizeName, cqDamS7damVideoproxyclientserviceMultipartuploadNumthreadName: cqDamS7damVideoproxyclientserviceMultipartuploadNumthreadName, cqDamS7damVideoproxyclientserviceHttpReadtimeoutName: cqDamS7damVideoproxyclientserviceHttpReadtimeoutName, cqDamS7damVideoproxyclientserviceHttpConnectiontimeoutName: cqDamS7damVideoproxyclientserviceHttpConnectiontimeoutName, cqDamS7damVideoproxyclientserviceHttpMaxretrycountName: cqDamS7damVideoproxyclientserviceHttpMaxretrycountName, cqDamS7damVideoproxyclientserviceUploadprogressIntervalName: cqDamS7damVideoproxyclientserviceUploadprogressIntervalName).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.s7dam.common.video.impl.VideoProxyClientServiceImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "cq.dam.s7dam.videoproxyclientservice.multipartupload.minsize.name" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "cq.dam.s7dam.videoproxyclientservice.http.maxretrycount.name" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "cq.dam.s7dam.videoproxyclientservice.uploadprogress.interval.name" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "cq.dam.s7dam.videoproxyclientservice.http.connectiontimeout.name" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "cq.dam.s7dam.videoproxyclientservice.multipartupload.partsize.name" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "cq.dam.s7dam.videoproxyclientservice.multipartupload.numthread.name" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "cq.dam.s7dam.videoproxyclientservice.http.readtimeout.name" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqDamS7damVideoproxyclientserviceMultipartuploadMinsizeName: (query)  (optional)
     - parameter cqDamS7damVideoproxyclientserviceMultipartuploadPartsizeName: (query)  (optional)
     - parameter cqDamS7damVideoproxyclientserviceMultipartuploadNumthreadName: (query)  (optional)
     - parameter cqDamS7damVideoproxyclientserviceHttpReadtimeoutName: (query)  (optional)
     - parameter cqDamS7damVideoproxyclientserviceHttpConnectiontimeoutName: (query)  (optional)
     - parameter cqDamS7damVideoproxyclientserviceHttpMaxretrycountName: (query)  (optional)
     - parameter cqDamS7damVideoproxyclientserviceUploadprogressIntervalName: (query)  (optional)

     - returns: RequestBuilder<ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplInfo> 
     */
    public class func comDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqDamS7damVideoproxyclientserviceMultipartuploadMinsizeName: Int32? = nil, cqDamS7damVideoproxyclientserviceMultipartuploadPartsizeName: Int32? = nil, cqDamS7damVideoproxyclientserviceMultipartuploadNumthreadName: Int32? = nil, cqDamS7damVideoproxyclientserviceHttpReadtimeoutName: Int32? = nil, cqDamS7damVideoproxyclientserviceHttpConnectiontimeoutName: Int32? = nil, cqDamS7damVideoproxyclientserviceHttpMaxretrycountName: Int32? = nil, cqDamS7damVideoproxyclientserviceUploadprogressIntervalName: Int32? = nil) -> RequestBuilder<ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.s7dam.common.video.impl.VideoProxyClientServiceImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "cq.dam.s7dam.videoproxyclientservice.multipartupload.minsize.name": cqDamS7damVideoproxyclientserviceMultipartuploadMinsizeName?.encodeToJSON(),
            "cq.dam.s7dam.videoproxyclientservice.multipartupload.partsize.name": cqDamS7damVideoproxyclientserviceMultipartuploadPartsizeName?.encodeToJSON(),
            "cq.dam.s7dam.videoproxyclientservice.multipartupload.numthread.name": cqDamS7damVideoproxyclientserviceMultipartuploadNumthreadName?.encodeToJSON(),
            "cq.dam.s7dam.videoproxyclientservice.http.readtimeout.name": cqDamS7damVideoproxyclientserviceHttpReadtimeoutName?.encodeToJSON(),
            "cq.dam.s7dam.videoproxyclientservice.http.connectiontimeout.name": cqDamS7damVideoproxyclientserviceHttpConnectiontimeoutName?.encodeToJSON(),
            "cq.dam.s7dam.videoproxyclientservice.http.maxretrycount.name": cqDamS7damVideoproxyclientserviceHttpMaxretrycountName?.encodeToJSON(),
            "cq.dam.s7dam.videoproxyclientservice.uploadprogress.interval.name": cqDamS7damVideoproxyclientserviceUploadprogressIntervalName?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqDamScene7ApiclientRecordsperpageNofilterName: (query)  (optional)
     - parameter cqDamScene7ApiclientRecordsperpageWithfilterName: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqDamScene7ImplScene7APIClientImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqDamScene7ApiclientRecordsperpageNofilterName: Int32? = nil, cqDamScene7ApiclientRecordsperpageWithfilterName: Int32? = nil, completion: ((data: ComDayCqDamScene7ImplScene7APIClientImplInfo?, error: ErrorType?) -> Void)) {
        comDayCqDamScene7ImplScene7APIClientImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqDamScene7ApiclientRecordsperpageNofilterName: cqDamScene7ApiclientRecordsperpageNofilterName, cqDamScene7ApiclientRecordsperpageWithfilterName: cqDamScene7ApiclientRecordsperpageWithfilterName).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7APIClientImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "cq.dam.scene7.apiclient.recordsperpage.withfilter.name" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "cq.dam.scene7.apiclient.recordsperpage.nofilter.name" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqDamScene7ApiclientRecordsperpageNofilterName: (query)  (optional)
     - parameter cqDamScene7ApiclientRecordsperpageWithfilterName: (query)  (optional)

     - returns: RequestBuilder<ComDayCqDamScene7ImplScene7APIClientImplInfo> 
     */
    public class func comDayCqDamScene7ImplScene7APIClientImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqDamScene7ApiclientRecordsperpageNofilterName: Int32? = nil, cqDamScene7ApiclientRecordsperpageWithfilterName: Int32? = nil) -> RequestBuilder<ComDayCqDamScene7ImplScene7APIClientImplInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7APIClientImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "cq.dam.scene7.apiclient.recordsperpage.nofilter.name": cqDamScene7ApiclientRecordsperpageNofilterName?.encodeToJSON(),
            "cq.dam.scene7.apiclient.recordsperpage.withfilter.name": cqDamScene7ApiclientRecordsperpageWithfilterName?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqDamScene7ImplScene7APIClientImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqDamScene7AssetmimetypeserviceMapping: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqDamScene7ImplScene7AssetMimeTypeServiceImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqDamScene7AssetmimetypeserviceMapping: [String]? = nil, completion: ((data: ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplInfo?, error: ErrorType?) -> Void)) {
        comDayCqDamScene7ImplScene7AssetMimeTypeServiceImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqDamScene7AssetmimetypeserviceMapping: cqDamScene7AssetmimetypeserviceMapping).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7AssetMimeTypeServiceImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "cq.dam.scene7.assetmimetypeservice.mapping" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqDamScene7AssetmimetypeserviceMapping: (query)  (optional)

     - returns: RequestBuilder<ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplInfo> 
     */
    public class func comDayCqDamScene7ImplScene7AssetMimeTypeServiceImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqDamScene7AssetmimetypeserviceMapping: [String]? = nil) -> RequestBuilder<ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7AssetMimeTypeServiceImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "cq.dam.scene7.assetmimetypeservice.mapping": cqDamScene7AssetmimetypeserviceMapping
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqDamScene7ConfigurationeventlistenerEnabled: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqDamScene7ImplScene7ConfigurationEventListener(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqDamScene7ConfigurationeventlistenerEnabled: Bool? = nil, completion: ((data: ComDayCqDamScene7ImplScene7ConfigurationEventListenerInfo?, error: ErrorType?) -> Void)) {
        comDayCqDamScene7ImplScene7ConfigurationEventListenerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqDamScene7ConfigurationeventlistenerEnabled: cqDamScene7ConfigurationeventlistenerEnabled).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7ConfigurationEventListener     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "service_location" : "service_location",
  "bundle_location" : "bundle_location",
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "cq.dam.scene7.configurationeventlistener.enabled" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqDamScene7ConfigurationeventlistenerEnabled: (query)  (optional)

     - returns: RequestBuilder<ComDayCqDamScene7ImplScene7ConfigurationEventListenerInfo> 
     */
    public class func comDayCqDamScene7ImplScene7ConfigurationEventListenerWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqDamScene7ConfigurationeventlistenerEnabled: Bool? = nil) -> RequestBuilder<ComDayCqDamScene7ImplScene7ConfigurationEventListenerInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7ConfigurationEventListener"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "cq.dam.scene7.configurationeventlistener.enabled": cqDamScene7ConfigurationeventlistenerEnabled
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqDamScene7ImplScene7ConfigurationEventListenerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqDamScene7DamchangeeventlistenerEnabled: (query)  (optional)
     - parameter cqDamScene7DamchangeeventlistenerObservedPaths: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqDamScene7ImplScene7DamChangeEventListener(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqDamScene7DamchangeeventlistenerEnabled: Bool? = nil, cqDamScene7DamchangeeventlistenerObservedPaths: [String]? = nil, completion: ((data: ComDayCqDamScene7ImplScene7DamChangeEventListenerInfo?, error: ErrorType?) -> Void)) {
        comDayCqDamScene7ImplScene7DamChangeEventListenerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqDamScene7DamchangeeventlistenerEnabled: cqDamScene7DamchangeeventlistenerEnabled, cqDamScene7DamchangeeventlistenerObservedPaths: cqDamScene7DamchangeeventlistenerObservedPaths).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7DamChangeEventListener     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "service_location" : "service_location",
  "bundle_location" : "bundle_location",
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "cq.dam.scene7.damchangeeventlistener.enabled" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "cq.dam.scene7.damchangeeventlistener.observed.paths" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqDamScene7DamchangeeventlistenerEnabled: (query)  (optional)
     - parameter cqDamScene7DamchangeeventlistenerObservedPaths: (query)  (optional)

     - returns: RequestBuilder<ComDayCqDamScene7ImplScene7DamChangeEventListenerInfo> 
     */
    public class func comDayCqDamScene7ImplScene7DamChangeEventListenerWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqDamScene7DamchangeeventlistenerEnabled: Bool? = nil, cqDamScene7DamchangeeventlistenerObservedPaths: [String]? = nil) -> RequestBuilder<ComDayCqDamScene7ImplScene7DamChangeEventListenerInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7DamChangeEventListener"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "cq.dam.scene7.damchangeeventlistener.enabled": cqDamScene7DamchangeeventlistenerEnabled,
            "cq.dam.scene7.damchangeeventlistener.observed.paths": cqDamScene7DamchangeeventlistenerObservedPaths
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqDamScene7ImplScene7DamChangeEventListenerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter scene7FlashTemplatesRti: (query)  (optional)
     - parameter scene7FlashTemplatesRsi: (query)  (optional)
     - parameter scene7FlashTemplatesRb: (query)  (optional)
     - parameter scene7FlashTemplatesRurl: (query)  (optional)
     - parameter scene7FlashTemplateUrlFormatParameter: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqDamScene7ImplScene7FlashTemplatesServiceImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, scene7FlashTemplatesRti: String? = nil, scene7FlashTemplatesRsi: String? = nil, scene7FlashTemplatesRb: String? = nil, scene7FlashTemplatesRurl: String? = nil, scene7FlashTemplateUrlFormatParameter: String? = nil, completion: ((data: ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplInfo?, error: ErrorType?) -> Void)) {
        comDayCqDamScene7ImplScene7FlashTemplatesServiceImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, scene7FlashTemplatesRti: scene7FlashTemplatesRti, scene7FlashTemplatesRsi: scene7FlashTemplatesRsi, scene7FlashTemplatesRb: scene7FlashTemplatesRb, scene7FlashTemplatesRurl: scene7FlashTemplatesRurl, scene7FlashTemplateUrlFormatParameter: scene7FlashTemplateUrlFormatParameter).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7FlashTemplatesServiceImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "scene7FlashTemplates.rti" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "scene7FlashTemplates.rb" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "scene7FlashTemplates.rurl" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "scene7FlashTemplates.rsi" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "scene7FlashTemplate.urlFormatParameter" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter scene7FlashTemplatesRti: (query)  (optional)
     - parameter scene7FlashTemplatesRsi: (query)  (optional)
     - parameter scene7FlashTemplatesRb: (query)  (optional)
     - parameter scene7FlashTemplatesRurl: (query)  (optional)
     - parameter scene7FlashTemplateUrlFormatParameter: (query)  (optional)

     - returns: RequestBuilder<ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplInfo> 
     */
    public class func comDayCqDamScene7ImplScene7FlashTemplatesServiceImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, scene7FlashTemplatesRti: String? = nil, scene7FlashTemplatesRsi: String? = nil, scene7FlashTemplatesRb: String? = nil, scene7FlashTemplatesRurl: String? = nil, scene7FlashTemplateUrlFormatParameter: String? = nil) -> RequestBuilder<ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7FlashTemplatesServiceImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "scene7FlashTemplates.rti": scene7FlashTemplatesRti,
            "scene7FlashTemplates.rsi": scene7FlashTemplatesRsi,
            "scene7FlashTemplates.rb": scene7FlashTemplatesRb,
            "scene7FlashTemplates.rurl": scene7FlashTemplatesRurl,
            "scene7FlashTemplate.urlFormatParameter": scene7FlashTemplateUrlFormatParameter
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqDamScene7UploadserviceActivejobtimeoutLabel: (query)  (optional)
     - parameter cqDamScene7UploadserviceConnectionmaxperrouteLabel: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqDamScene7ImplScene7UploadServiceImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqDamScene7UploadserviceActivejobtimeoutLabel: Int32? = nil, cqDamScene7UploadserviceConnectionmaxperrouteLabel: Int32? = nil, completion: ((data: ComDayCqDamScene7ImplScene7UploadServiceImplInfo?, error: ErrorType?) -> Void)) {
        comDayCqDamScene7ImplScene7UploadServiceImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqDamScene7UploadserviceActivejobtimeoutLabel: cqDamScene7UploadserviceActivejobtimeoutLabel, cqDamScene7UploadserviceConnectionmaxperrouteLabel: cqDamScene7UploadserviceConnectionmaxperrouteLabel).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7UploadServiceImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "cq.dam.scene7.uploadservice.connectionmaxperroute.label" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "cq.dam.scene7.uploadservice.activejobtimeout.label" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqDamScene7UploadserviceActivejobtimeoutLabel: (query)  (optional)
     - parameter cqDamScene7UploadserviceConnectionmaxperrouteLabel: (query)  (optional)

     - returns: RequestBuilder<ComDayCqDamScene7ImplScene7UploadServiceImplInfo> 
     */
    public class func comDayCqDamScene7ImplScene7UploadServiceImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqDamScene7UploadserviceActivejobtimeoutLabel: Int32? = nil, cqDamScene7UploadserviceConnectionmaxperrouteLabel: Int32? = nil) -> RequestBuilder<ComDayCqDamScene7ImplScene7UploadServiceImplInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7UploadServiceImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "cq.dam.scene7.uploadservice.activejobtimeout.label": cqDamScene7UploadserviceActivejobtimeoutLabel?.encodeToJSON(),
            "cq.dam.scene7.uploadservice.connectionmaxperroute.label": cqDamScene7UploadserviceConnectionmaxperrouteLabel?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqDamScene7ImplScene7UploadServiceImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter getCacheExpirationUnit: (query)  (optional)
     - parameter getCacheExpirationValue: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqDamStockIntegrationImplCacheStockCacheConfigurationSer(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, getCacheExpirationUnit: String? = nil, getCacheExpirationValue: Int32? = nil, completion: ((data: ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerInfo?, error: ErrorType?) -> Void)) {
        comDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, getCacheExpirationUnit: getCacheExpirationUnit, getCacheExpirationValue: getCacheExpirationValue).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.stock.integration.impl.cache.StockCacheConfigurationServiceImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "getCacheExpirationUnit" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : {
        "values" : "",
        "labels" : ""
      },
      "value" : ""
    },
    "getCacheExpirationValue" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter getCacheExpirationUnit: (query)  (optional)
     - parameter getCacheExpirationValue: (query)  (optional)

     - returns: RequestBuilder<ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerInfo> 
     */
    public class func comDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, getCacheExpirationUnit: String? = nil, getCacheExpirationValue: Int32? = nil) -> RequestBuilder<ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.stock.integration.impl.cache.StockCacheConfigurationServiceImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "getCacheExpirationUnit": getCacheExpirationUnit,
            "getCacheExpirationValue": getCacheExpirationValue?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter locale: (query)  (optional)
     - parameter imsConfig: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqDamStockIntegrationImplConfigurationStockConfiguration(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, name: String? = nil, locale: String? = nil, imsConfig: String? = nil, completion: ((data: ComDayCqDamStockIntegrationImplConfigurationStockConfigurationInfo?, error: ErrorType?) -> Void)) {
        comDayCqDamStockIntegrationImplConfigurationStockConfigurationWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, name: name, locale: locale, imsConfig: imsConfig).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.stock.integration.impl.configuration.StockConfigurationImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "imsConfig" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "name" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "locale" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter locale: (query)  (optional)
     - parameter imsConfig: (query)  (optional)

     - returns: RequestBuilder<ComDayCqDamStockIntegrationImplConfigurationStockConfigurationInfo> 
     */
    public class func comDayCqDamStockIntegrationImplConfigurationStockConfigurationWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, name: String? = nil, locale: String? = nil, imsConfig: String? = nil) -> RequestBuilder<ComDayCqDamStockIntegrationImplConfigurationStockConfigurationInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.stock.integration.impl.configuration.StockConfigurationImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "name": name,
            "locale": locale,
            "imsConfig": imsConfig
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqDamStockIntegrationImplConfigurationStockConfigurationInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter enabled: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqDamVideoImplServletVideoTestServlet(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, enabled: Bool? = nil, completion: ((data: ComDayCqDamVideoImplServletVideoTestServletInfo?, error: ErrorType?) -> Void)) {
        comDayCqDamVideoImplServletVideoTestServletWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, enabled: enabled).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.dam.video.impl.servlet.VideoTestServlet     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "service_location" : "service_location",
  "bundle_location" : "bundle_location",
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "enabled" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter enabled: (query)  (optional)

     - returns: RequestBuilder<ComDayCqDamVideoImplServletVideoTestServletInfo> 
     */
    public class func comDayCqDamVideoImplServletVideoTestServletWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, enabled: Bool? = nil) -> RequestBuilder<ComDayCqDamVideoImplServletVideoTestServletInfo> {
        let path = "/system/console/configMgr/com.day.cq.dam.video.impl.servlet.VideoTestServlet"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "enabled": enabled
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqDamVideoImplServletVideoTestServletInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter maxWidth: (query)  (optional)
     - parameter maxHeight: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqExtwidgetServletsImageSpriteServlet(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, maxWidth: Int32? = nil, maxHeight: Int32? = nil, completion: ((data: ComDayCqExtwidgetServletsImageSpriteServletInfo?, error: ErrorType?) -> Void)) {
        comDayCqExtwidgetServletsImageSpriteServletWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, maxWidth: maxWidth, maxHeight: maxHeight).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.extwidget.servlets.ImageSpriteServlet     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "maxHeight" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "maxWidth" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter maxWidth: (query)  (optional)
     - parameter maxHeight: (query)  (optional)

     - returns: RequestBuilder<ComDayCqExtwidgetServletsImageSpriteServletInfo> 
     */
    public class func comDayCqExtwidgetServletsImageSpriteServletWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, maxWidth: Int32? = nil, maxHeight: Int32? = nil) -> RequestBuilder<ComDayCqExtwidgetServletsImageSpriteServletInfo> {
        let path = "/system/console/configMgr/com.day.cq.extwidget.servlets.ImageSpriteServlet"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "maxWidth": maxWidth?.encodeToJSON(),
            "maxHeight": maxHeight?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqExtwidgetServletsImageSpriteServletInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter fontpath: (query)  (optional)
     - parameter oversamplingFactor: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqImageInternalFontFontHelper(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, fontpath: [String]? = nil, oversamplingFactor: Int32? = nil, completion: ((data: ComDayCqImageInternalFontFontHelperInfo?, error: ErrorType?) -> Void)) {
        comDayCqImageInternalFontFontHelperWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, fontpath: fontpath, oversamplingFactor: oversamplingFactor).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.image.internal.font.FontHelper     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "fontpath" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "oversamplingFactor" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter fontpath: (query)  (optional)
     - parameter oversamplingFactor: (query)  (optional)

     - returns: RequestBuilder<ComDayCqImageInternalFontFontHelperInfo> 
     */
    public class func comDayCqImageInternalFontFontHelperWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, fontpath: [String]? = nil, oversamplingFactor: Int32? = nil) -> RequestBuilder<ComDayCqImageInternalFontFontHelperInfo> {
        let path = "/system/console/configMgr/com.day.cq.image.internal.font.FontHelper"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "fontpath": fontpath,
            "oversamplingFactor": oversamplingFactor?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqImageInternalFontFontHelperInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter clusterLevelEnable: (query)  (optional)
     - parameter clusterMasterLevel: (query)  (optional)
     - parameter clusterSlaveLevel: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqJcrclustersupportClusterStartLevelController(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, clusterLevelEnable: Bool? = nil, clusterMasterLevel: Int32? = nil, clusterSlaveLevel: Int32? = nil, completion: ((data: ComDayCqJcrclustersupportClusterStartLevelControllerInfo?, error: ErrorType?) -> Void)) {
        comDayCqJcrclustersupportClusterStartLevelControllerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, clusterLevelEnable: clusterLevelEnable, clusterMasterLevel: clusterMasterLevel, clusterSlaveLevel: clusterSlaveLevel).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.jcrclustersupport.ClusterStartLevelController     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "cluster.level.enable" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "cluster.slave.level" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "cluster.master.level" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter clusterLevelEnable: (query)  (optional)
     - parameter clusterMasterLevel: (query)  (optional)
     - parameter clusterSlaveLevel: (query)  (optional)

     - returns: RequestBuilder<ComDayCqJcrclustersupportClusterStartLevelControllerInfo> 
     */
    public class func comDayCqJcrclustersupportClusterStartLevelControllerWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, clusterLevelEnable: Bool? = nil, clusterMasterLevel: Int32? = nil, clusterSlaveLevel: Int32? = nil) -> RequestBuilder<ComDayCqJcrclustersupportClusterStartLevelControllerInfo> {
        let path = "/system/console/configMgr/com.day.cq.jcrclustersupport.ClusterStartLevelController"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "cluster.level.enable": clusterLevelEnable,
            "cluster.master.level": clusterMasterLevel?.encodeToJSON(),
            "cluster.slave.level": clusterSlaveLevel?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqJcrclustersupportClusterStartLevelControllerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter smtpHost: (query)  (optional)
     - parameter smtpPort: (query)  (optional)
     - parameter smtpUser: (query)  (optional)
     - parameter smtpPassword: (query)  (optional)
     - parameter fromAddress: (query)  (optional)
     - parameter smtpSsl: (query)  (optional)
     - parameter smtpStarttls: (query)  (optional)
     - parameter debugEmail: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqMailerDefaultMailService(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, smtpHost: String? = nil, smtpPort: Int32? = nil, smtpUser: String? = nil, smtpPassword: String? = nil, fromAddress: String? = nil, smtpSsl: Bool? = nil, smtpStarttls: Bool? = nil, debugEmail: Bool? = nil, completion: ((data: ComDayCqMailerDefaultMailServiceInfo?, error: ErrorType?) -> Void)) {
        comDayCqMailerDefaultMailServiceWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, smtpHost: smtpHost, smtpPort: smtpPort, smtpUser: smtpUser, smtpPassword: smtpPassword, fromAddress: fromAddress, smtpSsl: smtpSsl, smtpStarttls: smtpStarttls, debugEmail: debugEmail).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.mailer.DefaultMailService     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "smtp.password" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "smtp.port" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "smtp.ssl" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "smtp.host" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "from.address" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "smtp.starttls" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "smtp.user" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "debug.email" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter smtpHost: (query)  (optional)
     - parameter smtpPort: (query)  (optional)
     - parameter smtpUser: (query)  (optional)
     - parameter smtpPassword: (query)  (optional)
     - parameter fromAddress: (query)  (optional)
     - parameter smtpSsl: (query)  (optional)
     - parameter smtpStarttls: (query)  (optional)
     - parameter debugEmail: (query)  (optional)

     - returns: RequestBuilder<ComDayCqMailerDefaultMailServiceInfo> 
     */
    public class func comDayCqMailerDefaultMailServiceWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, smtpHost: String? = nil, smtpPort: Int32? = nil, smtpUser: String? = nil, smtpPassword: String? = nil, fromAddress: String? = nil, smtpSsl: Bool? = nil, smtpStarttls: Bool? = nil, debugEmail: Bool? = nil) -> RequestBuilder<ComDayCqMailerDefaultMailServiceInfo> {
        let path = "/system/console/configMgr/com.day.cq.mailer.DefaultMailService"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "smtp.host": smtpHost,
            "smtp.port": smtpPort?.encodeToJSON(),
            "smtp.user": smtpUser,
            "smtp.password": smtpPassword,
            "from.address": fromAddress,
            "smtp.ssl": smtpSsl,
            "smtp.starttls": smtpStarttls,
            "debug.email": debugEmail
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqMailerDefaultMailServiceInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter maxRecipientCount: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqMailerImplCqMailingService(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, maxRecipientCount: String? = nil, completion: ((data: ComDayCqMailerImplCqMailingServiceInfo?, error: ErrorType?) -> Void)) {
        comDayCqMailerImplCqMailingServiceWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, maxRecipientCount: maxRecipientCount).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.mailer.impl.CqMailingService     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "max.recipient.count" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter maxRecipientCount: (query)  (optional)

     - returns: RequestBuilder<ComDayCqMailerImplCqMailingServiceInfo> 
     */
    public class func comDayCqMailerImplCqMailingServiceWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, maxRecipientCount: String? = nil) -> RequestBuilder<ComDayCqMailerImplCqMailingServiceInfo> {
        let path = "/system/console/configMgr/com.day.cq.mailer.impl.CqMailingService"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "max.recipient.count": maxRecipientCount
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqMailerImplCqMailingServiceInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter mailerEmailCharset: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqMailerImplEmailCqEmailTemplateFactory(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, mailerEmailCharset: String? = nil, completion: ((data: ComDayCqMailerImplEmailCqEmailTemplateFactoryInfo?, error: ErrorType?) -> Void)) {
        comDayCqMailerImplEmailCqEmailTemplateFactoryWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, mailerEmailCharset: mailerEmailCharset).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.mailer.impl.email.CqEmailTemplateFactory     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "mailer.email.charset" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter mailerEmailCharset: (query)  (optional)

     - returns: RequestBuilder<ComDayCqMailerImplEmailCqEmailTemplateFactoryInfo> 
     */
    public class func comDayCqMailerImplEmailCqEmailTemplateFactoryWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, mailerEmailCharset: String? = nil) -> RequestBuilder<ComDayCqMailerImplEmailCqEmailTemplateFactoryInfo> {
        let path = "/system/console/configMgr/com.day.cq.mailer.impl.email.CqEmailTemplateFactory"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "mailer.email.charset": mailerEmailCharset
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqMailerImplEmailCqEmailTemplateFactoryInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter mailerEmailEmbed: (query)  (optional)
     - parameter mailerEmailCharset: (query)  (optional)
     - parameter mailerEmailRetrieverUserID: (query)  (optional)
     - parameter mailerEmailRetrieverUserPWD: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqMailerImplEmailCqRetrieverTemplateFactory(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, mailerEmailEmbed: Bool? = nil, mailerEmailCharset: String? = nil, mailerEmailRetrieverUserID: String? = nil, mailerEmailRetrieverUserPWD: String? = nil, completion: ((data: ComDayCqMailerImplEmailCqRetrieverTemplateFactoryInfo?, error: ErrorType?) -> Void)) {
        comDayCqMailerImplEmailCqRetrieverTemplateFactoryWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, mailerEmailEmbed: mailerEmailEmbed, mailerEmailCharset: mailerEmailCharset, mailerEmailRetrieverUserID: mailerEmailRetrieverUserID, mailerEmailRetrieverUserPWD: mailerEmailRetrieverUserPWD).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.mailer.impl.email.CqRetrieverTemplateFactory     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "mailer.email.charset" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "mailer.email.embed" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "mailer.email.retrieverUserPWD" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "mailer.email.retrieverUserID" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter mailerEmailEmbed: (query)  (optional)
     - parameter mailerEmailCharset: (query)  (optional)
     - parameter mailerEmailRetrieverUserID: (query)  (optional)
     - parameter mailerEmailRetrieverUserPWD: (query)  (optional)

     - returns: RequestBuilder<ComDayCqMailerImplEmailCqRetrieverTemplateFactoryInfo> 
     */
    public class func comDayCqMailerImplEmailCqRetrieverTemplateFactoryWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, mailerEmailEmbed: Bool? = nil, mailerEmailCharset: String? = nil, mailerEmailRetrieverUserID: String? = nil, mailerEmailRetrieverUserPWD: String? = nil) -> RequestBuilder<ComDayCqMailerImplEmailCqRetrieverTemplateFactoryInfo> {
        let path = "/system/console/configMgr/com.day.cq.mailer.impl.email.CqRetrieverTemplateFactory"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "mailer.email.embed": mailerEmailEmbed,
            "mailer.email.charset": mailerEmailCharset,
            "mailer.email.retrieverUserID": mailerEmailRetrieverUserID,
            "mailer.email.retrieverUserPWD": mailerEmailRetrieverUserPWD
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqMailerImplEmailCqRetrieverTemplateFactoryInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter aemMcmCampaignFormConstraints: (query)  (optional)
     - parameter aemMcmCampaignPublicUrl: (query)  (optional)
     - parameter aemMcmCampaignRelaxedSSL: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqMcmCampaignImplIntegrationConfigImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, aemMcmCampaignFormConstraints: [String]? = nil, aemMcmCampaignPublicUrl: String? = nil, aemMcmCampaignRelaxedSSL: Bool? = nil, completion: ((data: ComDayCqMcmCampaignImplIntegrationConfigImplInfo?, error: ErrorType?) -> Void)) {
        comDayCqMcmCampaignImplIntegrationConfigImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, aemMcmCampaignFormConstraints: aemMcmCampaignFormConstraints, aemMcmCampaignPublicUrl: aemMcmCampaignPublicUrl, aemMcmCampaignRelaxedSSL: aemMcmCampaignRelaxedSSL).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.mcm.campaign.impl.IntegrationConfigImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "aem.mcm.campaign.formConstraints" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "aem.mcm.campaign.relaxedSSL" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "aem.mcm.campaign.publicUrl" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter aemMcmCampaignFormConstraints: (query)  (optional)
     - parameter aemMcmCampaignPublicUrl: (query)  (optional)
     - parameter aemMcmCampaignRelaxedSSL: (query)  (optional)

     - returns: RequestBuilder<ComDayCqMcmCampaignImplIntegrationConfigImplInfo> 
     */
    public class func comDayCqMcmCampaignImplIntegrationConfigImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, aemMcmCampaignFormConstraints: [String]? = nil, aemMcmCampaignPublicUrl: String? = nil, aemMcmCampaignRelaxedSSL: Bool? = nil) -> RequestBuilder<ComDayCqMcmCampaignImplIntegrationConfigImplInfo> {
        let path = "/system/console/configMgr/com.day.cq.mcm.campaign.impl.IntegrationConfigImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "aem.mcm.campaign.formConstraints": aemMcmCampaignFormConstraints,
            "aem.mcm.campaign.publicUrl": aemMcmCampaignPublicUrl,
            "aem.mcm.campaign.relaxedSSL": aemMcmCampaignRelaxedSSL
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqMcmCampaignImplIntegrationConfigImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter tagpattern: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqMcmCampaignImporterPersonalizedTextHandlerFactory(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int32? = nil, tagpattern: String? = nil, completion: ((data: ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryInfo?, error: ErrorType?) -> Void)) {
        comDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, serviceRanking: serviceRanking, tagpattern: tagpattern).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.mcm.campaign.importer.PersonalizedTextHandlerFactory     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "tagpattern" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "service.ranking" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter tagpattern: (query)  (optional)

     - returns: RequestBuilder<ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryInfo> 
     */
    public class func comDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int32? = nil, tagpattern: String? = nil) -> RequestBuilder<ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryInfo> {
        let path = "/system/console/configMgr/com.day.cq.mcm.campaign.importer.PersonalizedTextHandlerFactory"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "service.ranking": serviceRanking?.encodeToJSON(),
            "tagpattern": tagpattern
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter fromAddress: (query)  (optional)
     - parameter senderHost: (query)  (optional)
     - parameter maxBounceCount: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqMcmCoreNewsletterNewsletterEmailServiceImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, fromAddress: String? = nil, senderHost: String? = nil, maxBounceCount: String? = nil, completion: ((data: ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplInfo?, error: ErrorType?) -> Void)) {
        comDayCqMcmCoreNewsletterNewsletterEmailServiceImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, fromAddress: fromAddress, senderHost: senderHost, maxBounceCount: maxBounceCount).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.mcm.core.newsletter.NewsletterEmailServiceImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "max.bounce.count" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "from.address" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "sender.host" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter fromAddress: (query)  (optional)
     - parameter senderHost: (query)  (optional)
     - parameter maxBounceCount: (query)  (optional)

     - returns: RequestBuilder<ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplInfo> 
     */
    public class func comDayCqMcmCoreNewsletterNewsletterEmailServiceImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, fromAddress: String? = nil, senderHost: String? = nil, maxBounceCount: String? = nil) -> RequestBuilder<ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplInfo> {
        let path = "/system/console/configMgr/com.day.cq.mcm.core.newsletter.NewsletterEmailServiceImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "from.address": fromAddress,
            "sender.host": senderHost,
            "max.bounce.count": maxBounceCount
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter experienceIndirection: (query)  (optional)
     - parameter touchpointIndirection: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqMcmImplMCMConfiguration(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, experienceIndirection: [String]? = nil, touchpointIndirection: [String]? = nil, completion: ((data: ComDayCqMcmImplMCMConfigurationInfo?, error: ErrorType?) -> Void)) {
        comDayCqMcmImplMCMConfigurationWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, experienceIndirection: experienceIndirection, touchpointIndirection: touchpointIndirection).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.mcm.impl.MCMConfiguration     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "touchpoint.indirection" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "experience.indirection" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter experienceIndirection: (query)  (optional)
     - parameter touchpointIndirection: (query)  (optional)

     - returns: RequestBuilder<ComDayCqMcmImplMCMConfigurationInfo> 
     */
    public class func comDayCqMcmImplMCMConfigurationWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, experienceIndirection: [String]? = nil, touchpointIndirection: [String]? = nil) -> RequestBuilder<ComDayCqMcmImplMCMConfigurationInfo> {
        let path = "/system/console/configMgr/com.day.cq.mcm.impl.MCMConfiguration"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "experience.indirection": experienceIndirection,
            "touchpoint.indirection": touchpointIndirection
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqMcmImplMCMConfigurationInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter tagpattern: (query)  (optional)
     - parameter componentResourceType: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponen(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int32? = nil, tagpattern: String? = nil, componentResourceType: String? = nil, completion: ((data: ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenInfo?, error: ErrorType?) -> Void)) {
        comDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, serviceRanking: serviceRanking, tagpattern: tagpattern, componentResourceType: componentResourceType).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.cta.ClickThroughComponentTagHandlerFactory     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "tagpattern" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "component.resourceType" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "service.ranking" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter tagpattern: (query)  (optional)
     - parameter componentResourceType: (query)  (optional)

     - returns: RequestBuilder<ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenInfo> 
     */
    public class func comDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int32? = nil, tagpattern: String? = nil, componentResourceType: String? = nil) -> RequestBuilder<ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenInfo> {
        let path = "/system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.cta.ClickThroughComponentTagHandlerFactory"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "service.ranking": serviceRanking?.encodeToJSON(),
            "tagpattern": tagpattern,
            "component.resourceType": componentResourceType
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter tagpattern: (query)  (optional)
     - parameter componentResourceType: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThroug(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int32? = nil, tagpattern: String? = nil, componentResourceType: String? = nil, completion: ((data: ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougInfo?, error: ErrorType?) -> Void)) {
        comDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, serviceRanking: serviceRanking, tagpattern: tagpattern, componentResourceType: componentResourceType).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.cta.GraphicalClickThroughComponentTagHandlerFactory     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "tagpattern" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "component.resourceType" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "service.ranking" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter tagpattern: (query)  (optional)
     - parameter componentResourceType: (query)  (optional)

     - returns: RequestBuilder<ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougInfo> 
     */
    public class func comDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int32? = nil, tagpattern: String? = nil, componentResourceType: String? = nil) -> RequestBuilder<ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougInfo> {
        let path = "/system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.cta.GraphicalClickThroughComponentTagHandlerFactory"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "service.ranking": serviceRanking?.encodeToJSON(),
            "tagpattern": tagpattern,
            "component.resourceType": componentResourceType
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter tagpattern: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponent(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int32? = nil, tagpattern: String? = nil, completion: ((data: ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentInfo?, error: ErrorType?) -> Void)) {
        comDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, serviceRanking: serviceRanking, tagpattern: tagpattern).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.cta.LeadFormCTAComponentTagHandlerFactory     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "tagpattern" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "service.ranking" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter tagpattern: (query)  (optional)

     - returns: RequestBuilder<ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentInfo> 
     */
    public class func comDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int32? = nil, tagpattern: String? = nil) -> RequestBuilder<ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentInfo> {
        let path = "/system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.cta.LeadFormCTAComponentTagHandlerFactory"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "service.ranking": serviceRanking?.encodeToJSON(),
            "tagpattern": tagpattern
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter tagpattern: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHa(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int32? = nil, tagpattern: String? = nil, completion: ((data: ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaInfo?, error: ErrorType?) -> Void)) {
        comDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, serviceRanking: serviceRanking, tagpattern: tagpattern).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.mbox.MBoxExperienceTagHandlerFactory     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "tagpattern" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "service.ranking" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter tagpattern: (query)  (optional)

     - returns: RequestBuilder<ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaInfo> 
     */
    public class func comDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int32? = nil, tagpattern: String? = nil) -> RequestBuilder<ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaInfo> {
        let path = "/system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.mbox.MBoxExperienceTagHandlerFactory"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "service.ranking": serviceRanking?.encodeToJSON(),
            "tagpattern": tagpattern
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter tagpattern: (query)  (optional)
     - parameter componentResourceType: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagH(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int32? = nil, tagpattern: String? = nil, componentResourceType: String? = nil, completion: ((data: ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHInfo?, error: ErrorType?) -> Void)) {
        comDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, serviceRanking: serviceRanking, tagpattern: tagpattern, componentResourceType: componentResourceType).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.mbox.TargetComponentTagHandlerFactory     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "tagpattern" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "component.resourceType" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "service.ranking" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter tagpattern: (query)  (optional)
     - parameter componentResourceType: (query)  (optional)

     - returns: RequestBuilder<ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHInfo> 
     */
    public class func comDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int32? = nil, tagpattern: String? = nil, componentResourceType: String? = nil) -> RequestBuilder<ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHInfo> {
        let path = "/system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.mbox.TargetComponentTagHandlerFactory"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "service.ranking": serviceRanking?.encodeToJSON(),
            "tagpattern": tagpattern,
            "component.resourceType": componentResourceType
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter eventFilter: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqNotificationImplNotificationServiceImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, eventFilter: String? = nil, completion: ((data: ComDayCqNotificationImplNotificationServiceImplInfo?, error: ErrorType?) -> Void)) {
        comDayCqNotificationImplNotificationServiceImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, eventFilter: eventFilter).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.notification.impl.NotificationServiceImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "event.filter" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter eventFilter: (query)  (optional)

     - returns: RequestBuilder<ComDayCqNotificationImplNotificationServiceImplInfo> 
     */
    public class func comDayCqNotificationImplNotificationServiceImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, eventFilter: String? = nil) -> RequestBuilder<ComDayCqNotificationImplNotificationServiceImplInfo> {
        let path = "/system/console/configMgr/com.day.cq.notification.impl.NotificationServiceImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "event.filter": eventFilter
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqNotificationImplNotificationServiceImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter forcelocation: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqPersonalizationImplServletsTargetingConfigurationServlet(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, forcelocation: Bool? = nil, completion: ((data: ComDayCqPersonalizationImplServletsTargetingConfigurationServletInfo?, error: ErrorType?) -> Void)) {
        comDayCqPersonalizationImplServletsTargetingConfigurationServletWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, forcelocation: forcelocation).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.personalization.impl.servlets.TargetingConfigurationServlet     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "forcelocation" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter forcelocation: (query)  (optional)

     - returns: RequestBuilder<ComDayCqPersonalizationImplServletsTargetingConfigurationServletInfo> 
     */
    public class func comDayCqPersonalizationImplServletsTargetingConfigurationServletWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, forcelocation: Bool? = nil) -> RequestBuilder<ComDayCqPersonalizationImplServletsTargetingConfigurationServletInfo> {
        let path = "/system/console/configMgr/com.day.cq.personalization.impl.servlets.TargetingConfigurationServlet"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "forcelocation": forcelocation
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqPersonalizationImplServletsTargetingConfigurationServletInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter id: (query)  (optional)
     - parameter enabled: (query)  (optional)
     - parameter reference: (query)  (optional)
     - parameter interval: (query)  (optional)
     - parameter expression: (query)  (optional)
     - parameter source: (query)  (optional)
     - parameter target: (query)  (optional)
     - parameter login: (query)  (optional)
     - parameter password: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqPollingImporterImplManagedPollConfigImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, id: String? = nil, enabled: Bool? = nil, reference: Bool? = nil, interval: Int32? = nil, expression: String? = nil, source: String? = nil, target: String? = nil, login: String? = nil, password: String? = nil, completion: ((data: ComDayCqPollingImporterImplManagedPollConfigImplInfo?, error: ErrorType?) -> Void)) {
        comDayCqPollingImporterImplManagedPollConfigImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, id: id, enabled: enabled, reference: reference, interval: interval, expression: expression, source: source, target: target, login: login, password: password).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.polling.importer.impl.ManagedPollConfigImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "reference" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "password" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "expression" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "interval" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "id" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "source" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "login" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "enabled" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "target" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter id: (query)  (optional)
     - parameter enabled: (query)  (optional)
     - parameter reference: (query)  (optional)
     - parameter interval: (query)  (optional)
     - parameter expression: (query)  (optional)
     - parameter source: (query)  (optional)
     - parameter target: (query)  (optional)
     - parameter login: (query)  (optional)
     - parameter password: (query)  (optional)

     - returns: RequestBuilder<ComDayCqPollingImporterImplManagedPollConfigImplInfo> 
     */
    public class func comDayCqPollingImporterImplManagedPollConfigImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, id: String? = nil, enabled: Bool? = nil, reference: Bool? = nil, interval: Int32? = nil, expression: String? = nil, source: String? = nil, target: String? = nil, login: String? = nil, password: String? = nil) -> RequestBuilder<ComDayCqPollingImporterImplManagedPollConfigImplInfo> {
        let path = "/system/console/configMgr/com.day.cq.polling.importer.impl.ManagedPollConfigImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "id": id,
            "enabled": enabled,
            "reference": reference,
            "interval": interval?.encodeToJSON(),
            "expression": expression,
            "source": source,
            "target": target,
            "login": login,
            "password": password
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqPollingImporterImplManagedPollConfigImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter importerUser: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqPollingImporterImplManagedPollingImporterImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, importerUser: String? = nil, completion: ((data: ComDayCqPollingImporterImplManagedPollingImporterImplInfo?, error: ErrorType?) -> Void)) {
        comDayCqPollingImporterImplManagedPollingImporterImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, importerUser: importerUser).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.polling.importer.impl.ManagedPollingImporterImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "importer.user" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter importerUser: (query)  (optional)

     - returns: RequestBuilder<ComDayCqPollingImporterImplManagedPollingImporterImplInfo> 
     */
    public class func comDayCqPollingImporterImplManagedPollingImporterImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, importerUser: String? = nil) -> RequestBuilder<ComDayCqPollingImporterImplManagedPollingImporterImplInfo> {
        let path = "/system/console/configMgr/com.day.cq.polling.importer.impl.ManagedPollingImporterImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "importer.user": importerUser
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqPollingImporterImplManagedPollingImporterImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter importerMinInterval: (query)  (optional)
     - parameter importerUser: (query)  (optional)
     - parameter excludePaths: (query)  (optional)
     - parameter includePaths: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqPollingImporterImplPollingImporterImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, importerMinInterval: Int32? = nil, importerUser: String? = nil, excludePaths: [String]? = nil, includePaths: [String]? = nil, completion: ((data: ComDayCqPollingImporterImplPollingImporterImplInfo?, error: ErrorType?) -> Void)) {
        comDayCqPollingImporterImplPollingImporterImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, importerMinInterval: importerMinInterval, importerUser: importerUser, excludePaths: excludePaths, includePaths: includePaths).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.polling.importer.impl.PollingImporterImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "include.paths" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "importer.user" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "importer.min.interval" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "exclude.paths" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter importerMinInterval: (query)  (optional)
     - parameter importerUser: (query)  (optional)
     - parameter excludePaths: (query)  (optional)
     - parameter includePaths: (query)  (optional)

     - returns: RequestBuilder<ComDayCqPollingImporterImplPollingImporterImplInfo> 
     */
    public class func comDayCqPollingImporterImplPollingImporterImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, importerMinInterval: Int32? = nil, importerUser: String? = nil, excludePaths: [String]? = nil, includePaths: [String]? = nil) -> RequestBuilder<ComDayCqPollingImporterImplPollingImporterImplInfo> {
        let path = "/system/console/configMgr/com.day.cq.polling.importer.impl.PollingImporterImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "importer.min.interval": importerMinInterval?.encodeToJSON(),
            "importer.user": importerUser,
            "exclude.paths": excludePaths,
            "include.paths": includePaths
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqPollingImporterImplPollingImporterImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqReplicationAuditReplicationEventListener(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int32? = nil, completion: ((data: ComDayCqReplicationAuditReplicationEventListenerInfo?, error: ErrorType?) -> Void)) {
        comDayCqReplicationAuditReplicationEventListenerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, serviceRanking: serviceRanking).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.replication.audit.ReplicationEventListener     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "service_location" : "service_location",
  "bundle_location" : "bundle_location",
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "service.ranking" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)

     - returns: RequestBuilder<ComDayCqReplicationAuditReplicationEventListenerInfo> 
     */
    public class func comDayCqReplicationAuditReplicationEventListenerWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int32? = nil) -> RequestBuilder<ComDayCqReplicationAuditReplicationEventListenerInfo> {
        let path = "/system/console/configMgr/com.day.cq.replication.audit.ReplicationEventListener"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "service.ranking": serviceRanking?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqReplicationAuditReplicationEventListenerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter host: (query)  (optional)
     - parameter port: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqReplicationContentStaticContentBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, host: String? = nil, port: Int32? = nil, completion: ((data: ComDayCqReplicationContentStaticContentBuilderInfo?, error: ErrorType?) -> Void)) {
        comDayCqReplicationContentStaticContentBuilderWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, host: host, port: port).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.replication.content.StaticContentBuilder     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "port" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "host" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter host: (query)  (optional)
     - parameter port: (query)  (optional)

     - returns: RequestBuilder<ComDayCqReplicationContentStaticContentBuilderInfo> 
     */
    public class func comDayCqReplicationContentStaticContentBuilderWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, host: String? = nil, port: Int32? = nil) -> RequestBuilder<ComDayCqReplicationContentStaticContentBuilderInfo> {
        let path = "/system/console/configMgr/com.day.cq.replication.content.StaticContentBuilder"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "host": host,
            "port": port?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqReplicationContentStaticContentBuilderInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter jobTopics: (query)  (optional)
     - parameter serviceUserTarget: (query)  (optional)
     - parameter agentProviderTarget: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqReplicationImplAgentManagerImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, jobTopics: String? = nil, serviceUserTarget: String? = nil, agentProviderTarget: String? = nil, completion: ((data: ComDayCqReplicationImplAgentManagerImplInfo?, error: ErrorType?) -> Void)) {
        comDayCqReplicationImplAgentManagerImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, jobTopics: jobTopics, serviceUserTarget: serviceUserTarget, agentProviderTarget: agentProviderTarget).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.replication.impl.AgentManagerImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "serviceUser.target" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "agentProvider.target" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "job.topics" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter jobTopics: (query)  (optional)
     - parameter serviceUserTarget: (query)  (optional)
     - parameter agentProviderTarget: (query)  (optional)

     - returns: RequestBuilder<ComDayCqReplicationImplAgentManagerImplInfo> 
     */
    public class func comDayCqReplicationImplAgentManagerImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, jobTopics: String? = nil, serviceUserTarget: String? = nil, agentProviderTarget: String? = nil) -> RequestBuilder<ComDayCqReplicationImplAgentManagerImplInfo> {
        let path = "/system/console/configMgr/com.day.cq.replication.impl.AgentManagerImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "job.topics": jobTopics,
            "serviceUser.target": serviceUserTarget,
            "agentProvider.target": agentProviderTarget
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqReplicationImplAgentManagerImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter binaryThreshold: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqReplicationImplContentDurboBinaryLessContentBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, binaryThreshold: Int32? = nil, completion: ((data: ComDayCqReplicationImplContentDurboBinaryLessContentBuilderInfo?, error: ErrorType?) -> Void)) {
        comDayCqReplicationImplContentDurboBinaryLessContentBuilderWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, binaryThreshold: binaryThreshold).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.replication.impl.content.durbo.BinaryLessContentBuilder     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "binary.threshold" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter binaryThreshold: (query)  (optional)

     - returns: RequestBuilder<ComDayCqReplicationImplContentDurboBinaryLessContentBuilderInfo> 
     */
    public class func comDayCqReplicationImplContentDurboBinaryLessContentBuilderWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, binaryThreshold: Int32? = nil) -> RequestBuilder<ComDayCqReplicationImplContentDurboBinaryLessContentBuilderInfo> {
        let path = "/system/console/configMgr/com.day.cq.replication.impl.content.durbo.BinaryLessContentBuilder"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "binary.threshold": binaryThreshold?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqReplicationImplContentDurboBinaryLessContentBuilderInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter preserveHierarchyNodes: (query)  (optional)
     - parameter ignoreVersioning: (query)  (optional)
     - parameter importAcl: (query)  (optional)
     - parameter saveThreshold: (query)  (optional)
     - parameter preserveUserPaths: (query)  (optional)
     - parameter preserveUuid: (query)  (optional)
     - parameter preserveUuidNodetypes: (query)  (optional)
     - parameter preserveUuidSubtrees: (query)  (optional)
     - parameter autoCommit: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqReplicationImplContentDurboDurboImportConfigurationProv(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, preserveHierarchyNodes: Bool? = nil, ignoreVersioning: Bool? = nil, importAcl: Bool? = nil, saveThreshold: Int32? = nil, preserveUserPaths: Bool? = nil, preserveUuid: Bool? = nil, preserveUuidNodetypes: [String]? = nil, preserveUuidSubtrees: [String]? = nil, autoCommit: Bool? = nil, completion: ((data: ComDayCqReplicationImplContentDurboDurboImportConfigurationProvInfo?, error: ErrorType?) -> Void)) {
        comDayCqReplicationImplContentDurboDurboImportConfigurationProvWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, preserveHierarchyNodes: preserveHierarchyNodes, ignoreVersioning: ignoreVersioning, importAcl: importAcl, saveThreshold: saveThreshold, preserveUserPaths: preserveUserPaths, preserveUuid: preserveUuid, preserveUuidNodetypes: preserveUuidNodetypes, preserveUuidSubtrees: preserveUuidSubtrees, autoCommit: autoCommit).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.replication.impl.content.durbo.DurboImportConfigurationProviderService     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "preserve.hierarchy.nodes" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "save.threshold" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "preserve.uuid.nodetypes" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "ignore.versioning" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "preserve.uuid" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "import.acl" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "preserve.user.paths" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "preserve.uuid.subtrees" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "auto.commit" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter preserveHierarchyNodes: (query)  (optional)
     - parameter ignoreVersioning: (query)  (optional)
     - parameter importAcl: (query)  (optional)
     - parameter saveThreshold: (query)  (optional)
     - parameter preserveUserPaths: (query)  (optional)
     - parameter preserveUuid: (query)  (optional)
     - parameter preserveUuidNodetypes: (query)  (optional)
     - parameter preserveUuidSubtrees: (query)  (optional)
     - parameter autoCommit: (query)  (optional)

     - returns: RequestBuilder<ComDayCqReplicationImplContentDurboDurboImportConfigurationProvInfo> 
     */
    public class func comDayCqReplicationImplContentDurboDurboImportConfigurationProvWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, preserveHierarchyNodes: Bool? = nil, ignoreVersioning: Bool? = nil, importAcl: Bool? = nil, saveThreshold: Int32? = nil, preserveUserPaths: Bool? = nil, preserveUuid: Bool? = nil, preserveUuidNodetypes: [String]? = nil, preserveUuidSubtrees: [String]? = nil, autoCommit: Bool? = nil) -> RequestBuilder<ComDayCqReplicationImplContentDurboDurboImportConfigurationProvInfo> {
        let path = "/system/console/configMgr/com.day.cq.replication.impl.content.durbo.DurboImportConfigurationProviderService"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "preserve.hierarchy.nodes": preserveHierarchyNodes,
            "ignore.versioning": ignoreVersioning,
            "import.acl": importAcl,
            "save.threshold": saveThreshold?.encodeToJSON(),
            "preserve.user.paths": preserveUserPaths,
            "preserve.uuid": preserveUuid,
            "preserve.uuid.nodetypes": preserveUuidNodetypes,
            "preserve.uuid.subtrees": preserveUuidSubtrees,
            "auto.commit": autoCommit
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqReplicationImplContentDurboDurboImportConfigurationProvInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter replicationContentUseFileStorage: (query)  (optional)
     - parameter replicationContentMaxCommitAttempts: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqReplicationImplReplicationContentFactoryProviderImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, replicationContentUseFileStorage: Bool? = nil, replicationContentMaxCommitAttempts: Int32? = nil, completion: ((data: ComDayCqReplicationImplReplicationContentFactoryProviderImplInfo?, error: ErrorType?) -> Void)) {
        comDayCqReplicationImplReplicationContentFactoryProviderImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, replicationContentUseFileStorage: replicationContentUseFileStorage, replicationContentMaxCommitAttempts: replicationContentMaxCommitAttempts).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.replication.impl.ReplicationContentFactoryProviderImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "service_location" : "service_location",
  "bundle_location" : "bundle_location",
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "replication.content.maxCommitAttempts" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "replication.content.useFileStorage" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter replicationContentUseFileStorage: (query)  (optional)
     - parameter replicationContentMaxCommitAttempts: (query)  (optional)

     - returns: RequestBuilder<ComDayCqReplicationImplReplicationContentFactoryProviderImplInfo> 
     */
    public class func comDayCqReplicationImplReplicationContentFactoryProviderImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, replicationContentUseFileStorage: Bool? = nil, replicationContentMaxCommitAttempts: Int32? = nil) -> RequestBuilder<ComDayCqReplicationImplReplicationContentFactoryProviderImplInfo> {
        let path = "/system/console/configMgr/com.day.cq.replication.impl.ReplicationContentFactoryProviderImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "replication.content.useFileStorage": replicationContentUseFileStorage,
            "replication.content.maxCommitAttempts": replicationContentMaxCommitAttempts?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqReplicationImplReplicationContentFactoryProviderImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter receiverTmpfileThreshold: (query)  (optional)
     - parameter receiverPackagesUseInstall: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqReplicationImplReplicationReceiverImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, receiverTmpfileThreshold: Int32? = nil, receiverPackagesUseInstall: Bool? = nil, completion: ((data: ComDayCqReplicationImplReplicationReceiverImplInfo?, error: ErrorType?) -> Void)) {
        comDayCqReplicationImplReplicationReceiverImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, receiverTmpfileThreshold: receiverTmpfileThreshold, receiverPackagesUseInstall: receiverPackagesUseInstall).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.replication.impl.ReplicationReceiverImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "receiver.packages.use.install" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "receiver.tmpfile.threshold" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter receiverTmpfileThreshold: (query)  (optional)
     - parameter receiverPackagesUseInstall: (query)  (optional)

     - returns: RequestBuilder<ComDayCqReplicationImplReplicationReceiverImplInfo> 
     */
    public class func comDayCqReplicationImplReplicationReceiverImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, receiverTmpfileThreshold: Int32? = nil, receiverPackagesUseInstall: Bool? = nil) -> RequestBuilder<ComDayCqReplicationImplReplicationReceiverImplInfo> {
        let path = "/system/console/configMgr/com.day.cq.replication.impl.ReplicationReceiverImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "receiver.tmpfile.threshold": receiverTmpfileThreshold?.encodeToJSON(),
            "receiver.packages.use.install": receiverPackagesUseInstall
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqReplicationImplReplicationReceiverImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter distributeEvents: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqReplicationImplReplicatorImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, distributeEvents: Bool? = nil, completion: ((data: ComDayCqReplicationImplReplicatorImplInfo?, error: ErrorType?) -> Void)) {
        comDayCqReplicationImplReplicatorImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, distributeEvents: distributeEvents).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.replication.impl.ReplicatorImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "distribute_events" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter distributeEvents: (query)  (optional)

     - returns: RequestBuilder<ComDayCqReplicationImplReplicatorImplInfo> 
     */
    public class func comDayCqReplicationImplReplicatorImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, distributeEvents: Bool? = nil) -> RequestBuilder<ComDayCqReplicationImplReplicatorImplInfo> {
        let path = "/system/console/configMgr/com.day.cq.replication.impl.ReplicatorImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "distribute_events": distributeEvents
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqReplicationImplReplicatorImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter schedulerPeriod: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqReplicationImplReverseReplicator(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, schedulerPeriod: Int32? = nil, completion: ((data: ComDayCqReplicationImplReverseReplicatorInfo?, error: ErrorType?) -> Void)) {
        comDayCqReplicationImplReverseReplicatorWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, schedulerPeriod: schedulerPeriod).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.replication.impl.ReverseReplicator     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "service_location" : "service_location",
  "bundle_location" : "bundle_location",
  "description" : "description",
  "pid" : "pid",
  "additionalProperties" : "additionalProperties",
  "title" : "title",
  "properties" : {
    "scheduler.period" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter schedulerPeriod: (query)  (optional)

     - returns: RequestBuilder<ComDayCqReplicationImplReverseReplicatorInfo> 
     */
    public class func comDayCqReplicationImplReverseReplicatorWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, schedulerPeriod: Int32? = nil) -> RequestBuilder<ComDayCqReplicationImplReverseReplicatorInfo> {
        let path = "/system/console/configMgr/com.day.cq.replication.impl.ReverseReplicator"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "scheduler.period": schedulerPeriod?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqReplicationImplReverseReplicatorInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter disabledCipherSuites: (query)  (optional)
     - parameter enabledCipherSuites: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqReplicationImplTransportBinaryLessTransportHandler(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, disabledCipherSuites: [String]? = nil, enabledCipherSuites: [String]? = nil, completion: ((data: ComDayCqReplicationImplTransportBinaryLessTransportHandlerInfo?, error: ErrorType?) -> Void)) {
        comDayCqReplicationImplTransportBinaryLessTransportHandlerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, disabledCipherSuites: disabledCipherSuites, enabledCipherSuites: enabledCipherSuites).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.replication.impl.transport.BinaryLessTransportHandler     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "enabled.cipher.suites" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "disabled.cipher.suites" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter disabledCipherSuites: (query)  (optional)
     - parameter enabledCipherSuites: (query)  (optional)

     - returns: RequestBuilder<ComDayCqReplicationImplTransportBinaryLessTransportHandlerInfo> 
     */
    public class func comDayCqReplicationImplTransportBinaryLessTransportHandlerWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, disabledCipherSuites: [String]? = nil, enabledCipherSuites: [String]? = nil) -> RequestBuilder<ComDayCqReplicationImplTransportBinaryLessTransportHandlerInfo> {
        let path = "/system/console/configMgr/com.day.cq.replication.impl.transport.BinaryLessTransportHandler"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "disabled.cipher.suites": disabledCipherSuites,
            "enabled.cipher.suites": enabledCipherSuites
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqReplicationImplTransportBinaryLessTransportHandlerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter disabledCipherSuites: (query)  (optional)
     - parameter enabledCipherSuites: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqReplicationImplTransportHttp(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, disabledCipherSuites: [String]? = nil, enabledCipherSuites: [String]? = nil, completion: ((data: ComDayCqReplicationImplTransportHttpInfo?, error: ErrorType?) -> Void)) {
        comDayCqReplicationImplTransportHttpWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, disabledCipherSuites: disabledCipherSuites, enabledCipherSuites: enabledCipherSuites).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.replication.impl.transport.Http     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "enabled.cipher.suites" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "disabled.cipher.suites" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter disabledCipherSuites: (query)  (optional)
     - parameter enabledCipherSuites: (query)  (optional)

     - returns: RequestBuilder<ComDayCqReplicationImplTransportHttpInfo> 
     */
    public class func comDayCqReplicationImplTransportHttpWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, disabledCipherSuites: [String]? = nil, enabledCipherSuites: [String]? = nil) -> RequestBuilder<ComDayCqReplicationImplTransportHttpInfo> {
        let path = "/system/console/configMgr/com.day.cq.replication.impl.transport.Http"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "disabled.cipher.suites": disabledCipherSuites,
            "enabled.cipher.suites": enabledCipherSuites
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqReplicationImplTransportHttpInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter repcacheEnable: (query)  (optional)
     - parameter repcacheTtl: (query)  (optional)
     - parameter repcacheMax: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqReportingImplCacheCacheImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, repcacheEnable: Bool? = nil, repcacheTtl: Int32? = nil, repcacheMax: Int32? = nil, completion: ((data: ComDayCqReportingImplCacheCacheImplInfo?, error: ErrorType?) -> Void)) {
        comDayCqReportingImplCacheCacheImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, repcacheEnable: repcacheEnable, repcacheTtl: repcacheTtl, repcacheMax: repcacheMax).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.reporting.impl.cache.CacheImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "repcache.ttl" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "repcache.max" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "repcache.enable" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter repcacheEnable: (query)  (optional)
     - parameter repcacheTtl: (query)  (optional)
     - parameter repcacheMax: (query)  (optional)

     - returns: RequestBuilder<ComDayCqReportingImplCacheCacheImplInfo> 
     */
    public class func comDayCqReportingImplCacheCacheImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, repcacheEnable: Bool? = nil, repcacheTtl: Int32? = nil, repcacheMax: Int32? = nil) -> RequestBuilder<ComDayCqReportingImplCacheCacheImplInfo> {
        let path = "/system/console/configMgr/com.day.cq.reporting.impl.cache.CacheImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "repcache.enable": repcacheEnable,
            "repcache.ttl": repcacheTtl?.encodeToJSON(),
            "repcache.max": repcacheMax?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqReportingImplCacheCacheImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter repconfTimezone: (query)  (optional)
     - parameter repconfLocale: (query)  (optional)
     - parameter repconfSnapshots: (query)  (optional)
     - parameter repconfRepdir: (query)  (optional)
     - parameter repconfHourofday: (query)  (optional)
     - parameter repconfMinofhour: (query)  (optional)
     - parameter repconfMaxrows: (query)  (optional)
     - parameter repconfFakedata: (query)  (optional)
     - parameter repconfSnapshotuser: (query)  (optional)
     - parameter repconfEnforcesnapshotuser: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqReportingImplConfigServiceImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, repconfTimezone: String? = nil, repconfLocale: String? = nil, repconfSnapshots: String? = nil, repconfRepdir: String? = nil, repconfHourofday: Int32? = nil, repconfMinofhour: Int32? = nil, repconfMaxrows: Int32? = nil, repconfFakedata: Bool? = nil, repconfSnapshotuser: String? = nil, repconfEnforcesnapshotuser: Bool? = nil, completion: ((data: ComDayCqReportingImplConfigServiceImplInfo?, error: ErrorType?) -> Void)) {
        comDayCqReportingImplConfigServiceImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, repconfTimezone: repconfTimezone, repconfLocale: repconfLocale, repconfSnapshots: repconfSnapshots, repconfRepdir: repconfRepdir, repconfHourofday: repconfHourofday, repconfMinofhour: repconfMinofhour, repconfMaxrows: repconfMaxrows, repconfFakedata: repconfFakedata, repconfSnapshotuser: repconfSnapshotuser, repconfEnforcesnapshotuser: repconfEnforcesnapshotuser).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.reporting.impl.ConfigServiceImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "repconf.fakedata" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "repconf.timezone" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "repconf.snapshots" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "repconf.maxrows" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "repconf.snapshotuser" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "repconf.locale" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "repconf.repdir" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "repconf.hourofday" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "repconf.minofhour" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "repconf.enforcesnapshotuser" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter repconfTimezone: (query)  (optional)
     - parameter repconfLocale: (query)  (optional)
     - parameter repconfSnapshots: (query)  (optional)
     - parameter repconfRepdir: (query)  (optional)
     - parameter repconfHourofday: (query)  (optional)
     - parameter repconfMinofhour: (query)  (optional)
     - parameter repconfMaxrows: (query)  (optional)
     - parameter repconfFakedata: (query)  (optional)
     - parameter repconfSnapshotuser: (query)  (optional)
     - parameter repconfEnforcesnapshotuser: (query)  (optional)

     - returns: RequestBuilder<ComDayCqReportingImplConfigServiceImplInfo> 
     */
    public class func comDayCqReportingImplConfigServiceImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, repconfTimezone: String? = nil, repconfLocale: String? = nil, repconfSnapshots: String? = nil, repconfRepdir: String? = nil, repconfHourofday: Int32? = nil, repconfMinofhour: Int32? = nil, repconfMaxrows: Int32? = nil, repconfFakedata: Bool? = nil, repconfSnapshotuser: String? = nil, repconfEnforcesnapshotuser: Bool? = nil) -> RequestBuilder<ComDayCqReportingImplConfigServiceImplInfo> {
        let path = "/system/console/configMgr/com.day.cq.reporting.impl.ConfigServiceImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "repconf.timezone": repconfTimezone,
            "repconf.locale": repconfLocale,
            "repconf.snapshots": repconfSnapshots,
            "repconf.repdir": repconfRepdir,
            "repconf.hourofday": repconfHourofday?.encodeToJSON(),
            "repconf.minofhour": repconfMinofhour?.encodeToJSON(),
            "repconf.maxrows": repconfMaxrows?.encodeToJSON(),
            "repconf.fakedata": repconfFakedata,
            "repconf.snapshotuser": repconfSnapshotuser,
            "repconf.enforcesnapshotuser": repconfEnforcesnapshotuser
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqReportingImplConfigServiceImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter requestLogOutput: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqReportingImplRLogAnalyzer(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, requestLogOutput: String? = nil, completion: ((data: ComDayCqReportingImplRLogAnalyzerInfo?, error: ErrorType?) -> Void)) {
        comDayCqReportingImplRLogAnalyzerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, requestLogOutput: requestLogOutput).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.reporting.impl.RLogAnalyzer     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "request.log.output" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter requestLogOutput: (query)  (optional)

     - returns: RequestBuilder<ComDayCqReportingImplRLogAnalyzerInfo> 
     */
    public class func comDayCqReportingImplRLogAnalyzerWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, requestLogOutput: String? = nil) -> RequestBuilder<ComDayCqReportingImplRLogAnalyzerInfo> {
        let path = "/system/console/configMgr/com.day.cq.reporting.impl.RLogAnalyzer"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "request.log.output": requestLogOutput
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqReportingImplRLogAnalyzerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter schedulerPeriod: (query)  (optional)
     - parameter schedulerConcurrent: (query)  (optional)
     - parameter serviceBadLinkToleranceInterval: (query)  (optional)
     - parameter serviceCheckOverridePatterns: (query)  (optional)
     - parameter serviceCacheBrokenInternalLinks: (query)  (optional)
     - parameter serviceSpecialLinkPrefix: (query)  (optional)
     - parameter serviceSpecialLinkPatterns: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqRewriterLinkcheckerImplLinkCheckerImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, schedulerPeriod: Int32? = nil, schedulerConcurrent: Bool? = nil, serviceBadLinkToleranceInterval: Int32? = nil, serviceCheckOverridePatterns: [String]? = nil, serviceCacheBrokenInternalLinks: Bool? = nil, serviceSpecialLinkPrefix: [String]? = nil, serviceSpecialLinkPatterns: [String]? = nil, completion: ((data: ComDayCqRewriterLinkcheckerImplLinkCheckerImplInfo?, error: ErrorType?) -> Void)) {
        comDayCqRewriterLinkcheckerImplLinkCheckerImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, schedulerPeriod: schedulerPeriod, schedulerConcurrent: schedulerConcurrent, serviceBadLinkToleranceInterval: serviceBadLinkToleranceInterval, serviceCheckOverridePatterns: serviceCheckOverridePatterns, serviceCacheBrokenInternalLinks: serviceCacheBrokenInternalLinks, serviceSpecialLinkPrefix: serviceSpecialLinkPrefix, serviceSpecialLinkPatterns: serviceSpecialLinkPatterns).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.rewriter.linkchecker.impl.LinkCheckerImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "service_location" : "service_location",
  "bundle_location" : "bundle_location",
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "service.special_link_prefix" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "scheduler.concurrent" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "service.special_link_patterns" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "service.check_override_patterns" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "service.cache_broken_internal_links" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "scheduler.period" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "service.bad_link_tolerance_interval" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter schedulerPeriod: (query)  (optional)
     - parameter schedulerConcurrent: (query)  (optional)
     - parameter serviceBadLinkToleranceInterval: (query)  (optional)
     - parameter serviceCheckOverridePatterns: (query)  (optional)
     - parameter serviceCacheBrokenInternalLinks: (query)  (optional)
     - parameter serviceSpecialLinkPrefix: (query)  (optional)
     - parameter serviceSpecialLinkPatterns: (query)  (optional)

     - returns: RequestBuilder<ComDayCqRewriterLinkcheckerImplLinkCheckerImplInfo> 
     */
    public class func comDayCqRewriterLinkcheckerImplLinkCheckerImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, schedulerPeriod: Int32? = nil, schedulerConcurrent: Bool? = nil, serviceBadLinkToleranceInterval: Int32? = nil, serviceCheckOverridePatterns: [String]? = nil, serviceCacheBrokenInternalLinks: Bool? = nil, serviceSpecialLinkPrefix: [String]? = nil, serviceSpecialLinkPatterns: [String]? = nil) -> RequestBuilder<ComDayCqRewriterLinkcheckerImplLinkCheckerImplInfo> {
        let path = "/system/console/configMgr/com.day.cq.rewriter.linkchecker.impl.LinkCheckerImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "scheduler.period": schedulerPeriod?.encodeToJSON(),
            "scheduler.concurrent": schedulerConcurrent,
            "service.bad_link_tolerance_interval": serviceBadLinkToleranceInterval?.encodeToJSON(),
            "service.check_override_patterns": serviceCheckOverridePatterns,
            "service.cache_broken_internal_links": serviceCacheBrokenInternalLinks,
            "service.special_link_prefix": serviceSpecialLinkPrefix,
            "service.special_link_patterns": serviceSpecialLinkPatterns
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqRewriterLinkcheckerImplLinkCheckerImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter schedulerPeriod: (query)  (optional)
     - parameter schedulerConcurrent: (query)  (optional)
     - parameter goodLinkTestInterval: (query)  (optional)
     - parameter badLinkTestInterval: (query)  (optional)
     - parameter linkUnusedInterval: (query)  (optional)
     - parameter connectionTimeout: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqRewriterLinkcheckerImplLinkCheckerTask(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, schedulerPeriod: Int32? = nil, schedulerConcurrent: Bool? = nil, goodLinkTestInterval: Int32? = nil, badLinkTestInterval: Int32? = nil, linkUnusedInterval: Int32? = nil, connectionTimeout: Int32? = nil, completion: ((data: ComDayCqRewriterLinkcheckerImplLinkCheckerTaskInfo?, error: ErrorType?) -> Void)) {
        comDayCqRewriterLinkcheckerImplLinkCheckerTaskWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, schedulerPeriod: schedulerPeriod, schedulerConcurrent: schedulerConcurrent, goodLinkTestInterval: goodLinkTestInterval, badLinkTestInterval: badLinkTestInterval, linkUnusedInterval: linkUnusedInterval, connectionTimeout: connectionTimeout).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.rewriter.linkchecker.impl.LinkCheckerTask     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "scheduler.concurrent" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "good_link_test_interval" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "link_unused_interval" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "connection.timeout" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "bad_link_test_interval" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "scheduler.period" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter schedulerPeriod: (query)  (optional)
     - parameter schedulerConcurrent: (query)  (optional)
     - parameter goodLinkTestInterval: (query)  (optional)
     - parameter badLinkTestInterval: (query)  (optional)
     - parameter linkUnusedInterval: (query)  (optional)
     - parameter connectionTimeout: (query)  (optional)

     - returns: RequestBuilder<ComDayCqRewriterLinkcheckerImplLinkCheckerTaskInfo> 
     */
    public class func comDayCqRewriterLinkcheckerImplLinkCheckerTaskWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, schedulerPeriod: Int32? = nil, schedulerConcurrent: Bool? = nil, goodLinkTestInterval: Int32? = nil, badLinkTestInterval: Int32? = nil, linkUnusedInterval: Int32? = nil, connectionTimeout: Int32? = nil) -> RequestBuilder<ComDayCqRewriterLinkcheckerImplLinkCheckerTaskInfo> {
        let path = "/system/console/configMgr/com.day.cq.rewriter.linkchecker.impl.LinkCheckerTask"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "scheduler.period": schedulerPeriod?.encodeToJSON(),
            "scheduler.concurrent": schedulerConcurrent,
            "good_link_test_interval": goodLinkTestInterval?.encodeToJSON(),
            "bad_link_test_interval": badLinkTestInterval?.encodeToJSON(),
            "link_unused_interval": linkUnusedInterval?.encodeToJSON(),
            "connection.timeout": connectionTimeout?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqRewriterLinkcheckerImplLinkCheckerTaskInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter linkcheckertransformerDisableRewriting: (query)  (optional)
     - parameter linkcheckertransformerDisableChecking: (query)  (optional)
     - parameter linkcheckertransformerMapCacheSize: (query)  (optional)
     - parameter linkcheckertransformerStrictExtensionCheck: (query)  (optional)
     - parameter linkcheckertransformerStripHtmltExtension: (query)  (optional)
     - parameter linkcheckertransformerRewriteElements: (query)  (optional)
     - parameter linkcheckertransformerStripExtensionPathBlacklist: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactory(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, linkcheckertransformerDisableRewriting: Bool? = nil, linkcheckertransformerDisableChecking: Bool? = nil, linkcheckertransformerMapCacheSize: Int32? = nil, linkcheckertransformerStrictExtensionCheck: Bool? = nil, linkcheckertransformerStripHtmltExtension: Bool? = nil, linkcheckertransformerRewriteElements: [String]? = nil, linkcheckertransformerStripExtensionPathBlacklist: [String]? = nil, completion: ((data: ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryInfo?, error: ErrorType?) -> Void)) {
        comDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, linkcheckertransformerDisableRewriting: linkcheckertransformerDisableRewriting, linkcheckertransformerDisableChecking: linkcheckertransformerDisableChecking, linkcheckertransformerMapCacheSize: linkcheckertransformerMapCacheSize, linkcheckertransformerStrictExtensionCheck: linkcheckertransformerStrictExtensionCheck, linkcheckertransformerStripHtmltExtension: linkcheckertransformerStripHtmltExtension, linkcheckertransformerRewriteElements: linkcheckertransformerRewriteElements, linkcheckertransformerStripExtensionPathBlacklist: linkcheckertransformerStripExtensionPathBlacklist).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.rewriter.linkchecker.impl.LinkCheckerTransformerFactory     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "linkcheckertransformer.rewriteElements" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "linkcheckertransformer.mapCacheSize" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "linkcheckertransformer.stripExtensionPathBlacklist" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "linkcheckertransformer.strictExtensionCheck" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "linkcheckertransformer.stripHtmltExtension" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "linkcheckertransformer.disableChecking" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "linkcheckertransformer.disableRewriting" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter linkcheckertransformerDisableRewriting: (query)  (optional)
     - parameter linkcheckertransformerDisableChecking: (query)  (optional)
     - parameter linkcheckertransformerMapCacheSize: (query)  (optional)
     - parameter linkcheckertransformerStrictExtensionCheck: (query)  (optional)
     - parameter linkcheckertransformerStripHtmltExtension: (query)  (optional)
     - parameter linkcheckertransformerRewriteElements: (query)  (optional)
     - parameter linkcheckertransformerStripExtensionPathBlacklist: (query)  (optional)

     - returns: RequestBuilder<ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryInfo> 
     */
    public class func comDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, linkcheckertransformerDisableRewriting: Bool? = nil, linkcheckertransformerDisableChecking: Bool? = nil, linkcheckertransformerMapCacheSize: Int32? = nil, linkcheckertransformerStrictExtensionCheck: Bool? = nil, linkcheckertransformerStripHtmltExtension: Bool? = nil, linkcheckertransformerRewriteElements: [String]? = nil, linkcheckertransformerStripExtensionPathBlacklist: [String]? = nil) -> RequestBuilder<ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryInfo> {
        let path = "/system/console/configMgr/com.day.cq.rewriter.linkchecker.impl.LinkCheckerTransformerFactory"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "linkcheckertransformer.disableRewriting": linkcheckertransformerDisableRewriting,
            "linkcheckertransformer.disableChecking": linkcheckertransformerDisableChecking,
            "linkcheckertransformer.mapCacheSize": linkcheckertransformerMapCacheSize?.encodeToJSON(),
            "linkcheckertransformer.strictExtensionCheck": linkcheckertransformerStrictExtensionCheck,
            "linkcheckertransformer.stripHtmltExtension": linkcheckertransformerStripHtmltExtension,
            "linkcheckertransformer.rewriteElements": linkcheckertransformerRewriteElements,
            "linkcheckertransformer.stripExtensionPathBlacklist": linkcheckertransformerStripExtensionPathBlacklist
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceMaxLinksPerHost: (query)  (optional)
     - parameter serviceSaveExternalLinkReferences: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqRewriterLinkcheckerImplLinkInfoStorageImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceMaxLinksPerHost: Int32? = nil, serviceSaveExternalLinkReferences: Bool? = nil, completion: ((data: ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplInfo?, error: ErrorType?) -> Void)) {
        comDayCqRewriterLinkcheckerImplLinkInfoStorageImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, serviceMaxLinksPerHost: serviceMaxLinksPerHost, serviceSaveExternalLinkReferences: serviceSaveExternalLinkReferences).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.rewriter.linkchecker.impl.LinkInfoStorageImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "service_location" : "service_location",
  "bundle_location" : "bundle_location",
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "service.max_links_per_host" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "service.save_external_link_references" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceMaxLinksPerHost: (query)  (optional)
     - parameter serviceSaveExternalLinkReferences: (query)  (optional)

     - returns: RequestBuilder<ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplInfo> 
     */
    public class func comDayCqRewriterLinkcheckerImplLinkInfoStorageImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceMaxLinksPerHost: Int32? = nil, serviceSaveExternalLinkReferences: Bool? = nil) -> RequestBuilder<ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplInfo> {
        let path = "/system/console/configMgr/com.day.cq.rewriter.linkchecker.impl.LinkInfoStorageImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "service.max_links_per_host": serviceMaxLinksPerHost?.encodeToJSON(),
            "service.save_external_link_references": serviceSaveExternalLinkReferences
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter htmlparserProcessTags: (query)  (optional)
     - parameter htmlparserPreserveCamelCase: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqRewriterProcessorImplHtmlParserFactory(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, htmlparserProcessTags: [String]? = nil, htmlparserPreserveCamelCase: Bool? = nil, completion: ((data: ComDayCqRewriterProcessorImplHtmlParserFactoryInfo?, error: ErrorType?) -> Void)) {
        comDayCqRewriterProcessorImplHtmlParserFactoryWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, htmlparserProcessTags: htmlparserProcessTags, htmlparserPreserveCamelCase: htmlparserPreserveCamelCase).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.rewriter.processor.impl.HtmlParserFactory     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "htmlparser.preserveCamelCase" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "htmlparser.processTags" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter htmlparserProcessTags: (query)  (optional)
     - parameter htmlparserPreserveCamelCase: (query)  (optional)

     - returns: RequestBuilder<ComDayCqRewriterProcessorImplHtmlParserFactoryInfo> 
     */
    public class func comDayCqRewriterProcessorImplHtmlParserFactoryWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, htmlparserProcessTags: [String]? = nil, htmlparserPreserveCamelCase: Bool? = nil) -> RequestBuilder<ComDayCqRewriterProcessorImplHtmlParserFactoryInfo> {
        let path = "/system/console/configMgr/com.day.cq.rewriter.processor.impl.HtmlParserFactory"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "htmlparser.processTags": htmlparserProcessTags,
            "htmlparser.preserveCamelCase": htmlparserPreserveCamelCase
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqRewriterProcessorImplHtmlParserFactoryInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter excerptProperties: (query)  (optional)
     - parameter cacheMaxEntries: (query)  (optional)
     - parameter cacheEntryLifetime: (query)  (optional)
     - parameter xpathUnion: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqSearchImplBuilderQueryBuilderImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, excerptProperties: [String]? = nil, cacheMaxEntries: Int32? = nil, cacheEntryLifetime: Int32? = nil, xpathUnion: Bool? = nil, completion: ((data: ComDayCqSearchImplBuilderQueryBuilderImplInfo?, error: ErrorType?) -> Void)) {
        comDayCqSearchImplBuilderQueryBuilderImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, excerptProperties: excerptProperties, cacheMaxEntries: cacheMaxEntries, cacheEntryLifetime: cacheEntryLifetime, xpathUnion: xpathUnion).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.search.impl.builder.QueryBuilderImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "excerpt.properties" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "cache.entry.lifetime" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "xpath.union" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "cache.max.entries" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter excerptProperties: (query)  (optional)
     - parameter cacheMaxEntries: (query)  (optional)
     - parameter cacheEntryLifetime: (query)  (optional)
     - parameter xpathUnion: (query)  (optional)

     - returns: RequestBuilder<ComDayCqSearchImplBuilderQueryBuilderImplInfo> 
     */
    public class func comDayCqSearchImplBuilderQueryBuilderImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, excerptProperties: [String]? = nil, cacheMaxEntries: Int32? = nil, cacheEntryLifetime: Int32? = nil, xpathUnion: Bool? = nil) -> RequestBuilder<ComDayCqSearchImplBuilderQueryBuilderImplInfo> {
        let path = "/system/console/configMgr/com.day.cq.search.impl.builder.QueryBuilderImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "excerpt.properties": excerptProperties,
            "cache.max.entries": cacheMaxEntries?.encodeToJSON(),
            "cache.entry.lifetime": cacheEntryLifetime?.encodeToJSON(),
            "xpath.union": xpathUnion
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqSearchImplBuilderQueryBuilderImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter pathBuilderTarget: (query)  (optional)
     - parameter suggestBasepath: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqSearchSuggestImplSuggestionIndexManagerImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, pathBuilderTarget: String? = nil, suggestBasepath: String? = nil, completion: ((data: ComDayCqSearchSuggestImplSuggestionIndexManagerImplInfo?, error: ErrorType?) -> Void)) {
        comDayCqSearchSuggestImplSuggestionIndexManagerImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, pathBuilderTarget: pathBuilderTarget, suggestBasepath: suggestBasepath).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.search.suggest.impl.SuggestionIndexManagerImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "suggest.basepath" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "pathBuilder.target" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter pathBuilderTarget: (query)  (optional)
     - parameter suggestBasepath: (query)  (optional)

     - returns: RequestBuilder<ComDayCqSearchSuggestImplSuggestionIndexManagerImplInfo> 
     */
    public class func comDayCqSearchSuggestImplSuggestionIndexManagerImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, pathBuilderTarget: String? = nil, suggestBasepath: String? = nil) -> RequestBuilder<ComDayCqSearchSuggestImplSuggestionIndexManagerImplInfo> {
        let path = "/system/console/configMgr/com.day.cq.search.suggest.impl.SuggestionIndexManagerImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "pathBuilder.target": pathBuilderTarget,
            "suggest.basepath": suggestBasepath
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqSearchSuggestImplSuggestionIndexManagerImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqSearchpromoteConfighandlerEnabled: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqSearchpromoteImplPublishSearchPromoteConfigHandler(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqSearchpromoteConfighandlerEnabled: Bool? = nil, completion: ((data: ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerInfo?, error: ErrorType?) -> Void)) {
        comDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqSearchpromoteConfighandlerEnabled: cqSearchpromoteConfighandlerEnabled).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.searchpromote.impl.PublishSearchPromoteConfigHandler     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "service_location" : "service_location",
  "bundle_location" : "bundle_location",
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "cq.searchpromote.confighandler.enabled" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqSearchpromoteConfighandlerEnabled: (query)  (optional)

     - returns: RequestBuilder<ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerInfo> 
     */
    public class func comDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqSearchpromoteConfighandlerEnabled: Bool? = nil) -> RequestBuilder<ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerInfo> {
        let path = "/system/console/configMgr/com.day.cq.searchpromote.impl.PublishSearchPromoteConfigHandler"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "cq.searchpromote.confighandler.enabled": cqSearchpromoteConfighandlerEnabled
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqSearchpromoteConfigurationServerUri: (query)  (optional)
     - parameter cqSearchpromoteConfigurationEnvironment: (query)  (optional)
     - parameter connectionTimeout: (query)  (optional)
     - parameter socketTimeout: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqSearchpromoteImplSearchPromoteServiceImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqSearchpromoteConfigurationServerUri: String? = nil, cqSearchpromoteConfigurationEnvironment: String? = nil, connectionTimeout: Int32? = nil, socketTimeout: Int32? = nil, completion: ((data: ComDayCqSearchpromoteImplSearchPromoteServiceImplInfo?, error: ErrorType?) -> Void)) {
        comDayCqSearchpromoteImplSearchPromoteServiceImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqSearchpromoteConfigurationServerUri: cqSearchpromoteConfigurationServerUri, cqSearchpromoteConfigurationEnvironment: cqSearchpromoteConfigurationEnvironment, connectionTimeout: connectionTimeout, socketTimeout: socketTimeout).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.searchpromote.impl.SearchPromoteServiceImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "service_location" : "service_location",
  "bundle_location" : "bundle_location",
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "cq.searchpromote.configuration.environment" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "connection.timeout" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "socket.timeout" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "cq.searchpromote.configuration.server.uri" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqSearchpromoteConfigurationServerUri: (query)  (optional)
     - parameter cqSearchpromoteConfigurationEnvironment: (query)  (optional)
     - parameter connectionTimeout: (query)  (optional)
     - parameter socketTimeout: (query)  (optional)

     - returns: RequestBuilder<ComDayCqSearchpromoteImplSearchPromoteServiceImplInfo> 
     */
    public class func comDayCqSearchpromoteImplSearchPromoteServiceImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqSearchpromoteConfigurationServerUri: String? = nil, cqSearchpromoteConfigurationEnvironment: String? = nil, connectionTimeout: Int32? = nil, socketTimeout: Int32? = nil) -> RequestBuilder<ComDayCqSearchpromoteImplSearchPromoteServiceImplInfo> {
        let path = "/system/console/configMgr/com.day.cq.searchpromote.impl.SearchPromoteServiceImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "cq.searchpromote.configuration.server.uri": cqSearchpromoteConfigurationServerUri,
            "cq.searchpromote.configuration.environment": cqSearchpromoteConfigurationEnvironment,
            "connection.timeout": connectionTimeout?.encodeToJSON(),
            "socket.timeout": socketTimeout?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqSearchpromoteImplSearchPromoteServiceImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqAclsetupRules: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqSecurityACLSetup(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqAclsetupRules: [String]? = nil, completion: ((data: ComDayCqSecurityACLSetupInfo?, error: ErrorType?) -> Void)) {
        comDayCqSecurityACLSetupWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqAclsetupRules: cqAclsetupRules).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.security.ACLSetup     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "service_location" : "service_location",
  "bundle_location" : "bundle_location",
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "cq.aclsetup.rules" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqAclsetupRules: (query)  (optional)

     - returns: RequestBuilder<ComDayCqSecurityACLSetupInfo> 
     */
    public class func comDayCqSecurityACLSetupWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqAclsetupRules: [String]? = nil) -> RequestBuilder<ComDayCqSecurityACLSetupInfo> {
        let path = "/system/console/configMgr/com.day.cq.security.ACLSetup"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "cq.aclsetup.rules": cqAclsetupRules
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqSecurityACLSetupInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter schedulerPeriod: (query)  (optional)
     - parameter schedulerConcurrent: (query)  (optional)
     - parameter path: (query)  (optional)
     - parameter workspace: (query)  (optional)
     - parameter keywordsPath: (query)  (optional)
     - parameter asyncEntries: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqStatisticsImplStatisticsServiceImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, schedulerPeriod: Int32? = nil, schedulerConcurrent: Bool? = nil, path: String? = nil, workspace: String? = nil, keywordsPath: String? = nil, asyncEntries: Bool? = nil, completion: ((data: ComDayCqStatisticsImplStatisticsServiceImplInfo?, error: ErrorType?) -> Void)) {
        comDayCqStatisticsImplStatisticsServiceImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, schedulerPeriod: schedulerPeriod, schedulerConcurrent: schedulerConcurrent, path: path, workspace: workspace, keywordsPath: keywordsPath, asyncEntries: asyncEntries).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.statistics.impl.StatisticsServiceImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "path" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "scheduler.concurrent" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "workspace" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "keywordsPath" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "asyncEntries" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "scheduler.period" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter schedulerPeriod: (query)  (optional)
     - parameter schedulerConcurrent: (query)  (optional)
     - parameter path: (query)  (optional)
     - parameter workspace: (query)  (optional)
     - parameter keywordsPath: (query)  (optional)
     - parameter asyncEntries: (query)  (optional)

     - returns: RequestBuilder<ComDayCqStatisticsImplStatisticsServiceImplInfo> 
     */
    public class func comDayCqStatisticsImplStatisticsServiceImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, schedulerPeriod: Int32? = nil, schedulerConcurrent: Bool? = nil, path: String? = nil, workspace: String? = nil, keywordsPath: String? = nil, asyncEntries: Bool? = nil) -> RequestBuilder<ComDayCqStatisticsImplStatisticsServiceImplInfo> {
        let path = "/system/console/configMgr/com.day.cq.statistics.impl.StatisticsServiceImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "scheduler.period": schedulerPeriod?.encodeToJSON(),
            "scheduler.concurrent": schedulerConcurrent,
            "path": path,
            "workspace": workspace,
            "keywordsPath": keywordsPath,
            "asyncEntries": asyncEntries
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqStatisticsImplStatisticsServiceImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter validationEnabled: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqTaggingImplJcrTagManagerFactoryImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, validationEnabled: Bool? = nil, completion: ((data: ComDayCqTaggingImplJcrTagManagerFactoryImplInfo?, error: ErrorType?) -> Void)) {
        comDayCqTaggingImplJcrTagManagerFactoryImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, validationEnabled: validationEnabled).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.tagging.impl.JcrTagManagerFactoryImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "validation.enabled" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter validationEnabled: (query)  (optional)

     - returns: RequestBuilder<ComDayCqTaggingImplJcrTagManagerFactoryImplInfo> 
     */
    public class func comDayCqTaggingImplJcrTagManagerFactoryImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, validationEnabled: Bool? = nil) -> RequestBuilder<ComDayCqTaggingImplJcrTagManagerFactoryImplInfo> {
        let path = "/system/console/configMgr/com.day.cq.tagging.impl.JcrTagManagerFactoryImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "validation.enabled": validationEnabled
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqTaggingImplJcrTagManagerFactoryImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter ignorePath: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqTaggingImplSearchTagPredicateEvaluator(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, ignorePath: Bool? = nil, completion: ((data: ComDayCqTaggingImplSearchTagPredicateEvaluatorInfo?, error: ErrorType?) -> Void)) {
        comDayCqTaggingImplSearchTagPredicateEvaluatorWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, ignorePath: ignorePath).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.tagging.impl.search.TagPredicateEvaluator     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "ignore_path" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter ignorePath: (query)  (optional)

     - returns: RequestBuilder<ComDayCqTaggingImplSearchTagPredicateEvaluatorInfo> 
     */
    public class func comDayCqTaggingImplSearchTagPredicateEvaluatorWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, ignorePath: Bool? = nil) -> RequestBuilder<ComDayCqTaggingImplSearchTagPredicateEvaluatorInfo> {
        let path = "/system/console/configMgr/com.day.cq.tagging.impl.search.TagPredicateEvaluator"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "ignore_path": ignorePath
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqTaggingImplSearchTagPredicateEvaluatorInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter schedulerExpression: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqTaggingImplTagGarbageCollector(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, schedulerExpression: String? = nil, completion: ((data: ComDayCqTaggingImplTagGarbageCollectorInfo?, error: ErrorType?) -> Void)) {
        comDayCqTaggingImplTagGarbageCollectorWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, schedulerExpression: schedulerExpression).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.tagging.impl.TagGarbageCollector     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "scheduler.expression" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter schedulerExpression: (query)  (optional)

     - returns: RequestBuilder<ComDayCqTaggingImplTagGarbageCollectorInfo> 
     */
    public class func comDayCqTaggingImplTagGarbageCollectorWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, schedulerExpression: String? = nil) -> RequestBuilder<ComDayCqTaggingImplTagGarbageCollectorInfo> {
        let path = "/system/console/configMgr/com.day.cq.tagging.impl.TagGarbageCollector"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "scheduler.expression": schedulerExpression
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqTaggingImplTagGarbageCollectorInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqPagesupdatehandlerImageresourcetypes: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqWcmContentsyncImplHandlerPagesUpdateHandler(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqPagesupdatehandlerImageresourcetypes: [String]? = nil, completion: ((data: ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerInfo?, error: ErrorType?) -> Void)) {
        comDayCqWcmContentsyncImplHandlerPagesUpdateHandlerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqPagesupdatehandlerImageresourcetypes: cqPagesupdatehandlerImageresourcetypes).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.contentsync.impl.handler.PagesUpdateHandler     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "cq.pagesupdatehandler.imageresourcetypes" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqPagesupdatehandlerImageresourcetypes: (query)  (optional)

     - returns: RequestBuilder<ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerInfo> 
     */
    public class func comDayCqWcmContentsyncImplHandlerPagesUpdateHandlerWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqPagesupdatehandlerImageresourcetypes: [String]? = nil) -> RequestBuilder<ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.contentsync.impl.handler.PagesUpdateHandler"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "cq.pagesupdatehandler.imageresourcetypes": cqPagesupdatehandlerImageresourcetypes
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqContentsyncPathrewritertransformerMappingLinks: (query)  (optional)
     - parameter cqContentsyncPathrewritertransformerMappingClientlibs: (query)  (optional)
     - parameter cqContentsyncPathrewritertransformerMappingImages: (query)  (optional)
     - parameter cqContentsyncPathrewritertransformerAttributePattern: (query)  (optional)
     - parameter cqContentsyncPathrewritertransformerClientlibraryPattern: (query)  (optional)
     - parameter cqContentsyncPathrewritertransformerClientlibraryReplace: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactor(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqContentsyncPathrewritertransformerMappingLinks: [String]? = nil, cqContentsyncPathrewritertransformerMappingClientlibs: [String]? = nil, cqContentsyncPathrewritertransformerMappingImages: [String]? = nil, cqContentsyncPathrewritertransformerAttributePattern: String? = nil, cqContentsyncPathrewritertransformerClientlibraryPattern: String? = nil, cqContentsyncPathrewritertransformerClientlibraryReplace: String? = nil, completion: ((data: ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorInfo?, error: ErrorType?) -> Void)) {
        comDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqContentsyncPathrewritertransformerMappingLinks: cqContentsyncPathrewritertransformerMappingLinks, cqContentsyncPathrewritertransformerMappingClientlibs: cqContentsyncPathrewritertransformerMappingClientlibs, cqContentsyncPathrewritertransformerMappingImages: cqContentsyncPathrewritertransformerMappingImages, cqContentsyncPathrewritertransformerAttributePattern: cqContentsyncPathrewritertransformerAttributePattern, cqContentsyncPathrewritertransformerClientlibraryPattern: cqContentsyncPathrewritertransformerClientlibraryPattern, cqContentsyncPathrewritertransformerClientlibraryReplace: cqContentsyncPathrewritertransformerClientlibraryReplace).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.contentsync.impl.rewriter.PathRewriterTransformerFactory     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "cq.contentsync.pathrewritertransformer.mapping.links" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "cq.contentsync.pathrewritertransformer.clientlibrary.pattern" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "cq.contentsync.pathrewritertransformer.clientlibrary.replace" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "cq.contentsync.pathrewritertransformer.mapping.images" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "cq.contentsync.pathrewritertransformer.attribute.pattern" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "cq.contentsync.pathrewritertransformer.mapping.clientlibs" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqContentsyncPathrewritertransformerMappingLinks: (query)  (optional)
     - parameter cqContentsyncPathrewritertransformerMappingClientlibs: (query)  (optional)
     - parameter cqContentsyncPathrewritertransformerMappingImages: (query)  (optional)
     - parameter cqContentsyncPathrewritertransformerAttributePattern: (query)  (optional)
     - parameter cqContentsyncPathrewritertransformerClientlibraryPattern: (query)  (optional)
     - parameter cqContentsyncPathrewritertransformerClientlibraryReplace: (query)  (optional)

     - returns: RequestBuilder<ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorInfo> 
     */
    public class func comDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqContentsyncPathrewritertransformerMappingLinks: [String]? = nil, cqContentsyncPathrewritertransformerMappingClientlibs: [String]? = nil, cqContentsyncPathrewritertransformerMappingImages: [String]? = nil, cqContentsyncPathrewritertransformerAttributePattern: String? = nil, cqContentsyncPathrewritertransformerClientlibraryPattern: String? = nil, cqContentsyncPathrewritertransformerClientlibraryReplace: String? = nil) -> RequestBuilder<ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.contentsync.impl.rewriter.PathRewriterTransformerFactory"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "cq.contentsync.pathrewritertransformer.mapping.links": cqContentsyncPathrewritertransformerMappingLinks,
            "cq.contentsync.pathrewritertransformer.mapping.clientlibs": cqContentsyncPathrewritertransformerMappingClientlibs,
            "cq.contentsync.pathrewritertransformer.mapping.images": cqContentsyncPathrewritertransformerMappingImages,
            "cq.contentsync.pathrewritertransformer.attribute.pattern": cqContentsyncPathrewritertransformerAttributePattern,
            "cq.contentsync.pathrewritertransformer.clientlibrary.pattern": cqContentsyncPathrewritertransformerClientlibraryPattern,
            "cq.contentsync.pathrewritertransformer.clientlibrary.replace": cqContentsyncPathrewritertransformerClientlibraryReplace
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter authoringUIModeServiceDefault: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqWcmCoreImplAuthoringUIModeServiceImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, authoringUIModeServiceDefault: String? = nil, completion: ((data: ComDayCqWcmCoreImplAuthoringUIModeServiceImplInfo?, error: ErrorType?) -> Void)) {
        comDayCqWcmCoreImplAuthoringUIModeServiceImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, authoringUIModeServiceDefault: authoringUIModeServiceDefault).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.core.impl.AuthoringUIModeServiceImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "service_location" : "service_location",
  "bundle_location" : "bundle_location",
  "description" : "description",
  "pid" : "pid",
  "additionalProperties" : "additionalProperties",
  "title" : "title",
  "properties" : {
    "authoringUIModeService.default" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter authoringUIModeServiceDefault: (query)  (optional)

     - returns: RequestBuilder<ComDayCqWcmCoreImplAuthoringUIModeServiceImplInfo> 
     */
    public class func comDayCqWcmCoreImplAuthoringUIModeServiceImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, authoringUIModeServiceDefault: String? = nil) -> RequestBuilder<ComDayCqWcmCoreImplAuthoringUIModeServiceImplInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.core.impl.AuthoringUIModeServiceImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "authoringUIModeService.default": authoringUIModeServiceDefault
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqWcmCoreImplAuthoringUIModeServiceImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter wcmcommandservletDeleteWhitelist: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqWcmCoreImplCommandsWCMCommandServlet(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, wcmcommandservletDeleteWhitelist: [String]? = nil, completion: ((data: ComDayCqWcmCoreImplCommandsWCMCommandServletInfo?, error: ErrorType?) -> Void)) {
        comDayCqWcmCoreImplCommandsWCMCommandServletWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, wcmcommandservletDeleteWhitelist: wcmcommandservletDeleteWhitelist).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.core.impl.commands.WCMCommandServlet     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "wcmcommandservlet.delete_whitelist" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter wcmcommandservletDeleteWhitelist: (query)  (optional)

     - returns: RequestBuilder<ComDayCqWcmCoreImplCommandsWCMCommandServletInfo> 
     */
    public class func comDayCqWcmCoreImplCommandsWCMCommandServletWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, wcmcommandservletDeleteWhitelist: [String]? = nil) -> RequestBuilder<ComDayCqWcmCoreImplCommandsWCMCommandServletInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.core.impl.commands.WCMCommandServlet"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "wcmcommandservlet.delete_whitelist": wcmcommandservletDeleteWhitelist
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqWcmCoreImplCommandsWCMCommandServletInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter dimDefaultMode: (query)  (optional)
     - parameter dimAppcacheEnabled: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, dimDefaultMode: String? = nil, dimAppcacheEnabled: Bool? = nil, completion: ((data: ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplInfo?, error: ErrorType?) -> Void)) {
        comDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, dimDefaultMode: dimDefaultMode, dimAppcacheEnabled: dimAppcacheEnabled).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.core.impl.devicedetection.DeviceIdentificationModeImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "dim.appcache.enabled" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "dim.default.mode" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : {
        "values" : "",
        "labels" : ""
      },
      "value" : ""
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter dimDefaultMode: (query)  (optional)
     - parameter dimAppcacheEnabled: (query)  (optional)

     - returns: RequestBuilder<ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplInfo> 
     */
    public class func comDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, dimDefaultMode: String? = nil, dimAppcacheEnabled: Bool? = nil) -> RequestBuilder<ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.core.impl.devicedetection.DeviceIdentificationModeImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "dim.default.mode": dimDefaultMode,
            "dim.appcache.enabled": dimAppcacheEnabled
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter configured: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqWcmCoreImplEventPageEventAuditListener(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, configured: String? = nil, completion: ((data: ComDayCqWcmCoreImplEventPageEventAuditListenerInfo?, error: ErrorType?) -> Void)) {
        comDayCqWcmCoreImplEventPageEventAuditListenerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, configured: configured).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.core.impl.event.PageEventAuditListener     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "service_location" : "service_location",
  "bundle_location" : "bundle_location",
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "configured" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter configured: (query)  (optional)

     - returns: RequestBuilder<ComDayCqWcmCoreImplEventPageEventAuditListenerInfo> 
     */
    public class func comDayCqWcmCoreImplEventPageEventAuditListenerWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, configured: String? = nil) -> RequestBuilder<ComDayCqWcmCoreImplEventPageEventAuditListenerInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.core.impl.event.PageEventAuditListener"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "configured": configured
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqWcmCoreImplEventPageEventAuditListenerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter paths: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqWcmCoreImplEventPagePostProcessor(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, paths: [String]? = nil, completion: ((data: ComDayCqWcmCoreImplEventPagePostProcessorInfo?, error: ErrorType?) -> Void)) {
        comDayCqWcmCoreImplEventPagePostProcessorWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, paths: paths).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.core.impl.event.PagePostProcessor     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "paths" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter paths: (query)  (optional)

     - returns: RequestBuilder<ComDayCqWcmCoreImplEventPagePostProcessorInfo> 
     */
    public class func comDayCqWcmCoreImplEventPagePostProcessorWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, paths: [String]? = nil) -> RequestBuilder<ComDayCqWcmCoreImplEventPagePostProcessorInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.core.impl.event.PagePostProcessor"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "paths": paths
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqWcmCoreImplEventPagePostProcessorInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter paths: (query)  (optional)
     - parameter excludedPaths: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqWcmCoreImplEventRepositoryChangeEventListener(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, paths: [String]? = nil, excludedPaths: [String]? = nil, completion: ((data: ComDayCqWcmCoreImplEventRepositoryChangeEventListenerInfo?, error: ErrorType?) -> Void)) {
        comDayCqWcmCoreImplEventRepositoryChangeEventListenerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, paths: paths, excludedPaths: excludedPaths).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.core.impl.event.RepositoryChangeEventListener     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "paths" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "excludedPaths" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter paths: (query)  (optional)
     - parameter excludedPaths: (query)  (optional)

     - returns: RequestBuilder<ComDayCqWcmCoreImplEventRepositoryChangeEventListenerInfo> 
     */
    public class func comDayCqWcmCoreImplEventRepositoryChangeEventListenerWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, paths: [String]? = nil, excludedPaths: [String]? = nil) -> RequestBuilder<ComDayCqWcmCoreImplEventRepositoryChangeEventListenerInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.core.impl.event.RepositoryChangeEventListener"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "paths": paths,
            "excludedPaths": excludedPaths
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqWcmCoreImplEventRepositoryChangeEventListenerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter paths: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqWcmCoreImplEventTemplatePostProcessor(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, paths: String? = nil, completion: ((data: ComDayCqWcmCoreImplEventTemplatePostProcessorInfo?, error: ErrorType?) -> Void)) {
        comDayCqWcmCoreImplEventTemplatePostProcessorWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, paths: paths).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.core.impl.event.TemplatePostProcessor     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "paths" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter paths: (query)  (optional)

     - returns: RequestBuilder<ComDayCqWcmCoreImplEventTemplatePostProcessorInfo> 
     */
    public class func comDayCqWcmCoreImplEventTemplatePostProcessorWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, paths: String? = nil) -> RequestBuilder<ComDayCqWcmCoreImplEventTemplatePostProcessorInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.core.impl.event.TemplatePostProcessor"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "paths": paths
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqWcmCoreImplEventTemplatePostProcessorInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter langmgrListPath: (query)  (optional)
     - parameter langmgrCountryDefault: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqWcmCoreImplLanguageManagerImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, langmgrListPath: String? = nil, langmgrCountryDefault: [String]? = nil, completion: ((data: ComDayCqWcmCoreImplLanguageManagerImplInfo?, error: ErrorType?) -> Void)) {
        comDayCqWcmCoreImplLanguageManagerImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, langmgrListPath: langmgrListPath, langmgrCountryDefault: langmgrCountryDefault).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.core.impl.LanguageManagerImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "langmgr.list.path" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "langmgr.country.default" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter langmgrListPath: (query)  (optional)
     - parameter langmgrCountryDefault: (query)  (optional)

     - returns: RequestBuilder<ComDayCqWcmCoreImplLanguageManagerImplInfo> 
     */
    public class func comDayCqWcmCoreImplLanguageManagerImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, langmgrListPath: String? = nil, langmgrCountryDefault: [String]? = nil) -> RequestBuilder<ComDayCqWcmCoreImplLanguageManagerImplInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.core.impl.LanguageManagerImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "langmgr.list.path": langmgrListPath,
            "langmgr.country.default": langmgrCountryDefault
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqWcmCoreImplLanguageManagerImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter linkExpiredPrefix: (query)  (optional)
     - parameter linkExpiredRemove: (query)  (optional)
     - parameter linkExpiredSuffix: (query)  (optional)
     - parameter linkInvalidPrefix: (query)  (optional)
     - parameter linkInvalidRemove: (query)  (optional)
     - parameter linkInvalidSuffix: (query)  (optional)
     - parameter linkPredatedPrefix: (query)  (optional)
     - parameter linkPredatedRemove: (query)  (optional)
     - parameter linkPredatedSuffix: (query)  (optional)
     - parameter linkWcmmodes: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqWcmCoreImplLinkCheckerConfigurationFactoryImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, linkExpiredPrefix: String? = nil, linkExpiredRemove: Bool? = nil, linkExpiredSuffix: String? = nil, linkInvalidPrefix: String? = nil, linkInvalidRemove: Bool? = nil, linkInvalidSuffix: String? = nil, linkPredatedPrefix: String? = nil, linkPredatedRemove: Bool? = nil, linkPredatedSuffix: String? = nil, linkWcmmodes: [String]? = nil, completion: ((data: ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplInfo?, error: ErrorType?) -> Void)) {
        comDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, linkExpiredPrefix: linkExpiredPrefix, linkExpiredRemove: linkExpiredRemove, linkExpiredSuffix: linkExpiredSuffix, linkInvalidPrefix: linkInvalidPrefix, linkInvalidRemove: linkInvalidRemove, linkInvalidSuffix: linkInvalidSuffix, linkPredatedPrefix: linkPredatedPrefix, linkPredatedRemove: linkPredatedRemove, linkPredatedSuffix: linkPredatedSuffix, linkWcmmodes: linkWcmmodes).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.core.impl.LinkCheckerConfigurationFactoryImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "link.invalid.prefix" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "link.predated.prefix" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "link.expired.prefix" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "link.predated.remove" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "link.invalid.remove" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "link.invalid.suffix" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "link.expired.remove" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "link.wcmmodes" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "link.expired.suffix" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "link.predated.suffix" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter linkExpiredPrefix: (query)  (optional)
     - parameter linkExpiredRemove: (query)  (optional)
     - parameter linkExpiredSuffix: (query)  (optional)
     - parameter linkInvalidPrefix: (query)  (optional)
     - parameter linkInvalidRemove: (query)  (optional)
     - parameter linkInvalidSuffix: (query)  (optional)
     - parameter linkPredatedPrefix: (query)  (optional)
     - parameter linkPredatedRemove: (query)  (optional)
     - parameter linkPredatedSuffix: (query)  (optional)
     - parameter linkWcmmodes: (query)  (optional)

     - returns: RequestBuilder<ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplInfo> 
     */
    public class func comDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, linkExpiredPrefix: String? = nil, linkExpiredRemove: Bool? = nil, linkExpiredSuffix: String? = nil, linkInvalidPrefix: String? = nil, linkInvalidRemove: Bool? = nil, linkInvalidSuffix: String? = nil, linkPredatedPrefix: String? = nil, linkPredatedRemove: Bool? = nil, linkPredatedSuffix: String? = nil, linkWcmmodes: [String]? = nil) -> RequestBuilder<ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.core.impl.LinkCheckerConfigurationFactoryImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "link.expired.prefix": linkExpiredPrefix,
            "link.expired.remove": linkExpiredRemove,
            "link.expired.suffix": linkExpiredSuffix,
            "link.invalid.prefix": linkInvalidPrefix,
            "link.invalid.remove": linkInvalidRemove,
            "link.invalid.suffix": linkInvalidSuffix,
            "link.predated.prefix": linkPredatedPrefix,
            "link.predated.remove": linkPredatedRemove,
            "link.predated.suffix": linkPredatedSuffix,
            "link.wcmmodes": linkWcmmodes
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter pageInfoProviderPropertyRegexDefault: (query)  (optional)
     - parameter pageInfoProviderPropertyName: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqWcmCoreImplPagePageInfoAggregatorImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, pageInfoProviderPropertyRegexDefault: String? = nil, pageInfoProviderPropertyName: String? = nil, completion: ((data: ComDayCqWcmCoreImplPagePageInfoAggregatorImplInfo?, error: ErrorType?) -> Void)) {
        comDayCqWcmCoreImplPagePageInfoAggregatorImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, pageInfoProviderPropertyRegexDefault: pageInfoProviderPropertyRegexDefault, pageInfoProviderPropertyName: pageInfoProviderPropertyName).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.core.impl.page.PageInfoAggregatorImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "page.info.provider.property.regex.default" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "page.info.provider.property.name" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter pageInfoProviderPropertyRegexDefault: (query)  (optional)
     - parameter pageInfoProviderPropertyName: (query)  (optional)

     - returns: RequestBuilder<ComDayCqWcmCoreImplPagePageInfoAggregatorImplInfo> 
     */
    public class func comDayCqWcmCoreImplPagePageInfoAggregatorImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, pageInfoProviderPropertyRegexDefault: String? = nil, pageInfoProviderPropertyName: String? = nil) -> RequestBuilder<ComDayCqWcmCoreImplPagePageInfoAggregatorImplInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.core.impl.page.PageInfoAggregatorImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "page.info.provider.property.regex.default": pageInfoProviderPropertyRegexDefault,
            "page.info.provider.property.name": pageInfoProviderPropertyName
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqWcmCoreImplPagePageInfoAggregatorImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter illegalCharMapping: (query)  (optional)
     - parameter pageSubTreeActivationCheck: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqWcmCoreImplPagePageManagerFactoryImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, illegalCharMapping: String? = nil, pageSubTreeActivationCheck: Bool? = nil, completion: ((data: ComDayCqWcmCoreImplPagePageManagerFactoryImplInfo?, error: ErrorType?) -> Void)) {
        comDayCqWcmCoreImplPagePageManagerFactoryImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, illegalCharMapping: illegalCharMapping, pageSubTreeActivationCheck: pageSubTreeActivationCheck).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.core.impl.page.PageManagerFactoryImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "illegalCharMapping" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "pageSubTreeActivationCheck" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter illegalCharMapping: (query)  (optional)
     - parameter pageSubTreeActivationCheck: (query)  (optional)

     - returns: RequestBuilder<ComDayCqWcmCoreImplPagePageManagerFactoryImplInfo> 
     */
    public class func comDayCqWcmCoreImplPagePageManagerFactoryImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, illegalCharMapping: String? = nil, pageSubTreeActivationCheck: Bool? = nil) -> RequestBuilder<ComDayCqWcmCoreImplPagePageManagerFactoryImplInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.core.impl.page.PageManagerFactoryImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "illegalCharMapping": illegalCharMapping,
            "pageSubTreeActivationCheck": pageSubTreeActivationCheck
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqWcmCoreImplPagePageManagerFactoryImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter contentReferenceConfigResourceTypes: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqWcmCoreImplReferencesContentContentReferenceConfig(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, contentReferenceConfigResourceTypes: [String]? = nil, completion: ((data: ComDayCqWcmCoreImplReferencesContentContentReferenceConfigInfo?, error: ErrorType?) -> Void)) {
        comDayCqWcmCoreImplReferencesContentContentReferenceConfigWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, contentReferenceConfigResourceTypes: contentReferenceConfigResourceTypes).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.core.impl.references.content.ContentReferenceConfig     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "contentReferenceConfig.resourceTypes" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter contentReferenceConfigResourceTypes: (query)  (optional)

     - returns: RequestBuilder<ComDayCqWcmCoreImplReferencesContentContentReferenceConfigInfo> 
     */
    public class func comDayCqWcmCoreImplReferencesContentContentReferenceConfigWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, contentReferenceConfigResourceTypes: [String]? = nil) -> RequestBuilder<ComDayCqWcmCoreImplReferencesContentContentReferenceConfigInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.core.impl.references.content.ContentReferenceConfig"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "contentReferenceConfig.resourceTypes": contentReferenceConfigResourceTypes
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqWcmCoreImplReferencesContentContentReferenceConfigInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter damShowexpired: (query)  (optional)
     - parameter damShowhidden: (query)  (optional)
     - parameter tagTitleSearch: (query)  (optional)
     - parameter guessTotal: (query)  (optional)
     - parameter damExpiryProperty: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqWcmCoreImplServletsContentfinderAssetViewHandler(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, damShowexpired: Bool? = nil, damShowhidden: Bool? = nil, tagTitleSearch: Bool? = nil, guessTotal: String? = nil, damExpiryProperty: String? = nil, completion: ((data: ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerInfo?, error: ErrorType?) -> Void)) {
        comDayCqWcmCoreImplServletsContentfinderAssetViewHandlerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, damShowexpired: damShowexpired, damShowhidden: damShowhidden, tagTitleSearch: tagTitleSearch, guessTotal: guessTotal, damExpiryProperty: damExpiryProperty).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.core.impl.servlets.contentfinder.AssetViewHandler     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "dam.showhidden" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "tagTitleSearch" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "guessTotal" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "dam.expiryProperty" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "dam.showexpired" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter damShowexpired: (query)  (optional)
     - parameter damShowhidden: (query)  (optional)
     - parameter tagTitleSearch: (query)  (optional)
     - parameter guessTotal: (query)  (optional)
     - parameter damExpiryProperty: (query)  (optional)

     - returns: RequestBuilder<ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerInfo> 
     */
    public class func comDayCqWcmCoreImplServletsContentfinderAssetViewHandlerWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, damShowexpired: Bool? = nil, damShowhidden: Bool? = nil, tagTitleSearch: Bool? = nil, guessTotal: String? = nil, damExpiryProperty: String? = nil) -> RequestBuilder<ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.contentfinder.AssetViewHandler"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "dam.showexpired": damShowexpired,
            "dam.showhidden": damShowhidden,
            "tagTitleSearch": tagTitleSearch,
            "guessTotal": guessTotal,
            "dam.expiryProperty": damExpiryProperty
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter itemResourceTypes: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqWcmCoreImplServletsContentfinderConnectorConnectorVie(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, itemResourceTypes: [String]? = nil, completion: ((data: ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieInfo?, error: ErrorType?) -> Void)) {
        comDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, itemResourceTypes: itemResourceTypes).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.core.impl.servlets.contentfinder.connector.ConnectorViewHandler     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "item.resource.types" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter itemResourceTypes: (query)  (optional)

     - returns: RequestBuilder<ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieInfo> 
     */
    public class func comDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, itemResourceTypes: [String]? = nil) -> RequestBuilder<ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.contentfinder.connector.ConnectorViewHandler"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "item.resource.types": itemResourceTypes
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter guessTotal: (query)  (optional)
     - parameter tagTitleSearch: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqWcmCoreImplServletsContentfinderPageViewHandler(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, guessTotal: String? = nil, tagTitleSearch: Bool? = nil, completion: ((data: ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerInfo?, error: ErrorType?) -> Void)) {
        comDayCqWcmCoreImplServletsContentfinderPageViewHandlerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, guessTotal: guessTotal, tagTitleSearch: tagTitleSearch).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.core.impl.servlets.contentfinder.PageViewHandler     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "tagTitleSearch" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "guessTotal" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter guessTotal: (query)  (optional)
     - parameter tagTitleSearch: (query)  (optional)

     - returns: RequestBuilder<ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerInfo> 
     */
    public class func comDayCqWcmCoreImplServletsContentfinderPageViewHandlerWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, guessTotal: String? = nil, tagTitleSearch: Bool? = nil) -> RequestBuilder<ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.contentfinder.PageViewHandler"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "guessTotal": guessTotal,
            "tagTitleSearch": tagTitleSearch
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter scope: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqWcmCoreImplServletsFindReplaceServlet(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, scope: [String]? = nil, completion: ((data: ComDayCqWcmCoreImplServletsFindReplaceServletInfo?, error: ErrorType?) -> Void)) {
        comDayCqWcmCoreImplServletsFindReplaceServletWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, scope: scope).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.core.impl.servlets.FindReplaceServlet     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "scope" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter scope: (query)  (optional)

     - returns: RequestBuilder<ComDayCqWcmCoreImplServletsFindReplaceServletInfo> 
     */
    public class func comDayCqWcmCoreImplServletsFindReplaceServletWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, scope: [String]? = nil) -> RequestBuilder<ComDayCqWcmCoreImplServletsFindReplaceServletInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.FindReplaceServlet"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "scope": scope
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqWcmCoreImplServletsFindReplaceServletInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter referencesearchservletMaxReferencesPerPage: (query)  (optional)
     - parameter referencesearchservletMaxPages: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqWcmCoreImplServletsReferenceSearchServlet(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, referencesearchservletMaxReferencesPerPage: Int32? = nil, referencesearchservletMaxPages: Int32? = nil, completion: ((data: ComDayCqWcmCoreImplServletsReferenceSearchServletInfo?, error: ErrorType?) -> Void)) {
        comDayCqWcmCoreImplServletsReferenceSearchServletWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, referencesearchservletMaxReferencesPerPage: referencesearchservletMaxReferencesPerPage, referencesearchservletMaxPages: referencesearchservletMaxPages).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.core.impl.servlets.ReferenceSearchServlet     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "referencesearchservlet.maxPages" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "referencesearchservlet.maxReferencesPerPage" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter referencesearchservletMaxReferencesPerPage: (query)  (optional)
     - parameter referencesearchservletMaxPages: (query)  (optional)

     - returns: RequestBuilder<ComDayCqWcmCoreImplServletsReferenceSearchServletInfo> 
     */
    public class func comDayCqWcmCoreImplServletsReferenceSearchServletWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, referencesearchservletMaxReferencesPerPage: Int32? = nil, referencesearchservletMaxPages: Int32? = nil) -> RequestBuilder<ComDayCqWcmCoreImplServletsReferenceSearchServletInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.ReferenceSearchServlet"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "referencesearchservlet.maxReferencesPerPage": referencesearchservletMaxReferencesPerPage?.encodeToJSON(),
            "referencesearchservlet.maxPages": referencesearchservletMaxPages?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqWcmCoreImplServletsReferenceSearchServletInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter workspace: (query)  (optional)
     - parameter dimensions: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqWcmCoreImplServletsThumbnailServlet(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, workspace: String? = nil, dimensions: [String]? = nil, completion: ((data: ComDayCqWcmCoreImplServletsThumbnailServletInfo?, error: ErrorType?) -> Void)) {
        comDayCqWcmCoreImplServletsThumbnailServletWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, workspace: workspace, dimensions: dimensions).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.core.impl.servlets.ThumbnailServlet     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "workspace" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "dimensions" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter workspace: (query)  (optional)
     - parameter dimensions: (query)  (optional)

     - returns: RequestBuilder<ComDayCqWcmCoreImplServletsThumbnailServletInfo> 
     */
    public class func comDayCqWcmCoreImplServletsThumbnailServletWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, workspace: String? = nil, dimensions: [String]? = nil) -> RequestBuilder<ComDayCqWcmCoreImplServletsThumbnailServletInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.ThumbnailServlet"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "workspace": workspace,
            "dimensions": dimensions
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqWcmCoreImplServletsThumbnailServletInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter nonValidChars: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqWcmCoreImplUtilsDefaultPageNameValidator(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, nonValidChars: String? = nil, completion: ((data: ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorInfo?, error: ErrorType?) -> Void)) {
        comDayCqWcmCoreImplUtilsDefaultPageNameValidatorWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, nonValidChars: nonValidChars).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.core.impl.utils.DefaultPageNameValidator     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "nonValidChars" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter nonValidChars: (query)  (optional)

     - returns: RequestBuilder<ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorInfo> 
     */
    public class func comDayCqWcmCoreImplUtilsDefaultPageNameValidatorWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, nonValidChars: String? = nil) -> RequestBuilder<ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.core.impl.utils.DefaultPageNameValidator"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "nonValidChars": nonValidChars
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter defaultExternalizerDomain: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqWcmCoreImplVariantsPageVariantsProviderImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, defaultExternalizerDomain: String? = nil, completion: ((data: ComDayCqWcmCoreImplVariantsPageVariantsProviderImplInfo?, error: ErrorType?) -> Void)) {
        comDayCqWcmCoreImplVariantsPageVariantsProviderImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, defaultExternalizerDomain: defaultExternalizerDomain).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.core.impl.variants.PageVariantsProviderImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "service_location" : "service_location",
  "bundle_location" : "bundle_location",
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "default.externalizer.domain" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter defaultExternalizerDomain: (query)  (optional)

     - returns: RequestBuilder<ComDayCqWcmCoreImplVariantsPageVariantsProviderImplInfo> 
     */
    public class func comDayCqWcmCoreImplVariantsPageVariantsProviderImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, defaultExternalizerDomain: String? = nil) -> RequestBuilder<ComDayCqWcmCoreImplVariantsPageVariantsProviderImplInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.core.impl.variants.PageVariantsProviderImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "default.externalizer.domain": defaultExternalizerDomain
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqWcmCoreImplVariantsPageVariantsProviderImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter versionmanagerCreateVersionOnActivation: (query)  (optional)
     - parameter versionmanagerPurgingEnabled: (query)  (optional)
     - parameter versionmanagerPurgePaths: (query)  (optional)
     - parameter versionmanagerIvPaths: (query)  (optional)
     - parameter versionmanagerMaxAgeDays: (query)  (optional)
     - parameter versionmanagerMaxNumberVersions: (query)  (optional)
     - parameter versionmanagerMinNumberVersions: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqWcmCoreImplVersionManagerImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, versionmanagerCreateVersionOnActivation: Bool? = nil, versionmanagerPurgingEnabled: Bool? = nil, versionmanagerPurgePaths: [String]? = nil, versionmanagerIvPaths: [String]? = nil, versionmanagerMaxAgeDays: Int32? = nil, versionmanagerMaxNumberVersions: Int32? = nil, versionmanagerMinNumberVersions: Int32? = nil, completion: ((data: ComDayCqWcmCoreImplVersionManagerImplInfo?, error: ErrorType?) -> Void)) {
        comDayCqWcmCoreImplVersionManagerImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, versionmanagerCreateVersionOnActivation: versionmanagerCreateVersionOnActivation, versionmanagerPurgingEnabled: versionmanagerPurgingEnabled, versionmanagerPurgePaths: versionmanagerPurgePaths, versionmanagerIvPaths: versionmanagerIvPaths, versionmanagerMaxAgeDays: versionmanagerMaxAgeDays, versionmanagerMaxNumberVersions: versionmanagerMaxNumberVersions, versionmanagerMinNumberVersions: versionmanagerMinNumberVersions).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.core.impl.VersionManagerImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "versionmanager.createVersionOnActivation" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "versionmanager.minNumberVersions" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "versionmanager.maxAgeDays" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "versionmanager.purgingEnabled" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "versionmanager.ivPaths" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "versionmanager.maxNumberVersions" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "versionmanager.purgePaths" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter versionmanagerCreateVersionOnActivation: (query)  (optional)
     - parameter versionmanagerPurgingEnabled: (query)  (optional)
     - parameter versionmanagerPurgePaths: (query)  (optional)
     - parameter versionmanagerIvPaths: (query)  (optional)
     - parameter versionmanagerMaxAgeDays: (query)  (optional)
     - parameter versionmanagerMaxNumberVersions: (query)  (optional)
     - parameter versionmanagerMinNumberVersions: (query)  (optional)

     - returns: RequestBuilder<ComDayCqWcmCoreImplVersionManagerImplInfo> 
     */
    public class func comDayCqWcmCoreImplVersionManagerImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, versionmanagerCreateVersionOnActivation: Bool? = nil, versionmanagerPurgingEnabled: Bool? = nil, versionmanagerPurgePaths: [String]? = nil, versionmanagerIvPaths: [String]? = nil, versionmanagerMaxAgeDays: Int32? = nil, versionmanagerMaxNumberVersions: Int32? = nil, versionmanagerMinNumberVersions: Int32? = nil) -> RequestBuilder<ComDayCqWcmCoreImplVersionManagerImplInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.core.impl.VersionManagerImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "versionmanager.createVersionOnActivation": versionmanagerCreateVersionOnActivation,
            "versionmanager.purgingEnabled": versionmanagerPurgingEnabled,
            "versionmanager.purgePaths": versionmanagerPurgePaths,
            "versionmanager.ivPaths": versionmanagerIvPaths,
            "versionmanager.maxAgeDays": versionmanagerMaxAgeDays?.encodeToJSON(),
            "versionmanager.maxNumberVersions": versionmanagerMaxNumberVersions?.encodeToJSON(),
            "versionmanager.minNumberVersions": versionmanagerMinNumberVersions?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqWcmCoreImplVersionManagerImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter versionpurgePaths: (query)  (optional)
     - parameter versionpurgeRecursive: (query)  (optional)
     - parameter versionpurgeMaxVersions: (query)  (optional)
     - parameter versionpurgeMinVersions: (query)  (optional)
     - parameter versionpurgeMaxAgeDays: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqWcmCoreImplVersionPurgeTask(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, versionpurgePaths: [String]? = nil, versionpurgeRecursive: Bool? = nil, versionpurgeMaxVersions: Int32? = nil, versionpurgeMinVersions: Int32? = nil, versionpurgeMaxAgeDays: Int32? = nil, completion: ((data: ComDayCqWcmCoreImplVersionPurgeTaskInfo?, error: ErrorType?) -> Void)) {
        comDayCqWcmCoreImplVersionPurgeTaskWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, versionpurgePaths: versionpurgePaths, versionpurgeRecursive: versionpurgeRecursive, versionpurgeMaxVersions: versionpurgeMaxVersions, versionpurgeMinVersions: versionpurgeMinVersions, versionpurgeMaxAgeDays: versionpurgeMaxAgeDays).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.core.impl.VersionPurgeTask     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "versionpurge.paths" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "versionpurge.minVersions" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "versionpurge.maxAgeDays" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "versionpurge.maxVersions" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "versionpurge.recursive" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter versionpurgePaths: (query)  (optional)
     - parameter versionpurgeRecursive: (query)  (optional)
     - parameter versionpurgeMaxVersions: (query)  (optional)
     - parameter versionpurgeMinVersions: (query)  (optional)
     - parameter versionpurgeMaxAgeDays: (query)  (optional)

     - returns: RequestBuilder<ComDayCqWcmCoreImplVersionPurgeTaskInfo> 
     */
    public class func comDayCqWcmCoreImplVersionPurgeTaskWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, versionpurgePaths: [String]? = nil, versionpurgeRecursive: Bool? = nil, versionpurgeMaxVersions: Int32? = nil, versionpurgeMinVersions: Int32? = nil, versionpurgeMaxAgeDays: Int32? = nil) -> RequestBuilder<ComDayCqWcmCoreImplVersionPurgeTaskInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.core.impl.VersionPurgeTask"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "versionpurge.paths": versionpurgePaths,
            "versionpurge.recursive": versionpurgeRecursive,
            "versionpurge.maxVersions": versionpurgeMaxVersions?.encodeToJSON(),
            "versionpurge.minVersions": versionpurgeMinVersions?.encodeToJSON(),
            "versionpurge.maxAgeDays": versionpurgeMaxAgeDays?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqWcmCoreImplVersionPurgeTaskInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter wcmdbgfilterEnabled: (query)  (optional)
     - parameter wcmdbgfilterJspDebug: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqWcmCoreImplWCMDebugFilter(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, wcmdbgfilterEnabled: Bool? = nil, wcmdbgfilterJspDebug: Bool? = nil, completion: ((data: ComDayCqWcmCoreImplWCMDebugFilterInfo?, error: ErrorType?) -> Void)) {
        comDayCqWcmCoreImplWCMDebugFilterWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, wcmdbgfilterEnabled: wcmdbgfilterEnabled, wcmdbgfilterJspDebug: wcmdbgfilterJspDebug).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.core.impl.WCMDebugFilter     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "service_location" : "service_location",
  "bundle_location" : "bundle_location",
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "wcmdbgfilter.jspDebug" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "wcmdbgfilter.enabled" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter wcmdbgfilterEnabled: (query)  (optional)
     - parameter wcmdbgfilterJspDebug: (query)  (optional)

     - returns: RequestBuilder<ComDayCqWcmCoreImplWCMDebugFilterInfo> 
     */
    public class func comDayCqWcmCoreImplWCMDebugFilterWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, wcmdbgfilterEnabled: Bool? = nil, wcmdbgfilterJspDebug: Bool? = nil) -> RequestBuilder<ComDayCqWcmCoreImplWCMDebugFilterInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.core.impl.WCMDebugFilter"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "wcmdbgfilter.enabled": wcmdbgfilterEnabled,
            "wcmdbgfilter.jspDebug": wcmdbgfilterJspDebug
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqWcmCoreImplWCMDebugFilterInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter wcmdevmodefilterEnabled: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqWcmCoreImplWCMDeveloperModeFilter(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, wcmdevmodefilterEnabled: Bool? = nil, completion: ((data: ComDayCqWcmCoreImplWCMDeveloperModeFilterInfo?, error: ErrorType?) -> Void)) {
        comDayCqWcmCoreImplWCMDeveloperModeFilterWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, wcmdevmodefilterEnabled: wcmdevmodefilterEnabled).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.core.impl.WCMDeveloperModeFilter     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "service_location" : "service_location",
  "bundle_location" : "bundle_location",
  "description" : "description",
  "pid" : "pid",
  "additionalProperties" : "additionalProperties",
  "title" : "title",
  "properties" : {
    "wcmdevmodefilter.enabled" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter wcmdevmodefilterEnabled: (query)  (optional)

     - returns: RequestBuilder<ComDayCqWcmCoreImplWCMDeveloperModeFilterInfo> 
     */
    public class func comDayCqWcmCoreImplWCMDeveloperModeFilterWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, wcmdevmodefilterEnabled: Bool? = nil) -> RequestBuilder<ComDayCqWcmCoreImplWCMDeveloperModeFilterInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.core.impl.WCMDeveloperModeFilter"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "wcmdevmodefilter.enabled": wcmdevmodefilterEnabled
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqWcmCoreImplWCMDeveloperModeFilterInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter filterOrder: (query)  (optional)
     - parameter filterScope: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqWcmCoreImplWarpTimeWarpFilter(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, filterOrder: String? = nil, filterScope: String? = nil, completion: ((data: ComDayCqWcmCoreImplWarpTimeWarpFilterInfo?, error: ErrorType?) -> Void)) {
        comDayCqWcmCoreImplWarpTimeWarpFilterWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, filterOrder: filterOrder, filterScope: filterScope).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.core.impl.warp.TimeWarpFilter     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "service_location" : "service_location",
  "bundle_location" : "bundle_location",
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "filter.order" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "filter.scope" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter filterOrder: (query)  (optional)
     - parameter filterScope: (query)  (optional)

     - returns: RequestBuilder<ComDayCqWcmCoreImplWarpTimeWarpFilterInfo> 
     */
    public class func comDayCqWcmCoreImplWarpTimeWarpFilterWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, filterOrder: String? = nil, filterScope: String? = nil) -> RequestBuilder<ComDayCqWcmCoreImplWarpTimeWarpFilterInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.core.impl.warp.TimeWarpFilter"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "filter.order": filterOrder,
            "filter.scope": filterScope
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqWcmCoreImplWarpTimeWarpFilterInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter mvtstatisticsTrackingurl: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqWcmCoreMvtMVTStatisticsImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, mvtstatisticsTrackingurl: String? = nil, completion: ((data: ComDayCqWcmCoreMvtMVTStatisticsImplInfo?, error: ErrorType?) -> Void)) {
        comDayCqWcmCoreMvtMVTStatisticsImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, mvtstatisticsTrackingurl: mvtstatisticsTrackingurl).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.core.mvt.MVTStatisticsImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "service_location" : "service_location",
  "bundle_location" : "bundle_location",
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "mvtstatistics.trackingurl" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter mvtstatisticsTrackingurl: (query)  (optional)

     - returns: RequestBuilder<ComDayCqWcmCoreMvtMVTStatisticsImplInfo> 
     */
    public class func comDayCqWcmCoreMvtMVTStatisticsImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, mvtstatisticsTrackingurl: String? = nil) -> RequestBuilder<ComDayCqWcmCoreMvtMVTStatisticsImplInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.core.mvt.MVTStatisticsImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "mvtstatistics.trackingurl": mvtstatisticsTrackingurl
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqWcmCoreMvtMVTStatisticsImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter pageviewstatisticsTrackingurl: (query)  (optional)
     - parameter pageviewstatisticsTrackingscriptEnabled: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqWcmCoreStatsPageViewStatisticsImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, pageviewstatisticsTrackingurl: String? = nil, pageviewstatisticsTrackingscriptEnabled: String? = nil, completion: ((data: ComDayCqWcmCoreStatsPageViewStatisticsImplInfo?, error: ErrorType?) -> Void)) {
        comDayCqWcmCoreStatsPageViewStatisticsImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, pageviewstatisticsTrackingurl: pageviewstatisticsTrackingurl, pageviewstatisticsTrackingscriptEnabled: pageviewstatisticsTrackingscriptEnabled).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.core.stats.PageViewStatisticsImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "service_location" : "service_location",
  "bundle_location" : "bundle_location",
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "pageviewstatistics.trackingscript.enabled" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "pageviewstatistics.trackingurl" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter pageviewstatisticsTrackingurl: (query)  (optional)
     - parameter pageviewstatisticsTrackingscriptEnabled: (query)  (optional)

     - returns: RequestBuilder<ComDayCqWcmCoreStatsPageViewStatisticsImplInfo> 
     */
    public class func comDayCqWcmCoreStatsPageViewStatisticsImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, pageviewstatisticsTrackingurl: String? = nil, pageviewstatisticsTrackingscriptEnabled: String? = nil) -> RequestBuilder<ComDayCqWcmCoreStatsPageViewStatisticsImplInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.core.stats.PageViewStatisticsImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "pageviewstatistics.trackingurl": pageviewstatisticsTrackingurl,
            "pageviewstatistics.trackingscript.enabled": pageviewstatisticsTrackingscriptEnabled
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqWcmCoreStatsPageViewStatisticsImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter wcmfilterMode: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqWcmCoreWCMRequestFilter(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, wcmfilterMode: String? = nil, completion: ((data: ComDayCqWcmCoreWCMRequestFilterInfo?, error: ErrorType?) -> Void)) {
        comDayCqWcmCoreWCMRequestFilterWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, wcmfilterMode: wcmfilterMode).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.core.WCMRequestFilter     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "service_location" : "service_location",
  "bundle_location" : "bundle_location",
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "wcmfilter.mode" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : {
        "values" : "",
        "labels" : ""
      },
      "value" : ""
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter wcmfilterMode: (query)  (optional)

     - returns: RequestBuilder<ComDayCqWcmCoreWCMRequestFilterInfo> 
     */
    public class func comDayCqWcmCoreWCMRequestFilterWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, wcmfilterMode: String? = nil) -> RequestBuilder<ComDayCqWcmCoreWCMRequestFilterInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.core.WCMRequestFilter"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "wcmfilter.mode": wcmfilterMode
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqWcmCoreWCMRequestFilterInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter extractFilter: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqWcmDesignimporterDesignPackageImporter(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, extractFilter: [String]? = nil, completion: ((data: ComDayCqWcmDesignimporterDesignPackageImporterInfo?, error: ErrorType?) -> Void)) {
        comDayCqWcmDesignimporterDesignPackageImporterWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, extractFilter: extractFilter).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.designimporter.DesignPackageImporter     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "extract.filter" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter extractFilter: (query)  (optional)

     - returns: RequestBuilder<ComDayCqWcmDesignimporterDesignPackageImporterInfo> 
     */
    public class func comDayCqWcmDesignimporterDesignPackageImporterWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, extractFilter: [String]? = nil) -> RequestBuilder<ComDayCqWcmDesignimporterDesignPackageImporterInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.designimporter.DesignPackageImporter"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "extract.filter": extractFilter
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqWcmDesignimporterDesignPackageImporterInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter filepattern: (query)  (optional)
     - parameter buildPageNodes: (query)  (optional)
     - parameter buildClientLibs: (query)  (optional)
     - parameter buildCanvasComponent: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqWcmDesignimporterImplCanvasBuilderImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, filepattern: String? = nil, buildPageNodes: Bool? = nil, buildClientLibs: Bool? = nil, buildCanvasComponent: Bool? = nil, completion: ((data: ComDayCqWcmDesignimporterImplCanvasBuilderImplInfo?, error: ErrorType?) -> Void)) {
        comDayCqWcmDesignimporterImplCanvasBuilderImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, filepattern: filepattern, buildPageNodes: buildPageNodes, buildClientLibs: buildClientLibs, buildCanvasComponent: buildCanvasComponent).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.designimporter.impl.CanvasBuilderImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "filepattern" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "build.page.nodes" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "build.client.libs" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "build.canvas.component" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter filepattern: (query)  (optional)
     - parameter buildPageNodes: (query)  (optional)
     - parameter buildClientLibs: (query)  (optional)
     - parameter buildCanvasComponent: (query)  (optional)

     - returns: RequestBuilder<ComDayCqWcmDesignimporterImplCanvasBuilderImplInfo> 
     */
    public class func comDayCqWcmDesignimporterImplCanvasBuilderImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, filepattern: String? = nil, buildPageNodes: Bool? = nil, buildClientLibs: Bool? = nil, buildCanvasComponent: Bool? = nil) -> RequestBuilder<ComDayCqWcmDesignimporterImplCanvasBuilderImplInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.designimporter.impl.CanvasBuilderImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "filepattern": filepattern,
            "build.page.nodes": buildPageNodes,
            "build.client.libs": buildClientLibs,
            "build.canvas.component": buildCanvasComponent
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqWcmDesignimporterImplCanvasBuilderImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter minThreadPoolSize: (query)  (optional)
     - parameter maxThreadPoolSize: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqWcmDesignimporterImplCanvasPageDeleteHandler(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, minThreadPoolSize: Int32? = nil, maxThreadPoolSize: Int32? = nil, completion: ((data: ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerInfo?, error: ErrorType?) -> Void)) {
        comDayCqWcmDesignimporterImplCanvasPageDeleteHandlerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, minThreadPoolSize: minThreadPoolSize, maxThreadPoolSize: maxThreadPoolSize).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.designimporter.impl.CanvasPageDeleteHandler     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "minThreadPoolSize" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "maxThreadPoolSize" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter minThreadPoolSize: (query)  (optional)
     - parameter maxThreadPoolSize: (query)  (optional)

     - returns: RequestBuilder<ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerInfo> 
     */
    public class func comDayCqWcmDesignimporterImplCanvasPageDeleteHandlerWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, minThreadPoolSize: Int32? = nil, maxThreadPoolSize: Int32? = nil) -> RequestBuilder<ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.designimporter.impl.CanvasPageDeleteHandler"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "minThreadPoolSize": minThreadPoolSize?.encodeToJSON(),
            "maxThreadPoolSize": maxThreadPoolSize?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter searchPattern: (query)  (optional)
     - parameter replacePattern: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqWcmDesignimporterImplEntryPreprocessorImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, searchPattern: String? = nil, replacePattern: String? = nil, completion: ((data: ComDayCqWcmDesignimporterImplEntryPreprocessorImplInfo?, error: ErrorType?) -> Void)) {
        comDayCqWcmDesignimporterImplEntryPreprocessorImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, searchPattern: searchPattern, replacePattern: replacePattern).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.designimporter.impl.EntryPreprocessorImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "replace.pattern" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "search.pattern" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter searchPattern: (query)  (optional)
     - parameter replacePattern: (query)  (optional)

     - returns: RequestBuilder<ComDayCqWcmDesignimporterImplEntryPreprocessorImplInfo> 
     */
    public class func comDayCqWcmDesignimporterImplEntryPreprocessorImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, searchPattern: String? = nil, replacePattern: String? = nil) -> RequestBuilder<ComDayCqWcmDesignimporterImplEntryPreprocessorImplInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.designimporter.impl.EntryPreprocessorImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "search.pattern": searchPattern,
            "replace.pattern": replacePattern
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqWcmDesignimporterImplEntryPreprocessorImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter filepattern: (query)  (optional)
     - parameter deviceGroups: (query)  (optional)
     - parameter buildPageNodes: (query)  (optional)
     - parameter buildClientLibs: (query)  (optional)
     - parameter buildCanvasComponent: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqWcmDesignimporterImplMobileCanvasBuilderImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, filepattern: String? = nil, deviceGroups: [String]? = nil, buildPageNodes: Bool? = nil, buildClientLibs: Bool? = nil, buildCanvasComponent: Bool? = nil, completion: ((data: ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplInfo?, error: ErrorType?) -> Void)) {
        comDayCqWcmDesignimporterImplMobileCanvasBuilderImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, filepattern: filepattern, deviceGroups: deviceGroups, buildPageNodes: buildPageNodes, buildClientLibs: buildClientLibs, buildCanvasComponent: buildCanvasComponent).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.designimporter.impl.MobileCanvasBuilderImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "device.groups" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "filepattern" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "build.page.nodes" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "build.client.libs" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "build.canvas.component" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter filepattern: (query)  (optional)
     - parameter deviceGroups: (query)  (optional)
     - parameter buildPageNodes: (query)  (optional)
     - parameter buildClientLibs: (query)  (optional)
     - parameter buildCanvasComponent: (query)  (optional)

     - returns: RequestBuilder<ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplInfo> 
     */
    public class func comDayCqWcmDesignimporterImplMobileCanvasBuilderImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, filepattern: String? = nil, deviceGroups: [String]? = nil, buildPageNodes: Bool? = nil, buildClientLibs: Bool? = nil, buildCanvasComponent: Bool? = nil) -> RequestBuilder<ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.designimporter.impl.MobileCanvasBuilderImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "filepattern": filepattern,
            "device.groups": deviceGroups,
            "build.page.nodes": buildPageNodes,
            "build.client.libs": buildClientLibs,
            "build.canvas.component": buildCanvasComponent
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter tagpattern: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqWcmDesignimporterParserTaghandlersFactoryCanvasCompone(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int32? = nil, tagpattern: String? = nil, completion: ((data: ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeInfo?, error: ErrorType?) -> Void)) {
        comDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, serviceRanking: serviceRanking, tagpattern: tagpattern).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.CanvasComponentTagHandlerFactory     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "tagpattern" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "service.ranking" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter tagpattern: (query)  (optional)

     - returns: RequestBuilder<ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeInfo> 
     */
    public class func comDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int32? = nil, tagpattern: String? = nil) -> RequestBuilder<ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.CanvasComponentTagHandlerFactory"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "service.ranking": serviceRanking?.encodeToJSON(),
            "tagpattern": tagpattern
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter tagpattern: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultCompon(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int32? = nil, tagpattern: String? = nil, completion: ((data: ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponInfo?, error: ErrorType?) -> Void)) {
        comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, serviceRanking: serviceRanking, tagpattern: tagpattern).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.DefaultComponentTagHandlerFactory     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "tagpattern" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "service.ranking" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter tagpattern: (query)  (optional)

     - returns: RequestBuilder<ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponInfo> 
     */
    public class func comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int32? = nil, tagpattern: String? = nil) -> RequestBuilder<ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.DefaultComponentTagHandlerFactory"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "service.ranking": serviceRanking?.encodeToJSON(),
            "tagpattern": tagpattern
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter tagpattern: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHan(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int32? = nil, tagpattern: String? = nil, completion: ((data: ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanInfo?, error: ErrorType?) -> Void)) {
        comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, serviceRanking: serviceRanking, tagpattern: tagpattern).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.DefaultTagHandlerFactory     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "tagpattern" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "service.ranking" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter tagpattern: (query)  (optional)

     - returns: RequestBuilder<ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanInfo> 
     */
    public class func comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int32? = nil, tagpattern: String? = nil) -> RequestBuilder<ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.DefaultTagHandlerFactory"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "service.ranking": serviceRanking?.encodeToJSON(),
            "tagpattern": tagpattern
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter tagpattern: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandle(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int32? = nil, tagpattern: String? = nil, completion: ((data: ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleInfo?, error: ErrorType?) -> Void)) {
        comDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, serviceRanking: serviceRanking, tagpattern: tagpattern).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.HeadTagHandlerFactory     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "tagpattern" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "service.ranking" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter tagpattern: (query)  (optional)

     - returns: RequestBuilder<ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleInfo> 
     */
    public class func comDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int32? = nil, tagpattern: String? = nil) -> RequestBuilder<ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.HeadTagHandlerFactory"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "service.ranking": serviceRanking?.encodeToJSON(),
            "tagpattern": tagpattern
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter tagpattern: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHand(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int32? = nil, tagpattern: String? = nil, completion: ((data: ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandInfo?, error: ErrorType?) -> Void)) {
        comDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, serviceRanking: serviceRanking, tagpattern: tagpattern).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.IFrameTagHandlerFactory     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "tagpattern" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "service.ranking" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter tagpattern: (query)  (optional)

     - returns: RequestBuilder<ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandInfo> 
     */
    public class func comDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int32? = nil, tagpattern: String? = nil) -> RequestBuilder<ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.IFrameTagHandlerFactory"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "service.ranking": serviceRanking?.encodeToJSON(),
            "tagpattern": tagpattern
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter tagpattern: (query)  (optional)
     - parameter componentResourceType: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqWcmDesignimporterParserTaghandlersFactoryImageComponen(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int32? = nil, tagpattern: String? = nil, componentResourceType: String? = nil, completion: ((data: ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenInfo?, error: ErrorType?) -> Void)) {
        comDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, serviceRanking: serviceRanking, tagpattern: tagpattern, componentResourceType: componentResourceType).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.ImageComponentTagHandlerFactory     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "tagpattern" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "component.resourceType" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "service.ranking" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter tagpattern: (query)  (optional)
     - parameter componentResourceType: (query)  (optional)

     - returns: RequestBuilder<ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenInfo> 
     */
    public class func comDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int32? = nil, tagpattern: String? = nil, componentResourceType: String? = nil) -> RequestBuilder<ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.ImageComponentTagHandlerFactory"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "service.ranking": serviceRanking?.encodeToJSON(),
            "tagpattern": tagpattern,
            "component.resourceType": componentResourceType
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter tagpattern: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandler(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int32? = nil, tagpattern: String? = nil, completion: ((data: ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerInfo?, error: ErrorType?) -> Void)) {
        comDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, serviceRanking: serviceRanking, tagpattern: tagpattern).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.ImgTagHandlerFactory     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "tagpattern" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "service.ranking" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter tagpattern: (query)  (optional)

     - returns: RequestBuilder<ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerInfo> 
     */
    public class func comDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int32? = nil, tagpattern: String? = nil) -> RequestBuilder<ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.ImgTagHandlerFactory"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "service.ranking": serviceRanking?.encodeToJSON(),
            "tagpattern": tagpattern
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter tagpattern: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptT(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int32? = nil, tagpattern: String? = nil, completion: ((data: ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTInfo?, error: ErrorType?) -> Void)) {
        comDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, serviceRanking: serviceRanking, tagpattern: tagpattern).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.InlineScriptTagHandlerFactory     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "tagpattern" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "service.ranking" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter tagpattern: (query)  (optional)

     - returns: RequestBuilder<ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTInfo> 
     */
    public class func comDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int32? = nil, tagpattern: String? = nil) -> RequestBuilder<ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.InlineScriptTagHandlerFactory"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "service.ranking": serviceRanking?.encodeToJSON(),
            "tagpattern": tagpattern
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter tagpattern: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandle(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int32? = nil, tagpattern: String? = nil, completion: ((data: ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleInfo?, error: ErrorType?) -> Void)) {
        comDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, serviceRanking: serviceRanking, tagpattern: tagpattern).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.LinkTagHandlerFactory     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "tagpattern" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "service.ranking" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter tagpattern: (query)  (optional)

     - returns: RequestBuilder<ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleInfo> 
     */
    public class func comDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int32? = nil, tagpattern: String? = nil) -> RequestBuilder<ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.LinkTagHandlerFactory"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "service.ranking": serviceRanking?.encodeToJSON(),
            "tagpattern": tagpattern
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter tagpattern: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandle(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int32? = nil, tagpattern: String? = nil, completion: ((data: ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleInfo?, error: ErrorType?) -> Void)) {
        comDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, serviceRanking: serviceRanking, tagpattern: tagpattern).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.MetaTagHandlerFactory     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "tagpattern" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "service.ranking" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter tagpattern: (query)  (optional)

     - returns: RequestBuilder<ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleInfo> 
     */
    public class func comDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int32? = nil, tagpattern: String? = nil) -> RequestBuilder<ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.MetaTagHandlerFactory"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "service.ranking": serviceRanking?.encodeToJSON(),
            "tagpattern": tagpattern
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter tagpattern: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagH(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int32? = nil, tagpattern: String? = nil, completion: ((data: ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHInfo?, error: ErrorType?) -> Void)) {
        comDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, serviceRanking: serviceRanking, tagpattern: tagpattern).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.NonScriptTagHandlerFactory     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "tagpattern" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "service.ranking" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter tagpattern: (query)  (optional)

     - returns: RequestBuilder<ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHInfo> 
     */
    public class func comDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int32? = nil, tagpattern: String? = nil) -> RequestBuilder<ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.NonScriptTagHandlerFactory"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "service.ranking": serviceRanking?.encodeToJSON(),
            "tagpattern": tagpattern
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter tagpattern: (query)  (optional)
     - parameter componentResourceType: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqWcmDesignimporterParserTaghandlersFactoryParsysCompone(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int32? = nil, tagpattern: String? = nil, componentResourceType: String? = nil, completion: ((data: ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeInfo?, error: ErrorType?) -> Void)) {
        comDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, serviceRanking: serviceRanking, tagpattern: tagpattern, componentResourceType: componentResourceType).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.ParsysComponentTagHandlerFactory     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "tagpattern" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "component.resourceType" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "service.ranking" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter tagpattern: (query)  (optional)
     - parameter componentResourceType: (query)  (optional)

     - returns: RequestBuilder<ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeInfo> 
     */
    public class func comDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int32? = nil, tagpattern: String? = nil, componentResourceType: String? = nil) -> RequestBuilder<ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.ParsysComponentTagHandlerFactory"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "service.ranking": serviceRanking?.encodeToJSON(),
            "tagpattern": tagpattern,
            "component.resourceType": componentResourceType
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter tagpattern: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHand(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int32? = nil, tagpattern: String? = nil, completion: ((data: ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandInfo?, error: ErrorType?) -> Void)) {
        comDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, serviceRanking: serviceRanking, tagpattern: tagpattern).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.ScriptTagHandlerFactory     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "tagpattern" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "service.ranking" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter tagpattern: (query)  (optional)

     - returns: RequestBuilder<ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandInfo> 
     */
    public class func comDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int32? = nil, tagpattern: String? = nil) -> RequestBuilder<ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.ScriptTagHandlerFactory"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "service.ranking": serviceRanking?.encodeToJSON(),
            "tagpattern": tagpattern
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter tagpattern: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int32? = nil, tagpattern: String? = nil, completion: ((data: ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlInfo?, error: ErrorType?) -> Void)) {
        comDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, serviceRanking: serviceRanking, tagpattern: tagpattern).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.StyleTagHandlerFactory     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "tagpattern" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "service.ranking" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter tagpattern: (query)  (optional)

     - returns: RequestBuilder<ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlInfo> 
     */
    public class func comDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int32? = nil, tagpattern: String? = nil) -> RequestBuilder<ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.StyleTagHandlerFactory"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "service.ranking": serviceRanking?.encodeToJSON(),
            "tagpattern": tagpattern
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter tagpattern: (query)  (optional)
     - parameter componentResourceType: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqWcmDesignimporterParserTaghandlersFactoryTextComponent(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int32? = nil, tagpattern: String? = nil, componentResourceType: String? = nil, completion: ((data: ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentInfo?, error: ErrorType?) -> Void)) {
        comDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, serviceRanking: serviceRanking, tagpattern: tagpattern, componentResourceType: componentResourceType).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.TextComponentTagHandlerFactory     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "tagpattern" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "component.resourceType" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "service.ranking" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter tagpattern: (query)  (optional)
     - parameter componentResourceType: (query)  (optional)

     - returns: RequestBuilder<ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentInfo> 
     */
    public class func comDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int32? = nil, tagpattern: String? = nil, componentResourceType: String? = nil) -> RequestBuilder<ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.TextComponentTagHandlerFactory"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "service.ranking": serviceRanking?.encodeToJSON(),
            "tagpattern": tagpattern,
            "component.resourceType": componentResourceType
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter tagpattern: (query)  (optional)
     - parameter componentResourceType: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponen(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int32? = nil, tagpattern: String? = nil, componentResourceType: String? = nil, completion: ((data: ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenInfo?, error: ErrorType?) -> Void)) {
        comDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, serviceRanking: serviceRanking, tagpattern: tagpattern, componentResourceType: componentResourceType).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.TitleComponentTagHandlerFactory     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "tagpattern" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "component.resourceType" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "service.ranking" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter tagpattern: (query)  (optional)
     - parameter componentResourceType: (query)  (optional)

     - returns: RequestBuilder<ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenInfo> 
     */
    public class func comDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int32? = nil, tagpattern: String? = nil, componentResourceType: String? = nil) -> RequestBuilder<ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.TitleComponentTagHandlerFactory"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "service.ranking": serviceRanking?.encodeToJSON(),
            "tagpattern": tagpattern,
            "component.resourceType": componentResourceType
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter tagpattern: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int32? = nil, tagpattern: String? = nil, completion: ((data: ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlInfo?, error: ErrorType?) -> Void)) {
        comDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, serviceRanking: serviceRanking, tagpattern: tagpattern).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.TitleTagHandlerFactory     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "tagpattern" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "service.ranking" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter tagpattern: (query)  (optional)

     - returns: RequestBuilder<ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlInfo> 
     */
    public class func comDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int32? = nil, tagpattern: String? = nil) -> RequestBuilder<ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.TitleTagHandlerFactory"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "service.ranking": serviceRanking?.encodeToJSON(),
            "tagpattern": tagpattern
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceName: (query)  (optional)
     - parameter slingServletResourceTypes: (query)  (optional)
     - parameter slingServletSelectors: (query)  (optional)
     - parameter slingServletMethods: (query)  (optional)
     - parameter formsFormchooserservletAdvansesearchRequire: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqWcmFoundationFormsImplFormChooserServlet(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceName: String? = nil, slingServletResourceTypes: String? = nil, slingServletSelectors: String? = nil, slingServletMethods: [String]? = nil, formsFormchooserservletAdvansesearchRequire: Bool? = nil, completion: ((data: ComDayCqWcmFoundationFormsImplFormChooserServletInfo?, error: ErrorType?) -> Void)) {
        comDayCqWcmFoundationFormsImplFormChooserServletWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, serviceName: serviceName, slingServletResourceTypes: slingServletResourceTypes, slingServletSelectors: slingServletSelectors, slingServletMethods: slingServletMethods, formsFormchooserservletAdvansesearchRequire: formsFormchooserservletAdvansesearchRequire).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.foundation.forms.impl.FormChooserServlet     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "service.name" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "sling.servlet.selectors" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "sling.servlet.resourceTypes" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "sling.servlet.methods" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "forms.formchooserservlet.advansesearch.require" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceName: (query)  (optional)
     - parameter slingServletResourceTypes: (query)  (optional)
     - parameter slingServletSelectors: (query)  (optional)
     - parameter slingServletMethods: (query)  (optional)
     - parameter formsFormchooserservletAdvansesearchRequire: (query)  (optional)

     - returns: RequestBuilder<ComDayCqWcmFoundationFormsImplFormChooserServletInfo> 
     */
    public class func comDayCqWcmFoundationFormsImplFormChooserServletWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceName: String? = nil, slingServletResourceTypes: String? = nil, slingServletSelectors: String? = nil, slingServletMethods: [String]? = nil, formsFormchooserservletAdvansesearchRequire: Bool? = nil) -> RequestBuilder<ComDayCqWcmFoundationFormsImplFormChooserServletInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.foundation.forms.impl.FormChooserServlet"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "service.name": serviceName,
            "sling.servlet.resourceTypes": slingServletResourceTypes,
            "sling.servlet.selectors": slingServletSelectors,
            "sling.servlet.methods": slingServletMethods,
            "forms.formchooserservlet.advansesearch.require": formsFormchooserservletAdvansesearchRequire
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqWcmFoundationFormsImplFormChooserServletInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter formsFormparagraphpostprocessorEnabled: (query)  (optional)
     - parameter formsFormparagraphpostprocessorFormresourcetypes: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqWcmFoundationFormsImplFormParagraphPostProcessor(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, formsFormparagraphpostprocessorEnabled: Bool? = nil, formsFormparagraphpostprocessorFormresourcetypes: [String]? = nil, completion: ((data: ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorInfo?, error: ErrorType?) -> Void)) {
        comDayCqWcmFoundationFormsImplFormParagraphPostProcessorWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, formsFormparagraphpostprocessorEnabled: formsFormparagraphpostprocessorEnabled, formsFormparagraphpostprocessorFormresourcetypes: formsFormparagraphpostprocessorFormresourcetypes).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.foundation.forms.impl.FormParagraphPostProcessor     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "forms.formparagraphpostprocessor.formresourcetypes" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "forms.formparagraphpostprocessor.enabled" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter formsFormparagraphpostprocessorEnabled: (query)  (optional)
     - parameter formsFormparagraphpostprocessorFormresourcetypes: (query)  (optional)

     - returns: RequestBuilder<ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorInfo> 
     */
    public class func comDayCqWcmFoundationFormsImplFormParagraphPostProcessorWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, formsFormparagraphpostprocessorEnabled: Bool? = nil, formsFormparagraphpostprocessorFormresourcetypes: [String]? = nil) -> RequestBuilder<ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.foundation.forms.impl.FormParagraphPostProcessor"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "forms.formparagraphpostprocessor.enabled": formsFormparagraphpostprocessorEnabled,
            "forms.formparagraphpostprocessor.formresourcetypes": formsFormparagraphpostprocessorFormresourcetypes
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter nameWhitelist: (query)  (optional)
     - parameter allowExpressions: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqWcmFoundationFormsImplFormsHandlingServlet(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, nameWhitelist: String? = nil, allowExpressions: Bool? = nil, completion: ((data: ComDayCqWcmFoundationFormsImplFormsHandlingServletInfo?, error: ErrorType?) -> Void)) {
        comDayCqWcmFoundationFormsImplFormsHandlingServletWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, nameWhitelist: nameWhitelist, allowExpressions: allowExpressions).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.foundation.forms.impl.FormsHandlingServlet     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "name.whitelist" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "allow.expressions" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter nameWhitelist: (query)  (optional)
     - parameter allowExpressions: (query)  (optional)

     - returns: RequestBuilder<ComDayCqWcmFoundationFormsImplFormsHandlingServletInfo> 
     */
    public class func comDayCqWcmFoundationFormsImplFormsHandlingServletWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, nameWhitelist: String? = nil, allowExpressions: Bool? = nil) -> RequestBuilder<ComDayCqWcmFoundationFormsImplFormsHandlingServletInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.foundation.forms.impl.FormsHandlingServlet"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "name.whitelist": nameWhitelist,
            "allow.expressions": allowExpressions
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqWcmFoundationFormsImplFormsHandlingServletInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter slingServletResourceTypes: (query)  (optional)
     - parameter slingServletSelectors: (query)  (optional)
     - parameter resourceWhitelist: (query)  (optional)
     - parameter resourceBlacklist: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqWcmFoundationFormsImplMailServlet(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, slingServletResourceTypes: String? = nil, slingServletSelectors: String? = nil, resourceWhitelist: [String]? = nil, resourceBlacklist: String? = nil, completion: ((data: ComDayCqWcmFoundationFormsImplMailServletInfo?, error: ErrorType?) -> Void)) {
        comDayCqWcmFoundationFormsImplMailServletWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, slingServletResourceTypes: slingServletResourceTypes, slingServletSelectors: slingServletSelectors, resourceWhitelist: resourceWhitelist, resourceBlacklist: resourceBlacklist).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.foundation.forms.impl.MailServlet     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "resource.whitelist" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "resource.blacklist" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "sling.servlet.selectors" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "sling.servlet.resourceTypes" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter slingServletResourceTypes: (query)  (optional)
     - parameter slingServletSelectors: (query)  (optional)
     - parameter resourceWhitelist: (query)  (optional)
     - parameter resourceBlacklist: (query)  (optional)

     - returns: RequestBuilder<ComDayCqWcmFoundationFormsImplMailServletInfo> 
     */
    public class func comDayCqWcmFoundationFormsImplMailServletWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, slingServletResourceTypes: String? = nil, slingServletSelectors: String? = nil, resourceWhitelist: [String]? = nil, resourceBlacklist: String? = nil) -> RequestBuilder<ComDayCqWcmFoundationFormsImplMailServletInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.foundation.forms.impl.MailServlet"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "sling.servlet.resourceTypes": slingServletResourceTypes,
            "sling.servlet.selectors": slingServletSelectors,
            "resource.whitelist": resourceWhitelist,
            "resource.blacklist": resourceBlacklist
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqWcmFoundationFormsImplMailServletInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter adaptSupportedWidths: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqWcmFoundationImplAdaptiveImageComponentServlet(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, adaptSupportedWidths: [String]? = nil, completion: ((data: ComDayCqWcmFoundationImplAdaptiveImageComponentServletInfo?, error: ErrorType?) -> Void)) {
        comDayCqWcmFoundationImplAdaptiveImageComponentServletWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, adaptSupportedWidths: adaptSupportedWidths).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.foundation.impl.AdaptiveImageComponentServlet     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "adapt.supported.widths" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter adaptSupportedWidths: (query)  (optional)

     - returns: RequestBuilder<ComDayCqWcmFoundationImplAdaptiveImageComponentServletInfo> 
     */
    public class func comDayCqWcmFoundationImplAdaptiveImageComponentServletWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, adaptSupportedWidths: [String]? = nil) -> RequestBuilder<ComDayCqWcmFoundationImplAdaptiveImageComponentServletInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.foundation.impl.AdaptiveImageComponentServlet"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "adapt.supported.widths": adaptSupportedWidths
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqWcmFoundationImplAdaptiveImageComponentServletInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter path: (query)  (optional)
     - parameter authHttpNologin: (query)  (optional)
     - parameter authHttpRealm: (query)  (optional)
     - parameter authDefaultLoginpage: (query)  (optional)
     - parameter authCredForm: (query)  (optional)
     - parameter authCredUtf8: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqWcmFoundationImplHTTPAuthHandler(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, path: String? = nil, authHttpNologin: Bool? = nil, authHttpRealm: String? = nil, authDefaultLoginpage: String? = nil, authCredForm: [String]? = nil, authCredUtf8: [String]? = nil, completion: ((data: ComDayCqWcmFoundationImplHTTPAuthHandlerInfo?, error: ErrorType?) -> Void)) {
        comDayCqWcmFoundationImplHTTPAuthHandlerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, path: path, authHttpNologin: authHttpNologin, authHttpRealm: authHttpRealm, authDefaultLoginpage: authDefaultLoginpage, authCredForm: authCredForm, authCredUtf8: authCredUtf8).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.foundation.impl.HTTPAuthHandler     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "auth.cred.utf8" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "path" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "auth.http.nologin" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "auth.default.loginpage" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "auth.cred.form" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "auth.http.realm" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter path: (query)  (optional)
     - parameter authHttpNologin: (query)  (optional)
     - parameter authHttpRealm: (query)  (optional)
     - parameter authDefaultLoginpage: (query)  (optional)
     - parameter authCredForm: (query)  (optional)
     - parameter authCredUtf8: (query)  (optional)

     - returns: RequestBuilder<ComDayCqWcmFoundationImplHTTPAuthHandlerInfo> 
     */
    public class func comDayCqWcmFoundationImplHTTPAuthHandlerWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, path: String? = nil, authHttpNologin: Bool? = nil, authHttpRealm: String? = nil, authDefaultLoginpage: String? = nil, authCredForm: [String]? = nil, authCredUtf8: [String]? = nil) -> RequestBuilder<ComDayCqWcmFoundationImplHTTPAuthHandlerInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.foundation.impl.HTTPAuthHandler"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "path": path,
            "auth.http.nologin": authHttpNologin,
            "auth.http.realm": authHttpRealm,
            "auth.default.loginpage": authDefaultLoginpage,
            "auth.cred.form": authCredForm,
            "auth.cred.utf8": authCredUtf8
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqWcmFoundationImplHTTPAuthHandlerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter slingAuthRequirements: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqWcmFoundationImplPageImpressionsTracker(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, slingAuthRequirements: String? = nil, completion: ((data: ComDayCqWcmFoundationImplPageImpressionsTrackerInfo?, error: ErrorType?) -> Void)) {
        comDayCqWcmFoundationImplPageImpressionsTrackerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, slingAuthRequirements: slingAuthRequirements).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.foundation.impl.PageImpressionsTracker     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "sling.auth.requirements" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter slingAuthRequirements: (query)  (optional)

     - returns: RequestBuilder<ComDayCqWcmFoundationImplPageImpressionsTrackerInfo> 
     */
    public class func comDayCqWcmFoundationImplPageImpressionsTrackerWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, slingAuthRequirements: String? = nil) -> RequestBuilder<ComDayCqWcmFoundationImplPageImpressionsTrackerInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.foundation.impl.PageImpressionsTracker"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "sling.auth.requirements": slingAuthRequirements
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqWcmFoundationImplPageImpressionsTrackerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter excludedResourceTypes: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqWcmFoundationImplPageRedirectServlet(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, excludedResourceTypes: [String]? = nil, completion: ((data: ComDayCqWcmFoundationImplPageRedirectServletInfo?, error: ErrorType?) -> Void)) {
        comDayCqWcmFoundationImplPageRedirectServletWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, excludedResourceTypes: excludedResourceTypes).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.foundation.impl.PageRedirectServlet     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "excluded.resource.types" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter excludedResourceTypes: (query)  (optional)

     - returns: RequestBuilder<ComDayCqWcmFoundationImplPageRedirectServletInfo> 
     */
    public class func comDayCqWcmFoundationImplPageRedirectServletWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, excludedResourceTypes: [String]? = nil) -> RequestBuilder<ComDayCqWcmFoundationImplPageRedirectServletInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.foundation.impl.PageRedirectServlet"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "excluded.resource.types": excludedResourceTypes
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqWcmFoundationImplPageRedirectServletInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter defaultAttachmentTypeBlacklist: (query)  (optional)
     - parameter baselineAttachmentTypeBlacklist: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklist(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, defaultAttachmentTypeBlacklist: [String]? = nil, baselineAttachmentTypeBlacklist: [String]? = nil, completion: ((data: ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistInfo?, error: ErrorType?) -> Void)) {
        comDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, defaultAttachmentTypeBlacklist: defaultAttachmentTypeBlacklist, baselineAttachmentTypeBlacklist: baselineAttachmentTypeBlacklist).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.foundation.security.impl.DefaultAttachmentTypeBlacklistService     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "default.attachment.type.blacklist" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "baseline.attachment.type.blacklist" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter defaultAttachmentTypeBlacklist: (query)  (optional)
     - parameter baselineAttachmentTypeBlacklist: (query)  (optional)

     - returns: RequestBuilder<ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistInfo> 
     */
    public class func comDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, defaultAttachmentTypeBlacklist: [String]? = nil, baselineAttachmentTypeBlacklist: [String]? = nil) -> RequestBuilder<ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.foundation.security.impl.DefaultAttachmentTypeBlacklistService"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "default.attachment.type.blacklist": defaultAttachmentTypeBlacklist,
            "baseline.attachment.type.blacklist": baselineAttachmentTypeBlacklist
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter parameterWhitelist: (query)  (optional)
     - parameter parameterWhitelistPrefixes: (query)  (optional)
     - parameter binaryParameterWhitelist: (query)  (optional)
     - parameter modifierWhitelist: (query)  (optional)
     - parameter operationWhitelist: (query)  (optional)
     - parameter operationWhitelistPrefixes: (query)  (optional)
     - parameter typehintWhitelist: (query)  (optional)
     - parameter resourcetypeWhitelist: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, parameterWhitelist: [String]? = nil, parameterWhitelistPrefixes: [String]? = nil, binaryParameterWhitelist: [String]? = nil, modifierWhitelist: [String]? = nil, operationWhitelist: [String]? = nil, operationWhitelistPrefixes: [String]? = nil, typehintWhitelist: [String]? = nil, resourcetypeWhitelist: [String]? = nil, completion: ((data: ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplInfo?, error: ErrorType?) -> Void)) {
        comDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, parameterWhitelist: parameterWhitelist, parameterWhitelistPrefixes: parameterWhitelistPrefixes, binaryParameterWhitelist: binaryParameterWhitelist, modifierWhitelist: modifierWhitelist, operationWhitelist: operationWhitelist, operationWhitelistPrefixes: operationWhitelistPrefixes, typehintWhitelist: typehintWhitelist, resourcetypeWhitelist: resourcetypeWhitelist).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.foundation.security.impl.SaferSlingPostValidatorImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "service_location" : "service_location",
  "bundle_location" : "bundle_location",
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "parameter.whitelist" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "resourcetype.whitelist" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "modifier.whitelist" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "operation.whitelist" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "operation.whitelist.prefixes" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "typehint.whitelist" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "binary.parameter.whitelist" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "parameter.whitelist.prefixes" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter parameterWhitelist: (query)  (optional)
     - parameter parameterWhitelistPrefixes: (query)  (optional)
     - parameter binaryParameterWhitelist: (query)  (optional)
     - parameter modifierWhitelist: (query)  (optional)
     - parameter operationWhitelist: (query)  (optional)
     - parameter operationWhitelistPrefixes: (query)  (optional)
     - parameter typehintWhitelist: (query)  (optional)
     - parameter resourcetypeWhitelist: (query)  (optional)

     - returns: RequestBuilder<ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplInfo> 
     */
    public class func comDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, parameterWhitelist: [String]? = nil, parameterWhitelistPrefixes: [String]? = nil, binaryParameterWhitelist: [String]? = nil, modifierWhitelist: [String]? = nil, operationWhitelist: [String]? = nil, operationWhitelistPrefixes: [String]? = nil, typehintWhitelist: [String]? = nil, resourcetypeWhitelist: [String]? = nil) -> RequestBuilder<ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.foundation.security.impl.SaferSlingPostValidatorImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "parameter.whitelist": parameterWhitelist,
            "parameter.whitelist.prefixes": parameterWhitelistPrefixes,
            "binary.parameter.whitelist": binaryParameterWhitelist,
            "modifier.whitelist": modifierWhitelist,
            "operation.whitelist": operationWhitelist,
            "operation.whitelist.prefixes": operationWhitelistPrefixes,
            "typehint.whitelist": typehintWhitelist,
            "resourcetype.whitelist": resourcetypeWhitelist
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter deviceInfoTransformerEnabled: (query)  (optional)
     - parameter deviceInfoTransformerCssStyle: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactory(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, deviceInfoTransformerEnabled: Bool? = nil, deviceInfoTransformerCssStyle: String? = nil, completion: ((data: ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo?, error: ErrorType?) -> Void)) {
        comDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, deviceInfoTransformerEnabled: deviceInfoTransformerEnabled, deviceInfoTransformerCssStyle: deviceInfoTransformerCssStyle).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.mobile.core.impl.device.DeviceInfoTransformerFactory     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "service_location" : "service_location",
  "bundle_location" : "bundle_location",
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "device.info.transformer.css.style" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "device.info.transformer.enabled" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter deviceInfoTransformerEnabled: (query)  (optional)
     - parameter deviceInfoTransformerCssStyle: (query)  (optional)

     - returns: RequestBuilder<ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo> 
     */
    public class func comDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, deviceInfoTransformerEnabled: Bool? = nil, deviceInfoTransformerCssStyle: String? = nil) -> RequestBuilder<ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.mobile.core.impl.device.DeviceInfoTransformerFactory"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "device.info.transformer.enabled": deviceInfoTransformerEnabled,
            "device.info.transformer.css.style": deviceInfoTransformerCssStyle
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter redirectEnabled: (query)  (optional)
     - parameter redirectStatsEnabled: (query)  (optional)
     - parameter redirectExtensions: (query)  (optional)
     - parameter redirectPaths: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqWcmMobileCoreImplRedirectRedirectFilter(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, redirectEnabled: Bool? = nil, redirectStatsEnabled: Bool? = nil, redirectExtensions: [String]? = nil, redirectPaths: [String]? = nil, completion: ((data: ComDayCqWcmMobileCoreImplRedirectRedirectFilterInfo?, error: ErrorType?) -> Void)) {
        comDayCqWcmMobileCoreImplRedirectRedirectFilterWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, redirectEnabled: redirectEnabled, redirectStatsEnabled: redirectStatsEnabled, redirectExtensions: redirectExtensions, redirectPaths: redirectPaths).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.mobile.core.impl.redirect.RedirectFilter     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "service_location" : "service_location",
  "bundle_location" : "bundle_location",
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "redirect.enabled" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "redirect.paths" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "redirect.stats.enabled" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "redirect.extensions" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter redirectEnabled: (query)  (optional)
     - parameter redirectStatsEnabled: (query)  (optional)
     - parameter redirectExtensions: (query)  (optional)
     - parameter redirectPaths: (query)  (optional)

     - returns: RequestBuilder<ComDayCqWcmMobileCoreImplRedirectRedirectFilterInfo> 
     */
    public class func comDayCqWcmMobileCoreImplRedirectRedirectFilterWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, redirectEnabled: Bool? = nil, redirectStatsEnabled: Bool? = nil, redirectExtensions: [String]? = nil, redirectPaths: [String]? = nil) -> RequestBuilder<ComDayCqWcmMobileCoreImplRedirectRedirectFilterInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.mobile.core.impl.redirect.RedirectFilter"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "redirect.enabled": redirectEnabled,
            "redirect.stats.enabled": redirectStatsEnabled,
            "redirect.extensions": redirectExtensions,
            "redirect.paths": redirectPaths
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqWcmMobileCoreImplRedirectRedirectFilterInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqWcmMsmActionExcludednodetypes: (query)  (optional)
     - parameter cqWcmMsmActionExcludedparagraphitems: (query)  (optional)
     - parameter cqWcmMsmActionExcludedprops: (query)  (optional)
     - parameter contentcopyactionOrderStyle: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqWcmMsmImplActionsContentCopyActionFactory(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqWcmMsmActionExcludednodetypes: [String]? = nil, cqWcmMsmActionExcludedparagraphitems: [String]? = nil, cqWcmMsmActionExcludedprops: [String]? = nil, contentcopyactionOrderStyle: String? = nil, completion: ((data: ComDayCqWcmMsmImplActionsContentCopyActionFactoryInfo?, error: ErrorType?) -> Void)) {
        comDayCqWcmMsmImplActionsContentCopyActionFactoryWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqWcmMsmActionExcludednodetypes: cqWcmMsmActionExcludednodetypes, cqWcmMsmActionExcludedparagraphitems: cqWcmMsmActionExcludedparagraphitems, cqWcmMsmActionExcludedprops: cqWcmMsmActionExcludedprops, contentcopyactionOrderStyle: contentcopyactionOrderStyle).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.msm.impl.actions.ContentCopyActionFactory     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "service_location" : "service_location",
  "bundle_location" : "bundle_location",
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "cq.wcm.msm.action.excludedparagraphitems" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "cq.wcm.msm.action.excludedprops" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "cq.wcm.msm.action.excludednodetypes" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "contentcopyaction.order.style" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : {
        "values" : "",
        "labels" : ""
      },
      "value" : ""
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqWcmMsmActionExcludednodetypes: (query)  (optional)
     - parameter cqWcmMsmActionExcludedparagraphitems: (query)  (optional)
     - parameter cqWcmMsmActionExcludedprops: (query)  (optional)
     - parameter contentcopyactionOrderStyle: (query)  (optional)

     - returns: RequestBuilder<ComDayCqWcmMsmImplActionsContentCopyActionFactoryInfo> 
     */
    public class func comDayCqWcmMsmImplActionsContentCopyActionFactoryWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqWcmMsmActionExcludednodetypes: [String]? = nil, cqWcmMsmActionExcludedparagraphitems: [String]? = nil, cqWcmMsmActionExcludedprops: [String]? = nil, contentcopyactionOrderStyle: String? = nil) -> RequestBuilder<ComDayCqWcmMsmImplActionsContentCopyActionFactoryInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.ContentCopyActionFactory"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "cq.wcm.msm.action.excludednodetypes": cqWcmMsmActionExcludednodetypes,
            "cq.wcm.msm.action.excludedparagraphitems": cqWcmMsmActionExcludedparagraphitems,
            "cq.wcm.msm.action.excludedprops": cqWcmMsmActionExcludedprops,
            "contentcopyaction.order.style": contentcopyactionOrderStyle
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqWcmMsmImplActionsContentCopyActionFactoryInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqWcmMsmActionExcludednodetypes: (query)  (optional)
     - parameter cqWcmMsmActionExcludedparagraphitems: (query)  (optional)
     - parameter cqWcmMsmActionExcludedprops: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqWcmMsmImplActionsContentDeleteActionFactory(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqWcmMsmActionExcludednodetypes: [String]? = nil, cqWcmMsmActionExcludedparagraphitems: [String]? = nil, cqWcmMsmActionExcludedprops: [String]? = nil, completion: ((data: ComDayCqWcmMsmImplActionsContentDeleteActionFactoryInfo?, error: ErrorType?) -> Void)) {
        comDayCqWcmMsmImplActionsContentDeleteActionFactoryWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqWcmMsmActionExcludednodetypes: cqWcmMsmActionExcludednodetypes, cqWcmMsmActionExcludedparagraphitems: cqWcmMsmActionExcludedparagraphitems, cqWcmMsmActionExcludedprops: cqWcmMsmActionExcludedprops).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.msm.impl.actions.ContentDeleteActionFactory     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "service_location" : "service_location",
  "bundle_location" : "bundle_location",
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "cq.wcm.msm.action.excludedparagraphitems" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "cq.wcm.msm.action.excludedprops" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "cq.wcm.msm.action.excludednodetypes" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqWcmMsmActionExcludednodetypes: (query)  (optional)
     - parameter cqWcmMsmActionExcludedparagraphitems: (query)  (optional)
     - parameter cqWcmMsmActionExcludedprops: (query)  (optional)

     - returns: RequestBuilder<ComDayCqWcmMsmImplActionsContentDeleteActionFactoryInfo> 
     */
    public class func comDayCqWcmMsmImplActionsContentDeleteActionFactoryWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqWcmMsmActionExcludednodetypes: [String]? = nil, cqWcmMsmActionExcludedparagraphitems: [String]? = nil, cqWcmMsmActionExcludedprops: [String]? = nil) -> RequestBuilder<ComDayCqWcmMsmImplActionsContentDeleteActionFactoryInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.ContentDeleteActionFactory"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "cq.wcm.msm.action.excludednodetypes": cqWcmMsmActionExcludednodetypes,
            "cq.wcm.msm.action.excludedparagraphitems": cqWcmMsmActionExcludedparagraphitems,
            "cq.wcm.msm.action.excludedprops": cqWcmMsmActionExcludedprops
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqWcmMsmImplActionsContentDeleteActionFactoryInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqWcmMsmActionExcludednodetypes: (query)  (optional)
     - parameter cqWcmMsmActionExcludedparagraphitems: (query)  (optional)
     - parameter cqWcmMsmActionExcludedprops: (query)  (optional)
     - parameter cqWcmMsmActionIgnoredMixin: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqWcmMsmImplActionsContentUpdateActionFactory(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqWcmMsmActionExcludednodetypes: [String]? = nil, cqWcmMsmActionExcludedparagraphitems: [String]? = nil, cqWcmMsmActionExcludedprops: [String]? = nil, cqWcmMsmActionIgnoredMixin: [String]? = nil, completion: ((data: ComDayCqWcmMsmImplActionsContentUpdateActionFactoryInfo?, error: ErrorType?) -> Void)) {
        comDayCqWcmMsmImplActionsContentUpdateActionFactoryWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqWcmMsmActionExcludednodetypes: cqWcmMsmActionExcludednodetypes, cqWcmMsmActionExcludedparagraphitems: cqWcmMsmActionExcludedparagraphitems, cqWcmMsmActionExcludedprops: cqWcmMsmActionExcludedprops, cqWcmMsmActionIgnoredMixin: cqWcmMsmActionIgnoredMixin).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.msm.impl.actions.ContentUpdateActionFactory     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "service_location" : "service_location",
  "bundle_location" : "bundle_location",
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "cq.wcm.msm.action.excludedparagraphitems" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "cq.wcm.msm.action.excludedprops" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "cq.wcm.msm.action.excludednodetypes" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "cq.wcm.msm.action.ignoredMixin" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqWcmMsmActionExcludednodetypes: (query)  (optional)
     - parameter cqWcmMsmActionExcludedparagraphitems: (query)  (optional)
     - parameter cqWcmMsmActionExcludedprops: (query)  (optional)
     - parameter cqWcmMsmActionIgnoredMixin: (query)  (optional)

     - returns: RequestBuilder<ComDayCqWcmMsmImplActionsContentUpdateActionFactoryInfo> 
     */
    public class func comDayCqWcmMsmImplActionsContentUpdateActionFactoryWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqWcmMsmActionExcludednodetypes: [String]? = nil, cqWcmMsmActionExcludedparagraphitems: [String]? = nil, cqWcmMsmActionExcludedprops: [String]? = nil, cqWcmMsmActionIgnoredMixin: [String]? = nil) -> RequestBuilder<ComDayCqWcmMsmImplActionsContentUpdateActionFactoryInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.ContentUpdateActionFactory"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "cq.wcm.msm.action.excludednodetypes": cqWcmMsmActionExcludednodetypes,
            "cq.wcm.msm.action.excludedparagraphitems": cqWcmMsmActionExcludedparagraphitems,
            "cq.wcm.msm.action.excludedprops": cqWcmMsmActionExcludedprops,
            "cq.wcm.msm.action.ignoredMixin": cqWcmMsmActionIgnoredMixin
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqWcmMsmImplActionsContentUpdateActionFactoryInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqWcmMsmActionExcludednodetypes: (query)  (optional)
     - parameter cqWcmMsmActionExcludedparagraphitems: (query)  (optional)
     - parameter cqWcmMsmActionExcludedprops: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqWcmMsmImplActionsOrderChildrenActionFactory(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqWcmMsmActionExcludednodetypes: [String]? = nil, cqWcmMsmActionExcludedparagraphitems: [String]? = nil, cqWcmMsmActionExcludedprops: [String]? = nil, completion: ((data: ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryInfo?, error: ErrorType?) -> Void)) {
        comDayCqWcmMsmImplActionsOrderChildrenActionFactoryWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqWcmMsmActionExcludednodetypes: cqWcmMsmActionExcludednodetypes, cqWcmMsmActionExcludedparagraphitems: cqWcmMsmActionExcludedparagraphitems, cqWcmMsmActionExcludedprops: cqWcmMsmActionExcludedprops).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.msm.impl.actions.OrderChildrenActionFactory     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "service_location" : "service_location",
  "bundle_location" : "bundle_location",
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "cq.wcm.msm.action.excludedparagraphitems" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "cq.wcm.msm.action.excludedprops" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "cq.wcm.msm.action.excludednodetypes" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqWcmMsmActionExcludednodetypes: (query)  (optional)
     - parameter cqWcmMsmActionExcludedparagraphitems: (query)  (optional)
     - parameter cqWcmMsmActionExcludedprops: (query)  (optional)

     - returns: RequestBuilder<ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryInfo> 
     */
    public class func comDayCqWcmMsmImplActionsOrderChildrenActionFactoryWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqWcmMsmActionExcludednodetypes: [String]? = nil, cqWcmMsmActionExcludedparagraphitems: [String]? = nil, cqWcmMsmActionExcludedprops: [String]? = nil) -> RequestBuilder<ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.OrderChildrenActionFactory"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "cq.wcm.msm.action.excludednodetypes": cqWcmMsmActionExcludednodetypes,
            "cq.wcm.msm.action.excludedparagraphitems": cqWcmMsmActionExcludedparagraphitems,
            "cq.wcm.msm.action.excludedprops": cqWcmMsmActionExcludedprops
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqWcmMsmActionExcludednodetypes: (query)  (optional)
     - parameter cqWcmMsmActionExcludedparagraphitems: (query)  (optional)
     - parameter cqWcmMsmActionExcludedprops: (query)  (optional)
     - parameter cqWcmMsmImplActionsPagemovePropReferenceUpdate: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqWcmMsmImplActionsPageMoveActionFactory(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqWcmMsmActionExcludednodetypes: [String]? = nil, cqWcmMsmActionExcludedparagraphitems: [String]? = nil, cqWcmMsmActionExcludedprops: [String]? = nil, cqWcmMsmImplActionsPagemovePropReferenceUpdate: Bool? = nil, completion: ((data: ComDayCqWcmMsmImplActionsPageMoveActionFactoryInfo?, error: ErrorType?) -> Void)) {
        comDayCqWcmMsmImplActionsPageMoveActionFactoryWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqWcmMsmActionExcludednodetypes: cqWcmMsmActionExcludednodetypes, cqWcmMsmActionExcludedparagraphitems: cqWcmMsmActionExcludedparagraphitems, cqWcmMsmActionExcludedprops: cqWcmMsmActionExcludedprops, cqWcmMsmImplActionsPagemovePropReferenceUpdate: cqWcmMsmImplActionsPagemovePropReferenceUpdate).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.msm.impl.actions.PageMoveActionFactory     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "cq.wcm.msm.impl.actions.pagemove.prop_referenceUpdate" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "cq.wcm.msm.action.excludedparagraphitems" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "cq.wcm.msm.action.excludedprops" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "cq.wcm.msm.action.excludednodetypes" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqWcmMsmActionExcludednodetypes: (query)  (optional)
     - parameter cqWcmMsmActionExcludedparagraphitems: (query)  (optional)
     - parameter cqWcmMsmActionExcludedprops: (query)  (optional)
     - parameter cqWcmMsmImplActionsPagemovePropReferenceUpdate: (query)  (optional)

     - returns: RequestBuilder<ComDayCqWcmMsmImplActionsPageMoveActionFactoryInfo> 
     */
    public class func comDayCqWcmMsmImplActionsPageMoveActionFactoryWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqWcmMsmActionExcludednodetypes: [String]? = nil, cqWcmMsmActionExcludedparagraphitems: [String]? = nil, cqWcmMsmActionExcludedprops: [String]? = nil, cqWcmMsmImplActionsPagemovePropReferenceUpdate: Bool? = nil) -> RequestBuilder<ComDayCqWcmMsmImplActionsPageMoveActionFactoryInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.PageMoveActionFactory"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "cq.wcm.msm.action.excludednodetypes": cqWcmMsmActionExcludednodetypes,
            "cq.wcm.msm.action.excludedparagraphitems": cqWcmMsmActionExcludedparagraphitems,
            "cq.wcm.msm.action.excludedprops": cqWcmMsmActionExcludedprops,
            "cq.wcm.msm.impl.actions.pagemove.prop_referenceUpdate": cqWcmMsmImplActionsPagemovePropReferenceUpdate
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqWcmMsmImplActionsPageMoveActionFactoryInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqWcmMsmActionExcludednodetypes: (query)  (optional)
     - parameter cqWcmMsmActionExcludedparagraphitems: (query)  (optional)
     - parameter cqWcmMsmActionExcludedprops: (query)  (optional)
     - parameter cqWcmMsmImplActionReferencesupdatePropUpdateNested: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqWcmMsmImplActionsReferencesUpdateActionFactory(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqWcmMsmActionExcludednodetypes: [String]? = nil, cqWcmMsmActionExcludedparagraphitems: [String]? = nil, cqWcmMsmActionExcludedprops: [String]? = nil, cqWcmMsmImplActionReferencesupdatePropUpdateNested: Bool? = nil, completion: ((data: ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryInfo?, error: ErrorType?) -> Void)) {
        comDayCqWcmMsmImplActionsReferencesUpdateActionFactoryWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqWcmMsmActionExcludednodetypes: cqWcmMsmActionExcludednodetypes, cqWcmMsmActionExcludedparagraphitems: cqWcmMsmActionExcludedparagraphitems, cqWcmMsmActionExcludedprops: cqWcmMsmActionExcludedprops, cqWcmMsmImplActionReferencesupdatePropUpdateNested: cqWcmMsmImplActionReferencesupdatePropUpdateNested).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.msm.impl.actions.ReferencesUpdateActionFactory     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "service_location" : "service_location",
  "bundle_location" : "bundle_location",
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "cq.wcm.msm.impl.action.referencesupdate.prop_updateNested" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "cq.wcm.msm.action.excludedparagraphitems" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "cq.wcm.msm.action.excludedprops" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "cq.wcm.msm.action.excludednodetypes" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqWcmMsmActionExcludednodetypes: (query)  (optional)
     - parameter cqWcmMsmActionExcludedparagraphitems: (query)  (optional)
     - parameter cqWcmMsmActionExcludedprops: (query)  (optional)
     - parameter cqWcmMsmImplActionReferencesupdatePropUpdateNested: (query)  (optional)

     - returns: RequestBuilder<ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryInfo> 
     */
    public class func comDayCqWcmMsmImplActionsReferencesUpdateActionFactoryWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqWcmMsmActionExcludednodetypes: [String]? = nil, cqWcmMsmActionExcludedparagraphitems: [String]? = nil, cqWcmMsmActionExcludedprops: [String]? = nil, cqWcmMsmImplActionReferencesupdatePropUpdateNested: Bool? = nil) -> RequestBuilder<ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.ReferencesUpdateActionFactory"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "cq.wcm.msm.action.excludednodetypes": cqWcmMsmActionExcludednodetypes,
            "cq.wcm.msm.action.excludedparagraphitems": cqWcmMsmActionExcludedparagraphitems,
            "cq.wcm.msm.action.excludedprops": cqWcmMsmActionExcludedprops,
            "cq.wcm.msm.impl.action.referencesupdate.prop_updateNested": cqWcmMsmImplActionReferencesupdatePropUpdateNested
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqWcmMsmActionExcludednodetypes: (query)  (optional)
     - parameter cqWcmMsmActionExcludedparagraphitems: (query)  (optional)
     - parameter cqWcmMsmActionExcludedprops: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqWcmMsmImplActionsVersionCopyActionFactory(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqWcmMsmActionExcludednodetypes: [String]? = nil, cqWcmMsmActionExcludedparagraphitems: [String]? = nil, cqWcmMsmActionExcludedprops: [String]? = nil, completion: ((data: ComDayCqWcmMsmImplActionsVersionCopyActionFactoryInfo?, error: ErrorType?) -> Void)) {
        comDayCqWcmMsmImplActionsVersionCopyActionFactoryWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqWcmMsmActionExcludednodetypes: cqWcmMsmActionExcludednodetypes, cqWcmMsmActionExcludedparagraphitems: cqWcmMsmActionExcludedparagraphitems, cqWcmMsmActionExcludedprops: cqWcmMsmActionExcludedprops).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.msm.impl.actions.VersionCopyActionFactory     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "service_location" : "service_location",
  "bundle_location" : "bundle_location",
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "cq.wcm.msm.action.excludedparagraphitems" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "cq.wcm.msm.action.excludedprops" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "cq.wcm.msm.action.excludednodetypes" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqWcmMsmActionExcludednodetypes: (query)  (optional)
     - parameter cqWcmMsmActionExcludedparagraphitems: (query)  (optional)
     - parameter cqWcmMsmActionExcludedprops: (query)  (optional)

     - returns: RequestBuilder<ComDayCqWcmMsmImplActionsVersionCopyActionFactoryInfo> 
     */
    public class func comDayCqWcmMsmImplActionsVersionCopyActionFactoryWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqWcmMsmActionExcludednodetypes: [String]? = nil, cqWcmMsmActionExcludedparagraphitems: [String]? = nil, cqWcmMsmActionExcludedprops: [String]? = nil) -> RequestBuilder<ComDayCqWcmMsmImplActionsVersionCopyActionFactoryInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.VersionCopyActionFactory"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "cq.wcm.msm.action.excludednodetypes": cqWcmMsmActionExcludednodetypes,
            "cq.wcm.msm.action.excludedparagraphitems": cqWcmMsmActionExcludedparagraphitems,
            "cq.wcm.msm.action.excludedprops": cqWcmMsmActionExcludedprops
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqWcmMsmImplActionsVersionCopyActionFactoryInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter liverelationshipmgrRelationsconfigDefault: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqWcmMsmImplLiveRelationshipManagerImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, liverelationshipmgrRelationsconfigDefault: String? = nil, completion: ((data: ComDayCqWcmMsmImplLiveRelationshipManagerImplInfo?, error: ErrorType?) -> Void)) {
        comDayCqWcmMsmImplLiveRelationshipManagerImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, liverelationshipmgrRelationsconfigDefault: liverelationshipmgrRelationsconfigDefault).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.msm.impl.LiveRelationshipManagerImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "liverelationshipmgr.relationsconfig.default" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter liverelationshipmgrRelationsconfigDefault: (query)  (optional)

     - returns: RequestBuilder<ComDayCqWcmMsmImplLiveRelationshipManagerImplInfo> 
     */
    public class func comDayCqWcmMsmImplLiveRelationshipManagerImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, liverelationshipmgrRelationsconfigDefault: String? = nil) -> RequestBuilder<ComDayCqWcmMsmImplLiveRelationshipManagerImplInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.msm.impl.LiveRelationshipManagerImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "liverelationshipmgr.relationsconfig.default": liverelationshipmgrRelationsconfigDefault
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqWcmMsmImplLiveRelationshipManagerImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter eventFilter: (query)  (optional)
     - parameter rolloutmgrExcludedpropsDefault: (query)  (optional)
     - parameter rolloutmgrExcludedparagraphpropsDefault: (query)  (optional)
     - parameter rolloutmgrExcludednodetypesDefault: (query)  (optional)
     - parameter rolloutmgrThreadpoolMaxsize: (query)  (optional)
     - parameter rolloutmgrThreadpoolMaxshutdowntime: (query)  (optional)
     - parameter rolloutmgrThreadpoolPriority: (query)  (optional)
     - parameter rolloutmgrCommitSize: (query)  (optional)
     - parameter rolloutmgrConflicthandlingEnabled: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqWcmMsmImplRolloutManagerImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, eventFilter: String? = nil, rolloutmgrExcludedpropsDefault: [String]? = nil, rolloutmgrExcludedparagraphpropsDefault: [String]? = nil, rolloutmgrExcludednodetypesDefault: [String]? = nil, rolloutmgrThreadpoolMaxsize: Int32? = nil, rolloutmgrThreadpoolMaxshutdowntime: Int32? = nil, rolloutmgrThreadpoolPriority: String? = nil, rolloutmgrCommitSize: Int32? = nil, rolloutmgrConflicthandlingEnabled: Bool? = nil, completion: ((data: ComDayCqWcmMsmImplRolloutManagerImplInfo?, error: ErrorType?) -> Void)) {
        comDayCqWcmMsmImplRolloutManagerImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, eventFilter: eventFilter, rolloutmgrExcludedpropsDefault: rolloutmgrExcludedpropsDefault, rolloutmgrExcludedparagraphpropsDefault: rolloutmgrExcludedparagraphpropsDefault, rolloutmgrExcludednodetypesDefault: rolloutmgrExcludednodetypesDefault, rolloutmgrThreadpoolMaxsize: rolloutmgrThreadpoolMaxsize, rolloutmgrThreadpoolMaxshutdowntime: rolloutmgrThreadpoolMaxshutdowntime, rolloutmgrThreadpoolPriority: rolloutmgrThreadpoolPriority, rolloutmgrCommitSize: rolloutmgrCommitSize, rolloutmgrConflicthandlingEnabled: rolloutmgrConflicthandlingEnabled).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.msm.impl.RolloutManagerImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "service_location" : "service_location",
  "bundle_location" : "bundle_location",
  "description" : "description",
  "pid" : "pid",
  "additionalProperties" : "additionalProperties",
  "title" : "title",
  "properties" : {
    "rolloutmgr.excludedprops.default" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "rolloutmgr.excludednodetypes.default" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "rolloutmgr.conflicthandling.enabled" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "rolloutmgr.threadpool.maxshutdowntime" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "rolloutmgr.commit.size" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "rolloutmgr.threadpool.priority" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : {
        "values" : "",
        "labels" : ""
      },
      "value" : ""
    },
    "event.filter" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "rolloutmgr.excludedparagraphprops.default" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "rolloutmgr.threadpool.maxsize" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter eventFilter: (query)  (optional)
     - parameter rolloutmgrExcludedpropsDefault: (query)  (optional)
     - parameter rolloutmgrExcludedparagraphpropsDefault: (query)  (optional)
     - parameter rolloutmgrExcludednodetypesDefault: (query)  (optional)
     - parameter rolloutmgrThreadpoolMaxsize: (query)  (optional)
     - parameter rolloutmgrThreadpoolMaxshutdowntime: (query)  (optional)
     - parameter rolloutmgrThreadpoolPriority: (query)  (optional)
     - parameter rolloutmgrCommitSize: (query)  (optional)
     - parameter rolloutmgrConflicthandlingEnabled: (query)  (optional)

     - returns: RequestBuilder<ComDayCqWcmMsmImplRolloutManagerImplInfo> 
     */
    public class func comDayCqWcmMsmImplRolloutManagerImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, eventFilter: String? = nil, rolloutmgrExcludedpropsDefault: [String]? = nil, rolloutmgrExcludedparagraphpropsDefault: [String]? = nil, rolloutmgrExcludednodetypesDefault: [String]? = nil, rolloutmgrThreadpoolMaxsize: Int32? = nil, rolloutmgrThreadpoolMaxshutdowntime: Int32? = nil, rolloutmgrThreadpoolPriority: String? = nil, rolloutmgrCommitSize: Int32? = nil, rolloutmgrConflicthandlingEnabled: Bool? = nil) -> RequestBuilder<ComDayCqWcmMsmImplRolloutManagerImplInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.msm.impl.RolloutManagerImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "event.filter": eventFilter,
            "rolloutmgr.excludedprops.default": rolloutmgrExcludedpropsDefault,
            "rolloutmgr.excludedparagraphprops.default": rolloutmgrExcludedparagraphpropsDefault,
            "rolloutmgr.excludednodetypes.default": rolloutmgrExcludednodetypesDefault,
            "rolloutmgr.threadpool.maxsize": rolloutmgrThreadpoolMaxsize?.encodeToJSON(),
            "rolloutmgr.threadpool.maxshutdowntime": rolloutmgrThreadpoolMaxshutdowntime?.encodeToJSON(),
            "rolloutmgr.threadpool.priority": rolloutmgrThreadpoolPriority,
            "rolloutmgr.commit.size": rolloutmgrCommitSize?.encodeToJSON(),
            "rolloutmgr.conflicthandling.enabled": rolloutmgrConflicthandlingEnabled
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqWcmMsmImplRolloutManagerImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter auditlogservletDefaultEventsCount: (query)  (optional)
     - parameter auditlogservletDefaultPath: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqWcmMsmImplServletsAuditLogServlet(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, auditlogservletDefaultEventsCount: Int32? = nil, auditlogservletDefaultPath: String? = nil, completion: ((data: ComDayCqWcmMsmImplServletsAuditLogServletInfo?, error: ErrorType?) -> Void)) {
        comDayCqWcmMsmImplServletsAuditLogServletWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, auditlogservletDefaultEventsCount: auditlogservletDefaultEventsCount, auditlogservletDefaultPath: auditlogservletDefaultPath).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.msm.impl.servlets.AuditLogServlet     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "auditlogservlet.default.events.count" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "auditlogservlet.default.path" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter auditlogservletDefaultEventsCount: (query)  (optional)
     - parameter auditlogservletDefaultPath: (query)  (optional)

     - returns: RequestBuilder<ComDayCqWcmMsmImplServletsAuditLogServletInfo> 
     */
    public class func comDayCqWcmMsmImplServletsAuditLogServletWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, auditlogservletDefaultEventsCount: Int32? = nil, auditlogservletDefaultPath: String? = nil) -> RequestBuilder<ComDayCqWcmMsmImplServletsAuditLogServletInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.msm.impl.servlets.AuditLogServlet"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "auditlogservlet.default.events.count": auditlogservletDefaultEventsCount?.encodeToJSON(),
            "auditlogservlet.default.path": auditlogservletDefaultPath
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqWcmMsmImplServletsAuditLogServletInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter emailFrom: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqWcmNotificationEmailImplEmailChannel(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, emailFrom: String? = nil, completion: ((data: ComDayCqWcmNotificationEmailImplEmailChannelInfo?, error: ErrorType?) -> Void)) {
        comDayCqWcmNotificationEmailImplEmailChannelWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, emailFrom: emailFrom).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.notification.email.impl.EmailChannel     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "email.from" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter emailFrom: (query)  (optional)

     - returns: RequestBuilder<ComDayCqWcmNotificationEmailImplEmailChannelInfo> 
     */
    public class func comDayCqWcmNotificationEmailImplEmailChannelWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, emailFrom: String? = nil) -> RequestBuilder<ComDayCqWcmNotificationEmailImplEmailChannelInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.notification.email.impl.EmailChannel"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "email.from": emailFrom
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqWcmNotificationEmailImplEmailChannelInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter eventTopics: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqWcmNotificationImplNotificationManagerImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, eventTopics: [String]? = nil, completion: ((data: ComDayCqWcmNotificationImplNotificationManagerImplInfo?, error: ErrorType?) -> Void)) {
        comDayCqWcmNotificationImplNotificationManagerImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, eventTopics: eventTopics).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.notification.impl.NotificationManagerImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "service_location" : "service_location",
  "bundle_location" : "bundle_location",
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "event.topics" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter eventTopics: (query)  (optional)

     - returns: RequestBuilder<ComDayCqWcmNotificationImplNotificationManagerImplInfo> 
     */
    public class func comDayCqWcmNotificationImplNotificationManagerImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, eventTopics: [String]? = nil) -> RequestBuilder<ComDayCqWcmNotificationImplNotificationManagerImplInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.notification.impl.NotificationManagerImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "event.topics": eventTopics
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqWcmNotificationImplNotificationManagerImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter comDayCqWcmScriptingBvpScriptEngines: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqWcmScriptingImplBVPManager(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, comDayCqWcmScriptingBvpScriptEngines: [String]? = nil, completion: ((data: ComDayCqWcmScriptingImplBVPManagerInfo?, error: ErrorType?) -> Void)) {
        comDayCqWcmScriptingImplBVPManagerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, comDayCqWcmScriptingBvpScriptEngines: comDayCqWcmScriptingBvpScriptEngines).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.scripting.impl.BVPManager     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "com.day.cq.wcm.scripting.bvp.script.engines" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter comDayCqWcmScriptingBvpScriptEngines: (query)  (optional)

     - returns: RequestBuilder<ComDayCqWcmScriptingImplBVPManagerInfo> 
     */
    public class func comDayCqWcmScriptingImplBVPManagerWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, comDayCqWcmScriptingBvpScriptEngines: [String]? = nil) -> RequestBuilder<ComDayCqWcmScriptingImplBVPManagerInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.scripting.impl.BVPManager"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "com.day.cq.wcm.scripting.bvp.script.engines": comDayCqWcmScriptingBvpScriptEngines
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqWcmScriptingImplBVPManagerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqWcmUndoEnabled: (query)  (optional)
     - parameter cqWcmUndoPath: (query)  (optional)
     - parameter cqWcmUndoValidity: (query)  (optional)
     - parameter cqWcmUndoSteps: (query)  (optional)
     - parameter cqWcmUndoPersistence: (query)  (optional)
     - parameter cqWcmUndoPersistenceMode: (query)  (optional)
     - parameter cqWcmUndoMarkermode: (query)  (optional)
     - parameter cqWcmUndoWhitelist: (query)  (optional)
     - parameter cqWcmUndoBlacklist: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqWcmUndoUndoConfig(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqWcmUndoEnabled: Bool? = nil, cqWcmUndoPath: String? = nil, cqWcmUndoValidity: Int32? = nil, cqWcmUndoSteps: Int32? = nil, cqWcmUndoPersistence: String? = nil, cqWcmUndoPersistenceMode: Bool? = nil, cqWcmUndoMarkermode: String? = nil, cqWcmUndoWhitelist: [String]? = nil, cqWcmUndoBlacklist: [String]? = nil, completion: ((data: ComDayCqWcmUndoUndoConfigInfo?, error: ErrorType?) -> Void)) {
        comDayCqWcmUndoUndoConfigWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cqWcmUndoEnabled: cqWcmUndoEnabled, cqWcmUndoPath: cqWcmUndoPath, cqWcmUndoValidity: cqWcmUndoValidity, cqWcmUndoSteps: cqWcmUndoSteps, cqWcmUndoPersistence: cqWcmUndoPersistence, cqWcmUndoPersistenceMode: cqWcmUndoPersistenceMode, cqWcmUndoMarkermode: cqWcmUndoMarkermode, cqWcmUndoWhitelist: cqWcmUndoWhitelist, cqWcmUndoBlacklist: cqWcmUndoBlacklist).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.undo.UndoConfig     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "service_location" : "service_location",
  "bundle_location" : "bundle_location",
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "cq.wcm.undo.steps" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "cq.wcm.undo.persistence.mode" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "cq.wcm.undo.path" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "cq.wcm.undo.markermode" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "cq.wcm.undo.persistence" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "cq.wcm.undo.enabled" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "cq.wcm.undo.blacklist" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "cq.wcm.undo.validity" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "cq.wcm.undo.whitelist" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cqWcmUndoEnabled: (query)  (optional)
     - parameter cqWcmUndoPath: (query)  (optional)
     - parameter cqWcmUndoValidity: (query)  (optional)
     - parameter cqWcmUndoSteps: (query)  (optional)
     - parameter cqWcmUndoPersistence: (query)  (optional)
     - parameter cqWcmUndoPersistenceMode: (query)  (optional)
     - parameter cqWcmUndoMarkermode: (query)  (optional)
     - parameter cqWcmUndoWhitelist: (query)  (optional)
     - parameter cqWcmUndoBlacklist: (query)  (optional)

     - returns: RequestBuilder<ComDayCqWcmUndoUndoConfigInfo> 
     */
    public class func comDayCqWcmUndoUndoConfigWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cqWcmUndoEnabled: Bool? = nil, cqWcmUndoPath: String? = nil, cqWcmUndoValidity: Int32? = nil, cqWcmUndoSteps: Int32? = nil, cqWcmUndoPersistence: String? = nil, cqWcmUndoPersistenceMode: Bool? = nil, cqWcmUndoMarkermode: String? = nil, cqWcmUndoWhitelist: [String]? = nil, cqWcmUndoBlacklist: [String]? = nil) -> RequestBuilder<ComDayCqWcmUndoUndoConfigInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.undo.UndoConfig"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "cq.wcm.undo.enabled": cqWcmUndoEnabled,
            "cq.wcm.undo.path": cqWcmUndoPath,
            "cq.wcm.undo.validity": cqWcmUndoValidity?.encodeToJSON(),
            "cq.wcm.undo.steps": cqWcmUndoSteps?.encodeToJSON(),
            "cq.wcm.undo.persistence": cqWcmUndoPersistence,
            "cq.wcm.undo.persistence.mode": cqWcmUndoPersistenceMode,
            "cq.wcm.undo.markermode": cqWcmUndoMarkermode,
            "cq.wcm.undo.whitelist": cqWcmUndoWhitelist,
            "cq.wcm.undo.blacklist": cqWcmUndoBlacklist
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqWcmUndoUndoConfigInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter flushAgents: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqWcmWebservicesupportImplReplicationEventListener(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, flushAgents: [String]? = nil, completion: ((data: ComDayCqWcmWebservicesupportImplReplicationEventListenerInfo?, error: ErrorType?) -> Void)) {
        comDayCqWcmWebservicesupportImplReplicationEventListenerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, flushAgents: flushAgents).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.webservicesupport.impl.ReplicationEventListener     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "Flush agents" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter flushAgents: (query)  (optional)

     - returns: RequestBuilder<ComDayCqWcmWebservicesupportImplReplicationEventListenerInfo> 
     */
    public class func comDayCqWcmWebservicesupportImplReplicationEventListenerWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, flushAgents: [String]? = nil) -> RequestBuilder<ComDayCqWcmWebservicesupportImplReplicationEventListenerInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.webservicesupport.impl.ReplicationEventListener"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "Flush agents": flushAgents
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqWcmWebservicesupportImplReplicationEventListenerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter eventFilter: (query)  (optional)
     - parameter minThreadPoolSize: (query)  (optional)
     - parameter maxThreadPoolSize: (query)  (optional)
     - parameter cqWcmWorkflowTerminateOnActivate: (query)  (optional)
     - parameter cqWcmWorklfowTerminateExclusionList: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqWcmWorkflowImplWcmWorkflowServiceImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, eventFilter: String? = nil, minThreadPoolSize: Int32? = nil, maxThreadPoolSize: Int32? = nil, cqWcmWorkflowTerminateOnActivate: Bool? = nil, cqWcmWorklfowTerminateExclusionList: [String]? = nil, completion: ((data: ComDayCqWcmWorkflowImplWcmWorkflowServiceImplInfo?, error: ErrorType?) -> Void)) {
        comDayCqWcmWorkflowImplWcmWorkflowServiceImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, eventFilter: eventFilter, minThreadPoolSize: minThreadPoolSize, maxThreadPoolSize: maxThreadPoolSize, cqWcmWorkflowTerminateOnActivate: cqWcmWorkflowTerminateOnActivate, cqWcmWorklfowTerminateExclusionList: cqWcmWorklfowTerminateExclusionList).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.workflow.impl.WcmWorkflowServiceImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "cq.wcm.worklfow.terminate.exclusion.list" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "minThreadPoolSize" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "maxThreadPoolSize" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "cq.wcm.workflow.terminate.on.activate" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "event.filter" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter eventFilter: (query)  (optional)
     - parameter minThreadPoolSize: (query)  (optional)
     - parameter maxThreadPoolSize: (query)  (optional)
     - parameter cqWcmWorkflowTerminateOnActivate: (query)  (optional)
     - parameter cqWcmWorklfowTerminateExclusionList: (query)  (optional)

     - returns: RequestBuilder<ComDayCqWcmWorkflowImplWcmWorkflowServiceImplInfo> 
     */
    public class func comDayCqWcmWorkflowImplWcmWorkflowServiceImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, eventFilter: String? = nil, minThreadPoolSize: Int32? = nil, maxThreadPoolSize: Int32? = nil, cqWcmWorkflowTerminateOnActivate: Bool? = nil, cqWcmWorklfowTerminateExclusionList: [String]? = nil) -> RequestBuilder<ComDayCqWcmWorkflowImplWcmWorkflowServiceImplInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.workflow.impl.WcmWorkflowServiceImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "event.filter": eventFilter,
            "minThreadPoolSize": minThreadPoolSize?.encodeToJSON(),
            "maxThreadPoolSize": maxThreadPoolSize?.encodeToJSON(),
            "cq.wcm.workflow.terminate.on.activate": cqWcmWorkflowTerminateOnActivate,
            "cq.wcm.worklfow.terminate.exclusion.list": cqWcmWorklfowTerminateExclusionList
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqWcmWorkflowImplWcmWorkflowServiceImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter workflowpackageinfoproviderFilter: (query)  (optional)
     - parameter workflowpackageinfoproviderFilterRootpath: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqWcmWorkflowImplWorkflowPackageInfoProvider(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, workflowpackageinfoproviderFilter: [String]? = nil, workflowpackageinfoproviderFilterRootpath: String? = nil, completion: ((data: ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderInfo?, error: ErrorType?) -> Void)) {
        comDayCqWcmWorkflowImplWorkflowPackageInfoProviderWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, workflowpackageinfoproviderFilter: workflowpackageinfoproviderFilter, workflowpackageinfoproviderFilterRootpath: workflowpackageinfoproviderFilterRootpath).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.wcm.workflow.impl.WorkflowPackageInfoProvider     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "workflowpackageinfoprovider.filter.rootpath" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "workflowpackageinfoprovider.filter" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter workflowpackageinfoproviderFilter: (query)  (optional)
     - parameter workflowpackageinfoproviderFilterRootpath: (query)  (optional)

     - returns: RequestBuilder<ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderInfo> 
     */
    public class func comDayCqWcmWorkflowImplWorkflowPackageInfoProviderWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, workflowpackageinfoproviderFilter: [String]? = nil, workflowpackageinfoproviderFilterRootpath: String? = nil) -> RequestBuilder<ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderInfo> {
        let path = "/system/console/configMgr/com.day.cq.wcm.workflow.impl.WorkflowPackageInfoProvider"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "workflowpackageinfoprovider.filter": workflowpackageinfoproviderFilter,
            "workflowpackageinfoprovider.filter.rootpath": workflowpackageinfoproviderFilterRootpath
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter htmllibmanagerClientmanager: (query)  (optional)
     - parameter htmllibmanagerDebug: (query)  (optional)
     - parameter htmllibmanagerDebugConsole: (query)  (optional)
     - parameter htmllibmanagerDebugInitJs: (query)  (optional)
     - parameter htmllibmanagerDefaultthemename: (query)  (optional)
     - parameter htmllibmanagerDefaultuserthemename: (query)  (optional)
     - parameter htmllibmanagerFirebuglitePath: (query)  (optional)
     - parameter htmllibmanagerForceCQUrlInfo: (query)  (optional)
     - parameter htmllibmanagerGzip: (query)  (optional)
     - parameter htmllibmanagerMaxage: (query)  (optional)
     - parameter htmllibmanagerMaxDataUriSize: (query)  (optional)
     - parameter htmllibmanagerMinify: (query)  (optional)
     - parameter htmllibmanagerPathList: (query)  (optional)
     - parameter htmllibmanagerTiming: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqWidgetImplHtmlLibraryManagerImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, htmllibmanagerClientmanager: String? = nil, htmllibmanagerDebug: Bool? = nil, htmllibmanagerDebugConsole: Bool? = nil, htmllibmanagerDebugInitJs: String? = nil, htmllibmanagerDefaultthemename: String? = nil, htmllibmanagerDefaultuserthemename: String? = nil, htmllibmanagerFirebuglitePath: String? = nil, htmllibmanagerForceCQUrlInfo: Bool? = nil, htmllibmanagerGzip: Bool? = nil, htmllibmanagerMaxage: Int32? = nil, htmllibmanagerMaxDataUriSize: Int32? = nil, htmllibmanagerMinify: Bool? = nil, htmllibmanagerPathList: [String]? = nil, htmllibmanagerTiming: Bool? = nil, completion: ((data: ComDayCqWidgetImplHtmlLibraryManagerImplInfo?, error: ErrorType?) -> Void)) {
        comDayCqWidgetImplHtmlLibraryManagerImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, htmllibmanagerClientmanager: htmllibmanagerClientmanager, htmllibmanagerDebug: htmllibmanagerDebug, htmllibmanagerDebugConsole: htmllibmanagerDebugConsole, htmllibmanagerDebugInitJs: htmllibmanagerDebugInitJs, htmllibmanagerDefaultthemename: htmllibmanagerDefaultthemename, htmllibmanagerDefaultuserthemename: htmllibmanagerDefaultuserthemename, htmllibmanagerFirebuglitePath: htmllibmanagerFirebuglitePath, htmllibmanagerForceCQUrlInfo: htmllibmanagerForceCQUrlInfo, htmllibmanagerGzip: htmllibmanagerGzip, htmllibmanagerMaxage: htmllibmanagerMaxage, htmllibmanagerMaxDataUriSize: htmllibmanagerMaxDataUriSize, htmllibmanagerMinify: htmllibmanagerMinify, htmllibmanagerPathList: htmllibmanagerPathList, htmllibmanagerTiming: htmllibmanagerTiming).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.widget.impl.HtmlLibraryManagerImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "service_location" : "service_location",
  "bundle_location" : "bundle_location",
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "htmllibmanager.defaultuserthemename" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "htmllibmanager.gzip" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "htmllibmanager.clientmanager" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "htmllibmanager.debug" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "htmllibmanager.maxage" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "htmllibmanager.minify" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "htmllibmanager.defaultthemename" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "htmllibmanager.path.list" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "htmllibmanager.firebuglite.path" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "htmllibmanager.debug.init.js" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "htmllibmanager.maxDataUriSize" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "htmllibmanager.debug.console" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "htmllibmanager.forceCQUrlInfo" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "htmllibmanager.timing" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter htmllibmanagerClientmanager: (query)  (optional)
     - parameter htmllibmanagerDebug: (query)  (optional)
     - parameter htmllibmanagerDebugConsole: (query)  (optional)
     - parameter htmllibmanagerDebugInitJs: (query)  (optional)
     - parameter htmllibmanagerDefaultthemename: (query)  (optional)
     - parameter htmllibmanagerDefaultuserthemename: (query)  (optional)
     - parameter htmllibmanagerFirebuglitePath: (query)  (optional)
     - parameter htmllibmanagerForceCQUrlInfo: (query)  (optional)
     - parameter htmllibmanagerGzip: (query)  (optional)
     - parameter htmllibmanagerMaxage: (query)  (optional)
     - parameter htmllibmanagerMaxDataUriSize: (query)  (optional)
     - parameter htmllibmanagerMinify: (query)  (optional)
     - parameter htmllibmanagerPathList: (query)  (optional)
     - parameter htmllibmanagerTiming: (query)  (optional)

     - returns: RequestBuilder<ComDayCqWidgetImplHtmlLibraryManagerImplInfo> 
     */
    public class func comDayCqWidgetImplHtmlLibraryManagerImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, htmllibmanagerClientmanager: String? = nil, htmllibmanagerDebug: Bool? = nil, htmllibmanagerDebugConsole: Bool? = nil, htmllibmanagerDebugInitJs: String? = nil, htmllibmanagerDefaultthemename: String? = nil, htmllibmanagerDefaultuserthemename: String? = nil, htmllibmanagerFirebuglitePath: String? = nil, htmllibmanagerForceCQUrlInfo: Bool? = nil, htmllibmanagerGzip: Bool? = nil, htmllibmanagerMaxage: Int32? = nil, htmllibmanagerMaxDataUriSize: Int32? = nil, htmllibmanagerMinify: Bool? = nil, htmllibmanagerPathList: [String]? = nil, htmllibmanagerTiming: Bool? = nil) -> RequestBuilder<ComDayCqWidgetImplHtmlLibraryManagerImplInfo> {
        let path = "/system/console/configMgr/com.day.cq.widget.impl.HtmlLibraryManagerImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "htmllibmanager.clientmanager": htmllibmanagerClientmanager,
            "htmllibmanager.debug": htmllibmanagerDebug,
            "htmllibmanager.debug.console": htmllibmanagerDebugConsole,
            "htmllibmanager.debug.init.js": htmllibmanagerDebugInitJs,
            "htmllibmanager.defaultthemename": htmllibmanagerDefaultthemename,
            "htmllibmanager.defaultuserthemename": htmllibmanagerDefaultuserthemename,
            "htmllibmanager.firebuglite.path": htmllibmanagerFirebuglitePath,
            "htmllibmanager.forceCQUrlInfo": htmllibmanagerForceCQUrlInfo,
            "htmllibmanager.gzip": htmllibmanagerGzip,
            "htmllibmanager.maxage": htmllibmanagerMaxage?.encodeToJSON(),
            "htmllibmanager.maxDataUriSize": htmllibmanagerMaxDataUriSize?.encodeToJSON(),
            "htmllibmanager.minify": htmllibmanagerMinify,
            "htmllibmanager.path.list": htmllibmanagerPathList,
            "htmllibmanager.timing": htmllibmanagerTiming
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqWidgetImplHtmlLibraryManagerImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter extendableWidgets: (query)  (optional)
     - parameter widgetextensionproviderDebug: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqWidgetImplWidgetExtensionProviderImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, extendableWidgets: [String]? = nil, widgetextensionproviderDebug: Bool? = nil, completion: ((data: ComDayCqWidgetImplWidgetExtensionProviderImplInfo?, error: ErrorType?) -> Void)) {
        comDayCqWidgetImplWidgetExtensionProviderImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, extendableWidgets: extendableWidgets, widgetextensionproviderDebug: widgetextensionproviderDebug).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.widget.impl.WidgetExtensionProviderImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "service_location" : "service_location",
  "bundle_location" : "bundle_location",
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "extendable.widgets" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "widgetextensionprovider.debug" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter extendableWidgets: (query)  (optional)
     - parameter widgetextensionproviderDebug: (query)  (optional)

     - returns: RequestBuilder<ComDayCqWidgetImplWidgetExtensionProviderImplInfo> 
     */
    public class func comDayCqWidgetImplWidgetExtensionProviderImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, extendableWidgets: [String]? = nil, widgetextensionproviderDebug: Bool? = nil) -> RequestBuilder<ComDayCqWidgetImplWidgetExtensionProviderImplInfo> {
        let path = "/system/console/configMgr/com.day.cq.widget.impl.WidgetExtensionProviderImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "extendable.widgets": extendableWidgets,
            "widgetextensionprovider.debug": widgetextensionproviderDebug
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqWidgetImplWidgetExtensionProviderImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter fromAddress: (query)  (optional)
     - parameter hostPrefix: (query)  (optional)
     - parameter notifyOnabort: (query)  (optional)
     - parameter notifyOncomplete: (query)  (optional)
     - parameter notifyOncontainercomplete: (query)  (optional)
     - parameter notifyUseronly: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqWorkflowImplEmailEMailNotificationService(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, fromAddress: String? = nil, hostPrefix: String? = nil, notifyOnabort: Bool? = nil, notifyOncomplete: Bool? = nil, notifyOncontainercomplete: Bool? = nil, notifyUseronly: Bool? = nil, completion: ((data: ComDayCqWorkflowImplEmailEMailNotificationServiceInfo?, error: ErrorType?) -> Void)) {
        comDayCqWorkflowImplEmailEMailNotificationServiceWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, fromAddress: fromAddress, hostPrefix: hostPrefix, notifyOnabort: notifyOnabort, notifyOncomplete: notifyOncomplete, notifyOncontainercomplete: notifyOncontainercomplete, notifyUseronly: notifyUseronly).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.workflow.impl.email.EMailNotificationService     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "host.prefix" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "notify.onabort" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "notify.oncomplete" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "notify.useronly" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "from.address" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "notify.oncontainercomplete" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter fromAddress: (query)  (optional)
     - parameter hostPrefix: (query)  (optional)
     - parameter notifyOnabort: (query)  (optional)
     - parameter notifyOncomplete: (query)  (optional)
     - parameter notifyOncontainercomplete: (query)  (optional)
     - parameter notifyUseronly: (query)  (optional)

     - returns: RequestBuilder<ComDayCqWorkflowImplEmailEMailNotificationServiceInfo> 
     */
    public class func comDayCqWorkflowImplEmailEMailNotificationServiceWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, fromAddress: String? = nil, hostPrefix: String? = nil, notifyOnabort: Bool? = nil, notifyOncomplete: Bool? = nil, notifyOncontainercomplete: Bool? = nil, notifyUseronly: Bool? = nil) -> RequestBuilder<ComDayCqWorkflowImplEmailEMailNotificationServiceInfo> {
        let path = "/system/console/configMgr/com.day.cq.workflow.impl.email.EMailNotificationService"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "from.address": fromAddress,
            "host.prefix": hostPrefix,
            "notify.onabort": notifyOnabort,
            "notify.oncomplete": notifyOncomplete,
            "notify.oncontainercomplete": notifyOncontainercomplete,
            "notify.useronly": notifyUseronly
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqWorkflowImplEmailEMailNotificationServiceInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter notifyOnupdate: (query)  (optional)
     - parameter notifyOncomplete: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCqWorkflowImplEmailTaskEMailNotificationService(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, notifyOnupdate: Bool? = nil, notifyOncomplete: Bool? = nil, completion: ((data: ComDayCqWorkflowImplEmailTaskEMailNotificationServiceInfo?, error: ErrorType?) -> Void)) {
        comDayCqWorkflowImplEmailTaskEMailNotificationServiceWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, notifyOnupdate: notifyOnupdate, notifyOncomplete: notifyOncomplete).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.cq.workflow.impl.email.TaskEMailNotificationService     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "notify.onupdate" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "notify.oncomplete" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter notifyOnupdate: (query)  (optional)
     - parameter notifyOncomplete: (query)  (optional)

     - returns: RequestBuilder<ComDayCqWorkflowImplEmailTaskEMailNotificationServiceInfo> 
     */
    public class func comDayCqWorkflowImplEmailTaskEMailNotificationServiceWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, notifyOnupdate: Bool? = nil, notifyOncomplete: Bool? = nil) -> RequestBuilder<ComDayCqWorkflowImplEmailTaskEMailNotificationServiceInfo> {
        let path = "/system/console/configMgr/com.day.cq.workflow.impl.email.TaskEMailNotificationService"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "notify.onupdate": notifyOnupdate,
            "notify.oncomplete": notifyOncomplete
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCqWorkflowImplEmailTaskEMailNotificationServiceInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter path: (query)  (optional)
     - parameter tokenRequiredAttr: (query)  (optional)
     - parameter tokenAlternateUrl: (query)  (optional)
     - parameter tokenEncapsulated: (query)  (optional)
     - parameter skipTokenRefresh: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCrxSecurityTokenImplImplTokenAuthenticationHandler(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, path: String? = nil, tokenRequiredAttr: String? = nil, tokenAlternateUrl: String? = nil, tokenEncapsulated: Bool? = nil, skipTokenRefresh: [String]? = nil, completion: ((data: ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerInfo?, error: ErrorType?) -> Void)) {
        comDayCrxSecurityTokenImplImplTokenAuthenticationHandlerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, path: path, tokenRequiredAttr: tokenRequiredAttr, tokenAlternateUrl: tokenAlternateUrl, tokenEncapsulated: tokenEncapsulated, skipTokenRefresh: skipTokenRefresh).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.crx.security.token.impl.impl.TokenAuthenticationHandler     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "service_location" : "service_location",
  "bundle_location" : "bundle_location",
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "path" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "token.encapsulated" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "token.alternate.url" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "token.required.attr" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : {
        "values" : "",
        "labels" : ""
      },
      "value" : ""
    },
    "skip.token.refresh" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter path: (query)  (optional)
     - parameter tokenRequiredAttr: (query)  (optional)
     - parameter tokenAlternateUrl: (query)  (optional)
     - parameter tokenEncapsulated: (query)  (optional)
     - parameter skipTokenRefresh: (query)  (optional)

     - returns: RequestBuilder<ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerInfo> 
     */
    public class func comDayCrxSecurityTokenImplImplTokenAuthenticationHandlerWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, path: String? = nil, tokenRequiredAttr: String? = nil, tokenAlternateUrl: String? = nil, tokenEncapsulated: Bool? = nil, skipTokenRefresh: [String]? = nil) -> RequestBuilder<ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerInfo> {
        let path = "/system/console/configMgr/com.day.crx.security.token.impl.impl.TokenAuthenticationHandler"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "path": path,
            "token.required.attr": tokenRequiredAttr,
            "token.alternate.url": tokenAlternateUrl,
            "token.encapsulated": tokenEncapsulated,
            "skip.token.refresh": skipTokenRefresh
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter enableTokenCleanupTask: (query)  (optional)
     - parameter schedulerExpression: (query)  (optional)
     - parameter batchSize: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func comDayCrxSecurityTokenImplTokenCleanupTask(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, enableTokenCleanupTask: Bool? = nil, schedulerExpression: String? = nil, batchSize: Int32? = nil, completion: ((data: ComDayCrxSecurityTokenImplTokenCleanupTaskInfo?, error: ErrorType?) -> Void)) {
        comDayCrxSecurityTokenImplTokenCleanupTaskWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, enableTokenCleanupTask: enableTokenCleanupTask, schedulerExpression: schedulerExpression, batchSize: batchSize).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.day.crx.security.token.impl.TokenCleanupTask     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "batch.size" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "scheduler.expression" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "enable.token.cleanup.task" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter enableTokenCleanupTask: (query)  (optional)
     - parameter schedulerExpression: (query)  (optional)
     - parameter batchSize: (query)  (optional)

     - returns: RequestBuilder<ComDayCrxSecurityTokenImplTokenCleanupTaskInfo> 
     */
    public class func comDayCrxSecurityTokenImplTokenCleanupTaskWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, enableTokenCleanupTask: Bool? = nil, schedulerExpression: String? = nil, batchSize: Int32? = nil) -> RequestBuilder<ComDayCrxSecurityTokenImplTokenCleanupTaskInfo> {
        let path = "/system/console/configMgr/com.day.crx.security.token.impl.TokenCleanupTask"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "enable.token.cleanup.task": enableTokenCleanupTask,
            "scheduler.expression": schedulerExpression,
            "batch.size": batchSize?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ComDayCrxSecurityTokenImplTokenCleanupTaskInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter supportedLocales: (query)  (optional)
     - parameter localizableProperties: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func guideLocalizationService(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, supportedLocales: [String]? = nil, localizableProperties: [String]? = nil, completion: ((data: GuideLocalizationServiceInfo?, error: ErrorType?) -> Void)) {
        guideLocalizationServiceWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, supportedLocales: supportedLocales, localizableProperties: localizableProperties).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/Guide Localization Service     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "supportedLocales" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "Localizable Properties" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter supportedLocales: (query)  (optional)
     - parameter localizableProperties: (query)  (optional)

     - returns: RequestBuilder<GuideLocalizationServiceInfo> 
     */
    public class func guideLocalizationServiceWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, supportedLocales: [String]? = nil, localizableProperties: [String]? = nil) -> RequestBuilder<GuideLocalizationServiceInfo> {
        let path = "/system/console/configMgr/Guide Localization Service"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "supportedLocales": supportedLocales,
            "Localizable Properties": localizableProperties
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<GuideLocalizationServiceInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter priority: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func messagingUserComponentFactory(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, priority: Int32? = nil, completion: ((data: MessagingUserComponentFactoryInfo?, error: ErrorType?) -> Void)) {
        messagingUserComponentFactoryWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, priority: priority).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/MessagingUserComponentFactory     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "priority" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter priority: (query)  (optional)

     - returns: RequestBuilder<MessagingUserComponentFactoryInfo> 
     */
    public class func messagingUserComponentFactoryWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, priority: Int32? = nil) -> RequestBuilder<MessagingUserComponentFactoryInfo> {
        let path = "/system/console/configMgr/MessagingUserComponentFactory"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "priority": priority?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<MessagingUserComponentFactoryInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter attributeChangeNotificationEnabled: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheAriesJmxFrameworkStateConfig(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, attributeChangeNotificationEnabled: Bool? = nil, completion: ((data: OrgApacheAriesJmxFrameworkStateConfigInfo?, error: ErrorType?) -> Void)) {
        orgApacheAriesJmxFrameworkStateConfigWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, attributeChangeNotificationEnabled: attributeChangeNotificationEnabled).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.aries.jmx.framework.StateConfig     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "service_location" : "service_location",
  "bundle_location" : "bundle_location",
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "attributeChangeNotificationEnabled" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter attributeChangeNotificationEnabled: (query)  (optional)

     - returns: RequestBuilder<OrgApacheAriesJmxFrameworkStateConfigInfo> 
     */
    public class func orgApacheAriesJmxFrameworkStateConfigWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, attributeChangeNotificationEnabled: Bool? = nil) -> RequestBuilder<OrgApacheAriesJmxFrameworkStateConfigInfo> {
        let path = "/system/console/configMgr/org.apache.aries.jmx.framework.StateConfig"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "attributeChangeNotificationEnabled": attributeChangeNotificationEnabled
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheAriesJmxFrameworkStateConfigInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter orgApacheFelixEventadminThreadPoolSize: (query)  (optional)
     - parameter orgApacheFelixEventadminAsyncToSyncThreadRatio: (query)  (optional)
     - parameter orgApacheFelixEventadminTimeout: (query)  (optional)
     - parameter orgApacheFelixEventadminRequireTopic: (query)  (optional)
     - parameter orgApacheFelixEventadminIgnoreTimeout: (query)  (optional)
     - parameter orgApacheFelixEventadminIgnoreTopic: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheFelixEventadminImplEventAdmin(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, orgApacheFelixEventadminThreadPoolSize: Int32? = nil, orgApacheFelixEventadminAsyncToSyncThreadRatio: Double? = nil, orgApacheFelixEventadminTimeout: Int32? = nil, orgApacheFelixEventadminRequireTopic: Bool? = nil, orgApacheFelixEventadminIgnoreTimeout: [String]? = nil, orgApacheFelixEventadminIgnoreTopic: [String]? = nil, completion: ((data: OrgApacheFelixEventadminImplEventAdminInfo?, error: ErrorType?) -> Void)) {
        orgApacheFelixEventadminImplEventAdminWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, orgApacheFelixEventadminThreadPoolSize: orgApacheFelixEventadminThreadPoolSize, orgApacheFelixEventadminAsyncToSyncThreadRatio: orgApacheFelixEventadminAsyncToSyncThreadRatio, orgApacheFelixEventadminTimeout: orgApacheFelixEventadminTimeout, orgApacheFelixEventadminRequireTopic: orgApacheFelixEventadminRequireTopic, orgApacheFelixEventadminIgnoreTimeout: orgApacheFelixEventadminIgnoreTimeout, orgApacheFelixEventadminIgnoreTopic: orgApacheFelixEventadminIgnoreTopic).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.felix.eventadmin.impl.EventAdmin     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "service_location" : "service_location",
  "bundle_location" : "bundle_location",
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "org.apache.felix.eventadmin.IgnoreTopic" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "org.apache.felix.eventadmin.IgnoreTimeout" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "org.apache.felix.eventadmin.AsyncToSyncThreadRatio" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : 6.02745618307040320615897144307382404804229736328125
    },
    "org.apache.felix.eventadmin.Timeout" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "org.apache.felix.eventadmin.RequireTopic" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "org.apache.felix.eventadmin.ThreadPoolSize" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter orgApacheFelixEventadminThreadPoolSize: (query)  (optional)
     - parameter orgApacheFelixEventadminAsyncToSyncThreadRatio: (query)  (optional)
     - parameter orgApacheFelixEventadminTimeout: (query)  (optional)
     - parameter orgApacheFelixEventadminRequireTopic: (query)  (optional)
     - parameter orgApacheFelixEventadminIgnoreTimeout: (query)  (optional)
     - parameter orgApacheFelixEventadminIgnoreTopic: (query)  (optional)

     - returns: RequestBuilder<OrgApacheFelixEventadminImplEventAdminInfo> 
     */
    public class func orgApacheFelixEventadminImplEventAdminWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, orgApacheFelixEventadminThreadPoolSize: Int32? = nil, orgApacheFelixEventadminAsyncToSyncThreadRatio: Double? = nil, orgApacheFelixEventadminTimeout: Int32? = nil, orgApacheFelixEventadminRequireTopic: Bool? = nil, orgApacheFelixEventadminIgnoreTimeout: [String]? = nil, orgApacheFelixEventadminIgnoreTopic: [String]? = nil) -> RequestBuilder<OrgApacheFelixEventadminImplEventAdminInfo> {
        let path = "/system/console/configMgr/org.apache.felix.eventadmin.impl.EventAdmin"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "org.apache.felix.eventadmin.ThreadPoolSize": orgApacheFelixEventadminThreadPoolSize?.encodeToJSON(),
            "org.apache.felix.eventadmin.AsyncToSyncThreadRatio": orgApacheFelixEventadminAsyncToSyncThreadRatio,
            "org.apache.felix.eventadmin.Timeout": orgApacheFelixEventadminTimeout?.encodeToJSON(),
            "org.apache.felix.eventadmin.RequireTopic": orgApacheFelixEventadminRequireTopic,
            "org.apache.felix.eventadmin.IgnoreTimeout": orgApacheFelixEventadminIgnoreTimeout,
            "org.apache.felix.eventadmin.IgnoreTopic": orgApacheFelixEventadminIgnoreTopic
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheFelixEventadminImplEventAdminInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter orgApacheFelixHttpHost: (query)  (optional)
     - parameter orgApacheFelixHttpEnable: (query)  (optional)
     - parameter orgOsgiServiceHttpPort: (query)  (optional)
     - parameter orgApacheFelixHttpTimeout: (query)  (optional)
     - parameter orgApacheFelixHttpsEnable: (query)  (optional)
     - parameter orgOsgiServiceHttpPortSecure: (query)  (optional)
     - parameter orgApacheFelixHttpsKeystore: (query)  (optional)
     - parameter orgApacheFelixHttpsKeystorePassword: (query)  (optional)
     - parameter orgApacheFelixHttpsKeystoreKeyPassword: (query)  (optional)
     - parameter orgApacheFelixHttpsTruststore: (query)  (optional)
     - parameter orgApacheFelixHttpsTruststorePassword: (query)  (optional)
     - parameter orgApacheFelixHttpsClientcertificate: (query)  (optional)
     - parameter orgApacheFelixHttpContextPath: (query)  (optional)
     - parameter orgApacheFelixHttpMbeans: (query)  (optional)
     - parameter orgApacheFelixHttpSessionTimeout: (query)  (optional)
     - parameter orgApacheFelixHttpJettyThreadpoolMax: (query)  (optional)
     - parameter orgApacheFelixHttpJettyAcceptors: (query)  (optional)
     - parameter orgApacheFelixHttpJettySelectors: (query)  (optional)
     - parameter orgApacheFelixHttpJettyHeaderBufferSize: (query)  (optional)
     - parameter orgApacheFelixHttpJettyRequestBufferSize: (query)  (optional)
     - parameter orgApacheFelixHttpJettyResponseBufferSize: (query)  (optional)
     - parameter orgApacheFelixHttpJettyMaxFormSize: (query)  (optional)
     - parameter orgApacheFelixHttpPathExclusions: (query)  (optional)
     - parameter orgApacheFelixHttpsJettyCiphersuitesExcluded: (query)  (optional)
     - parameter orgApacheFelixHttpsJettyCiphersuitesIncluded: (query)  (optional)
     - parameter orgApacheFelixHttpJettySendServerHeader: (query)  (optional)
     - parameter orgApacheFelixHttpsJettyProtocolsIncluded: (query)  (optional)
     - parameter orgApacheFelixHttpsJettyProtocolsExcluded: (query)  (optional)
     - parameter orgApacheFelixProxyLoadBalancerConnectionEnable: (query)  (optional)
     - parameter orgApacheFelixHttpsJettyRenegotiateAllowed: (query)  (optional)
     - parameter orgApacheFelixHttpsJettySessionCookieHttpOnly: (query)  (optional)
     - parameter orgApacheFelixHttpsJettySessionCookieSecure: (query)  (optional)
     - parameter orgEclipseJettyServletSessionIdPathParameterName: (query)  (optional)
     - parameter orgEclipseJettyServletCheckingRemoteSessionIdEncoding: (query)  (optional)
     - parameter orgEclipseJettyServletSessionCookie: (query)  (optional)
     - parameter orgEclipseJettyServletSessionDomain: (query)  (optional)
     - parameter orgEclipseJettyServletSessionPath: (query)  (optional)
     - parameter orgEclipseJettyServletMaxAge: (query)  (optional)
     - parameter orgApacheFelixHttpName: (query)  (optional)
     - parameter orgApacheFelixJettyGziphandlerEnable: (query)  (optional)
     - parameter orgApacheFelixJettyGzipMinGzipSize: (query)  (optional)
     - parameter orgApacheFelixJettyGzipCompressionLevel: (query)  (optional)
     - parameter orgApacheFelixJettyGzipInflateBufferSize: (query)  (optional)
     - parameter orgApacheFelixJettyGzipSyncFlush: (query)  (optional)
     - parameter orgApacheFelixJettyGzipExcludedUserAgents: (query)  (optional)
     - parameter orgApacheFelixJettyGzipIncludedMethods: (query)  (optional)
     - parameter orgApacheFelixJettyGzipExcludedMethods: (query)  (optional)
     - parameter orgApacheFelixJettyGzipIncludedPaths: (query)  (optional)
     - parameter orgApacheFelixJettyGzipExcludedPaths: (query)  (optional)
     - parameter orgApacheFelixJettyGzipIncludedMimeTypes: (query)  (optional)
     - parameter orgApacheFelixJettyGzipExcludedMimeTypes: (query)  (optional)
     - parameter orgApacheFelixHttpSessionInvalidate: (query)  (optional)
     - parameter orgApacheFelixHttpSessionUniqueid: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheFelixHttp(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, orgApacheFelixHttpHost: String? = nil, orgApacheFelixHttpEnable: Bool? = nil, orgOsgiServiceHttpPort: Int32? = nil, orgApacheFelixHttpTimeout: Int32? = nil, orgApacheFelixHttpsEnable: Bool? = nil, orgOsgiServiceHttpPortSecure: Int32? = nil, orgApacheFelixHttpsKeystore: String? = nil, orgApacheFelixHttpsKeystorePassword: String? = nil, orgApacheFelixHttpsKeystoreKeyPassword: String? = nil, orgApacheFelixHttpsTruststore: String? = nil, orgApacheFelixHttpsTruststorePassword: String? = nil, orgApacheFelixHttpsClientcertificate: String? = nil, orgApacheFelixHttpContextPath: String? = nil, orgApacheFelixHttpMbeans: Bool? = nil, orgApacheFelixHttpSessionTimeout: Int32? = nil, orgApacheFelixHttpJettyThreadpoolMax: Int32? = nil, orgApacheFelixHttpJettyAcceptors: Int32? = nil, orgApacheFelixHttpJettySelectors: Int32? = nil, orgApacheFelixHttpJettyHeaderBufferSize: Int32? = nil, orgApacheFelixHttpJettyRequestBufferSize: Int32? = nil, orgApacheFelixHttpJettyResponseBufferSize: Int32? = nil, orgApacheFelixHttpJettyMaxFormSize: Int32? = nil, orgApacheFelixHttpPathExclusions: [String]? = nil, orgApacheFelixHttpsJettyCiphersuitesExcluded: [String]? = nil, orgApacheFelixHttpsJettyCiphersuitesIncluded: [String]? = nil, orgApacheFelixHttpJettySendServerHeader: Bool? = nil, orgApacheFelixHttpsJettyProtocolsIncluded: [String]? = nil, orgApacheFelixHttpsJettyProtocolsExcluded: [String]? = nil, orgApacheFelixProxyLoadBalancerConnectionEnable: Bool? = nil, orgApacheFelixHttpsJettyRenegotiateAllowed: Bool? = nil, orgApacheFelixHttpsJettySessionCookieHttpOnly: Bool? = nil, orgApacheFelixHttpsJettySessionCookieSecure: Bool? = nil, orgEclipseJettyServletSessionIdPathParameterName: String? = nil, orgEclipseJettyServletCheckingRemoteSessionIdEncoding: Bool? = nil, orgEclipseJettyServletSessionCookie: String? = nil, orgEclipseJettyServletSessionDomain: String? = nil, orgEclipseJettyServletSessionPath: String? = nil, orgEclipseJettyServletMaxAge: Int32? = nil, orgApacheFelixHttpName: String? = nil, orgApacheFelixJettyGziphandlerEnable: Bool? = nil, orgApacheFelixJettyGzipMinGzipSize: Int32? = nil, orgApacheFelixJettyGzipCompressionLevel: Int32? = nil, orgApacheFelixJettyGzipInflateBufferSize: Int32? = nil, orgApacheFelixJettyGzipSyncFlush: Bool? = nil, orgApacheFelixJettyGzipExcludedUserAgents: [String]? = nil, orgApacheFelixJettyGzipIncludedMethods: [String]? = nil, orgApacheFelixJettyGzipExcludedMethods: [String]? = nil, orgApacheFelixJettyGzipIncludedPaths: [String]? = nil, orgApacheFelixJettyGzipExcludedPaths: [String]? = nil, orgApacheFelixJettyGzipIncludedMimeTypes: [String]? = nil, orgApacheFelixJettyGzipExcludedMimeTypes: [String]? = nil, orgApacheFelixHttpSessionInvalidate: Bool? = nil, orgApacheFelixHttpSessionUniqueid: Bool? = nil, completion: ((data: OrgApacheFelixHttpInfo?, error: ErrorType?) -> Void)) {
        orgApacheFelixHttpWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, orgApacheFelixHttpHost: orgApacheFelixHttpHost, orgApacheFelixHttpEnable: orgApacheFelixHttpEnable, orgOsgiServiceHttpPort: orgOsgiServiceHttpPort, orgApacheFelixHttpTimeout: orgApacheFelixHttpTimeout, orgApacheFelixHttpsEnable: orgApacheFelixHttpsEnable, orgOsgiServiceHttpPortSecure: orgOsgiServiceHttpPortSecure, orgApacheFelixHttpsKeystore: orgApacheFelixHttpsKeystore, orgApacheFelixHttpsKeystorePassword: orgApacheFelixHttpsKeystorePassword, orgApacheFelixHttpsKeystoreKeyPassword: orgApacheFelixHttpsKeystoreKeyPassword, orgApacheFelixHttpsTruststore: orgApacheFelixHttpsTruststore, orgApacheFelixHttpsTruststorePassword: orgApacheFelixHttpsTruststorePassword, orgApacheFelixHttpsClientcertificate: orgApacheFelixHttpsClientcertificate, orgApacheFelixHttpContextPath: orgApacheFelixHttpContextPath, orgApacheFelixHttpMbeans: orgApacheFelixHttpMbeans, orgApacheFelixHttpSessionTimeout: orgApacheFelixHttpSessionTimeout, orgApacheFelixHttpJettyThreadpoolMax: orgApacheFelixHttpJettyThreadpoolMax, orgApacheFelixHttpJettyAcceptors: orgApacheFelixHttpJettyAcceptors, orgApacheFelixHttpJettySelectors: orgApacheFelixHttpJettySelectors, orgApacheFelixHttpJettyHeaderBufferSize: orgApacheFelixHttpJettyHeaderBufferSize, orgApacheFelixHttpJettyRequestBufferSize: orgApacheFelixHttpJettyRequestBufferSize, orgApacheFelixHttpJettyResponseBufferSize: orgApacheFelixHttpJettyResponseBufferSize, orgApacheFelixHttpJettyMaxFormSize: orgApacheFelixHttpJettyMaxFormSize, orgApacheFelixHttpPathExclusions: orgApacheFelixHttpPathExclusions, orgApacheFelixHttpsJettyCiphersuitesExcluded: orgApacheFelixHttpsJettyCiphersuitesExcluded, orgApacheFelixHttpsJettyCiphersuitesIncluded: orgApacheFelixHttpsJettyCiphersuitesIncluded, orgApacheFelixHttpJettySendServerHeader: orgApacheFelixHttpJettySendServerHeader, orgApacheFelixHttpsJettyProtocolsIncluded: orgApacheFelixHttpsJettyProtocolsIncluded, orgApacheFelixHttpsJettyProtocolsExcluded: orgApacheFelixHttpsJettyProtocolsExcluded, orgApacheFelixProxyLoadBalancerConnectionEnable: orgApacheFelixProxyLoadBalancerConnectionEnable, orgApacheFelixHttpsJettyRenegotiateAllowed: orgApacheFelixHttpsJettyRenegotiateAllowed, orgApacheFelixHttpsJettySessionCookieHttpOnly: orgApacheFelixHttpsJettySessionCookieHttpOnly, orgApacheFelixHttpsJettySessionCookieSecure: orgApacheFelixHttpsJettySessionCookieSecure, orgEclipseJettyServletSessionIdPathParameterName: orgEclipseJettyServletSessionIdPathParameterName, orgEclipseJettyServletCheckingRemoteSessionIdEncoding: orgEclipseJettyServletCheckingRemoteSessionIdEncoding, orgEclipseJettyServletSessionCookie: orgEclipseJettyServletSessionCookie, orgEclipseJettyServletSessionDomain: orgEclipseJettyServletSessionDomain, orgEclipseJettyServletSessionPath: orgEclipseJettyServletSessionPath, orgEclipseJettyServletMaxAge: orgEclipseJettyServletMaxAge, orgApacheFelixHttpName: orgApacheFelixHttpName, orgApacheFelixJettyGziphandlerEnable: orgApacheFelixJettyGziphandlerEnable, orgApacheFelixJettyGzipMinGzipSize: orgApacheFelixJettyGzipMinGzipSize, orgApacheFelixJettyGzipCompressionLevel: orgApacheFelixJettyGzipCompressionLevel, orgApacheFelixJettyGzipInflateBufferSize: orgApacheFelixJettyGzipInflateBufferSize, orgApacheFelixJettyGzipSyncFlush: orgApacheFelixJettyGzipSyncFlush, orgApacheFelixJettyGzipExcludedUserAgents: orgApacheFelixJettyGzipExcludedUserAgents, orgApacheFelixJettyGzipIncludedMethods: orgApacheFelixJettyGzipIncludedMethods, orgApacheFelixJettyGzipExcludedMethods: orgApacheFelixJettyGzipExcludedMethods, orgApacheFelixJettyGzipIncludedPaths: orgApacheFelixJettyGzipIncludedPaths, orgApacheFelixJettyGzipExcludedPaths: orgApacheFelixJettyGzipExcludedPaths, orgApacheFelixJettyGzipIncludedMimeTypes: orgApacheFelixJettyGzipIncludedMimeTypes, orgApacheFelixJettyGzipExcludedMimeTypes: orgApacheFelixJettyGzipExcludedMimeTypes, orgApacheFelixHttpSessionInvalidate: orgApacheFelixHttpSessionInvalidate, orgApacheFelixHttpSessionUniqueid: orgApacheFelixHttpSessionUniqueid).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.felix.http     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "service_location" : "service_location",
  "bundle_location" : "bundle_location",
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "org.apache.felix.http.jetty.sendServerHeader" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "org.apache.felix.jetty.gzip.includedPaths" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "org.apache.felix.http.enable" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "org.osgi.service.http.port" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "org.apache.felix.http.jetty.selectors" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "org.apache.felix.http.jetty.maxFormSize" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "org.apache.felix.jetty.gzip.minGzipSize" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "org.apache.felix.jetty.gzip.compressionLevel" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "org.apache.felix.http.host" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "org.apache.felix.http.session.timeout" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "org.apache.felix.jetty.gziphandler.enable" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "org.apache.felix.https.truststore.password" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "org.eclipse.jetty.servlet.SessionIdPathParameterName" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "org.apache.felix.http.timeout" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "org.eclipse.jetty.servlet.SessionCookie" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "org.apache.felix.jetty.gzip.inflateBufferSize" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "org.apache.felix.jetty.gzip.includedMimeTypes" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "org.apache.felix.jetty.gzip.includedMethods" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "org.apache.felix.jetty.gzip.excludedMimeTypes" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "org.apache.felix.http.jetty.headerBufferSize" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "org.apache.felix.https.jetty.ciphersuites.excluded" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "org.apache.felix.https.truststore" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "org.apache.felix.jetty.gzip.excludedMethods" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "org.apache.felix.https.keystore.password" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "org.apache.felix.http.mbeans" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "org.apache.felix.jetty.gzip.excludedPaths" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "org.apache.felix.http.context_path" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "org.apache.felix.http.session.invalidate" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "org.apache.felix.https.jetty.ciphersuites.included" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "org.apache.felix.http.session.uniqueid" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "org.eclipse.jetty.servlet.SessionDomain" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "org.apache.felix.http.jetty.responseBufferSize" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "org.apache.felix.http.path_exclusions" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "org.eclipse.jetty.servlet.MaxAge" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "org.apache.felix.http.jetty.threadpool.max" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "org.osgi.service.http.port.secure" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "org.apache.felix.jetty.gzip.excludedUserAgents" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "org.apache.felix.http.jetty.requestBufferSize" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "org.apache.felix.https.enable" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "org.apache.felix.https.jetty.session.cookie.httpOnly" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "org.apache.felix.https.keystore.key.password" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "org.apache.felix.http.name" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "org.apache.felix.jetty.gzip.syncFlush" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "org.eclipse.jetty.servlet.CheckingRemoteSessionIdEncoding" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "org.apache.felix.https.jetty.protocols.excluded" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "org.eclipse.jetty.servlet.SessionPath" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "org.apache.felix.https.keystore" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "org.apache.felix.http.jetty.acceptors" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "org.apache.felix.https.jetty.renegotiateAllowed" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "org.apache.felix.https.jetty.session.cookie.secure" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "org.apache.felix.https.clientcertificate" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : {
        "values" : "",
        "labels" : ""
      },
      "value" : ""
    },
    "org.apache.felix.proxy.load.balancer.connection.enable" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "org.apache.felix.https.jetty.protocols.included" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter orgApacheFelixHttpHost: (query)  (optional)
     - parameter orgApacheFelixHttpEnable: (query)  (optional)
     - parameter orgOsgiServiceHttpPort: (query)  (optional)
     - parameter orgApacheFelixHttpTimeout: (query)  (optional)
     - parameter orgApacheFelixHttpsEnable: (query)  (optional)
     - parameter orgOsgiServiceHttpPortSecure: (query)  (optional)
     - parameter orgApacheFelixHttpsKeystore: (query)  (optional)
     - parameter orgApacheFelixHttpsKeystorePassword: (query)  (optional)
     - parameter orgApacheFelixHttpsKeystoreKeyPassword: (query)  (optional)
     - parameter orgApacheFelixHttpsTruststore: (query)  (optional)
     - parameter orgApacheFelixHttpsTruststorePassword: (query)  (optional)
     - parameter orgApacheFelixHttpsClientcertificate: (query)  (optional)
     - parameter orgApacheFelixHttpContextPath: (query)  (optional)
     - parameter orgApacheFelixHttpMbeans: (query)  (optional)
     - parameter orgApacheFelixHttpSessionTimeout: (query)  (optional)
     - parameter orgApacheFelixHttpJettyThreadpoolMax: (query)  (optional)
     - parameter orgApacheFelixHttpJettyAcceptors: (query)  (optional)
     - parameter orgApacheFelixHttpJettySelectors: (query)  (optional)
     - parameter orgApacheFelixHttpJettyHeaderBufferSize: (query)  (optional)
     - parameter orgApacheFelixHttpJettyRequestBufferSize: (query)  (optional)
     - parameter orgApacheFelixHttpJettyResponseBufferSize: (query)  (optional)
     - parameter orgApacheFelixHttpJettyMaxFormSize: (query)  (optional)
     - parameter orgApacheFelixHttpPathExclusions: (query)  (optional)
     - parameter orgApacheFelixHttpsJettyCiphersuitesExcluded: (query)  (optional)
     - parameter orgApacheFelixHttpsJettyCiphersuitesIncluded: (query)  (optional)
     - parameter orgApacheFelixHttpJettySendServerHeader: (query)  (optional)
     - parameter orgApacheFelixHttpsJettyProtocolsIncluded: (query)  (optional)
     - parameter orgApacheFelixHttpsJettyProtocolsExcluded: (query)  (optional)
     - parameter orgApacheFelixProxyLoadBalancerConnectionEnable: (query)  (optional)
     - parameter orgApacheFelixHttpsJettyRenegotiateAllowed: (query)  (optional)
     - parameter orgApacheFelixHttpsJettySessionCookieHttpOnly: (query)  (optional)
     - parameter orgApacheFelixHttpsJettySessionCookieSecure: (query)  (optional)
     - parameter orgEclipseJettyServletSessionIdPathParameterName: (query)  (optional)
     - parameter orgEclipseJettyServletCheckingRemoteSessionIdEncoding: (query)  (optional)
     - parameter orgEclipseJettyServletSessionCookie: (query)  (optional)
     - parameter orgEclipseJettyServletSessionDomain: (query)  (optional)
     - parameter orgEclipseJettyServletSessionPath: (query)  (optional)
     - parameter orgEclipseJettyServletMaxAge: (query)  (optional)
     - parameter orgApacheFelixHttpName: (query)  (optional)
     - parameter orgApacheFelixJettyGziphandlerEnable: (query)  (optional)
     - parameter orgApacheFelixJettyGzipMinGzipSize: (query)  (optional)
     - parameter orgApacheFelixJettyGzipCompressionLevel: (query)  (optional)
     - parameter orgApacheFelixJettyGzipInflateBufferSize: (query)  (optional)
     - parameter orgApacheFelixJettyGzipSyncFlush: (query)  (optional)
     - parameter orgApacheFelixJettyGzipExcludedUserAgents: (query)  (optional)
     - parameter orgApacheFelixJettyGzipIncludedMethods: (query)  (optional)
     - parameter orgApacheFelixJettyGzipExcludedMethods: (query)  (optional)
     - parameter orgApacheFelixJettyGzipIncludedPaths: (query)  (optional)
     - parameter orgApacheFelixJettyGzipExcludedPaths: (query)  (optional)
     - parameter orgApacheFelixJettyGzipIncludedMimeTypes: (query)  (optional)
     - parameter orgApacheFelixJettyGzipExcludedMimeTypes: (query)  (optional)
     - parameter orgApacheFelixHttpSessionInvalidate: (query)  (optional)
     - parameter orgApacheFelixHttpSessionUniqueid: (query)  (optional)

     - returns: RequestBuilder<OrgApacheFelixHttpInfo> 
     */
    public class func orgApacheFelixHttpWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, orgApacheFelixHttpHost: String? = nil, orgApacheFelixHttpEnable: Bool? = nil, orgOsgiServiceHttpPort: Int32? = nil, orgApacheFelixHttpTimeout: Int32? = nil, orgApacheFelixHttpsEnable: Bool? = nil, orgOsgiServiceHttpPortSecure: Int32? = nil, orgApacheFelixHttpsKeystore: String? = nil, orgApacheFelixHttpsKeystorePassword: String? = nil, orgApacheFelixHttpsKeystoreKeyPassword: String? = nil, orgApacheFelixHttpsTruststore: String? = nil, orgApacheFelixHttpsTruststorePassword: String? = nil, orgApacheFelixHttpsClientcertificate: String? = nil, orgApacheFelixHttpContextPath: String? = nil, orgApacheFelixHttpMbeans: Bool? = nil, orgApacheFelixHttpSessionTimeout: Int32? = nil, orgApacheFelixHttpJettyThreadpoolMax: Int32? = nil, orgApacheFelixHttpJettyAcceptors: Int32? = nil, orgApacheFelixHttpJettySelectors: Int32? = nil, orgApacheFelixHttpJettyHeaderBufferSize: Int32? = nil, orgApacheFelixHttpJettyRequestBufferSize: Int32? = nil, orgApacheFelixHttpJettyResponseBufferSize: Int32? = nil, orgApacheFelixHttpJettyMaxFormSize: Int32? = nil, orgApacheFelixHttpPathExclusions: [String]? = nil, orgApacheFelixHttpsJettyCiphersuitesExcluded: [String]? = nil, orgApacheFelixHttpsJettyCiphersuitesIncluded: [String]? = nil, orgApacheFelixHttpJettySendServerHeader: Bool? = nil, orgApacheFelixHttpsJettyProtocolsIncluded: [String]? = nil, orgApacheFelixHttpsJettyProtocolsExcluded: [String]? = nil, orgApacheFelixProxyLoadBalancerConnectionEnable: Bool? = nil, orgApacheFelixHttpsJettyRenegotiateAllowed: Bool? = nil, orgApacheFelixHttpsJettySessionCookieHttpOnly: Bool? = nil, orgApacheFelixHttpsJettySessionCookieSecure: Bool? = nil, orgEclipseJettyServletSessionIdPathParameterName: String? = nil, orgEclipseJettyServletCheckingRemoteSessionIdEncoding: Bool? = nil, orgEclipseJettyServletSessionCookie: String? = nil, orgEclipseJettyServletSessionDomain: String? = nil, orgEclipseJettyServletSessionPath: String? = nil, orgEclipseJettyServletMaxAge: Int32? = nil, orgApacheFelixHttpName: String? = nil, orgApacheFelixJettyGziphandlerEnable: Bool? = nil, orgApacheFelixJettyGzipMinGzipSize: Int32? = nil, orgApacheFelixJettyGzipCompressionLevel: Int32? = nil, orgApacheFelixJettyGzipInflateBufferSize: Int32? = nil, orgApacheFelixJettyGzipSyncFlush: Bool? = nil, orgApacheFelixJettyGzipExcludedUserAgents: [String]? = nil, orgApacheFelixJettyGzipIncludedMethods: [String]? = nil, orgApacheFelixJettyGzipExcludedMethods: [String]? = nil, orgApacheFelixJettyGzipIncludedPaths: [String]? = nil, orgApacheFelixJettyGzipExcludedPaths: [String]? = nil, orgApacheFelixJettyGzipIncludedMimeTypes: [String]? = nil, orgApacheFelixJettyGzipExcludedMimeTypes: [String]? = nil, orgApacheFelixHttpSessionInvalidate: Bool? = nil, orgApacheFelixHttpSessionUniqueid: Bool? = nil) -> RequestBuilder<OrgApacheFelixHttpInfo> {
        let path = "/system/console/configMgr/org.apache.felix.http"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "org.apache.felix.http.host": orgApacheFelixHttpHost,
            "org.apache.felix.http.enable": orgApacheFelixHttpEnable,
            "org.osgi.service.http.port": orgOsgiServiceHttpPort?.encodeToJSON(),
            "org.apache.felix.http.timeout": orgApacheFelixHttpTimeout?.encodeToJSON(),
            "org.apache.felix.https.enable": orgApacheFelixHttpsEnable,
            "org.osgi.service.http.port.secure": orgOsgiServiceHttpPortSecure?.encodeToJSON(),
            "org.apache.felix.https.keystore": orgApacheFelixHttpsKeystore,
            "org.apache.felix.https.keystore.password": orgApacheFelixHttpsKeystorePassword,
            "org.apache.felix.https.keystore.key.password": orgApacheFelixHttpsKeystoreKeyPassword,
            "org.apache.felix.https.truststore": orgApacheFelixHttpsTruststore,
            "org.apache.felix.https.truststore.password": orgApacheFelixHttpsTruststorePassword,
            "org.apache.felix.https.clientcertificate": orgApacheFelixHttpsClientcertificate,
            "org.apache.felix.http.context_path": orgApacheFelixHttpContextPath,
            "org.apache.felix.http.mbeans": orgApacheFelixHttpMbeans,
            "org.apache.felix.http.session.timeout": orgApacheFelixHttpSessionTimeout?.encodeToJSON(),
            "org.apache.felix.http.jetty.threadpool.max": orgApacheFelixHttpJettyThreadpoolMax?.encodeToJSON(),
            "org.apache.felix.http.jetty.acceptors": orgApacheFelixHttpJettyAcceptors?.encodeToJSON(),
            "org.apache.felix.http.jetty.selectors": orgApacheFelixHttpJettySelectors?.encodeToJSON(),
            "org.apache.felix.http.jetty.headerBufferSize": orgApacheFelixHttpJettyHeaderBufferSize?.encodeToJSON(),
            "org.apache.felix.http.jetty.requestBufferSize": orgApacheFelixHttpJettyRequestBufferSize?.encodeToJSON(),
            "org.apache.felix.http.jetty.responseBufferSize": orgApacheFelixHttpJettyResponseBufferSize?.encodeToJSON(),
            "org.apache.felix.http.jetty.maxFormSize": orgApacheFelixHttpJettyMaxFormSize?.encodeToJSON(),
            "org.apache.felix.http.path_exclusions": orgApacheFelixHttpPathExclusions,
            "org.apache.felix.https.jetty.ciphersuites.excluded": orgApacheFelixHttpsJettyCiphersuitesExcluded,
            "org.apache.felix.https.jetty.ciphersuites.included": orgApacheFelixHttpsJettyCiphersuitesIncluded,
            "org.apache.felix.http.jetty.sendServerHeader": orgApacheFelixHttpJettySendServerHeader,
            "org.apache.felix.https.jetty.protocols.included": orgApacheFelixHttpsJettyProtocolsIncluded,
            "org.apache.felix.https.jetty.protocols.excluded": orgApacheFelixHttpsJettyProtocolsExcluded,
            "org.apache.felix.proxy.load.balancer.connection.enable": orgApacheFelixProxyLoadBalancerConnectionEnable,
            "org.apache.felix.https.jetty.renegotiateAllowed": orgApacheFelixHttpsJettyRenegotiateAllowed,
            "org.apache.felix.https.jetty.session.cookie.httpOnly": orgApacheFelixHttpsJettySessionCookieHttpOnly,
            "org.apache.felix.https.jetty.session.cookie.secure": orgApacheFelixHttpsJettySessionCookieSecure,
            "org.eclipse.jetty.servlet.SessionIdPathParameterName": orgEclipseJettyServletSessionIdPathParameterName,
            "org.eclipse.jetty.servlet.CheckingRemoteSessionIdEncoding": orgEclipseJettyServletCheckingRemoteSessionIdEncoding,
            "org.eclipse.jetty.servlet.SessionCookie": orgEclipseJettyServletSessionCookie,
            "org.eclipse.jetty.servlet.SessionDomain": orgEclipseJettyServletSessionDomain,
            "org.eclipse.jetty.servlet.SessionPath": orgEclipseJettyServletSessionPath,
            "org.eclipse.jetty.servlet.MaxAge": orgEclipseJettyServletMaxAge?.encodeToJSON(),
            "org.apache.felix.http.name": orgApacheFelixHttpName,
            "org.apache.felix.jetty.gziphandler.enable": orgApacheFelixJettyGziphandlerEnable,
            "org.apache.felix.jetty.gzip.minGzipSize": orgApacheFelixJettyGzipMinGzipSize?.encodeToJSON(),
            "org.apache.felix.jetty.gzip.compressionLevel": orgApacheFelixJettyGzipCompressionLevel?.encodeToJSON(),
            "org.apache.felix.jetty.gzip.inflateBufferSize": orgApacheFelixJettyGzipInflateBufferSize?.encodeToJSON(),
            "org.apache.felix.jetty.gzip.syncFlush": orgApacheFelixJettyGzipSyncFlush,
            "org.apache.felix.jetty.gzip.excludedUserAgents": orgApacheFelixJettyGzipExcludedUserAgents,
            "org.apache.felix.jetty.gzip.includedMethods": orgApacheFelixJettyGzipIncludedMethods,
            "org.apache.felix.jetty.gzip.excludedMethods": orgApacheFelixJettyGzipExcludedMethods,
            "org.apache.felix.jetty.gzip.includedPaths": orgApacheFelixJettyGzipIncludedPaths,
            "org.apache.felix.jetty.gzip.excludedPaths": orgApacheFelixJettyGzipExcludedPaths,
            "org.apache.felix.jetty.gzip.includedMimeTypes": orgApacheFelixJettyGzipIncludedMimeTypes,
            "org.apache.felix.jetty.gzip.excludedMimeTypes": orgApacheFelixJettyGzipExcludedMimeTypes,
            "org.apache.felix.http.session.invalidate": orgApacheFelixHttpSessionInvalidate,
            "org.apache.felix.http.session.uniqueid": orgApacheFelixHttpSessionUniqueid
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheFelixHttpInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter sslForwardHeader: (query)  (optional)
     - parameter sslForwardValue: (query)  (optional)
     - parameter sslForwardCertHeader: (query)  (optional)
     - parameter rewriteAbsoluteUrls: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheFelixHttpSslfilterSslFilter(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, sslForwardHeader: String? = nil, sslForwardValue: String? = nil, sslForwardCertHeader: String? = nil, rewriteAbsoluteUrls: Bool? = nil, completion: ((data: OrgApacheFelixHttpSslfilterSslFilterInfo?, error: ErrorType?) -> Void)) {
        orgApacheFelixHttpSslfilterSslFilterWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, sslForwardHeader: sslForwardHeader, sslForwardValue: sslForwardValue, sslForwardCertHeader: sslForwardCertHeader, rewriteAbsoluteUrls: rewriteAbsoluteUrls).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.felix.http.sslfilter.SslFilter     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "ssl-forward.value" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "ssl-forward-cert.header" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "ssl-forward.header" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "rewrite.absolute.urls" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter sslForwardHeader: (query)  (optional)
     - parameter sslForwardValue: (query)  (optional)
     - parameter sslForwardCertHeader: (query)  (optional)
     - parameter rewriteAbsoluteUrls: (query)  (optional)

     - returns: RequestBuilder<OrgApacheFelixHttpSslfilterSslFilterInfo> 
     */
    public class func orgApacheFelixHttpSslfilterSslFilterWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, sslForwardHeader: String? = nil, sslForwardValue: String? = nil, sslForwardCertHeader: String? = nil, rewriteAbsoluteUrls: Bool? = nil) -> RequestBuilder<OrgApacheFelixHttpSslfilterSslFilterInfo> {
        let path = "/system/console/configMgr/org.apache.felix.http.sslfilter.SslFilter"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "ssl-forward.header": sslForwardHeader,
            "ssl-forward.value": sslForwardValue,
            "ssl-forward-cert.header": sslForwardCertHeader,
            "rewrite.absolute.urls": rewriteAbsoluteUrls
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheFelixHttpSslfilterSslFilterInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter jaasControlFlag: (query)  (optional)
     - parameter jaasRanking: (query)  (optional)
     - parameter jaasRealmName: (query)  (optional)
     - parameter jaasClassname: (query)  (optional)
     - parameter jaasOptions: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheFelixJaasConfigurationFactory(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, jaasControlFlag: String? = nil, jaasRanking: Int32? = nil, jaasRealmName: String? = nil, jaasClassname: String? = nil, jaasOptions: [String]? = nil, completion: ((data: OrgApacheFelixJaasConfigurationFactoryInfo?, error: ErrorType?) -> Void)) {
        orgApacheFelixJaasConfigurationFactoryWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, jaasControlFlag: jaasControlFlag, jaasRanking: jaasRanking, jaasRealmName: jaasRealmName, jaasClassname: jaasClassname, jaasOptions: jaasOptions).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.felix.jaas.Configuration.factory     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "jaas.controlFlag" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : {
        "values" : "",
        "labels" : ""
      },
      "value" : ""
    },
    "jaas.realmName" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "jaas.ranking" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "jaas.options" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "jaas.classname" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter jaasControlFlag: (query)  (optional)
     - parameter jaasRanking: (query)  (optional)
     - parameter jaasRealmName: (query)  (optional)
     - parameter jaasClassname: (query)  (optional)
     - parameter jaasOptions: (query)  (optional)

     - returns: RequestBuilder<OrgApacheFelixJaasConfigurationFactoryInfo> 
     */
    public class func orgApacheFelixJaasConfigurationFactoryWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, jaasControlFlag: String? = nil, jaasRanking: Int32? = nil, jaasRealmName: String? = nil, jaasClassname: String? = nil, jaasOptions: [String]? = nil) -> RequestBuilder<OrgApacheFelixJaasConfigurationFactoryInfo> {
        let path = "/system/console/configMgr/org.apache.felix.jaas.Configuration.factory"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "jaas.controlFlag": jaasControlFlag,
            "jaas.ranking": jaasRanking?.encodeToJSON(),
            "jaas.realmName": jaasRealmName,
            "jaas.classname": jaasClassname,
            "jaas.options": jaasOptions
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheFelixJaasConfigurationFactoryInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter jaasDefaultRealmName: (query)  (optional)
     - parameter jaasConfigProviderName: (query)  (optional)
     - parameter jaasGlobalConfigPolicy: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheFelixJaasConfigurationSpi(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, jaasDefaultRealmName: String? = nil, jaasConfigProviderName: String? = nil, jaasGlobalConfigPolicy: String? = nil, completion: ((data: OrgApacheFelixJaasConfigurationSpiInfo?, error: ErrorType?) -> Void)) {
        orgApacheFelixJaasConfigurationSpiWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, jaasDefaultRealmName: jaasDefaultRealmName, jaasConfigProviderName: jaasConfigProviderName, jaasGlobalConfigPolicy: jaasGlobalConfigPolicy).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.felix.jaas.ConfigurationSpi     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "service_location" : "service_location",
  "bundle_location" : "bundle_location",
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "jaas.configProviderName" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "jaas.globalConfigPolicy" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : {
        "values" : "",
        "labels" : ""
      },
      "value" : ""
    },
    "jaas.defaultRealmName" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter jaasDefaultRealmName: (query)  (optional)
     - parameter jaasConfigProviderName: (query)  (optional)
     - parameter jaasGlobalConfigPolicy: (query)  (optional)

     - returns: RequestBuilder<OrgApacheFelixJaasConfigurationSpiInfo> 
     */
    public class func orgApacheFelixJaasConfigurationSpiWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, jaasDefaultRealmName: String? = nil, jaasConfigProviderName: String? = nil, jaasGlobalConfigPolicy: String? = nil) -> RequestBuilder<OrgApacheFelixJaasConfigurationSpiInfo> {
        let path = "/system/console/configMgr/org.apache.felix.jaas.ConfigurationSpi"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "jaas.defaultRealmName": jaasDefaultRealmName,
            "jaas.configProviderName": jaasConfigProviderName,
            "jaas.globalConfigPolicy": jaasGlobalConfigPolicy
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheFelixJaasConfigurationSpiInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter dsLoglevel: (query)  (optional)
     - parameter dsFactoryEnabled: (query)  (optional)
     - parameter dsDelayedKeepInstances: (query)  (optional)
     - parameter dsLockTimeoutMilliseconds: (query)  (optional)
     - parameter dsStopTimeoutMilliseconds: (query)  (optional)
     - parameter dsGlobalExtender: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheFelixScrScrService(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, dsLoglevel: Int32? = nil, dsFactoryEnabled: Bool? = nil, dsDelayedKeepInstances: Bool? = nil, dsLockTimeoutMilliseconds: Int32? = nil, dsStopTimeoutMilliseconds: Int32? = nil, dsGlobalExtender: Bool? = nil, completion: ((data: OrgApacheFelixScrScrServiceInfo?, error: ErrorType?) -> Void)) {
        orgApacheFelixScrScrServiceWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, dsLoglevel: dsLoglevel, dsFactoryEnabled: dsFactoryEnabled, dsDelayedKeepInstances: dsDelayedKeepInstances, dsLockTimeoutMilliseconds: dsLockTimeoutMilliseconds, dsStopTimeoutMilliseconds: dsStopTimeoutMilliseconds, dsGlobalExtender: dsGlobalExtender).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.felix.scr.ScrService     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "ds.global.extender" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "ds.factory.enabled" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "ds.delayed.keepInstances" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "ds.loglevel" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : {
        "values" : "",
        "labels" : ""
      },
      "value" : ""
    },
    "ds.lock.timeout.milliseconds" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "ds.stop.timeout.milliseconds" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter dsLoglevel: (query)  (optional)
     - parameter dsFactoryEnabled: (query)  (optional)
     - parameter dsDelayedKeepInstances: (query)  (optional)
     - parameter dsLockTimeoutMilliseconds: (query)  (optional)
     - parameter dsStopTimeoutMilliseconds: (query)  (optional)
     - parameter dsGlobalExtender: (query)  (optional)

     - returns: RequestBuilder<OrgApacheFelixScrScrServiceInfo> 
     */
    public class func orgApacheFelixScrScrServiceWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, dsLoglevel: Int32? = nil, dsFactoryEnabled: Bool? = nil, dsDelayedKeepInstances: Bool? = nil, dsLockTimeoutMilliseconds: Int32? = nil, dsStopTimeoutMilliseconds: Int32? = nil, dsGlobalExtender: Bool? = nil) -> RequestBuilder<OrgApacheFelixScrScrServiceInfo> {
        let path = "/system/console/configMgr/org.apache.felix.scr.ScrService"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "ds.loglevel": dsLoglevel?.encodeToJSON(),
            "ds.factory.enabled": dsFactoryEnabled,
            "ds.delayed.keepInstances": dsDelayedKeepInstances,
            "ds.lock.timeout.milliseconds": dsLockTimeoutMilliseconds?.encodeToJSON(),
            "ds.stop.timeout.milliseconds": dsStopTimeoutMilliseconds?.encodeToJSON(),
            "ds.global.extender": dsGlobalExtender
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheFelixScrScrServiceInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter componentsList: (query)  (optional)
     - parameter type: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheFelixSystemreadyImplComponentsCheck(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, componentsList: [String]? = nil, type: String? = nil, completion: ((data: OrgApacheFelixSystemreadyImplComponentsCheckInfo?, error: ErrorType?) -> Void)) {
        orgApacheFelixSystemreadyImplComponentsCheckWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, componentsList: componentsList, type: type).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.felix.systemready.impl.ComponentsCheck     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "components.list" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "type" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : {
        "values" : "",
        "labels" : ""
      },
      "value" : ""
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter componentsList: (query)  (optional)
     - parameter type: (query)  (optional)

     - returns: RequestBuilder<OrgApacheFelixSystemreadyImplComponentsCheckInfo> 
     */
    public class func orgApacheFelixSystemreadyImplComponentsCheckWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, componentsList: [String]? = nil, type: String? = nil) -> RequestBuilder<OrgApacheFelixSystemreadyImplComponentsCheckInfo> {
        let path = "/system/console/configMgr/org.apache.felix.systemready.impl.ComponentsCheck"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "components.list": componentsList,
            "type": type
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheFelixSystemreadyImplComponentsCheckInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter timeout: (query)  (optional)
     - parameter targetStartLevel: (query)  (optional)
     - parameter targetStartLevelPropName: (query)  (optional)
     - parameter type: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheFelixSystemreadyImplFrameworkStartCheck(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, timeout: Int32? = nil, targetStartLevel: Int32? = nil, targetStartLevelPropName: String? = nil, type: String? = nil, completion: ((data: OrgApacheFelixSystemreadyImplFrameworkStartCheckInfo?, error: ErrorType?) -> Void)) {
        orgApacheFelixSystemreadyImplFrameworkStartCheckWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, timeout: timeout, targetStartLevel: targetStartLevel, targetStartLevelPropName: targetStartLevelPropName, type: type).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.felix.systemready.impl.FrameworkStartCheck     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "target.start.level" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "target.start.level.prop.name" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "type" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : {
        "values" : "",
        "labels" : ""
      },
      "value" : ""
    },
    "timeout" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter timeout: (query)  (optional)
     - parameter targetStartLevel: (query)  (optional)
     - parameter targetStartLevelPropName: (query)  (optional)
     - parameter type: (query)  (optional)

     - returns: RequestBuilder<OrgApacheFelixSystemreadyImplFrameworkStartCheckInfo> 
     */
    public class func orgApacheFelixSystemreadyImplFrameworkStartCheckWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, timeout: Int32? = nil, targetStartLevel: Int32? = nil, targetStartLevelPropName: String? = nil, type: String? = nil) -> RequestBuilder<OrgApacheFelixSystemreadyImplFrameworkStartCheckInfo> {
        let path = "/system/console/configMgr/org.apache.felix.systemready.impl.FrameworkStartCheck"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "timeout": timeout?.encodeToJSON(),
            "target.start.level": targetStartLevel?.encodeToJSON(),
            "target.start.level.prop.name": targetStartLevelPropName,
            "type": type
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheFelixSystemreadyImplFrameworkStartCheckInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter servicesList: (query)  (optional)
     - parameter type: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheFelixSystemreadyImplServicesCheck(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, servicesList: [String]? = nil, type: String? = nil, completion: ((data: OrgApacheFelixSystemreadyImplServicesCheckInfo?, error: ErrorType?) -> Void)) {
        orgApacheFelixSystemreadyImplServicesCheckWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, servicesList: servicesList, type: type).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.felix.systemready.impl.ServicesCheck     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "service_location" : "service_location",
  "bundle_location" : "bundle_location",
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "services.list" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "type" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : {
        "values" : "",
        "labels" : ""
      },
      "value" : ""
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter servicesList: (query)  (optional)
     - parameter type: (query)  (optional)

     - returns: RequestBuilder<OrgApacheFelixSystemreadyImplServicesCheckInfo> 
     */
    public class func orgApacheFelixSystemreadyImplServicesCheckWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, servicesList: [String]? = nil, type: String? = nil) -> RequestBuilder<OrgApacheFelixSystemreadyImplServicesCheckInfo> {
        let path = "/system/console/configMgr/org.apache.felix.systemready.impl.ServicesCheck"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "services.list": servicesList,
            "type": type
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheFelixSystemreadyImplServicesCheckInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter osgiHttpWhiteboardServletPattern: (query)  (optional)
     - parameter osgiHttpWhiteboardContextSelect: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheFelixSystemreadyImplServletSystemAliveServlet(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, osgiHttpWhiteboardServletPattern: String? = nil, osgiHttpWhiteboardContextSelect: String? = nil, completion: ((data: OrgApacheFelixSystemreadyImplServletSystemAliveServletInfo?, error: ErrorType?) -> Void)) {
        orgApacheFelixSystemreadyImplServletSystemAliveServletWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, osgiHttpWhiteboardServletPattern: osgiHttpWhiteboardServletPattern, osgiHttpWhiteboardContextSelect: osgiHttpWhiteboardContextSelect).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.felix.systemready.impl.servlet.SystemAliveServlet     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "service_location" : "service_location",
  "bundle_location" : "bundle_location",
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "osgi.http.whiteboard.servlet.pattern" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "osgi.http.whiteboard.context.select" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter osgiHttpWhiteboardServletPattern: (query)  (optional)
     - parameter osgiHttpWhiteboardContextSelect: (query)  (optional)

     - returns: RequestBuilder<OrgApacheFelixSystemreadyImplServletSystemAliveServletInfo> 
     */
    public class func orgApacheFelixSystemreadyImplServletSystemAliveServletWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, osgiHttpWhiteboardServletPattern: String? = nil, osgiHttpWhiteboardContextSelect: String? = nil) -> RequestBuilder<OrgApacheFelixSystemreadyImplServletSystemAliveServletInfo> {
        let path = "/system/console/configMgr/org.apache.felix.systemready.impl.servlet.SystemAliveServlet"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "osgi.http.whiteboard.servlet.pattern": osgiHttpWhiteboardServletPattern,
            "osgi.http.whiteboard.context.select": osgiHttpWhiteboardContextSelect
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheFelixSystemreadyImplServletSystemAliveServletInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter osgiHttpWhiteboardServletPattern: (query)  (optional)
     - parameter osgiHttpWhiteboardContextSelect: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheFelixSystemreadyImplServletSystemReadyServlet(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, osgiHttpWhiteboardServletPattern: String? = nil, osgiHttpWhiteboardContextSelect: String? = nil, completion: ((data: OrgApacheFelixSystemreadyImplServletSystemReadyServletInfo?, error: ErrorType?) -> Void)) {
        orgApacheFelixSystemreadyImplServletSystemReadyServletWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, osgiHttpWhiteboardServletPattern: osgiHttpWhiteboardServletPattern, osgiHttpWhiteboardContextSelect: osgiHttpWhiteboardContextSelect).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.felix.systemready.impl.servlet.SystemReadyServlet     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "service_location" : "service_location",
  "bundle_location" : "bundle_location",
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "osgi.http.whiteboard.servlet.pattern" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "osgi.http.whiteboard.context.select" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter osgiHttpWhiteboardServletPattern: (query)  (optional)
     - parameter osgiHttpWhiteboardContextSelect: (query)  (optional)

     - returns: RequestBuilder<OrgApacheFelixSystemreadyImplServletSystemReadyServletInfo> 
     */
    public class func orgApacheFelixSystemreadyImplServletSystemReadyServletWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, osgiHttpWhiteboardServletPattern: String? = nil, osgiHttpWhiteboardContextSelect: String? = nil) -> RequestBuilder<OrgApacheFelixSystemreadyImplServletSystemReadyServletInfo> {
        let path = "/system/console/configMgr/org.apache.felix.systemready.impl.servlet.SystemReadyServlet"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "osgi.http.whiteboard.servlet.pattern": osgiHttpWhiteboardServletPattern,
            "osgi.http.whiteboard.context.select": osgiHttpWhiteboardContextSelect
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheFelixSystemreadyImplServletSystemReadyServletInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter pollInterval: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheFelixSystemreadySystemReadyMonitor(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, pollInterval: Int32? = nil, completion: ((data: OrgApacheFelixSystemreadySystemReadyMonitorInfo?, error: ErrorType?) -> Void)) {
        orgApacheFelixSystemreadySystemReadyMonitorWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, pollInterval: pollInterval).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.felix.systemready.SystemReadyMonitor     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "poll.interval" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter pollInterval: (query)  (optional)

     - returns: RequestBuilder<OrgApacheFelixSystemreadySystemReadyMonitorInfo> 
     */
    public class func orgApacheFelixSystemreadySystemReadyMonitorWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, pollInterval: Int32? = nil) -> RequestBuilder<OrgApacheFelixSystemreadySystemReadyMonitorInfo> {
        let path = "/system/console/configMgr/org.apache.felix.systemready.SystemReadyMonitor"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "poll.interval": pollInterval?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheFelixSystemreadySystemReadyMonitorInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter managerRoot: (query)  (optional)
     - parameter httpServiceFilter: (query)  (optional)
     - parameter defaultRender: (query)  (optional)
     - parameter realm: (query)  (optional)
     - parameter username: (query)  (optional)
     - parameter password: (query)  (optional)
     - parameter category: (query)  (optional)
     - parameter locale: (query)  (optional)
     - parameter loglevel: (query)  (optional)
     - parameter plugins: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheFelixWebconsoleInternalServletOsgiManager(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, managerRoot: String? = nil, httpServiceFilter: String? = nil, defaultRender: String? = nil, realm: String? = nil, username: String? = nil, password: String? = nil, category: String? = nil, locale: String? = nil, loglevel: Int32? = nil, plugins: String? = nil, completion: ((data: OrgApacheFelixWebconsoleInternalServletOsgiManagerInfo?, error: ErrorType?) -> Void)) {
        orgApacheFelixWebconsoleInternalServletOsgiManagerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, managerRoot: managerRoot, httpServiceFilter: httpServiceFilter, defaultRender: defaultRender, realm: realm, username: username, password: password, category: category, locale: locale, loglevel: loglevel, plugins: plugins).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.felix.webconsole.internal.servlet.OsgiManager     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "http.service.filter" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "password" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "default.render" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "plugins" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : {
        "values" : "",
        "labels" : ""
      },
      "value" : ""
    },
    "loglevel" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : {
        "values" : "",
        "labels" : ""
      },
      "value" : ""
    },
    "realm" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "category" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "locale" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "manager.root" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "username" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter managerRoot: (query)  (optional)
     - parameter httpServiceFilter: (query)  (optional)
     - parameter defaultRender: (query)  (optional)
     - parameter realm: (query)  (optional)
     - parameter username: (query)  (optional)
     - parameter password: (query)  (optional)
     - parameter category: (query)  (optional)
     - parameter locale: (query)  (optional)
     - parameter loglevel: (query)  (optional)
     - parameter plugins: (query)  (optional)

     - returns: RequestBuilder<OrgApacheFelixWebconsoleInternalServletOsgiManagerInfo> 
     */
    public class func orgApacheFelixWebconsoleInternalServletOsgiManagerWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, managerRoot: String? = nil, httpServiceFilter: String? = nil, defaultRender: String? = nil, realm: String? = nil, username: String? = nil, password: String? = nil, category: String? = nil, locale: String? = nil, loglevel: Int32? = nil, plugins: String? = nil) -> RequestBuilder<OrgApacheFelixWebconsoleInternalServletOsgiManagerInfo> {
        let path = "/system/console/configMgr/org.apache.felix.webconsole.internal.servlet.OsgiManager"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "manager.root": managerRoot,
            "http.service.filter": httpServiceFilter,
            "default.render": defaultRender,
            "realm": realm,
            "username": username,
            "password": password,
            "category": category,
            "locale": locale,
            "loglevel": loglevel?.encodeToJSON(),
            "plugins": plugins
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheFelixWebconsoleInternalServletOsgiManagerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter maxSize: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheFelixWebconsolePluginsEventInternalPluginServlet(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, maxSize: Int32? = nil, completion: ((data: OrgApacheFelixWebconsolePluginsEventInternalPluginServletInfo?, error: ErrorType?) -> Void)) {
        orgApacheFelixWebconsolePluginsEventInternalPluginServletWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, maxSize: maxSize).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.felix.webconsole.plugins.event.internal.PluginServlet     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "max.size" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter maxSize: (query)  (optional)

     - returns: RequestBuilder<OrgApacheFelixWebconsolePluginsEventInternalPluginServletInfo> 
     */
    public class func orgApacheFelixWebconsolePluginsEventInternalPluginServletWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, maxSize: Int32? = nil) -> RequestBuilder<OrgApacheFelixWebconsolePluginsEventInternalPluginServletInfo> {
        let path = "/system/console/configMgr/org.apache.felix.webconsole.plugins.event.internal.PluginServlet"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "max.size": maxSize?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheFelixWebconsolePluginsEventInternalPluginServletInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter felixMemoryusageDumpThreshold: (query)  (optional)
     - parameter felixMemoryusageDumpInterval: (query)  (optional)
     - parameter felixMemoryusageDumpLocation: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCo(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, felixMemoryusageDumpThreshold: Int32? = nil, felixMemoryusageDumpInterval: Int32? = nil, felixMemoryusageDumpLocation: String? = nil, completion: ((data: OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoInfo?, error: ErrorType?) -> Void)) {
        orgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, felixMemoryusageDumpThreshold: felixMemoryusageDumpThreshold, felixMemoryusageDumpInterval: felixMemoryusageDumpInterval, felixMemoryusageDumpLocation: felixMemoryusageDumpLocation).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.felix.webconsole.plugins.memoryusage.internal.MemoryUsageConfigurator     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "felix.memoryusage.dump.interval" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "felix.memoryusage.dump.location" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "felix.memoryusage.dump.threshold" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter felixMemoryusageDumpThreshold: (query)  (optional)
     - parameter felixMemoryusageDumpInterval: (query)  (optional)
     - parameter felixMemoryusageDumpLocation: (query)  (optional)

     - returns: RequestBuilder<OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoInfo> 
     */
    public class func orgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, felixMemoryusageDumpThreshold: Int32? = nil, felixMemoryusageDumpInterval: Int32? = nil, felixMemoryusageDumpLocation: String? = nil) -> RequestBuilder<OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoInfo> {
        let path = "/system/console/configMgr/org.apache.felix.webconsole.plugins.memoryusage.internal.MemoryUsageConfigurator"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "felix.memoryusage.dump.threshold": felixMemoryusageDumpThreshold?.encodeToJSON(),
            "felix.memoryusage.dump.interval": felixMemoryusageDumpInterval?.encodeToJSON(),
            "felix.memoryusage.dump.location": felixMemoryusageDumpLocation
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter proxyEnabled: (query)  (optional)
     - parameter proxyHost: (query)  (optional)
     - parameter proxyPort: (query)  (optional)
     - parameter proxyUser: (query)  (optional)
     - parameter proxyPassword: (query)  (optional)
     - parameter proxyExceptions: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheHttpProxyconfigurator(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, proxyEnabled: Bool? = nil, proxyHost: String? = nil, proxyPort: Int32? = nil, proxyUser: String? = nil, proxyPassword: String? = nil, proxyExceptions: [String]? = nil, completion: ((data: OrgApacheHttpProxyconfiguratorInfo?, error: ErrorType?) -> Void)) {
        orgApacheHttpProxyconfiguratorWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, proxyEnabled: proxyEnabled, proxyHost: proxyHost, proxyPort: proxyPort, proxyUser: proxyUser, proxyPassword: proxyPassword, proxyExceptions: proxyExceptions).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.http.proxyconfigurator     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "proxy.port" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "proxy.exceptions" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "proxy.enabled" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "proxy.host" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "proxy.user" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "proxy.password" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter proxyEnabled: (query)  (optional)
     - parameter proxyHost: (query)  (optional)
     - parameter proxyPort: (query)  (optional)
     - parameter proxyUser: (query)  (optional)
     - parameter proxyPassword: (query)  (optional)
     - parameter proxyExceptions: (query)  (optional)

     - returns: RequestBuilder<OrgApacheHttpProxyconfiguratorInfo> 
     */
    public class func orgApacheHttpProxyconfiguratorWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, proxyEnabled: Bool? = nil, proxyHost: String? = nil, proxyPort: Int32? = nil, proxyUser: String? = nil, proxyPassword: String? = nil, proxyExceptions: [String]? = nil) -> RequestBuilder<OrgApacheHttpProxyconfiguratorInfo> {
        let path = "/system/console/configMgr/org.apache.http.proxyconfigurator"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "proxy.enabled": proxyEnabled,
            "proxy.host": proxyHost,
            "proxy.port": proxyPort?.encodeToJSON(),
            "proxy.user": proxyUser,
            "proxy.password": proxyPassword,
            "proxy.exceptions": proxyExceptions
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheHttpProxyconfiguratorInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter dir: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProvider(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, dir: String? = nil, completion: ((data: OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderInfo?, error: ErrorType?) -> Void)) {
        orgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, dir: dir).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreTextProviderService     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "dir" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter dir: (query)  (optional)

     - returns: RequestBuilder<OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderInfo> 
     */
    public class func orgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, dir: String? = nil) -> RequestBuilder<OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderInfo> {
        let path = "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreTextProviderService"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "dir": dir
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter path: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheJackrabbitOakPluginsBlobDatastoreFileDataStore(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, path: String? = nil, completion: ((data: OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreInfo?, error: ErrorType?) -> Void)) {
        orgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, path: path).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.jackrabbit.oak.plugins.blob.datastore.FileDataStore     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "service_location" : "service_location",
  "bundle_location" : "bundle_location",
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "path" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter path: (query)  (optional)

     - returns: RequestBuilder<OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreInfo> 
     */
    public class func orgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, path: String? = nil) -> RequestBuilder<OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreInfo> {
        let path = "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.blob.datastore.FileDataStore"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "path": path
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter mongouri: (query)  (optional)
     - parameter db: (query)  (optional)
     - parameter socketKeepAlive: (query)  (optional)
     - parameter cache: (query)  (optional)
     - parameter nodeCachePercentage: (query)  (optional)
     - parameter prevDocCachePercentage: (query)  (optional)
     - parameter childrenCachePercentage: (query)  (optional)
     - parameter diffCachePercentage: (query)  (optional)
     - parameter cacheSegmentCount: (query)  (optional)
     - parameter cacheStackMoveDistance: (query)  (optional)
     - parameter blobCacheSize: (query)  (optional)
     - parameter persistentCache: (query)  (optional)
     - parameter journalCache: (query)  (optional)
     - parameter customBlobStore: (query)  (optional)
     - parameter journalGCInterval: (query)  (optional)
     - parameter journalGCMaxAge: (query)  (optional)
     - parameter prefetchExternalChanges: (query)  (optional)
     - parameter role: (query)  (optional)
     - parameter versionGcMaxAgeInSecs: (query)  (optional)
     - parameter versionGCExpression: (query)  (optional)
     - parameter versionGCTimeLimitInSecs: (query)  (optional)
     - parameter blobGcMaxAgeInSecs: (query)  (optional)
     - parameter blobTrackSnapshotIntervalInSecs: (query)  (optional)
     - parameter repositoryHome: (query)  (optional)
     - parameter maxReplicationLagInSecs: (query)  (optional)
     - parameter documentStoreType: (query)  (optional)
     - parameter bundlingDisabled: (query)  (optional)
     - parameter updateLimit: (query)  (optional)
     - parameter persistentCacheIncludes: (query)  (optional)
     - parameter leaseCheckMode: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreService(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, mongouri: String? = nil, db: String? = nil, socketKeepAlive: Bool? = nil, cache: Int32? = nil, nodeCachePercentage: Int32? = nil, prevDocCachePercentage: Int32? = nil, childrenCachePercentage: Int32? = nil, diffCachePercentage: Int32? = nil, cacheSegmentCount: Int32? = nil, cacheStackMoveDistance: Int32? = nil, blobCacheSize: Int32? = nil, persistentCache: String? = nil, journalCache: String? = nil, customBlobStore: Bool? = nil, journalGCInterval: Int32? = nil, journalGCMaxAge: Int32? = nil, prefetchExternalChanges: Bool? = nil, role: String? = nil, versionGcMaxAgeInSecs: Int32? = nil, versionGCExpression: String? = nil, versionGCTimeLimitInSecs: Int32? = nil, blobGcMaxAgeInSecs: Int32? = nil, blobTrackSnapshotIntervalInSecs: Int32? = nil, repositoryHome: String? = nil, maxReplicationLagInSecs: Int32? = nil, documentStoreType: String? = nil, bundlingDisabled: Bool? = nil, updateLimit: Int32? = nil, persistentCacheIncludes: [String]? = nil, leaseCheckMode: String? = nil, completion: ((data: OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceInfo?, error: ErrorType?) -> Void)) {
        orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, mongouri: mongouri, db: db, socketKeepAlive: socketKeepAlive, cache: cache, nodeCachePercentage: nodeCachePercentage, prevDocCachePercentage: prevDocCachePercentage, childrenCachePercentage: childrenCachePercentage, diffCachePercentage: diffCachePercentage, cacheSegmentCount: cacheSegmentCount, cacheStackMoveDistance: cacheStackMoveDistance, blobCacheSize: blobCacheSize, persistentCache: persistentCache, journalCache: journalCache, customBlobStore: customBlobStore, journalGCInterval: journalGCInterval, journalGCMaxAge: journalGCMaxAge, prefetchExternalChanges: prefetchExternalChanges, role: role, versionGcMaxAgeInSecs: versionGcMaxAgeInSecs, versionGCExpression: versionGCExpression, versionGCTimeLimitInSecs: versionGCTimeLimitInSecs, blobGcMaxAgeInSecs: blobGcMaxAgeInSecs, blobTrackSnapshotIntervalInSecs: blobTrackSnapshotIntervalInSecs, repositoryHome: repositoryHome, maxReplicationLagInSecs: maxReplicationLagInSecs, documentStoreType: documentStoreType, bundlingDisabled: bundlingDisabled, updateLimit: updateLimit, persistentCacheIncludes: persistentCacheIncludes, leaseCheckMode: leaseCheckMode).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.jackrabbit.oak.plugins.document.DocumentNodeStoreService     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "prefetchExternalChanges" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "role" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "cacheSegmentCount" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "versionGCExpression" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "repository.home" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "journalGCMaxAge" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "persistentCacheIncludes" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "prevDocCachePercentage" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "maxReplicationLagInSecs" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "socketKeepAlive" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "blobCacheSize" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "blobTrackSnapshotIntervalInSecs" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "blobGcMaxAgeInSecs" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "childrenCachePercentage" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "nodeCachePercentage" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "cache" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "journalGCInterval" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "journalCache" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "leaseCheckMode" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : {
        "values" : "",
        "labels" : ""
      },
      "value" : ""
    },
    "customBlobStore" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "documentStoreType" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : {
        "values" : "",
        "labels" : ""
      },
      "value" : ""
    },
    "versionGcMaxAgeInSecs" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "bundlingDisabled" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "persistentCache" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "diffCachePercentage" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "mongouri" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "cacheStackMoveDistance" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "updateLimit" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "versionGCTimeLimitInSecs" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "db" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter mongouri: (query)  (optional)
     - parameter db: (query)  (optional)
     - parameter socketKeepAlive: (query)  (optional)
     - parameter cache: (query)  (optional)
     - parameter nodeCachePercentage: (query)  (optional)
     - parameter prevDocCachePercentage: (query)  (optional)
     - parameter childrenCachePercentage: (query)  (optional)
     - parameter diffCachePercentage: (query)  (optional)
     - parameter cacheSegmentCount: (query)  (optional)
     - parameter cacheStackMoveDistance: (query)  (optional)
     - parameter blobCacheSize: (query)  (optional)
     - parameter persistentCache: (query)  (optional)
     - parameter journalCache: (query)  (optional)
     - parameter customBlobStore: (query)  (optional)
     - parameter journalGCInterval: (query)  (optional)
     - parameter journalGCMaxAge: (query)  (optional)
     - parameter prefetchExternalChanges: (query)  (optional)
     - parameter role: (query)  (optional)
     - parameter versionGcMaxAgeInSecs: (query)  (optional)
     - parameter versionGCExpression: (query)  (optional)
     - parameter versionGCTimeLimitInSecs: (query)  (optional)
     - parameter blobGcMaxAgeInSecs: (query)  (optional)
     - parameter blobTrackSnapshotIntervalInSecs: (query)  (optional)
     - parameter repositoryHome: (query)  (optional)
     - parameter maxReplicationLagInSecs: (query)  (optional)
     - parameter documentStoreType: (query)  (optional)
     - parameter bundlingDisabled: (query)  (optional)
     - parameter updateLimit: (query)  (optional)
     - parameter persistentCacheIncludes: (query)  (optional)
     - parameter leaseCheckMode: (query)  (optional)

     - returns: RequestBuilder<OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceInfo> 
     */
    public class func orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, mongouri: String? = nil, db: String? = nil, socketKeepAlive: Bool? = nil, cache: Int32? = nil, nodeCachePercentage: Int32? = nil, prevDocCachePercentage: Int32? = nil, childrenCachePercentage: Int32? = nil, diffCachePercentage: Int32? = nil, cacheSegmentCount: Int32? = nil, cacheStackMoveDistance: Int32? = nil, blobCacheSize: Int32? = nil, persistentCache: String? = nil, journalCache: String? = nil, customBlobStore: Bool? = nil, journalGCInterval: Int32? = nil, journalGCMaxAge: Int32? = nil, prefetchExternalChanges: Bool? = nil, role: String? = nil, versionGcMaxAgeInSecs: Int32? = nil, versionGCExpression: String? = nil, versionGCTimeLimitInSecs: Int32? = nil, blobGcMaxAgeInSecs: Int32? = nil, blobTrackSnapshotIntervalInSecs: Int32? = nil, repositoryHome: String? = nil, maxReplicationLagInSecs: Int32? = nil, documentStoreType: String? = nil, bundlingDisabled: Bool? = nil, updateLimit: Int32? = nil, persistentCacheIncludes: [String]? = nil, leaseCheckMode: String? = nil) -> RequestBuilder<OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceInfo> {
        let path = "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.document.DocumentNodeStoreService"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "mongouri": mongouri,
            "db": db,
            "socketKeepAlive": socketKeepAlive,
            "cache": cache?.encodeToJSON(),
            "nodeCachePercentage": nodeCachePercentage?.encodeToJSON(),
            "prevDocCachePercentage": prevDocCachePercentage?.encodeToJSON(),
            "childrenCachePercentage": childrenCachePercentage?.encodeToJSON(),
            "diffCachePercentage": diffCachePercentage?.encodeToJSON(),
            "cacheSegmentCount": cacheSegmentCount?.encodeToJSON(),
            "cacheStackMoveDistance": cacheStackMoveDistance?.encodeToJSON(),
            "blobCacheSize": blobCacheSize?.encodeToJSON(),
            "persistentCache": persistentCache,
            "journalCache": journalCache,
            "customBlobStore": customBlobStore,
            "journalGCInterval": journalGCInterval?.encodeToJSON(),
            "journalGCMaxAge": journalGCMaxAge?.encodeToJSON(),
            "prefetchExternalChanges": prefetchExternalChanges,
            "role": role,
            "versionGcMaxAgeInSecs": versionGcMaxAgeInSecs?.encodeToJSON(),
            "versionGCExpression": versionGCExpression,
            "versionGCTimeLimitInSecs": versionGCTimeLimitInSecs?.encodeToJSON(),
            "blobGcMaxAgeInSecs": blobGcMaxAgeInSecs?.encodeToJSON(),
            "blobTrackSnapshotIntervalInSecs": blobTrackSnapshotIntervalInSecs?.encodeToJSON(),
            "repository.home": repositoryHome,
            "maxReplicationLagInSecs": maxReplicationLagInSecs?.encodeToJSON(),
            "documentStoreType": documentStoreType,
            "bundlingDisabled": bundlingDisabled,
            "updateLimit": updateLimit?.encodeToJSON(),
            "persistentCacheIncludes": persistentCacheIncludes,
            "leaseCheckMode": leaseCheckMode
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter persistentCacheIncludes: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePre(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, persistentCacheIncludes: [String]? = nil, completion: ((data: OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreInfo?, error: ErrorType?) -> Void)) {
        orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, persistentCacheIncludes: persistentCacheIncludes).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.jackrabbit.oak.plugins.document.DocumentNodeStoreServicePreset     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "service_location" : "service_location",
  "bundle_location" : "bundle_location",
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "persistentCacheIncludes" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter persistentCacheIncludes: (query)  (optional)

     - returns: RequestBuilder<OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreInfo> 
     */
    public class func orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, persistentCacheIncludes: [String]? = nil) -> RequestBuilder<OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreInfo> {
        let path = "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.document.DocumentNodeStoreServicePreset"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "persistentCacheIncludes": persistentCacheIncludes
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter includedPaths: (query)  (optional)
     - parameter enableAsyncObserver: (query)  (optional)
     - parameter observerQueueSize: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCac(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, includedPaths: [String]? = nil, enableAsyncObserver: Bool? = nil, observerQueueSize: Int32? = nil, completion: ((data: OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacInfo?, error: ErrorType?) -> Void)) {
        orgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, includedPaths: includedPaths, enableAsyncObserver: enableAsyncObserver, observerQueueSize: observerQueueSize).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.jackrabbit.oak.plugins.document.secondary.SecondaryStoreCacheService     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "enableAsyncObserver" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "observerQueueSize" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "includedPaths" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter includedPaths: (query)  (optional)
     - parameter enableAsyncObserver: (query)  (optional)
     - parameter observerQueueSize: (query)  (optional)

     - returns: RequestBuilder<OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacInfo> 
     */
    public class func orgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, includedPaths: [String]? = nil, enableAsyncObserver: Bool? = nil, observerQueueSize: Int32? = nil) -> RequestBuilder<OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacInfo> {
        let path = "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.document.secondary.SecondaryStoreCacheService"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "includedPaths": includedPaths,
            "enableAsyncObserver": enableAsyncObserver,
            "observerQueueSize": observerQueueSize?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter asyncConfigs: (query)  (optional)
     - parameter leaseTimeOutMinutes: (query)  (optional)
     - parameter failingIndexTimeoutSeconds: (query)  (optional)
     - parameter errorWarnIntervalSeconds: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheJackrabbitOakPluginsIndexAsyncIndexerService(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, asyncConfigs: [String]? = nil, leaseTimeOutMinutes: Int32? = nil, failingIndexTimeoutSeconds: Int32? = nil, errorWarnIntervalSeconds: Int32? = nil, completion: ((data: OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceInfo?, error: ErrorType?) -> Void)) {
        orgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, asyncConfigs: asyncConfigs, leaseTimeOutMinutes: leaseTimeOutMinutes, failingIndexTimeoutSeconds: failingIndexTimeoutSeconds, errorWarnIntervalSeconds: errorWarnIntervalSeconds).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.AsyncIndexerService     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "service_location" : "service_location",
  "bundle_location" : "bundle_location",
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "errorWarnIntervalSeconds" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "asyncConfigs" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "failingIndexTimeoutSeconds" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "leaseTimeOutMinutes" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter asyncConfigs: (query)  (optional)
     - parameter leaseTimeOutMinutes: (query)  (optional)
     - parameter failingIndexTimeoutSeconds: (query)  (optional)
     - parameter errorWarnIntervalSeconds: (query)  (optional)

     - returns: RequestBuilder<OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceInfo> 
     */
    public class func orgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, asyncConfigs: [String]? = nil, leaseTimeOutMinutes: Int32? = nil, failingIndexTimeoutSeconds: Int32? = nil, errorWarnIntervalSeconds: Int32? = nil) -> RequestBuilder<OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceInfo> {
        let path = "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.AsyncIndexerService"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "asyncConfigs": asyncConfigs,
            "leaseTimeOutMinutes": leaseTimeOutMinutes?.encodeToJSON(),
            "failingIndexTimeoutSeconds": failingIndexTimeoutSeconds?.encodeToJSON(),
            "errorWarnIntervalSeconds": errorWarnIntervalSeconds?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter disabled: (query)  (optional)
     - parameter debug: (query)  (optional)
     - parameter localIndexDir: (query)  (optional)
     - parameter enableOpenIndexAsync: (query)  (optional)
     - parameter threadPoolSize: (query)  (optional)
     - parameter prefetchIndexFiles: (query)  (optional)
     - parameter extractedTextCacheSizeInMB: (query)  (optional)
     - parameter extractedTextCacheExpiryInSecs: (query)  (optional)
     - parameter alwaysUsePreExtractedCache: (query)  (optional)
     - parameter booleanClauseLimit: (query)  (optional)
     - parameter enableHybridIndexing: (query)  (optional)
     - parameter hybridQueueSize: (query)  (optional)
     - parameter disableStoredIndexDefinition: (query)  (optional)
     - parameter deletedBlobsCollectionEnabled: (query)  (optional)
     - parameter propIndexCleanerIntervalInSecs: (query)  (optional)
     - parameter enableSingleBlobIndexFiles: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServ(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, disabled: Bool? = nil, debug: Bool? = nil, localIndexDir: String? = nil, enableOpenIndexAsync: Bool? = nil, threadPoolSize: Int32? = nil, prefetchIndexFiles: Bool? = nil, extractedTextCacheSizeInMB: Int32? = nil, extractedTextCacheExpiryInSecs: Int32? = nil, alwaysUsePreExtractedCache: Bool? = nil, booleanClauseLimit: Int32? = nil, enableHybridIndexing: Bool? = nil, hybridQueueSize: Int32? = nil, disableStoredIndexDefinition: Bool? = nil, deletedBlobsCollectionEnabled: Bool? = nil, propIndexCleanerIntervalInSecs: Int32? = nil, enableSingleBlobIndexFiles: Bool? = nil, completion: ((data: OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServInfo?, error: ErrorType?) -> Void)) {
        orgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, disabled: disabled, debug: debug, localIndexDir: localIndexDir, enableOpenIndexAsync: enableOpenIndexAsync, threadPoolSize: threadPoolSize, prefetchIndexFiles: prefetchIndexFiles, extractedTextCacheSizeInMB: extractedTextCacheSizeInMB, extractedTextCacheExpiryInSecs: extractedTextCacheExpiryInSecs, alwaysUsePreExtractedCache: alwaysUsePreExtractedCache, booleanClauseLimit: booleanClauseLimit, enableHybridIndexing: enableHybridIndexing, hybridQueueSize: hybridQueueSize, disableStoredIndexDefinition: disableStoredIndexDefinition, deletedBlobsCollectionEnabled: deletedBlobsCollectionEnabled, propIndexCleanerIntervalInSecs: propIndexCleanerIntervalInSecs, enableSingleBlobIndexFiles: enableSingleBlobIndexFiles).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexProviderService     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "service_location" : "service_location",
  "bundle_location" : "bundle_location",
  "description" : "description",
  "pid" : "pid",
  "additionalProperties" : "additionalProperties",
  "title" : "title",
  "properties" : {
    "alwaysUsePreExtractedCache" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "enableSingleBlobIndexFiles" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "debug" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "localIndexDir" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "enableHybridIndexing" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "propIndexCleanerIntervalInSecs" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "hybridQueueSize" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "disableStoredIndexDefinition" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "extractedTextCacheSizeInMB" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "threadPoolSize" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "deletedBlobsCollectionEnabled" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "extractedTextCacheExpiryInSecs" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "disabled" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "booleanClauseLimit" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "prefetchIndexFiles" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "enableOpenIndexAsync" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter disabled: (query)  (optional)
     - parameter debug: (query)  (optional)
     - parameter localIndexDir: (query)  (optional)
     - parameter enableOpenIndexAsync: (query)  (optional)
     - parameter threadPoolSize: (query)  (optional)
     - parameter prefetchIndexFiles: (query)  (optional)
     - parameter extractedTextCacheSizeInMB: (query)  (optional)
     - parameter extractedTextCacheExpiryInSecs: (query)  (optional)
     - parameter alwaysUsePreExtractedCache: (query)  (optional)
     - parameter booleanClauseLimit: (query)  (optional)
     - parameter enableHybridIndexing: (query)  (optional)
     - parameter hybridQueueSize: (query)  (optional)
     - parameter disableStoredIndexDefinition: (query)  (optional)
     - parameter deletedBlobsCollectionEnabled: (query)  (optional)
     - parameter propIndexCleanerIntervalInSecs: (query)  (optional)
     - parameter enableSingleBlobIndexFiles: (query)  (optional)

     - returns: RequestBuilder<OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServInfo> 
     */
    public class func orgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, disabled: Bool? = nil, debug: Bool? = nil, localIndexDir: String? = nil, enableOpenIndexAsync: Bool? = nil, threadPoolSize: Int32? = nil, prefetchIndexFiles: Bool? = nil, extractedTextCacheSizeInMB: Int32? = nil, extractedTextCacheExpiryInSecs: Int32? = nil, alwaysUsePreExtractedCache: Bool? = nil, booleanClauseLimit: Int32? = nil, enableHybridIndexing: Bool? = nil, hybridQueueSize: Int32? = nil, disableStoredIndexDefinition: Bool? = nil, deletedBlobsCollectionEnabled: Bool? = nil, propIndexCleanerIntervalInSecs: Int32? = nil, enableSingleBlobIndexFiles: Bool? = nil) -> RequestBuilder<OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServInfo> {
        let path = "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexProviderService"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "disabled": disabled,
            "debug": debug,
            "localIndexDir": localIndexDir,
            "enableOpenIndexAsync": enableOpenIndexAsync,
            "threadPoolSize": threadPoolSize?.encodeToJSON(),
            "prefetchIndexFiles": prefetchIndexFiles,
            "extractedTextCacheSizeInMB": extractedTextCacheSizeInMB?.encodeToJSON(),
            "extractedTextCacheExpiryInSecs": extractedTextCacheExpiryInSecs?.encodeToJSON(),
            "alwaysUsePreExtractedCache": alwaysUsePreExtractedCache,
            "booleanClauseLimit": booleanClauseLimit?.encodeToJSON(),
            "enableHybridIndexing": enableHybridIndexing,
            "hybridQueueSize": hybridQueueSize?.encodeToJSON(),
            "disableStoredIndexDefinition": disableStoredIndexDefinition,
            "deletedBlobsCollectionEnabled": deletedBlobsCollectionEnabled,
            "propIndexCleanerIntervalInSecs": propIndexCleanerIntervalInSecs?.encodeToJSON(),
            "enableSingleBlobIndexFiles": enableSingleBlobIndexFiles
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter solrHomePath: (query)  (optional)
     - parameter solrCoreName: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCo(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, solrHomePath: String? = nil, solrCoreName: String? = nil, completion: ((data: OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoInfo?, error: ErrorType?) -> Void)) {
        orgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, solrHomePath: solrHomePath, solrCoreName: solrCoreName).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.EmbeddedSolrServerConfigurationProvider     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "solr.home.path" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "solr.core.name" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter solrHomePath: (query)  (optional)
     - parameter solrCoreName: (query)  (optional)

     - returns: RequestBuilder<OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoInfo> 
     */
    public class func orgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, solrHomePath: String? = nil, solrCoreName: String? = nil) -> RequestBuilder<OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoInfo> {
        let path = "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.EmbeddedSolrServerConfigurationProvider"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "solr.home.path": solrHomePath,
            "solr.core.name": solrCoreName
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter enabled: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServers(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, enabled: Bool? = nil, completion: ((data: OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersInfo?, error: ErrorType?) -> Void)) {
        orgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, enabled: enabled).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.NodeStateSolrServersObserverService     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "enabled" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter enabled: (query)  (optional)

     - returns: RequestBuilder<OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersInfo> 
     */
    public class func orgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, enabled: Bool? = nil) -> RequestBuilder<OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersInfo> {
        let path = "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.NodeStateSolrServersObserverService"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "enabled": enabled
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter pathDescField: (query)  (optional)
     - parameter pathChildField: (query)  (optional)
     - parameter pathParentField: (query)  (optional)
     - parameter pathExactField: (query)  (optional)
     - parameter catchAllField: (query)  (optional)
     - parameter collapsedPathField: (query)  (optional)
     - parameter pathDepthField: (query)  (optional)
     - parameter commitPolicy: (query)  (optional)
     - parameter rows: (query)  (optional)
     - parameter pathRestrictions: (query)  (optional)
     - parameter propertyRestrictions: (query)  (optional)
     - parameter primarytypesRestrictions: (query)  (optional)
     - parameter ignoredProperties: (query)  (optional)
     - parameter usedProperties: (query)  (optional)
     - parameter typeMappings: (query)  (optional)
     - parameter propertyMappings: (query)  (optional)
     - parameter collapseJcrcontentNodes: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfiguration(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, pathDescField: String? = nil, pathChildField: String? = nil, pathParentField: String? = nil, pathExactField: String? = nil, catchAllField: String? = nil, collapsedPathField: String? = nil, pathDepthField: String? = nil, commitPolicy: String? = nil, rows: Int32? = nil, pathRestrictions: Bool? = nil, propertyRestrictions: Bool? = nil, primarytypesRestrictions: Bool? = nil, ignoredProperties: [String]? = nil, usedProperties: [String]? = nil, typeMappings: [String]? = nil, propertyMappings: [String]? = nil, collapseJcrcontentNodes: Bool? = nil, completion: ((data: OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationInfo?, error: ErrorType?) -> Void)) {
        orgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, pathDescField: pathDescField, pathChildField: pathChildField, pathParentField: pathParentField, pathExactField: pathExactField, catchAllField: catchAllField, collapsedPathField: collapsedPathField, pathDepthField: pathDepthField, commitPolicy: commitPolicy, rows: rows, pathRestrictions: pathRestrictions, propertyRestrictions: propertyRestrictions, primarytypesRestrictions: primarytypesRestrictions, ignoredProperties: ignoredProperties, usedProperties: usedProperties, typeMappings: typeMappings, propertyMappings: propertyMappings, collapseJcrcontentNodes: collapseJcrcontentNodes).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.OakSolrConfigurationProviderService     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "used.properties" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "path.parent.field" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "property.restrictions" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "collapsed.path.field" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "path.restrictions" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "path.exact.field" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "property.mappings" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "rows" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "collapse.jcrcontent.nodes" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "path.desc.field" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "path.child.field" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "catch.all.field" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "ignored.properties" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "commit.policy" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : {
        "values" : "",
        "labels" : ""
      },
      "value" : ""
    },
    "primarytypes.restrictions" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "type.mappings" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "path.depth.field" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter pathDescField: (query)  (optional)
     - parameter pathChildField: (query)  (optional)
     - parameter pathParentField: (query)  (optional)
     - parameter pathExactField: (query)  (optional)
     - parameter catchAllField: (query)  (optional)
     - parameter collapsedPathField: (query)  (optional)
     - parameter pathDepthField: (query)  (optional)
     - parameter commitPolicy: (query)  (optional)
     - parameter rows: (query)  (optional)
     - parameter pathRestrictions: (query)  (optional)
     - parameter propertyRestrictions: (query)  (optional)
     - parameter primarytypesRestrictions: (query)  (optional)
     - parameter ignoredProperties: (query)  (optional)
     - parameter usedProperties: (query)  (optional)
     - parameter typeMappings: (query)  (optional)
     - parameter propertyMappings: (query)  (optional)
     - parameter collapseJcrcontentNodes: (query)  (optional)

     - returns: RequestBuilder<OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationInfo> 
     */
    public class func orgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, pathDescField: String? = nil, pathChildField: String? = nil, pathParentField: String? = nil, pathExactField: String? = nil, catchAllField: String? = nil, collapsedPathField: String? = nil, pathDepthField: String? = nil, commitPolicy: String? = nil, rows: Int32? = nil, pathRestrictions: Bool? = nil, propertyRestrictions: Bool? = nil, primarytypesRestrictions: Bool? = nil, ignoredProperties: [String]? = nil, usedProperties: [String]? = nil, typeMappings: [String]? = nil, propertyMappings: [String]? = nil, collapseJcrcontentNodes: Bool? = nil) -> RequestBuilder<OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationInfo> {
        let path = "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.OakSolrConfigurationProviderService"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "path.desc.field": pathDescField,
            "path.child.field": pathChildField,
            "path.parent.field": pathParentField,
            "path.exact.field": pathExactField,
            "catch.all.field": catchAllField,
            "collapsed.path.field": collapsedPathField,
            "path.depth.field": pathDepthField,
            "commit.policy": commitPolicy,
            "rows": rows?.encodeToJSON(),
            "path.restrictions": pathRestrictions,
            "property.restrictions": propertyRestrictions,
            "primarytypes.restrictions": primarytypesRestrictions,
            "ignored.properties": ignoredProperties,
            "used.properties": usedProperties,
            "type.mappings": typeMappings,
            "property.mappings": propertyMappings,
            "collapse.jcrcontent.nodes": collapseJcrcontentNodes
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter solrHttpUrl: (query)  (optional)
     - parameter solrZkHost: (query)  (optional)
     - parameter solrCollection: (query)  (optional)
     - parameter solrSocketTimeout: (query)  (optional)
     - parameter solrConnectionTimeout: (query)  (optional)
     - parameter solrShardsNo: (query)  (optional)
     - parameter solrReplicationFactor: (query)  (optional)
     - parameter solrConfDir: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConf(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, solrHttpUrl: String? = nil, solrZkHost: String? = nil, solrCollection: String? = nil, solrSocketTimeout: Int32? = nil, solrConnectionTimeout: Int32? = nil, solrShardsNo: Int32? = nil, solrReplicationFactor: Int32? = nil, solrConfDir: String? = nil, completion: ((data: OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfInfo?, error: ErrorType?) -> Void)) {
        orgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, solrHttpUrl: solrHttpUrl, solrZkHost: solrZkHost, solrCollection: solrCollection, solrSocketTimeout: solrSocketTimeout, solrConnectionTimeout: solrConnectionTimeout, solrShardsNo: solrShardsNo, solrReplicationFactor: solrReplicationFactor, solrConfDir: solrConfDir).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.RemoteSolrServerConfigurationProvider     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "solr.zk.host" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "solr.socket.timeout" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "solr.conf.dir" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "solr.collection" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "solr.connection.timeout" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "solr.replication.factor" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "solr.http.url" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "solr.shards.no" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter solrHttpUrl: (query)  (optional)
     - parameter solrZkHost: (query)  (optional)
     - parameter solrCollection: (query)  (optional)
     - parameter solrSocketTimeout: (query)  (optional)
     - parameter solrConnectionTimeout: (query)  (optional)
     - parameter solrShardsNo: (query)  (optional)
     - parameter solrReplicationFactor: (query)  (optional)
     - parameter solrConfDir: (query)  (optional)

     - returns: RequestBuilder<OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfInfo> 
     */
    public class func orgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, solrHttpUrl: String? = nil, solrZkHost: String? = nil, solrCollection: String? = nil, solrSocketTimeout: Int32? = nil, solrConnectionTimeout: Int32? = nil, solrShardsNo: Int32? = nil, solrReplicationFactor: Int32? = nil, solrConfDir: String? = nil) -> RequestBuilder<OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfInfo> {
        let path = "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.RemoteSolrServerConfigurationProvider"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "solr.http.url": solrHttpUrl,
            "solr.zk.host": solrZkHost,
            "solr.collection": solrCollection,
            "solr.socket.timeout": solrSocketTimeout?.encodeToJSON(),
            "solr.connection.timeout": solrConnectionTimeout?.encodeToJSON(),
            "solr.shards.no": solrShardsNo?.encodeToJSON(),
            "solr.replication.factor": solrReplicationFactor?.encodeToJSON(),
            "solr.conf.dir": solrConfDir
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter queryAggregation: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvid(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, queryAggregation: Bool? = nil, completion: ((data: OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidInfo?, error: ErrorType?) -> Void)) {
        orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, queryAggregation: queryAggregation).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.SolrQueryIndexProviderService     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "query.aggregation" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter queryAggregation: (query)  (optional)

     - returns: RequestBuilder<OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidInfo> 
     */
    public class func orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, queryAggregation: Bool? = nil) -> RequestBuilder<OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidInfo> {
        let path = "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.SolrQueryIndexProviderService"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "query.aggregation": queryAggregation
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serverType: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSe(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serverType: String? = nil, completion: ((data: OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeInfo?, error: ErrorType?) -> Void)) {
        orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, serverType: serverType).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.SolrServerProviderService     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "server.type" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : {
        "values" : "",
        "labels" : ""
      },
      "value" : ""
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serverType: (query)  (optional)

     - returns: RequestBuilder<OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeInfo> 
     */
    public class func orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serverType: String? = nil) -> RequestBuilder<OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeInfo> {
        let path = "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.SolrServerProviderService"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "server.type": serverType
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter providerType: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheJackrabbitOakPluginsMetricStatisticsProviderFactory(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, providerType: String? = nil, completion: ((data: OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryInfo?, error: ErrorType?) -> Void)) {
        orgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, providerType: providerType).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.jackrabbit.oak.plugins.metric.StatisticsProviderFactory     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "providerType" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : {
        "values" : "",
        "labels" : ""
      },
      "value" : ""
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter providerType: (query)  (optional)

     - returns: RequestBuilder<OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryInfo> 
     */
    public class func orgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, providerType: String? = nil) -> RequestBuilder<OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryInfo> {
        let path = "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.metric.StatisticsProviderFactory"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "providerType": providerType
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter maxItems: (query)  (optional)
     - parameter maxPathDepth: (query)  (optional)
     - parameter enabled: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheJackrabbitOakPluginsObservationChangeCollectorProvider(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, maxItems: Int32? = nil, maxPathDepth: Int32? = nil, enabled: Bool? = nil, completion: ((data: OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderInfo?, error: ErrorType?) -> Void)) {
        orgApacheJackrabbitOakPluginsObservationChangeCollectorProviderWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, maxItems: maxItems, maxPathDepth: maxPathDepth, enabled: enabled).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.jackrabbit.oak.plugins.observation.ChangeCollectorProvider     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "service_location" : "service_location",
  "bundle_location" : "bundle_location",
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "maxItems" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "enabled" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "maxPathDepth" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter maxItems: (query)  (optional)
     - parameter maxPathDepth: (query)  (optional)
     - parameter enabled: (query)  (optional)

     - returns: RequestBuilder<OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderInfo> 
     */
    public class func orgApacheJackrabbitOakPluginsObservationChangeCollectorProviderWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, maxItems: Int32? = nil, maxPathDepth: Int32? = nil, enabled: Bool? = nil) -> RequestBuilder<OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderInfo> {
        let path = "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.observation.ChangeCollectorProvider"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "maxItems": maxItems?.encodeToJSON(),
            "maxPathDepth": maxPathDepth?.encodeToJSON(),
            "enabled": enabled
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter queryLimitInMemory: (query)  (optional)
     - parameter queryLimitReads: (query)  (optional)
     - parameter queryFailTraversal: (query)  (optional)
     - parameter fastQuerySize: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheJackrabbitOakQueryQueryEngineSettingsService(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, queryLimitInMemory: Int32? = nil, queryLimitReads: Int32? = nil, queryFailTraversal: Bool? = nil, fastQuerySize: Bool? = nil, completion: ((data: OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceInfo?, error: ErrorType?) -> Void)) {
        orgApacheJackrabbitOakQueryQueryEngineSettingsServiceWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, queryLimitInMemory: queryLimitInMemory, queryLimitReads: queryLimitReads, queryFailTraversal: queryFailTraversal, fastQuerySize: fastQuerySize).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.jackrabbit.oak.query.QueryEngineSettingsService     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "queryLimitInMemory" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "queryLimitReads" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "queryFailTraversal" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "fastQuerySize" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter queryLimitInMemory: (query)  (optional)
     - parameter queryLimitReads: (query)  (optional)
     - parameter queryFailTraversal: (query)  (optional)
     - parameter fastQuerySize: (query)  (optional)

     - returns: RequestBuilder<OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceInfo> 
     */
    public class func orgApacheJackrabbitOakQueryQueryEngineSettingsServiceWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, queryLimitInMemory: Int32? = nil, queryLimitReads: Int32? = nil, queryFailTraversal: Bool? = nil, fastQuerySize: Bool? = nil) -> RequestBuilder<OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceInfo> {
        let path = "/system/console/configMgr/org.apache.jackrabbit.oak.query.QueryEngineSettingsService"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "queryLimitInMemory": queryLimitInMemory?.encodeToJSON(),
            "queryLimitReads": queryLimitReads?.encodeToJSON(),
            "queryFailTraversal": queryFailTraversal,
            "fastQuerySize": fastQuerySize
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter orgApacheJackrabbitOakAuthenticationAppName: (query)  (optional)
     - parameter orgApacheJackrabbitOakAuthenticationConfigSpiName: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfig(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, orgApacheJackrabbitOakAuthenticationAppName: String? = nil, orgApacheJackrabbitOakAuthenticationConfigSpiName: String? = nil, completion: ((data: OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigInfo?, error: ErrorType?) -> Void)) {
        orgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, orgApacheJackrabbitOakAuthenticationAppName: orgApacheJackrabbitOakAuthenticationAppName, orgApacheJackrabbitOakAuthenticationConfigSpiName: orgApacheJackrabbitOakAuthenticationConfigSpiName).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.jackrabbit.oak.security.authentication.AuthenticationConfigurationImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "org.apache.jackrabbit.oak.authentication.configSpiName" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "org.apache.jackrabbit.oak.authentication.appName" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter orgApacheJackrabbitOakAuthenticationAppName: (query)  (optional)
     - parameter orgApacheJackrabbitOakAuthenticationConfigSpiName: (query)  (optional)

     - returns: RequestBuilder<OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigInfo> 
     */
    public class func orgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, orgApacheJackrabbitOakAuthenticationAppName: String? = nil, orgApacheJackrabbitOakAuthenticationConfigSpiName: String? = nil) -> RequestBuilder<OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigInfo> {
        let path = "/system/console/configMgr/org.apache.jackrabbit.oak.security.authentication.AuthenticationConfigurationImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "org.apache.jackrabbit.oak.authentication.appName": orgApacheJackrabbitOakAuthenticationAppName,
            "org.apache.jackrabbit.oak.authentication.configSpiName": orgApacheJackrabbitOakAuthenticationConfigSpiName
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter providerName: (query)  (optional)
     - parameter hostName: (query)  (optional)
     - parameter hostPort: (query)  (optional)
     - parameter hostSsl: (query)  (optional)
     - parameter hostTls: (query)  (optional)
     - parameter hostNoCertCheck: (query)  (optional)
     - parameter bindDn: (query)  (optional)
     - parameter bindPassword: (query)  (optional)
     - parameter searchTimeout: (query)  (optional)
     - parameter adminPoolMaxActive: (query)  (optional)
     - parameter adminPoolLookupOnValidate: (query)  (optional)
     - parameter userPoolMaxActive: (query)  (optional)
     - parameter userPoolLookupOnValidate: (query)  (optional)
     - parameter userBaseDN: (query)  (optional)
     - parameter userObjectclass: (query)  (optional)
     - parameter userIdAttribute: (query)  (optional)
     - parameter userExtraFilter: (query)  (optional)
     - parameter userMakeDnPath: (query)  (optional)
     - parameter groupBaseDN: (query)  (optional)
     - parameter groupObjectclass: (query)  (optional)
     - parameter groupNameAttribute: (query)  (optional)
     - parameter groupExtraFilter: (query)  (optional)
     - parameter groupMakeDnPath: (query)  (optional)
     - parameter groupMemberAttribute: (query)  (optional)
     - parameter useUidForExtId: (query)  (optional)
     - parameter customattributes: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdenti(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, providerName: String? = nil, hostName: String? = nil, hostPort: Int32? = nil, hostSsl: Bool? = nil, hostTls: Bool? = nil, hostNoCertCheck: Bool? = nil, bindDn: String? = nil, bindPassword: String? = nil, searchTimeout: String? = nil, adminPoolMaxActive: Int32? = nil, adminPoolLookupOnValidate: Bool? = nil, userPoolMaxActive: Int32? = nil, userPoolLookupOnValidate: Bool? = nil, userBaseDN: String? = nil, userObjectclass: [String]? = nil, userIdAttribute: String? = nil, userExtraFilter: String? = nil, userMakeDnPath: Bool? = nil, groupBaseDN: String? = nil, groupObjectclass: [String]? = nil, groupNameAttribute: String? = nil, groupExtraFilter: String? = nil, groupMakeDnPath: Bool? = nil, groupMemberAttribute: String? = nil, useUidForExtId: Bool? = nil, customattributes: [String]? = nil, completion: ((data: OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiInfo?, error: ErrorType?) -> Void)) {
        orgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, providerName: providerName, hostName: hostName, hostPort: hostPort, hostSsl: hostSsl, hostTls: hostTls, hostNoCertCheck: hostNoCertCheck, bindDn: bindDn, bindPassword: bindPassword, searchTimeout: searchTimeout, adminPoolMaxActive: adminPoolMaxActive, adminPoolLookupOnValidate: adminPoolLookupOnValidate, userPoolMaxActive: userPoolMaxActive, userPoolLookupOnValidate: userPoolLookupOnValidate, userBaseDN: userBaseDN, userObjectclass: userObjectclass, userIdAttribute: userIdAttribute, userExtraFilter: userExtraFilter, userMakeDnPath: userMakeDnPath, groupBaseDN: groupBaseDN, groupObjectclass: groupObjectclass, groupNameAttribute: groupNameAttribute, groupExtraFilter: groupExtraFilter, groupMakeDnPath: groupMakeDnPath, groupMemberAttribute: groupMemberAttribute, useUidForExtId: useUidForExtId, customattributes: customattributes).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.jackrabbit.oak.security.authentication.ldap.impl.LdapIdentityProvider     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "host.ssl" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "group.objectclass" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "group.makeDnPath" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "host.port" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "customattributes" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "bind.dn" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "user.makeDnPath" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "adminPool.lookupOnValidate" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "host.name" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "group.extraFilter" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "user.extraFilter" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "user.objectclass" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "bind.password" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "group.memberAttribute" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "adminPool.maxActive" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "userPool.maxActive" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "user.idAttribute" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "userPool.lookupOnValidate" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "useUidForExtId" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "host.tls" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "user.baseDN" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "group.baseDN" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "provider.name" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "host.noCertCheck" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "group.nameAttribute" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "searchTimeout" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter providerName: (query)  (optional)
     - parameter hostName: (query)  (optional)
     - parameter hostPort: (query)  (optional)
     - parameter hostSsl: (query)  (optional)
     - parameter hostTls: (query)  (optional)
     - parameter hostNoCertCheck: (query)  (optional)
     - parameter bindDn: (query)  (optional)
     - parameter bindPassword: (query)  (optional)
     - parameter searchTimeout: (query)  (optional)
     - parameter adminPoolMaxActive: (query)  (optional)
     - parameter adminPoolLookupOnValidate: (query)  (optional)
     - parameter userPoolMaxActive: (query)  (optional)
     - parameter userPoolLookupOnValidate: (query)  (optional)
     - parameter userBaseDN: (query)  (optional)
     - parameter userObjectclass: (query)  (optional)
     - parameter userIdAttribute: (query)  (optional)
     - parameter userExtraFilter: (query)  (optional)
     - parameter userMakeDnPath: (query)  (optional)
     - parameter groupBaseDN: (query)  (optional)
     - parameter groupObjectclass: (query)  (optional)
     - parameter groupNameAttribute: (query)  (optional)
     - parameter groupExtraFilter: (query)  (optional)
     - parameter groupMakeDnPath: (query)  (optional)
     - parameter groupMemberAttribute: (query)  (optional)
     - parameter useUidForExtId: (query)  (optional)
     - parameter customattributes: (query)  (optional)

     - returns: RequestBuilder<OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiInfo> 
     */
    public class func orgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, providerName: String? = nil, hostName: String? = nil, hostPort: Int32? = nil, hostSsl: Bool? = nil, hostTls: Bool? = nil, hostNoCertCheck: Bool? = nil, bindDn: String? = nil, bindPassword: String? = nil, searchTimeout: String? = nil, adminPoolMaxActive: Int32? = nil, adminPoolLookupOnValidate: Bool? = nil, userPoolMaxActive: Int32? = nil, userPoolLookupOnValidate: Bool? = nil, userBaseDN: String? = nil, userObjectclass: [String]? = nil, userIdAttribute: String? = nil, userExtraFilter: String? = nil, userMakeDnPath: Bool? = nil, groupBaseDN: String? = nil, groupObjectclass: [String]? = nil, groupNameAttribute: String? = nil, groupExtraFilter: String? = nil, groupMakeDnPath: Bool? = nil, groupMemberAttribute: String? = nil, useUidForExtId: Bool? = nil, customattributes: [String]? = nil) -> RequestBuilder<OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiInfo> {
        let path = "/system/console/configMgr/org.apache.jackrabbit.oak.security.authentication.ldap.impl.LdapIdentityProvider"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "provider.name": providerName,
            "host.name": hostName,
            "host.port": hostPort?.encodeToJSON(),
            "host.ssl": hostSsl,
            "host.tls": hostTls,
            "host.noCertCheck": hostNoCertCheck,
            "bind.dn": bindDn,
            "bind.password": bindPassword,
            "searchTimeout": searchTimeout,
            "adminPool.maxActive": adminPoolMaxActive?.encodeToJSON(),
            "adminPool.lookupOnValidate": adminPoolLookupOnValidate,
            "userPool.maxActive": userPoolMaxActive?.encodeToJSON(),
            "userPool.lookupOnValidate": userPoolLookupOnValidate,
            "user.baseDN": userBaseDN,
            "user.objectclass": userObjectclass,
            "user.idAttribute": userIdAttribute,
            "user.extraFilter": userExtraFilter,
            "user.makeDnPath": userMakeDnPath,
            "group.baseDN": groupBaseDN,
            "group.objectclass": groupObjectclass,
            "group.nameAttribute": groupNameAttribute,
            "group.extraFilter": groupExtraFilter,
            "group.makeDnPath": groupMakeDnPath,
            "group.memberAttribute": groupMemberAttribute,
            "useUidForExtId": useUidForExtId,
            "customattributes": customattributes
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter tokenExpiration: (query)  (optional)
     - parameter tokenLength: (query)  (optional)
     - parameter tokenRefresh: (query)  (optional)
     - parameter tokenCleanupThreshold: (query)  (optional)
     - parameter passwordHashAlgorithm: (query)  (optional)
     - parameter passwordHashIterations: (query)  (optional)
     - parameter passwordSaltSize: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfigura(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, tokenExpiration: String? = nil, tokenLength: String? = nil, tokenRefresh: Bool? = nil, tokenCleanupThreshold: Int32? = nil, passwordHashAlgorithm: String? = nil, passwordHashIterations: Int32? = nil, passwordSaltSize: Int32? = nil, completion: ((data: OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraInfo?, error: ErrorType?) -> Void)) {
        orgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, tokenExpiration: tokenExpiration, tokenLength: tokenLength, tokenRefresh: tokenRefresh, tokenCleanupThreshold: tokenCleanupThreshold, passwordHashAlgorithm: passwordHashAlgorithm, passwordHashIterations: passwordHashIterations, passwordSaltSize: passwordSaltSize).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.jackrabbit.oak.security.authentication.token.TokenConfigurationImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "service_location" : "service_location",
  "bundle_location" : "bundle_location",
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "passwordSaltSize" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "tokenCleanupThreshold" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "passwordHashIterations" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "tokenExpiration" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "tokenRefresh" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "tokenLength" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "passwordHashAlgorithm" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter tokenExpiration: (query)  (optional)
     - parameter tokenLength: (query)  (optional)
     - parameter tokenRefresh: (query)  (optional)
     - parameter tokenCleanupThreshold: (query)  (optional)
     - parameter passwordHashAlgorithm: (query)  (optional)
     - parameter passwordHashIterations: (query)  (optional)
     - parameter passwordSaltSize: (query)  (optional)

     - returns: RequestBuilder<OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraInfo> 
     */
    public class func orgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, tokenExpiration: String? = nil, tokenLength: String? = nil, tokenRefresh: Bool? = nil, tokenCleanupThreshold: Int32? = nil, passwordHashAlgorithm: String? = nil, passwordHashIterations: Int32? = nil, passwordSaltSize: Int32? = nil) -> RequestBuilder<OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraInfo> {
        let path = "/system/console/configMgr/org.apache.jackrabbit.oak.security.authentication.token.TokenConfigurationImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "tokenExpiration": tokenExpiration,
            "tokenLength": tokenLength,
            "tokenRefresh": tokenRefresh,
            "tokenCleanupThreshold": tokenCleanupThreshold?.encodeToJSON(),
            "passwordHashAlgorithm": passwordHashAlgorithm,
            "passwordHashIterations": passwordHashIterations?.encodeToJSON(),
            "passwordSaltSize": passwordSaltSize?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter permissionsJr2: (query)  (optional)
     - parameter importBehavior: (query)  (optional)
     - parameter readPaths: (query)  (optional)
     - parameter administrativePrincipals: (query)  (optional)
     - parameter configurationRanking: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigur(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, permissionsJr2: String? = nil, importBehavior: String? = nil, readPaths: [String]? = nil, administrativePrincipals: [String]? = nil, configurationRanking: Int32? = nil, completion: ((data: OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurInfo?, error: ErrorType?) -> Void)) {
        orgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, permissionsJr2: permissionsJr2, importBehavior: importBehavior, readPaths: readPaths, administrativePrincipals: administrativePrincipals, configurationRanking: configurationRanking).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.jackrabbit.oak.security.authorization.AuthorizationConfigurationImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "service_location" : "service_location",
  "bundle_location" : "bundle_location",
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "permissionsJr2" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : {
        "values" : "",
        "labels" : ""
      },
      "value" : ""
    },
    "importBehavior" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : {
        "values" : "",
        "labels" : ""
      },
      "value" : ""
    },
    "administrativePrincipals" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "configurationRanking" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "readPaths" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter permissionsJr2: (query)  (optional)
     - parameter importBehavior: (query)  (optional)
     - parameter readPaths: (query)  (optional)
     - parameter administrativePrincipals: (query)  (optional)
     - parameter configurationRanking: (query)  (optional)

     - returns: RequestBuilder<OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurInfo> 
     */
    public class func orgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, permissionsJr2: String? = nil, importBehavior: String? = nil, readPaths: [String]? = nil, administrativePrincipals: [String]? = nil, configurationRanking: Int32? = nil) -> RequestBuilder<OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurInfo> {
        let path = "/system/console/configMgr/org.apache.jackrabbit.oak.security.authorization.AuthorizationConfigurationImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "permissionsJr2": permissionsJr2,
            "importBehavior": importBehavior,
            "readPaths": readPaths,
            "administrativePrincipals": administrativePrincipals,
            "configurationRanking": configurationRanking?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter requiredServicePids: (query)  (optional)
     - parameter authorizationCompositionType: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheJackrabbitOakSecurityInternalSecurityProviderRegistrati(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, requiredServicePids: [String]? = nil, authorizationCompositionType: String? = nil, completion: ((data: OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiInfo?, error: ErrorType?) -> Void)) {
        orgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, requiredServicePids: requiredServicePids, authorizationCompositionType: authorizationCompositionType).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.jackrabbit.oak.security.internal.SecurityProviderRegistration     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "service_location" : "service_location",
  "bundle_location" : "bundle_location",
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "requiredServicePids" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "authorizationCompositionType" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : {
        "values" : "",
        "labels" : ""
      },
      "value" : ""
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter requiredServicePids: (query)  (optional)
     - parameter authorizationCompositionType: (query)  (optional)

     - returns: RequestBuilder<OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiInfo> 
     */
    public class func orgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, requiredServicePids: [String]? = nil, authorizationCompositionType: String? = nil) -> RequestBuilder<OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiInfo> {
        let path = "/system/console/configMgr/org.apache.jackrabbit.oak.security.internal.SecurityProviderRegistration"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "requiredServicePids": requiredServicePids,
            "authorizationCompositionType": authorizationCompositionType
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter length: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeName(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, length: Int32? = nil, completion: ((data: OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameInfo?, error: ErrorType?) -> Void)) {
        orgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, length: length).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.jackrabbit.oak.security.user.RandomAuthorizableNodeName     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "service_location" : "service_location",
  "bundle_location" : "bundle_location",
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "length" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter length: (query)  (optional)

     - returns: RequestBuilder<OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameInfo> 
     */
    public class func orgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, length: Int32? = nil) -> RequestBuilder<OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameInfo> {
        let path = "/system/console/configMgr/org.apache.jackrabbit.oak.security.user.RandomAuthorizableNodeName"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "length": length?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter usersPath: (query)  (optional)
     - parameter groupsPath: (query)  (optional)
     - parameter systemRelativePath: (query)  (optional)
     - parameter defaultDepth: (query)  (optional)
     - parameter importBehavior: (query)  (optional)
     - parameter passwordHashAlgorithm: (query)  (optional)
     - parameter passwordHashIterations: (query)  (optional)
     - parameter passwordSaltSize: (query)  (optional)
     - parameter omitAdminPw: (query)  (optional)
     - parameter supportAutoSave: (query)  (optional)
     - parameter passwordMaxAge: (query)  (optional)
     - parameter initialPasswordChange: (query)  (optional)
     - parameter passwordHistorySize: (query)  (optional)
     - parameter passwordExpiryForAdmin: (query)  (optional)
     - parameter cacheExpiration: (query)  (optional)
     - parameter enableRFC7613UsercaseMappedProfile: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheJackrabbitOakSecurityUserUserConfigurationImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, usersPath: String? = nil, groupsPath: String? = nil, systemRelativePath: String? = nil, defaultDepth: Int32? = nil, importBehavior: String? = nil, passwordHashAlgorithm: String? = nil, passwordHashIterations: Int32? = nil, passwordSaltSize: Int32? = nil, omitAdminPw: Bool? = nil, supportAutoSave: Bool? = nil, passwordMaxAge: Int32? = nil, initialPasswordChange: Bool? = nil, passwordHistorySize: Int32? = nil, passwordExpiryForAdmin: Bool? = nil, cacheExpiration: Int32? = nil, enableRFC7613UsercaseMappedProfile: Bool? = nil, completion: ((data: OrgApacheJackrabbitOakSecurityUserUserConfigurationImplInfo?, error: ErrorType?) -> Void)) {
        orgApacheJackrabbitOakSecurityUserUserConfigurationImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, usersPath: usersPath, groupsPath: groupsPath, systemRelativePath: systemRelativePath, defaultDepth: defaultDepth, importBehavior: importBehavior, passwordHashAlgorithm: passwordHashAlgorithm, passwordHashIterations: passwordHashIterations, passwordSaltSize: passwordSaltSize, omitAdminPw: omitAdminPw, supportAutoSave: supportAutoSave, passwordMaxAge: passwordMaxAge, initialPasswordChange: initialPasswordChange, passwordHistorySize: passwordHistorySize, passwordExpiryForAdmin: passwordExpiryForAdmin, cacheExpiration: cacheExpiration, enableRFC7613UsercaseMappedProfile: enableRFC7613UsercaseMappedProfile).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.jackrabbit.oak.security.user.UserConfigurationImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "service_location" : "service_location",
  "bundle_location" : "bundle_location",
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "passwordSaltSize" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "systemRelativePath" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "enableRFC7613UsercaseMappedProfile" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "groupsPath" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "passwordHashIterations" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "cacheExpiration" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "usersPath" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "initialPasswordChange" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "passwordHistorySize" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "supportAutoSave" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "importBehavior" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : {
        "values" : "",
        "labels" : ""
      },
      "value" : ""
    },
    "defaultDepth" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "passwordMaxAge" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "passwordHashAlgorithm" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "omitAdminPw" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "passwordExpiryForAdmin" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter usersPath: (query)  (optional)
     - parameter groupsPath: (query)  (optional)
     - parameter systemRelativePath: (query)  (optional)
     - parameter defaultDepth: (query)  (optional)
     - parameter importBehavior: (query)  (optional)
     - parameter passwordHashAlgorithm: (query)  (optional)
     - parameter passwordHashIterations: (query)  (optional)
     - parameter passwordSaltSize: (query)  (optional)
     - parameter omitAdminPw: (query)  (optional)
     - parameter supportAutoSave: (query)  (optional)
     - parameter passwordMaxAge: (query)  (optional)
     - parameter initialPasswordChange: (query)  (optional)
     - parameter passwordHistorySize: (query)  (optional)
     - parameter passwordExpiryForAdmin: (query)  (optional)
     - parameter cacheExpiration: (query)  (optional)
     - parameter enableRFC7613UsercaseMappedProfile: (query)  (optional)

     - returns: RequestBuilder<OrgApacheJackrabbitOakSecurityUserUserConfigurationImplInfo> 
     */
    public class func orgApacheJackrabbitOakSecurityUserUserConfigurationImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, usersPath: String? = nil, groupsPath: String? = nil, systemRelativePath: String? = nil, defaultDepth: Int32? = nil, importBehavior: String? = nil, passwordHashAlgorithm: String? = nil, passwordHashIterations: Int32? = nil, passwordSaltSize: Int32? = nil, omitAdminPw: Bool? = nil, supportAutoSave: Bool? = nil, passwordMaxAge: Int32? = nil, initialPasswordChange: Bool? = nil, passwordHistorySize: Int32? = nil, passwordExpiryForAdmin: Bool? = nil, cacheExpiration: Int32? = nil, enableRFC7613UsercaseMappedProfile: Bool? = nil) -> RequestBuilder<OrgApacheJackrabbitOakSecurityUserUserConfigurationImplInfo> {
        let path = "/system/console/configMgr/org.apache.jackrabbit.oak.security.user.UserConfigurationImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "usersPath": usersPath,
            "groupsPath": groupsPath,
            "systemRelativePath": systemRelativePath,
            "defaultDepth": defaultDepth?.encodeToJSON(),
            "importBehavior": importBehavior,
            "passwordHashAlgorithm": passwordHashAlgorithm,
            "passwordHashIterations": passwordHashIterations?.encodeToJSON(),
            "passwordSaltSize": passwordSaltSize?.encodeToJSON(),
            "omitAdminPw": omitAdminPw,
            "supportAutoSave": supportAutoSave,
            "passwordMaxAge": passwordMaxAge?.encodeToJSON(),
            "initialPasswordChange": initialPasswordChange,
            "passwordHistorySize": passwordHistorySize?.encodeToJSON(),
            "passwordExpiryForAdmin": passwordExpiryForAdmin,
            "cacheExpiration": cacheExpiration?.encodeToJSON(),
            "enableRFC7613UsercaseMappedProfile": enableRFC7613UsercaseMappedProfile
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheJackrabbitOakSecurityUserUserConfigurationImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter accountName: (query)  (optional)
     - parameter containerName: (query)  (optional)
     - parameter accessKey: (query)  (optional)
     - parameter rootPath: (query)  (optional)
     - parameter connectionURL: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheJackrabbitOakSegmentAzureAzureSegmentStoreService(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, accountName: String? = nil, containerName: String? = nil, accessKey: String? = nil, rootPath: String? = nil, connectionURL: String? = nil, completion: ((data: OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceInfo?, error: ErrorType?) -> Void)) {
        orgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, accountName: accountName, containerName: containerName, accessKey: accessKey, rootPath: rootPath, connectionURL: connectionURL).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.jackrabbit.oak.segment.azure.AzureSegmentStoreService     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "accountName" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "accessKey" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "containerName" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "connectionURL" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "rootPath" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter accountName: (query)  (optional)
     - parameter containerName: (query)  (optional)
     - parameter accessKey: (query)  (optional)
     - parameter rootPath: (query)  (optional)
     - parameter connectionURL: (query)  (optional)

     - returns: RequestBuilder<OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceInfo> 
     */
    public class func orgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, accountName: String? = nil, containerName: String? = nil, accessKey: String? = nil, rootPath: String? = nil, connectionURL: String? = nil) -> RequestBuilder<OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceInfo> {
        let path = "/system/console/configMgr/org.apache.jackrabbit.oak.segment.azure.AzureSegmentStoreService"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "accountName": accountName,
            "containerName": containerName,
            "accessKey": accessKey,
            "rootPath": rootPath,
            "connectionURL": connectionURL
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter repositoryHome: (query)  (optional)
     - parameter tarmkMode: (query)  (optional)
     - parameter tarmkSize: (query)  (optional)
     - parameter segmentCacheSize: (query)  (optional)
     - parameter stringCacheSize: (query)  (optional)
     - parameter templateCacheSize: (query)  (optional)
     - parameter stringDeduplicationCacheSize: (query)  (optional)
     - parameter templateDeduplicationCacheSize: (query)  (optional)
     - parameter nodeDeduplicationCacheSize: (query)  (optional)
     - parameter pauseCompaction: (query)  (optional)
     - parameter compactionRetryCount: (query)  (optional)
     - parameter compactionForceTimeout: (query)  (optional)
     - parameter compactionSizeDeltaEstimation: (query)  (optional)
     - parameter compactionDisableEstimation: (query)  (optional)
     - parameter compactionRetainedGenerations: (query)  (optional)
     - parameter compactionMemoryThreshold: (query)  (optional)
     - parameter compactionProgressLog: (query)  (optional)
     - parameter standby: (query)  (optional)
     - parameter customBlobStore: (query)  (optional)
     - parameter customSegmentStore: (query)  (optional)
     - parameter splitPersistence: (query)  (optional)
     - parameter repositoryBackupDir: (query)  (optional)
     - parameter blobGcMaxAgeInSecs: (query)  (optional)
     - parameter blobTrackSnapshotIntervalInSecs: (query)  (optional)
     - parameter role: (query)  (optional)
     - parameter registerDescriptors: (query)  (optional)
     - parameter dispatchChanges: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheJackrabbitOakSegmentSegmentNodeStoreFactory(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, repositoryHome: String? = nil, tarmkMode: String? = nil, tarmkSize: Int32? = nil, segmentCacheSize: Int32? = nil, stringCacheSize: Int32? = nil, templateCacheSize: Int32? = nil, stringDeduplicationCacheSize: Int32? = nil, templateDeduplicationCacheSize: Int32? = nil, nodeDeduplicationCacheSize: Int32? = nil, pauseCompaction: Bool? = nil, compactionRetryCount: Int32? = nil, compactionForceTimeout: Int32? = nil, compactionSizeDeltaEstimation: Int32? = nil, compactionDisableEstimation: Bool? = nil, compactionRetainedGenerations: Int32? = nil, compactionMemoryThreshold: Int32? = nil, compactionProgressLog: Int32? = nil, standby: Bool? = nil, customBlobStore: Bool? = nil, customSegmentStore: Bool? = nil, splitPersistence: Bool? = nil, repositoryBackupDir: String? = nil, blobGcMaxAgeInSecs: Int32? = nil, blobTrackSnapshotIntervalInSecs: Int32? = nil, role: String? = nil, registerDescriptors: Bool? = nil, dispatchChanges: Bool? = nil, completion: ((data: OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryInfo?, error: ErrorType?) -> Void)) {
        orgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, repositoryHome: repositoryHome, tarmkMode: tarmkMode, tarmkSize: tarmkSize, segmentCacheSize: segmentCacheSize, stringCacheSize: stringCacheSize, templateCacheSize: templateCacheSize, stringDeduplicationCacheSize: stringDeduplicationCacheSize, templateDeduplicationCacheSize: templateDeduplicationCacheSize, nodeDeduplicationCacheSize: nodeDeduplicationCacheSize, pauseCompaction: pauseCompaction, compactionRetryCount: compactionRetryCount, compactionForceTimeout: compactionForceTimeout, compactionSizeDeltaEstimation: compactionSizeDeltaEstimation, compactionDisableEstimation: compactionDisableEstimation, compactionRetainedGenerations: compactionRetainedGenerations, compactionMemoryThreshold: compactionMemoryThreshold, compactionProgressLog: compactionProgressLog, standby: standby, customBlobStore: customBlobStore, customSegmentStore: customSegmentStore, splitPersistence: splitPersistence, repositoryBackupDir: repositoryBackupDir, blobGcMaxAgeInSecs: blobGcMaxAgeInSecs, blobTrackSnapshotIntervalInSecs: blobTrackSnapshotIntervalInSecs, role: role, registerDescriptors: registerDescriptors, dispatchChanges: dispatchChanges).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.jackrabbit.oak.segment.SegmentNodeStoreFactory     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "compaction.force.timeout" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "role" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "templateCache.size" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "pauseCompaction" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "standby" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "splitPersistence" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "repository.home" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "customSegmentStore" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "dispatchChanges" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "segmentCache.size" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "registerDescriptors" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "stringDeduplicationCache.size" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "blobTrackSnapshotIntervalInSecs" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "tarmk.size" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "nodeDeduplicationCache.size" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "compaction.sizeDeltaEstimation" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "blobGcMaxAgeInSecs" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "repository.backup.dir" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "compaction.retryCount" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "customBlobStore" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "compaction.disableEstimation" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "compaction.progressLog" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "templateDeduplicationCache.size" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "compaction.memoryThreshold" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "stringCache.size" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "tarmk.mode" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "compaction.retainedGenerations" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter repositoryHome: (query)  (optional)
     - parameter tarmkMode: (query)  (optional)
     - parameter tarmkSize: (query)  (optional)
     - parameter segmentCacheSize: (query)  (optional)
     - parameter stringCacheSize: (query)  (optional)
     - parameter templateCacheSize: (query)  (optional)
     - parameter stringDeduplicationCacheSize: (query)  (optional)
     - parameter templateDeduplicationCacheSize: (query)  (optional)
     - parameter nodeDeduplicationCacheSize: (query)  (optional)
     - parameter pauseCompaction: (query)  (optional)
     - parameter compactionRetryCount: (query)  (optional)
     - parameter compactionForceTimeout: (query)  (optional)
     - parameter compactionSizeDeltaEstimation: (query)  (optional)
     - parameter compactionDisableEstimation: (query)  (optional)
     - parameter compactionRetainedGenerations: (query)  (optional)
     - parameter compactionMemoryThreshold: (query)  (optional)
     - parameter compactionProgressLog: (query)  (optional)
     - parameter standby: (query)  (optional)
     - parameter customBlobStore: (query)  (optional)
     - parameter customSegmentStore: (query)  (optional)
     - parameter splitPersistence: (query)  (optional)
     - parameter repositoryBackupDir: (query)  (optional)
     - parameter blobGcMaxAgeInSecs: (query)  (optional)
     - parameter blobTrackSnapshotIntervalInSecs: (query)  (optional)
     - parameter role: (query)  (optional)
     - parameter registerDescriptors: (query)  (optional)
     - parameter dispatchChanges: (query)  (optional)

     - returns: RequestBuilder<OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryInfo> 
     */
    public class func orgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, repositoryHome: String? = nil, tarmkMode: String? = nil, tarmkSize: Int32? = nil, segmentCacheSize: Int32? = nil, stringCacheSize: Int32? = nil, templateCacheSize: Int32? = nil, stringDeduplicationCacheSize: Int32? = nil, templateDeduplicationCacheSize: Int32? = nil, nodeDeduplicationCacheSize: Int32? = nil, pauseCompaction: Bool? = nil, compactionRetryCount: Int32? = nil, compactionForceTimeout: Int32? = nil, compactionSizeDeltaEstimation: Int32? = nil, compactionDisableEstimation: Bool? = nil, compactionRetainedGenerations: Int32? = nil, compactionMemoryThreshold: Int32? = nil, compactionProgressLog: Int32? = nil, standby: Bool? = nil, customBlobStore: Bool? = nil, customSegmentStore: Bool? = nil, splitPersistence: Bool? = nil, repositoryBackupDir: String? = nil, blobGcMaxAgeInSecs: Int32? = nil, blobTrackSnapshotIntervalInSecs: Int32? = nil, role: String? = nil, registerDescriptors: Bool? = nil, dispatchChanges: Bool? = nil) -> RequestBuilder<OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryInfo> {
        let path = "/system/console/configMgr/org.apache.jackrabbit.oak.segment.SegmentNodeStoreFactory"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "repository.home": repositoryHome,
            "tarmk.mode": tarmkMode,
            "tarmk.size": tarmkSize?.encodeToJSON(),
            "segmentCache.size": segmentCacheSize?.encodeToJSON(),
            "stringCache.size": stringCacheSize?.encodeToJSON(),
            "templateCache.size": templateCacheSize?.encodeToJSON(),
            "stringDeduplicationCache.size": stringDeduplicationCacheSize?.encodeToJSON(),
            "templateDeduplicationCache.size": templateDeduplicationCacheSize?.encodeToJSON(),
            "nodeDeduplicationCache.size": nodeDeduplicationCacheSize?.encodeToJSON(),
            "pauseCompaction": pauseCompaction,
            "compaction.retryCount": compactionRetryCount?.encodeToJSON(),
            "compaction.force.timeout": compactionForceTimeout?.encodeToJSON(),
            "compaction.sizeDeltaEstimation": compactionSizeDeltaEstimation?.encodeToJSON(),
            "compaction.disableEstimation": compactionDisableEstimation,
            "compaction.retainedGenerations": compactionRetainedGenerations?.encodeToJSON(),
            "compaction.memoryThreshold": compactionMemoryThreshold?.encodeToJSON(),
            "compaction.progressLog": compactionProgressLog?.encodeToJSON(),
            "standby": standby,
            "customBlobStore": customBlobStore,
            "customSegmentStore": customSegmentStore,
            "splitPersistence": splitPersistence,
            "repository.backup.dir": repositoryBackupDir,
            "blobGcMaxAgeInSecs": blobGcMaxAgeInSecs?.encodeToJSON(),
            "blobTrackSnapshotIntervalInSecs": blobTrackSnapshotIntervalInSecs?.encodeToJSON(),
            "role": role,
            "registerDescriptors": registerDescriptors,
            "dispatchChanges": dispatchChanges
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter commitsTrackerWriterGroups: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorService(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, commitsTrackerWriterGroups: [String]? = nil, completion: ((data: OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceInfo?, error: ErrorType?) -> Void)) {
        orgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, commitsTrackerWriterGroups: commitsTrackerWriterGroups).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.jackrabbit.oak.segment.SegmentNodeStoreMonitorService     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "service_location" : "service_location",
  "bundle_location" : "bundle_location",
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "commitsTrackerWriterGroups" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter commitsTrackerWriterGroups: (query)  (optional)

     - returns: RequestBuilder<OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceInfo> 
     */
    public class func orgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, commitsTrackerWriterGroups: [String]? = nil) -> RequestBuilder<OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceInfo> {
        let path = "/system/console/configMgr/org.apache.jackrabbit.oak.segment.SegmentNodeStoreMonitorService"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "commitsTrackerWriterGroups": commitsTrackerWriterGroups
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter repositoryHome: (query)  (optional)
     - parameter tarmkMode: (query)  (optional)
     - parameter tarmkSize: (query)  (optional)
     - parameter segmentCacheSize: (query)  (optional)
     - parameter stringCacheSize: (query)  (optional)
     - parameter templateCacheSize: (query)  (optional)
     - parameter stringDeduplicationCacheSize: (query)  (optional)
     - parameter templateDeduplicationCacheSize: (query)  (optional)
     - parameter nodeDeduplicationCacheSize: (query)  (optional)
     - parameter pauseCompaction: (query)  (optional)
     - parameter compactionRetryCount: (query)  (optional)
     - parameter compactionForceTimeout: (query)  (optional)
     - parameter compactionSizeDeltaEstimation: (query)  (optional)
     - parameter compactionDisableEstimation: (query)  (optional)
     - parameter compactionRetainedGenerations: (query)  (optional)
     - parameter compactionMemoryThreshold: (query)  (optional)
     - parameter compactionProgressLog: (query)  (optional)
     - parameter standby: (query)  (optional)
     - parameter customBlobStore: (query)  (optional)
     - parameter customSegmentStore: (query)  (optional)
     - parameter splitPersistence: (query)  (optional)
     - parameter repositoryBackupDir: (query)  (optional)
     - parameter blobGcMaxAgeInSecs: (query)  (optional)
     - parameter blobTrackSnapshotIntervalInSecs: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheJackrabbitOakSegmentSegmentNodeStoreService(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, repositoryHome: String? = nil, tarmkMode: String? = nil, tarmkSize: Int32? = nil, segmentCacheSize: Int32? = nil, stringCacheSize: Int32? = nil, templateCacheSize: Int32? = nil, stringDeduplicationCacheSize: Int32? = nil, templateDeduplicationCacheSize: Int32? = nil, nodeDeduplicationCacheSize: Int32? = nil, pauseCompaction: Bool? = nil, compactionRetryCount: Int32? = nil, compactionForceTimeout: Int32? = nil, compactionSizeDeltaEstimation: Int32? = nil, compactionDisableEstimation: Bool? = nil, compactionRetainedGenerations: Int32? = nil, compactionMemoryThreshold: Int32? = nil, compactionProgressLog: Int32? = nil, standby: Bool? = nil, customBlobStore: Bool? = nil, customSegmentStore: Bool? = nil, splitPersistence: Bool? = nil, repositoryBackupDir: String? = nil, blobGcMaxAgeInSecs: Int32? = nil, blobTrackSnapshotIntervalInSecs: Int32? = nil, completion: ((data: OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceInfo?, error: ErrorType?) -> Void)) {
        orgApacheJackrabbitOakSegmentSegmentNodeStoreServiceWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, repositoryHome: repositoryHome, tarmkMode: tarmkMode, tarmkSize: tarmkSize, segmentCacheSize: segmentCacheSize, stringCacheSize: stringCacheSize, templateCacheSize: templateCacheSize, stringDeduplicationCacheSize: stringDeduplicationCacheSize, templateDeduplicationCacheSize: templateDeduplicationCacheSize, nodeDeduplicationCacheSize: nodeDeduplicationCacheSize, pauseCompaction: pauseCompaction, compactionRetryCount: compactionRetryCount, compactionForceTimeout: compactionForceTimeout, compactionSizeDeltaEstimation: compactionSizeDeltaEstimation, compactionDisableEstimation: compactionDisableEstimation, compactionRetainedGenerations: compactionRetainedGenerations, compactionMemoryThreshold: compactionMemoryThreshold, compactionProgressLog: compactionProgressLog, standby: standby, customBlobStore: customBlobStore, customSegmentStore: customSegmentStore, splitPersistence: splitPersistence, repositoryBackupDir: repositoryBackupDir, blobGcMaxAgeInSecs: blobGcMaxAgeInSecs, blobTrackSnapshotIntervalInSecs: blobTrackSnapshotIntervalInSecs).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.jackrabbit.oak.segment.SegmentNodeStoreService     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "service_location" : "service_location",
  "bundle_location" : "bundle_location",
  "description" : "description",
  "pid" : "pid",
  "additionalProperties" : "additionalProperties",
  "title" : "title",
  "properties" : {
    "compaction.force.timeout" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "repository.backup.dir" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "templateCache.size" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "pauseCompaction" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "standby" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "splitPersistence" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "compaction.retryCount" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "customBlobStore" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "repository.home" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "customSegmentStore" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "compaction.disableEstimation" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "compaction.progressLog" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "segmentCache.size" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "templateDeduplicationCache.size" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "compaction.memoryThreshold" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "stringCache.size" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "stringDeduplicationCache.size" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "blobTrackSnapshotIntervalInSecs" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "tarmk.mode" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "tarmk.size" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "nodeDeduplicationCache.size" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "compaction.sizeDeltaEstimation" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "blobGcMaxAgeInSecs" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "compaction.retainedGenerations" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter repositoryHome: (query)  (optional)
     - parameter tarmkMode: (query)  (optional)
     - parameter tarmkSize: (query)  (optional)
     - parameter segmentCacheSize: (query)  (optional)
     - parameter stringCacheSize: (query)  (optional)
     - parameter templateCacheSize: (query)  (optional)
     - parameter stringDeduplicationCacheSize: (query)  (optional)
     - parameter templateDeduplicationCacheSize: (query)  (optional)
     - parameter nodeDeduplicationCacheSize: (query)  (optional)
     - parameter pauseCompaction: (query)  (optional)
     - parameter compactionRetryCount: (query)  (optional)
     - parameter compactionForceTimeout: (query)  (optional)
     - parameter compactionSizeDeltaEstimation: (query)  (optional)
     - parameter compactionDisableEstimation: (query)  (optional)
     - parameter compactionRetainedGenerations: (query)  (optional)
     - parameter compactionMemoryThreshold: (query)  (optional)
     - parameter compactionProgressLog: (query)  (optional)
     - parameter standby: (query)  (optional)
     - parameter customBlobStore: (query)  (optional)
     - parameter customSegmentStore: (query)  (optional)
     - parameter splitPersistence: (query)  (optional)
     - parameter repositoryBackupDir: (query)  (optional)
     - parameter blobGcMaxAgeInSecs: (query)  (optional)
     - parameter blobTrackSnapshotIntervalInSecs: (query)  (optional)

     - returns: RequestBuilder<OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceInfo> 
     */
    public class func orgApacheJackrabbitOakSegmentSegmentNodeStoreServiceWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, repositoryHome: String? = nil, tarmkMode: String? = nil, tarmkSize: Int32? = nil, segmentCacheSize: Int32? = nil, stringCacheSize: Int32? = nil, templateCacheSize: Int32? = nil, stringDeduplicationCacheSize: Int32? = nil, templateDeduplicationCacheSize: Int32? = nil, nodeDeduplicationCacheSize: Int32? = nil, pauseCompaction: Bool? = nil, compactionRetryCount: Int32? = nil, compactionForceTimeout: Int32? = nil, compactionSizeDeltaEstimation: Int32? = nil, compactionDisableEstimation: Bool? = nil, compactionRetainedGenerations: Int32? = nil, compactionMemoryThreshold: Int32? = nil, compactionProgressLog: Int32? = nil, standby: Bool? = nil, customBlobStore: Bool? = nil, customSegmentStore: Bool? = nil, splitPersistence: Bool? = nil, repositoryBackupDir: String? = nil, blobGcMaxAgeInSecs: Int32? = nil, blobTrackSnapshotIntervalInSecs: Int32? = nil) -> RequestBuilder<OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceInfo> {
        let path = "/system/console/configMgr/org.apache.jackrabbit.oak.segment.SegmentNodeStoreService"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "repository.home": repositoryHome,
            "tarmk.mode": tarmkMode,
            "tarmk.size": tarmkSize?.encodeToJSON(),
            "segmentCache.size": segmentCacheSize?.encodeToJSON(),
            "stringCache.size": stringCacheSize?.encodeToJSON(),
            "templateCache.size": templateCacheSize?.encodeToJSON(),
            "stringDeduplicationCache.size": stringDeduplicationCacheSize?.encodeToJSON(),
            "templateDeduplicationCache.size": templateDeduplicationCacheSize?.encodeToJSON(),
            "nodeDeduplicationCache.size": nodeDeduplicationCacheSize?.encodeToJSON(),
            "pauseCompaction": pauseCompaction,
            "compaction.retryCount": compactionRetryCount?.encodeToJSON(),
            "compaction.force.timeout": compactionForceTimeout?.encodeToJSON(),
            "compaction.sizeDeltaEstimation": compactionSizeDeltaEstimation?.encodeToJSON(),
            "compaction.disableEstimation": compactionDisableEstimation,
            "compaction.retainedGenerations": compactionRetainedGenerations?.encodeToJSON(),
            "compaction.memoryThreshold": compactionMemoryThreshold?.encodeToJSON(),
            "compaction.progressLog": compactionProgressLog?.encodeToJSON(),
            "standby": standby,
            "customBlobStore": customBlobStore,
            "customSegmentStore": customSegmentStore,
            "splitPersistence": splitPersistence,
            "repository.backup.dir": repositoryBackupDir,
            "blobGcMaxAgeInSecs": blobGcMaxAgeInSecs?.encodeToJSON(),
            "blobTrackSnapshotIntervalInSecs": blobTrackSnapshotIntervalInSecs?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter orgApacheSlingInstallerConfigurationPersist: (query)  (optional)
     - parameter mode: (query)  (optional)
     - parameter port: (query)  (optional)
     - parameter primaryHost: (query)  (optional)
     - parameter interval: (query)  (optional)
     - parameter primaryAllowedClientIpRanges: (query)  (optional)
     - parameter secure: (query)  (optional)
     - parameter standbyReadtimeout: (query)  (optional)
     - parameter standbyAutoclean: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreService(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, orgApacheSlingInstallerConfigurationPersist: Bool? = nil, mode: String? = nil, port: Int32? = nil, primaryHost: String? = nil, interval: Int32? = nil, primaryAllowedClientIpRanges: [String]? = nil, secure: Bool? = nil, standbyReadtimeout: Int32? = nil, standbyAutoclean: Bool? = nil, completion: ((data: OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceInfo?, error: ErrorType?) -> Void)) {
        orgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, orgApacheSlingInstallerConfigurationPersist: orgApacheSlingInstallerConfigurationPersist, mode: mode, port: port, primaryHost: primaryHost, interval: interval, primaryAllowedClientIpRanges: primaryAllowedClientIpRanges, secure: secure, standbyReadtimeout: standbyReadtimeout, standbyAutoclean: standbyAutoclean).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.jackrabbit.oak.segment.standby.store.StandbyStoreService     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "mode" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : {
        "values" : "",
        "labels" : ""
      },
      "value" : ""
    },
    "standby.autoclean" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "standby.readtimeout" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "port" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "primary.allowed-client-ip-ranges" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "primary.host" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "interval" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "secure" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "org.apache.sling.installer.configuration.persist" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter orgApacheSlingInstallerConfigurationPersist: (query)  (optional)
     - parameter mode: (query)  (optional)
     - parameter port: (query)  (optional)
     - parameter primaryHost: (query)  (optional)
     - parameter interval: (query)  (optional)
     - parameter primaryAllowedClientIpRanges: (query)  (optional)
     - parameter secure: (query)  (optional)
     - parameter standbyReadtimeout: (query)  (optional)
     - parameter standbyAutoclean: (query)  (optional)

     - returns: RequestBuilder<OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceInfo> 
     */
    public class func orgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, orgApacheSlingInstallerConfigurationPersist: Bool? = nil, mode: String? = nil, port: Int32? = nil, primaryHost: String? = nil, interval: Int32? = nil, primaryAllowedClientIpRanges: [String]? = nil, secure: Bool? = nil, standbyReadtimeout: Int32? = nil, standbyAutoclean: Bool? = nil) -> RequestBuilder<OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceInfo> {
        let path = "/system/console/configMgr/org.apache.jackrabbit.oak.segment.standby.store.StandbyStoreService"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "org.apache.sling.installer.configuration.persist": orgApacheSlingInstallerConfigurationPersist,
            "mode": mode,
            "port": port?.encodeToJSON(),
            "primary.host": primaryHost,
            "interval": interval?.encodeToJSON(),
            "primary.allowed-client-ip-ranges": primaryAllowedClientIpRanges,
            "secure": secure,
            "standby.readtimeout": standbyReadtimeout?.encodeToJSON(),
            "standby.autoclean": standbyAutoclean
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter handlerName: (query)  (optional)
     - parameter userExpirationTime: (query)  (optional)
     - parameter userAutoMembership: (query)  (optional)
     - parameter userPropertyMapping: (query)  (optional)
     - parameter userPathPrefix: (query)  (optional)
     - parameter userMembershipExpTime: (query)  (optional)
     - parameter userMembershipNestingDepth: (query)  (optional)
     - parameter userDynamicMembership: (query)  (optional)
     - parameter userDisableMissing: (query)  (optional)
     - parameter groupExpirationTime: (query)  (optional)
     - parameter groupAutoMembership: (query)  (optional)
     - parameter groupPropertyMapping: (query)  (optional)
     - parameter groupPathPrefix: (query)  (optional)
     - parameter enableRFC7613UsercaseMappedProfile: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDe(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, handlerName: String? = nil, userExpirationTime: String? = nil, userAutoMembership: [String]? = nil, userPropertyMapping: [String]? = nil, userPathPrefix: String? = nil, userMembershipExpTime: String? = nil, userMembershipNestingDepth: Int32? = nil, userDynamicMembership: Bool? = nil, userDisableMissing: Bool? = nil, groupExpirationTime: String? = nil, groupAutoMembership: [String]? = nil, groupPropertyMapping: [String]? = nil, groupPathPrefix: String? = nil, enableRFC7613UsercaseMappedProfile: Bool? = nil, completion: ((data: OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeInfo?, error: ErrorType?) -> Void)) {
        orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, handlerName: handlerName, userExpirationTime: userExpirationTime, userAutoMembership: userAutoMembership, userPropertyMapping: userPropertyMapping, userPathPrefix: userPathPrefix, userMembershipExpTime: userMembershipExpTime, userMembershipNestingDepth: userMembershipNestingDepth, userDynamicMembership: userDynamicMembership, userDisableMissing: userDisableMissing, groupExpirationTime: groupExpirationTime, groupAutoMembership: groupAutoMembership, groupPropertyMapping: groupPropertyMapping, groupPathPrefix: groupPathPrefix, enableRFC7613UsercaseMappedProfile: enableRFC7613UsercaseMappedProfile).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authentication.external.impl.DefaultSyncHandler     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "user.membershipExpTime" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "enableRFC7613UsercaseMappedProfile" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "group.expirationTime" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "user.expirationTime" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "user.disableMissing" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "user.propertyMapping" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "user.membershipNestingDepth" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "user.pathPrefix" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "group.propertyMapping" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "group.autoMembership" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "user.autoMembership" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "handler.name" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "group.pathPrefix" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "user.dynamicMembership" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter handlerName: (query)  (optional)
     - parameter userExpirationTime: (query)  (optional)
     - parameter userAutoMembership: (query)  (optional)
     - parameter userPropertyMapping: (query)  (optional)
     - parameter userPathPrefix: (query)  (optional)
     - parameter userMembershipExpTime: (query)  (optional)
     - parameter userMembershipNestingDepth: (query)  (optional)
     - parameter userDynamicMembership: (query)  (optional)
     - parameter userDisableMissing: (query)  (optional)
     - parameter groupExpirationTime: (query)  (optional)
     - parameter groupAutoMembership: (query)  (optional)
     - parameter groupPropertyMapping: (query)  (optional)
     - parameter groupPathPrefix: (query)  (optional)
     - parameter enableRFC7613UsercaseMappedProfile: (query)  (optional)

     - returns: RequestBuilder<OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeInfo> 
     */
    public class func orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, handlerName: String? = nil, userExpirationTime: String? = nil, userAutoMembership: [String]? = nil, userPropertyMapping: [String]? = nil, userPathPrefix: String? = nil, userMembershipExpTime: String? = nil, userMembershipNestingDepth: Int32? = nil, userDynamicMembership: Bool? = nil, userDisableMissing: Bool? = nil, groupExpirationTime: String? = nil, groupAutoMembership: [String]? = nil, groupPropertyMapping: [String]? = nil, groupPathPrefix: String? = nil, enableRFC7613UsercaseMappedProfile: Bool? = nil) -> RequestBuilder<OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeInfo> {
        let path = "/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authentication.external.impl.DefaultSyncHandler"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "handler.name": handlerName,
            "user.expirationTime": userExpirationTime,
            "user.autoMembership": userAutoMembership,
            "user.propertyMapping": userPropertyMapping,
            "user.pathPrefix": userPathPrefix,
            "user.membershipExpTime": userMembershipExpTime,
            "user.membershipNestingDepth": userMembershipNestingDepth?.encodeToJSON(),
            "user.dynamicMembership": userDynamicMembership,
            "user.disableMissing": userDisableMissing,
            "group.expirationTime": groupExpirationTime,
            "group.autoMembership": groupAutoMembership,
            "group.propertyMapping": groupPropertyMapping,
            "group.pathPrefix": groupPathPrefix,
            "enableRFC7613UsercaseMappedProfile": enableRFC7613UsercaseMappedProfile
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter jaasRanking: (query)  (optional)
     - parameter jaasControlFlag: (query)  (optional)
     - parameter jaasRealmName: (query)  (optional)
     - parameter idpName: (query)  (optional)
     - parameter syncHandlerName: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplEx(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, jaasRanking: Int32? = nil, jaasControlFlag: String? = nil, jaasRealmName: String? = nil, idpName: String? = nil, syncHandlerName: String? = nil, completion: ((data: OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExInfo?, error: ErrorType?) -> Void)) {
        orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, jaasRanking: jaasRanking, jaasControlFlag: jaasControlFlag, jaasRealmName: jaasRealmName, idpName: idpName, syncHandlerName: syncHandlerName).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authentication.external.impl.ExternalLoginModuleFactory     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "idp.name" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "jaas.controlFlag" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "jaas.realmName" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "jaas.ranking" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "sync.handlerName" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter jaasRanking: (query)  (optional)
     - parameter jaasControlFlag: (query)  (optional)
     - parameter jaasRealmName: (query)  (optional)
     - parameter idpName: (query)  (optional)
     - parameter syncHandlerName: (query)  (optional)

     - returns: RequestBuilder<OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExInfo> 
     */
    public class func orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, jaasRanking: Int32? = nil, jaasControlFlag: String? = nil, jaasRealmName: String? = nil, idpName: String? = nil, syncHandlerName: String? = nil) -> RequestBuilder<OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExInfo> {
        let path = "/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authentication.external.impl.ExternalLoginModuleFactory"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "jaas.ranking": jaasRanking?.encodeToJSON(),
            "jaas.controlFlag": jaasControlFlag,
            "jaas.realmName": jaasRealmName,
            "idp.name": idpName,
            "sync.handlerName": syncHandlerName
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter protectExternalId: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPr(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, protectExternalId: Bool? = nil, completion: ((data: OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrInfo?, error: ErrorType?) -> Void)) {
        orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, protectExternalId: protectExternalId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authentication.external.impl.principal.ExternalPrincipalConfiguration     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "protectExternalId" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter protectExternalId: (query)  (optional)

     - returns: RequestBuilder<OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrInfo> 
     */
    public class func orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, protectExternalId: Bool? = nil) -> RequestBuilder<OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrInfo> {
        let path = "/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authentication.external.impl.principal.ExternalPrincipalConfiguration"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "protectExternalId": protectExternalId
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cugSupportedPaths: (query)  (optional)
     - parameter cugEnabled: (query)  (optional)
     - parameter configurationRanking: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfi(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cugSupportedPaths: [String]? = nil, cugEnabled: Bool? = nil, configurationRanking: Int32? = nil, completion: ((data: OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiInfo?, error: ErrorType?) -> Void)) {
        orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, cugSupportedPaths: cugSupportedPaths, cugEnabled: cugEnabled, configurationRanking: configurationRanking).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authorization.cug.impl.CugConfiguration     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "service_location" : "service_location",
  "bundle_location" : "bundle_location",
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "cugEnabled" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "configurationRanking" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "cugSupportedPaths" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter cugSupportedPaths: (query)  (optional)
     - parameter cugEnabled: (query)  (optional)
     - parameter configurationRanking: (query)  (optional)

     - returns: RequestBuilder<OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiInfo> 
     */
    public class func orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, cugSupportedPaths: [String]? = nil, cugEnabled: Bool? = nil, configurationRanking: Int32? = nil) -> RequestBuilder<OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiInfo> {
        let path = "/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authorization.cug.impl.CugConfiguration"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "cugSupportedPaths": cugSupportedPaths,
            "cugEnabled": cugEnabled,
            "configurationRanking": configurationRanking?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter principalNames: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExclu(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, principalNames: [String]? = nil, completion: ((data: OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluInfo?, error: ErrorType?) -> Void)) {
        orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, principalNames: principalNames).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authorization.cug.impl.CugExcludeImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "principalNames" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter principalNames: (query)  (optional)

     - returns: RequestBuilder<OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluInfo> 
     */
    public class func orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, principalNames: [String]? = nil) -> RequestBuilder<OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluInfo> {
        let path = "/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authorization.cug.impl.CugExcludeImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "principalNames": principalNames
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter enabledActions: (query)  (optional)
     - parameter userPrivilegeNames: (query)  (optional)
     - parameter groupPrivilegeNames: (query)  (optional)
     - parameter constraint: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizable(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, enabledActions: String? = nil, userPrivilegeNames: [String]? = nil, groupPrivilegeNames: [String]? = nil, constraint: String? = nil, completion: ((data: OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableInfo?, error: ErrorType?) -> Void)) {
        orgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, enabledActions: enabledActions, userPrivilegeNames: userPrivilegeNames, groupPrivilegeNames: groupPrivilegeNames, constraint: constraint).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.jackrabbit.oak.spi.security.user.action.DefaultAuthorizableActionProvider     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "service_location" : "service_location",
  "bundle_location" : "bundle_location",
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "userPrivilegeNames" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "groupPrivilegeNames" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "constraint" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "enabledActions" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : {
        "values" : "",
        "labels" : ""
      },
      "value" : ""
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter enabledActions: (query)  (optional)
     - parameter userPrivilegeNames: (query)  (optional)
     - parameter groupPrivilegeNames: (query)  (optional)
     - parameter constraint: (query)  (optional)

     - returns: RequestBuilder<OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableInfo> 
     */
    public class func orgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, enabledActions: String? = nil, userPrivilegeNames: [String]? = nil, groupPrivilegeNames: [String]? = nil, constraint: String? = nil) -> RequestBuilder<OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableInfo> {
        let path = "/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.user.action.DefaultAuthorizableActionProvider"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "enabledActions": enabledActions,
            "userPrivilegeNames": userPrivilegeNames,
            "groupPrivilegeNames": groupPrivilegeNames,
            "constraint": constraint
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter packageRoots: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheJackrabbitVaultPackagingImplPackagingImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, packageRoots: [String]? = nil, completion: ((data: OrgApacheJackrabbitVaultPackagingImplPackagingImplInfo?, error: ErrorType?) -> Void)) {
        orgApacheJackrabbitVaultPackagingImplPackagingImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, packageRoots: packageRoots).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.jackrabbit.vault.packaging.impl.PackagingImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "packageRoots" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter packageRoots: (query)  (optional)

     - returns: RequestBuilder<OrgApacheJackrabbitVaultPackagingImplPackagingImplInfo> 
     */
    public class func orgApacheJackrabbitVaultPackagingImplPackagingImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, packageRoots: [String]? = nil) -> RequestBuilder<OrgApacheJackrabbitVaultPackagingImplPackagingImplInfo> {
        let path = "/system/console/configMgr/org.apache.jackrabbit.vault.packaging.impl.PackagingImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "packageRoots": packageRoots
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheJackrabbitVaultPackagingImplPackagingImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter homePath: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistry(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, homePath: String? = nil, completion: ((data: OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryInfo?, error: ErrorType?) -> Void)) {
        orgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, homePath: homePath).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.jackrabbit.vault.packaging.registry.impl.FSPackageRegistry     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "homePath" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter homePath: (query)  (optional)

     - returns: RequestBuilder<OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryInfo> 
     */
    public class func orgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, homePath: String? = nil) -> RequestBuilder<OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryInfo> {
        let path = "/system/console/configMgr/org.apache.jackrabbit.vault.packaging.registry.impl.FSPackageRegistry"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "homePath": homePath
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter slingServletMethods: (query)  (optional)
     - parameter slingServletPaths: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheSlingAuthCoreImplLogoutServlet(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, slingServletMethods: [String]? = nil, slingServletPaths: String? = nil, completion: ((data: OrgApacheSlingAuthCoreImplLogoutServletInfo?, error: ErrorType?) -> Void)) {
        orgApacheSlingAuthCoreImplLogoutServletWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, slingServletMethods: slingServletMethods, slingServletPaths: slingServletPaths).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.auth.core.impl.LogoutServlet     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "sling.servlet.paths" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "sling.servlet.methods" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter slingServletMethods: (query)  (optional)
     - parameter slingServletPaths: (query)  (optional)

     - returns: RequestBuilder<OrgApacheSlingAuthCoreImplLogoutServletInfo> 
     */
    public class func orgApacheSlingAuthCoreImplLogoutServletWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, slingServletMethods: [String]? = nil, slingServletPaths: String? = nil) -> RequestBuilder<OrgApacheSlingAuthCoreImplLogoutServletInfo> {
        let path = "/system/console/configMgr/org.apache.sling.auth.core.impl.LogoutServlet"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "sling.servlet.methods": slingServletMethods,
            "sling.servlet.paths": slingServletPaths
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheSlingAuthCoreImplLogoutServletInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter enabled: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheSlingCaconfigImplConfigurationBindingsValueProvider(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, enabled: Bool? = nil, completion: ((data: OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderInfo?, error: ErrorType?) -> Void)) {
        orgApacheSlingCaconfigImplConfigurationBindingsValueProviderWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, enabled: enabled).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.caconfig.impl.ConfigurationBindingsValueProvider     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "enabled" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter enabled: (query)  (optional)

     - returns: RequestBuilder<OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderInfo> 
     */
    public class func orgApacheSlingCaconfigImplConfigurationBindingsValueProviderWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, enabled: Bool? = nil) -> RequestBuilder<OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderInfo> {
        let path = "/system/console/configMgr/org.apache.sling.caconfig.impl.ConfigurationBindingsValueProvider"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "enabled": enabled
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter configBucketNames: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheSlingCaconfigImplConfigurationResolverImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, configBucketNames: [String]? = nil, completion: ((data: OrgApacheSlingCaconfigImplConfigurationResolverImplInfo?, error: ErrorType?) -> Void)) {
        orgApacheSlingCaconfigImplConfigurationResolverImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, configBucketNames: configBucketNames).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.caconfig.impl.ConfigurationResolverImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "service_location" : "service_location",
  "bundle_location" : "bundle_location",
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "configBucketNames" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter configBucketNames: (query)  (optional)

     - returns: RequestBuilder<OrgApacheSlingCaconfigImplConfigurationResolverImplInfo> 
     */
    public class func orgApacheSlingCaconfigImplConfigurationResolverImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, configBucketNames: [String]? = nil) -> RequestBuilder<OrgApacheSlingCaconfigImplConfigurationResolverImplInfo> {
        let path = "/system/console/configMgr/org.apache.sling.caconfig.impl.ConfigurationResolverImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "configBucketNames": configBucketNames
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheSlingCaconfigImplConfigurationResolverImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter enabled: (query)  (optional)
     - parameter configPropertyInheritancePropertyNames: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStra(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, enabled: Bool? = nil, configPropertyInheritancePropertyNames: [String]? = nil, completion: ((data: OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraInfo?, error: ErrorType?) -> Void)) {
        orgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, enabled: enabled, configPropertyInheritancePropertyNames: configPropertyInheritancePropertyNames).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.caconfig.impl.def.DefaultConfigurationInheritanceStrategy     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "configPropertyInheritancePropertyNames" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "enabled" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter enabled: (query)  (optional)
     - parameter configPropertyInheritancePropertyNames: (query)  (optional)

     - returns: RequestBuilder<OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraInfo> 
     */
    public class func orgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, enabled: Bool? = nil, configPropertyInheritancePropertyNames: [String]? = nil) -> RequestBuilder<OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraInfo> {
        let path = "/system/console/configMgr/org.apache.sling.caconfig.impl.def.DefaultConfigurationInheritanceStrategy"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "enabled": enabled,
            "configPropertyInheritancePropertyNames": configPropertyInheritancePropertyNames
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter enabled: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStra(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, enabled: Bool? = nil, completion: ((data: OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraInfo?, error: ErrorType?) -> Void)) {
        orgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, enabled: enabled).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.caconfig.impl.def.DefaultConfigurationPersistenceStrategy     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "enabled" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter enabled: (query)  (optional)

     - returns: RequestBuilder<OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraInfo> 
     */
    public class func orgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, enabled: Bool? = nil) -> RequestBuilder<OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraInfo> {
        let path = "/system/console/configMgr/org.apache.sling.caconfig.impl.def.DefaultConfigurationPersistenceStrategy"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "enabled": enabled
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter description: (query)  (optional)
     - parameter overrides: (query)  (optional)
     - parameter enabled: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProvi(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, description: String? = nil, overrides: [String]? = nil, enabled: Bool? = nil, serviceRanking: Int32? = nil, completion: ((data: OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviInfo?, error: ErrorType?) -> Void)) {
        orgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, description: description, overrides: overrides, enabled: enabled, serviceRanking: serviceRanking).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.caconfig.impl.override.OsgiConfigurationOverrideProvider     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "description" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "overrides" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "enabled" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "service.ranking" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter description: (query)  (optional)
     - parameter overrides: (query)  (optional)
     - parameter enabled: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)

     - returns: RequestBuilder<OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviInfo> 
     */
    public class func orgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, description: String? = nil, overrides: [String]? = nil, enabled: Bool? = nil, serviceRanking: Int32? = nil) -> RequestBuilder<OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviInfo> {
        let path = "/system/console/configMgr/org.apache.sling.caconfig.impl.override.OsgiConfigurationOverrideProvider"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "description": description,
            "overrides": overrides,
            "enabled": enabled,
            "service.ranking": serviceRanking?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter enabled: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOve(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, enabled: Bool? = nil, serviceRanking: Int32? = nil, completion: ((data: OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveInfo?, error: ErrorType?) -> Void)) {
        orgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, enabled: enabled, serviceRanking: serviceRanking).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.caconfig.impl.override.SystemPropertyConfigurationOverrideProvider     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "enabled" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "service.ranking" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter enabled: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)

     - returns: RequestBuilder<OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveInfo> 
     */
    public class func orgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, enabled: Bool? = nil, serviceRanking: Int32? = nil) -> RequestBuilder<OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveInfo> {
        let path = "/system/console/configMgr/org.apache.sling.caconfig.impl.override.SystemPropertyConfigurationOverrideProvider"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "enabled": enabled,
            "service.ranking": serviceRanking?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter ignorePropertyNameRegex: (query)  (optional)
     - parameter configCollectionPropertiesResourceNames: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheSlingCaconfigManagementImplConfigurationManagementSetti(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, ignorePropertyNameRegex: [String]? = nil, configCollectionPropertiesResourceNames: [String]? = nil, completion: ((data: OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiInfo?, error: ErrorType?) -> Void)) {
        orgApacheSlingCaconfigManagementImplConfigurationManagementSettiWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, ignorePropertyNameRegex: ignorePropertyNameRegex, configCollectionPropertiesResourceNames: configCollectionPropertiesResourceNames).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.caconfig.management.impl.ConfigurationManagementSettingsImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "service_location" : "service_location",
  "bundle_location" : "bundle_location",
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "ignorePropertyNameRegex" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "configCollectionPropertiesResourceNames" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter ignorePropertyNameRegex: (query)  (optional)
     - parameter configCollectionPropertiesResourceNames: (query)  (optional)

     - returns: RequestBuilder<OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiInfo> 
     */
    public class func orgApacheSlingCaconfigManagementImplConfigurationManagementSettiWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, ignorePropertyNameRegex: [String]? = nil, configCollectionPropertiesResourceNames: [String]? = nil) -> RequestBuilder<OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiInfo> {
        let path = "/system/console/configMgr/org.apache.sling.caconfig.management.impl.ConfigurationManagementSettingsImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "ignorePropertyNameRegex": ignorePropertyNameRegex,
            "configCollectionPropertiesResourceNames": configCollectionPropertiesResourceNames
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter enabled: (query)  (optional)
     - parameter configPath: (query)  (optional)
     - parameter fallbackPaths: (query)  (optional)
     - parameter configCollectionInheritancePropertyNames: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheSlingCaconfigResourceImplDefDefaultConfigurationResour(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, enabled: Bool? = nil, configPath: String? = nil, fallbackPaths: [String]? = nil, configCollectionInheritancePropertyNames: [String]? = nil, completion: ((data: OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourInfo?, error: ErrorType?) -> Void)) {
        orgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, enabled: enabled, configPath: configPath, fallbackPaths: fallbackPaths, configCollectionInheritancePropertyNames: configCollectionInheritancePropertyNames).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.caconfig.resource.impl.def.DefaultConfigurationResourceResolvingStrategy     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "service_location" : "service_location",
  "bundle_location" : "bundle_location",
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "configCollectionInheritancePropertyNames" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "fallbackPaths" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "configPath" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "enabled" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter enabled: (query)  (optional)
     - parameter configPath: (query)  (optional)
     - parameter fallbackPaths: (query)  (optional)
     - parameter configCollectionInheritancePropertyNames: (query)  (optional)

     - returns: RequestBuilder<OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourInfo> 
     */
    public class func orgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, enabled: Bool? = nil, configPath: String? = nil, fallbackPaths: [String]? = nil, configCollectionInheritancePropertyNames: [String]? = nil) -> RequestBuilder<OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourInfo> {
        let path = "/system/console/configMgr/org.apache.sling.caconfig.resource.impl.def.DefaultConfigurationResourceResolvingStrategy"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "enabled": enabled,
            "configPath": configPath,
            "fallbackPaths": fallbackPaths,
            "configCollectionInheritancePropertyNames": configCollectionInheritancePropertyNames
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter enabled: (query)  (optional)
     - parameter configRefResourceNames: (query)  (optional)
     - parameter configRefPropertyNames: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategy(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, enabled: Bool? = nil, configRefResourceNames: [String]? = nil, configRefPropertyNames: [String]? = nil, serviceRanking: Int32? = nil, completion: ((data: OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyInfo?, error: ErrorType?) -> Void)) {
        orgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, enabled: enabled, configRefResourceNames: configRefResourceNames, configRefPropertyNames: configRefPropertyNames, serviceRanking: serviceRanking).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.caconfig.resource.impl.def.DefaultContextPathStrategy     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "service_location" : "service_location",
  "bundle_location" : "bundle_location",
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "configRefPropertyNames" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "enabled" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "configRefResourceNames" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "service.ranking" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter enabled: (query)  (optional)
     - parameter configRefResourceNames: (query)  (optional)
     - parameter configRefPropertyNames: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)

     - returns: RequestBuilder<OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyInfo> 
     */
    public class func orgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, enabled: Bool? = nil, configRefResourceNames: [String]? = nil, configRefPropertyNames: [String]? = nil, serviceRanking: Int32? = nil) -> RequestBuilder<OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyInfo> {
        let path = "/system/console/configMgr/org.apache.sling.caconfig.resource.impl.def.DefaultContextPathStrategy"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "enabled": enabled,
            "configRefResourceNames": configRefResourceNames,
            "configRefPropertyNames": configRefPropertyNames,
            "service.ranking": serviceRanking?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter parserFeatures: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheSlingCommonsHtmlInternalTagsoupHtmlParser(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, parserFeatures: [String]? = nil, completion: ((data: OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserInfo?, error: ErrorType?) -> Void)) {
        orgApacheSlingCommonsHtmlInternalTagsoupHtmlParserWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, parserFeatures: parserFeatures).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.commons.html.internal.TagsoupHtmlParser     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "parser.features" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter parserFeatures: (query)  (optional)

     - returns: RequestBuilder<OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserInfo> 
     */
    public class func orgApacheSlingCommonsHtmlInternalTagsoupHtmlParserWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, parserFeatures: [String]? = nil) -> RequestBuilder<OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserInfo> {
        let path = "/system/console/configMgr/org.apache.sling.commons.html.internal.TagsoupHtmlParser"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "parser.features": parserFeatures
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter orgApacheSlingCommonsLogLevel: (query)  (optional)
     - parameter orgApacheSlingCommonsLogFile: (query)  (optional)
     - parameter orgApacheSlingCommonsLogFileNumber: (query)  (optional)
     - parameter orgApacheSlingCommonsLogFileSize: (query)  (optional)
     - parameter orgApacheSlingCommonsLogPattern: (query)  (optional)
     - parameter orgApacheSlingCommonsLogConfigurationFile: (query)  (optional)
     - parameter orgApacheSlingCommonsLogPackagingDataEnabled: (query)  (optional)
     - parameter orgApacheSlingCommonsLogMaxCallerDataDepth: (query)  (optional)
     - parameter orgApacheSlingCommonsLogMaxOldFileCountInDump: (query)  (optional)
     - parameter orgApacheSlingCommonsLogNumOfLines: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheSlingCommonsLogLogManager(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, orgApacheSlingCommonsLogLevel: String? = nil, orgApacheSlingCommonsLogFile: String? = nil, orgApacheSlingCommonsLogFileNumber: Int32? = nil, orgApacheSlingCommonsLogFileSize: String? = nil, orgApacheSlingCommonsLogPattern: String? = nil, orgApacheSlingCommonsLogConfigurationFile: String? = nil, orgApacheSlingCommonsLogPackagingDataEnabled: Bool? = nil, orgApacheSlingCommonsLogMaxCallerDataDepth: Int32? = nil, orgApacheSlingCommonsLogMaxOldFileCountInDump: Int32? = nil, orgApacheSlingCommonsLogNumOfLines: Int32? = nil, completion: ((data: OrgApacheSlingCommonsLogLogManagerInfo?, error: ErrorType?) -> Void)) {
        orgApacheSlingCommonsLogLogManagerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, orgApacheSlingCommonsLogLevel: orgApacheSlingCommonsLogLevel, orgApacheSlingCommonsLogFile: orgApacheSlingCommonsLogFile, orgApacheSlingCommonsLogFileNumber: orgApacheSlingCommonsLogFileNumber, orgApacheSlingCommonsLogFileSize: orgApacheSlingCommonsLogFileSize, orgApacheSlingCommonsLogPattern: orgApacheSlingCommonsLogPattern, orgApacheSlingCommonsLogConfigurationFile: orgApacheSlingCommonsLogConfigurationFile, orgApacheSlingCommonsLogPackagingDataEnabled: orgApacheSlingCommonsLogPackagingDataEnabled, orgApacheSlingCommonsLogMaxCallerDataDepth: orgApacheSlingCommonsLogMaxCallerDataDepth, orgApacheSlingCommonsLogMaxOldFileCountInDump: orgApacheSlingCommonsLogMaxOldFileCountInDump, orgApacheSlingCommonsLogNumOfLines: orgApacheSlingCommonsLogNumOfLines).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.commons.log.LogManager     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "service_location" : "service_location",
  "bundle_location" : "bundle_location",
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "org.apache.sling.commons.log.file.number" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "org.apache.sling.commons.log.maxCallerDataDepth" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "org.apache.sling.commons.log.file.size" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "org.apache.sling.commons.log.packagingDataEnabled" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "org.apache.sling.commons.log.numOfLines" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "org.apache.sling.commons.log.level" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : {
        "values" : "",
        "labels" : ""
      },
      "value" : ""
    },
    "org.apache.sling.commons.log.maxOldFileCountInDump" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "org.apache.sling.commons.log.pattern" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "org.apache.sling.commons.log.configurationFile" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "org.apache.sling.commons.log.file" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter orgApacheSlingCommonsLogLevel: (query)  (optional)
     - parameter orgApacheSlingCommonsLogFile: (query)  (optional)
     - parameter orgApacheSlingCommonsLogFileNumber: (query)  (optional)
     - parameter orgApacheSlingCommonsLogFileSize: (query)  (optional)
     - parameter orgApacheSlingCommonsLogPattern: (query)  (optional)
     - parameter orgApacheSlingCommonsLogConfigurationFile: (query)  (optional)
     - parameter orgApacheSlingCommonsLogPackagingDataEnabled: (query)  (optional)
     - parameter orgApacheSlingCommonsLogMaxCallerDataDepth: (query)  (optional)
     - parameter orgApacheSlingCommonsLogMaxOldFileCountInDump: (query)  (optional)
     - parameter orgApacheSlingCommonsLogNumOfLines: (query)  (optional)

     - returns: RequestBuilder<OrgApacheSlingCommonsLogLogManagerInfo> 
     */
    public class func orgApacheSlingCommonsLogLogManagerWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, orgApacheSlingCommonsLogLevel: String? = nil, orgApacheSlingCommonsLogFile: String? = nil, orgApacheSlingCommonsLogFileNumber: Int32? = nil, orgApacheSlingCommonsLogFileSize: String? = nil, orgApacheSlingCommonsLogPattern: String? = nil, orgApacheSlingCommonsLogConfigurationFile: String? = nil, orgApacheSlingCommonsLogPackagingDataEnabled: Bool? = nil, orgApacheSlingCommonsLogMaxCallerDataDepth: Int32? = nil, orgApacheSlingCommonsLogMaxOldFileCountInDump: Int32? = nil, orgApacheSlingCommonsLogNumOfLines: Int32? = nil) -> RequestBuilder<OrgApacheSlingCommonsLogLogManagerInfo> {
        let path = "/system/console/configMgr/org.apache.sling.commons.log.LogManager"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "org.apache.sling.commons.log.level": orgApacheSlingCommonsLogLevel,
            "org.apache.sling.commons.log.file": orgApacheSlingCommonsLogFile,
            "org.apache.sling.commons.log.file.number": orgApacheSlingCommonsLogFileNumber?.encodeToJSON(),
            "org.apache.sling.commons.log.file.size": orgApacheSlingCommonsLogFileSize,
            "org.apache.sling.commons.log.pattern": orgApacheSlingCommonsLogPattern,
            "org.apache.sling.commons.log.configurationFile": orgApacheSlingCommonsLogConfigurationFile,
            "org.apache.sling.commons.log.packagingDataEnabled": orgApacheSlingCommonsLogPackagingDataEnabled,
            "org.apache.sling.commons.log.maxCallerDataDepth": orgApacheSlingCommonsLogMaxCallerDataDepth?.encodeToJSON(),
            "org.apache.sling.commons.log.maxOldFileCountInDump": orgApacheSlingCommonsLogMaxOldFileCountInDump?.encodeToJSON(),
            "org.apache.sling.commons.log.numOfLines": orgApacheSlingCommonsLogNumOfLines?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheSlingCommonsLogLogManagerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter orgApacheSlingCommonsLogLevel: (query)  (optional)
     - parameter orgApacheSlingCommonsLogFile: (query)  (optional)
     - parameter orgApacheSlingCommonsLogPattern: (query)  (optional)
     - parameter orgApacheSlingCommonsLogNames: (query)  (optional)
     - parameter orgApacheSlingCommonsLogAdditiv: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheSlingCommonsLogLogManagerFactoryConfig(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, orgApacheSlingCommonsLogLevel: String? = nil, orgApacheSlingCommonsLogFile: String? = nil, orgApacheSlingCommonsLogPattern: String? = nil, orgApacheSlingCommonsLogNames: [String]? = nil, orgApacheSlingCommonsLogAdditiv: Bool? = nil, completion: ((data: OrgApacheSlingCommonsLogLogManagerFactoryConfigInfo?, error: ErrorType?) -> Void)) {
        orgApacheSlingCommonsLogLogManagerFactoryConfigWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, orgApacheSlingCommonsLogLevel: orgApacheSlingCommonsLogLevel, orgApacheSlingCommonsLogFile: orgApacheSlingCommonsLogFile, orgApacheSlingCommonsLogPattern: orgApacheSlingCommonsLogPattern, orgApacheSlingCommonsLogNames: orgApacheSlingCommonsLogNames, orgApacheSlingCommonsLogAdditiv: orgApacheSlingCommonsLogAdditiv).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.commons.log.LogManager.factory.config     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "org.apache.sling.commons.log.names" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "org.apache.sling.commons.log.additiv" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "org.apache.sling.commons.log.level" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : {
        "values" : "",
        "labels" : ""
      },
      "value" : ""
    },
    "org.apache.sling.commons.log.pattern" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "org.apache.sling.commons.log.file" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter orgApacheSlingCommonsLogLevel: (query)  (optional)
     - parameter orgApacheSlingCommonsLogFile: (query)  (optional)
     - parameter orgApacheSlingCommonsLogPattern: (query)  (optional)
     - parameter orgApacheSlingCommonsLogNames: (query)  (optional)
     - parameter orgApacheSlingCommonsLogAdditiv: (query)  (optional)

     - returns: RequestBuilder<OrgApacheSlingCommonsLogLogManagerFactoryConfigInfo> 
     */
    public class func orgApacheSlingCommonsLogLogManagerFactoryConfigWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, orgApacheSlingCommonsLogLevel: String? = nil, orgApacheSlingCommonsLogFile: String? = nil, orgApacheSlingCommonsLogPattern: String? = nil, orgApacheSlingCommonsLogNames: [String]? = nil, orgApacheSlingCommonsLogAdditiv: Bool? = nil) -> RequestBuilder<OrgApacheSlingCommonsLogLogManagerFactoryConfigInfo> {
        let path = "/system/console/configMgr/org.apache.sling.commons.log.LogManager.factory.config"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "org.apache.sling.commons.log.level": orgApacheSlingCommonsLogLevel,
            "org.apache.sling.commons.log.file": orgApacheSlingCommonsLogFile,
            "org.apache.sling.commons.log.pattern": orgApacheSlingCommonsLogPattern,
            "org.apache.sling.commons.log.names": orgApacheSlingCommonsLogNames,
            "org.apache.sling.commons.log.additiv": orgApacheSlingCommonsLogAdditiv
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheSlingCommonsLogLogManagerFactoryConfigInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter orgApacheSlingCommonsLogFile: (query)  (optional)
     - parameter orgApacheSlingCommonsLogFileNumber: (query)  (optional)
     - parameter orgApacheSlingCommonsLogFileSize: (query)  (optional)
     - parameter orgApacheSlingCommonsLogFileBuffered: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheSlingCommonsLogLogManagerFactoryWriter(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, orgApacheSlingCommonsLogFile: String? = nil, orgApacheSlingCommonsLogFileNumber: Int32? = nil, orgApacheSlingCommonsLogFileSize: String? = nil, orgApacheSlingCommonsLogFileBuffered: Bool? = nil, completion: ((data: OrgApacheSlingCommonsLogLogManagerFactoryWriterInfo?, error: ErrorType?) -> Void)) {
        orgApacheSlingCommonsLogLogManagerFactoryWriterWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, orgApacheSlingCommonsLogFile: orgApacheSlingCommonsLogFile, orgApacheSlingCommonsLogFileNumber: orgApacheSlingCommonsLogFileNumber, orgApacheSlingCommonsLogFileSize: orgApacheSlingCommonsLogFileSize, orgApacheSlingCommonsLogFileBuffered: orgApacheSlingCommonsLogFileBuffered).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.commons.log.LogManager.factory.writer     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "org.apache.sling.commons.log.file.number" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "org.apache.sling.commons.log.file.buffered" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "org.apache.sling.commons.log.file.size" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "org.apache.sling.commons.log.file" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter orgApacheSlingCommonsLogFile: (query)  (optional)
     - parameter orgApacheSlingCommonsLogFileNumber: (query)  (optional)
     - parameter orgApacheSlingCommonsLogFileSize: (query)  (optional)
     - parameter orgApacheSlingCommonsLogFileBuffered: (query)  (optional)

     - returns: RequestBuilder<OrgApacheSlingCommonsLogLogManagerFactoryWriterInfo> 
     */
    public class func orgApacheSlingCommonsLogLogManagerFactoryWriterWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, orgApacheSlingCommonsLogFile: String? = nil, orgApacheSlingCommonsLogFileNumber: Int32? = nil, orgApacheSlingCommonsLogFileSize: String? = nil, orgApacheSlingCommonsLogFileBuffered: Bool? = nil) -> RequestBuilder<OrgApacheSlingCommonsLogLogManagerFactoryWriterInfo> {
        let path = "/system/console/configMgr/org.apache.sling.commons.log.LogManager.factory.writer"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "org.apache.sling.commons.log.file": orgApacheSlingCommonsLogFile,
            "org.apache.sling.commons.log.file.number": orgApacheSlingCommonsLogFileNumber?.encodeToJSON(),
            "org.apache.sling.commons.log.file.size": orgApacheSlingCommonsLogFileSize,
            "org.apache.sling.commons.log.file.buffered": orgApacheSlingCommonsLogFileBuffered
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheSlingCommonsLogLogManagerFactoryWriterInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter period: (query)  (optional)
     - parameter timeUnit: (query)  (optional)
     - parameter level: (query)  (optional)
     - parameter loggerName: (query)  (optional)
     - parameter _prefix: (query)  (optional)
     - parameter pattern: (query)  (optional)
     - parameter registryName: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheSlingCommonsMetricsInternalLogReporter(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, period: Int32? = nil, timeUnit: String? = nil, level: String? = nil, loggerName: String? = nil, _prefix: String? = nil, pattern: String? = nil, registryName: String? = nil, completion: ((data: OrgApacheSlingCommonsMetricsInternalLogReporterInfo?, error: ErrorType?) -> Void)) {
        orgApacheSlingCommonsMetricsInternalLogReporterWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, period: period, timeUnit: timeUnit, level: level, loggerName: loggerName, _prefix: _prefix, pattern: pattern, registryName: registryName).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.commons.metrics.internal.LogReporter     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "period" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "level" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : {
        "values" : "",
        "labels" : ""
      },
      "value" : ""
    },
    "prefix" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "pattern" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "loggerName" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "registryName" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "timeUnit" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : {
        "values" : "",
        "labels" : ""
      },
      "value" : ""
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter period: (query)  (optional)
     - parameter timeUnit: (query)  (optional)
     - parameter level: (query)  (optional)
     - parameter loggerName: (query)  (optional)
     - parameter _prefix: (query)  (optional)
     - parameter pattern: (query)  (optional)
     - parameter registryName: (query)  (optional)

     - returns: RequestBuilder<OrgApacheSlingCommonsMetricsInternalLogReporterInfo> 
     */
    public class func orgApacheSlingCommonsMetricsInternalLogReporterWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, period: Int32? = nil, timeUnit: String? = nil, level: String? = nil, loggerName: String? = nil, _prefix: String? = nil, pattern: String? = nil, registryName: String? = nil) -> RequestBuilder<OrgApacheSlingCommonsMetricsInternalLogReporterInfo> {
        let path = "/system/console/configMgr/org.apache.sling.commons.metrics.internal.LogReporter"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "period": period?.encodeToJSON(),
            "timeUnit": timeUnit,
            "level": level,
            "loggerName": loggerName,
            "prefix": _prefix,
            "pattern": pattern,
            "registryName": registryName
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheSlingCommonsMetricsInternalLogReporterInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter datasources: (query)  (optional)
     - parameter step: (query)  (optional)
     - parameter archives: (query)  (optional)
     - parameter path: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporter(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, datasources: [String]? = nil, step: Int32? = nil, archives: [String]? = nil, path: String? = nil, completion: ((data: OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterInfo?, error: ErrorType?) -> Void)) {
        orgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, datasources: datasources, step: step, archives: archives, path: path).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.commons.metrics.rrd4j.impl.CodahaleMetricsReporter     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "service_location" : "service_location",
  "bundle_location" : "bundle_location",
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "path" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "archives" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "datasources" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "step" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter datasources: (query)  (optional)
     - parameter step: (query)  (optional)
     - parameter archives: (query)  (optional)
     - parameter path: (query)  (optional)

     - returns: RequestBuilder<OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterInfo> 
     */
    public class func orgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, datasources: [String]? = nil, step: Int32? = nil, archives: [String]? = nil, path: String? = nil) -> RequestBuilder<OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterInfo> {
        let path = "/system/console/configMgr/org.apache.sling.commons.metrics.rrd4j.impl.CodahaleMetricsReporter"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "datasources": datasources,
            "step": step?.encodeToJSON(),
            "archives": archives,
            "path": path
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter mimeTypes: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheSlingCommonsMimeInternalMimeTypeServiceImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, mimeTypes: [String]? = nil, completion: ((data: OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplInfo?, error: ErrorType?) -> Void)) {
        orgApacheSlingCommonsMimeInternalMimeTypeServiceImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, mimeTypes: mimeTypes).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.commons.mime.internal.MimeTypeServiceImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "service_location" : "service_location",
  "bundle_location" : "bundle_location",
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "mime.types" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter mimeTypes: (query)  (optional)

     - returns: RequestBuilder<OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplInfo> 
     */
    public class func orgApacheSlingCommonsMimeInternalMimeTypeServiceImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, mimeTypes: [String]? = nil) -> RequestBuilder<OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplInfo> {
        let path = "/system/console/configMgr/org.apache.sling.commons.mime.internal.MimeTypeServiceImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "mime.types": mimeTypes
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter poolName: (query)  (optional)
     - parameter allowedPoolNames: (query)  (optional)
     - parameter schedulerUseleaderforsingle: (query)  (optional)
     - parameter metricsFilters: (query)  (optional)
     - parameter slowThresholdMillis: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheSlingCommonsSchedulerImplQuartzScheduler(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, poolName: String? = nil, allowedPoolNames: [String]? = nil, schedulerUseleaderforsingle: Bool? = nil, metricsFilters: [String]? = nil, slowThresholdMillis: Int32? = nil, completion: ((data: OrgApacheSlingCommonsSchedulerImplQuartzSchedulerInfo?, error: ErrorType?) -> Void)) {
        orgApacheSlingCommonsSchedulerImplQuartzSchedulerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, poolName: poolName, allowedPoolNames: allowedPoolNames, schedulerUseleaderforsingle: schedulerUseleaderforsingle, metricsFilters: metricsFilters, slowThresholdMillis: slowThresholdMillis).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.commons.scheduler.impl.QuartzScheduler     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "service_location" : "service_location",
  "bundle_location" : "bundle_location",
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "metrics.filters" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "allowedPoolNames" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "scheduler.useleaderforsingle" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "slowThresholdMillis" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "poolName" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter poolName: (query)  (optional)
     - parameter allowedPoolNames: (query)  (optional)
     - parameter schedulerUseleaderforsingle: (query)  (optional)
     - parameter metricsFilters: (query)  (optional)
     - parameter slowThresholdMillis: (query)  (optional)

     - returns: RequestBuilder<OrgApacheSlingCommonsSchedulerImplQuartzSchedulerInfo> 
     */
    public class func orgApacheSlingCommonsSchedulerImplQuartzSchedulerWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, poolName: String? = nil, allowedPoolNames: [String]? = nil, schedulerUseleaderforsingle: Bool? = nil, metricsFilters: [String]? = nil, slowThresholdMillis: Int32? = nil) -> RequestBuilder<OrgApacheSlingCommonsSchedulerImplQuartzSchedulerInfo> {
        let path = "/system/console/configMgr/org.apache.sling.commons.scheduler.impl.QuartzScheduler"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "poolName": poolName,
            "allowedPoolNames": allowedPoolNames,
            "scheduler.useleaderforsingle": schedulerUseleaderforsingle,
            "metrics.filters": metricsFilters,
            "slowThresholdMillis": slowThresholdMillis?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheSlingCommonsSchedulerImplQuartzSchedulerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter maxQuartzJobDurationAcceptable: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheSlingCommonsSchedulerImplSchedulerHealthCheck(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, maxQuartzJobDurationAcceptable: Int32? = nil, completion: ((data: OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckInfo?, error: ErrorType?) -> Void)) {
        orgApacheSlingCommonsSchedulerImplSchedulerHealthCheckWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, maxQuartzJobDurationAcceptable: maxQuartzJobDurationAcceptable).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.commons.scheduler.impl.SchedulerHealthCheck     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "max.quartzJob.duration.acceptable" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter maxQuartzJobDurationAcceptable: (query)  (optional)

     - returns: RequestBuilder<OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckInfo> 
     */
    public class func orgApacheSlingCommonsSchedulerImplSchedulerHealthCheckWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, maxQuartzJobDurationAcceptable: Int32? = nil) -> RequestBuilder<OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckInfo> {
        let path = "/system/console/configMgr/org.apache.sling.commons.scheduler.impl.SchedulerHealthCheck"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "max.quartzJob.duration.acceptable": maxQuartzJobDurationAcceptable?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter minPoolSize: (query)  (optional)
     - parameter maxPoolSize: (query)  (optional)
     - parameter queueSize: (query)  (optional)
     - parameter maxThreadAge: (query)  (optional)
     - parameter keepAliveTime: (query)  (optional)
     - parameter blockPolicy: (query)  (optional)
     - parameter shutdownGraceful: (query)  (optional)
     - parameter daemon: (query)  (optional)
     - parameter shutdownWaitTime: (query)  (optional)
     - parameter priority: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheSlingCommonsThreadsImplDefaultThreadPoolFactory(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, name: String? = nil, minPoolSize: Int32? = nil, maxPoolSize: Int32? = nil, queueSize: Int32? = nil, maxThreadAge: Int32? = nil, keepAliveTime: Int32? = nil, blockPolicy: String? = nil, shutdownGraceful: Bool? = nil, daemon: Bool? = nil, shutdownWaitTime: Int32? = nil, priority: String? = nil, completion: ((data: OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryInfo?, error: ErrorType?) -> Void)) {
        orgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, name: name, minPoolSize: minPoolSize, maxPoolSize: maxPoolSize, queueSize: queueSize, maxThreadAge: maxThreadAge, keepAliveTime: keepAliveTime, blockPolicy: blockPolicy, shutdownGraceful: shutdownGraceful, daemon: daemon, shutdownWaitTime: shutdownWaitTime, priority: priority).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.commons.threads.impl.DefaultThreadPool.factory     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "shutdownWaitTime" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "minPoolSize" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "queueSize" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "keepAliveTime" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "name" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "blockPolicy" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : {
        "values" : "",
        "labels" : ""
      },
      "value" : ""
    },
    "shutdownGraceful" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "priority" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : {
        "values" : "",
        "labels" : ""
      },
      "value" : ""
    },
    "maxPoolSize" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "maxThreadAge" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "daemon" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter minPoolSize: (query)  (optional)
     - parameter maxPoolSize: (query)  (optional)
     - parameter queueSize: (query)  (optional)
     - parameter maxThreadAge: (query)  (optional)
     - parameter keepAliveTime: (query)  (optional)
     - parameter blockPolicy: (query)  (optional)
     - parameter shutdownGraceful: (query)  (optional)
     - parameter daemon: (query)  (optional)
     - parameter shutdownWaitTime: (query)  (optional)
     - parameter priority: (query)  (optional)

     - returns: RequestBuilder<OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryInfo> 
     */
    public class func orgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, name: String? = nil, minPoolSize: Int32? = nil, maxPoolSize: Int32? = nil, queueSize: Int32? = nil, maxThreadAge: Int32? = nil, keepAliveTime: Int32? = nil, blockPolicy: String? = nil, shutdownGraceful: Bool? = nil, daemon: Bool? = nil, shutdownWaitTime: Int32? = nil, priority: String? = nil) -> RequestBuilder<OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryInfo> {
        let path = "/system/console/configMgr/org.apache.sling.commons.threads.impl.DefaultThreadPool.factory"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "name": name,
            "minPoolSize": minPoolSize?.encodeToJSON(),
            "maxPoolSize": maxPoolSize?.encodeToJSON(),
            "queueSize": queueSize?.encodeToJSON(),
            "maxThreadAge": maxThreadAge?.encodeToJSON(),
            "keepAliveTime": keepAliveTime?.encodeToJSON(),
            "blockPolicy": blockPolicy,
            "shutdownGraceful": shutdownGraceful,
            "daemon": daemon,
            "shutdownWaitTime": shutdownWaitTime?.encodeToJSON(),
            "priority": priority
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter datasourceName: (query)  (optional)
     - parameter datasourceSvcPropName: (query)  (optional)
     - parameter driverClassName: (query)  (optional)
     - parameter url: (query)  (optional)
     - parameter username: (query)  (optional)
     - parameter password: (query)  (optional)
     - parameter defaultAutoCommit: (query)  (optional)
     - parameter defaultReadOnly: (query)  (optional)
     - parameter defaultTransactionIsolation: (query)  (optional)
     - parameter defaultCatalog: (query)  (optional)
     - parameter maxActive: (query)  (optional)
     - parameter maxIdle: (query)  (optional)
     - parameter minIdle: (query)  (optional)
     - parameter initialSize: (query)  (optional)
     - parameter maxWait: (query)  (optional)
     - parameter maxAge: (query)  (optional)
     - parameter testOnBorrow: (query)  (optional)
     - parameter testOnReturn: (query)  (optional)
     - parameter testWhileIdle: (query)  (optional)
     - parameter validationQuery: (query)  (optional)
     - parameter validationQueryTimeout: (query)  (optional)
     - parameter timeBetweenEvictionRunsMillis: (query)  (optional)
     - parameter minEvictableIdleTimeMillis: (query)  (optional)
     - parameter connectionProperties: (query)  (optional)
     - parameter initSQL: (query)  (optional)
     - parameter jdbcInterceptors: (query)  (optional)
     - parameter validationInterval: (query)  (optional)
     - parameter logValidationErrors: (query)  (optional)
     - parameter datasourceSvcProperties: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheSlingDatasourceDataSourceFactory(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, datasourceName: String? = nil, datasourceSvcPropName: String? = nil, driverClassName: String? = nil, url: String? = nil, username: String? = nil, password: String? = nil, defaultAutoCommit: String? = nil, defaultReadOnly: String? = nil, defaultTransactionIsolation: String? = nil, defaultCatalog: String? = nil, maxActive: Int32? = nil, maxIdle: Int32? = nil, minIdle: Int32? = nil, initialSize: Int32? = nil, maxWait: Int32? = nil, maxAge: Int32? = nil, testOnBorrow: Bool? = nil, testOnReturn: Bool? = nil, testWhileIdle: Bool? = nil, validationQuery: String? = nil, validationQueryTimeout: Int32? = nil, timeBetweenEvictionRunsMillis: Int32? = nil, minEvictableIdleTimeMillis: Int32? = nil, connectionProperties: String? = nil, initSQL: String? = nil, jdbcInterceptors: String? = nil, validationInterval: Int32? = nil, logValidationErrors: Bool? = nil, datasourceSvcProperties: [String]? = nil, completion: ((data: OrgApacheSlingDatasourceDataSourceFactoryInfo?, error: ErrorType?) -> Void)) {
        orgApacheSlingDatasourceDataSourceFactoryWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, datasourceName: datasourceName, datasourceSvcPropName: datasourceSvcPropName, driverClassName: driverClassName, url: url, username: username, password: password, defaultAutoCommit: defaultAutoCommit, defaultReadOnly: defaultReadOnly, defaultTransactionIsolation: defaultTransactionIsolation, defaultCatalog: defaultCatalog, maxActive: maxActive, maxIdle: maxIdle, minIdle: minIdle, initialSize: initialSize, maxWait: maxWait, maxAge: maxAge, testOnBorrow: testOnBorrow, testOnReturn: testOnReturn, testWhileIdle: testWhileIdle, validationQuery: validationQuery, validationQueryTimeout: validationQueryTimeout, timeBetweenEvictionRunsMillis: timeBetweenEvictionRunsMillis, minEvictableIdleTimeMillis: minEvictableIdleTimeMillis, connectionProperties: connectionProperties, initSQL: initSQL, jdbcInterceptors: jdbcInterceptors, validationInterval: validationInterval, logValidationErrors: logValidationErrors, datasourceSvcProperties: datasourceSvcProperties).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.datasource.DataSourceFactory     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "connectionProperties" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "validationQuery" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "defaultCatalog" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "datasource.svc.prop.name" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "validationInterval" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "datasource.svc.properties" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "password" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "maxIdle" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "testWhileIdle" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "defaultAutoCommit" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : {
        "values" : "",
        "labels" : ""
      },
      "value" : ""
    },
    "minIdle" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "jdbcInterceptors" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "defaultReadOnly" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : {
        "values" : "",
        "labels" : ""
      },
      "value" : ""
    },
    "initialSize" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "maxWait" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "defaultTransactionIsolation" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : {
        "values" : "",
        "labels" : ""
      },
      "value" : ""
    },
    "url" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "testOnBorrow" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "logValidationErrors" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "maxAge" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "timeBetweenEvictionRunsMillis" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "minEvictableIdleTimeMillis" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "testOnReturn" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "datasource.name" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "driverClassName" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "username" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "maxActive" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "validationQueryTimeout" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "initSQL" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter datasourceName: (query)  (optional)
     - parameter datasourceSvcPropName: (query)  (optional)
     - parameter driverClassName: (query)  (optional)
     - parameter url: (query)  (optional)
     - parameter username: (query)  (optional)
     - parameter password: (query)  (optional)
     - parameter defaultAutoCommit: (query)  (optional)
     - parameter defaultReadOnly: (query)  (optional)
     - parameter defaultTransactionIsolation: (query)  (optional)
     - parameter defaultCatalog: (query)  (optional)
     - parameter maxActive: (query)  (optional)
     - parameter maxIdle: (query)  (optional)
     - parameter minIdle: (query)  (optional)
     - parameter initialSize: (query)  (optional)
     - parameter maxWait: (query)  (optional)
     - parameter maxAge: (query)  (optional)
     - parameter testOnBorrow: (query)  (optional)
     - parameter testOnReturn: (query)  (optional)
     - parameter testWhileIdle: (query)  (optional)
     - parameter validationQuery: (query)  (optional)
     - parameter validationQueryTimeout: (query)  (optional)
     - parameter timeBetweenEvictionRunsMillis: (query)  (optional)
     - parameter minEvictableIdleTimeMillis: (query)  (optional)
     - parameter connectionProperties: (query)  (optional)
     - parameter initSQL: (query)  (optional)
     - parameter jdbcInterceptors: (query)  (optional)
     - parameter validationInterval: (query)  (optional)
     - parameter logValidationErrors: (query)  (optional)
     - parameter datasourceSvcProperties: (query)  (optional)

     - returns: RequestBuilder<OrgApacheSlingDatasourceDataSourceFactoryInfo> 
     */
    public class func orgApacheSlingDatasourceDataSourceFactoryWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, datasourceName: String? = nil, datasourceSvcPropName: String? = nil, driverClassName: String? = nil, url: String? = nil, username: String? = nil, password: String? = nil, defaultAutoCommit: String? = nil, defaultReadOnly: String? = nil, defaultTransactionIsolation: String? = nil, defaultCatalog: String? = nil, maxActive: Int32? = nil, maxIdle: Int32? = nil, minIdle: Int32? = nil, initialSize: Int32? = nil, maxWait: Int32? = nil, maxAge: Int32? = nil, testOnBorrow: Bool? = nil, testOnReturn: Bool? = nil, testWhileIdle: Bool? = nil, validationQuery: String? = nil, validationQueryTimeout: Int32? = nil, timeBetweenEvictionRunsMillis: Int32? = nil, minEvictableIdleTimeMillis: Int32? = nil, connectionProperties: String? = nil, initSQL: String? = nil, jdbcInterceptors: String? = nil, validationInterval: Int32? = nil, logValidationErrors: Bool? = nil, datasourceSvcProperties: [String]? = nil) -> RequestBuilder<OrgApacheSlingDatasourceDataSourceFactoryInfo> {
        let path = "/system/console/configMgr/org.apache.sling.datasource.DataSourceFactory"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "datasource.name": datasourceName,
            "datasource.svc.prop.name": datasourceSvcPropName,
            "driverClassName": driverClassName,
            "url": url,
            "username": username,
            "password": password,
            "defaultAutoCommit": defaultAutoCommit,
            "defaultReadOnly": defaultReadOnly,
            "defaultTransactionIsolation": defaultTransactionIsolation,
            "defaultCatalog": defaultCatalog,
            "maxActive": maxActive?.encodeToJSON(),
            "maxIdle": maxIdle?.encodeToJSON(),
            "minIdle": minIdle?.encodeToJSON(),
            "initialSize": initialSize?.encodeToJSON(),
            "maxWait": maxWait?.encodeToJSON(),
            "maxAge": maxAge?.encodeToJSON(),
            "testOnBorrow": testOnBorrow,
            "testOnReturn": testOnReturn,
            "testWhileIdle": testWhileIdle,
            "validationQuery": validationQuery,
            "validationQueryTimeout": validationQueryTimeout?.encodeToJSON(),
            "timeBetweenEvictionRunsMillis": timeBetweenEvictionRunsMillis?.encodeToJSON(),
            "minEvictableIdleTimeMillis": minEvictableIdleTimeMillis?.encodeToJSON(),
            "connectionProperties": connectionProperties,
            "initSQL": initSQL,
            "jdbcInterceptors": jdbcInterceptors,
            "validationInterval": validationInterval?.encodeToJSON(),
            "logValidationErrors": logValidationErrors,
            "datasource.svc.properties": datasourceSvcProperties
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheSlingDatasourceDataSourceFactoryInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter datasourceName: (query)  (optional)
     - parameter datasourceSvcPropName: (query)  (optional)
     - parameter datasourceJndiName: (query)  (optional)
     - parameter jndiProperties: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheSlingDatasourceJNDIDataSourceFactory(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, datasourceName: String? = nil, datasourceSvcPropName: String? = nil, datasourceJndiName: String? = nil, jndiProperties: [String]? = nil, completion: ((data: OrgApacheSlingDatasourceJNDIDataSourceFactoryInfo?, error: ErrorType?) -> Void)) {
        orgApacheSlingDatasourceJNDIDataSourceFactoryWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, datasourceName: datasourceName, datasourceSvcPropName: datasourceSvcPropName, datasourceJndiName: datasourceJndiName, jndiProperties: jndiProperties).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.datasource.JNDIDataSourceFactory     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "datasource.name" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "datasource.jndi.name" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "datasource.svc.prop.name" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "jndi.properties" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter datasourceName: (query)  (optional)
     - parameter datasourceSvcPropName: (query)  (optional)
     - parameter datasourceJndiName: (query)  (optional)
     - parameter jndiProperties: (query)  (optional)

     - returns: RequestBuilder<OrgApacheSlingDatasourceJNDIDataSourceFactoryInfo> 
     */
    public class func orgApacheSlingDatasourceJNDIDataSourceFactoryWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, datasourceName: String? = nil, datasourceSvcPropName: String? = nil, datasourceJndiName: String? = nil, jndiProperties: [String]? = nil) -> RequestBuilder<OrgApacheSlingDatasourceJNDIDataSourceFactoryInfo> {
        let path = "/system/console/configMgr/org.apache.sling.datasource.JNDIDataSourceFactory"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "datasource.name": datasourceName,
            "datasource.svc.prop.name": datasourceSvcPropName,
            "datasource.jndi.name": datasourceJndiName,
            "jndi.properties": jndiProperties
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheSlingDatasourceJNDIDataSourceFactoryInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter connectorPingTimeout: (query)  (optional)
     - parameter connectorPingInterval: (query)  (optional)
     - parameter discoveryLiteCheckInterval: (query)  (optional)
     - parameter clusterSyncServiceTimeout: (query)  (optional)
     - parameter clusterSyncServiceInterval: (query)  (optional)
     - parameter enableSyncToken: (query)  (optional)
     - parameter minEventDelay: (query)  (optional)
     - parameter socketConnectTimeout: (query)  (optional)
     - parameter soTimeout: (query)  (optional)
     - parameter topologyConnectorUrls: (query)  (optional)
     - parameter topologyConnectorWhitelist: (query)  (optional)
     - parameter autoStopLocalLoopEnabled: (query)  (optional)
     - parameter gzipConnectorRequestsEnabled: (query)  (optional)
     - parameter hmacEnabled: (query)  (optional)
     - parameter enableEncryption: (query)  (optional)
     - parameter sharedKey: (query)  (optional)
     - parameter hmacSharedKeyTTL: (query)  (optional)
     - parameter backoffStandbyFactor: (query)  (optional)
     - parameter backoffStableFactor: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheSlingDiscoveryOakConfig(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, connectorPingTimeout: Int32? = nil, connectorPingInterval: Int32? = nil, discoveryLiteCheckInterval: Int32? = nil, clusterSyncServiceTimeout: Int32? = nil, clusterSyncServiceInterval: Int32? = nil, enableSyncToken: Bool? = nil, minEventDelay: Int32? = nil, socketConnectTimeout: Int32? = nil, soTimeout: Int32? = nil, topologyConnectorUrls: [String]? = nil, topologyConnectorWhitelist: [String]? = nil, autoStopLocalLoopEnabled: Bool? = nil, gzipConnectorRequestsEnabled: Bool? = nil, hmacEnabled: Bool? = nil, enableEncryption: Bool? = nil, sharedKey: String? = nil, hmacSharedKeyTTL: Int32? = nil, backoffStandbyFactor: String? = nil, backoffStableFactor: String? = nil, completion: ((data: OrgApacheSlingDiscoveryOakConfigInfo?, error: ErrorType?) -> Void)) {
        orgApacheSlingDiscoveryOakConfigWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, connectorPingTimeout: connectorPingTimeout, connectorPingInterval: connectorPingInterval, discoveryLiteCheckInterval: discoveryLiteCheckInterval, clusterSyncServiceTimeout: clusterSyncServiceTimeout, clusterSyncServiceInterval: clusterSyncServiceInterval, enableSyncToken: enableSyncToken, minEventDelay: minEventDelay, socketConnectTimeout: socketConnectTimeout, soTimeout: soTimeout, topologyConnectorUrls: topologyConnectorUrls, topologyConnectorWhitelist: topologyConnectorWhitelist, autoStopLocalLoopEnabled: autoStopLocalLoopEnabled, gzipConnectorRequestsEnabled: gzipConnectorRequestsEnabled, hmacEnabled: hmacEnabled, enableEncryption: enableEncryption, sharedKey: sharedKey, hmacSharedKeyTTL: hmacSharedKeyTTL, backoffStandbyFactor: backoffStandbyFactor, backoffStableFactor: backoffStableFactor).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.discovery.oak.Config     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "service_location" : "service_location",
  "bundle_location" : "bundle_location",
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "sharedKey" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "hmacEnabled" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "hmacSharedKeyTTL" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "socketConnectTimeout" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "topologyConnectorWhitelist" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "soTimeout" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "autoStopLocalLoopEnabled" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "gzipConnectorRequestsEnabled" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "clusterSyncServiceTimeout" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "topologyConnectorUrls" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "connectorPingInterval" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "enableSyncToken" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "clusterSyncServiceInterval" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "discoveryLiteCheckInterval" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "backoffStandbyFactor" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "connectorPingTimeout" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "backoffStableFactor" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "minEventDelay" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "enableEncryption" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter connectorPingTimeout: (query)  (optional)
     - parameter connectorPingInterval: (query)  (optional)
     - parameter discoveryLiteCheckInterval: (query)  (optional)
     - parameter clusterSyncServiceTimeout: (query)  (optional)
     - parameter clusterSyncServiceInterval: (query)  (optional)
     - parameter enableSyncToken: (query)  (optional)
     - parameter minEventDelay: (query)  (optional)
     - parameter socketConnectTimeout: (query)  (optional)
     - parameter soTimeout: (query)  (optional)
     - parameter topologyConnectorUrls: (query)  (optional)
     - parameter topologyConnectorWhitelist: (query)  (optional)
     - parameter autoStopLocalLoopEnabled: (query)  (optional)
     - parameter gzipConnectorRequestsEnabled: (query)  (optional)
     - parameter hmacEnabled: (query)  (optional)
     - parameter enableEncryption: (query)  (optional)
     - parameter sharedKey: (query)  (optional)
     - parameter hmacSharedKeyTTL: (query)  (optional)
     - parameter backoffStandbyFactor: (query)  (optional)
     - parameter backoffStableFactor: (query)  (optional)

     - returns: RequestBuilder<OrgApacheSlingDiscoveryOakConfigInfo> 
     */
    public class func orgApacheSlingDiscoveryOakConfigWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, connectorPingTimeout: Int32? = nil, connectorPingInterval: Int32? = nil, discoveryLiteCheckInterval: Int32? = nil, clusterSyncServiceTimeout: Int32? = nil, clusterSyncServiceInterval: Int32? = nil, enableSyncToken: Bool? = nil, minEventDelay: Int32? = nil, socketConnectTimeout: Int32? = nil, soTimeout: Int32? = nil, topologyConnectorUrls: [String]? = nil, topologyConnectorWhitelist: [String]? = nil, autoStopLocalLoopEnabled: Bool? = nil, gzipConnectorRequestsEnabled: Bool? = nil, hmacEnabled: Bool? = nil, enableEncryption: Bool? = nil, sharedKey: String? = nil, hmacSharedKeyTTL: Int32? = nil, backoffStandbyFactor: String? = nil, backoffStableFactor: String? = nil) -> RequestBuilder<OrgApacheSlingDiscoveryOakConfigInfo> {
        let path = "/system/console/configMgr/org.apache.sling.discovery.oak.Config"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "connectorPingTimeout": connectorPingTimeout?.encodeToJSON(),
            "connectorPingInterval": connectorPingInterval?.encodeToJSON(),
            "discoveryLiteCheckInterval": discoveryLiteCheckInterval?.encodeToJSON(),
            "clusterSyncServiceTimeout": clusterSyncServiceTimeout?.encodeToJSON(),
            "clusterSyncServiceInterval": clusterSyncServiceInterval?.encodeToJSON(),
            "enableSyncToken": enableSyncToken,
            "minEventDelay": minEventDelay?.encodeToJSON(),
            "socketConnectTimeout": socketConnectTimeout?.encodeToJSON(),
            "soTimeout": soTimeout?.encodeToJSON(),
            "topologyConnectorUrls": topologyConnectorUrls,
            "topologyConnectorWhitelist": topologyConnectorWhitelist,
            "autoStopLocalLoopEnabled": autoStopLocalLoopEnabled,
            "gzipConnectorRequestsEnabled": gzipConnectorRequestsEnabled,
            "hmacEnabled": hmacEnabled,
            "enableEncryption": enableEncryption,
            "sharedKey": sharedKey,
            "hmacSharedKeyTTL": hmacSharedKeyTTL?.encodeToJSON(),
            "backoffStandbyFactor": backoffStandbyFactor,
            "backoffStableFactor": backoffStableFactor
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheSlingDiscoveryOakConfigInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcName: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - parameter hcMbeanName: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheSlingDiscoveryOakSynchronizedClocksHealthCheck(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcName: String? = nil, hcTags: [String]? = nil, hcMbeanName: String? = nil, completion: ((data: OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckInfo?, error: ErrorType?) -> Void)) {
        orgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, hcName: hcName, hcTags: hcTags, hcMbeanName: hcMbeanName).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.discovery.oak.SynchronizedClocksHealthCheck     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "hc.tags" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "hc.name" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "hc.mbean.name" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcName: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - parameter hcMbeanName: (query)  (optional)

     - returns: RequestBuilder<OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckInfo> 
     */
    public class func orgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcName: String? = nil, hcTags: [String]? = nil, hcMbeanName: String? = nil) -> RequestBuilder<OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckInfo> {
        let path = "/system/console/configMgr/org.apache.sling.discovery.oak.SynchronizedClocksHealthCheck"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "hc.name": hcName,
            "hc.tags": hcTags,
            "hc.mbean.name": hcMbeanName
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter title: (query)  (optional)
     - parameter details: (query)  (optional)
     - parameter enabled: (query)  (optional)
     - parameter serviceName: (query)  (optional)
     - parameter logLevel: (query)  (optional)
     - parameter allowedRoots: (query)  (optional)
     - parameter queueProcessingEnabled: (query)  (optional)
     - parameter packageImporterEndpoints: (query)  (optional)
     - parameter passiveQueues: (query)  (optional)
     - parameter priorityQueues: (query)  (optional)
     - parameter retryStrategy: (query)  (optional)
     - parameter retryAttempts: (query)  (optional)
     - parameter requestAuthorizationStrategyTarget: (query)  (optional)
     - parameter transportSecretProviderTarget: (query)  (optional)
     - parameter packageBuilderTarget: (query)  (optional)
     - parameter triggersTarget: (query)  (optional)
     - parameter queueProvider: (query)  (optional)
     - parameter asyncDelivery: (query)  (optional)
     - parameter httpConnTimeout: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheSlingDistributionAgentImplForwardDistributionAgentFacto(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, name: String? = nil, title: String? = nil, details: String? = nil, enabled: Bool? = nil, serviceName: String? = nil, logLevel: String? = nil, allowedRoots: [String]? = nil, queueProcessingEnabled: Bool? = nil, packageImporterEndpoints: [String]? = nil, passiveQueues: [String]? = nil, priorityQueues: [String]? = nil, retryStrategy: String? = nil, retryAttempts: Int32? = nil, requestAuthorizationStrategyTarget: String? = nil, transportSecretProviderTarget: String? = nil, packageBuilderTarget: String? = nil, triggersTarget: String? = nil, queueProvider: String? = nil, asyncDelivery: Bool? = nil, httpConnTimeout: Int32? = nil, completion: ((data: OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoInfo?, error: ErrorType?) -> Void)) {
        orgApacheSlingDistributionAgentImplForwardDistributionAgentFactoWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, name: name, title: title, details: details, enabled: enabled, serviceName: serviceName, logLevel: logLevel, allowedRoots: allowedRoots, queueProcessingEnabled: queueProcessingEnabled, packageImporterEndpoints: packageImporterEndpoints, passiveQueues: passiveQueues, priorityQueues: priorityQueues, retryStrategy: retryStrategy, retryAttempts: retryAttempts, requestAuthorizationStrategyTarget: requestAuthorizationStrategyTarget, transportSecretProviderTarget: transportSecretProviderTarget, packageBuilderTarget: packageBuilderTarget, triggersTarget: triggersTarget, queueProvider: queueProvider, asyncDelivery: asyncDelivery, httpConnTimeout: httpConnTimeout).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.distribution.agent.impl.ForwardDistributionAgentFactory     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "queue.processing.enabled" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "queue.provider" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : {
        "values" : "",
        "labels" : ""
      },
      "value" : ""
    },
    "retry.strategy" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : {
        "values" : "",
        "labels" : ""
      },
      "value" : ""
    },
    "priorityQueues" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "triggers.target" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "retry.attempts" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "title" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "serviceName" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "enabled" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "passiveQueues" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "async.delivery" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "allowed.roots" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "requestAuthorizationStrategy.target" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "http.conn.timeout" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "name" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "log.level" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : {
        "values" : "",
        "labels" : ""
      },
      "value" : ""
    },
    "details" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "transportSecretProvider.target" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "packageBuilder.target" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "packageImporter.endpoints" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter title: (query)  (optional)
     - parameter details: (query)  (optional)
     - parameter enabled: (query)  (optional)
     - parameter serviceName: (query)  (optional)
     - parameter logLevel: (query)  (optional)
     - parameter allowedRoots: (query)  (optional)
     - parameter queueProcessingEnabled: (query)  (optional)
     - parameter packageImporterEndpoints: (query)  (optional)
     - parameter passiveQueues: (query)  (optional)
     - parameter priorityQueues: (query)  (optional)
     - parameter retryStrategy: (query)  (optional)
     - parameter retryAttempts: (query)  (optional)
     - parameter requestAuthorizationStrategyTarget: (query)  (optional)
     - parameter transportSecretProviderTarget: (query)  (optional)
     - parameter packageBuilderTarget: (query)  (optional)
     - parameter triggersTarget: (query)  (optional)
     - parameter queueProvider: (query)  (optional)
     - parameter asyncDelivery: (query)  (optional)
     - parameter httpConnTimeout: (query)  (optional)

     - returns: RequestBuilder<OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoInfo> 
     */
    public class func orgApacheSlingDistributionAgentImplForwardDistributionAgentFactoWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, name: String? = nil, title: String? = nil, details: String? = nil, enabled: Bool? = nil, serviceName: String? = nil, logLevel: String? = nil, allowedRoots: [String]? = nil, queueProcessingEnabled: Bool? = nil, packageImporterEndpoints: [String]? = nil, passiveQueues: [String]? = nil, priorityQueues: [String]? = nil, retryStrategy: String? = nil, retryAttempts: Int32? = nil, requestAuthorizationStrategyTarget: String? = nil, transportSecretProviderTarget: String? = nil, packageBuilderTarget: String? = nil, triggersTarget: String? = nil, queueProvider: String? = nil, asyncDelivery: Bool? = nil, httpConnTimeout: Int32? = nil) -> RequestBuilder<OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoInfo> {
        let path = "/system/console/configMgr/org.apache.sling.distribution.agent.impl.ForwardDistributionAgentFactory"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "name": name,
            "title": title,
            "details": details,
            "enabled": enabled,
            "serviceName": serviceName,
            "log.level": logLevel,
            "allowed.roots": allowedRoots,
            "queue.processing.enabled": queueProcessingEnabled,
            "packageImporter.endpoints": packageImporterEndpoints,
            "passiveQueues": passiveQueues,
            "priorityQueues": priorityQueues,
            "retry.strategy": retryStrategy,
            "retry.attempts": retryAttempts?.encodeToJSON(),
            "requestAuthorizationStrategy.target": requestAuthorizationStrategyTarget,
            "transportSecretProvider.target": transportSecretProviderTarget,
            "packageBuilder.target": packageBuilderTarget,
            "triggers.target": triggersTarget,
            "queue.provider": queueProvider,
            "async.delivery": asyncDelivery,
            "http.conn.timeout": httpConnTimeout?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter jcrPrivilege: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheSlingDistributionAgentImplPrivilegeDistributionRequestA(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, name: String? = nil, jcrPrivilege: String? = nil, completion: ((data: OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAInfo?, error: ErrorType?) -> Void)) {
        orgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, name: name, jcrPrivilege: jcrPrivilege).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.distribution.agent.impl.PrivilegeDistributionRequestAuthorizationStrategyFactory     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "name" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "jcrPrivilege" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter jcrPrivilege: (query)  (optional)

     - returns: RequestBuilder<OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAInfo> 
     */
    public class func orgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, name: String? = nil, jcrPrivilege: String? = nil) -> RequestBuilder<OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAInfo> {
        let path = "/system/console/configMgr/org.apache.sling.distribution.agent.impl.PrivilegeDistributionRequestAuthorizationStrategyFactory"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "name": name,
            "jcrPrivilege": jcrPrivilege
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter title: (query)  (optional)
     - parameter details: (query)  (optional)
     - parameter enabled: (query)  (optional)
     - parameter serviceName: (query)  (optional)
     - parameter logLevel: (query)  (optional)
     - parameter allowedRoots: (query)  (optional)
     - parameter requestAuthorizationStrategyTarget: (query)  (optional)
     - parameter queueProviderFactoryTarget: (query)  (optional)
     - parameter packageBuilderTarget: (query)  (optional)
     - parameter triggersTarget: (query)  (optional)
     - parameter priorityQueues: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheSlingDistributionAgentImplQueueDistributionAgentFactory(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, name: String? = nil, title: String? = nil, details: String? = nil, enabled: Bool? = nil, serviceName: String? = nil, logLevel: String? = nil, allowedRoots: [String]? = nil, requestAuthorizationStrategyTarget: String? = nil, queueProviderFactoryTarget: String? = nil, packageBuilderTarget: String? = nil, triggersTarget: String? = nil, priorityQueues: [String]? = nil, completion: ((data: OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryInfo?, error: ErrorType?) -> Void)) {
        orgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, name: name, title: title, details: details, enabled: enabled, serviceName: serviceName, logLevel: logLevel, allowedRoots: allowedRoots, requestAuthorizationStrategyTarget: requestAuthorizationStrategyTarget, queueProviderFactoryTarget: queueProviderFactoryTarget, packageBuilderTarget: packageBuilderTarget, triggersTarget: triggersTarget, priorityQueues: priorityQueues).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.distribution.agent.impl.QueueDistributionAgentFactory     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "allowed.roots" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "triggers.target" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "priorityQueues" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "requestAuthorizationStrategy.target" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "name" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "log.level" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : {
        "values" : "",
        "labels" : ""
      },
      "value" : ""
    },
    "details" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "title" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "serviceName" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "queueProviderFactory.target" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "enabled" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "packageBuilder.target" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter title: (query)  (optional)
     - parameter details: (query)  (optional)
     - parameter enabled: (query)  (optional)
     - parameter serviceName: (query)  (optional)
     - parameter logLevel: (query)  (optional)
     - parameter allowedRoots: (query)  (optional)
     - parameter requestAuthorizationStrategyTarget: (query)  (optional)
     - parameter queueProviderFactoryTarget: (query)  (optional)
     - parameter packageBuilderTarget: (query)  (optional)
     - parameter triggersTarget: (query)  (optional)
     - parameter priorityQueues: (query)  (optional)

     - returns: RequestBuilder<OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryInfo> 
     */
    public class func orgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, name: String? = nil, title: String? = nil, details: String? = nil, enabled: Bool? = nil, serviceName: String? = nil, logLevel: String? = nil, allowedRoots: [String]? = nil, requestAuthorizationStrategyTarget: String? = nil, queueProviderFactoryTarget: String? = nil, packageBuilderTarget: String? = nil, triggersTarget: String? = nil, priorityQueues: [String]? = nil) -> RequestBuilder<OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryInfo> {
        let path = "/system/console/configMgr/org.apache.sling.distribution.agent.impl.QueueDistributionAgentFactory"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "name": name,
            "title": title,
            "details": details,
            "enabled": enabled,
            "serviceName": serviceName,
            "log.level": logLevel,
            "allowed.roots": allowedRoots,
            "requestAuthorizationStrategy.target": requestAuthorizationStrategyTarget,
            "queueProviderFactory.target": queueProviderFactoryTarget,
            "packageBuilder.target": packageBuilderTarget,
            "triggers.target": triggersTarget,
            "priorityQueues": priorityQueues
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter title: (query)  (optional)
     - parameter details: (query)  (optional)
     - parameter enabled: (query)  (optional)
     - parameter serviceName: (query)  (optional)
     - parameter logLevel: (query)  (optional)
     - parameter queueProcessingEnabled: (query)  (optional)
     - parameter packageExporterEndpoints: (query)  (optional)
     - parameter pullItems: (query)  (optional)
     - parameter httpConnTimeout: (query)  (optional)
     - parameter requestAuthorizationStrategyTarget: (query)  (optional)
     - parameter transportSecretProviderTarget: (query)  (optional)
     - parameter packageBuilderTarget: (query)  (optional)
     - parameter triggersTarget: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheSlingDistributionAgentImplReverseDistributionAgentFacto(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, name: String? = nil, title: String? = nil, details: String? = nil, enabled: Bool? = nil, serviceName: String? = nil, logLevel: String? = nil, queueProcessingEnabled: Bool? = nil, packageExporterEndpoints: [String]? = nil, pullItems: Int32? = nil, httpConnTimeout: Int32? = nil, requestAuthorizationStrategyTarget: String? = nil, transportSecretProviderTarget: String? = nil, packageBuilderTarget: String? = nil, triggersTarget: String? = nil, completion: ((data: OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoInfo?, error: ErrorType?) -> Void)) {
        orgApacheSlingDistributionAgentImplReverseDistributionAgentFactoWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, name: name, title: title, details: details, enabled: enabled, serviceName: serviceName, logLevel: logLevel, queueProcessingEnabled: queueProcessingEnabled, packageExporterEndpoints: packageExporterEndpoints, pullItems: pullItems, httpConnTimeout: httpConnTimeout, requestAuthorizationStrategyTarget: requestAuthorizationStrategyTarget, transportSecretProviderTarget: transportSecretProviderTarget, packageBuilderTarget: packageBuilderTarget, triggersTarget: triggersTarget).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.distribution.agent.impl.ReverseDistributionAgentFactory     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "queue.processing.enabled" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "triggers.target" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "packageExporter.endpoints" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "title" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "serviceName" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "enabled" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "pull.items" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "http.conn.timeout" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "requestAuthorizationStrategy.target" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "name" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "log.level" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : {
        "values" : "",
        "labels" : ""
      },
      "value" : ""
    },
    "details" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "transportSecretProvider.target" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "packageBuilder.target" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter title: (query)  (optional)
     - parameter details: (query)  (optional)
     - parameter enabled: (query)  (optional)
     - parameter serviceName: (query)  (optional)
     - parameter logLevel: (query)  (optional)
     - parameter queueProcessingEnabled: (query)  (optional)
     - parameter packageExporterEndpoints: (query)  (optional)
     - parameter pullItems: (query)  (optional)
     - parameter httpConnTimeout: (query)  (optional)
     - parameter requestAuthorizationStrategyTarget: (query)  (optional)
     - parameter transportSecretProviderTarget: (query)  (optional)
     - parameter packageBuilderTarget: (query)  (optional)
     - parameter triggersTarget: (query)  (optional)

     - returns: RequestBuilder<OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoInfo> 
     */
    public class func orgApacheSlingDistributionAgentImplReverseDistributionAgentFactoWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, name: String? = nil, title: String? = nil, details: String? = nil, enabled: Bool? = nil, serviceName: String? = nil, logLevel: String? = nil, queueProcessingEnabled: Bool? = nil, packageExporterEndpoints: [String]? = nil, pullItems: Int32? = nil, httpConnTimeout: Int32? = nil, requestAuthorizationStrategyTarget: String? = nil, transportSecretProviderTarget: String? = nil, packageBuilderTarget: String? = nil, triggersTarget: String? = nil) -> RequestBuilder<OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoInfo> {
        let path = "/system/console/configMgr/org.apache.sling.distribution.agent.impl.ReverseDistributionAgentFactory"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "name": name,
            "title": title,
            "details": details,
            "enabled": enabled,
            "serviceName": serviceName,
            "log.level": logLevel,
            "queue.processing.enabled": queueProcessingEnabled,
            "packageExporter.endpoints": packageExporterEndpoints,
            "pull.items": pullItems?.encodeToJSON(),
            "http.conn.timeout": httpConnTimeout?.encodeToJSON(),
            "requestAuthorizationStrategy.target": requestAuthorizationStrategyTarget,
            "transportSecretProvider.target": transportSecretProviderTarget,
            "packageBuilder.target": packageBuilderTarget,
            "triggers.target": triggersTarget
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter title: (query)  (optional)
     - parameter details: (query)  (optional)
     - parameter enabled: (query)  (optional)
     - parameter serviceName: (query)  (optional)
     - parameter logLevel: (query)  (optional)
     - parameter queueProcessingEnabled: (query)  (optional)
     - parameter packageExporterTarget: (query)  (optional)
     - parameter packageImporterTarget: (query)  (optional)
     - parameter requestAuthorizationStrategyTarget: (query)  (optional)
     - parameter triggersTarget: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheSlingDistributionAgentImplSimpleDistributionAgentFactor(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, name: String? = nil, title: String? = nil, details: String? = nil, enabled: Bool? = nil, serviceName: String? = nil, logLevel: String? = nil, queueProcessingEnabled: Bool? = nil, packageExporterTarget: String? = nil, packageImporterTarget: String? = nil, requestAuthorizationStrategyTarget: String? = nil, triggersTarget: String? = nil, completion: ((data: OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorInfo?, error: ErrorType?) -> Void)) {
        orgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, name: name, title: title, details: details, enabled: enabled, serviceName: serviceName, logLevel: logLevel, queueProcessingEnabled: queueProcessingEnabled, packageExporterTarget: packageExporterTarget, packageImporterTarget: packageImporterTarget, requestAuthorizationStrategyTarget: requestAuthorizationStrategyTarget, triggersTarget: triggersTarget).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.distribution.agent.impl.SimpleDistributionAgentFactory     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "queue.processing.enabled" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "triggers.target" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "requestAuthorizationStrategy.target" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "name" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "log.level" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : {
        "values" : "",
        "labels" : ""
      },
      "value" : ""
    },
    "details" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "title" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "serviceName" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "packageExporter.target" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "packageImporter.target" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "enabled" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter title: (query)  (optional)
     - parameter details: (query)  (optional)
     - parameter enabled: (query)  (optional)
     - parameter serviceName: (query)  (optional)
     - parameter logLevel: (query)  (optional)
     - parameter queueProcessingEnabled: (query)  (optional)
     - parameter packageExporterTarget: (query)  (optional)
     - parameter packageImporterTarget: (query)  (optional)
     - parameter requestAuthorizationStrategyTarget: (query)  (optional)
     - parameter triggersTarget: (query)  (optional)

     - returns: RequestBuilder<OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorInfo> 
     */
    public class func orgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, name: String? = nil, title: String? = nil, details: String? = nil, enabled: Bool? = nil, serviceName: String? = nil, logLevel: String? = nil, queueProcessingEnabled: Bool? = nil, packageExporterTarget: String? = nil, packageImporterTarget: String? = nil, requestAuthorizationStrategyTarget: String? = nil, triggersTarget: String? = nil) -> RequestBuilder<OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorInfo> {
        let path = "/system/console/configMgr/org.apache.sling.distribution.agent.impl.SimpleDistributionAgentFactory"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "name": name,
            "title": title,
            "details": details,
            "enabled": enabled,
            "serviceName": serviceName,
            "log.level": logLevel,
            "queue.processing.enabled": queueProcessingEnabled,
            "packageExporter.target": packageExporterTarget,
            "packageImporter.target": packageImporterTarget,
            "requestAuthorizationStrategy.target": requestAuthorizationStrategyTarget,
            "triggers.target": triggersTarget
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter title: (query)  (optional)
     - parameter details: (query)  (optional)
     - parameter enabled: (query)  (optional)
     - parameter serviceName: (query)  (optional)
     - parameter logLevel: (query)  (optional)
     - parameter queueProcessingEnabled: (query)  (optional)
     - parameter passiveQueues: (query)  (optional)
     - parameter packageExporterEndpoints: (query)  (optional)
     - parameter packageImporterEndpoints: (query)  (optional)
     - parameter retryStrategy: (query)  (optional)
     - parameter retryAttempts: (query)  (optional)
     - parameter pullItems: (query)  (optional)
     - parameter httpConnTimeout: (query)  (optional)
     - parameter requestAuthorizationStrategyTarget: (query)  (optional)
     - parameter transportSecretProviderTarget: (query)  (optional)
     - parameter packageBuilderTarget: (query)  (optional)
     - parameter triggersTarget: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheSlingDistributionAgentImplSyncDistributionAgentFactory(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, name: String? = nil, title: String? = nil, details: String? = nil, enabled: Bool? = nil, serviceName: String? = nil, logLevel: String? = nil, queueProcessingEnabled: Bool? = nil, passiveQueues: [String]? = nil, packageExporterEndpoints: [String]? = nil, packageImporterEndpoints: [String]? = nil, retryStrategy: String? = nil, retryAttempts: Int32? = nil, pullItems: Int32? = nil, httpConnTimeout: Int32? = nil, requestAuthorizationStrategyTarget: String? = nil, transportSecretProviderTarget: String? = nil, packageBuilderTarget: String? = nil, triggersTarget: String? = nil, completion: ((data: OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryInfo?, error: ErrorType?) -> Void)) {
        orgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, name: name, title: title, details: details, enabled: enabled, serviceName: serviceName, logLevel: logLevel, queueProcessingEnabled: queueProcessingEnabled, passiveQueues: passiveQueues, packageExporterEndpoints: packageExporterEndpoints, packageImporterEndpoints: packageImporterEndpoints, retryStrategy: retryStrategy, retryAttempts: retryAttempts, pullItems: pullItems, httpConnTimeout: httpConnTimeout, requestAuthorizationStrategyTarget: requestAuthorizationStrategyTarget, transportSecretProviderTarget: transportSecretProviderTarget, packageBuilderTarget: packageBuilderTarget, triggersTarget: triggersTarget).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.distribution.agent.impl.SyncDistributionAgentFactory     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "queue.processing.enabled" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "retry.strategy" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : {
        "values" : "",
        "labels" : ""
      },
      "value" : ""
    },
    "triggers.target" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "packageExporter.endpoints" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "retry.attempts" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "title" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "serviceName" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "enabled" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "passiveQueues" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "pull.items" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "http.conn.timeout" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "requestAuthorizationStrategy.target" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "name" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "log.level" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : {
        "values" : "",
        "labels" : ""
      },
      "value" : ""
    },
    "details" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "transportSecretProvider.target" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "packageBuilder.target" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "packageImporter.endpoints" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter title: (query)  (optional)
     - parameter details: (query)  (optional)
     - parameter enabled: (query)  (optional)
     - parameter serviceName: (query)  (optional)
     - parameter logLevel: (query)  (optional)
     - parameter queueProcessingEnabled: (query)  (optional)
     - parameter passiveQueues: (query)  (optional)
     - parameter packageExporterEndpoints: (query)  (optional)
     - parameter packageImporterEndpoints: (query)  (optional)
     - parameter retryStrategy: (query)  (optional)
     - parameter retryAttempts: (query)  (optional)
     - parameter pullItems: (query)  (optional)
     - parameter httpConnTimeout: (query)  (optional)
     - parameter requestAuthorizationStrategyTarget: (query)  (optional)
     - parameter transportSecretProviderTarget: (query)  (optional)
     - parameter packageBuilderTarget: (query)  (optional)
     - parameter triggersTarget: (query)  (optional)

     - returns: RequestBuilder<OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryInfo> 
     */
    public class func orgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, name: String? = nil, title: String? = nil, details: String? = nil, enabled: Bool? = nil, serviceName: String? = nil, logLevel: String? = nil, queueProcessingEnabled: Bool? = nil, passiveQueues: [String]? = nil, packageExporterEndpoints: [String]? = nil, packageImporterEndpoints: [String]? = nil, retryStrategy: String? = nil, retryAttempts: Int32? = nil, pullItems: Int32? = nil, httpConnTimeout: Int32? = nil, requestAuthorizationStrategyTarget: String? = nil, transportSecretProviderTarget: String? = nil, packageBuilderTarget: String? = nil, triggersTarget: String? = nil) -> RequestBuilder<OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryInfo> {
        let path = "/system/console/configMgr/org.apache.sling.distribution.agent.impl.SyncDistributionAgentFactory"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "name": name,
            "title": title,
            "details": details,
            "enabled": enabled,
            "serviceName": serviceName,
            "log.level": logLevel,
            "queue.processing.enabled": queueProcessingEnabled,
            "passiveQueues": passiveQueues,
            "packageExporter.endpoints": packageExporterEndpoints,
            "packageImporter.endpoints": packageImporterEndpoints,
            "retry.strategy": retryStrategy,
            "retry.attempts": retryAttempts?.encodeToJSON(),
            "pull.items": pullItems?.encodeToJSON(),
            "http.conn.timeout": httpConnTimeout?.encodeToJSON(),
            "requestAuthorizationStrategy.target": requestAuthorizationStrategyTarget,
            "transportSecretProvider.target": transportSecretProviderTarget,
            "packageBuilder.target": packageBuilderTarget,
            "triggers.target": triggersTarget
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcName: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - parameter hcMbeanName: (query)  (optional)
     - parameter numberOfRetriesAllowed: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheSlingDistributionMonitorDistributionQueueHealthCheck(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcName: String? = nil, hcTags: [String]? = nil, hcMbeanName: String? = nil, numberOfRetriesAllowed: Int32? = nil, completion: ((data: OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckInfo?, error: ErrorType?) -> Void)) {
        orgApacheSlingDistributionMonitorDistributionQueueHealthCheckWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, hcName: hcName, hcTags: hcTags, hcMbeanName: hcMbeanName, numberOfRetriesAllowed: numberOfRetriesAllowed).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.distribution.monitor.DistributionQueueHealthCheck     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "numberOfRetriesAllowed" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "hc.tags" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "hc.name" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "hc.mbean.name" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcName: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - parameter hcMbeanName: (query)  (optional)
     - parameter numberOfRetriesAllowed: (query)  (optional)

     - returns: RequestBuilder<OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckInfo> 
     */
    public class func orgApacheSlingDistributionMonitorDistributionQueueHealthCheckWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcName: String? = nil, hcTags: [String]? = nil, hcMbeanName: String? = nil, numberOfRetriesAllowed: Int32? = nil) -> RequestBuilder<OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckInfo> {
        let path = "/system/console/configMgr/org.apache.sling.distribution.monitor.DistributionQueueHealthCheck"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "hc.name": hcName,
            "hc.tags": hcTags,
            "hc.mbean.name": hcMbeanName,
            "numberOfRetriesAllowed": numberOfRetriesAllowed?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter queue: (query)  (optional)
     - parameter dropInvalidItems: (query)  (optional)
     - parameter agentTarget: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheSlingDistributionPackagingImplExporterAgentDistributio(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, name: String? = nil, queue: String? = nil, dropInvalidItems: Bool? = nil, agentTarget: String? = nil, completion: ((data: OrgApacheSlingDistributionPackagingImplExporterAgentDistributioInfo?, error: ErrorType?) -> Void)) {
        orgApacheSlingDistributionPackagingImplExporterAgentDistributioWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, name: name, queue: queue, dropInvalidItems: dropInvalidItems, agentTarget: agentTarget).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.distribution.packaging.impl.exporter.AgentDistributionPackageExporterFactory     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "agent.target" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "name" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "drop.invalid.items" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "queue" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter queue: (query)  (optional)
     - parameter dropInvalidItems: (query)  (optional)
     - parameter agentTarget: (query)  (optional)

     - returns: RequestBuilder<OrgApacheSlingDistributionPackagingImplExporterAgentDistributioInfo> 
     */
    public class func orgApacheSlingDistributionPackagingImplExporterAgentDistributioWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, name: String? = nil, queue: String? = nil, dropInvalidItems: Bool? = nil, agentTarget: String? = nil) -> RequestBuilder<OrgApacheSlingDistributionPackagingImplExporterAgentDistributioInfo> {
        let path = "/system/console/configMgr/org.apache.sling.distribution.packaging.impl.exporter.AgentDistributionPackageExporterFactory"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "name": name,
            "queue": queue,
            "drop.invalid.items": dropInvalidItems,
            "agent.target": agentTarget
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheSlingDistributionPackagingImplExporterAgentDistributioInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter packageBuilderTarget: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheSlingDistributionPackagingImplExporterLocalDistributio(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, name: String? = nil, packageBuilderTarget: String? = nil, completion: ((data: OrgApacheSlingDistributionPackagingImplExporterLocalDistributioInfo?, error: ErrorType?) -> Void)) {
        orgApacheSlingDistributionPackagingImplExporterLocalDistributioWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, name: name, packageBuilderTarget: packageBuilderTarget).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.distribution.packaging.impl.exporter.LocalDistributionPackageExporterFactory     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "name" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "packageBuilder.target" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter packageBuilderTarget: (query)  (optional)

     - returns: RequestBuilder<OrgApacheSlingDistributionPackagingImplExporterLocalDistributioInfo> 
     */
    public class func orgApacheSlingDistributionPackagingImplExporterLocalDistributioWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, name: String? = nil, packageBuilderTarget: String? = nil) -> RequestBuilder<OrgApacheSlingDistributionPackagingImplExporterLocalDistributioInfo> {
        let path = "/system/console/configMgr/org.apache.sling.distribution.packaging.impl.exporter.LocalDistributionPackageExporterFactory"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "name": name,
            "packageBuilder.target": packageBuilderTarget
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheSlingDistributionPackagingImplExporterLocalDistributioInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter endpoints: (query)  (optional)
     - parameter pullItems: (query)  (optional)
     - parameter packageBuilderTarget: (query)  (optional)
     - parameter transportSecretProviderTarget: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheSlingDistributionPackagingImplExporterRemoteDistributi(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, name: String? = nil, endpoints: [String]? = nil, pullItems: Int32? = nil, packageBuilderTarget: String? = nil, transportSecretProviderTarget: String? = nil, completion: ((data: OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiInfo?, error: ErrorType?) -> Void)) {
        orgApacheSlingDistributionPackagingImplExporterRemoteDistributiWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, name: name, endpoints: endpoints, pullItems: pullItems, packageBuilderTarget: packageBuilderTarget, transportSecretProviderTarget: transportSecretProviderTarget).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.distribution.packaging.impl.exporter.RemoteDistributionPackageExporterFactory     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "endpoints" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "pull.items" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "name" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "transportSecretProvider.target" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "packageBuilder.target" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter endpoints: (query)  (optional)
     - parameter pullItems: (query)  (optional)
     - parameter packageBuilderTarget: (query)  (optional)
     - parameter transportSecretProviderTarget: (query)  (optional)

     - returns: RequestBuilder<OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiInfo> 
     */
    public class func orgApacheSlingDistributionPackagingImplExporterRemoteDistributiWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, name: String? = nil, endpoints: [String]? = nil, pullItems: Int32? = nil, packageBuilderTarget: String? = nil, transportSecretProviderTarget: String? = nil) -> RequestBuilder<OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiInfo> {
        let path = "/system/console/configMgr/org.apache.sling.distribution.packaging.impl.exporter.RemoteDistributionPackageExporterFactory"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "name": name,
            "endpoints": endpoints,
            "pull.items": pullItems?.encodeToJSON(),
            "packageBuilder.target": packageBuilderTarget,
            "transportSecretProvider.target": transportSecretProviderTarget
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter packageBuilderTarget: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheSlingDistributionPackagingImplImporterLocalDistributio(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, name: String? = nil, packageBuilderTarget: String? = nil, completion: ((data: OrgApacheSlingDistributionPackagingImplImporterLocalDistributioInfo?, error: ErrorType?) -> Void)) {
        orgApacheSlingDistributionPackagingImplImporterLocalDistributioWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, name: name, packageBuilderTarget: packageBuilderTarget).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.distribution.packaging.impl.importer.LocalDistributionPackageImporterFactory     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "name" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "packageBuilder.target" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter packageBuilderTarget: (query)  (optional)

     - returns: RequestBuilder<OrgApacheSlingDistributionPackagingImplImporterLocalDistributioInfo> 
     */
    public class func orgApacheSlingDistributionPackagingImplImporterLocalDistributioWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, name: String? = nil, packageBuilderTarget: String? = nil) -> RequestBuilder<OrgApacheSlingDistributionPackagingImplImporterLocalDistributioInfo> {
        let path = "/system/console/configMgr/org.apache.sling.distribution.packaging.impl.importer.LocalDistributionPackageImporterFactory"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "name": name,
            "packageBuilder.target": packageBuilderTarget
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheSlingDistributionPackagingImplImporterLocalDistributioInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter endpoints: (query)  (optional)
     - parameter transportSecretProviderTarget: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheSlingDistributionPackagingImplImporterRemoteDistributi(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, name: String? = nil, endpoints: [String]? = nil, transportSecretProviderTarget: String? = nil, completion: ((data: OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiInfo?, error: ErrorType?) -> Void)) {
        orgApacheSlingDistributionPackagingImplImporterRemoteDistributiWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, name: name, endpoints: endpoints, transportSecretProviderTarget: transportSecretProviderTarget).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.distribution.packaging.impl.importer.RemoteDistributionPackageImporterFactory     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "endpoints" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "name" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "transportSecretProvider.target" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter endpoints: (query)  (optional)
     - parameter transportSecretProviderTarget: (query)  (optional)

     - returns: RequestBuilder<OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiInfo> 
     */
    public class func orgApacheSlingDistributionPackagingImplImporterRemoteDistributiWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, name: String? = nil, endpoints: [String]? = nil, transportSecretProviderTarget: String? = nil) -> RequestBuilder<OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiInfo> {
        let path = "/system/console/configMgr/org.apache.sling.distribution.packaging.impl.importer.RemoteDistributionPackageImporterFactory"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "name": name,
            "endpoints": endpoints,
            "transportSecretProvider.target": transportSecretProviderTarget
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter serviceName: (query)  (optional)
     - parameter path: (query)  (optional)
     - parameter privilegeName: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheSlingDistributionPackagingImplImporterRepositoryDistri(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, name: String? = nil, serviceName: String? = nil, path: String? = nil, privilegeName: String? = nil, completion: ((data: OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriInfo?, error: ErrorType?) -> Void)) {
        orgApacheSlingDistributionPackagingImplImporterRepositoryDistriWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, name: name, serviceName: serviceName, path: path, privilegeName: privilegeName).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.distribution.packaging.impl.importer.RepositoryDistributionPackageImporterFactory     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "path" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "service.name" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "name" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "privilege.name" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter serviceName: (query)  (optional)
     - parameter path: (query)  (optional)
     - parameter privilegeName: (query)  (optional)

     - returns: RequestBuilder<OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriInfo> 
     */
    public class func orgApacheSlingDistributionPackagingImplImporterRepositoryDistriWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, name: String? = nil, serviceName: String? = nil, path: String? = nil, privilegeName: String? = nil) -> RequestBuilder<OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriInfo> {
        let path = "/system/console/configMgr/org.apache.sling.distribution.packaging.impl.importer.RepositoryDistributionPackageImporterFactory"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "name": name,
            "service.name": serviceName,
            "path": path,
            "privilege.name": privilegeName
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter providerRoots: (query)  (optional)
     - parameter kind: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheSlingDistributionResourcesImplDistributionConfiguration(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, providerRoots: String? = nil, kind: String? = nil, completion: ((data: OrgApacheSlingDistributionResourcesImplDistributionConfigurationInfo?, error: ErrorType?) -> Void)) {
        orgApacheSlingDistributionResourcesImplDistributionConfigurationWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, providerRoots: providerRoots, kind: kind).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.distribution.resources.impl.DistributionConfigurationResourceProviderFactory     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "kind" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "provider.roots" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter providerRoots: (query)  (optional)
     - parameter kind: (query)  (optional)

     - returns: RequestBuilder<OrgApacheSlingDistributionResourcesImplDistributionConfigurationInfo> 
     */
    public class func orgApacheSlingDistributionResourcesImplDistributionConfigurationWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, providerRoots: String? = nil, kind: String? = nil) -> RequestBuilder<OrgApacheSlingDistributionResourcesImplDistributionConfigurationInfo> {
        let path = "/system/console/configMgr/org.apache.sling.distribution.resources.impl.DistributionConfigurationResourceProviderFactory"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "provider.roots": providerRoots,
            "kind": kind
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheSlingDistributionResourcesImplDistributionConfigurationInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter providerRoots: (query)  (optional)
     - parameter kind: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheSlingDistributionResourcesImplDistributionServiceResour(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, providerRoots: String? = nil, kind: String? = nil, completion: ((data: OrgApacheSlingDistributionResourcesImplDistributionServiceResourInfo?, error: ErrorType?) -> Void)) {
        orgApacheSlingDistributionResourcesImplDistributionServiceResourWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, providerRoots: providerRoots, kind: kind).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.distribution.resources.impl.DistributionServiceResourceProviderFactory     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "kind" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "provider.roots" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter providerRoots: (query)  (optional)
     - parameter kind: (query)  (optional)

     - returns: RequestBuilder<OrgApacheSlingDistributionResourcesImplDistributionServiceResourInfo> 
     */
    public class func orgApacheSlingDistributionResourcesImplDistributionServiceResourWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, providerRoots: String? = nil, kind: String? = nil) -> RequestBuilder<OrgApacheSlingDistributionResourcesImplDistributionServiceResourInfo> {
        let path = "/system/console/configMgr/org.apache.sling.distribution.resources.impl.DistributionServiceResourceProviderFactory"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "provider.roots": providerRoots,
            "kind": kind
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheSlingDistributionResourcesImplDistributionServiceResourInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter type: (query)  (optional)
     - parameter formatTarget: (query)  (optional)
     - parameter tempFsFolder: (query)  (optional)
     - parameter fileThreshold: (query)  (optional)
     - parameter memoryUnit: (query)  (optional)
     - parameter useOffHeapMemory: (query)  (optional)
     - parameter digestAlgorithm: (query)  (optional)
     - parameter monitoringQueueSize: (query)  (optional)
     - parameter cleanupDelay: (query)  (optional)
     - parameter packageFilters: (query)  (optional)
     - parameter propertyFilters: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheSlingDistributionSerializationImplDistributionPackageBu(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, name: String? = nil, type: String? = nil, formatTarget: String? = nil, tempFsFolder: String? = nil, fileThreshold: Int32? = nil, memoryUnit: String? = nil, useOffHeapMemory: Bool? = nil, digestAlgorithm: String? = nil, monitoringQueueSize: Int32? = nil, cleanupDelay: Int32? = nil, packageFilters: [String]? = nil, propertyFilters: [String]? = nil, completion: ((data: OrgApacheSlingDistributionSerializationImplDistributionPackageBuInfo?, error: ErrorType?) -> Void)) {
        orgApacheSlingDistributionSerializationImplDistributionPackageBuWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, name: name, type: type, formatTarget: formatTarget, tempFsFolder: tempFsFolder, fileThreshold: fileThreshold, memoryUnit: memoryUnit, useOffHeapMemory: useOffHeapMemory, digestAlgorithm: digestAlgorithm, monitoringQueueSize: monitoringQueueSize, cleanupDelay: cleanupDelay, packageFilters: packageFilters, propertyFilters: propertyFilters).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.distribution.serialization.impl.DistributionPackageBuilderFactory     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "format.target" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "cleanupDelay" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "fileThreshold" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "monitoringQueueSize" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "property.filters" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "memoryUnit" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : {
        "values" : "",
        "labels" : ""
      },
      "value" : ""
    },
    "name" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "useOffHeapMemory" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "digestAlgorithm" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : {
        "values" : "",
        "labels" : ""
      },
      "value" : ""
    },
    "type" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : {
        "values" : "",
        "labels" : ""
      },
      "value" : ""
    },
    "package.filters" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "tempFsFolder" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter type: (query)  (optional)
     - parameter formatTarget: (query)  (optional)
     - parameter tempFsFolder: (query)  (optional)
     - parameter fileThreshold: (query)  (optional)
     - parameter memoryUnit: (query)  (optional)
     - parameter useOffHeapMemory: (query)  (optional)
     - parameter digestAlgorithm: (query)  (optional)
     - parameter monitoringQueueSize: (query)  (optional)
     - parameter cleanupDelay: (query)  (optional)
     - parameter packageFilters: (query)  (optional)
     - parameter propertyFilters: (query)  (optional)

     - returns: RequestBuilder<OrgApacheSlingDistributionSerializationImplDistributionPackageBuInfo> 
     */
    public class func orgApacheSlingDistributionSerializationImplDistributionPackageBuWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, name: String? = nil, type: String? = nil, formatTarget: String? = nil, tempFsFolder: String? = nil, fileThreshold: Int32? = nil, memoryUnit: String? = nil, useOffHeapMemory: Bool? = nil, digestAlgorithm: String? = nil, monitoringQueueSize: Int32? = nil, cleanupDelay: Int32? = nil, packageFilters: [String]? = nil, propertyFilters: [String]? = nil) -> RequestBuilder<OrgApacheSlingDistributionSerializationImplDistributionPackageBuInfo> {
        let path = "/system/console/configMgr/org.apache.sling.distribution.serialization.impl.DistributionPackageBuilderFactory"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "name": name,
            "type": type,
            "format.target": formatTarget,
            "tempFsFolder": tempFsFolder,
            "fileThreshold": fileThreshold?.encodeToJSON(),
            "memoryUnit": memoryUnit,
            "useOffHeapMemory": useOffHeapMemory,
            "digestAlgorithm": digestAlgorithm,
            "monitoringQueueSize": monitoringQueueSize?.encodeToJSON(),
            "cleanupDelay": cleanupDelay?.encodeToJSON(),
            "package.filters": packageFilters,
            "property.filters": propertyFilters
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheSlingDistributionSerializationImplDistributionPackageBuInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter type: (query)  (optional)
     - parameter importMode: (query)  (optional)
     - parameter aclHandling: (query)  (optional)
     - parameter packageRoots: (query)  (optional)
     - parameter packageFilters: (query)  (optional)
     - parameter propertyFilters: (query)  (optional)
     - parameter tempFsFolder: (query)  (optional)
     - parameter useBinaryReferences: (query)  (optional)
     - parameter autoSaveThreshold: (query)  (optional)
     - parameter cleanupDelay: (query)  (optional)
     - parameter fileThreshold: (query)  (optional)
     - parameter MEGA_BYTES: (query)  (optional)
     - parameter useOffHeapMemory: (query)  (optional)
     - parameter digestAlgorithm: (query)  (optional)
     - parameter monitoringQueueSize: (query)  (optional)
     - parameter pathsMapping: (query)  (optional)
     - parameter strictImport: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheSlingDistributionSerializationImplVltVaultDistribution(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, name: String? = nil, type: String? = nil, importMode: String? = nil, aclHandling: String? = nil, packageRoots: String? = nil, packageFilters: [String]? = nil, propertyFilters: [String]? = nil, tempFsFolder: String? = nil, useBinaryReferences: Bool? = nil, autoSaveThreshold: Int32? = nil, cleanupDelay: Int32? = nil, fileThreshold: Int32? = nil, MEGA_BYTES: String? = nil, useOffHeapMemory: Bool? = nil, digestAlgorithm: String? = nil, monitoringQueueSize: Int32? = nil, pathsMapping: [String]? = nil, strictImport: Bool? = nil, completion: ((data: OrgApacheSlingDistributionSerializationImplVltVaultDistributionInfo?, error: ErrorType?) -> Void)) {
        orgApacheSlingDistributionSerializationImplVltVaultDistributionWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, name: name, type: type, importMode: importMode, aclHandling: aclHandling, packageRoots: packageRoots, packageFilters: packageFilters, propertyFilters: propertyFilters, tempFsFolder: tempFsFolder, useBinaryReferences: useBinaryReferences, autoSaveThreshold: autoSaveThreshold, cleanupDelay: cleanupDelay, fileThreshold: fileThreshold, MEGA_BYTES: MEGA_BYTES, useOffHeapMemory: useOffHeapMemory, digestAlgorithm: digestAlgorithm, monitoringQueueSize: monitoringQueueSize, pathsMapping: pathsMapping, strictImport: strictImport).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.distribution.serialization.impl.vlt.VaultDistributionPackageBuilderFactory     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "pathsMapping" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "importMode" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "cleanupDelay" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "MEGA_BYTES" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : {
        "values" : "",
        "labels" : ""
      },
      "value" : ""
    },
    "aclHandling" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "digestAlgorithm" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : {
        "values" : "",
        "labels" : ""
      },
      "value" : ""
    },
    "type" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : {
        "values" : "",
        "labels" : ""
      },
      "value" : ""
    },
    "strictImport" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "package.roots" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "property.filters" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "fileThreshold" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "monitoringQueueSize" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "name" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "useOffHeapMemory" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "useBinaryReferences" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "package.filters" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "tempFsFolder" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "autoSaveThreshold" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter type: (query)  (optional)
     - parameter importMode: (query)  (optional)
     - parameter aclHandling: (query)  (optional)
     - parameter packageRoots: (query)  (optional)
     - parameter packageFilters: (query)  (optional)
     - parameter propertyFilters: (query)  (optional)
     - parameter tempFsFolder: (query)  (optional)
     - parameter useBinaryReferences: (query)  (optional)
     - parameter autoSaveThreshold: (query)  (optional)
     - parameter cleanupDelay: (query)  (optional)
     - parameter fileThreshold: (query)  (optional)
     - parameter MEGA_BYTES: (query)  (optional)
     - parameter useOffHeapMemory: (query)  (optional)
     - parameter digestAlgorithm: (query)  (optional)
     - parameter monitoringQueueSize: (query)  (optional)
     - parameter pathsMapping: (query)  (optional)
     - parameter strictImport: (query)  (optional)

     - returns: RequestBuilder<OrgApacheSlingDistributionSerializationImplVltVaultDistributionInfo> 
     */
    public class func orgApacheSlingDistributionSerializationImplVltVaultDistributionWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, name: String? = nil, type: String? = nil, importMode: String? = nil, aclHandling: String? = nil, packageRoots: String? = nil, packageFilters: [String]? = nil, propertyFilters: [String]? = nil, tempFsFolder: String? = nil, useBinaryReferences: Bool? = nil, autoSaveThreshold: Int32? = nil, cleanupDelay: Int32? = nil, fileThreshold: Int32? = nil, MEGA_BYTES: String? = nil, useOffHeapMemory: Bool? = nil, digestAlgorithm: String? = nil, monitoringQueueSize: Int32? = nil, pathsMapping: [String]? = nil, strictImport: Bool? = nil) -> RequestBuilder<OrgApacheSlingDistributionSerializationImplVltVaultDistributionInfo> {
        let path = "/system/console/configMgr/org.apache.sling.distribution.serialization.impl.vlt.VaultDistributionPackageBuilderFactory"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "name": name,
            "type": type,
            "importMode": importMode,
            "aclHandling": aclHandling,
            "package.roots": packageRoots,
            "package.filters": packageFilters,
            "property.filters": propertyFilters,
            "tempFsFolder": tempFsFolder,
            "useBinaryReferences": useBinaryReferences,
            "autoSaveThreshold": autoSaveThreshold?.encodeToJSON(),
            "cleanupDelay": cleanupDelay?.encodeToJSON(),
            "fileThreshold": fileThreshold?.encodeToJSON(),
            "MEGA_BYTES": MEGA_BYTES,
            "useOffHeapMemory": useOffHeapMemory,
            "digestAlgorithm": digestAlgorithm,
            "monitoringQueueSize": monitoringQueueSize?.encodeToJSON(),
            "pathsMapping": pathsMapping,
            "strictImport": strictImport
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheSlingDistributionSerializationImplVltVaultDistributionInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter username: (query)  (optional)
     - parameter password: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheSlingDistributionTransportImplUserCredentialsDistributi(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, name: String? = nil, username: String? = nil, password: String? = nil, completion: ((data: OrgApacheSlingDistributionTransportImplUserCredentialsDistributiInfo?, error: ErrorType?) -> Void)) {
        orgApacheSlingDistributionTransportImplUserCredentialsDistributiWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, name: name, username: username, password: password).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.distribution.transport.impl.UserCredentialsDistributionTransportSecretProvider     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "password" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "name" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "username" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter username: (query)  (optional)
     - parameter password: (query)  (optional)

     - returns: RequestBuilder<OrgApacheSlingDistributionTransportImplUserCredentialsDistributiInfo> 
     */
    public class func orgApacheSlingDistributionTransportImplUserCredentialsDistributiWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, name: String? = nil, username: String? = nil, password: String? = nil) -> RequestBuilder<OrgApacheSlingDistributionTransportImplUserCredentialsDistributiInfo> {
        let path = "/system/console/configMgr/org.apache.sling.distribution.transport.impl.UserCredentialsDistributionTransportSecretProvider"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "name": name,
            "username": username,
            "password": password
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheSlingDistributionTransportImplUserCredentialsDistributiInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter path: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheSlingDistributionTriggerImplDistributionEventDistribute(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, name: String? = nil, path: String? = nil, completion: ((data: OrgApacheSlingDistributionTriggerImplDistributionEventDistributeInfo?, error: ErrorType?) -> Void)) {
        orgApacheSlingDistributionTriggerImplDistributionEventDistributeWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, name: name, path: path).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.distribution.trigger.impl.DistributionEventDistributeDistributionTriggerFactory     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "path" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "name" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter path: (query)  (optional)

     - returns: RequestBuilder<OrgApacheSlingDistributionTriggerImplDistributionEventDistributeInfo> 
     */
    public class func orgApacheSlingDistributionTriggerImplDistributionEventDistributeWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, name: String? = nil, path: String? = nil) -> RequestBuilder<OrgApacheSlingDistributionTriggerImplDistributionEventDistributeInfo> {
        let path = "/system/console/configMgr/org.apache.sling.distribution.trigger.impl.DistributionEventDistributeDistributionTriggerFactory"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "name": name,
            "path": path
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheSlingDistributionTriggerImplDistributionEventDistributeInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter path: (query)  (optional)
     - parameter ignoredPathsPatterns: (query)  (optional)
     - parameter serviceName: (query)  (optional)
     - parameter deep: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheSlingDistributionTriggerImplJcrEventDistributionTrigger(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, name: String? = nil, path: String? = nil, ignoredPathsPatterns: [String]? = nil, serviceName: String? = nil, deep: Bool? = nil, completion: ((data: OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerInfo?, error: ErrorType?) -> Void)) {
        orgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, name: name, path: path, ignoredPathsPatterns: ignoredPathsPatterns, serviceName: serviceName, deep: deep).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.distribution.trigger.impl.JcrEventDistributionTriggerFactory     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "path" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "deep" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "name" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "serviceName" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "ignoredPathsPatterns" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter path: (query)  (optional)
     - parameter ignoredPathsPatterns: (query)  (optional)
     - parameter serviceName: (query)  (optional)
     - parameter deep: (query)  (optional)

     - returns: RequestBuilder<OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerInfo> 
     */
    public class func orgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, name: String? = nil, path: String? = nil, ignoredPathsPatterns: [String]? = nil, serviceName: String? = nil, deep: Bool? = nil) -> RequestBuilder<OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerInfo> {
        let path = "/system/console/configMgr/org.apache.sling.distribution.trigger.impl.JcrEventDistributionTriggerFactory"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "name": name,
            "path": path,
            "ignoredPathsPatterns": ignoredPathsPatterns,
            "serviceName": serviceName,
            "deep": deep
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter path: (query)  (optional)
     - parameter serviceName: (query)  (optional)
     - parameter nuggetsPath: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheSlingDistributionTriggerImplPersistedJcrEventDistributi(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, name: String? = nil, path: String? = nil, serviceName: String? = nil, nuggetsPath: String? = nil, completion: ((data: OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiInfo?, error: ErrorType?) -> Void)) {
        orgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, name: name, path: path, serviceName: serviceName, nuggetsPath: nuggetsPath).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.distribution.trigger.impl.PersistedJcrEventDistributionTriggerFactory     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "path" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "name" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "nuggetsPath" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "serviceName" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter path: (query)  (optional)
     - parameter serviceName: (query)  (optional)
     - parameter nuggetsPath: (query)  (optional)

     - returns: RequestBuilder<OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiInfo> 
     */
    public class func orgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, name: String? = nil, path: String? = nil, serviceName: String? = nil, nuggetsPath: String? = nil) -> RequestBuilder<OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiInfo> {
        let path = "/system/console/configMgr/org.apache.sling.distribution.trigger.impl.PersistedJcrEventDistributionTriggerFactory"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "name": name,
            "path": path,
            "serviceName": serviceName,
            "nuggetsPath": nuggetsPath
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter endpoint: (query)  (optional)
     - parameter transportSecretProviderTarget: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheSlingDistributionTriggerImplRemoteEventDistributionTrig(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, name: String? = nil, endpoint: String? = nil, transportSecretProviderTarget: String? = nil, completion: ((data: OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigInfo?, error: ErrorType?) -> Void)) {
        orgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, name: name, endpoint: endpoint, transportSecretProviderTarget: transportSecretProviderTarget).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.distribution.trigger.impl.RemoteEventDistributionTriggerFactory     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "endpoint" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "name" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "transportSecretProvider.target" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter endpoint: (query)  (optional)
     - parameter transportSecretProviderTarget: (query)  (optional)

     - returns: RequestBuilder<OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigInfo> 
     */
    public class func orgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, name: String? = nil, endpoint: String? = nil, transportSecretProviderTarget: String? = nil) -> RequestBuilder<OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigInfo> {
        let path = "/system/console/configMgr/org.apache.sling.distribution.trigger.impl.RemoteEventDistributionTriggerFactory"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "name": name,
            "endpoint": endpoint,
            "transportSecretProvider.target": transportSecretProviderTarget
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter path: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheSlingDistributionTriggerImplResourceEventDistributionTr(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, name: String? = nil, path: String? = nil, completion: ((data: OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrInfo?, error: ErrorType?) -> Void)) {
        orgApacheSlingDistributionTriggerImplResourceEventDistributionTrWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, name: name, path: path).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.distribution.trigger.impl.ResourceEventDistributionTriggerFactory     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "path" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "name" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter path: (query)  (optional)

     - returns: RequestBuilder<OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrInfo> 
     */
    public class func orgApacheSlingDistributionTriggerImplResourceEventDistributionTrWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, name: String? = nil, path: String? = nil) -> RequestBuilder<OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrInfo> {
        let path = "/system/console/configMgr/org.apache.sling.distribution.trigger.impl.ResourceEventDistributionTriggerFactory"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "name": name,
            "path": path
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter path: (query)  (optional)
     - parameter seconds: (query)  (optional)
     - parameter serviceName: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheSlingDistributionTriggerImplScheduledDistributionTrigge(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, name: String? = nil, path: String? = nil, seconds: String? = nil, serviceName: String? = nil, completion: ((data: OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeInfo?, error: ErrorType?) -> Void)) {
        orgApacheSlingDistributionTriggerImplScheduledDistributionTriggeWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, name: name, path: path, seconds: seconds, serviceName: serviceName).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.distribution.trigger.impl.ScheduledDistributionTriggerFactory     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "path" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "seconds" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "name" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "serviceName" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter path: (query)  (optional)
     - parameter seconds: (query)  (optional)
     - parameter serviceName: (query)  (optional)

     - returns: RequestBuilder<OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeInfo> 
     */
    public class func orgApacheSlingDistributionTriggerImplScheduledDistributionTriggeWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, name: String? = nil, path: String? = nil, seconds: String? = nil, serviceName: String? = nil) -> RequestBuilder<OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeInfo> {
        let path = "/system/console/configMgr/org.apache.sling.distribution.trigger.impl.ScheduledDistributionTriggerFactory"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "name": name,
            "path": path,
            "seconds": seconds,
            "serviceName": serviceName
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter osgiHttpWhiteboardContextSelect: (query)  (optional)
     - parameter osgiHttpWhiteboardListener: (query)  (optional)
     - parameter authSudoCookie: (query)  (optional)
     - parameter authSudoParameter: (query)  (optional)
     - parameter authAnnonymous: (query)  (optional)
     - parameter slingAuthRequirements: (query)  (optional)
     - parameter slingAuthAnonymousUser: (query)  (optional)
     - parameter slingAuthAnonymousPassword: (query)  (optional)
     - parameter authHttp: (query)  (optional)
     - parameter authHttpRealm: (query)  (optional)
     - parameter authUriSuffix: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheSlingEngineImplAuthSlingAuthenticator(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, osgiHttpWhiteboardContextSelect: String? = nil, osgiHttpWhiteboardListener: String? = nil, authSudoCookie: String? = nil, authSudoParameter: String? = nil, authAnnonymous: Bool? = nil, slingAuthRequirements: [String]? = nil, slingAuthAnonymousUser: String? = nil, slingAuthAnonymousPassword: String? = nil, authHttp: String? = nil, authHttpRealm: String? = nil, authUriSuffix: [String]? = nil, completion: ((data: OrgApacheSlingEngineImplAuthSlingAuthenticatorInfo?, error: ErrorType?) -> Void)) {
        orgApacheSlingEngineImplAuthSlingAuthenticatorWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, osgiHttpWhiteboardContextSelect: osgiHttpWhiteboardContextSelect, osgiHttpWhiteboardListener: osgiHttpWhiteboardListener, authSudoCookie: authSudoCookie, authSudoParameter: authSudoParameter, authAnnonymous: authAnnonymous, slingAuthRequirements: slingAuthRequirements, slingAuthAnonymousUser: slingAuthAnonymousUser, slingAuthAnonymousPassword: slingAuthAnonymousPassword, authHttp: authHttp, authHttpRealm: authHttpRealm, authUriSuffix: authUriSuffix).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.engine.impl.auth.SlingAuthenticator     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "service_location" : "service_location",
  "bundle_location" : "bundle_location",
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "sling.auth.anonymous.user" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "auth.sudo.cookie" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "sling.auth.anonymous.password" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "auth.http" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : {
        "values" : "",
        "labels" : ""
      },
      "value" : ""
    },
    "osgi.http.whiteboard.listener" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "sling.auth.requirements" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "osgi.http.whiteboard.context.select" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "auth.sudo.parameter" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "auth.annonymous" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "auth.uri.suffix" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "auth.http.realm" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter osgiHttpWhiteboardContextSelect: (query)  (optional)
     - parameter osgiHttpWhiteboardListener: (query)  (optional)
     - parameter authSudoCookie: (query)  (optional)
     - parameter authSudoParameter: (query)  (optional)
     - parameter authAnnonymous: (query)  (optional)
     - parameter slingAuthRequirements: (query)  (optional)
     - parameter slingAuthAnonymousUser: (query)  (optional)
     - parameter slingAuthAnonymousPassword: (query)  (optional)
     - parameter authHttp: (query)  (optional)
     - parameter authHttpRealm: (query)  (optional)
     - parameter authUriSuffix: (query)  (optional)

     - returns: RequestBuilder<OrgApacheSlingEngineImplAuthSlingAuthenticatorInfo> 
     */
    public class func orgApacheSlingEngineImplAuthSlingAuthenticatorWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, osgiHttpWhiteboardContextSelect: String? = nil, osgiHttpWhiteboardListener: String? = nil, authSudoCookie: String? = nil, authSudoParameter: String? = nil, authAnnonymous: Bool? = nil, slingAuthRequirements: [String]? = nil, slingAuthAnonymousUser: String? = nil, slingAuthAnonymousPassword: String? = nil, authHttp: String? = nil, authHttpRealm: String? = nil, authUriSuffix: [String]? = nil) -> RequestBuilder<OrgApacheSlingEngineImplAuthSlingAuthenticatorInfo> {
        let path = "/system/console/configMgr/org.apache.sling.engine.impl.auth.SlingAuthenticator"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "osgi.http.whiteboard.context.select": osgiHttpWhiteboardContextSelect,
            "osgi.http.whiteboard.listener": osgiHttpWhiteboardListener,
            "auth.sudo.cookie": authSudoCookie,
            "auth.sudo.parameter": authSudoParameter,
            "auth.annonymous": authAnnonymous,
            "sling.auth.requirements": slingAuthRequirements,
            "sling.auth.anonymous.user": slingAuthAnonymousUser,
            "sling.auth.anonymous.password": slingAuthAnonymousPassword,
            "auth.http": authHttp,
            "auth.http.realm": authHttpRealm,
            "auth.uri.suffix": authUriSuffix
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheSlingEngineImplAuthSlingAuthenticatorInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter extensions: (query)  (optional)
     - parameter minDurationMs: (query)  (optional)
     - parameter maxDurationMs: (query)  (optional)
     - parameter compactLogFormat: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheSlingEngineImplDebugRequestProgressTrackerLogFilter(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, extensions: [String]? = nil, minDurationMs: Int32? = nil, maxDurationMs: Int32? = nil, compactLogFormat: Bool? = nil, completion: ((data: OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterInfo?, error: ErrorType?) -> Void)) {
        orgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, extensions: extensions, minDurationMs: minDurationMs, maxDurationMs: maxDurationMs, compactLogFormat: compactLogFormat).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.engine.impl.debug.RequestProgressTrackerLogFilter     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "extensions" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "compactLogFormat" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "minDurationMs" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "maxDurationMs" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter extensions: (query)  (optional)
     - parameter minDurationMs: (query)  (optional)
     - parameter maxDurationMs: (query)  (optional)
     - parameter compactLogFormat: (query)  (optional)

     - returns: RequestBuilder<OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterInfo> 
     */
    public class func orgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, extensions: [String]? = nil, minDurationMs: Int32? = nil, maxDurationMs: Int32? = nil, compactLogFormat: Bool? = nil) -> RequestBuilder<OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterInfo> {
        let path = "/system/console/configMgr/org.apache.sling.engine.impl.debug.RequestProgressTrackerLogFilter"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "extensions": extensions,
            "minDurationMs": minDurationMs?.encodeToJSON(),
            "maxDurationMs": maxDurationMs?.encodeToJSON(),
            "compactLogFormat": compactLogFormat
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter requestLogOutput: (query)  (optional)
     - parameter requestLogOutputtype: (query)  (optional)
     - parameter requestLogEnabled: (query)  (optional)
     - parameter accessLogOutput: (query)  (optional)
     - parameter accessLogOutputtype: (query)  (optional)
     - parameter accessLogEnabled: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheSlingEngineImplLogRequestLogger(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, requestLogOutput: String? = nil, requestLogOutputtype: Int32? = nil, requestLogEnabled: Bool? = nil, accessLogOutput: String? = nil, accessLogOutputtype: Int32? = nil, accessLogEnabled: Bool? = nil, completion: ((data: OrgApacheSlingEngineImplLogRequestLoggerInfo?, error: ErrorType?) -> Void)) {
        orgApacheSlingEngineImplLogRequestLoggerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, requestLogOutput: requestLogOutput, requestLogOutputtype: requestLogOutputtype, requestLogEnabled: requestLogEnabled, accessLogOutput: accessLogOutput, accessLogOutputtype: accessLogOutputtype, accessLogEnabled: accessLogEnabled).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.engine.impl.log.RequestLogger     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "service_location" : "service_location",
  "bundle_location" : "bundle_location",
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "access.log.enabled" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "request.log.output" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "access.log.output" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "request.log.enabled" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "access.log.outputtype" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : {
        "values" : "",
        "labels" : ""
      },
      "value" : ""
    },
    "request.log.outputtype" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : {
        "values" : "",
        "labels" : ""
      },
      "value" : ""
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter requestLogOutput: (query)  (optional)
     - parameter requestLogOutputtype: (query)  (optional)
     - parameter requestLogEnabled: (query)  (optional)
     - parameter accessLogOutput: (query)  (optional)
     - parameter accessLogOutputtype: (query)  (optional)
     - parameter accessLogEnabled: (query)  (optional)

     - returns: RequestBuilder<OrgApacheSlingEngineImplLogRequestLoggerInfo> 
     */
    public class func orgApacheSlingEngineImplLogRequestLoggerWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, requestLogOutput: String? = nil, requestLogOutputtype: Int32? = nil, requestLogEnabled: Bool? = nil, accessLogOutput: String? = nil, accessLogOutputtype: Int32? = nil, accessLogEnabled: Bool? = nil) -> RequestBuilder<OrgApacheSlingEngineImplLogRequestLoggerInfo> {
        let path = "/system/console/configMgr/org.apache.sling.engine.impl.log.RequestLogger"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "request.log.output": requestLogOutput,
            "request.log.outputtype": requestLogOutputtype?.encodeToJSON(),
            "request.log.enabled": requestLogEnabled,
            "access.log.output": accessLogOutput,
            "access.log.outputtype": accessLogOutputtype?.encodeToJSON(),
            "access.log.enabled": accessLogEnabled
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheSlingEngineImplLogRequestLoggerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter requestLogServiceFormat: (query)  (optional)
     - parameter requestLogServiceOutput: (query)  (optional)
     - parameter requestLogServiceOutputtype: (query)  (optional)
     - parameter requestLogServiceOnentry: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheSlingEngineImplLogRequestLoggerService(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, requestLogServiceFormat: String? = nil, requestLogServiceOutput: String? = nil, requestLogServiceOutputtype: Int32? = nil, requestLogServiceOnentry: Bool? = nil, completion: ((data: OrgApacheSlingEngineImplLogRequestLoggerServiceInfo?, error: ErrorType?) -> Void)) {
        orgApacheSlingEngineImplLogRequestLoggerServiceWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, requestLogServiceFormat: requestLogServiceFormat, requestLogServiceOutput: requestLogServiceOutput, requestLogServiceOutputtype: requestLogServiceOutputtype, requestLogServiceOnentry: requestLogServiceOnentry).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.engine.impl.log.RequestLoggerService     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "request.log.service.output" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "request.log.service.outputtype" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : {
        "values" : "",
        "labels" : ""
      },
      "value" : ""
    },
    "request.log.service.format" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "request.log.service.onentry" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter requestLogServiceFormat: (query)  (optional)
     - parameter requestLogServiceOutput: (query)  (optional)
     - parameter requestLogServiceOutputtype: (query)  (optional)
     - parameter requestLogServiceOnentry: (query)  (optional)

     - returns: RequestBuilder<OrgApacheSlingEngineImplLogRequestLoggerServiceInfo> 
     */
    public class func orgApacheSlingEngineImplLogRequestLoggerServiceWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, requestLogServiceFormat: String? = nil, requestLogServiceOutput: String? = nil, requestLogServiceOutputtype: Int32? = nil, requestLogServiceOnentry: Bool? = nil) -> RequestBuilder<OrgApacheSlingEngineImplLogRequestLoggerServiceInfo> {
        let path = "/system/console/configMgr/org.apache.sling.engine.impl.log.RequestLoggerService"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "request.log.service.format": requestLogServiceFormat,
            "request.log.service.output": requestLogServiceOutput,
            "request.log.service.outputtype": requestLogServiceOutputtype?.encodeToJSON(),
            "request.log.service.onentry": requestLogServiceOnentry
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheSlingEngineImplLogRequestLoggerServiceInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter slingMaxCalls: (query)  (optional)
     - parameter slingMaxInclusions: (query)  (optional)
     - parameter slingTraceAllow: (query)  (optional)
     - parameter slingMaxRecordRequests: (query)  (optional)
     - parameter slingStorePatternRequests: (query)  (optional)
     - parameter slingServerinfo: (query)  (optional)
     - parameter slingAdditionalResponseHeaders: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheSlingEngineImplSlingMainServlet(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, slingMaxCalls: Int32? = nil, slingMaxInclusions: Int32? = nil, slingTraceAllow: Bool? = nil, slingMaxRecordRequests: Int32? = nil, slingStorePatternRequests: [String]? = nil, slingServerinfo: String? = nil, slingAdditionalResponseHeaders: [String]? = nil, completion: ((data: OrgApacheSlingEngineImplSlingMainServletInfo?, error: ErrorType?) -> Void)) {
        orgApacheSlingEngineImplSlingMainServletWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, slingMaxCalls: slingMaxCalls, slingMaxInclusions: slingMaxInclusions, slingTraceAllow: slingTraceAllow, slingMaxRecordRequests: slingMaxRecordRequests, slingStorePatternRequests: slingStorePatternRequests, slingServerinfo: slingServerinfo, slingAdditionalResponseHeaders: slingAdditionalResponseHeaders).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.engine.impl.SlingMainServlet     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "service_location" : "service_location",
  "bundle_location" : "bundle_location",
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "sling.max.inclusions" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "sling.trace.allow" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "sling.store.pattern.requests" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "sling.serverinfo" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "sling.max.record.requests" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "sling.additional.response.headers" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "sling.max.calls" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter slingMaxCalls: (query)  (optional)
     - parameter slingMaxInclusions: (query)  (optional)
     - parameter slingTraceAllow: (query)  (optional)
     - parameter slingMaxRecordRequests: (query)  (optional)
     - parameter slingStorePatternRequests: (query)  (optional)
     - parameter slingServerinfo: (query)  (optional)
     - parameter slingAdditionalResponseHeaders: (query)  (optional)

     - returns: RequestBuilder<OrgApacheSlingEngineImplSlingMainServletInfo> 
     */
    public class func orgApacheSlingEngineImplSlingMainServletWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, slingMaxCalls: Int32? = nil, slingMaxInclusions: Int32? = nil, slingTraceAllow: Bool? = nil, slingMaxRecordRequests: Int32? = nil, slingStorePatternRequests: [String]? = nil, slingServerinfo: String? = nil, slingAdditionalResponseHeaders: [String]? = nil) -> RequestBuilder<OrgApacheSlingEngineImplSlingMainServletInfo> {
        let path = "/system/console/configMgr/org.apache.sling.engine.impl.SlingMainServlet"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "sling.max.calls": slingMaxCalls?.encodeToJSON(),
            "sling.max.inclusions": slingMaxInclusions?.encodeToJSON(),
            "sling.trace.allow": slingTraceAllow,
            "sling.max.record.requests": slingMaxRecordRequests?.encodeToJSON(),
            "sling.store.pattern.requests": slingStorePatternRequests,
            "sling.serverinfo": slingServerinfo,
            "sling.additional.response.headers": slingAdditionalResponseHeaders
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheSlingEngineImplSlingMainServletInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter slingDefaultParameterEncoding: (query)  (optional)
     - parameter slingDefaultMaxParameters: (query)  (optional)
     - parameter fileLocation: (query)  (optional)
     - parameter fileThreshold: (query)  (optional)
     - parameter fileMax: (query)  (optional)
     - parameter requestMax: (query)  (optional)
     - parameter slingDefaultParameterCheckForAdditionalContainerParameters: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheSlingEngineParameters(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, slingDefaultParameterEncoding: String? = nil, slingDefaultMaxParameters: Int32? = nil, fileLocation: String? = nil, fileThreshold: Int32? = nil, fileMax: Int32? = nil, requestMax: Int32? = nil, slingDefaultParameterCheckForAdditionalContainerParameters: Bool? = nil, completion: ((data: OrgApacheSlingEngineParametersInfo?, error: ErrorType?) -> Void)) {
        orgApacheSlingEngineParametersWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, slingDefaultParameterEncoding: slingDefaultParameterEncoding, slingDefaultMaxParameters: slingDefaultMaxParameters, fileLocation: fileLocation, fileThreshold: fileThreshold, fileMax: fileMax, requestMax: requestMax, slingDefaultParameterCheckForAdditionalContainerParameters: slingDefaultParameterCheckForAdditionalContainerParameters).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.engine.parameters     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "service_location" : "service_location",
  "bundle_location" : "bundle_location",
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "sling.default.parameter.encoding" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "file.location" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "file.threshold" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "file.max" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "sling.default.max.parameters" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "sling.default.parameter.checkForAdditionalContainerParameters" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "request.max" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter slingDefaultParameterEncoding: (query)  (optional)
     - parameter slingDefaultMaxParameters: (query)  (optional)
     - parameter fileLocation: (query)  (optional)
     - parameter fileThreshold: (query)  (optional)
     - parameter fileMax: (query)  (optional)
     - parameter requestMax: (query)  (optional)
     - parameter slingDefaultParameterCheckForAdditionalContainerParameters: (query)  (optional)

     - returns: RequestBuilder<OrgApacheSlingEngineParametersInfo> 
     */
    public class func orgApacheSlingEngineParametersWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, slingDefaultParameterEncoding: String? = nil, slingDefaultMaxParameters: Int32? = nil, fileLocation: String? = nil, fileThreshold: Int32? = nil, fileMax: Int32? = nil, requestMax: Int32? = nil, slingDefaultParameterCheckForAdditionalContainerParameters: Bool? = nil) -> RequestBuilder<OrgApacheSlingEngineParametersInfo> {
        let path = "/system/console/configMgr/org.apache.sling.engine.parameters"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "sling.default.parameter.encoding": slingDefaultParameterEncoding,
            "sling.default.max.parameters": slingDefaultMaxParameters?.encodeToJSON(),
            "file.location": fileLocation,
            "file.threshold": fileThreshold?.encodeToJSON(),
            "file.max": fileMax?.encodeToJSON(),
            "request.max": requestMax?.encodeToJSON(),
            "sling.default.parameter.checkForAdditionalContainerParameters": slingDefaultParameterCheckForAdditionalContainerParameters
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheSlingEngineParametersInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter minPoolSize: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheSlingEventImplEventingThreadPool(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, minPoolSize: Int32? = nil, completion: ((data: OrgApacheSlingEventImplEventingThreadPoolInfo?, error: ErrorType?) -> Void)) {
        orgApacheSlingEventImplEventingThreadPoolWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, minPoolSize: minPoolSize).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.event.impl.EventingThreadPool     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "minPoolSize" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter minPoolSize: (query)  (optional)

     - returns: RequestBuilder<OrgApacheSlingEventImplEventingThreadPoolInfo> 
     */
    public class func orgApacheSlingEventImplEventingThreadPoolWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, minPoolSize: Int32? = nil) -> RequestBuilder<OrgApacheSlingEventImplEventingThreadPoolInfo> {
        let path = "/system/console/configMgr/org.apache.sling.event.impl.EventingThreadPool"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "minPoolSize": minPoolSize?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheSlingEventImplEventingThreadPoolInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter queuePriority: (query)  (optional)
     - parameter queueRetries: (query)  (optional)
     - parameter queueRetrydelay: (query)  (optional)
     - parameter queueMaxparallel: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheSlingEventImplJobsDefaultJobManager(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, queuePriority: String? = nil, queueRetries: Int32? = nil, queueRetrydelay: Int32? = nil, queueMaxparallel: Int32? = nil, completion: ((data: OrgApacheSlingEventImplJobsDefaultJobManagerInfo?, error: ErrorType?) -> Void)) {
        orgApacheSlingEventImplJobsDefaultJobManagerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, queuePriority: queuePriority, queueRetries: queueRetries, queueRetrydelay: queueRetrydelay, queueMaxparallel: queueMaxparallel).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.event.impl.jobs.DefaultJobManager     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "queue.priority" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : {
        "values" : "",
        "labels" : ""
      },
      "value" : ""
    },
    "queue.retrydelay" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "queue.maxparallel" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "queue.retries" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter queuePriority: (query)  (optional)
     - parameter queueRetries: (query)  (optional)
     - parameter queueRetrydelay: (query)  (optional)
     - parameter queueMaxparallel: (query)  (optional)

     - returns: RequestBuilder<OrgApacheSlingEventImplJobsDefaultJobManagerInfo> 
     */
    public class func orgApacheSlingEventImplJobsDefaultJobManagerWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, queuePriority: String? = nil, queueRetries: Int32? = nil, queueRetrydelay: Int32? = nil, queueMaxparallel: Int32? = nil) -> RequestBuilder<OrgApacheSlingEventImplJobsDefaultJobManagerInfo> {
        let path = "/system/console/configMgr/org.apache.sling.event.impl.jobs.DefaultJobManager"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "queue.priority": queuePriority,
            "queue.retries": queueRetries?.encodeToJSON(),
            "queue.retrydelay": queueRetrydelay?.encodeToJSON(),
            "queue.maxparallel": queueMaxparallel?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheSlingEventImplJobsDefaultJobManagerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter jobConsumermanagerDisableDistribution: (query)  (optional)
     - parameter startupDelay: (query)  (optional)
     - parameter cleanupPeriod: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheSlingEventImplJobsJcrPersistenceHandler(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, jobConsumermanagerDisableDistribution: Bool? = nil, startupDelay: Int32? = nil, cleanupPeriod: Int32? = nil, completion: ((data: OrgApacheSlingEventImplJobsJcrPersistenceHandlerInfo?, error: ErrorType?) -> Void)) {
        orgApacheSlingEventImplJobsJcrPersistenceHandlerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, jobConsumermanagerDisableDistribution: jobConsumermanagerDisableDistribution, startupDelay: startupDelay, cleanupPeriod: cleanupPeriod).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.event.impl.jobs.jcr.PersistenceHandler     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "service_location" : "service_location",
  "bundle_location" : "bundle_location",
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "job.consumermanager.disableDistribution" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "startup.delay" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "cleanup.period" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter jobConsumermanagerDisableDistribution: (query)  (optional)
     - parameter startupDelay: (query)  (optional)
     - parameter cleanupPeriod: (query)  (optional)

     - returns: RequestBuilder<OrgApacheSlingEventImplJobsJcrPersistenceHandlerInfo> 
     */
    public class func orgApacheSlingEventImplJobsJcrPersistenceHandlerWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, jobConsumermanagerDisableDistribution: Bool? = nil, startupDelay: Int32? = nil, cleanupPeriod: Int32? = nil) -> RequestBuilder<OrgApacheSlingEventImplJobsJcrPersistenceHandlerInfo> {
        let path = "/system/console/configMgr/org.apache.sling.event.impl.jobs.jcr.PersistenceHandler"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "job.consumermanager.disableDistribution": jobConsumermanagerDisableDistribution,
            "startup.delay": startupDelay?.encodeToJSON(),
            "cleanup.period": cleanupPeriod?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheSlingEventImplJobsJcrPersistenceHandlerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter orgApacheSlingInstallerConfigurationPersist: (query)  (optional)
     - parameter jobConsumermanagerWhitelist: (query)  (optional)
     - parameter jobConsumermanagerBlacklist: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheSlingEventImplJobsJobConsumerManager(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, orgApacheSlingInstallerConfigurationPersist: Bool? = nil, jobConsumermanagerWhitelist: [String]? = nil, jobConsumermanagerBlacklist: [String]? = nil, completion: ((data: OrgApacheSlingEventImplJobsJobConsumerManagerInfo?, error: ErrorType?) -> Void)) {
        orgApacheSlingEventImplJobsJobConsumerManagerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, orgApacheSlingInstallerConfigurationPersist: orgApacheSlingInstallerConfigurationPersist, jobConsumermanagerWhitelist: jobConsumermanagerWhitelist, jobConsumermanagerBlacklist: jobConsumermanagerBlacklist).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.event.impl.jobs.JobConsumerManager     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "service_location" : "service_location",
  "bundle_location" : "bundle_location",
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "job.consumermanager.whitelist" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "job.consumermanager.blacklist" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "org.apache.sling.installer.configuration.persist" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter orgApacheSlingInstallerConfigurationPersist: (query)  (optional)
     - parameter jobConsumermanagerWhitelist: (query)  (optional)
     - parameter jobConsumermanagerBlacklist: (query)  (optional)

     - returns: RequestBuilder<OrgApacheSlingEventImplJobsJobConsumerManagerInfo> 
     */
    public class func orgApacheSlingEventImplJobsJobConsumerManagerWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, orgApacheSlingInstallerConfigurationPersist: Bool? = nil, jobConsumermanagerWhitelist: [String]? = nil, jobConsumermanagerBlacklist: [String]? = nil) -> RequestBuilder<OrgApacheSlingEventImplJobsJobConsumerManagerInfo> {
        let path = "/system/console/configMgr/org.apache.sling.event.impl.jobs.JobConsumerManager"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "org.apache.sling.installer.configuration.persist": orgApacheSlingInstallerConfigurationPersist,
            "job.consumermanager.whitelist": jobConsumermanagerWhitelist,
            "job.consumermanager.blacklist": jobConsumermanagerBlacklist
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheSlingEventImplJobsJobConsumerManagerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter queueName: (query)  (optional)
     - parameter queueTopics: (query)  (optional)
     - parameter queueType: (query)  (optional)
     - parameter queuePriority: (query)  (optional)
     - parameter queueRetries: (query)  (optional)
     - parameter queueRetrydelay: (query)  (optional)
     - parameter queueMaxparallel: (query)  (optional)
     - parameter queueKeepJobs: (query)  (optional)
     - parameter queuePreferRunOnCreationInstance: (query)  (optional)
     - parameter queueThreadPoolSize: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheSlingEventJobsQueueConfiguration(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, queueName: String? = nil, queueTopics: [String]? = nil, queueType: String? = nil, queuePriority: String? = nil, queueRetries: Int32? = nil, queueRetrydelay: Int32? = nil, queueMaxparallel: Double? = nil, queueKeepJobs: Bool? = nil, queuePreferRunOnCreationInstance: Bool? = nil, queueThreadPoolSize: Int32? = nil, serviceRanking: Int32? = nil, completion: ((data: OrgApacheSlingEventJobsQueueConfigurationInfo?, error: ErrorType?) -> Void)) {
        orgApacheSlingEventJobsQueueConfigurationWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, queueName: queueName, queueTopics: queueTopics, queueType: queueType, queuePriority: queuePriority, queueRetries: queueRetries, queueRetrydelay: queueRetrydelay, queueMaxparallel: queueMaxparallel, queueKeepJobs: queueKeepJobs, queuePreferRunOnCreationInstance: queuePreferRunOnCreationInstance, queueThreadPoolSize: queueThreadPoolSize, serviceRanking: serviceRanking).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.event.jobs.QueueConfiguration     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "queue.priority" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : {
        "values" : "",
        "labels" : ""
      },
      "value" : ""
    },
    "queue.retrydelay" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "queue.maxparallel" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : 6.02745618307040320615897144307382404804229736328125
    },
    "queue.retries" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "queue.threadPoolSize" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "queue.topics" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "queue.keepJobs" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "queue.preferRunOnCreationInstance" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "queue.name" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "queue.type" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : {
        "values" : "",
        "labels" : ""
      },
      "value" : ""
    },
    "service.ranking" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter queueName: (query)  (optional)
     - parameter queueTopics: (query)  (optional)
     - parameter queueType: (query)  (optional)
     - parameter queuePriority: (query)  (optional)
     - parameter queueRetries: (query)  (optional)
     - parameter queueRetrydelay: (query)  (optional)
     - parameter queueMaxparallel: (query)  (optional)
     - parameter queueKeepJobs: (query)  (optional)
     - parameter queuePreferRunOnCreationInstance: (query)  (optional)
     - parameter queueThreadPoolSize: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)

     - returns: RequestBuilder<OrgApacheSlingEventJobsQueueConfigurationInfo> 
     */
    public class func orgApacheSlingEventJobsQueueConfigurationWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, queueName: String? = nil, queueTopics: [String]? = nil, queueType: String? = nil, queuePriority: String? = nil, queueRetries: Int32? = nil, queueRetrydelay: Int32? = nil, queueMaxparallel: Double? = nil, queueKeepJobs: Bool? = nil, queuePreferRunOnCreationInstance: Bool? = nil, queueThreadPoolSize: Int32? = nil, serviceRanking: Int32? = nil) -> RequestBuilder<OrgApacheSlingEventJobsQueueConfigurationInfo> {
        let path = "/system/console/configMgr/org.apache.sling.event.jobs.QueueConfiguration"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "queue.name": queueName,
            "queue.topics": queueTopics,
            "queue.type": queueType,
            "queue.priority": queuePriority,
            "queue.retries": queueRetries?.encodeToJSON(),
            "queue.retrydelay": queueRetrydelay?.encodeToJSON(),
            "queue.maxparallel": queueMaxparallel,
            "queue.keepJobs": queueKeepJobs,
            "queue.preferRunOnCreationInstance": queuePreferRunOnCreationInstance,
            "queue.threadPoolSize": queueThreadPoolSize?.encodeToJSON(),
            "service.ranking": serviceRanking?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheSlingEventJobsQueueConfigurationInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter users: (query)  (optional)
     - parameter groups: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingW(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, users: [String]? = nil, groups: [String]? = nil, completion: ((data: OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWInfo?, error: ErrorType?) -> Void)) {
        orgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, users: users, groups: groups).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.extensions.webconsolesecurityprovider.internal.SlingWebConsoleSecurityProvider     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "groups" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "users" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter users: (query)  (optional)
     - parameter groups: (query)  (optional)

     - returns: RequestBuilder<OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWInfo> 
     */
    public class func orgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, users: [String]? = nil, groups: [String]? = nil) -> RequestBuilder<OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWInfo> {
        let path = "/system/console/configMgr/org.apache.sling.extensions.webconsolesecurityprovider.internal.SlingWebConsoleSecurityProvider"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "users": users,
            "groups": groups
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter description: (query)  (optional)
     - parameter enabled: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheSlingFeatureflagsFeature(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, name: String? = nil, description: String? = nil, enabled: Bool? = nil, completion: ((data: OrgApacheSlingFeatureflagsFeatureInfo?, error: ErrorType?) -> Void)) {
        orgApacheSlingFeatureflagsFeatureWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, name: name, description: description, enabled: enabled).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.featureflags.Feature     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "name" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "description" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "enabled" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter description: (query)  (optional)
     - parameter enabled: (query)  (optional)

     - returns: RequestBuilder<OrgApacheSlingFeatureflagsFeatureInfo> 
     */
    public class func orgApacheSlingFeatureflagsFeatureWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, name: String? = nil, description: String? = nil, enabled: Bool? = nil) -> RequestBuilder<OrgApacheSlingFeatureflagsFeatureInfo> {
        let path = "/system/console/configMgr/org.apache.sling.featureflags.Feature"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "name": name,
            "description": description,
            "enabled": enabled
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheSlingFeatureflagsFeatureInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter description: (query)  (optional)
     - parameter enabled: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheSlingFeatureflagsImplConfiguredFeature(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, name: String? = nil, description: String? = nil, enabled: Bool? = nil, completion: ((data: OrgApacheSlingFeatureflagsImplConfiguredFeatureInfo?, error: ErrorType?) -> Void)) {
        orgApacheSlingFeatureflagsImplConfiguredFeatureWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, name: name, description: description, enabled: enabled).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.featureflags.impl.ConfiguredFeature     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "name" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "description" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "enabled" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter description: (query)  (optional)
     - parameter enabled: (query)  (optional)

     - returns: RequestBuilder<OrgApacheSlingFeatureflagsImplConfiguredFeatureInfo> 
     */
    public class func orgApacheSlingFeatureflagsImplConfiguredFeatureWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, name: String? = nil, description: String? = nil, enabled: Bool? = nil) -> RequestBuilder<OrgApacheSlingFeatureflagsImplConfiguredFeatureInfo> {
        let path = "/system/console/configMgr/org.apache.sling.featureflags.impl.ConfiguredFeature"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "name": name,
            "description": description,
            "enabled": enabled
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheSlingFeatureflagsImplConfiguredFeatureInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter orgApacheSlingHapiToolsResourcetype: (query)  (optional)
     - parameter orgApacheSlingHapiToolsCollectionresourcetype: (query)  (optional)
     - parameter orgApacheSlingHapiToolsSearchpaths: (query)  (optional)
     - parameter orgApacheSlingHapiToolsExternalurl: (query)  (optional)
     - parameter orgApacheSlingHapiToolsEnabled: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheSlingHapiImplHApiUtilImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, orgApacheSlingHapiToolsResourcetype: String? = nil, orgApacheSlingHapiToolsCollectionresourcetype: String? = nil, orgApacheSlingHapiToolsSearchpaths: [String]? = nil, orgApacheSlingHapiToolsExternalurl: String? = nil, orgApacheSlingHapiToolsEnabled: Bool? = nil, completion: ((data: OrgApacheSlingHapiImplHApiUtilImplInfo?, error: ErrorType?) -> Void)) {
        orgApacheSlingHapiImplHApiUtilImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, orgApacheSlingHapiToolsResourcetype: orgApacheSlingHapiToolsResourcetype, orgApacheSlingHapiToolsCollectionresourcetype: orgApacheSlingHapiToolsCollectionresourcetype, orgApacheSlingHapiToolsSearchpaths: orgApacheSlingHapiToolsSearchpaths, orgApacheSlingHapiToolsExternalurl: orgApacheSlingHapiToolsExternalurl, orgApacheSlingHapiToolsEnabled: orgApacheSlingHapiToolsEnabled).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.hapi.impl.HApiUtilImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "org.apache.sling.hapi.tools.externalurl" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "org.apache.sling.hapi.tools.collectionresourcetype" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "org.apache.sling.hapi.tools.enabled" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "org.apache.sling.hapi.tools.resourcetype" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "org.apache.sling.hapi.tools.searchpaths" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter orgApacheSlingHapiToolsResourcetype: (query)  (optional)
     - parameter orgApacheSlingHapiToolsCollectionresourcetype: (query)  (optional)
     - parameter orgApacheSlingHapiToolsSearchpaths: (query)  (optional)
     - parameter orgApacheSlingHapiToolsExternalurl: (query)  (optional)
     - parameter orgApacheSlingHapiToolsEnabled: (query)  (optional)

     - returns: RequestBuilder<OrgApacheSlingHapiImplHApiUtilImplInfo> 
     */
    public class func orgApacheSlingHapiImplHApiUtilImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, orgApacheSlingHapiToolsResourcetype: String? = nil, orgApacheSlingHapiToolsCollectionresourcetype: String? = nil, orgApacheSlingHapiToolsSearchpaths: [String]? = nil, orgApacheSlingHapiToolsExternalurl: String? = nil, orgApacheSlingHapiToolsEnabled: Bool? = nil) -> RequestBuilder<OrgApacheSlingHapiImplHApiUtilImplInfo> {
        let path = "/system/console/configMgr/org.apache.sling.hapi.impl.HApiUtilImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "org.apache.sling.hapi.tools.resourcetype": orgApacheSlingHapiToolsResourcetype,
            "org.apache.sling.hapi.tools.collectionresourcetype": orgApacheSlingHapiToolsCollectionresourcetype,
            "org.apache.sling.hapi.tools.searchpaths": orgApacheSlingHapiToolsSearchpaths,
            "org.apache.sling.hapi.tools.externalurl": orgApacheSlingHapiToolsExternalurl,
            "org.apache.sling.hapi.tools.enabled": orgApacheSlingHapiToolsEnabled
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheSlingHapiImplHApiUtilImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcName: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - parameter hcMbeanName: (query)  (optional)
     - parameter filterTags: (query)  (optional)
     - parameter filterCombineTagsWithOr: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheSlingHcCoreImplCompositeHealthCheck(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcName: String? = nil, hcTags: [String]? = nil, hcMbeanName: String? = nil, filterTags: [String]? = nil, filterCombineTagsWithOr: Bool? = nil, completion: ((data: OrgApacheSlingHcCoreImplCompositeHealthCheckInfo?, error: ErrorType?) -> Void)) {
        orgApacheSlingHcCoreImplCompositeHealthCheckWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, hcName: hcName, hcTags: hcTags, hcMbeanName: hcMbeanName, filterTags: filterTags, filterCombineTagsWithOr: filterCombineTagsWithOr).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.hc.core.impl.CompositeHealthCheck     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "hc.tags" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "filter.combineTagsWithOr" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "hc.name" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "filter.tags" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "hc.mbean.name" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcName: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - parameter hcMbeanName: (query)  (optional)
     - parameter filterTags: (query)  (optional)
     - parameter filterCombineTagsWithOr: (query)  (optional)

     - returns: RequestBuilder<OrgApacheSlingHcCoreImplCompositeHealthCheckInfo> 
     */
    public class func orgApacheSlingHcCoreImplCompositeHealthCheckWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcName: String? = nil, hcTags: [String]? = nil, hcMbeanName: String? = nil, filterTags: [String]? = nil, filterCombineTagsWithOr: Bool? = nil) -> RequestBuilder<OrgApacheSlingHcCoreImplCompositeHealthCheckInfo> {
        let path = "/system/console/configMgr/org.apache.sling.hc.core.impl.CompositeHealthCheck"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "hc.name": hcName,
            "hc.tags": hcTags,
            "hc.mbean.name": hcMbeanName,
            "filter.tags": filterTags,
            "filter.combineTagsWithOr": filterCombineTagsWithOr
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheSlingHcCoreImplCompositeHealthCheckInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter timeoutInMs: (query)  (optional)
     - parameter longRunningFutureThresholdForCriticalMs: (query)  (optional)
     - parameter resultCacheTtlInMs: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheSlingHcCoreImplExecutorHealthCheckExecutorImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, timeoutInMs: Int32? = nil, longRunningFutureThresholdForCriticalMs: Int32? = nil, resultCacheTtlInMs: Int32? = nil, completion: ((data: OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplInfo?, error: ErrorType?) -> Void)) {
        orgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, timeoutInMs: timeoutInMs, longRunningFutureThresholdForCriticalMs: longRunningFutureThresholdForCriticalMs, resultCacheTtlInMs: resultCacheTtlInMs).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.hc.core.impl.executor.HealthCheckExecutorImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "longRunningFutureThresholdForCriticalMs" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "timeoutInMs" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "resultCacheTtlInMs" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter timeoutInMs: (query)  (optional)
     - parameter longRunningFutureThresholdForCriticalMs: (query)  (optional)
     - parameter resultCacheTtlInMs: (query)  (optional)

     - returns: RequestBuilder<OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplInfo> 
     */
    public class func orgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, timeoutInMs: Int32? = nil, longRunningFutureThresholdForCriticalMs: Int32? = nil, resultCacheTtlInMs: Int32? = nil) -> RequestBuilder<OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplInfo> {
        let path = "/system/console/configMgr/org.apache.sling.hc.core.impl.executor.HealthCheckExecutorImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "timeoutInMs": timeoutInMs?.encodeToJSON(),
            "longRunningFutureThresholdForCriticalMs": longRunningFutureThresholdForCriticalMs?.encodeToJSON(),
            "resultCacheTtlInMs": resultCacheTtlInMs?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcName: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - parameter hcMbeanName: (query)  (optional)
     - parameter mbeanName: (query)  (optional)
     - parameter attributeName: (query)  (optional)
     - parameter attributeValueConstraint: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheSlingHcCoreImplJmxAttributeHealthCheck(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcName: String? = nil, hcTags: [String]? = nil, hcMbeanName: String? = nil, mbeanName: String? = nil, attributeName: String? = nil, attributeValueConstraint: String? = nil, completion: ((data: OrgApacheSlingHcCoreImplJmxAttributeHealthCheckInfo?, error: ErrorType?) -> Void)) {
        orgApacheSlingHcCoreImplJmxAttributeHealthCheckWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, hcName: hcName, hcTags: hcTags, hcMbeanName: hcMbeanName, mbeanName: mbeanName, attributeName: attributeName, attributeValueConstraint: attributeValueConstraint).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.hc.core.impl.JmxAttributeHealthCheck     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "mbean.name" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "attribute.value.constraint" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "hc.tags" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "hc.name" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "hc.mbean.name" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "attribute.name" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcName: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - parameter hcMbeanName: (query)  (optional)
     - parameter mbeanName: (query)  (optional)
     - parameter attributeName: (query)  (optional)
     - parameter attributeValueConstraint: (query)  (optional)

     - returns: RequestBuilder<OrgApacheSlingHcCoreImplJmxAttributeHealthCheckInfo> 
     */
    public class func orgApacheSlingHcCoreImplJmxAttributeHealthCheckWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcName: String? = nil, hcTags: [String]? = nil, hcMbeanName: String? = nil, mbeanName: String? = nil, attributeName: String? = nil, attributeValueConstraint: String? = nil) -> RequestBuilder<OrgApacheSlingHcCoreImplJmxAttributeHealthCheckInfo> {
        let path = "/system/console/configMgr/org.apache.sling.hc.core.impl.JmxAttributeHealthCheck"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "hc.name": hcName,
            "hc.tags": hcTags,
            "hc.mbean.name": hcMbeanName,
            "mbean.name": mbeanName,
            "attribute.name": attributeName,
            "attribute.value.constraint": attributeValueConstraint
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheSlingHcCoreImplJmxAttributeHealthCheckInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcName: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - parameter hcMbeanName: (query)  (optional)
     - parameter expression: (query)  (optional)
     - parameter languageExtension: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheSlingHcCoreImplScriptableHealthCheck(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcName: String? = nil, hcTags: [String]? = nil, hcMbeanName: String? = nil, expression: String? = nil, languageExtension: String? = nil, completion: ((data: OrgApacheSlingHcCoreImplScriptableHealthCheckInfo?, error: ErrorType?) -> Void)) {
        orgApacheSlingHcCoreImplScriptableHealthCheckWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, hcName: hcName, hcTags: hcTags, hcMbeanName: hcMbeanName, expression: expression, languageExtension: languageExtension).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.hc.core.impl.ScriptableHealthCheck     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "expression" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "hc.tags" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "language.extension" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "hc.name" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "hc.mbean.name" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter hcName: (query)  (optional)
     - parameter hcTags: (query)  (optional)
     - parameter hcMbeanName: (query)  (optional)
     - parameter expression: (query)  (optional)
     - parameter languageExtension: (query)  (optional)

     - returns: RequestBuilder<OrgApacheSlingHcCoreImplScriptableHealthCheckInfo> 
     */
    public class func orgApacheSlingHcCoreImplScriptableHealthCheckWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, hcName: String? = nil, hcTags: [String]? = nil, hcMbeanName: String? = nil, expression: String? = nil, languageExtension: String? = nil) -> RequestBuilder<OrgApacheSlingHcCoreImplScriptableHealthCheckInfo> {
        let path = "/system/console/configMgr/org.apache.sling.hc.core.impl.ScriptableHealthCheck"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "hc.name": hcName,
            "hc.tags": hcTags,
            "hc.mbean.name": hcMbeanName,
            "expression": expression,
            "language.extension": languageExtension
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheSlingHcCoreImplScriptableHealthCheckInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter servletPath: (query)  (optional)
     - parameter disabled: (query)  (optional)
     - parameter corsAccessControlAllowOrigin: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheSlingHcCoreImplServletHealthCheckExecutorServlet(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, servletPath: String? = nil, disabled: Bool? = nil, corsAccessControlAllowOrigin: String? = nil, completion: ((data: OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletInfo?, error: ErrorType?) -> Void)) {
        orgApacheSlingHcCoreImplServletHealthCheckExecutorServletWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, servletPath: servletPath, disabled: disabled, corsAccessControlAllowOrigin: corsAccessControlAllowOrigin).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.hc.core.impl.servlet.HealthCheckExecutorServlet     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "servletPath" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "cors.accessControlAllowOrigin" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "disabled" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter servletPath: (query)  (optional)
     - parameter disabled: (query)  (optional)
     - parameter corsAccessControlAllowOrigin: (query)  (optional)

     - returns: RequestBuilder<OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletInfo> 
     */
    public class func orgApacheSlingHcCoreImplServletHealthCheckExecutorServletWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, servletPath: String? = nil, disabled: Bool? = nil, corsAccessControlAllowOrigin: String? = nil) -> RequestBuilder<OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletInfo> {
        let path = "/system/console/configMgr/org.apache.sling.hc.core.impl.servlet.HealthCheckExecutorServlet"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "servletPath": servletPath,
            "disabled": disabled,
            "cors.accessControlAllowOrigin": corsAccessControlAllowOrigin
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter totalWidth: (query)  (optional)
     - parameter colWidthName: (query)  (optional)
     - parameter colWidthResult: (query)  (optional)
     - parameter colWidthTiming: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheSlingHcCoreImplServletResultTxtVerboseSerializer(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, totalWidth: Int32? = nil, colWidthName: Int32? = nil, colWidthResult: Int32? = nil, colWidthTiming: Int32? = nil, completion: ((data: OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerInfo?, error: ErrorType?) -> Void)) {
        orgApacheSlingHcCoreImplServletResultTxtVerboseSerializerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, totalWidth: totalWidth, colWidthName: colWidthName, colWidthResult: colWidthResult, colWidthTiming: colWidthTiming).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.hc.core.impl.servlet.ResultTxtVerboseSerializer     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "colWidthName" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "totalWidth" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "colWidthTiming" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "colWidthResult" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter totalWidth: (query)  (optional)
     - parameter colWidthName: (query)  (optional)
     - parameter colWidthResult: (query)  (optional)
     - parameter colWidthTiming: (query)  (optional)

     - returns: RequestBuilder<OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerInfo> 
     */
    public class func orgApacheSlingHcCoreImplServletResultTxtVerboseSerializerWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, totalWidth: Int32? = nil, colWidthName: Int32? = nil, colWidthResult: Int32? = nil, colWidthTiming: Int32? = nil) -> RequestBuilder<OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerInfo> {
        let path = "/system/console/configMgr/org.apache.sling.hc.core.impl.servlet.ResultTxtVerboseSerializer"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "totalWidth": totalWidth?.encodeToJSON(),
            "colWidthName": colWidthName?.encodeToJSON(),
            "colWidthResult": colWidthResult?.encodeToJSON(),
            "colWidthTiming": colWidthTiming?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter slingFilterScope: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheSlingI18nImplI18NFilter(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int32? = nil, slingFilterScope: [String]? = nil, completion: ((data: OrgApacheSlingI18nImplI18NFilterInfo?, error: ErrorType?) -> Void)) {
        orgApacheSlingI18nImplI18NFilterWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, serviceRanking: serviceRanking, slingFilterScope: slingFilterScope).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.i18n.impl.I18NFilter     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "service_location" : "service_location",
  "bundle_location" : "bundle_location",
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "sling.filter.scope" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "service.ranking" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter slingFilterScope: (query)  (optional)

     - returns: RequestBuilder<OrgApacheSlingI18nImplI18NFilterInfo> 
     */
    public class func orgApacheSlingI18nImplI18NFilterWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int32? = nil, slingFilterScope: [String]? = nil) -> RequestBuilder<OrgApacheSlingI18nImplI18NFilterInfo> {
        let path = "/system/console/configMgr/org.apache.sling.i18n.impl.I18NFilter"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "service.ranking": serviceRanking?.encodeToJSON(),
            "sling.filter.scope": slingFilterScope
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheSlingI18nImplI18NFilterInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter localeDefault: (query)  (optional)
     - parameter preloadBundles: (query)  (optional)
     - parameter invalidationDelay: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheSlingI18nImplJcrResourceBundleProvider(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, localeDefault: String? = nil, preloadBundles: Bool? = nil, invalidationDelay: Int32? = nil, completion: ((data: OrgApacheSlingI18nImplJcrResourceBundleProviderInfo?, error: ErrorType?) -> Void)) {
        orgApacheSlingI18nImplJcrResourceBundleProviderWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, localeDefault: localeDefault, preloadBundles: preloadBundles, invalidationDelay: invalidationDelay).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.i18n.impl.JcrResourceBundleProvider     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "service_location" : "service_location",
  "bundle_location" : "bundle_location",
  "description" : "description",
  "pid" : "pid",
  "additionalProperties" : "additionalProperties",
  "title" : "title",
  "properties" : {
    "invalidation.delay" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "preload.bundles" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "locale.default" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter localeDefault: (query)  (optional)
     - parameter preloadBundles: (query)  (optional)
     - parameter invalidationDelay: (query)  (optional)

     - returns: RequestBuilder<OrgApacheSlingI18nImplJcrResourceBundleProviderInfo> 
     */
    public class func orgApacheSlingI18nImplJcrResourceBundleProviderWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, localeDefault: String? = nil, preloadBundles: Bool? = nil, invalidationDelay: Int32? = nil) -> RequestBuilder<OrgApacheSlingI18nImplJcrResourceBundleProviderInfo> {
        let path = "/system/console/configMgr/org.apache.sling.i18n.impl.JcrResourceBundleProvider"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "locale.default": localeDefault,
            "preload.bundles": preloadBundles,
            "invalidation.delay": invalidationDelay?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheSlingI18nImplJcrResourceBundleProviderInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter handlerSchemes: (query)  (optional)
     - parameter slingJcrinstallFolderNameRegexp: (query)  (optional)
     - parameter slingJcrinstallFolderMaxDepth: (query)  (optional)
     - parameter slingJcrinstallSearchPath: (query)  (optional)
     - parameter slingJcrinstallNewConfigPath: (query)  (optional)
     - parameter slingJcrinstallSignalPath: (query)  (optional)
     - parameter slingJcrinstallEnableWriteback: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheSlingInstallerProviderJcrImplJcrInstaller(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, handlerSchemes: [String]? = nil, slingJcrinstallFolderNameRegexp: String? = nil, slingJcrinstallFolderMaxDepth: Int32? = nil, slingJcrinstallSearchPath: [String]? = nil, slingJcrinstallNewConfigPath: String? = nil, slingJcrinstallSignalPath: String? = nil, slingJcrinstallEnableWriteback: Bool? = nil, completion: ((data: OrgApacheSlingInstallerProviderJcrImplJcrInstallerInfo?, error: ErrorType?) -> Void)) {
        orgApacheSlingInstallerProviderJcrImplJcrInstallerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, handlerSchemes: handlerSchemes, slingJcrinstallFolderNameRegexp: slingJcrinstallFolderNameRegexp, slingJcrinstallFolderMaxDepth: slingJcrinstallFolderMaxDepth, slingJcrinstallSearchPath: slingJcrinstallSearchPath, slingJcrinstallNewConfigPath: slingJcrinstallNewConfigPath, slingJcrinstallSignalPath: slingJcrinstallSignalPath, slingJcrinstallEnableWriteback: slingJcrinstallEnableWriteback).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.installer.provider.jcr.impl.JcrInstaller     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "service_location" : "service_location",
  "bundle_location" : "bundle_location",
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "sling.jcrinstall.search.path" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "sling.jcrinstall.enable.writeback" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "sling.jcrinstall.new.config.path" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "sling.jcrinstall.signal.path" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "handler.schemes" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "sling.jcrinstall.folder.name.regexp" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "sling.jcrinstall.folder.max.depth" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter handlerSchemes: (query)  (optional)
     - parameter slingJcrinstallFolderNameRegexp: (query)  (optional)
     - parameter slingJcrinstallFolderMaxDepth: (query)  (optional)
     - parameter slingJcrinstallSearchPath: (query)  (optional)
     - parameter slingJcrinstallNewConfigPath: (query)  (optional)
     - parameter slingJcrinstallSignalPath: (query)  (optional)
     - parameter slingJcrinstallEnableWriteback: (query)  (optional)

     - returns: RequestBuilder<OrgApacheSlingInstallerProviderJcrImplJcrInstallerInfo> 
     */
    public class func orgApacheSlingInstallerProviderJcrImplJcrInstallerWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, handlerSchemes: [String]? = nil, slingJcrinstallFolderNameRegexp: String? = nil, slingJcrinstallFolderMaxDepth: Int32? = nil, slingJcrinstallSearchPath: [String]? = nil, slingJcrinstallNewConfigPath: String? = nil, slingJcrinstallSignalPath: String? = nil, slingJcrinstallEnableWriteback: Bool? = nil) -> RequestBuilder<OrgApacheSlingInstallerProviderJcrImplJcrInstallerInfo> {
        let path = "/system/console/configMgr/org.apache.sling.installer.provider.jcr.impl.JcrInstaller"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "handler.schemes": handlerSchemes,
            "sling.jcrinstall.folder.name.regexp": slingJcrinstallFolderNameRegexp,
            "sling.jcrinstall.folder.max.depth": slingJcrinstallFolderMaxDepth?.encodeToJSON(),
            "sling.jcrinstall.search.path": slingJcrinstallSearchPath,
            "sling.jcrinstall.new.config.path": slingJcrinstallNewConfigPath,
            "sling.jcrinstall.signal.path": slingJcrinstallSignalPath,
            "sling.jcrinstall.enable.writeback": slingJcrinstallEnableWriteback
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheSlingInstallerProviderJcrImplJcrInstallerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter whitelistBypass: (query)  (optional)
     - parameter whitelistBundlesRegexp: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheSlingJcrBaseInternalLoginAdminWhitelist(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, whitelistBypass: Bool? = nil, whitelistBundlesRegexp: String? = nil, completion: ((data: OrgApacheSlingJcrBaseInternalLoginAdminWhitelistInfo?, error: ErrorType?) -> Void)) {
        orgApacheSlingJcrBaseInternalLoginAdminWhitelistWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, whitelistBypass: whitelistBypass, whitelistBundlesRegexp: whitelistBundlesRegexp).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.jcr.base.internal.LoginAdminWhitelist     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "whitelist.bundles.regexp" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "whitelist.bypass" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter whitelistBypass: (query)  (optional)
     - parameter whitelistBundlesRegexp: (query)  (optional)

     - returns: RequestBuilder<OrgApacheSlingJcrBaseInternalLoginAdminWhitelistInfo> 
     */
    public class func orgApacheSlingJcrBaseInternalLoginAdminWhitelistWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, whitelistBypass: Bool? = nil, whitelistBundlesRegexp: String? = nil) -> RequestBuilder<OrgApacheSlingJcrBaseInternalLoginAdminWhitelistInfo> {
        let path = "/system/console/configMgr/org.apache.sling.jcr.base.internal.LoginAdminWhitelist"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "whitelist.bypass": whitelistBypass,
            "whitelist.bundles.regexp": whitelistBundlesRegexp
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheSlingJcrBaseInternalLoginAdminWhitelistInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter whitelistName: (query)  (optional)
     - parameter whitelistBundles: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheSlingJcrBaseInternalLoginAdminWhitelistFragment(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, whitelistName: String? = nil, whitelistBundles: [String]? = nil, completion: ((data: OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentInfo?, error: ErrorType?) -> Void)) {
        orgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, whitelistName: whitelistName, whitelistBundles: whitelistBundles).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.jcr.base.internal.LoginAdminWhitelist.fragment     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "whitelist.bundles" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "whitelist.name" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter whitelistName: (query)  (optional)
     - parameter whitelistBundles: (query)  (optional)

     - returns: RequestBuilder<OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentInfo> 
     */
    public class func orgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, whitelistName: String? = nil, whitelistBundles: [String]? = nil) -> RequestBuilder<OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentInfo> {
        let path = "/system/console/configMgr/org.apache.sling.jcr.base.internal.LoginAdminWhitelist.fragment"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "whitelist.name": whitelistName,
            "whitelist.bundles": whitelistBundles
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter alias: (query)  (optional)
     - parameter davCreateAbsoluteUri: (query)  (optional)
     - parameter davProtectedhandlers: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheSlingJcrDavexImplServletsSlingDavExServlet(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, alias: String? = nil, davCreateAbsoluteUri: Bool? = nil, davProtectedhandlers: String? = nil, completion: ((data: OrgApacheSlingJcrDavexImplServletsSlingDavExServletInfo?, error: ErrorType?) -> Void)) {
        orgApacheSlingJcrDavexImplServletsSlingDavExServletWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, alias: alias, davCreateAbsoluteUri: davCreateAbsoluteUri, davProtectedhandlers: davProtectedhandlers).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.jcr.davex.impl.servlets.SlingDavExServlet     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "dav.protectedhandlers" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "alias" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "dav.create-absolute-uri" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter alias: (query)  (optional)
     - parameter davCreateAbsoluteUri: (query)  (optional)
     - parameter davProtectedhandlers: (query)  (optional)

     - returns: RequestBuilder<OrgApacheSlingJcrDavexImplServletsSlingDavExServletInfo> 
     */
    public class func orgApacheSlingJcrDavexImplServletsSlingDavExServletWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, alias: String? = nil, davCreateAbsoluteUri: Bool? = nil, davProtectedhandlers: String? = nil) -> RequestBuilder<OrgApacheSlingJcrDavexImplServletsSlingDavExServletInfo> {
        let path = "/system/console/configMgr/org.apache.sling.jcr.davex.impl.servlets.SlingDavExServlet"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "alias": alias,
            "dav.create-absolute-uri": davCreateAbsoluteUri,
            "dav.protectedhandlers": davProtectedhandlers
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheSlingJcrDavexImplServletsSlingDavExServletInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter javaNamingFactoryInitial: (query)  (optional)
     - parameter javaNamingProviderUrl: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheSlingJcrJackrabbitServerJndiRegistrationSupport(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, javaNamingFactoryInitial: String? = nil, javaNamingProviderUrl: String? = nil, completion: ((data: OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportInfo?, error: ErrorType?) -> Void)) {
        orgApacheSlingJcrJackrabbitServerJndiRegistrationSupportWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, javaNamingFactoryInitial: javaNamingFactoryInitial, javaNamingProviderUrl: javaNamingProviderUrl).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.jcr.jackrabbit.server.JndiRegistrationSupport     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "java.naming.factory.initial" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "java.naming.provider.url" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter javaNamingFactoryInitial: (query)  (optional)
     - parameter javaNamingProviderUrl: (query)  (optional)

     - returns: RequestBuilder<OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportInfo> 
     */
    public class func orgApacheSlingJcrJackrabbitServerJndiRegistrationSupportWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, javaNamingFactoryInitial: String? = nil, javaNamingProviderUrl: String? = nil) -> RequestBuilder<OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportInfo> {
        let path = "/system/console/configMgr/org.apache.sling.jcr.jackrabbit.server.JndiRegistrationSupport"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "java.naming.factory.initial": javaNamingFactoryInitial,
            "java.naming.provider.url": javaNamingProviderUrl
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter port: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheSlingJcrJackrabbitServerRmiRegistrationSupport(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, port: Int32? = nil, completion: ((data: OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportInfo?, error: ErrorType?) -> Void)) {
        orgApacheSlingJcrJackrabbitServerRmiRegistrationSupportWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, port: port).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.jcr.jackrabbit.server.RmiRegistrationSupport     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "port" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter port: (query)  (optional)

     - returns: RequestBuilder<OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportInfo> 
     */
    public class func orgApacheSlingJcrJackrabbitServerRmiRegistrationSupportWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, port: Int32? = nil) -> RequestBuilder<OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportInfo> {
        let path = "/system/console/configMgr/org.apache.sling.jcr.jackrabbit.server.RmiRegistrationSupport"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "port": port?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter references: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheSlingJcrRepoinitImplRepositoryInitializer(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, references: [String]? = nil, completion: ((data: OrgApacheSlingJcrRepoinitImplRepositoryInitializerInfo?, error: ErrorType?) -> Void)) {
        orgApacheSlingJcrRepoinitImplRepositoryInitializerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, references: references).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.jcr.repoinit.impl.RepositoryInitializer     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "service_location" : "service_location",
  "bundle_location" : "bundle_location",
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "references" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter references: (query)  (optional)

     - returns: RequestBuilder<OrgApacheSlingJcrRepoinitImplRepositoryInitializerInfo> 
     */
    public class func orgApacheSlingJcrRepoinitImplRepositoryInitializerWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, references: [String]? = nil) -> RequestBuilder<OrgApacheSlingJcrRepoinitImplRepositoryInitializerInfo> {
        let path = "/system/console/configMgr/org.apache.sling.jcr.repoinit.impl.RepositoryInitializer"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "references": references
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheSlingJcrRepoinitImplRepositoryInitializerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter references: (query)  (optional)
     - parameter scripts: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheSlingJcrRepoinitRepositoryInitializer(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, references: [String]? = nil, scripts: [String]? = nil, completion: ((data: OrgApacheSlingJcrRepoinitRepositoryInitializerInfo?, error: ErrorType?) -> Void)) {
        orgApacheSlingJcrRepoinitRepositoryInitializerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, references: references, scripts: scripts).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.jcr.repoinit.RepositoryInitializer     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "references" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "scripts" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter references: (query)  (optional)
     - parameter scripts: (query)  (optional)

     - returns: RequestBuilder<OrgApacheSlingJcrRepoinitRepositoryInitializerInfo> 
     */
    public class func orgApacheSlingJcrRepoinitRepositoryInitializerWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, references: [String]? = nil, scripts: [String]? = nil) -> RequestBuilder<OrgApacheSlingJcrRepoinitRepositoryInitializerInfo> {
        let path = "/system/console/configMgr/org.apache.sling.jcr.repoinit.RepositoryInitializer"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "references": references,
            "scripts": scripts
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheSlingJcrRepoinitRepositoryInitializerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter resourceResolverSearchpath: (query)  (optional)
     - parameter resourceResolverManglenamespaces: (query)  (optional)
     - parameter resourceResolverAllowDirect: (query)  (optional)
     - parameter resourceResolverRequiredProviders: (query)  (optional)
     - parameter resourceResolverRequiredProvidernames: (query)  (optional)
     - parameter resourceResolverVirtual: (query)  (optional)
     - parameter resourceResolverMapping: (query)  (optional)
     - parameter resourceResolverMapLocation: (query)  (optional)
     - parameter resourceResolverMapObservation: (query)  (optional)
     - parameter resourceResolverDefaultVanityRedirectStatus: (query)  (optional)
     - parameter resourceResolverEnableVanitypath: (query)  (optional)
     - parameter resourceResolverVanitypathMaxEntries: (query)  (optional)
     - parameter resourceResolverVanitypathMaxEntriesStartup: (query)  (optional)
     - parameter resourceResolverVanitypathBloomfilterMaxBytes: (query)  (optional)
     - parameter resourceResolverOptimizeAliasResolution: (query)  (optional)
     - parameter resourceResolverVanitypathWhitelist: (query)  (optional)
     - parameter resourceResolverVanitypathBlacklist: (query)  (optional)
     - parameter resourceResolverVanityPrecedence: (query)  (optional)
     - parameter resourceResolverProviderhandlingParanoid: (query)  (optional)
     - parameter resourceResolverLogClosing: (query)  (optional)
     - parameter resourceResolverLogUnclosed: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, resourceResolverSearchpath: [String]? = nil, resourceResolverManglenamespaces: Bool? = nil, resourceResolverAllowDirect: Bool? = nil, resourceResolverRequiredProviders: [String]? = nil, resourceResolverRequiredProvidernames: [String]? = nil, resourceResolverVirtual: [String]? = nil, resourceResolverMapping: [String]? = nil, resourceResolverMapLocation: String? = nil, resourceResolverMapObservation: [String]? = nil, resourceResolverDefaultVanityRedirectStatus: Int32? = nil, resourceResolverEnableVanitypath: Bool? = nil, resourceResolverVanitypathMaxEntries: Int32? = nil, resourceResolverVanitypathMaxEntriesStartup: Bool? = nil, resourceResolverVanitypathBloomfilterMaxBytes: Int32? = nil, resourceResolverOptimizeAliasResolution: Bool? = nil, resourceResolverVanitypathWhitelist: [String]? = nil, resourceResolverVanitypathBlacklist: [String]? = nil, resourceResolverVanityPrecedence: Bool? = nil, resourceResolverProviderhandlingParanoid: Bool? = nil, resourceResolverLogClosing: Bool? = nil, resourceResolverLogUnclosed: Bool? = nil, completion: ((data: OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplInfo?, error: ErrorType?) -> Void)) {
        orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, resourceResolverSearchpath: resourceResolverSearchpath, resourceResolverManglenamespaces: resourceResolverManglenamespaces, resourceResolverAllowDirect: resourceResolverAllowDirect, resourceResolverRequiredProviders: resourceResolverRequiredProviders, resourceResolverRequiredProvidernames: resourceResolverRequiredProvidernames, resourceResolverVirtual: resourceResolverVirtual, resourceResolverMapping: resourceResolverMapping, resourceResolverMapLocation: resourceResolverMapLocation, resourceResolverMapObservation: resourceResolverMapObservation, resourceResolverDefaultVanityRedirectStatus: resourceResolverDefaultVanityRedirectStatus, resourceResolverEnableVanitypath: resourceResolverEnableVanitypath, resourceResolverVanitypathMaxEntries: resourceResolverVanitypathMaxEntries, resourceResolverVanitypathMaxEntriesStartup: resourceResolverVanitypathMaxEntriesStartup, resourceResolverVanitypathBloomfilterMaxBytes: resourceResolverVanitypathBloomfilterMaxBytes, resourceResolverOptimizeAliasResolution: resourceResolverOptimizeAliasResolution, resourceResolverVanitypathWhitelist: resourceResolverVanitypathWhitelist, resourceResolverVanitypathBlacklist: resourceResolverVanitypathBlacklist, resourceResolverVanityPrecedence: resourceResolverVanityPrecedence, resourceResolverProviderhandlingParanoid: resourceResolverProviderhandlingParanoid, resourceResolverLogClosing: resourceResolverLogClosing, resourceResolverLogUnclosed: resourceResolverLogUnclosed).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.jcr.resource.internal.JcrResourceResolverFactoryImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "service_location" : "service_location",
  "bundle_location" : "bundle_location",
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "resource.resolver.searchpath" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "resource.resolver.map.location" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "resource.resolver.providerhandling.paranoid" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "resource.resolver.enable.vanitypath" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "resource.resolver.vanitypath.maxEntries" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "resource.resolver.log.closing" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "resource.resolver.vanitypath.maxEntries.startup" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "resource.resolver.vanity.precedence" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "resource.resolver.vanitypath.blacklist" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "resource.resolver.manglenamespaces" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "resource.resolver.vanitypath.bloomfilter.maxBytes" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "resource.resolver.default.vanity.redirect.status" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "resource.resolver.optimize.alias.resolution" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "resource.resolver.log.unclosed" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "resource.resolver.allowDirect" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "resource.resolver.vanitypath.whitelist" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "resource.resolver.required.providers" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "resource.resolver.required.providernames" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "resource.resolver.virtual" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "resource.resolver.map.observation" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "resource.resolver.mapping" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter resourceResolverSearchpath: (query)  (optional)
     - parameter resourceResolverManglenamespaces: (query)  (optional)
     - parameter resourceResolverAllowDirect: (query)  (optional)
     - parameter resourceResolverRequiredProviders: (query)  (optional)
     - parameter resourceResolverRequiredProvidernames: (query)  (optional)
     - parameter resourceResolverVirtual: (query)  (optional)
     - parameter resourceResolverMapping: (query)  (optional)
     - parameter resourceResolverMapLocation: (query)  (optional)
     - parameter resourceResolverMapObservation: (query)  (optional)
     - parameter resourceResolverDefaultVanityRedirectStatus: (query)  (optional)
     - parameter resourceResolverEnableVanitypath: (query)  (optional)
     - parameter resourceResolverVanitypathMaxEntries: (query)  (optional)
     - parameter resourceResolverVanitypathMaxEntriesStartup: (query)  (optional)
     - parameter resourceResolverVanitypathBloomfilterMaxBytes: (query)  (optional)
     - parameter resourceResolverOptimizeAliasResolution: (query)  (optional)
     - parameter resourceResolverVanitypathWhitelist: (query)  (optional)
     - parameter resourceResolverVanitypathBlacklist: (query)  (optional)
     - parameter resourceResolverVanityPrecedence: (query)  (optional)
     - parameter resourceResolverProviderhandlingParanoid: (query)  (optional)
     - parameter resourceResolverLogClosing: (query)  (optional)
     - parameter resourceResolverLogUnclosed: (query)  (optional)

     - returns: RequestBuilder<OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplInfo> 
     */
    public class func orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, resourceResolverSearchpath: [String]? = nil, resourceResolverManglenamespaces: Bool? = nil, resourceResolverAllowDirect: Bool? = nil, resourceResolverRequiredProviders: [String]? = nil, resourceResolverRequiredProvidernames: [String]? = nil, resourceResolverVirtual: [String]? = nil, resourceResolverMapping: [String]? = nil, resourceResolverMapLocation: String? = nil, resourceResolverMapObservation: [String]? = nil, resourceResolverDefaultVanityRedirectStatus: Int32? = nil, resourceResolverEnableVanitypath: Bool? = nil, resourceResolverVanitypathMaxEntries: Int32? = nil, resourceResolverVanitypathMaxEntriesStartup: Bool? = nil, resourceResolverVanitypathBloomfilterMaxBytes: Int32? = nil, resourceResolverOptimizeAliasResolution: Bool? = nil, resourceResolverVanitypathWhitelist: [String]? = nil, resourceResolverVanitypathBlacklist: [String]? = nil, resourceResolverVanityPrecedence: Bool? = nil, resourceResolverProviderhandlingParanoid: Bool? = nil, resourceResolverLogClosing: Bool? = nil, resourceResolverLogUnclosed: Bool? = nil) -> RequestBuilder<OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplInfo> {
        let path = "/system/console/configMgr/org.apache.sling.jcr.resource.internal.JcrResourceResolverFactoryImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "resource.resolver.searchpath": resourceResolverSearchpath,
            "resource.resolver.manglenamespaces": resourceResolverManglenamespaces,
            "resource.resolver.allowDirect": resourceResolverAllowDirect,
            "resource.resolver.required.providers": resourceResolverRequiredProviders,
            "resource.resolver.required.providernames": resourceResolverRequiredProvidernames,
            "resource.resolver.virtual": resourceResolverVirtual,
            "resource.resolver.mapping": resourceResolverMapping,
            "resource.resolver.map.location": resourceResolverMapLocation,
            "resource.resolver.map.observation": resourceResolverMapObservation,
            "resource.resolver.default.vanity.redirect.status": resourceResolverDefaultVanityRedirectStatus?.encodeToJSON(),
            "resource.resolver.enable.vanitypath": resourceResolverEnableVanitypath,
            "resource.resolver.vanitypath.maxEntries": resourceResolverVanitypathMaxEntries?.encodeToJSON(),
            "resource.resolver.vanitypath.maxEntries.startup": resourceResolverVanitypathMaxEntriesStartup,
            "resource.resolver.vanitypath.bloomfilter.maxBytes": resourceResolverVanitypathBloomfilterMaxBytes?.encodeToJSON(),
            "resource.resolver.optimize.alias.resolution": resourceResolverOptimizeAliasResolution,
            "resource.resolver.vanitypath.whitelist": resourceResolverVanitypathWhitelist,
            "resource.resolver.vanitypath.blacklist": resourceResolverVanitypathBlacklist,
            "resource.resolver.vanity.precedence": resourceResolverVanityPrecedence,
            "resource.resolver.providerhandling.paranoid": resourceResolverProviderhandlingParanoid,
            "resource.resolver.log.closing": resourceResolverLogClosing,
            "resource.resolver.log.unclosed": resourceResolverLogUnclosed
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter allowOnlySystemUser: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheSlingJcrResourceInternalJcrSystemUserValidator(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, allowOnlySystemUser: Bool? = nil, completion: ((data: OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorInfo?, error: ErrorType?) -> Void)) {
        orgApacheSlingJcrResourceInternalJcrSystemUserValidatorWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, allowOnlySystemUser: allowOnlySystemUser).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.jcr.resource.internal.JcrSystemUserValidator     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "allow.only.system.user" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter allowOnlySystemUser: (query)  (optional)

     - returns: RequestBuilder<OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorInfo> 
     */
    public class func orgApacheSlingJcrResourceInternalJcrSystemUserValidatorWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, allowOnlySystemUser: Bool? = nil) -> RequestBuilder<OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorInfo> {
        let path = "/system/console/configMgr/org.apache.sling.jcr.resource.internal.JcrSystemUserValidator"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "allow.only.system.user": allowOnlySystemUser
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter path: (query)  (optional)
     - parameter checkpathPrefix: (query)  (optional)
     - parameter jcrPath: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheSlingJcrResourcesecurityImplResourceAccessGateFactory(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, path: String? = nil, checkpathPrefix: String? = nil, jcrPath: String? = nil, completion: ((data: OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryInfo?, error: ErrorType?) -> Void)) {
        orgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, path: path, checkpathPrefix: checkpathPrefix, jcrPath: jcrPath).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.jcr.resourcesecurity.impl.ResourceAccessGateFactory     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "path" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "checkpath.prefix" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "jcrPath" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter path: (query)  (optional)
     - parameter checkpathPrefix: (query)  (optional)
     - parameter jcrPath: (query)  (optional)

     - returns: RequestBuilder<OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryInfo> 
     */
    public class func orgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, path: String? = nil, checkpathPrefix: String? = nil, jcrPath: String? = nil) -> RequestBuilder<OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryInfo> {
        let path = "/system/console/configMgr/org.apache.sling.jcr.resourcesecurity.impl.ResourceAccessGateFactory"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "path": path,
            "checkpath.prefix": checkpathPrefix,
            "jcrPath": jcrPath
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter typeCollections: (query)  (optional)
     - parameter typeNoncollections: (query)  (optional)
     - parameter typeContent: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheSlingJcrWebdavImplHandlerDefaultHandlerService(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int32? = nil, typeCollections: String? = nil, typeNoncollections: String? = nil, typeContent: String? = nil, completion: ((data: OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceInfo?, error: ErrorType?) -> Void)) {
        orgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, serviceRanking: serviceRanking, typeCollections: typeCollections, typeNoncollections: typeNoncollections, typeContent: typeContent).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.jcr.webdav.impl.handler.DefaultHandlerService     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "type.content" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "type.collections" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "type.noncollections" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "service.ranking" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter typeCollections: (query)  (optional)
     - parameter typeNoncollections: (query)  (optional)
     - parameter typeContent: (query)  (optional)

     - returns: RequestBuilder<OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceInfo> 
     */
    public class func orgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int32? = nil, typeCollections: String? = nil, typeNoncollections: String? = nil, typeContent: String? = nil) -> RequestBuilder<OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceInfo> {
        let path = "/system/console/configMgr/org.apache.sling.jcr.webdav.impl.handler.DefaultHandlerService"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "service.ranking": serviceRanking?.encodeToJSON(),
            "type.collections": typeCollections,
            "type.noncollections": typeNoncollections,
            "type.content": typeContent
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServic(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int32? = nil, completion: ((data: OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicInfo?, error: ErrorType?) -> Void)) {
        orgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, serviceRanking: serviceRanking).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.jcr.webdav.impl.handler.DirListingExportHandlerService     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "service.ranking" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)

     - returns: RequestBuilder<OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicInfo> 
     */
    public class func orgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int32? = nil) -> RequestBuilder<OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicInfo> {
        let path = "/system/console/configMgr/org.apache.sling.jcr.webdav.impl.handler.DirListingExportHandlerService"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "service.ranking": serviceRanking?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter davRoot: (query)  (optional)
     - parameter davCreateAbsoluteUri: (query)  (optional)
     - parameter davRealm: (query)  (optional)
     - parameter collectionTypes: (query)  (optional)
     - parameter filterPrefixes: (query)  (optional)
     - parameter filterTypes: (query)  (optional)
     - parameter filterUris: (query)  (optional)
     - parameter typeCollections: (query)  (optional)
     - parameter typeNoncollections: (query)  (optional)
     - parameter typeContent: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheSlingJcrWebdavImplServletsSimpleWebDavServlet(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, davRoot: String? = nil, davCreateAbsoluteUri: Bool? = nil, davRealm: String? = nil, collectionTypes: [String]? = nil, filterPrefixes: [String]? = nil, filterTypes: String? = nil, filterUris: String? = nil, typeCollections: String? = nil, typeNoncollections: String? = nil, typeContent: String? = nil, completion: ((data: OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletInfo?, error: ErrorType?) -> Void)) {
        orgApacheSlingJcrWebdavImplServletsSimpleWebDavServletWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, davRoot: davRoot, davCreateAbsoluteUri: davCreateAbsoluteUri, davRealm: davRealm, collectionTypes: collectionTypes, filterPrefixes: filterPrefixes, filterTypes: filterTypes, filterUris: filterUris, typeCollections: typeCollections, typeNoncollections: typeNoncollections, typeContent: typeContent).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.jcr.webdav.impl.servlets.SimpleWebDavServlet     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "service_location" : "service_location",
  "bundle_location" : "bundle_location",
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "filter.prefixes" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "type.content" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "type.collections" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "collection.types" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "type.noncollections" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "filter.types" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "dav.realm" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "dav.root" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "dav.create-absolute-uri" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "filter.uris" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter davRoot: (query)  (optional)
     - parameter davCreateAbsoluteUri: (query)  (optional)
     - parameter davRealm: (query)  (optional)
     - parameter collectionTypes: (query)  (optional)
     - parameter filterPrefixes: (query)  (optional)
     - parameter filterTypes: (query)  (optional)
     - parameter filterUris: (query)  (optional)
     - parameter typeCollections: (query)  (optional)
     - parameter typeNoncollections: (query)  (optional)
     - parameter typeContent: (query)  (optional)

     - returns: RequestBuilder<OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletInfo> 
     */
    public class func orgApacheSlingJcrWebdavImplServletsSimpleWebDavServletWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, davRoot: String? = nil, davCreateAbsoluteUri: Bool? = nil, davRealm: String? = nil, collectionTypes: [String]? = nil, filterPrefixes: [String]? = nil, filterTypes: String? = nil, filterUris: String? = nil, typeCollections: String? = nil, typeNoncollections: String? = nil, typeContent: String? = nil) -> RequestBuilder<OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletInfo> {
        let path = "/system/console/configMgr/org.apache.sling.jcr.webdav.impl.servlets.SimpleWebDavServlet"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "dav.root": davRoot,
            "dav.create-absolute-uri": davCreateAbsoluteUri,
            "dav.realm": davRealm,
            "collection.types": collectionTypes,
            "filter.prefixes": filterPrefixes,
            "filter.types": filterTypes,
            "filter.uris": filterUris,
            "type.collections": typeCollections,
            "type.noncollections": typeNoncollections,
            "type.content": typeContent
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter providerRoots: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheSlingJmxProviderImplJMXResourceProvider(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, providerRoots: String? = nil, completion: ((data: OrgApacheSlingJmxProviderImplJMXResourceProviderInfo?, error: ErrorType?) -> Void)) {
        orgApacheSlingJmxProviderImplJMXResourceProviderWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, providerRoots: providerRoots).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.jmx.provider.impl.JMXResourceProvider     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "provider.roots" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter providerRoots: (query)  (optional)

     - returns: RequestBuilder<OrgApacheSlingJmxProviderImplJMXResourceProviderInfo> 
     */
    public class func orgApacheSlingJmxProviderImplJMXResourceProviderWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, providerRoots: String? = nil) -> RequestBuilder<OrgApacheSlingJmxProviderImplJMXResourceProviderInfo> {
        let path = "/system/console/configMgr/org.apache.sling.jmx.provider.impl.JMXResourceProvider"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "provider.roots": providerRoots
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheSlingJmxProviderImplJMXResourceProviderInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter osgiHttpWhiteboardListener: (query)  (optional)
     - parameter osgiHttpWhiteboardContextSelect: (query)  (optional)
     - parameter maxRecursionDepth: (query)  (optional)
     - parameter cleanupJobPeriod: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheSlingModelsImplModelAdapterFactory(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, osgiHttpWhiteboardListener: String? = nil, osgiHttpWhiteboardContextSelect: String? = nil, maxRecursionDepth: Int32? = nil, cleanupJobPeriod: Int32? = nil, completion: ((data: OrgApacheSlingModelsImplModelAdapterFactoryInfo?, error: ErrorType?) -> Void)) {
        orgApacheSlingModelsImplModelAdapterFactoryWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, osgiHttpWhiteboardListener: osgiHttpWhiteboardListener, osgiHttpWhiteboardContextSelect: osgiHttpWhiteboardContextSelect, maxRecursionDepth: maxRecursionDepth, cleanupJobPeriod: cleanupJobPeriod).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.models.impl.ModelAdapterFactory     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "cleanup.job.period" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "osgi.http.whiteboard.listener" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "osgi.http.whiteboard.context.select" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "max.recursion.depth" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter osgiHttpWhiteboardListener: (query)  (optional)
     - parameter osgiHttpWhiteboardContextSelect: (query)  (optional)
     - parameter maxRecursionDepth: (query)  (optional)
     - parameter cleanupJobPeriod: (query)  (optional)

     - returns: RequestBuilder<OrgApacheSlingModelsImplModelAdapterFactoryInfo> 
     */
    public class func orgApacheSlingModelsImplModelAdapterFactoryWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, osgiHttpWhiteboardListener: String? = nil, osgiHttpWhiteboardContextSelect: String? = nil, maxRecursionDepth: Int32? = nil, cleanupJobPeriod: Int32? = nil) -> RequestBuilder<OrgApacheSlingModelsImplModelAdapterFactoryInfo> {
        let path = "/system/console/configMgr/org.apache.sling.models.impl.ModelAdapterFactory"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "osgi.http.whiteboard.listener": osgiHttpWhiteboardListener,
            "osgi.http.whiteboard.context.select": osgiHttpWhiteboardContextSelect,
            "max.recursion.depth": maxRecursionDepth?.encodeToJSON(),
            "cleanup.job.period": cleanupJobPeriod?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheSlingModelsImplModelAdapterFactoryInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter maxRecursionLevels: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheSlingModelsJacksonexporterImplResourceModuleProvider(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, maxRecursionLevels: Int32? = nil, completion: ((data: OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderInfo?, error: ErrorType?) -> Void)) {
        orgApacheSlingModelsJacksonexporterImplResourceModuleProviderWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, maxRecursionLevels: maxRecursionLevels).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.models.jacksonexporter.impl.ResourceModuleProvider     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "max.recursion.levels" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter maxRecursionLevels: (query)  (optional)

     - returns: RequestBuilder<OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderInfo> 
     */
    public class func orgApacheSlingModelsJacksonexporterImplResourceModuleProviderWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, maxRecursionLevels: Int32? = nil) -> RequestBuilder<OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderInfo> {
        let path = "/system/console/configMgr/org.apache.sling.models.jacksonexporter.impl.ResourceModuleProvider"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "max.recursion.levels": maxRecursionLevels?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter felixInventoryPrinterName: (query)  (optional)
     - parameter felixInventoryPrinterTitle: (query)  (optional)
     - parameter path: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheSlingResourceInventoryImplResourceInventoryPrinterFacto(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, felixInventoryPrinterName: String? = nil, felixInventoryPrinterTitle: String? = nil, path: String? = nil, completion: ((data: OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoInfo?, error: ErrorType?) -> Void)) {
        orgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, felixInventoryPrinterName: felixInventoryPrinterName, felixInventoryPrinterTitle: felixInventoryPrinterTitle, path: path).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.resource.inventory.impl.ResourceInventoryPrinterFactory     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "felix.inventory.printer.title" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "path" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "felix.inventory.printer.name" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter felixInventoryPrinterName: (query)  (optional)
     - parameter felixInventoryPrinterTitle: (query)  (optional)
     - parameter path: (query)  (optional)

     - returns: RequestBuilder<OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoInfo> 
     */
    public class func orgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, felixInventoryPrinterName: String? = nil, felixInventoryPrinterTitle: String? = nil, path: String? = nil) -> RequestBuilder<OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoInfo> {
        let path = "/system/console/configMgr/org.apache.sling.resource.inventory.impl.ResourceInventoryPrinterFactory"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "felix.inventory.printer.name": felixInventoryPrinterName,
            "felix.inventory.printer.title": felixInventoryPrinterTitle,
            "path": path
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter mergeRoot: (query)  (optional)
     - parameter mergeReadOnly: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheSlingResourcemergerImplMergedResourceProviderFactory(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, mergeRoot: String? = nil, mergeReadOnly: Bool? = nil, completion: ((data: OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryInfo?, error: ErrorType?) -> Void)) {
        orgApacheSlingResourcemergerImplMergedResourceProviderFactoryWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, mergeRoot: mergeRoot, mergeReadOnly: mergeReadOnly).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.resourcemerger.impl.MergedResourceProviderFactory     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "merge.readOnly" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "merge.root" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter mergeRoot: (query)  (optional)
     - parameter mergeReadOnly: (query)  (optional)

     - returns: RequestBuilder<OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryInfo> 
     */
    public class func orgApacheSlingResourcemergerImplMergedResourceProviderFactoryWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, mergeRoot: String? = nil, mergeReadOnly: Bool? = nil) -> RequestBuilder<OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryInfo> {
        let path = "/system/console/configMgr/org.apache.sling.resourcemerger.impl.MergedResourceProviderFactory"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "merge.root": mergeRoot,
            "merge.readOnly": mergeReadOnly
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter mergeRoot: (query)  (optional)
     - parameter mergeReadOnly: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheSlingResourcemergerPickerOverriding(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, mergeRoot: String? = nil, mergeReadOnly: Bool? = nil, completion: ((data: OrgApacheSlingResourcemergerPickerOverridingInfo?, error: ErrorType?) -> Void)) {
        orgApacheSlingResourcemergerPickerOverridingWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, mergeRoot: mergeRoot, mergeReadOnly: mergeReadOnly).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.resourcemerger.picker.overriding     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "service_location" : "service_location",
  "bundle_location" : "bundle_location",
  "description" : "description",
  "pid" : "pid",
  "additionalProperties" : "additionalProperties",
  "title" : "title",
  "properties" : {
    "merge.readOnly" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "merge.root" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter mergeRoot: (query)  (optional)
     - parameter mergeReadOnly: (query)  (optional)

     - returns: RequestBuilder<OrgApacheSlingResourcemergerPickerOverridingInfo> 
     */
    public class func orgApacheSlingResourcemergerPickerOverridingWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, mergeRoot: String? = nil, mergeReadOnly: Bool? = nil) -> RequestBuilder<OrgApacheSlingResourcemergerPickerOverridingInfo> {
        let path = "/system/console/configMgr/org.apache.sling.resourcemerger.picker.overriding"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "merge.root": mergeRoot,
            "merge.readOnly": mergeReadOnly
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheSlingResourcemergerPickerOverridingInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter orgApacheSlingScriptingCacheSize: (query)  (optional)
     - parameter orgApacheSlingScriptingCacheAdditionalExtensions: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheSlingScriptingCoreImplScriptCacheImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, orgApacheSlingScriptingCacheSize: Int32? = nil, orgApacheSlingScriptingCacheAdditionalExtensions: [String]? = nil, completion: ((data: OrgApacheSlingScriptingCoreImplScriptCacheImplInfo?, error: ErrorType?) -> Void)) {
        orgApacheSlingScriptingCoreImplScriptCacheImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, orgApacheSlingScriptingCacheSize: orgApacheSlingScriptingCacheSize, orgApacheSlingScriptingCacheAdditionalExtensions: orgApacheSlingScriptingCacheAdditionalExtensions).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.scripting.core.impl.ScriptCacheImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "service_location" : "service_location",
  "bundle_location" : "bundle_location",
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "org.apache.sling.scripting.cache.size" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "org.apache.sling.scripting.cache.additional_extensions" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter orgApacheSlingScriptingCacheSize: (query)  (optional)
     - parameter orgApacheSlingScriptingCacheAdditionalExtensions: (query)  (optional)

     - returns: RequestBuilder<OrgApacheSlingScriptingCoreImplScriptCacheImplInfo> 
     */
    public class func orgApacheSlingScriptingCoreImplScriptCacheImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, orgApacheSlingScriptingCacheSize: Int32? = nil, orgApacheSlingScriptingCacheAdditionalExtensions: [String]? = nil) -> RequestBuilder<OrgApacheSlingScriptingCoreImplScriptCacheImplInfo> {
        let path = "/system/console/configMgr/org.apache.sling.scripting.core.impl.ScriptCacheImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "org.apache.sling.scripting.cache.size": orgApacheSlingScriptingCacheSize?.encodeToJSON(),
            "org.apache.sling.scripting.cache.additional_extensions": orgApacheSlingScriptingCacheAdditionalExtensions
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheSlingScriptingCoreImplScriptCacheImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter logStacktraceOnclose: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheSlingScriptingCoreImplScriptingResourceResolverProvider(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, logStacktraceOnclose: Bool? = nil, completion: ((data: OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderInfo?, error: ErrorType?) -> Void)) {
        orgApacheSlingScriptingCoreImplScriptingResourceResolverProviderWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, logStacktraceOnclose: logStacktraceOnclose).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.scripting.core.impl.ScriptingResourceResolverProviderImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "log.stacktrace.onclose" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter logStacktraceOnclose: (query)  (optional)

     - returns: RequestBuilder<OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderInfo> 
     */
    public class func orgApacheSlingScriptingCoreImplScriptingResourceResolverProviderWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, logStacktraceOnclose: Bool? = nil) -> RequestBuilder<OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderInfo> {
        let path = "/system/console/configMgr/org.apache.sling.scripting.core.impl.ScriptingResourceResolverProviderImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "log.stacktrace.onclose": logStacktraceOnclose
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter javaClassdebuginfo: (query)  (optional)
     - parameter javaJavaEncoding: (query)  (optional)
     - parameter javaCompilerSourceVM: (query)  (optional)
     - parameter javaCompilerTargetVM: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheSlingScriptingJavaImplJavaScriptEngineFactory(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, javaClassdebuginfo: Bool? = nil, javaJavaEncoding: String? = nil, javaCompilerSourceVM: String? = nil, javaCompilerTargetVM: String? = nil, completion: ((data: OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryInfo?, error: ErrorType?) -> Void)) {
        orgApacheSlingScriptingJavaImplJavaScriptEngineFactoryWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, javaClassdebuginfo: javaClassdebuginfo, javaJavaEncoding: javaJavaEncoding, javaCompilerSourceVM: javaCompilerSourceVM, javaCompilerTargetVM: javaCompilerTargetVM).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.scripting.java.impl.JavaScriptEngineFactory     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "service_location" : "service_location",
  "bundle_location" : "bundle_location",
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "java.classdebuginfo" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "java.compilerSourceVM" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "java.compilerTargetVM" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "java.javaEncoding" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter javaClassdebuginfo: (query)  (optional)
     - parameter javaJavaEncoding: (query)  (optional)
     - parameter javaCompilerSourceVM: (query)  (optional)
     - parameter javaCompilerTargetVM: (query)  (optional)

     - returns: RequestBuilder<OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryInfo> 
     */
    public class func orgApacheSlingScriptingJavaImplJavaScriptEngineFactoryWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, javaClassdebuginfo: Bool? = nil, javaJavaEncoding: String? = nil, javaCompilerSourceVM: String? = nil, javaCompilerTargetVM: String? = nil) -> RequestBuilder<OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryInfo> {
        let path = "/system/console/configMgr/org.apache.sling.scripting.java.impl.JavaScriptEngineFactory"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "java.classdebuginfo": javaClassdebuginfo,
            "java.javaEncoding": javaJavaEncoding,
            "java.compilerSourceVM": javaCompilerSourceVM,
            "java.compilerTargetVM": javaCompilerTargetVM
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter orgApacheSlingScriptingJavascriptRhinoOptLevel: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFa(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, orgApacheSlingScriptingJavascriptRhinoOptLevel: Int32? = nil, completion: ((data: OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaInfo?, error: ErrorType?) -> Void)) {
        orgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, orgApacheSlingScriptingJavascriptRhinoOptLevel: orgApacheSlingScriptingJavascriptRhinoOptLevel).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.scripting.javascript.internal.RhinoJavaScriptEngineFactory     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "org.apache.sling.scripting.javascript.rhino.optLevel" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter orgApacheSlingScriptingJavascriptRhinoOptLevel: (query)  (optional)

     - returns: RequestBuilder<OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaInfo> 
     */
    public class func orgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, orgApacheSlingScriptingJavascriptRhinoOptLevel: Int32? = nil) -> RequestBuilder<OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaInfo> {
        let path = "/system/console/configMgr/org.apache.sling.scripting.javascript.internal.RhinoJavaScriptEngineFactory"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "org.apache.sling.scripting.javascript.rhino.optLevel": orgApacheSlingScriptingJavascriptRhinoOptLevel?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter jasperCompilerTargetVM: (query)  (optional)
     - parameter jasperCompilerSourceVM: (query)  (optional)
     - parameter jasperClassdebuginfo: (query)  (optional)
     - parameter jasperEnablePooling: (query)  (optional)
     - parameter jasperIeClassId: (query)  (optional)
     - parameter jasperGenStringAsCharArray: (query)  (optional)
     - parameter jasperKeepgenerated: (query)  (optional)
     - parameter jasperMappedfile: (query)  (optional)
     - parameter jasperTrimSpaces: (query)  (optional)
     - parameter jasperDisplaySourceFragments: (query)  (optional)
     - parameter defaultIsSession: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheSlingScriptingJspJspScriptEngineFactory(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, jasperCompilerTargetVM: String? = nil, jasperCompilerSourceVM: String? = nil, jasperClassdebuginfo: Bool? = nil, jasperEnablePooling: Bool? = nil, jasperIeClassId: String? = nil, jasperGenStringAsCharArray: Bool? = nil, jasperKeepgenerated: Bool? = nil, jasperMappedfile: Bool? = nil, jasperTrimSpaces: Bool? = nil, jasperDisplaySourceFragments: Bool? = nil, defaultIsSession: Bool? = nil, completion: ((data: OrgApacheSlingScriptingJspJspScriptEngineFactoryInfo?, error: ErrorType?) -> Void)) {
        orgApacheSlingScriptingJspJspScriptEngineFactoryWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, jasperCompilerTargetVM: jasperCompilerTargetVM, jasperCompilerSourceVM: jasperCompilerSourceVM, jasperClassdebuginfo: jasperClassdebuginfo, jasperEnablePooling: jasperEnablePooling, jasperIeClassId: jasperIeClassId, jasperGenStringAsCharArray: jasperGenStringAsCharArray, jasperKeepgenerated: jasperKeepgenerated, jasperMappedfile: jasperMappedfile, jasperTrimSpaces: jasperTrimSpaces, jasperDisplaySourceFragments: jasperDisplaySourceFragments, defaultIsSession: defaultIsSession).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.scripting.jsp.JspScriptEngineFactory     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "service_location" : "service_location",
  "bundle_location" : "bundle_location",
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "jasper.enablePooling" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "jasper.genStringAsCharArray" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "jasper.ieClassId" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "jasper.keepgenerated" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "jasper.compilerSourceVM" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "jasper.displaySourceFragments" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "jasper.mappedfile" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "jasper.trimSpaces" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "jasper.compilerTargetVM" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "default.is.session" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "jasper.classdebuginfo" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter jasperCompilerTargetVM: (query)  (optional)
     - parameter jasperCompilerSourceVM: (query)  (optional)
     - parameter jasperClassdebuginfo: (query)  (optional)
     - parameter jasperEnablePooling: (query)  (optional)
     - parameter jasperIeClassId: (query)  (optional)
     - parameter jasperGenStringAsCharArray: (query)  (optional)
     - parameter jasperKeepgenerated: (query)  (optional)
     - parameter jasperMappedfile: (query)  (optional)
     - parameter jasperTrimSpaces: (query)  (optional)
     - parameter jasperDisplaySourceFragments: (query)  (optional)
     - parameter defaultIsSession: (query)  (optional)

     - returns: RequestBuilder<OrgApacheSlingScriptingJspJspScriptEngineFactoryInfo> 
     */
    public class func orgApacheSlingScriptingJspJspScriptEngineFactoryWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, jasperCompilerTargetVM: String? = nil, jasperCompilerSourceVM: String? = nil, jasperClassdebuginfo: Bool? = nil, jasperEnablePooling: Bool? = nil, jasperIeClassId: String? = nil, jasperGenStringAsCharArray: Bool? = nil, jasperKeepgenerated: Bool? = nil, jasperMappedfile: Bool? = nil, jasperTrimSpaces: Bool? = nil, jasperDisplaySourceFragments: Bool? = nil, defaultIsSession: Bool? = nil) -> RequestBuilder<OrgApacheSlingScriptingJspJspScriptEngineFactoryInfo> {
        let path = "/system/console/configMgr/org.apache.sling.scripting.jsp.JspScriptEngineFactory"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "jasper.compilerTargetVM": jasperCompilerTargetVM,
            "jasper.compilerSourceVM": jasperCompilerSourceVM,
            "jasper.classdebuginfo": jasperClassdebuginfo,
            "jasper.enablePooling": jasperEnablePooling,
            "jasper.ieClassId": jasperIeClassId,
            "jasper.genStringAsCharArray": jasperGenStringAsCharArray,
            "jasper.keepgenerated": jasperKeepgenerated,
            "jasper.mappedfile": jasperMappedfile,
            "jasper.trimSpaces": jasperTrimSpaces,
            "jasper.displaySourceFragments": jasperDisplaySourceFragments,
            "default.is.session": defaultIsSession
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheSlingScriptingJspJspScriptEngineFactoryInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter orgApacheSlingScriptingSightlyJsBindings: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProv(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, orgApacheSlingScriptingSightlyJsBindings: [String]? = nil, completion: ((data: OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvInfo?, error: ErrorType?) -> Void)) {
        orgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, orgApacheSlingScriptingSightlyJsBindings: orgApacheSlingScriptingSightlyJsBindings).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.scripting.sightly.js.impl.jsapi.SlyBindingsValuesProvider     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "service_location" : "service_location",
  "bundle_location" : "bundle_location",
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "org.apache.sling.scripting.sightly.js.bindings" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter orgApacheSlingScriptingSightlyJsBindings: (query)  (optional)

     - returns: RequestBuilder<OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvInfo> 
     */
    public class func orgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, orgApacheSlingScriptingSightlyJsBindings: [String]? = nil) -> RequestBuilder<OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvInfo> {
        let path = "/system/console/configMgr/org.apache.sling.scripting.sightly.js.impl.jsapi.SlyBindingsValuesProvider"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "org.apache.sling.scripting.sightly.js.bindings": orgApacheSlingScriptingSightlyJsBindings
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter slingContentDispositionPaths: (query)  (optional)
     - parameter slingContentDispositionExcludedPaths: (query)  (optional)
     - parameter slingContentDispositionAllPaths: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheSlingSecurityImplContentDispositionFilter(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, slingContentDispositionPaths: [String]? = nil, slingContentDispositionExcludedPaths: [String]? = nil, slingContentDispositionAllPaths: Bool? = nil, completion: ((data: OrgApacheSlingSecurityImplContentDispositionFilterInfo?, error: ErrorType?) -> Void)) {
        orgApacheSlingSecurityImplContentDispositionFilterWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, slingContentDispositionPaths: slingContentDispositionPaths, slingContentDispositionExcludedPaths: slingContentDispositionExcludedPaths, slingContentDispositionAllPaths: slingContentDispositionAllPaths).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.security.impl.ContentDispositionFilter     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "service_location" : "service_location",
  "bundle_location" : "bundle_location",
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "sling.content.disposition.paths" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "sling.content.disposition.excluded.paths" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "sling.content.disposition.all.paths" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter slingContentDispositionPaths: (query)  (optional)
     - parameter slingContentDispositionExcludedPaths: (query)  (optional)
     - parameter slingContentDispositionAllPaths: (query)  (optional)

     - returns: RequestBuilder<OrgApacheSlingSecurityImplContentDispositionFilterInfo> 
     */
    public class func orgApacheSlingSecurityImplContentDispositionFilterWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, slingContentDispositionPaths: [String]? = nil, slingContentDispositionExcludedPaths: [String]? = nil, slingContentDispositionAllPaths: Bool? = nil) -> RequestBuilder<OrgApacheSlingSecurityImplContentDispositionFilterInfo> {
        let path = "/system/console/configMgr/org.apache.sling.security.impl.ContentDispositionFilter"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "sling.content.disposition.paths": slingContentDispositionPaths,
            "sling.content.disposition.excluded.paths": slingContentDispositionExcludedPaths,
            "sling.content.disposition.all.paths": slingContentDispositionAllPaths
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheSlingSecurityImplContentDispositionFilterInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter allowEmpty: (query)  (optional)
     - parameter allowHosts: (query)  (optional)
     - parameter allowHostsRegexp: (query)  (optional)
     - parameter filterMethods: (query)  (optional)
     - parameter excludeAgentsRegexp: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheSlingSecurityImplReferrerFilter(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, allowEmpty: Bool? = nil, allowHosts: [String]? = nil, allowHostsRegexp: [String]? = nil, filterMethods: [String]? = nil, excludeAgentsRegexp: [String]? = nil, completion: ((data: OrgApacheSlingSecurityImplReferrerFilterInfo?, error: ErrorType?) -> Void)) {
        orgApacheSlingSecurityImplReferrerFilterWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, allowEmpty: allowEmpty, allowHosts: allowHosts, allowHostsRegexp: allowHostsRegexp, filterMethods: filterMethods, excludeAgentsRegexp: excludeAgentsRegexp).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.security.impl.ReferrerFilter     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "service_location" : "service_location",
  "bundle_location" : "bundle_location",
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "allow.hosts" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "filter.methods" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "exclude.agents.regexp" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "allow.hosts.regexp" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "allow.empty" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter allowEmpty: (query)  (optional)
     - parameter allowHosts: (query)  (optional)
     - parameter allowHostsRegexp: (query)  (optional)
     - parameter filterMethods: (query)  (optional)
     - parameter excludeAgentsRegexp: (query)  (optional)

     - returns: RequestBuilder<OrgApacheSlingSecurityImplReferrerFilterInfo> 
     */
    public class func orgApacheSlingSecurityImplReferrerFilterWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, allowEmpty: Bool? = nil, allowHosts: [String]? = nil, allowHostsRegexp: [String]? = nil, filterMethods: [String]? = nil, excludeAgentsRegexp: [String]? = nil) -> RequestBuilder<OrgApacheSlingSecurityImplReferrerFilterInfo> {
        let path = "/system/console/configMgr/org.apache.sling.security.impl.ReferrerFilter"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "allow.empty": allowEmpty,
            "allow.hosts": allowHosts,
            "allow.hosts.regexp": allowHostsRegexp,
            "filter.methods": filterMethods,
            "exclude.agents.regexp": excludeAgentsRegexp
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheSlingSecurityImplReferrerFilterInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter userMapping: (query)  (optional)
     - parameter userDefault: (query)  (optional)
     - parameter userEnableDefaultMapping: (query)  (optional)
     - parameter requireValidation: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheSlingServiceusermappingImplServiceUserMapperImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, userMapping: [String]? = nil, userDefault: String? = nil, userEnableDefaultMapping: Bool? = nil, requireValidation: Bool? = nil, completion: ((data: OrgApacheSlingServiceusermappingImplServiceUserMapperImplInfo?, error: ErrorType?) -> Void)) {
        orgApacheSlingServiceusermappingImplServiceUserMapperImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, userMapping: userMapping, userDefault: userDefault, userEnableDefaultMapping: userEnableDefaultMapping, requireValidation: requireValidation).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.serviceusermapping.impl.ServiceUserMapperImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "service_location" : "service_location",
  "bundle_location" : "bundle_location",
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "user.default" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "user.mapping" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "user.enable.default.mapping" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "require.validation" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter userMapping: (query)  (optional)
     - parameter userDefault: (query)  (optional)
     - parameter userEnableDefaultMapping: (query)  (optional)
     - parameter requireValidation: (query)  (optional)

     - returns: RequestBuilder<OrgApacheSlingServiceusermappingImplServiceUserMapperImplInfo> 
     */
    public class func orgApacheSlingServiceusermappingImplServiceUserMapperImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, userMapping: [String]? = nil, userDefault: String? = nil, userEnableDefaultMapping: Bool? = nil, requireValidation: Bool? = nil) -> RequestBuilder<OrgApacheSlingServiceusermappingImplServiceUserMapperImplInfo> {
        let path = "/system/console/configMgr/org.apache.sling.serviceusermapping.impl.ServiceUserMapperImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "user.mapping": userMapping,
            "user.default": userDefault,
            "user.enable.default.mapping": userEnableDefaultMapping,
            "require.validation": requireValidation
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheSlingServiceusermappingImplServiceUserMapperImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter userMapping: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheSlingServiceusermappingImplServiceUserMapperImplAmended(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int32? = nil, userMapping: [String]? = nil, completion: ((data: OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedInfo?, error: ErrorType?) -> Void)) {
        orgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, serviceRanking: serviceRanking, userMapping: userMapping).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.serviceusermapping.impl.ServiceUserMapperImpl.amended     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "user.mapping" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "service.ranking" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter userMapping: (query)  (optional)

     - returns: RequestBuilder<OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedInfo> 
     */
    public class func orgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, serviceRanking: Int32? = nil, userMapping: [String]? = nil) -> RequestBuilder<OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedInfo> {
        let path = "/system/console/configMgr/org.apache.sling.serviceusermapping.impl.ServiceUserMapperImpl.amended"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "service.ranking": serviceRanking?.encodeToJSON(),
            "user.mapping": userMapping
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter aliases: (query)  (optional)
     - parameter index: (query)  (optional)
     - parameter indexFiles: (query)  (optional)
     - parameter enableHtml: (query)  (optional)
     - parameter enableJson: (query)  (optional)
     - parameter enableTxt: (query)  (optional)
     - parameter enableXml: (query)  (optional)
     - parameter jsonMaximumresults: (query)  (optional)
     - parameter ecmaSuport: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheSlingServletsGetDefaultGetServlet(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, aliases: [String]? = nil, index: Bool? = nil, indexFiles: [String]? = nil, enableHtml: Bool? = nil, enableJson: Bool? = nil, enableTxt: Bool? = nil, enableXml: Bool? = nil, jsonMaximumresults: Int32? = nil, ecmaSuport: Bool? = nil, completion: ((data: OrgApacheSlingServletsGetDefaultGetServletInfo?, error: ErrorType?) -> Void)) {
        orgApacheSlingServletsGetDefaultGetServletWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, aliases: aliases, index: index, indexFiles: indexFiles, enableHtml: enableHtml, enableJson: enableJson, enableTxt: enableTxt, enableXml: enableXml, jsonMaximumresults: jsonMaximumresults, ecmaSuport: ecmaSuport).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.servlets.get.DefaultGetServlet     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "service_location" : "service_location",
  "bundle_location" : "bundle_location",
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "ecmaSuport" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "enable.txt" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "aliases" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "enable.html" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "index" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "json.maximumresults" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "enable.xml" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "index.files" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "enable.json" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter aliases: (query)  (optional)
     - parameter index: (query)  (optional)
     - parameter indexFiles: (query)  (optional)
     - parameter enableHtml: (query)  (optional)
     - parameter enableJson: (query)  (optional)
     - parameter enableTxt: (query)  (optional)
     - parameter enableXml: (query)  (optional)
     - parameter jsonMaximumresults: (query)  (optional)
     - parameter ecmaSuport: (query)  (optional)

     - returns: RequestBuilder<OrgApacheSlingServletsGetDefaultGetServletInfo> 
     */
    public class func orgApacheSlingServletsGetDefaultGetServletWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, aliases: [String]? = nil, index: Bool? = nil, indexFiles: [String]? = nil, enableHtml: Bool? = nil, enableJson: Bool? = nil, enableTxt: Bool? = nil, enableXml: Bool? = nil, jsonMaximumresults: Int32? = nil, ecmaSuport: Bool? = nil) -> RequestBuilder<OrgApacheSlingServletsGetDefaultGetServletInfo> {
        let path = "/system/console/configMgr/org.apache.sling.servlets.get.DefaultGetServlet"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "aliases": aliases,
            "index": index,
            "index.files": indexFiles,
            "enable.html": enableHtml,
            "enable.json": enableJson,
            "enable.txt": enableTxt,
            "enable.xml": enableXml,
            "json.maximumresults": jsonMaximumresults?.encodeToJSON(),
            "ecmaSuport": ecmaSuport
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheSlingServletsGetDefaultGetServletInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter slingServletSelectors: (query)  (optional)
     - parameter ecmaSuport: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheSlingServletsGetImplVersionVersionInfoServlet(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, slingServletSelectors: [String]? = nil, ecmaSuport: Bool? = nil, completion: ((data: OrgApacheSlingServletsGetImplVersionVersionInfoServletInfo?, error: ErrorType?) -> Void)) {
        orgApacheSlingServletsGetImplVersionVersionInfoServletWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, slingServletSelectors: slingServletSelectors, ecmaSuport: ecmaSuport).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.servlets.get.impl.version.VersionInfoServlet     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "ecmaSuport" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "sling.servlet.selectors" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter slingServletSelectors: (query)  (optional)
     - parameter ecmaSuport: (query)  (optional)

     - returns: RequestBuilder<OrgApacheSlingServletsGetImplVersionVersionInfoServletInfo> 
     */
    public class func orgApacheSlingServletsGetImplVersionVersionInfoServletWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, slingServletSelectors: [String]? = nil, ecmaSuport: Bool? = nil) -> RequestBuilder<OrgApacheSlingServletsGetImplVersionVersionInfoServletInfo> {
        let path = "/system/console/configMgr/org.apache.sling.servlets.get.impl.version.VersionInfoServlet"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "sling.servlet.selectors": slingServletSelectors,
            "ecmaSuport": ecmaSuport
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheSlingServletsGetImplVersionVersionInfoServletInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter schedulerExpression: (query)  (optional)
     - parameter schedulerConcurrent: (query)  (optional)
     - parameter chunkCleanupAge: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheSlingServletsPostImplHelperChunkCleanUpTask(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, schedulerExpression: String? = nil, schedulerConcurrent: Bool? = nil, chunkCleanupAge: Int32? = nil, completion: ((data: OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskInfo?, error: ErrorType?) -> Void)) {
        orgApacheSlingServletsPostImplHelperChunkCleanUpTaskWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, schedulerExpression: schedulerExpression, schedulerConcurrent: schedulerConcurrent, chunkCleanupAge: chunkCleanupAge).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.servlets.post.impl.helper.ChunkCleanUpTask     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "scheduler.concurrent" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "scheduler.expression" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "chunk.cleanup.age" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter schedulerExpression: (query)  (optional)
     - parameter schedulerConcurrent: (query)  (optional)
     - parameter chunkCleanupAge: (query)  (optional)

     - returns: RequestBuilder<OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskInfo> 
     */
    public class func orgApacheSlingServletsPostImplHelperChunkCleanUpTaskWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, schedulerExpression: String? = nil, schedulerConcurrent: Bool? = nil, chunkCleanupAge: Int32? = nil) -> RequestBuilder<OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskInfo> {
        let path = "/system/console/configMgr/org.apache.sling.servlets.post.impl.helper.ChunkCleanUpTask"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "scheduler.expression": schedulerExpression,
            "scheduler.concurrent": schedulerConcurrent,
            "chunk.cleanup.age": chunkCleanupAge?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter servletPostDateFormats: (query)  (optional)
     - parameter servletPostNodeNameHints: (query)  (optional)
     - parameter servletPostNodeNameMaxLength: (query)  (optional)
     - parameter servletPostCheckinNewVersionableNodes: (query)  (optional)
     - parameter servletPostAutoCheckout: (query)  (optional)
     - parameter servletPostAutoCheckin: (query)  (optional)
     - parameter servletPostIgnorePattern: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheSlingServletsPostImplSlingPostServlet(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, servletPostDateFormats: [String]? = nil, servletPostNodeNameHints: [String]? = nil, servletPostNodeNameMaxLength: Int32? = nil, servletPostCheckinNewVersionableNodes: Bool? = nil, servletPostAutoCheckout: Bool? = nil, servletPostAutoCheckin: Bool? = nil, servletPostIgnorePattern: String? = nil, completion: ((data: OrgApacheSlingServletsPostImplSlingPostServletInfo?, error: ErrorType?) -> Void)) {
        orgApacheSlingServletsPostImplSlingPostServletWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, servletPostDateFormats: servletPostDateFormats, servletPostNodeNameHints: servletPostNodeNameHints, servletPostNodeNameMaxLength: servletPostNodeNameMaxLength, servletPostCheckinNewVersionableNodes: servletPostCheckinNewVersionableNodes, servletPostAutoCheckout: servletPostAutoCheckout, servletPostAutoCheckin: servletPostAutoCheckin, servletPostIgnorePattern: servletPostIgnorePattern).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.servlets.post.impl.SlingPostServlet     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "servlet.post.dateFormats" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "servlet.post.checkinNewVersionableNodes" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "servlet.post.ignorePattern" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "servlet.post.autoCheckout" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "servlet.post.nodeNameHints" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "servlet.post.nodeNameMaxLength" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "servlet.post.autoCheckin" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter servletPostDateFormats: (query)  (optional)
     - parameter servletPostNodeNameHints: (query)  (optional)
     - parameter servletPostNodeNameMaxLength: (query)  (optional)
     - parameter servletPostCheckinNewVersionableNodes: (query)  (optional)
     - parameter servletPostAutoCheckout: (query)  (optional)
     - parameter servletPostAutoCheckin: (query)  (optional)
     - parameter servletPostIgnorePattern: (query)  (optional)

     - returns: RequestBuilder<OrgApacheSlingServletsPostImplSlingPostServletInfo> 
     */
    public class func orgApacheSlingServletsPostImplSlingPostServletWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, servletPostDateFormats: [String]? = nil, servletPostNodeNameHints: [String]? = nil, servletPostNodeNameMaxLength: Int32? = nil, servletPostCheckinNewVersionableNodes: Bool? = nil, servletPostAutoCheckout: Bool? = nil, servletPostAutoCheckin: Bool? = nil, servletPostIgnorePattern: String? = nil) -> RequestBuilder<OrgApacheSlingServletsPostImplSlingPostServletInfo> {
        let path = "/system/console/configMgr/org.apache.sling.servlets.post.impl.SlingPostServlet"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "servlet.post.dateFormats": servletPostDateFormats,
            "servlet.post.nodeNameHints": servletPostNodeNameHints,
            "servlet.post.nodeNameMaxLength": servletPostNodeNameMaxLength?.encodeToJSON(),
            "servlet.post.checkinNewVersionableNodes": servletPostCheckinNewVersionableNodes,
            "servlet.post.autoCheckout": servletPostAutoCheckout,
            "servlet.post.autoCheckin": servletPostAutoCheckin,
            "servlet.post.ignorePattern": servletPostIgnorePattern
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheSlingServletsPostImplSlingPostServletInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter servletresolverServletRoot: (query)  (optional)
     - parameter servletresolverCacheSize: (query)  (optional)
     - parameter servletresolverPaths: (query)  (optional)
     - parameter servletresolverDefaultExtensions: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheSlingServletsResolverSlingServletResolver(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, servletresolverServletRoot: String? = nil, servletresolverCacheSize: Int32? = nil, servletresolverPaths: [String]? = nil, servletresolverDefaultExtensions: [String]? = nil, completion: ((data: OrgApacheSlingServletsResolverSlingServletResolverInfo?, error: ErrorType?) -> Void)) {
        orgApacheSlingServletsResolverSlingServletResolverWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, servletresolverServletRoot: servletresolverServletRoot, servletresolverCacheSize: servletresolverCacheSize, servletresolverPaths: servletresolverPaths, servletresolverDefaultExtensions: servletresolverDefaultExtensions).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.servlets.resolver.SlingServletResolver     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "service_location" : "service_location",
  "bundle_location" : "bundle_location",
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "servletresolver.defaultExtensions" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "servletresolver.cacheSize" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "servletresolver.paths" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "servletresolver.servletRoot" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter servletresolverServletRoot: (query)  (optional)
     - parameter servletresolverCacheSize: (query)  (optional)
     - parameter servletresolverPaths: (query)  (optional)
     - parameter servletresolverDefaultExtensions: (query)  (optional)

     - returns: RequestBuilder<OrgApacheSlingServletsResolverSlingServletResolverInfo> 
     */
    public class func orgApacheSlingServletsResolverSlingServletResolverWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, servletresolverServletRoot: String? = nil, servletresolverCacheSize: Int32? = nil, servletresolverPaths: [String]? = nil, servletresolverDefaultExtensions: [String]? = nil) -> RequestBuilder<OrgApacheSlingServletsResolverSlingServletResolverInfo> {
        let path = "/system/console/configMgr/org.apache.sling.servlets.resolver.SlingServletResolver"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "servletresolver.servletRoot": servletresolverServletRoot,
            "servletresolver.cacheSize": servletresolverCacheSize?.encodeToJSON(),
            "servletresolver.paths": servletresolverPaths,
            "servletresolver.defaultExtensions": servletresolverDefaultExtensions
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheSlingServletsResolverSlingServletResolverInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter slingName: (query)  (optional)
     - parameter slingDescription: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheSlingSettingsImplSlingSettingsServiceImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, slingName: String? = nil, slingDescription: String? = nil, completion: ((data: OrgApacheSlingSettingsImplSlingSettingsServiceImplInfo?, error: ErrorType?) -> Void)) {
        orgApacheSlingSettingsImplSlingSettingsServiceImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, slingName: slingName, slingDescription: slingDescription).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.settings.impl.SlingSettingsServiceImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "sling.name" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "sling.description" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter slingName: (query)  (optional)
     - parameter slingDescription: (query)  (optional)

     - returns: RequestBuilder<OrgApacheSlingSettingsImplSlingSettingsServiceImplInfo> 
     */
    public class func orgApacheSlingSettingsImplSlingSettingsServiceImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, slingName: String? = nil, slingDescription: String? = nil) -> RequestBuilder<OrgApacheSlingSettingsImplSlingSettingsServiceImplInfo> {
        let path = "/system/console/configMgr/org.apache.sling.settings.impl.SlingSettingsServiceImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "sling.name": slingName,
            "sling.description": slingDescription
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheSlingSettingsImplSlingSettingsServiceImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter activeByDefault: (query)  (optional)
     - parameter defaultMessage: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheSlingStartupfilterImplStartupFilterImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, activeByDefault: Bool? = nil, defaultMessage: String? = nil, completion: ((data: OrgApacheSlingStartupfilterImplStartupFilterImplInfo?, error: ErrorType?) -> Void)) {
        orgApacheSlingStartupfilterImplStartupFilterImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, activeByDefault: activeByDefault, defaultMessage: defaultMessage).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.startupfilter.impl.StartupFilterImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "default.message" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "active.by.default" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter activeByDefault: (query)  (optional)
     - parameter defaultMessage: (query)  (optional)

     - returns: RequestBuilder<OrgApacheSlingStartupfilterImplStartupFilterImplInfo> 
     */
    public class func orgApacheSlingStartupfilterImplStartupFilterImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, activeByDefault: Bool? = nil, defaultMessage: String? = nil) -> RequestBuilder<OrgApacheSlingStartupfilterImplStartupFilterImplInfo> {
        let path = "/system/console/configMgr/org.apache.sling.startupfilter.impl.StartupFilterImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "active.by.default": activeByDefault,
            "default.message": defaultMessage
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheSlingStartupfilterImplStartupFilterImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter tenantRoot: (query)  (optional)
     - parameter tenantPathMatcher: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheSlingTenantInternalTenantProviderImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, tenantRoot: String? = nil, tenantPathMatcher: [String]? = nil, completion: ((data: OrgApacheSlingTenantInternalTenantProviderImplInfo?, error: ErrorType?) -> Void)) {
        orgApacheSlingTenantInternalTenantProviderImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, tenantRoot: tenantRoot, tenantPathMatcher: tenantPathMatcher).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.tenant.internal.TenantProviderImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "tenant.root" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    },
    "tenant.path.matcher" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter tenantRoot: (query)  (optional)
     - parameter tenantPathMatcher: (query)  (optional)

     - returns: RequestBuilder<OrgApacheSlingTenantInternalTenantProviderImplInfo> 
     */
    public class func orgApacheSlingTenantInternalTenantProviderImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, tenantRoot: String? = nil, tenantPathMatcher: [String]? = nil) -> RequestBuilder<OrgApacheSlingTenantInternalTenantProviderImplInfo> {
        let path = "/system/console/configMgr/org.apache.sling.tenant.internal.TenantProviderImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "tenant.root": tenantRoot,
            "tenant.path.matcher": tenantPathMatcher
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheSlingTenantInternalTenantProviderImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter tracerSets: (query)  (optional)
     - parameter enabled: (query)  (optional)
     - parameter servletEnabled: (query)  (optional)
     - parameter recordingCacheSizeInMB: (query)  (optional)
     - parameter recordingCacheDurationInSecs: (query)  (optional)
     - parameter recordingCompressionEnabled: (query)  (optional)
     - parameter gzipResponse: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheSlingTracerInternalLogTracer(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, tracerSets: [String]? = nil, enabled: Bool? = nil, servletEnabled: Bool? = nil, recordingCacheSizeInMB: Int32? = nil, recordingCacheDurationInSecs: Int32? = nil, recordingCompressionEnabled: Bool? = nil, gzipResponse: Bool? = nil, completion: ((data: OrgApacheSlingTracerInternalLogTracerInfo?, error: ErrorType?) -> Void)) {
        orgApacheSlingTracerInternalLogTracerWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, tracerSets: tracerSets, enabled: enabled, servletEnabled: servletEnabled, recordingCacheSizeInMB: recordingCacheSizeInMB, recordingCacheDurationInSecs: recordingCacheDurationInSecs, recordingCompressionEnabled: recordingCompressionEnabled, gzipResponse: gzipResponse).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.tracer.internal.LogTracer     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "recordingCompressionEnabled" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "gzipResponse" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "servletEnabled" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    },
    "recordingCacheSizeInMB" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "tracerSets" : {
      "is_set" : true,
      "values" : [ "values", "values" ],
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0
    },
    "recordingCacheDurationInSecs" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 6,
      "value" : 1
    },
    "enabled" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : true
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter tracerSets: (query)  (optional)
     - parameter enabled: (query)  (optional)
     - parameter servletEnabled: (query)  (optional)
     - parameter recordingCacheSizeInMB: (query)  (optional)
     - parameter recordingCacheDurationInSecs: (query)  (optional)
     - parameter recordingCompressionEnabled: (query)  (optional)
     - parameter gzipResponse: (query)  (optional)

     - returns: RequestBuilder<OrgApacheSlingTracerInternalLogTracerInfo> 
     */
    public class func orgApacheSlingTracerInternalLogTracerWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, tracerSets: [String]? = nil, enabled: Bool? = nil, servletEnabled: Bool? = nil, recordingCacheSizeInMB: Int32? = nil, recordingCacheDurationInSecs: Int32? = nil, recordingCompressionEnabled: Bool? = nil, gzipResponse: Bool? = nil) -> RequestBuilder<OrgApacheSlingTracerInternalLogTracerInfo> {
        let path = "/system/console/configMgr/org.apache.sling.tracer.internal.LogTracer"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "tracerSets": tracerSets,
            "enabled": enabled,
            "servletEnabled": servletEnabled,
            "recordingCacheSizeInMB": recordingCacheSizeInMB?.encodeToJSON(),
            "recordingCacheDurationInSecs": recordingCacheDurationInSecs?.encodeToJSON(),
            "recordingCompressionEnabled": recordingCompressionEnabled,
            "gzipResponse": gzipResponse
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheSlingTracerInternalLogTracerInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter policyPath: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func orgApacheSlingXssImplXSSFilterImpl(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, policyPath: String? = nil, completion: ((data: OrgApacheSlingXssImplXSSFilterImplInfo?, error: ErrorType?) -> Void)) {
        orgApacheSlingXssImplXSSFilterImplWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, propertylist: propertylist, policyPath: policyPath).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/org.apache.sling.xss.impl.XSSFilterImpl     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "service_location" : "service_location",
  "bundle_location" : "bundle_location",
  "description" : "description",
  "pid" : "pid",
  "title" : "title",
  "properties" : {
    "policyPath" : {
      "is_set" : true,
      "name" : "name",
      "description" : "description",
      "optional" : true,
      "type" : 0,
      "value" : "value"
    }
  }
}}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter policyPath: (query)  (optional)

     - returns: RequestBuilder<OrgApacheSlingXssImplXSSFilterImplInfo> 
     */
    public class func orgApacheSlingXssImplXSSFilterImplWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, propertylist: [String]? = nil, policyPath: String? = nil) -> RequestBuilder<OrgApacheSlingXssImplXSSFilterImplInfo> {
        let path = "/system/console/configMgr/org.apache.sling.xss.impl.XSSFilterImpl"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "propertylist": propertylist,
            "policyPath": policyPath
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<OrgApacheSlingXssImplXSSFilterImplInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

}
