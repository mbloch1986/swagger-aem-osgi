/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerProperties {
  #[serde(rename = "dam.showexpired")]
  dam_showexpired: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "dam.showhidden")]
  dam_showhidden: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "tagTitleSearch")]
  tag_title_search: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "guessTotal")]
  guess_total: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "dam.expiryProperty")]
  dam_expiry_property: Option<::models::ConfigNodePropertyString>
}

impl ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerProperties {
  pub fn new() -> ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerProperties {
    ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerProperties {
      dam_showexpired: None,
      dam_showhidden: None,
      tag_title_search: None,
      guess_total: None,
      dam_expiry_property: None
    }
  }

  pub fn set_dam_showexpired(&mut self, dam_showexpired: ::models::ConfigNodePropertyBoolean) {
    self.dam_showexpired = Some(dam_showexpired);
  }

  pub fn with_dam_showexpired(mut self, dam_showexpired: ::models::ConfigNodePropertyBoolean) -> ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerProperties {
    self.dam_showexpired = Some(dam_showexpired);
    self
  }

  pub fn dam_showexpired(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.dam_showexpired.as_ref()
  }

  pub fn reset_dam_showexpired(&mut self) {
    self.dam_showexpired = None;
  }

  pub fn set_dam_showhidden(&mut self, dam_showhidden: ::models::ConfigNodePropertyBoolean) {
    self.dam_showhidden = Some(dam_showhidden);
  }

  pub fn with_dam_showhidden(mut self, dam_showhidden: ::models::ConfigNodePropertyBoolean) -> ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerProperties {
    self.dam_showhidden = Some(dam_showhidden);
    self
  }

  pub fn dam_showhidden(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.dam_showhidden.as_ref()
  }

  pub fn reset_dam_showhidden(&mut self) {
    self.dam_showhidden = None;
  }

  pub fn set_tag_title_search(&mut self, tag_title_search: ::models::ConfigNodePropertyBoolean) {
    self.tag_title_search = Some(tag_title_search);
  }

  pub fn with_tag_title_search(mut self, tag_title_search: ::models::ConfigNodePropertyBoolean) -> ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerProperties {
    self.tag_title_search = Some(tag_title_search);
    self
  }

  pub fn tag_title_search(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.tag_title_search.as_ref()
  }

  pub fn reset_tag_title_search(&mut self) {
    self.tag_title_search = None;
  }

  pub fn set_guess_total(&mut self, guess_total: ::models::ConfigNodePropertyString) {
    self.guess_total = Some(guess_total);
  }

  pub fn with_guess_total(mut self, guess_total: ::models::ConfigNodePropertyString) -> ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerProperties {
    self.guess_total = Some(guess_total);
    self
  }

  pub fn guess_total(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.guess_total.as_ref()
  }

  pub fn reset_guess_total(&mut self) {
    self.guess_total = None;
  }

  pub fn set_dam_expiry_property(&mut self, dam_expiry_property: ::models::ConfigNodePropertyString) {
    self.dam_expiry_property = Some(dam_expiry_property);
  }

  pub fn with_dam_expiry_property(mut self, dam_expiry_property: ::models::ConfigNodePropertyString) -> ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerProperties {
    self.dam_expiry_property = Some(dam_expiry_property);
    self
  }

  pub fn dam_expiry_property(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.dam_expiry_property.as_ref()
  }

  pub fn reset_dam_expiry_property(&mut self) {
    self.dam_expiry_property = None;
  }

}



