/*
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProperties : IEquatable<ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProperties>
    { 
        /// <summary>
        /// Gets or Sets ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProjectPath
        /// </summary>
        [DataMember(Name="com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.projectPath")]
        public ConfigNodePropertyArray ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProjectPath { get; set; }

        /// <summary>
        /// Gets or Sets ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplScheduleFrequency
        /// </summary>
        [DataMember(Name="com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.scheduleFrequency")]
        public ConfigNodePropertyString ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplScheduleFrequency { get; set; }

        /// <summary>
        /// Gets or Sets ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPingTimeout
        /// </summary>
        [DataMember(Name="com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.pingTimeout")]
        public ConfigNodePropertyInteger ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPingTimeout { get; set; }

        /// <summary>
        /// Gets or Sets ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplRecipients
        /// </summary>
        [DataMember(Name="com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.recipients")]
        public ConfigNodePropertyString ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplRecipients { get; set; }

        /// <summary>
        /// Gets or Sets ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpserver
        /// </summary>
        [DataMember(Name="com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.smtpserver")]
        public ConfigNodePropertyString ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpserver { get; set; }

        /// <summary>
        /// Gets or Sets ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpport
        /// </summary>
        [DataMember(Name="com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.smtpport")]
        public ConfigNodePropertyInteger ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpport { get; set; }

        /// <summary>
        /// Gets or Sets ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsetls
        /// </summary>
        [DataMember(Name="com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.usetls")]
        public ConfigNodePropertyBoolean ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsetls { get; set; }

        /// <summary>
        /// Gets or Sets ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsername
        /// </summary>
        [DataMember(Name="com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.username")]
        public ConfigNodePropertyString ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsername { get; set; }

        /// <summary>
        /// Gets or Sets ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPassword
        /// </summary>
        [DataMember(Name="com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.password")]
        public ConfigNodePropertyString ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPassword { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProperties {\n");
            sb.Append("  ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProjectPath: ").Append(ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProjectPath).Append("\n");
            sb.Append("  ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplScheduleFrequency: ").Append(ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplScheduleFrequency).Append("\n");
            sb.Append("  ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPingTimeout: ").Append(ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPingTimeout).Append("\n");
            sb.Append("  ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplRecipients: ").Append(ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplRecipients).Append("\n");
            sb.Append("  ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpserver: ").Append(ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpserver).Append("\n");
            sb.Append("  ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpport: ").Append(ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpport).Append("\n");
            sb.Append("  ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsetls: ").Append(ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsetls).Append("\n");
            sb.Append("  ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsername: ").Append(ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsername).Append("\n");
            sb.Append("  ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPassword: ").Append(ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPassword).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProperties)obj);
        }

        /// <summary>
        /// Returns true if ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProperties instances are equal
        /// </summary>
        /// <param name="other">Instance of ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProperties other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProjectPath == other.ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProjectPath ||
                    ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProjectPath != null &&
                    ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProjectPath.Equals(other.ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProjectPath)
                ) && 
                (
                    ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplScheduleFrequency == other.ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplScheduleFrequency ||
                    ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplScheduleFrequency != null &&
                    ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplScheduleFrequency.Equals(other.ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplScheduleFrequency)
                ) && 
                (
                    ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPingTimeout == other.ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPingTimeout ||
                    ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPingTimeout != null &&
                    ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPingTimeout.Equals(other.ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPingTimeout)
                ) && 
                (
                    ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplRecipients == other.ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplRecipients ||
                    ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplRecipients != null &&
                    ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplRecipients.Equals(other.ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplRecipients)
                ) && 
                (
                    ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpserver == other.ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpserver ||
                    ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpserver != null &&
                    ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpserver.Equals(other.ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpserver)
                ) && 
                (
                    ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpport == other.ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpport ||
                    ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpport != null &&
                    ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpport.Equals(other.ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpport)
                ) && 
                (
                    ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsetls == other.ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsetls ||
                    ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsetls != null &&
                    ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsetls.Equals(other.ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsetls)
                ) && 
                (
                    ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsername == other.ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsername ||
                    ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsername != null &&
                    ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsername.Equals(other.ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsername)
                ) && 
                (
                    ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPassword == other.ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPassword ||
                    ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPassword != null &&
                    ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPassword.Equals(other.ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPassword)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProjectPath != null)
                    hashCode = hashCode * 59 + ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProjectPath.GetHashCode();
                    if (ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplScheduleFrequency != null)
                    hashCode = hashCode * 59 + ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplScheduleFrequency.GetHashCode();
                    if (ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPingTimeout != null)
                    hashCode = hashCode * 59 + ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPingTimeout.GetHashCode();
                    if (ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplRecipients != null)
                    hashCode = hashCode * 59 + ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplRecipients.GetHashCode();
                    if (ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpserver != null)
                    hashCode = hashCode * 59 + ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpserver.GetHashCode();
                    if (ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpport != null)
                    hashCode = hashCode * 59 + ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpport.GetHashCode();
                    if (ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsetls != null)
                    hashCode = hashCode * 59 + ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsetls.GetHashCode();
                    if (ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsername != null)
                    hashCode = hashCode * 59 + ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsername.GetHashCode();
                    if (ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPassword != null)
                    hashCode = hashCode * 59 + ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPassword.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProperties left, ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProperties right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProperties left, ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProperties right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
