/*
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties : IEquatable<OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties>
    { 
        /// <summary>
        /// Gets or Sets SolrHttpUrl
        /// </summary>
        [DataMember(Name="solr.http.url")]
        public ConfigNodePropertyString SolrHttpUrl { get; set; }

        /// <summary>
        /// Gets or Sets SolrZkHost
        /// </summary>
        [DataMember(Name="solr.zk.host")]
        public ConfigNodePropertyString SolrZkHost { get; set; }

        /// <summary>
        /// Gets or Sets SolrCollection
        /// </summary>
        [DataMember(Name="solr.collection")]
        public ConfigNodePropertyString SolrCollection { get; set; }

        /// <summary>
        /// Gets or Sets SolrSocketTimeout
        /// </summary>
        [DataMember(Name="solr.socket.timeout")]
        public ConfigNodePropertyInteger SolrSocketTimeout { get; set; }

        /// <summary>
        /// Gets or Sets SolrConnectionTimeout
        /// </summary>
        [DataMember(Name="solr.connection.timeout")]
        public ConfigNodePropertyInteger SolrConnectionTimeout { get; set; }

        /// <summary>
        /// Gets or Sets SolrShardsNo
        /// </summary>
        [DataMember(Name="solr.shards.no")]
        public ConfigNodePropertyInteger SolrShardsNo { get; set; }

        /// <summary>
        /// Gets or Sets SolrReplicationFactor
        /// </summary>
        [DataMember(Name="solr.replication.factor")]
        public ConfigNodePropertyInteger SolrReplicationFactor { get; set; }

        /// <summary>
        /// Gets or Sets SolrConfDir
        /// </summary>
        [DataMember(Name="solr.conf.dir")]
        public ConfigNodePropertyString SolrConfDir { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties {\n");
            sb.Append("  SolrHttpUrl: ").Append(SolrHttpUrl).Append("\n");
            sb.Append("  SolrZkHost: ").Append(SolrZkHost).Append("\n");
            sb.Append("  SolrCollection: ").Append(SolrCollection).Append("\n");
            sb.Append("  SolrSocketTimeout: ").Append(SolrSocketTimeout).Append("\n");
            sb.Append("  SolrConnectionTimeout: ").Append(SolrConnectionTimeout).Append("\n");
            sb.Append("  SolrShardsNo: ").Append(SolrShardsNo).Append("\n");
            sb.Append("  SolrReplicationFactor: ").Append(SolrReplicationFactor).Append("\n");
            sb.Append("  SolrConfDir: ").Append(SolrConfDir).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties)obj);
        }

        /// <summary>
        /// Returns true if OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties instances are equal
        /// </summary>
        /// <param name="other">Instance of OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    SolrHttpUrl == other.SolrHttpUrl ||
                    SolrHttpUrl != null &&
                    SolrHttpUrl.Equals(other.SolrHttpUrl)
                ) && 
                (
                    SolrZkHost == other.SolrZkHost ||
                    SolrZkHost != null &&
                    SolrZkHost.Equals(other.SolrZkHost)
                ) && 
                (
                    SolrCollection == other.SolrCollection ||
                    SolrCollection != null &&
                    SolrCollection.Equals(other.SolrCollection)
                ) && 
                (
                    SolrSocketTimeout == other.SolrSocketTimeout ||
                    SolrSocketTimeout != null &&
                    SolrSocketTimeout.Equals(other.SolrSocketTimeout)
                ) && 
                (
                    SolrConnectionTimeout == other.SolrConnectionTimeout ||
                    SolrConnectionTimeout != null &&
                    SolrConnectionTimeout.Equals(other.SolrConnectionTimeout)
                ) && 
                (
                    SolrShardsNo == other.SolrShardsNo ||
                    SolrShardsNo != null &&
                    SolrShardsNo.Equals(other.SolrShardsNo)
                ) && 
                (
                    SolrReplicationFactor == other.SolrReplicationFactor ||
                    SolrReplicationFactor != null &&
                    SolrReplicationFactor.Equals(other.SolrReplicationFactor)
                ) && 
                (
                    SolrConfDir == other.SolrConfDir ||
                    SolrConfDir != null &&
                    SolrConfDir.Equals(other.SolrConfDir)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (SolrHttpUrl != null)
                    hashCode = hashCode * 59 + SolrHttpUrl.GetHashCode();
                    if (SolrZkHost != null)
                    hashCode = hashCode * 59 + SolrZkHost.GetHashCode();
                    if (SolrCollection != null)
                    hashCode = hashCode * 59 + SolrCollection.GetHashCode();
                    if (SolrSocketTimeout != null)
                    hashCode = hashCode * 59 + SolrSocketTimeout.GetHashCode();
                    if (SolrConnectionTimeout != null)
                    hashCode = hashCode * 59 + SolrConnectionTimeout.GetHashCode();
                    if (SolrShardsNo != null)
                    hashCode = hashCode * 59 + SolrShardsNo.GetHashCode();
                    if (SolrReplicationFactor != null)
                    hashCode = hashCode * 59 + SolrReplicationFactor.GetHashCode();
                    if (SolrConfDir != null)
                    hashCode = hashCode * 59 + SolrConfDir.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties left, OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties left, OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfProperties right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
