/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::OAIComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::OAIComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties() {
    init();
}

OAIComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::~OAIComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties() {
    this->cleanup();
}

void
OAIComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::init() {
    path = new OAIConfigNodePropertyArray();
    m_path_isSet = false;
    service_ranking = new OAIConfigNodePropertyInteger();
    m_service_ranking_isSet = false;
    idp_url = new OAIConfigNodePropertyString();
    m_idp_url_isSet = false;
    idp_cert_alias = new OAIConfigNodePropertyString();
    m_idp_cert_alias_isSet = false;
    idp_http_redirect = new OAIConfigNodePropertyBoolean();
    m_idp_http_redirect_isSet = false;
    service_provider_entity_id = new OAIConfigNodePropertyString();
    m_service_provider_entity_id_isSet = false;
    assertion_consumer_service_url = new OAIConfigNodePropertyString();
    m_assertion_consumer_service_url_isSet = false;
    sp_private_key_alias = new OAIConfigNodePropertyString();
    m_sp_private_key_alias_isSet = false;
    key_store_password = new OAIConfigNodePropertyString();
    m_key_store_password_isSet = false;
    default_redirect_url = new OAIConfigNodePropertyString();
    m_default_redirect_url_isSet = false;
    user_id_attribute = new OAIConfigNodePropertyString();
    m_user_id_attribute_isSet = false;
    use_encryption = new OAIConfigNodePropertyBoolean();
    m_use_encryption_isSet = false;
    create_user = new OAIConfigNodePropertyBoolean();
    m_create_user_isSet = false;
    user_intermediate_path = new OAIConfigNodePropertyString();
    m_user_intermediate_path_isSet = false;
    add_group_memberships = new OAIConfigNodePropertyBoolean();
    m_add_group_memberships_isSet = false;
    group_membership_attribute = new OAIConfigNodePropertyString();
    m_group_membership_attribute_isSet = false;
    default_groups = new OAIConfigNodePropertyArray();
    m_default_groups_isSet = false;
    name_id_format = new OAIConfigNodePropertyString();
    m_name_id_format_isSet = false;
    synchronize_attributes = new OAIConfigNodePropertyArray();
    m_synchronize_attributes_isSet = false;
    handle_logout = new OAIConfigNodePropertyBoolean();
    m_handle_logout_isSet = false;
    logout_url = new OAIConfigNodePropertyString();
    m_logout_url_isSet = false;
    clock_tolerance = new OAIConfigNodePropertyInteger();
    m_clock_tolerance_isSet = false;
    digest_method = new OAIConfigNodePropertyString();
    m_digest_method_isSet = false;
    signature_method = new OAIConfigNodePropertyString();
    m_signature_method_isSet = false;
    identity_sync_type = new OAIConfigNodePropertyDropDown();
    m_identity_sync_type_isSet = false;
    idp_identifier = new OAIConfigNodePropertyString();
    m_idp_identifier_isSet = false;
}

void
OAIComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::cleanup() {
    if(path != nullptr) { 
        delete path;
    }
    if(service_ranking != nullptr) { 
        delete service_ranking;
    }
    if(idp_url != nullptr) { 
        delete idp_url;
    }
    if(idp_cert_alias != nullptr) { 
        delete idp_cert_alias;
    }
    if(idp_http_redirect != nullptr) { 
        delete idp_http_redirect;
    }
    if(service_provider_entity_id != nullptr) { 
        delete service_provider_entity_id;
    }
    if(assertion_consumer_service_url != nullptr) { 
        delete assertion_consumer_service_url;
    }
    if(sp_private_key_alias != nullptr) { 
        delete sp_private_key_alias;
    }
    if(key_store_password != nullptr) { 
        delete key_store_password;
    }
    if(default_redirect_url != nullptr) { 
        delete default_redirect_url;
    }
    if(user_id_attribute != nullptr) { 
        delete user_id_attribute;
    }
    if(use_encryption != nullptr) { 
        delete use_encryption;
    }
    if(create_user != nullptr) { 
        delete create_user;
    }
    if(user_intermediate_path != nullptr) { 
        delete user_intermediate_path;
    }
    if(add_group_memberships != nullptr) { 
        delete add_group_memberships;
    }
    if(group_membership_attribute != nullptr) { 
        delete group_membership_attribute;
    }
    if(default_groups != nullptr) { 
        delete default_groups;
    }
    if(name_id_format != nullptr) { 
        delete name_id_format;
    }
    if(synchronize_attributes != nullptr) { 
        delete synchronize_attributes;
    }
    if(handle_logout != nullptr) { 
        delete handle_logout;
    }
    if(logout_url != nullptr) { 
        delete logout_url;
    }
    if(clock_tolerance != nullptr) { 
        delete clock_tolerance;
    }
    if(digest_method != nullptr) { 
        delete digest_method;
    }
    if(signature_method != nullptr) { 
        delete signature_method;
    }
    if(identity_sync_type != nullptr) { 
        delete identity_sync_type;
    }
    if(idp_identifier != nullptr) { 
        delete idp_identifier;
    }
}

OAIComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties*
OAIComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&path, pJson["path"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
    ::OpenAPI::setValue(&service_ranking, pJson["service.ranking"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&idp_url, pJson["idpUrl"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&idp_cert_alias, pJson["idpCertAlias"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&idp_http_redirect, pJson["idpHttpRedirect"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&service_provider_entity_id, pJson["serviceProviderEntityId"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&assertion_consumer_service_url, pJson["assertionConsumerServiceURL"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&sp_private_key_alias, pJson["spPrivateKeyAlias"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&key_store_password, pJson["keyStorePassword"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&default_redirect_url, pJson["defaultRedirectUrl"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&user_id_attribute, pJson["userIDAttribute"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&use_encryption, pJson["useEncryption"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&create_user, pJson["createUser"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&user_intermediate_path, pJson["userIntermediatePath"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&add_group_memberships, pJson["addGroupMemberships"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&group_membership_attribute, pJson["groupMembershipAttribute"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&default_groups, pJson["defaultGroups"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
    ::OpenAPI::setValue(&name_id_format, pJson["nameIdFormat"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&synchronize_attributes, pJson["synchronizeAttributes"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
    ::OpenAPI::setValue(&handle_logout, pJson["handleLogout"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&logout_url, pJson["logoutUrl"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&clock_tolerance, pJson["clockTolerance"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&digest_method, pJson["digestMethod"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&signature_method, pJson["signatureMethod"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&identity_sync_type, pJson["identitySyncType"], "OAIConfigNodePropertyDropDown", "OAIConfigNodePropertyDropDown");
    
    ::OpenAPI::setValue(&idp_identifier, pJson["idpIdentifier"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
}

QString
OAIComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::asJsonObject() {
    QJsonObject obj;
    if((path != nullptr) && (path->isSet())){
        toJsonValue(QString("path"), path, obj, QString("OAIConfigNodePropertyArray"));
    }
    if((service_ranking != nullptr) && (service_ranking->isSet())){
        toJsonValue(QString("service.ranking"), service_ranking, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((idp_url != nullptr) && (idp_url->isSet())){
        toJsonValue(QString("idpUrl"), idp_url, obj, QString("OAIConfigNodePropertyString"));
    }
    if((idp_cert_alias != nullptr) && (idp_cert_alias->isSet())){
        toJsonValue(QString("idpCertAlias"), idp_cert_alias, obj, QString("OAIConfigNodePropertyString"));
    }
    if((idp_http_redirect != nullptr) && (idp_http_redirect->isSet())){
        toJsonValue(QString("idpHttpRedirect"), idp_http_redirect, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((service_provider_entity_id != nullptr) && (service_provider_entity_id->isSet())){
        toJsonValue(QString("serviceProviderEntityId"), service_provider_entity_id, obj, QString("OAIConfigNodePropertyString"));
    }
    if((assertion_consumer_service_url != nullptr) && (assertion_consumer_service_url->isSet())){
        toJsonValue(QString("assertionConsumerServiceURL"), assertion_consumer_service_url, obj, QString("OAIConfigNodePropertyString"));
    }
    if((sp_private_key_alias != nullptr) && (sp_private_key_alias->isSet())){
        toJsonValue(QString("spPrivateKeyAlias"), sp_private_key_alias, obj, QString("OAIConfigNodePropertyString"));
    }
    if((key_store_password != nullptr) && (key_store_password->isSet())){
        toJsonValue(QString("keyStorePassword"), key_store_password, obj, QString("OAIConfigNodePropertyString"));
    }
    if((default_redirect_url != nullptr) && (default_redirect_url->isSet())){
        toJsonValue(QString("defaultRedirectUrl"), default_redirect_url, obj, QString("OAIConfigNodePropertyString"));
    }
    if((user_id_attribute != nullptr) && (user_id_attribute->isSet())){
        toJsonValue(QString("userIDAttribute"), user_id_attribute, obj, QString("OAIConfigNodePropertyString"));
    }
    if((use_encryption != nullptr) && (use_encryption->isSet())){
        toJsonValue(QString("useEncryption"), use_encryption, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((create_user != nullptr) && (create_user->isSet())){
        toJsonValue(QString("createUser"), create_user, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((user_intermediate_path != nullptr) && (user_intermediate_path->isSet())){
        toJsonValue(QString("userIntermediatePath"), user_intermediate_path, obj, QString("OAIConfigNodePropertyString"));
    }
    if((add_group_memberships != nullptr) && (add_group_memberships->isSet())){
        toJsonValue(QString("addGroupMemberships"), add_group_memberships, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((group_membership_attribute != nullptr) && (group_membership_attribute->isSet())){
        toJsonValue(QString("groupMembershipAttribute"), group_membership_attribute, obj, QString("OAIConfigNodePropertyString"));
    }
    if((default_groups != nullptr) && (default_groups->isSet())){
        toJsonValue(QString("defaultGroups"), default_groups, obj, QString("OAIConfigNodePropertyArray"));
    }
    if((name_id_format != nullptr) && (name_id_format->isSet())){
        toJsonValue(QString("nameIdFormat"), name_id_format, obj, QString("OAIConfigNodePropertyString"));
    }
    if((synchronize_attributes != nullptr) && (synchronize_attributes->isSet())){
        toJsonValue(QString("synchronizeAttributes"), synchronize_attributes, obj, QString("OAIConfigNodePropertyArray"));
    }
    if((handle_logout != nullptr) && (handle_logout->isSet())){
        toJsonValue(QString("handleLogout"), handle_logout, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((logout_url != nullptr) && (logout_url->isSet())){
        toJsonValue(QString("logoutUrl"), logout_url, obj, QString("OAIConfigNodePropertyString"));
    }
    if((clock_tolerance != nullptr) && (clock_tolerance->isSet())){
        toJsonValue(QString("clockTolerance"), clock_tolerance, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((digest_method != nullptr) && (digest_method->isSet())){
        toJsonValue(QString("digestMethod"), digest_method, obj, QString("OAIConfigNodePropertyString"));
    }
    if((signature_method != nullptr) && (signature_method->isSet())){
        toJsonValue(QString("signatureMethod"), signature_method, obj, QString("OAIConfigNodePropertyString"));
    }
    if((identity_sync_type != nullptr) && (identity_sync_type->isSet())){
        toJsonValue(QString("identitySyncType"), identity_sync_type, obj, QString("OAIConfigNodePropertyDropDown"));
    }
    if((idp_identifier != nullptr) && (idp_identifier->isSet())){
        toJsonValue(QString("idpIdentifier"), idp_identifier, obj, QString("OAIConfigNodePropertyString"));
    }

    return obj;
}

OAIConfigNodePropertyArray*
OAIComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::getPath() {
    return path;
}
void
OAIComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::setPath(OAIConfigNodePropertyArray* path) {
    this->path = path;
    this->m_path_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::getServiceRanking() {
    return service_ranking;
}
void
OAIComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::setServiceRanking(OAIConfigNodePropertyInteger* service_ranking) {
    this->service_ranking = service_ranking;
    this->m_service_ranking_isSet = true;
}

OAIConfigNodePropertyString*
OAIComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::getIdpUrl() {
    return idp_url;
}
void
OAIComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::setIdpUrl(OAIConfigNodePropertyString* idp_url) {
    this->idp_url = idp_url;
    this->m_idp_url_isSet = true;
}

OAIConfigNodePropertyString*
OAIComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::getIdpCertAlias() {
    return idp_cert_alias;
}
void
OAIComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::setIdpCertAlias(OAIConfigNodePropertyString* idp_cert_alias) {
    this->idp_cert_alias = idp_cert_alias;
    this->m_idp_cert_alias_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::getIdpHttpRedirect() {
    return idp_http_redirect;
}
void
OAIComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::setIdpHttpRedirect(OAIConfigNodePropertyBoolean* idp_http_redirect) {
    this->idp_http_redirect = idp_http_redirect;
    this->m_idp_http_redirect_isSet = true;
}

OAIConfigNodePropertyString*
OAIComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::getServiceProviderEntityId() {
    return service_provider_entity_id;
}
void
OAIComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::setServiceProviderEntityId(OAIConfigNodePropertyString* service_provider_entity_id) {
    this->service_provider_entity_id = service_provider_entity_id;
    this->m_service_provider_entity_id_isSet = true;
}

OAIConfigNodePropertyString*
OAIComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::getAssertionConsumerServiceUrl() {
    return assertion_consumer_service_url;
}
void
OAIComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::setAssertionConsumerServiceUrl(OAIConfigNodePropertyString* assertion_consumer_service_url) {
    this->assertion_consumer_service_url = assertion_consumer_service_url;
    this->m_assertion_consumer_service_url_isSet = true;
}

OAIConfigNodePropertyString*
OAIComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::getSpPrivateKeyAlias() {
    return sp_private_key_alias;
}
void
OAIComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::setSpPrivateKeyAlias(OAIConfigNodePropertyString* sp_private_key_alias) {
    this->sp_private_key_alias = sp_private_key_alias;
    this->m_sp_private_key_alias_isSet = true;
}

OAIConfigNodePropertyString*
OAIComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::getKeyStorePassword() {
    return key_store_password;
}
void
OAIComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::setKeyStorePassword(OAIConfigNodePropertyString* key_store_password) {
    this->key_store_password = key_store_password;
    this->m_key_store_password_isSet = true;
}

OAIConfigNodePropertyString*
OAIComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::getDefaultRedirectUrl() {
    return default_redirect_url;
}
void
OAIComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::setDefaultRedirectUrl(OAIConfigNodePropertyString* default_redirect_url) {
    this->default_redirect_url = default_redirect_url;
    this->m_default_redirect_url_isSet = true;
}

OAIConfigNodePropertyString*
OAIComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::getUserIdAttribute() {
    return user_id_attribute;
}
void
OAIComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::setUserIdAttribute(OAIConfigNodePropertyString* user_id_attribute) {
    this->user_id_attribute = user_id_attribute;
    this->m_user_id_attribute_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::getUseEncryption() {
    return use_encryption;
}
void
OAIComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::setUseEncryption(OAIConfigNodePropertyBoolean* use_encryption) {
    this->use_encryption = use_encryption;
    this->m_use_encryption_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::getCreateUser() {
    return create_user;
}
void
OAIComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::setCreateUser(OAIConfigNodePropertyBoolean* create_user) {
    this->create_user = create_user;
    this->m_create_user_isSet = true;
}

OAIConfigNodePropertyString*
OAIComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::getUserIntermediatePath() {
    return user_intermediate_path;
}
void
OAIComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::setUserIntermediatePath(OAIConfigNodePropertyString* user_intermediate_path) {
    this->user_intermediate_path = user_intermediate_path;
    this->m_user_intermediate_path_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::getAddGroupMemberships() {
    return add_group_memberships;
}
void
OAIComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::setAddGroupMemberships(OAIConfigNodePropertyBoolean* add_group_memberships) {
    this->add_group_memberships = add_group_memberships;
    this->m_add_group_memberships_isSet = true;
}

OAIConfigNodePropertyString*
OAIComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::getGroupMembershipAttribute() {
    return group_membership_attribute;
}
void
OAIComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::setGroupMembershipAttribute(OAIConfigNodePropertyString* group_membership_attribute) {
    this->group_membership_attribute = group_membership_attribute;
    this->m_group_membership_attribute_isSet = true;
}

OAIConfigNodePropertyArray*
OAIComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::getDefaultGroups() {
    return default_groups;
}
void
OAIComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::setDefaultGroups(OAIConfigNodePropertyArray* default_groups) {
    this->default_groups = default_groups;
    this->m_default_groups_isSet = true;
}

OAIConfigNodePropertyString*
OAIComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::getNameIdFormat() {
    return name_id_format;
}
void
OAIComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::setNameIdFormat(OAIConfigNodePropertyString* name_id_format) {
    this->name_id_format = name_id_format;
    this->m_name_id_format_isSet = true;
}

OAIConfigNodePropertyArray*
OAIComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::getSynchronizeAttributes() {
    return synchronize_attributes;
}
void
OAIComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::setSynchronizeAttributes(OAIConfigNodePropertyArray* synchronize_attributes) {
    this->synchronize_attributes = synchronize_attributes;
    this->m_synchronize_attributes_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::getHandleLogout() {
    return handle_logout;
}
void
OAIComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::setHandleLogout(OAIConfigNodePropertyBoolean* handle_logout) {
    this->handle_logout = handle_logout;
    this->m_handle_logout_isSet = true;
}

OAIConfigNodePropertyString*
OAIComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::getLogoutUrl() {
    return logout_url;
}
void
OAIComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::setLogoutUrl(OAIConfigNodePropertyString* logout_url) {
    this->logout_url = logout_url;
    this->m_logout_url_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::getClockTolerance() {
    return clock_tolerance;
}
void
OAIComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::setClockTolerance(OAIConfigNodePropertyInteger* clock_tolerance) {
    this->clock_tolerance = clock_tolerance;
    this->m_clock_tolerance_isSet = true;
}

OAIConfigNodePropertyString*
OAIComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::getDigestMethod() {
    return digest_method;
}
void
OAIComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::setDigestMethod(OAIConfigNodePropertyString* digest_method) {
    this->digest_method = digest_method;
    this->m_digest_method_isSet = true;
}

OAIConfigNodePropertyString*
OAIComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::getSignatureMethod() {
    return signature_method;
}
void
OAIComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::setSignatureMethod(OAIConfigNodePropertyString* signature_method) {
    this->signature_method = signature_method;
    this->m_signature_method_isSet = true;
}

OAIConfigNodePropertyDropDown*
OAIComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::getIdentitySyncType() {
    return identity_sync_type;
}
void
OAIComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::setIdentitySyncType(OAIConfigNodePropertyDropDown* identity_sync_type) {
    this->identity_sync_type = identity_sync_type;
    this->m_identity_sync_type_isSet = true;
}

OAIConfigNodePropertyString*
OAIComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::getIdpIdentifier() {
    return idp_identifier;
}
void
OAIComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::setIdpIdentifier(OAIConfigNodePropertyString* idp_identifier) {
    this->idp_identifier = idp_identifier;
    this->m_idp_identifier_isSet = true;
}


bool
OAIComAdobeGraniteAuthSamlSamlAuthenticationHandlerProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(path != nullptr && path->isSet()){ isObjectUpdated = true; break;}
        if(service_ranking != nullptr && service_ranking->isSet()){ isObjectUpdated = true; break;}
        if(idp_url != nullptr && idp_url->isSet()){ isObjectUpdated = true; break;}
        if(idp_cert_alias != nullptr && idp_cert_alias->isSet()){ isObjectUpdated = true; break;}
        if(idp_http_redirect != nullptr && idp_http_redirect->isSet()){ isObjectUpdated = true; break;}
        if(service_provider_entity_id != nullptr && service_provider_entity_id->isSet()){ isObjectUpdated = true; break;}
        if(assertion_consumer_service_url != nullptr && assertion_consumer_service_url->isSet()){ isObjectUpdated = true; break;}
        if(sp_private_key_alias != nullptr && sp_private_key_alias->isSet()){ isObjectUpdated = true; break;}
        if(key_store_password != nullptr && key_store_password->isSet()){ isObjectUpdated = true; break;}
        if(default_redirect_url != nullptr && default_redirect_url->isSet()){ isObjectUpdated = true; break;}
        if(user_id_attribute != nullptr && user_id_attribute->isSet()){ isObjectUpdated = true; break;}
        if(use_encryption != nullptr && use_encryption->isSet()){ isObjectUpdated = true; break;}
        if(create_user != nullptr && create_user->isSet()){ isObjectUpdated = true; break;}
        if(user_intermediate_path != nullptr && user_intermediate_path->isSet()){ isObjectUpdated = true; break;}
        if(add_group_memberships != nullptr && add_group_memberships->isSet()){ isObjectUpdated = true; break;}
        if(group_membership_attribute != nullptr && group_membership_attribute->isSet()){ isObjectUpdated = true; break;}
        if(default_groups != nullptr && default_groups->isSet()){ isObjectUpdated = true; break;}
        if(name_id_format != nullptr && name_id_format->isSet()){ isObjectUpdated = true; break;}
        if(synchronize_attributes != nullptr && synchronize_attributes->isSet()){ isObjectUpdated = true; break;}
        if(handle_logout != nullptr && handle_logout->isSet()){ isObjectUpdated = true; break;}
        if(logout_url != nullptr && logout_url->isSet()){ isObjectUpdated = true; break;}
        if(clock_tolerance != nullptr && clock_tolerance->isSet()){ isObjectUpdated = true; break;}
        if(digest_method != nullptr && digest_method->isSet()){ isObjectUpdated = true; break;}
        if(signature_method != nullptr && signature_method->isSet()){ isObjectUpdated = true; break;}
        if(identity_sync_type != nullptr && identity_sync_type->isSet()){ isObjectUpdated = true; break;}
        if(idp_identifier != nullptr && idp_identifier->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

