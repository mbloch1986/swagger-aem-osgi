/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerProperties::OAIComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerProperties::OAIComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerProperties() {
    init();
}

OAIComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerProperties::~OAIComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerProperties() {
    this->cleanup();
}

void
OAIComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerProperties::init() {
    min_thread_pool_size = new OAIConfigNodePropertyInteger();
    m_min_thread_pool_size_isSet = false;
    max_thread_pool_size = new OAIConfigNodePropertyInteger();
    m_max_thread_pool_size_isSet = false;
}

void
OAIComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerProperties::cleanup() {
    if(min_thread_pool_size != nullptr) { 
        delete min_thread_pool_size;
    }
    if(max_thread_pool_size != nullptr) { 
        delete max_thread_pool_size;
    }
}

OAIComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerProperties*
OAIComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&min_thread_pool_size, pJson["minThreadPoolSize"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&max_thread_pool_size, pJson["maxThreadPoolSize"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
}

QString
OAIComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerProperties::asJsonObject() {
    QJsonObject obj;
    if((min_thread_pool_size != nullptr) && (min_thread_pool_size->isSet())){
        toJsonValue(QString("minThreadPoolSize"), min_thread_pool_size, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((max_thread_pool_size != nullptr) && (max_thread_pool_size->isSet())){
        toJsonValue(QString("maxThreadPoolSize"), max_thread_pool_size, obj, QString("OAIConfigNodePropertyInteger"));
    }

    return obj;
}

OAIConfigNodePropertyInteger*
OAIComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerProperties::getMinThreadPoolSize() {
    return min_thread_pool_size;
}
void
OAIComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerProperties::setMinThreadPoolSize(OAIConfigNodePropertyInteger* min_thread_pool_size) {
    this->min_thread_pool_size = min_thread_pool_size;
    this->m_min_thread_pool_size_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerProperties::getMaxThreadPoolSize() {
    return max_thread_pool_size;
}
void
OAIComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerProperties::setMaxThreadPoolSize(OAIConfigNodePropertyInteger* max_thread_pool_size) {
    this->max_thread_pool_size = max_thread_pool_size;
    this->m_max_thread_pool_size_isSet = true;
}


bool
OAIComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(min_thread_pool_size != nullptr && min_thread_pool_size->isSet()){ isObjectUpdated = true; break;}
        if(max_thread_pool_size != nullptr && max_thread_pool_size->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

