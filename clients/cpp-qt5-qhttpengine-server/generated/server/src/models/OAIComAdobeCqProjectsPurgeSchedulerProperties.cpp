/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeCqProjectsPurgeSchedulerProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeCqProjectsPurgeSchedulerProperties::OAIComAdobeCqProjectsPurgeSchedulerProperties(QString json) {
    this->fromJson(json);
}

OAIComAdobeCqProjectsPurgeSchedulerProperties::OAIComAdobeCqProjectsPurgeSchedulerProperties() {
    this->init();
}

OAIComAdobeCqProjectsPurgeSchedulerProperties::~OAIComAdobeCqProjectsPurgeSchedulerProperties() {
    
}

void
OAIComAdobeCqProjectsPurgeSchedulerProperties::init() {
    m_scheduledpurge_name_isSet = false;
    m_scheduledpurge_purge_active_isSet = false;
    m_scheduledpurge_templates_isSet = false;
    m_scheduledpurge_purge_groups_isSet = false;
    m_scheduledpurge_purge_assets_isSet = false;
    m_scheduledpurge_terminate_running_workflows_isSet = false;
    m_scheduledpurge_daysold_isSet = false;
    m_scheduledpurge_save_threshold_isSet = false;
}

void
OAIComAdobeCqProjectsPurgeSchedulerProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIComAdobeCqProjectsPurgeSchedulerProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(scheduledpurge_name, json[QString("scheduledpurge.name")]);
    
    ::OpenAPI::fromJsonValue(scheduledpurge_purge_active, json[QString("scheduledpurge.purgeActive")]);
    
    ::OpenAPI::fromJsonValue(scheduledpurge_templates, json[QString("scheduledpurge.templates")]);
    
    ::OpenAPI::fromJsonValue(scheduledpurge_purge_groups, json[QString("scheduledpurge.purgeGroups")]);
    
    ::OpenAPI::fromJsonValue(scheduledpurge_purge_assets, json[QString("scheduledpurge.purgeAssets")]);
    
    ::OpenAPI::fromJsonValue(scheduledpurge_terminate_running_workflows, json[QString("scheduledpurge.terminateRunningWorkflows")]);
    
    ::OpenAPI::fromJsonValue(scheduledpurge_daysold, json[QString("scheduledpurge.daysold")]);
    
    ::OpenAPI::fromJsonValue(scheduledpurge_save_threshold, json[QString("scheduledpurge.saveThreshold")]);
    
}

QString
OAIComAdobeCqProjectsPurgeSchedulerProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeCqProjectsPurgeSchedulerProperties::asJsonObject() const {
    QJsonObject obj;
	if(scheduledpurge_name.isSet()){
        obj.insert(QString("scheduledpurge.name"), ::OpenAPI::toJsonValue(scheduledpurge_name));
    }
	if(scheduledpurge_purge_active.isSet()){
        obj.insert(QString("scheduledpurge.purgeActive"), ::OpenAPI::toJsonValue(scheduledpurge_purge_active));
    }
	if(scheduledpurge_templates.isSet()){
        obj.insert(QString("scheduledpurge.templates"), ::OpenAPI::toJsonValue(scheduledpurge_templates));
    }
	if(scheduledpurge_purge_groups.isSet()){
        obj.insert(QString("scheduledpurge.purgeGroups"), ::OpenAPI::toJsonValue(scheduledpurge_purge_groups));
    }
	if(scheduledpurge_purge_assets.isSet()){
        obj.insert(QString("scheduledpurge.purgeAssets"), ::OpenAPI::toJsonValue(scheduledpurge_purge_assets));
    }
	if(scheduledpurge_terminate_running_workflows.isSet()){
        obj.insert(QString("scheduledpurge.terminateRunningWorkflows"), ::OpenAPI::toJsonValue(scheduledpurge_terminate_running_workflows));
    }
	if(scheduledpurge_daysold.isSet()){
        obj.insert(QString("scheduledpurge.daysold"), ::OpenAPI::toJsonValue(scheduledpurge_daysold));
    }
	if(scheduledpurge_save_threshold.isSet()){
        obj.insert(QString("scheduledpurge.saveThreshold"), ::OpenAPI::toJsonValue(scheduledpurge_save_threshold));
    }
    return obj;
}

OAIConfigNodePropertyString
OAIComAdobeCqProjectsPurgeSchedulerProperties::getScheduledpurgeName() const {
    return scheduledpurge_name;
}
void
OAIComAdobeCqProjectsPurgeSchedulerProperties::setScheduledpurgeName(const OAIConfigNodePropertyString &scheduledpurge_name) {
    this->scheduledpurge_name = scheduledpurge_name;
    this->m_scheduledpurge_name_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIComAdobeCqProjectsPurgeSchedulerProperties::getScheduledpurgePurgeActive() const {
    return scheduledpurge_purge_active;
}
void
OAIComAdobeCqProjectsPurgeSchedulerProperties::setScheduledpurgePurgeActive(const OAIConfigNodePropertyBoolean &scheduledpurge_purge_active) {
    this->scheduledpurge_purge_active = scheduledpurge_purge_active;
    this->m_scheduledpurge_purge_active_isSet = true;
}

OAIConfigNodePropertyArray
OAIComAdobeCqProjectsPurgeSchedulerProperties::getScheduledpurgeTemplates() const {
    return scheduledpurge_templates;
}
void
OAIComAdobeCqProjectsPurgeSchedulerProperties::setScheduledpurgeTemplates(const OAIConfigNodePropertyArray &scheduledpurge_templates) {
    this->scheduledpurge_templates = scheduledpurge_templates;
    this->m_scheduledpurge_templates_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIComAdobeCqProjectsPurgeSchedulerProperties::getScheduledpurgePurgeGroups() const {
    return scheduledpurge_purge_groups;
}
void
OAIComAdobeCqProjectsPurgeSchedulerProperties::setScheduledpurgePurgeGroups(const OAIConfigNodePropertyBoolean &scheduledpurge_purge_groups) {
    this->scheduledpurge_purge_groups = scheduledpurge_purge_groups;
    this->m_scheduledpurge_purge_groups_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIComAdobeCqProjectsPurgeSchedulerProperties::getScheduledpurgePurgeAssets() const {
    return scheduledpurge_purge_assets;
}
void
OAIComAdobeCqProjectsPurgeSchedulerProperties::setScheduledpurgePurgeAssets(const OAIConfigNodePropertyBoolean &scheduledpurge_purge_assets) {
    this->scheduledpurge_purge_assets = scheduledpurge_purge_assets;
    this->m_scheduledpurge_purge_assets_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIComAdobeCqProjectsPurgeSchedulerProperties::getScheduledpurgeTerminateRunningWorkflows() const {
    return scheduledpurge_terminate_running_workflows;
}
void
OAIComAdobeCqProjectsPurgeSchedulerProperties::setScheduledpurgeTerminateRunningWorkflows(const OAIConfigNodePropertyBoolean &scheduledpurge_terminate_running_workflows) {
    this->scheduledpurge_terminate_running_workflows = scheduledpurge_terminate_running_workflows;
    this->m_scheduledpurge_terminate_running_workflows_isSet = true;
}

OAIConfigNodePropertyInteger
OAIComAdobeCqProjectsPurgeSchedulerProperties::getScheduledpurgeDaysold() const {
    return scheduledpurge_daysold;
}
void
OAIComAdobeCqProjectsPurgeSchedulerProperties::setScheduledpurgeDaysold(const OAIConfigNodePropertyInteger &scheduledpurge_daysold) {
    this->scheduledpurge_daysold = scheduledpurge_daysold;
    this->m_scheduledpurge_daysold_isSet = true;
}

OAIConfigNodePropertyInteger
OAIComAdobeCqProjectsPurgeSchedulerProperties::getScheduledpurgeSaveThreshold() const {
    return scheduledpurge_save_threshold;
}
void
OAIComAdobeCqProjectsPurgeSchedulerProperties::setScheduledpurgeSaveThreshold(const OAIConfigNodePropertyInteger &scheduledpurge_save_threshold) {
    this->scheduledpurge_save_threshold = scheduledpurge_save_threshold;
    this->m_scheduledpurge_save_threshold_isSet = true;
}


bool
OAIComAdobeCqProjectsPurgeSchedulerProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(scheduledpurge_name.isSet()){ isObjectUpdated = true; break;}
    
        if(scheduledpurge_purge_active.isSet()){ isObjectUpdated = true; break;}
    
        if(scheduledpurge_templates.isSet()){ isObjectUpdated = true; break;}
    
        if(scheduledpurge_purge_groups.isSet()){ isObjectUpdated = true; break;}
    
        if(scheduledpurge_purge_assets.isSet()){ isObjectUpdated = true; break;}
    
        if(scheduledpurge_terminate_running_workflows.isSet()){ isObjectUpdated = true; break;}
    
        if(scheduledpurge_daysold.isSet()){ isObjectUpdated = true; break;}
    
        if(scheduledpurge_save_threshold.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

