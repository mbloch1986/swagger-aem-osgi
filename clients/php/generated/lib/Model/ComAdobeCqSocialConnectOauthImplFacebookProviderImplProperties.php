<?php
/**
 * ComAdobeCqSocialConnectOauthImplFacebookProviderImplProperties
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.2.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ComAdobeCqSocialConnectOauthImplFacebookProviderImplProperties Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ComAdobeCqSocialConnectOauthImplFacebookProviderImplProperties implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'comAdobeCqSocialConnectOauthImplFacebookProviderImplProperties';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'oauth_provider_id' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'oauth_cloud_config_root' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'provider_config_root' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'provider_config_create_tags_enabled' => '\OpenAPI\Client\Model\ConfigNodePropertyBoolean',
        'provider_config_user_folder' => '\OpenAPI\Client\Model\ConfigNodePropertyDropDown',
        'provider_config_facebook_fetch_fields' => '\OpenAPI\Client\Model\ConfigNodePropertyBoolean',
        'provider_config_facebook_fields' => '\OpenAPI\Client\Model\ConfigNodePropertyArray',
        'provider_config_refresh_userdata_enabled' => '\OpenAPI\Client\Model\ConfigNodePropertyBoolean'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'oauth_provider_id' => null,
        'oauth_cloud_config_root' => null,
        'provider_config_root' => null,
        'provider_config_create_tags_enabled' => null,
        'provider_config_user_folder' => null,
        'provider_config_facebook_fetch_fields' => null,
        'provider_config_facebook_fields' => null,
        'provider_config_refresh_userdata_enabled' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'oauth_provider_id' => 'oauth.provider.id',
        'oauth_cloud_config_root' => 'oauth.cloud.config.root',
        'provider_config_root' => 'provider.config.root',
        'provider_config_create_tags_enabled' => 'provider.config.create.tags.enabled',
        'provider_config_user_folder' => 'provider.config.user.folder',
        'provider_config_facebook_fetch_fields' => 'provider.config.facebook.fetch.fields',
        'provider_config_facebook_fields' => 'provider.config.facebook.fields',
        'provider_config_refresh_userdata_enabled' => 'provider.config.refresh.userdata.enabled'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'oauth_provider_id' => 'setOauthProviderId',
        'oauth_cloud_config_root' => 'setOauthCloudConfigRoot',
        'provider_config_root' => 'setProviderConfigRoot',
        'provider_config_create_tags_enabled' => 'setProviderConfigCreateTagsEnabled',
        'provider_config_user_folder' => 'setProviderConfigUserFolder',
        'provider_config_facebook_fetch_fields' => 'setProviderConfigFacebookFetchFields',
        'provider_config_facebook_fields' => 'setProviderConfigFacebookFields',
        'provider_config_refresh_userdata_enabled' => 'setProviderConfigRefreshUserdataEnabled'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'oauth_provider_id' => 'getOauthProviderId',
        'oauth_cloud_config_root' => 'getOauthCloudConfigRoot',
        'provider_config_root' => 'getProviderConfigRoot',
        'provider_config_create_tags_enabled' => 'getProviderConfigCreateTagsEnabled',
        'provider_config_user_folder' => 'getProviderConfigUserFolder',
        'provider_config_facebook_fetch_fields' => 'getProviderConfigFacebookFetchFields',
        'provider_config_facebook_fields' => 'getProviderConfigFacebookFields',
        'provider_config_refresh_userdata_enabled' => 'getProviderConfigRefreshUserdataEnabled'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['oauth_provider_id'] = isset($data['oauth_provider_id']) ? $data['oauth_provider_id'] : null;
        $this->container['oauth_cloud_config_root'] = isset($data['oauth_cloud_config_root']) ? $data['oauth_cloud_config_root'] : null;
        $this->container['provider_config_root'] = isset($data['provider_config_root']) ? $data['provider_config_root'] : null;
        $this->container['provider_config_create_tags_enabled'] = isset($data['provider_config_create_tags_enabled']) ? $data['provider_config_create_tags_enabled'] : null;
        $this->container['provider_config_user_folder'] = isset($data['provider_config_user_folder']) ? $data['provider_config_user_folder'] : null;
        $this->container['provider_config_facebook_fetch_fields'] = isset($data['provider_config_facebook_fetch_fields']) ? $data['provider_config_facebook_fetch_fields'] : null;
        $this->container['provider_config_facebook_fields'] = isset($data['provider_config_facebook_fields']) ? $data['provider_config_facebook_fields'] : null;
        $this->container['provider_config_refresh_userdata_enabled'] = isset($data['provider_config_refresh_userdata_enabled']) ? $data['provider_config_refresh_userdata_enabled'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets oauth_provider_id
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getOauthProviderId()
    {
        return $this->container['oauth_provider_id'];
    }

    /**
     * Sets oauth_provider_id
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $oauth_provider_id oauth_provider_id
     *
     * @return $this
     */
    public function setOauthProviderId($oauth_provider_id)
    {
        $this->container['oauth_provider_id'] = $oauth_provider_id;

        return $this;
    }

    /**
     * Gets oauth_cloud_config_root
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getOauthCloudConfigRoot()
    {
        return $this->container['oauth_cloud_config_root'];
    }

    /**
     * Sets oauth_cloud_config_root
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $oauth_cloud_config_root oauth_cloud_config_root
     *
     * @return $this
     */
    public function setOauthCloudConfigRoot($oauth_cloud_config_root)
    {
        $this->container['oauth_cloud_config_root'] = $oauth_cloud_config_root;

        return $this;
    }

    /**
     * Gets provider_config_root
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getProviderConfigRoot()
    {
        return $this->container['provider_config_root'];
    }

    /**
     * Sets provider_config_root
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $provider_config_root provider_config_root
     *
     * @return $this
     */
    public function setProviderConfigRoot($provider_config_root)
    {
        $this->container['provider_config_root'] = $provider_config_root;

        return $this;
    }

    /**
     * Gets provider_config_create_tags_enabled
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null
     */
    public function getProviderConfigCreateTagsEnabled()
    {
        return $this->container['provider_config_create_tags_enabled'];
    }

    /**
     * Sets provider_config_create_tags_enabled
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null $provider_config_create_tags_enabled provider_config_create_tags_enabled
     *
     * @return $this
     */
    public function setProviderConfigCreateTagsEnabled($provider_config_create_tags_enabled)
    {
        $this->container['provider_config_create_tags_enabled'] = $provider_config_create_tags_enabled;

        return $this;
    }

    /**
     * Gets provider_config_user_folder
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyDropDown|null
     */
    public function getProviderConfigUserFolder()
    {
        return $this->container['provider_config_user_folder'];
    }

    /**
     * Sets provider_config_user_folder
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyDropDown|null $provider_config_user_folder provider_config_user_folder
     *
     * @return $this
     */
    public function setProviderConfigUserFolder($provider_config_user_folder)
    {
        $this->container['provider_config_user_folder'] = $provider_config_user_folder;

        return $this;
    }

    /**
     * Gets provider_config_facebook_fetch_fields
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null
     */
    public function getProviderConfigFacebookFetchFields()
    {
        return $this->container['provider_config_facebook_fetch_fields'];
    }

    /**
     * Sets provider_config_facebook_fetch_fields
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null $provider_config_facebook_fetch_fields provider_config_facebook_fetch_fields
     *
     * @return $this
     */
    public function setProviderConfigFacebookFetchFields($provider_config_facebook_fetch_fields)
    {
        $this->container['provider_config_facebook_fetch_fields'] = $provider_config_facebook_fetch_fields;

        return $this;
    }

    /**
     * Gets provider_config_facebook_fields
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyArray|null
     */
    public function getProviderConfigFacebookFields()
    {
        return $this->container['provider_config_facebook_fields'];
    }

    /**
     * Sets provider_config_facebook_fields
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyArray|null $provider_config_facebook_fields provider_config_facebook_fields
     *
     * @return $this
     */
    public function setProviderConfigFacebookFields($provider_config_facebook_fields)
    {
        $this->container['provider_config_facebook_fields'] = $provider_config_facebook_fields;

        return $this;
    }

    /**
     * Gets provider_config_refresh_userdata_enabled
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null
     */
    public function getProviderConfigRefreshUserdataEnabled()
    {
        return $this->container['provider_config_refresh_userdata_enabled'];
    }

    /**
     * Sets provider_config_refresh_userdata_enabled
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null $provider_config_refresh_userdata_enabled provider_config_refresh_userdata_enabled
     *
     * @return $this
     */
    public function setProviderConfigRefreshUserdataEnabled($provider_config_refresh_userdata_enabled)
    {
        $this->container['provider_config_refresh_userdata_enabled'] = $provider_config_refresh_userdata_enabled;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


