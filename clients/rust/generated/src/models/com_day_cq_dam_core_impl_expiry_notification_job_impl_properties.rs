/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComDayCqDamCoreImplExpiryNotificationJobImplProperties {
  #[serde(rename = "cq.dam.expiry.notification.scheduler.istimebased")]
  cq_dam_expiry_notification_scheduler_istimebased: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "cq.dam.expiry.notification.scheduler.timebased.rule")]
  cq_dam_expiry_notification_scheduler_timebased_rule: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "cq.dam.expiry.notification.scheduler.period.rule")]
  cq_dam_expiry_notification_scheduler_period_rule: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "send_email")]
  send_email: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "asset_expired_limit")]
  asset_expired_limit: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "prior_notification_seconds")]
  prior_notification_seconds: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "cq.dam.expiry.notification.url.protocol")]
  cq_dam_expiry_notification_url_protocol: Option<::models::ConfigNodePropertyString>
}

impl ComDayCqDamCoreImplExpiryNotificationJobImplProperties {
  pub fn new() -> ComDayCqDamCoreImplExpiryNotificationJobImplProperties {
    ComDayCqDamCoreImplExpiryNotificationJobImplProperties {
      cq_dam_expiry_notification_scheduler_istimebased: None,
      cq_dam_expiry_notification_scheduler_timebased_rule: None,
      cq_dam_expiry_notification_scheduler_period_rule: None,
      send_email: None,
      asset_expired_limit: None,
      prior_notification_seconds: None,
      cq_dam_expiry_notification_url_protocol: None
    }
  }

  pub fn set_cq_dam_expiry_notification_scheduler_istimebased(&mut self, cq_dam_expiry_notification_scheduler_istimebased: ::models::ConfigNodePropertyBoolean) {
    self.cq_dam_expiry_notification_scheduler_istimebased = Some(cq_dam_expiry_notification_scheduler_istimebased);
  }

  pub fn with_cq_dam_expiry_notification_scheduler_istimebased(mut self, cq_dam_expiry_notification_scheduler_istimebased: ::models::ConfigNodePropertyBoolean) -> ComDayCqDamCoreImplExpiryNotificationJobImplProperties {
    self.cq_dam_expiry_notification_scheduler_istimebased = Some(cq_dam_expiry_notification_scheduler_istimebased);
    self
  }

  pub fn cq_dam_expiry_notification_scheduler_istimebased(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.cq_dam_expiry_notification_scheduler_istimebased.as_ref()
  }

  pub fn reset_cq_dam_expiry_notification_scheduler_istimebased(&mut self) {
    self.cq_dam_expiry_notification_scheduler_istimebased = None;
  }

  pub fn set_cq_dam_expiry_notification_scheduler_timebased_rule(&mut self, cq_dam_expiry_notification_scheduler_timebased_rule: ::models::ConfigNodePropertyString) {
    self.cq_dam_expiry_notification_scheduler_timebased_rule = Some(cq_dam_expiry_notification_scheduler_timebased_rule);
  }

  pub fn with_cq_dam_expiry_notification_scheduler_timebased_rule(mut self, cq_dam_expiry_notification_scheduler_timebased_rule: ::models::ConfigNodePropertyString) -> ComDayCqDamCoreImplExpiryNotificationJobImplProperties {
    self.cq_dam_expiry_notification_scheduler_timebased_rule = Some(cq_dam_expiry_notification_scheduler_timebased_rule);
    self
  }

  pub fn cq_dam_expiry_notification_scheduler_timebased_rule(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.cq_dam_expiry_notification_scheduler_timebased_rule.as_ref()
  }

  pub fn reset_cq_dam_expiry_notification_scheduler_timebased_rule(&mut self) {
    self.cq_dam_expiry_notification_scheduler_timebased_rule = None;
  }

  pub fn set_cq_dam_expiry_notification_scheduler_period_rule(&mut self, cq_dam_expiry_notification_scheduler_period_rule: ::models::ConfigNodePropertyInteger) {
    self.cq_dam_expiry_notification_scheduler_period_rule = Some(cq_dam_expiry_notification_scheduler_period_rule);
  }

  pub fn with_cq_dam_expiry_notification_scheduler_period_rule(mut self, cq_dam_expiry_notification_scheduler_period_rule: ::models::ConfigNodePropertyInteger) -> ComDayCqDamCoreImplExpiryNotificationJobImplProperties {
    self.cq_dam_expiry_notification_scheduler_period_rule = Some(cq_dam_expiry_notification_scheduler_period_rule);
    self
  }

  pub fn cq_dam_expiry_notification_scheduler_period_rule(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.cq_dam_expiry_notification_scheduler_period_rule.as_ref()
  }

  pub fn reset_cq_dam_expiry_notification_scheduler_period_rule(&mut self) {
    self.cq_dam_expiry_notification_scheduler_period_rule = None;
  }

  pub fn set_send_email(&mut self, send_email: ::models::ConfigNodePropertyBoolean) {
    self.send_email = Some(send_email);
  }

  pub fn with_send_email(mut self, send_email: ::models::ConfigNodePropertyBoolean) -> ComDayCqDamCoreImplExpiryNotificationJobImplProperties {
    self.send_email = Some(send_email);
    self
  }

  pub fn send_email(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.send_email.as_ref()
  }

  pub fn reset_send_email(&mut self) {
    self.send_email = None;
  }

  pub fn set_asset_expired_limit(&mut self, asset_expired_limit: ::models::ConfigNodePropertyInteger) {
    self.asset_expired_limit = Some(asset_expired_limit);
  }

  pub fn with_asset_expired_limit(mut self, asset_expired_limit: ::models::ConfigNodePropertyInteger) -> ComDayCqDamCoreImplExpiryNotificationJobImplProperties {
    self.asset_expired_limit = Some(asset_expired_limit);
    self
  }

  pub fn asset_expired_limit(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.asset_expired_limit.as_ref()
  }

  pub fn reset_asset_expired_limit(&mut self) {
    self.asset_expired_limit = None;
  }

  pub fn set_prior_notification_seconds(&mut self, prior_notification_seconds: ::models::ConfigNodePropertyInteger) {
    self.prior_notification_seconds = Some(prior_notification_seconds);
  }

  pub fn with_prior_notification_seconds(mut self, prior_notification_seconds: ::models::ConfigNodePropertyInteger) -> ComDayCqDamCoreImplExpiryNotificationJobImplProperties {
    self.prior_notification_seconds = Some(prior_notification_seconds);
    self
  }

  pub fn prior_notification_seconds(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.prior_notification_seconds.as_ref()
  }

  pub fn reset_prior_notification_seconds(&mut self) {
    self.prior_notification_seconds = None;
  }

  pub fn set_cq_dam_expiry_notification_url_protocol(&mut self, cq_dam_expiry_notification_url_protocol: ::models::ConfigNodePropertyString) {
    self.cq_dam_expiry_notification_url_protocol = Some(cq_dam_expiry_notification_url_protocol);
  }

  pub fn with_cq_dam_expiry_notification_url_protocol(mut self, cq_dam_expiry_notification_url_protocol: ::models::ConfigNodePropertyString) -> ComDayCqDamCoreImplExpiryNotificationJobImplProperties {
    self.cq_dam_expiry_notification_url_protocol = Some(cq_dam_expiry_notification_url_protocol);
    self
  }

  pub fn cq_dam_expiry_notification_url_protocol(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.cq_dam_expiry_notification_url_protocol.as_ref()
  }

  pub fn reset_cq_dam_expiry_notification_url_protocol(&mut self) {
    self.cq_dam_expiry_notification_url_protocol = None;
  }

}



