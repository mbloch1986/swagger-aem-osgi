/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties()
{
    m_Dav_rootIsSet = false;
    m_Dav_create_absolute_uriIsSet = false;
    m_Dav_realmIsSet = false;
    m_Collection_typesIsSet = false;
    m_Filter_prefixesIsSet = false;
    m_Filter_typesIsSet = false;
    m_Filter_urisIsSet = false;
    m_Type_collectionsIsSet = false;
    m_Type_noncollectionsIsSet = false;
    m_Type_contentIsSet = false;
    
}

OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::~OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties()
{
}

void OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_Dav_rootIsSet)
    {
        val["dav.root"] = ModelBase::toJson(m_Dav_root);
    }
    if(m_Dav_create_absolute_uriIsSet)
    {
        val["dav.create-absolute-uri"] = ModelBase::toJson(m_Dav_create_absolute_uri);
    }
    if(m_Dav_realmIsSet)
    {
        val["dav.realm"] = ModelBase::toJson(m_Dav_realm);
    }
    if(m_Collection_typesIsSet)
    {
        val["collection.types"] = ModelBase::toJson(m_Collection_types);
    }
    if(m_Filter_prefixesIsSet)
    {
        val["filter.prefixes"] = ModelBase::toJson(m_Filter_prefixes);
    }
    if(m_Filter_typesIsSet)
    {
        val["filter.types"] = ModelBase::toJson(m_Filter_types);
    }
    if(m_Filter_urisIsSet)
    {
        val["filter.uris"] = ModelBase::toJson(m_Filter_uris);
    }
    if(m_Type_collectionsIsSet)
    {
        val["type.collections"] = ModelBase::toJson(m_Type_collections);
    }
    if(m_Type_noncollectionsIsSet)
    {
        val["type.noncollections"] = ModelBase::toJson(m_Type_noncollections);
    }
    if(m_Type_contentIsSet)
    {
        val["type.content"] = ModelBase::toJson(m_Type_content);
    }
    

    return val;
}

void OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::fromJson(nlohmann::json& val)
{
    if(val.find("dav.root") != val.end())
    {
        if(!val["dav.root"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["dav.root"]);
            setDavRoot( newItem );
        }
        
    }
    if(val.find("dav.create-absolute-uri") != val.end())
    {
        if(!val["dav.create-absolute-uri"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["dav.create-absolute-uri"]);
            setDavCreateAbsoluteUri( newItem );
        }
        
    }
    if(val.find("dav.realm") != val.end())
    {
        if(!val["dav.realm"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["dav.realm"]);
            setDavRealm( newItem );
        }
        
    }
    if(val.find("collection.types") != val.end())
    {
        if(!val["collection.types"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["collection.types"]);
            setCollectionTypes( newItem );
        }
        
    }
    if(val.find("filter.prefixes") != val.end())
    {
        if(!val["filter.prefixes"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["filter.prefixes"]);
            setFilterPrefixes( newItem );
        }
        
    }
    if(val.find("filter.types") != val.end())
    {
        if(!val["filter.types"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["filter.types"]);
            setFilterTypes( newItem );
        }
        
    }
    if(val.find("filter.uris") != val.end())
    {
        if(!val["filter.uris"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["filter.uris"]);
            setFilterUris( newItem );
        }
        
    }
    if(val.find("type.collections") != val.end())
    {
        if(!val["type.collections"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["type.collections"]);
            setTypeCollections( newItem );
        }
        
    }
    if(val.find("type.noncollections") != val.end())
    {
        if(!val["type.noncollections"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["type.noncollections"]);
            setTypeNoncollections( newItem );
        }
        
    }
    if(val.find("type.content") != val.end())
    {
        if(!val["type.content"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["type.content"]);
            setTypeContent( newItem );
        }
        
    }
    
}


ConfigNodePropertyString OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::getDavRoot() const
{
    return m_Dav_root;
}
void OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::setDavRoot(ConfigNodePropertyString const& value)
{
    m_Dav_root = value;
    m_Dav_rootIsSet = true;
}
bool OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::davRootIsSet() const
{
    return m_Dav_rootIsSet;
}
void OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::unsetDav_root()
{
    m_Dav_rootIsSet = false;
}
ConfigNodePropertyBoolean OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::getDavCreateAbsoluteUri() const
{
    return m_Dav_create_absolute_uri;
}
void OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::setDavCreateAbsoluteUri(ConfigNodePropertyBoolean const& value)
{
    m_Dav_create_absolute_uri = value;
    m_Dav_create_absolute_uriIsSet = true;
}
bool OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::davCreateAbsoluteUriIsSet() const
{
    return m_Dav_create_absolute_uriIsSet;
}
void OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::unsetDav_create_absolute_uri()
{
    m_Dav_create_absolute_uriIsSet = false;
}
ConfigNodePropertyString OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::getDavRealm() const
{
    return m_Dav_realm;
}
void OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::setDavRealm(ConfigNodePropertyString const& value)
{
    m_Dav_realm = value;
    m_Dav_realmIsSet = true;
}
bool OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::davRealmIsSet() const
{
    return m_Dav_realmIsSet;
}
void OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::unsetDav_realm()
{
    m_Dav_realmIsSet = false;
}
ConfigNodePropertyArray OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::getCollectionTypes() const
{
    return m_Collection_types;
}
void OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::setCollectionTypes(ConfigNodePropertyArray const& value)
{
    m_Collection_types = value;
    m_Collection_typesIsSet = true;
}
bool OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::collectionTypesIsSet() const
{
    return m_Collection_typesIsSet;
}
void OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::unsetCollection_types()
{
    m_Collection_typesIsSet = false;
}
ConfigNodePropertyArray OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::getFilterPrefixes() const
{
    return m_Filter_prefixes;
}
void OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::setFilterPrefixes(ConfigNodePropertyArray const& value)
{
    m_Filter_prefixes = value;
    m_Filter_prefixesIsSet = true;
}
bool OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::filterPrefixesIsSet() const
{
    return m_Filter_prefixesIsSet;
}
void OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::unsetFilter_prefixes()
{
    m_Filter_prefixesIsSet = false;
}
ConfigNodePropertyString OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::getFilterTypes() const
{
    return m_Filter_types;
}
void OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::setFilterTypes(ConfigNodePropertyString const& value)
{
    m_Filter_types = value;
    m_Filter_typesIsSet = true;
}
bool OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::filterTypesIsSet() const
{
    return m_Filter_typesIsSet;
}
void OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::unsetFilter_types()
{
    m_Filter_typesIsSet = false;
}
ConfigNodePropertyString OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::getFilterUris() const
{
    return m_Filter_uris;
}
void OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::setFilterUris(ConfigNodePropertyString const& value)
{
    m_Filter_uris = value;
    m_Filter_urisIsSet = true;
}
bool OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::filterUrisIsSet() const
{
    return m_Filter_urisIsSet;
}
void OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::unsetFilter_uris()
{
    m_Filter_urisIsSet = false;
}
ConfigNodePropertyString OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::getTypeCollections() const
{
    return m_Type_collections;
}
void OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::setTypeCollections(ConfigNodePropertyString const& value)
{
    m_Type_collections = value;
    m_Type_collectionsIsSet = true;
}
bool OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::typeCollectionsIsSet() const
{
    return m_Type_collectionsIsSet;
}
void OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::unsetType_collections()
{
    m_Type_collectionsIsSet = false;
}
ConfigNodePropertyString OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::getTypeNoncollections() const
{
    return m_Type_noncollections;
}
void OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::setTypeNoncollections(ConfigNodePropertyString const& value)
{
    m_Type_noncollections = value;
    m_Type_noncollectionsIsSet = true;
}
bool OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::typeNoncollectionsIsSet() const
{
    return m_Type_noncollectionsIsSet;
}
void OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::unsetType_noncollections()
{
    m_Type_noncollectionsIsSet = false;
}
ConfigNodePropertyString OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::getTypeContent() const
{
    return m_Type_content;
}
void OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::setTypeContent(ConfigNodePropertyString const& value)
{
    m_Type_content = value;
    m_Type_contentIsSet = true;
}
bool OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::typeContentIsSet() const
{
    return m_Type_contentIsSet;
}
void OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletProperties::unsetType_content()
{
    m_Type_contentIsSet = false;
}

}
}
}
}

