/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteProperties {
  #[serde(rename = "allowed.paths")]
  allowed_paths: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "cq.analytics.saint.exporter.pagesize")]
  cq_analytics_saint_exporter_pagesize: Option<::models::ConfigNodePropertyInteger>
}

impl ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteProperties {
  pub fn new() -> ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteProperties {
    ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteProperties {
      allowed_paths: None,
      cq_analytics_saint_exporter_pagesize: None
    }
  }

  pub fn set_allowed_paths(&mut self, allowed_paths: ::models::ConfigNodePropertyArray) {
    self.allowed_paths = Some(allowed_paths);
  }

  pub fn with_allowed_paths(mut self, allowed_paths: ::models::ConfigNodePropertyArray) -> ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteProperties {
    self.allowed_paths = Some(allowed_paths);
    self
  }

  pub fn allowed_paths(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.allowed_paths.as_ref()
  }

  pub fn reset_allowed_paths(&mut self) {
    self.allowed_paths = None;
  }

  pub fn set_cq_analytics_saint_exporter_pagesize(&mut self, cq_analytics_saint_exporter_pagesize: ::models::ConfigNodePropertyInteger) {
    self.cq_analytics_saint_exporter_pagesize = Some(cq_analytics_saint_exporter_pagesize);
  }

  pub fn with_cq_analytics_saint_exporter_pagesize(mut self, cq_analytics_saint_exporter_pagesize: ::models::ConfigNodePropertyInteger) -> ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteProperties {
    self.cq_analytics_saint_exporter_pagesize = Some(cq_analytics_saint_exporter_pagesize);
    self
  }

  pub fn cq_analytics_saint_exporter_pagesize(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.cq_analytics_saint_exporter_pagesize.as_ref()
  }

  pub fn reset_cq_analytics_saint_exporter_pagesize(&mut self) {
    self.cq_analytics_saint_exporter_pagesize = None;
  }

}



