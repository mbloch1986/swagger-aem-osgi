/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProperties {
  #[serde(rename = "com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.projectPath")]
  com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_project_path: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.scheduleFrequency")]
  com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_schedule_frequency: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.pingTimeout")]
  com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_ping_timeout: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.recipients")]
  com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_recipients: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.smtpserver")]
  com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_smtpserver: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.smtpport")]
  com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_smtpport: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.usetls")]
  com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_usetls: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.username")]
  com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_username: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.password")]
  com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_password: Option<::models::ConfigNodePropertyString>
}

impl ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProperties {
  pub fn new() -> ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProperties {
    ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProperties {
      com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_project_path: None,
      com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_schedule_frequency: None,
      com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_ping_timeout: None,
      com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_recipients: None,
      com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_smtpserver: None,
      com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_smtpport: None,
      com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_usetls: None,
      com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_username: None,
      com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_password: None
    }
  }

  pub fn set_com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_project_path(&mut self, com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_project_path: ::models::ConfigNodePropertyArray) {
    self.com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_project_path = Some(com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_project_path);
  }

  pub fn with_com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_project_path(mut self, com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_project_path: ::models::ConfigNodePropertyArray) -> ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProperties {
    self.com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_project_path = Some(com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_project_path);
    self
  }

  pub fn com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_project_path(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_project_path.as_ref()
  }

  pub fn reset_com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_project_path(&mut self) {
    self.com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_project_path = None;
  }

  pub fn set_com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_schedule_frequency(&mut self, com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_schedule_frequency: ::models::ConfigNodePropertyString) {
    self.com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_schedule_frequency = Some(com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_schedule_frequency);
  }

  pub fn with_com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_schedule_frequency(mut self, com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_schedule_frequency: ::models::ConfigNodePropertyString) -> ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProperties {
    self.com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_schedule_frequency = Some(com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_schedule_frequency);
    self
  }

  pub fn com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_schedule_frequency(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_schedule_frequency.as_ref()
  }

  pub fn reset_com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_schedule_frequency(&mut self) {
    self.com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_schedule_frequency = None;
  }

  pub fn set_com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_ping_timeout(&mut self, com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_ping_timeout: ::models::ConfigNodePropertyInteger) {
    self.com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_ping_timeout = Some(com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_ping_timeout);
  }

  pub fn with_com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_ping_timeout(mut self, com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_ping_timeout: ::models::ConfigNodePropertyInteger) -> ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProperties {
    self.com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_ping_timeout = Some(com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_ping_timeout);
    self
  }

  pub fn com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_ping_timeout(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_ping_timeout.as_ref()
  }

  pub fn reset_com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_ping_timeout(&mut self) {
    self.com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_ping_timeout = None;
  }

  pub fn set_com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_recipients(&mut self, com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_recipients: ::models::ConfigNodePropertyString) {
    self.com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_recipients = Some(com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_recipients);
  }

  pub fn with_com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_recipients(mut self, com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_recipients: ::models::ConfigNodePropertyString) -> ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProperties {
    self.com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_recipients = Some(com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_recipients);
    self
  }

  pub fn com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_recipients(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_recipients.as_ref()
  }

  pub fn reset_com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_recipients(&mut self) {
    self.com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_recipients = None;
  }

  pub fn set_com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_smtpserver(&mut self, com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_smtpserver: ::models::ConfigNodePropertyString) {
    self.com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_smtpserver = Some(com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_smtpserver);
  }

  pub fn with_com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_smtpserver(mut self, com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_smtpserver: ::models::ConfigNodePropertyString) -> ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProperties {
    self.com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_smtpserver = Some(com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_smtpserver);
    self
  }

  pub fn com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_smtpserver(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_smtpserver.as_ref()
  }

  pub fn reset_com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_smtpserver(&mut self) {
    self.com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_smtpserver = None;
  }

  pub fn set_com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_smtpport(&mut self, com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_smtpport: ::models::ConfigNodePropertyInteger) {
    self.com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_smtpport = Some(com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_smtpport);
  }

  pub fn with_com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_smtpport(mut self, com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_smtpport: ::models::ConfigNodePropertyInteger) -> ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProperties {
    self.com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_smtpport = Some(com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_smtpport);
    self
  }

  pub fn com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_smtpport(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_smtpport.as_ref()
  }

  pub fn reset_com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_smtpport(&mut self) {
    self.com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_smtpport = None;
  }

  pub fn set_com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_usetls(&mut self, com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_usetls: ::models::ConfigNodePropertyBoolean) {
    self.com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_usetls = Some(com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_usetls);
  }

  pub fn with_com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_usetls(mut self, com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_usetls: ::models::ConfigNodePropertyBoolean) -> ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProperties {
    self.com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_usetls = Some(com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_usetls);
    self
  }

  pub fn com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_usetls(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_usetls.as_ref()
  }

  pub fn reset_com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_usetls(&mut self) {
    self.com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_usetls = None;
  }

  pub fn set_com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_username(&mut self, com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_username: ::models::ConfigNodePropertyString) {
    self.com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_username = Some(com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_username);
  }

  pub fn with_com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_username(mut self, com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_username: ::models::ConfigNodePropertyString) -> ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProperties {
    self.com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_username = Some(com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_username);
    self
  }

  pub fn com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_username(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_username.as_ref()
  }

  pub fn reset_com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_username(&mut self) {
    self.com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_username = None;
  }

  pub fn set_com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_password(&mut self, com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_password: ::models::ConfigNodePropertyString) {
    self.com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_password = Some(com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_password);
  }

  pub fn with_com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_password(mut self, com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_password: ::models::ConfigNodePropertyString) -> ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProperties {
    self.com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_password = Some(com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_password);
    self
  }

  pub fn com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_password(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_password.as_ref()
  }

  pub fn reset_com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_password(&mut self) {
    self.com_adobe_cq_screens_monitoring_impl_screens_monitoring_service_impl_password = None;
  }

}



