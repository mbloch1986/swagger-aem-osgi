<?php
/**
 * OrgApacheSlingEventJobsQueueConfigurationProperties
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.2.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * OrgApacheSlingEventJobsQueueConfigurationProperties Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class OrgApacheSlingEventJobsQueueConfigurationProperties implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'orgApacheSlingEventJobsQueueConfigurationProperties';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'queue_name' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'queue_topics' => '\OpenAPI\Client\Model\ConfigNodePropertyArray',
        'queue_type' => '\OpenAPI\Client\Model\ConfigNodePropertyDropDown',
        'queue_priority' => '\OpenAPI\Client\Model\ConfigNodePropertyDropDown',
        'queue_retries' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'queue_retrydelay' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'queue_maxparallel' => '\OpenAPI\Client\Model\ConfigNodePropertyFloat',
        'queue_keep_jobs' => '\OpenAPI\Client\Model\ConfigNodePropertyBoolean',
        'queue_prefer_run_on_creation_instance' => '\OpenAPI\Client\Model\ConfigNodePropertyBoolean',
        'queue_thread_pool_size' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'service_ranking' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'queue_name' => null,
        'queue_topics' => null,
        'queue_type' => null,
        'queue_priority' => null,
        'queue_retries' => null,
        'queue_retrydelay' => null,
        'queue_maxparallel' => null,
        'queue_keep_jobs' => null,
        'queue_prefer_run_on_creation_instance' => null,
        'queue_thread_pool_size' => null,
        'service_ranking' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'queue_name' => 'queue.name',
        'queue_topics' => 'queue.topics',
        'queue_type' => 'queue.type',
        'queue_priority' => 'queue.priority',
        'queue_retries' => 'queue.retries',
        'queue_retrydelay' => 'queue.retrydelay',
        'queue_maxparallel' => 'queue.maxparallel',
        'queue_keep_jobs' => 'queue.keepJobs',
        'queue_prefer_run_on_creation_instance' => 'queue.preferRunOnCreationInstance',
        'queue_thread_pool_size' => 'queue.threadPoolSize',
        'service_ranking' => 'service.ranking'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'queue_name' => 'setQueueName',
        'queue_topics' => 'setQueueTopics',
        'queue_type' => 'setQueueType',
        'queue_priority' => 'setQueuePriority',
        'queue_retries' => 'setQueueRetries',
        'queue_retrydelay' => 'setQueueRetrydelay',
        'queue_maxparallel' => 'setQueueMaxparallel',
        'queue_keep_jobs' => 'setQueueKeepJobs',
        'queue_prefer_run_on_creation_instance' => 'setQueuePreferRunOnCreationInstance',
        'queue_thread_pool_size' => 'setQueueThreadPoolSize',
        'service_ranking' => 'setServiceRanking'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'queue_name' => 'getQueueName',
        'queue_topics' => 'getQueueTopics',
        'queue_type' => 'getQueueType',
        'queue_priority' => 'getQueuePriority',
        'queue_retries' => 'getQueueRetries',
        'queue_retrydelay' => 'getQueueRetrydelay',
        'queue_maxparallel' => 'getQueueMaxparallel',
        'queue_keep_jobs' => 'getQueueKeepJobs',
        'queue_prefer_run_on_creation_instance' => 'getQueuePreferRunOnCreationInstance',
        'queue_thread_pool_size' => 'getQueueThreadPoolSize',
        'service_ranking' => 'getServiceRanking'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['queue_name'] = isset($data['queue_name']) ? $data['queue_name'] : null;
        $this->container['queue_topics'] = isset($data['queue_topics']) ? $data['queue_topics'] : null;
        $this->container['queue_type'] = isset($data['queue_type']) ? $data['queue_type'] : null;
        $this->container['queue_priority'] = isset($data['queue_priority']) ? $data['queue_priority'] : null;
        $this->container['queue_retries'] = isset($data['queue_retries']) ? $data['queue_retries'] : null;
        $this->container['queue_retrydelay'] = isset($data['queue_retrydelay']) ? $data['queue_retrydelay'] : null;
        $this->container['queue_maxparallel'] = isset($data['queue_maxparallel']) ? $data['queue_maxparallel'] : null;
        $this->container['queue_keep_jobs'] = isset($data['queue_keep_jobs']) ? $data['queue_keep_jobs'] : null;
        $this->container['queue_prefer_run_on_creation_instance'] = isset($data['queue_prefer_run_on_creation_instance']) ? $data['queue_prefer_run_on_creation_instance'] : null;
        $this->container['queue_thread_pool_size'] = isset($data['queue_thread_pool_size']) ? $data['queue_thread_pool_size'] : null;
        $this->container['service_ranking'] = isset($data['service_ranking']) ? $data['service_ranking'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets queue_name
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getQueueName()
    {
        return $this->container['queue_name'];
    }

    /**
     * Sets queue_name
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $queue_name queue_name
     *
     * @return $this
     */
    public function setQueueName($queue_name)
    {
        $this->container['queue_name'] = $queue_name;

        return $this;
    }

    /**
     * Gets queue_topics
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyArray|null
     */
    public function getQueueTopics()
    {
        return $this->container['queue_topics'];
    }

    /**
     * Sets queue_topics
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyArray|null $queue_topics queue_topics
     *
     * @return $this
     */
    public function setQueueTopics($queue_topics)
    {
        $this->container['queue_topics'] = $queue_topics;

        return $this;
    }

    /**
     * Gets queue_type
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyDropDown|null
     */
    public function getQueueType()
    {
        return $this->container['queue_type'];
    }

    /**
     * Sets queue_type
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyDropDown|null $queue_type queue_type
     *
     * @return $this
     */
    public function setQueueType($queue_type)
    {
        $this->container['queue_type'] = $queue_type;

        return $this;
    }

    /**
     * Gets queue_priority
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyDropDown|null
     */
    public function getQueuePriority()
    {
        return $this->container['queue_priority'];
    }

    /**
     * Sets queue_priority
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyDropDown|null $queue_priority queue_priority
     *
     * @return $this
     */
    public function setQueuePriority($queue_priority)
    {
        $this->container['queue_priority'] = $queue_priority;

        return $this;
    }

    /**
     * Gets queue_retries
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getQueueRetries()
    {
        return $this->container['queue_retries'];
    }

    /**
     * Sets queue_retries
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $queue_retries queue_retries
     *
     * @return $this
     */
    public function setQueueRetries($queue_retries)
    {
        $this->container['queue_retries'] = $queue_retries;

        return $this;
    }

    /**
     * Gets queue_retrydelay
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getQueueRetrydelay()
    {
        return $this->container['queue_retrydelay'];
    }

    /**
     * Sets queue_retrydelay
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $queue_retrydelay queue_retrydelay
     *
     * @return $this
     */
    public function setQueueRetrydelay($queue_retrydelay)
    {
        $this->container['queue_retrydelay'] = $queue_retrydelay;

        return $this;
    }

    /**
     * Gets queue_maxparallel
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyFloat|null
     */
    public function getQueueMaxparallel()
    {
        return $this->container['queue_maxparallel'];
    }

    /**
     * Sets queue_maxparallel
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyFloat|null $queue_maxparallel queue_maxparallel
     *
     * @return $this
     */
    public function setQueueMaxparallel($queue_maxparallel)
    {
        $this->container['queue_maxparallel'] = $queue_maxparallel;

        return $this;
    }

    /**
     * Gets queue_keep_jobs
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null
     */
    public function getQueueKeepJobs()
    {
        return $this->container['queue_keep_jobs'];
    }

    /**
     * Sets queue_keep_jobs
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null $queue_keep_jobs queue_keep_jobs
     *
     * @return $this
     */
    public function setQueueKeepJobs($queue_keep_jobs)
    {
        $this->container['queue_keep_jobs'] = $queue_keep_jobs;

        return $this;
    }

    /**
     * Gets queue_prefer_run_on_creation_instance
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null
     */
    public function getQueuePreferRunOnCreationInstance()
    {
        return $this->container['queue_prefer_run_on_creation_instance'];
    }

    /**
     * Sets queue_prefer_run_on_creation_instance
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null $queue_prefer_run_on_creation_instance queue_prefer_run_on_creation_instance
     *
     * @return $this
     */
    public function setQueuePreferRunOnCreationInstance($queue_prefer_run_on_creation_instance)
    {
        $this->container['queue_prefer_run_on_creation_instance'] = $queue_prefer_run_on_creation_instance;

        return $this;
    }

    /**
     * Gets queue_thread_pool_size
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getQueueThreadPoolSize()
    {
        return $this->container['queue_thread_pool_size'];
    }

    /**
     * Sets queue_thread_pool_size
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $queue_thread_pool_size queue_thread_pool_size
     *
     * @return $this
     */
    public function setQueueThreadPoolSize($queue_thread_pool_size)
    {
        $this->container['queue_thread_pool_size'] = $queue_thread_pool_size;

        return $this;
    }

    /**
     * Gets service_ranking
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getServiceRanking()
    {
        return $this->container['service_ranking'];
    }

    /**
     * Sets service_ranking
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $service_ranking service_ranking
     *
     * @return $this
     */
    public function setServiceRanking($service_ranking)
    {
        $this->container['service_ranking'] = $service_ranking;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


