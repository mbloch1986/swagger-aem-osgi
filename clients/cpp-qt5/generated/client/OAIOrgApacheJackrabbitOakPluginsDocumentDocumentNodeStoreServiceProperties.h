/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties.h
 *
 * 
 */

#ifndef OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties_H_
#define OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties_H_

#include <QJsonObject>


#include "OAIOAIConfigNodePropertyArray.h"
#include "OAIOAIConfigNodePropertyBoolean.h"
#include "OAIOAIConfigNodePropertyDropDown.h"
#include "OAIOAIConfigNodePropertyInteger.h"
#include "OAIOAIConfigNodePropertyString.h"

#include "OAIObject.h"

namespace OpenAPI {

class OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties: public OAIObject {
public:
    OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties();
    OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties(QString json);
    ~OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties();
    void init();
    void cleanup();

    QString asJson () override;
    QJsonObject asJsonObject() override;
    void fromJsonObject(QJsonObject json) override;
    OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties* fromJson(QString jsonString) override;

    OAIConfigNodePropertyString* getMongouri();
    void setMongouri(OAIConfigNodePropertyString* mongouri);

    OAIConfigNodePropertyString* getDb();
    void setDb(OAIConfigNodePropertyString* db);

    OAIConfigNodePropertyBoolean* getSocketKeepAlive();
    void setSocketKeepAlive(OAIConfigNodePropertyBoolean* socket_keep_alive);

    OAIConfigNodePropertyInteger* getCache();
    void setCache(OAIConfigNodePropertyInteger* cache);

    OAIConfigNodePropertyInteger* getNodeCachePercentage();
    void setNodeCachePercentage(OAIConfigNodePropertyInteger* node_cache_percentage);

    OAIConfigNodePropertyInteger* getPrevDocCachePercentage();
    void setPrevDocCachePercentage(OAIConfigNodePropertyInteger* prev_doc_cache_percentage);

    OAIConfigNodePropertyInteger* getChildrenCachePercentage();
    void setChildrenCachePercentage(OAIConfigNodePropertyInteger* children_cache_percentage);

    OAIConfigNodePropertyInteger* getDiffCachePercentage();
    void setDiffCachePercentage(OAIConfigNodePropertyInteger* diff_cache_percentage);

    OAIConfigNodePropertyInteger* getCacheSegmentCount();
    void setCacheSegmentCount(OAIConfigNodePropertyInteger* cache_segment_count);

    OAIConfigNodePropertyInteger* getCacheStackMoveDistance();
    void setCacheStackMoveDistance(OAIConfigNodePropertyInteger* cache_stack_move_distance);

    OAIConfigNodePropertyInteger* getBlobCacheSize();
    void setBlobCacheSize(OAIConfigNodePropertyInteger* blob_cache_size);

    OAIConfigNodePropertyString* getPersistentCache();
    void setPersistentCache(OAIConfigNodePropertyString* persistent_cache);

    OAIConfigNodePropertyString* getJournalCache();
    void setJournalCache(OAIConfigNodePropertyString* journal_cache);

    OAIConfigNodePropertyBoolean* getCustomBlobStore();
    void setCustomBlobStore(OAIConfigNodePropertyBoolean* custom_blob_store);

    OAIConfigNodePropertyInteger* getJournalGcInterval();
    void setJournalGcInterval(OAIConfigNodePropertyInteger* journal_gc_interval);

    OAIConfigNodePropertyInteger* getJournalGcMaxAge();
    void setJournalGcMaxAge(OAIConfigNodePropertyInteger* journal_gc_max_age);

    OAIConfigNodePropertyBoolean* getPrefetchExternalChanges();
    void setPrefetchExternalChanges(OAIConfigNodePropertyBoolean* prefetch_external_changes);

    OAIConfigNodePropertyString* getRole();
    void setRole(OAIConfigNodePropertyString* role);

    OAIConfigNodePropertyInteger* getVersionGcMaxAgeInSecs();
    void setVersionGcMaxAgeInSecs(OAIConfigNodePropertyInteger* version_gc_max_age_in_secs);

    OAIConfigNodePropertyString* getVersionGcExpression();
    void setVersionGcExpression(OAIConfigNodePropertyString* version_gc_expression);

    OAIConfigNodePropertyInteger* getVersionGcTimeLimitInSecs();
    void setVersionGcTimeLimitInSecs(OAIConfigNodePropertyInteger* version_gc_time_limit_in_secs);

    OAIConfigNodePropertyInteger* getBlobGcMaxAgeInSecs();
    void setBlobGcMaxAgeInSecs(OAIConfigNodePropertyInteger* blob_gc_max_age_in_secs);

    OAIConfigNodePropertyInteger* getBlobTrackSnapshotIntervalInSecs();
    void setBlobTrackSnapshotIntervalInSecs(OAIConfigNodePropertyInteger* blob_track_snapshot_interval_in_secs);

    OAIConfigNodePropertyString* getRepositoryHome();
    void setRepositoryHome(OAIConfigNodePropertyString* repository_home);

    OAIConfigNodePropertyInteger* getMaxReplicationLagInSecs();
    void setMaxReplicationLagInSecs(OAIConfigNodePropertyInteger* max_replication_lag_in_secs);

    OAIConfigNodePropertyDropDown* getDocumentStoreType();
    void setDocumentStoreType(OAIConfigNodePropertyDropDown* document_store_type);

    OAIConfigNodePropertyBoolean* getBundlingDisabled();
    void setBundlingDisabled(OAIConfigNodePropertyBoolean* bundling_disabled);

    OAIConfigNodePropertyInteger* getUpdateLimit();
    void setUpdateLimit(OAIConfigNodePropertyInteger* update_limit);

    OAIConfigNodePropertyArray* getPersistentCacheIncludes();
    void setPersistentCacheIncludes(OAIConfigNodePropertyArray* persistent_cache_includes);

    OAIConfigNodePropertyDropDown* getLeaseCheckMode();
    void setLeaseCheckMode(OAIConfigNodePropertyDropDown* lease_check_mode);


    virtual bool isSet() override;

private:
    OAIConfigNodePropertyString* mongouri;
    bool m_mongouri_isSet;

    OAIConfigNodePropertyString* db;
    bool m_db_isSet;

    OAIConfigNodePropertyBoolean* socket_keep_alive;
    bool m_socket_keep_alive_isSet;

    OAIConfigNodePropertyInteger* cache;
    bool m_cache_isSet;

    OAIConfigNodePropertyInteger* node_cache_percentage;
    bool m_node_cache_percentage_isSet;

    OAIConfigNodePropertyInteger* prev_doc_cache_percentage;
    bool m_prev_doc_cache_percentage_isSet;

    OAIConfigNodePropertyInteger* children_cache_percentage;
    bool m_children_cache_percentage_isSet;

    OAIConfigNodePropertyInteger* diff_cache_percentage;
    bool m_diff_cache_percentage_isSet;

    OAIConfigNodePropertyInteger* cache_segment_count;
    bool m_cache_segment_count_isSet;

    OAIConfigNodePropertyInteger* cache_stack_move_distance;
    bool m_cache_stack_move_distance_isSet;

    OAIConfigNodePropertyInteger* blob_cache_size;
    bool m_blob_cache_size_isSet;

    OAIConfigNodePropertyString* persistent_cache;
    bool m_persistent_cache_isSet;

    OAIConfigNodePropertyString* journal_cache;
    bool m_journal_cache_isSet;

    OAIConfigNodePropertyBoolean* custom_blob_store;
    bool m_custom_blob_store_isSet;

    OAIConfigNodePropertyInteger* journal_gc_interval;
    bool m_journal_gc_interval_isSet;

    OAIConfigNodePropertyInteger* journal_gc_max_age;
    bool m_journal_gc_max_age_isSet;

    OAIConfigNodePropertyBoolean* prefetch_external_changes;
    bool m_prefetch_external_changes_isSet;

    OAIConfigNodePropertyString* role;
    bool m_role_isSet;

    OAIConfigNodePropertyInteger* version_gc_max_age_in_secs;
    bool m_version_gc_max_age_in_secs_isSet;

    OAIConfigNodePropertyString* version_gc_expression;
    bool m_version_gc_expression_isSet;

    OAIConfigNodePropertyInteger* version_gc_time_limit_in_secs;
    bool m_version_gc_time_limit_in_secs_isSet;

    OAIConfigNodePropertyInteger* blob_gc_max_age_in_secs;
    bool m_blob_gc_max_age_in_secs_isSet;

    OAIConfigNodePropertyInteger* blob_track_snapshot_interval_in_secs;
    bool m_blob_track_snapshot_interval_in_secs_isSet;

    OAIConfigNodePropertyString* repository_home;
    bool m_repository_home_isSet;

    OAIConfigNodePropertyInteger* max_replication_lag_in_secs;
    bool m_max_replication_lag_in_secs_isSet;

    OAIConfigNodePropertyDropDown* document_store_type;
    bool m_document_store_type_isSet;

    OAIConfigNodePropertyBoolean* bundling_disabled;
    bool m_bundling_disabled_isSet;

    OAIConfigNodePropertyInteger* update_limit;
    bool m_update_limit_isSet;

    OAIConfigNodePropertyArray* persistent_cache_includes;
    bool m_persistent_cache_includes_isSet;

    OAIConfigNodePropertyDropDown* lease_check_mode;
    bool m_lease_check_mode_isSet;

};

}

#endif /* OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties_H_ */
