/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIOrgApacheSlingEngineImplLogRequestLoggerProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIOrgApacheSlingEngineImplLogRequestLoggerProperties::OAIOrgApacheSlingEngineImplLogRequestLoggerProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIOrgApacheSlingEngineImplLogRequestLoggerProperties::OAIOrgApacheSlingEngineImplLogRequestLoggerProperties() {
    init();
}

OAIOrgApacheSlingEngineImplLogRequestLoggerProperties::~OAIOrgApacheSlingEngineImplLogRequestLoggerProperties() {
    this->cleanup();
}

void
OAIOrgApacheSlingEngineImplLogRequestLoggerProperties::init() {
    request_log_output = new OAIConfigNodePropertyString();
    m_request_log_output_isSet = false;
    request_log_outputtype = new OAIConfigNodePropertyDropDown();
    m_request_log_outputtype_isSet = false;
    request_log_enabled = new OAIConfigNodePropertyBoolean();
    m_request_log_enabled_isSet = false;
    access_log_output = new OAIConfigNodePropertyString();
    m_access_log_output_isSet = false;
    access_log_outputtype = new OAIConfigNodePropertyDropDown();
    m_access_log_outputtype_isSet = false;
    access_log_enabled = new OAIConfigNodePropertyBoolean();
    m_access_log_enabled_isSet = false;
}

void
OAIOrgApacheSlingEngineImplLogRequestLoggerProperties::cleanup() {
    if(request_log_output != nullptr) { 
        delete request_log_output;
    }
    if(request_log_outputtype != nullptr) { 
        delete request_log_outputtype;
    }
    if(request_log_enabled != nullptr) { 
        delete request_log_enabled;
    }
    if(access_log_output != nullptr) { 
        delete access_log_output;
    }
    if(access_log_outputtype != nullptr) { 
        delete access_log_outputtype;
    }
    if(access_log_enabled != nullptr) { 
        delete access_log_enabled;
    }
}

OAIOrgApacheSlingEngineImplLogRequestLoggerProperties*
OAIOrgApacheSlingEngineImplLogRequestLoggerProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIOrgApacheSlingEngineImplLogRequestLoggerProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&request_log_output, pJson["request.log.output"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&request_log_outputtype, pJson["request.log.outputtype"], "OAIConfigNodePropertyDropDown", "OAIConfigNodePropertyDropDown");
    
    ::OpenAPI::setValue(&request_log_enabled, pJson["request.log.enabled"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&access_log_output, pJson["access.log.output"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&access_log_outputtype, pJson["access.log.outputtype"], "OAIConfigNodePropertyDropDown", "OAIConfigNodePropertyDropDown");
    
    ::OpenAPI::setValue(&access_log_enabled, pJson["access.log.enabled"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
}

QString
OAIOrgApacheSlingEngineImplLogRequestLoggerProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIOrgApacheSlingEngineImplLogRequestLoggerProperties::asJsonObject() {
    QJsonObject obj;
    if((request_log_output != nullptr) && (request_log_output->isSet())){
        toJsonValue(QString("request.log.output"), request_log_output, obj, QString("OAIConfigNodePropertyString"));
    }
    if((request_log_outputtype != nullptr) && (request_log_outputtype->isSet())){
        toJsonValue(QString("request.log.outputtype"), request_log_outputtype, obj, QString("OAIConfigNodePropertyDropDown"));
    }
    if((request_log_enabled != nullptr) && (request_log_enabled->isSet())){
        toJsonValue(QString("request.log.enabled"), request_log_enabled, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((access_log_output != nullptr) && (access_log_output->isSet())){
        toJsonValue(QString("access.log.output"), access_log_output, obj, QString("OAIConfigNodePropertyString"));
    }
    if((access_log_outputtype != nullptr) && (access_log_outputtype->isSet())){
        toJsonValue(QString("access.log.outputtype"), access_log_outputtype, obj, QString("OAIConfigNodePropertyDropDown"));
    }
    if((access_log_enabled != nullptr) && (access_log_enabled->isSet())){
        toJsonValue(QString("access.log.enabled"), access_log_enabled, obj, QString("OAIConfigNodePropertyBoolean"));
    }

    return obj;
}

OAIConfigNodePropertyString*
OAIOrgApacheSlingEngineImplLogRequestLoggerProperties::getRequestLogOutput() {
    return request_log_output;
}
void
OAIOrgApacheSlingEngineImplLogRequestLoggerProperties::setRequestLogOutput(OAIConfigNodePropertyString* request_log_output) {
    this->request_log_output = request_log_output;
    this->m_request_log_output_isSet = true;
}

OAIConfigNodePropertyDropDown*
OAIOrgApacheSlingEngineImplLogRequestLoggerProperties::getRequestLogOutputtype() {
    return request_log_outputtype;
}
void
OAIOrgApacheSlingEngineImplLogRequestLoggerProperties::setRequestLogOutputtype(OAIConfigNodePropertyDropDown* request_log_outputtype) {
    this->request_log_outputtype = request_log_outputtype;
    this->m_request_log_outputtype_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIOrgApacheSlingEngineImplLogRequestLoggerProperties::getRequestLogEnabled() {
    return request_log_enabled;
}
void
OAIOrgApacheSlingEngineImplLogRequestLoggerProperties::setRequestLogEnabled(OAIConfigNodePropertyBoolean* request_log_enabled) {
    this->request_log_enabled = request_log_enabled;
    this->m_request_log_enabled_isSet = true;
}

OAIConfigNodePropertyString*
OAIOrgApacheSlingEngineImplLogRequestLoggerProperties::getAccessLogOutput() {
    return access_log_output;
}
void
OAIOrgApacheSlingEngineImplLogRequestLoggerProperties::setAccessLogOutput(OAIConfigNodePropertyString* access_log_output) {
    this->access_log_output = access_log_output;
    this->m_access_log_output_isSet = true;
}

OAIConfigNodePropertyDropDown*
OAIOrgApacheSlingEngineImplLogRequestLoggerProperties::getAccessLogOutputtype() {
    return access_log_outputtype;
}
void
OAIOrgApacheSlingEngineImplLogRequestLoggerProperties::setAccessLogOutputtype(OAIConfigNodePropertyDropDown* access_log_outputtype) {
    this->access_log_outputtype = access_log_outputtype;
    this->m_access_log_outputtype_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIOrgApacheSlingEngineImplLogRequestLoggerProperties::getAccessLogEnabled() {
    return access_log_enabled;
}
void
OAIOrgApacheSlingEngineImplLogRequestLoggerProperties::setAccessLogEnabled(OAIConfigNodePropertyBoolean* access_log_enabled) {
    this->access_log_enabled = access_log_enabled;
    this->m_access_log_enabled_isSet = true;
}


bool
OAIOrgApacheSlingEngineImplLogRequestLoggerProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(request_log_output != nullptr && request_log_output->isSet()){ isObjectUpdated = true; break;}
        if(request_log_outputtype != nullptr && request_log_outputtype->isSet()){ isObjectUpdated = true; break;}
        if(request_log_enabled != nullptr && request_log_enabled->isSet()){ isObjectUpdated = true; break;}
        if(access_log_output != nullptr && access_log_output->isSet()){ isObjectUpdated = true; break;}
        if(access_log_outputtype != nullptr && access_log_outputtype->isSet()){ isObjectUpdated = true; break;}
        if(access_log_enabled != nullptr && access_log_enabled->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

