/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComDayCqWcmDesignimporterImplCanvasBuilderImplProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComDayCqWcmDesignimporterImplCanvasBuilderImplProperties::OAIComDayCqWcmDesignimporterImplCanvasBuilderImplProperties(QString json) {
    this->fromJson(json);
}

OAIComDayCqWcmDesignimporterImplCanvasBuilderImplProperties::OAIComDayCqWcmDesignimporterImplCanvasBuilderImplProperties() {
    this->init();
}

OAIComDayCqWcmDesignimporterImplCanvasBuilderImplProperties::~OAIComDayCqWcmDesignimporterImplCanvasBuilderImplProperties() {
    
}

void
OAIComDayCqWcmDesignimporterImplCanvasBuilderImplProperties::init() {
    m_filepattern_isSet = false;
    m_build_page_nodes_isSet = false;
    m_build_client_libs_isSet = false;
    m_build_canvas_component_isSet = false;
}

void
OAIComDayCqWcmDesignimporterImplCanvasBuilderImplProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIComDayCqWcmDesignimporterImplCanvasBuilderImplProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(filepattern, json[QString("filepattern")]);
    
    ::OpenAPI::fromJsonValue(build_page_nodes, json[QString("build.page.nodes")]);
    
    ::OpenAPI::fromJsonValue(build_client_libs, json[QString("build.client.libs")]);
    
    ::OpenAPI::fromJsonValue(build_canvas_component, json[QString("build.canvas.component")]);
    
}

QString
OAIComDayCqWcmDesignimporterImplCanvasBuilderImplProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComDayCqWcmDesignimporterImplCanvasBuilderImplProperties::asJsonObject() const {
    QJsonObject obj;
	if(filepattern.isSet()){
        obj.insert(QString("filepattern"), ::OpenAPI::toJsonValue(filepattern));
    }
	if(build_page_nodes.isSet()){
        obj.insert(QString("build.page.nodes"), ::OpenAPI::toJsonValue(build_page_nodes));
    }
	if(build_client_libs.isSet()){
        obj.insert(QString("build.client.libs"), ::OpenAPI::toJsonValue(build_client_libs));
    }
	if(build_canvas_component.isSet()){
        obj.insert(QString("build.canvas.component"), ::OpenAPI::toJsonValue(build_canvas_component));
    }
    return obj;
}

OAIConfigNodePropertyString
OAIComDayCqWcmDesignimporterImplCanvasBuilderImplProperties::getFilepattern() const {
    return filepattern;
}
void
OAIComDayCqWcmDesignimporterImplCanvasBuilderImplProperties::setFilepattern(const OAIConfigNodePropertyString &filepattern) {
    this->filepattern = filepattern;
    this->m_filepattern_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIComDayCqWcmDesignimporterImplCanvasBuilderImplProperties::getBuildPageNodes() const {
    return build_page_nodes;
}
void
OAIComDayCqWcmDesignimporterImplCanvasBuilderImplProperties::setBuildPageNodes(const OAIConfigNodePropertyBoolean &build_page_nodes) {
    this->build_page_nodes = build_page_nodes;
    this->m_build_page_nodes_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIComDayCqWcmDesignimporterImplCanvasBuilderImplProperties::getBuildClientLibs() const {
    return build_client_libs;
}
void
OAIComDayCqWcmDesignimporterImplCanvasBuilderImplProperties::setBuildClientLibs(const OAIConfigNodePropertyBoolean &build_client_libs) {
    this->build_client_libs = build_client_libs;
    this->m_build_client_libs_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIComDayCqWcmDesignimporterImplCanvasBuilderImplProperties::getBuildCanvasComponent() const {
    return build_canvas_component;
}
void
OAIComDayCqWcmDesignimporterImplCanvasBuilderImplProperties::setBuildCanvasComponent(const OAIConfigNodePropertyBoolean &build_canvas_component) {
    this->build_canvas_component = build_canvas_component;
    this->m_build_canvas_component_isSet = true;
}


bool
OAIComDayCqWcmDesignimporterImplCanvasBuilderImplProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(filepattern.isSet()){ isObjectUpdated = true; break;}
    
        if(build_page_nodes.isSet()){ isObjectUpdated = true; break;}
    
        if(build_client_libs.isSet()){ isObjectUpdated = true; break;}
    
        if(build_canvas_component.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

