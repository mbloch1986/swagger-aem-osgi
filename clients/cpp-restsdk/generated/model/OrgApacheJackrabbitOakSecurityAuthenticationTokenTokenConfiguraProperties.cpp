/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties::OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties()
{
    m_TokenExpirationIsSet = false;
    m_TokenLengthIsSet = false;
    m_TokenRefreshIsSet = false;
    m_TokenCleanupThresholdIsSet = false;
    m_PasswordHashAlgorithmIsSet = false;
    m_PasswordHashIterationsIsSet = false;
    m_PasswordSaltSizeIsSet = false;
}

OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties::~OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties()
{
}

void OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties::validate()
{
    // TODO: implement validation
}

web::json::value OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_TokenExpirationIsSet)
    {
        val[utility::conversions::to_string_t("tokenExpiration")] = ModelBase::toJson(m_TokenExpiration);
    }
    if(m_TokenLengthIsSet)
    {
        val[utility::conversions::to_string_t("tokenLength")] = ModelBase::toJson(m_TokenLength);
    }
    if(m_TokenRefreshIsSet)
    {
        val[utility::conversions::to_string_t("tokenRefresh")] = ModelBase::toJson(m_TokenRefresh);
    }
    if(m_TokenCleanupThresholdIsSet)
    {
        val[utility::conversions::to_string_t("tokenCleanupThreshold")] = ModelBase::toJson(m_TokenCleanupThreshold);
    }
    if(m_PasswordHashAlgorithmIsSet)
    {
        val[utility::conversions::to_string_t("passwordHashAlgorithm")] = ModelBase::toJson(m_PasswordHashAlgorithm);
    }
    if(m_PasswordHashIterationsIsSet)
    {
        val[utility::conversions::to_string_t("passwordHashIterations")] = ModelBase::toJson(m_PasswordHashIterations);
    }
    if(m_PasswordSaltSizeIsSet)
    {
        val[utility::conversions::to_string_t("passwordSaltSize")] = ModelBase::toJson(m_PasswordSaltSize);
    }

    return val;
}

void OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("tokenExpiration")))
    {
        if(!val[utility::conversions::to_string_t("tokenExpiration")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("tokenExpiration")]);
            setTokenExpiration( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("tokenLength")))
    {
        if(!val[utility::conversions::to_string_t("tokenLength")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("tokenLength")]);
            setTokenLength( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("tokenRefresh")))
    {
        if(!val[utility::conversions::to_string_t("tokenRefresh")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("tokenRefresh")]);
            setTokenRefresh( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("tokenCleanupThreshold")))
    {
        if(!val[utility::conversions::to_string_t("tokenCleanupThreshold")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("tokenCleanupThreshold")]);
            setTokenCleanupThreshold( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("passwordHashAlgorithm")))
    {
        if(!val[utility::conversions::to_string_t("passwordHashAlgorithm")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("passwordHashAlgorithm")]);
            setPasswordHashAlgorithm( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("passwordHashIterations")))
    {
        if(!val[utility::conversions::to_string_t("passwordHashIterations")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("passwordHashIterations")]);
            setPasswordHashIterations( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("passwordSaltSize")))
    {
        if(!val[utility::conversions::to_string_t("passwordSaltSize")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("passwordSaltSize")]);
            setPasswordSaltSize( newItem );
        }
    }
}

void OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_TokenExpirationIsSet)
    {
        if (m_TokenExpiration.get())
        {
            m_TokenExpiration->toMultipart(multipart, utility::conversions::to_string_t("tokenExpiration."));
        }
    }
    if(m_TokenLengthIsSet)
    {
        if (m_TokenLength.get())
        {
            m_TokenLength->toMultipart(multipart, utility::conversions::to_string_t("tokenLength."));
        }
    }
    if(m_TokenRefreshIsSet)
    {
        if (m_TokenRefresh.get())
        {
            m_TokenRefresh->toMultipart(multipart, utility::conversions::to_string_t("tokenRefresh."));
        }
    }
    if(m_TokenCleanupThresholdIsSet)
    {
        if (m_TokenCleanupThreshold.get())
        {
            m_TokenCleanupThreshold->toMultipart(multipart, utility::conversions::to_string_t("tokenCleanupThreshold."));
        }
    }
    if(m_PasswordHashAlgorithmIsSet)
    {
        if (m_PasswordHashAlgorithm.get())
        {
            m_PasswordHashAlgorithm->toMultipart(multipart, utility::conversions::to_string_t("passwordHashAlgorithm."));
        }
    }
    if(m_PasswordHashIterationsIsSet)
    {
        if (m_PasswordHashIterations.get())
        {
            m_PasswordHashIterations->toMultipart(multipart, utility::conversions::to_string_t("passwordHashIterations."));
        }
    }
    if(m_PasswordSaltSizeIsSet)
    {
        if (m_PasswordSaltSize.get())
        {
            m_PasswordSaltSize->toMultipart(multipart, utility::conversions::to_string_t("passwordSaltSize."));
        }
    }
}

void OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("tokenExpiration")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("tokenExpiration")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("tokenExpiration."));
            setTokenExpiration( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("tokenLength")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("tokenLength")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("tokenLength."));
            setTokenLength( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("tokenRefresh")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("tokenRefresh")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("tokenRefresh."));
            setTokenRefresh( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("tokenCleanupThreshold")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("tokenCleanupThreshold")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("tokenCleanupThreshold."));
            setTokenCleanupThreshold( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("passwordHashAlgorithm")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("passwordHashAlgorithm")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("passwordHashAlgorithm."));
            setPasswordHashAlgorithm( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("passwordHashIterations")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("passwordHashIterations")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("passwordHashIterations."));
            setPasswordHashIterations( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("passwordSaltSize")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("passwordSaltSize")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("passwordSaltSize."));
            setPasswordSaltSize( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties::getTokenExpiration() const
{
    return m_TokenExpiration;
}


void OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties::setTokenExpiration(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_TokenExpiration = value;
    m_TokenExpirationIsSet = true;
}
bool OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties::tokenExpirationIsSet() const
{
    return m_TokenExpirationIsSet;
}

void OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties::unsetTokenExpiration()
{
    m_TokenExpirationIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties::getTokenLength() const
{
    return m_TokenLength;
}


void OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties::setTokenLength(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_TokenLength = value;
    m_TokenLengthIsSet = true;
}
bool OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties::tokenLengthIsSet() const
{
    return m_TokenLengthIsSet;
}

void OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties::unsetTokenLength()
{
    m_TokenLengthIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties::getTokenRefresh() const
{
    return m_TokenRefresh;
}


void OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties::setTokenRefresh(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_TokenRefresh = value;
    m_TokenRefreshIsSet = true;
}
bool OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties::tokenRefreshIsSet() const
{
    return m_TokenRefreshIsSet;
}

void OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties::unsetTokenRefresh()
{
    m_TokenRefreshIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties::getTokenCleanupThreshold() const
{
    return m_TokenCleanupThreshold;
}


void OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties::setTokenCleanupThreshold(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_TokenCleanupThreshold = value;
    m_TokenCleanupThresholdIsSet = true;
}
bool OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties::tokenCleanupThresholdIsSet() const
{
    return m_TokenCleanupThresholdIsSet;
}

void OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties::unsetTokenCleanupThreshold()
{
    m_TokenCleanupThresholdIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties::getPasswordHashAlgorithm() const
{
    return m_PasswordHashAlgorithm;
}


void OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties::setPasswordHashAlgorithm(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_PasswordHashAlgorithm = value;
    m_PasswordHashAlgorithmIsSet = true;
}
bool OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties::passwordHashAlgorithmIsSet() const
{
    return m_PasswordHashAlgorithmIsSet;
}

void OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties::unsetPasswordHashAlgorithm()
{
    m_PasswordHashAlgorithmIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties::getPasswordHashIterations() const
{
    return m_PasswordHashIterations;
}


void OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties::setPasswordHashIterations(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_PasswordHashIterations = value;
    m_PasswordHashIterationsIsSet = true;
}
bool OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties::passwordHashIterationsIsSet() const
{
    return m_PasswordHashIterationsIsSet;
}

void OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties::unsetPasswordHashIterations()
{
    m_PasswordHashIterationsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties::getPasswordSaltSize() const
{
    return m_PasswordSaltSize;
}


void OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties::setPasswordSaltSize(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_PasswordSaltSize = value;
    m_PasswordSaltSizeIsSet = true;
}
bool OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties::passwordSaltSizeIsSet() const
{
    return m_PasswordSaltSizeIsSet;
}

void OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties::unsetPasswordSaltSize()
{
    m_PasswordSaltSizeIsSet = false;
}

}
}
}
}

