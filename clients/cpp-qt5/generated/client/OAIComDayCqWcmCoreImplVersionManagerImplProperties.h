/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIComDayCqWcmCoreImplVersionManagerImplProperties.h
 *
 * 
 */

#ifndef OAIComDayCqWcmCoreImplVersionManagerImplProperties_H_
#define OAIComDayCqWcmCoreImplVersionManagerImplProperties_H_

#include <QJsonObject>


#include "OAIOAIConfigNodePropertyArray.h"
#include "OAIOAIConfigNodePropertyBoolean.h"
#include "OAIOAIConfigNodePropertyInteger.h"

#include "OAIObject.h"

namespace OpenAPI {

class OAIComDayCqWcmCoreImplVersionManagerImplProperties: public OAIObject {
public:
    OAIComDayCqWcmCoreImplVersionManagerImplProperties();
    OAIComDayCqWcmCoreImplVersionManagerImplProperties(QString json);
    ~OAIComDayCqWcmCoreImplVersionManagerImplProperties();
    void init();
    void cleanup();

    QString asJson () override;
    QJsonObject asJsonObject() override;
    void fromJsonObject(QJsonObject json) override;
    OAIComDayCqWcmCoreImplVersionManagerImplProperties* fromJson(QString jsonString) override;

    OAIConfigNodePropertyBoolean* getVersionmanagerCreateVersionOnActivation();
    void setVersionmanagerCreateVersionOnActivation(OAIConfigNodePropertyBoolean* versionmanager_create_version_on_activation);

    OAIConfigNodePropertyBoolean* getVersionmanagerPurgingEnabled();
    void setVersionmanagerPurgingEnabled(OAIConfigNodePropertyBoolean* versionmanager_purging_enabled);

    OAIConfigNodePropertyArray* getVersionmanagerPurgePaths();
    void setVersionmanagerPurgePaths(OAIConfigNodePropertyArray* versionmanager_purge_paths);

    OAIConfigNodePropertyArray* getVersionmanagerIvPaths();
    void setVersionmanagerIvPaths(OAIConfigNodePropertyArray* versionmanager_iv_paths);

    OAIConfigNodePropertyInteger* getVersionmanagerMaxAgeDays();
    void setVersionmanagerMaxAgeDays(OAIConfigNodePropertyInteger* versionmanager_max_age_days);

    OAIConfigNodePropertyInteger* getVersionmanagerMaxNumberVersions();
    void setVersionmanagerMaxNumberVersions(OAIConfigNodePropertyInteger* versionmanager_max_number_versions);

    OAIConfigNodePropertyInteger* getVersionmanagerMinNumberVersions();
    void setVersionmanagerMinNumberVersions(OAIConfigNodePropertyInteger* versionmanager_min_number_versions);


    virtual bool isSet() override;

private:
    OAIConfigNodePropertyBoolean* versionmanager_create_version_on_activation;
    bool m_versionmanager_create_version_on_activation_isSet;

    OAIConfigNodePropertyBoolean* versionmanager_purging_enabled;
    bool m_versionmanager_purging_enabled_isSet;

    OAIConfigNodePropertyArray* versionmanager_purge_paths;
    bool m_versionmanager_purge_paths_isSet;

    OAIConfigNodePropertyArray* versionmanager_iv_paths;
    bool m_versionmanager_iv_paths_isSet;

    OAIConfigNodePropertyInteger* versionmanager_max_age_days;
    bool m_versionmanager_max_age_days_isSet;

    OAIConfigNodePropertyInteger* versionmanager_max_number_versions;
    bool m_versionmanager_max_number_versions_isSet;

    OAIConfigNodePropertyInteger* versionmanager_min_number_versions;
    bool m_versionmanager_min_number_versions_isSet;

};

}

#endif /* OAIComDayCqWcmCoreImplVersionManagerImplProperties_H_ */
