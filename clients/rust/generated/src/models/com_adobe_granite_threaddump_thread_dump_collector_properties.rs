/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComAdobeGraniteThreaddumpThreadDumpCollectorProperties {
  #[serde(rename = "scheduler.period")]
  scheduler_period: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "scheduler.runOn")]
  scheduler_run_on: Option<::models::ConfigNodePropertyDropDown>,
  #[serde(rename = "granite.threaddump.enabled")]
  granite_threaddump_enabled: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "granite.threaddump.dumpsPerFile")]
  granite_threaddump_dumps_per_file: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "granite.threaddump.enableGzipCompression")]
  granite_threaddump_enable_gzip_compression: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "granite.threaddump.enableDirectoriesCompression")]
  granite_threaddump_enable_directories_compression: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "granite.threaddump.enableJStack")]
  granite_threaddump_enable_j_stack: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "granite.threaddump.maxBackupDays")]
  granite_threaddump_max_backup_days: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "granite.threaddump.backupCleanTrigger")]
  granite_threaddump_backup_clean_trigger: Option<::models::ConfigNodePropertyString>
}

impl ComAdobeGraniteThreaddumpThreadDumpCollectorProperties {
  pub fn new() -> ComAdobeGraniteThreaddumpThreadDumpCollectorProperties {
    ComAdobeGraniteThreaddumpThreadDumpCollectorProperties {
      scheduler_period: None,
      scheduler_run_on: None,
      granite_threaddump_enabled: None,
      granite_threaddump_dumps_per_file: None,
      granite_threaddump_enable_gzip_compression: None,
      granite_threaddump_enable_directories_compression: None,
      granite_threaddump_enable_j_stack: None,
      granite_threaddump_max_backup_days: None,
      granite_threaddump_backup_clean_trigger: None
    }
  }

  pub fn set_scheduler_period(&mut self, scheduler_period: ::models::ConfigNodePropertyInteger) {
    self.scheduler_period = Some(scheduler_period);
  }

  pub fn with_scheduler_period(mut self, scheduler_period: ::models::ConfigNodePropertyInteger) -> ComAdobeGraniteThreaddumpThreadDumpCollectorProperties {
    self.scheduler_period = Some(scheduler_period);
    self
  }

  pub fn scheduler_period(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.scheduler_period.as_ref()
  }

  pub fn reset_scheduler_period(&mut self) {
    self.scheduler_period = None;
  }

  pub fn set_scheduler_run_on(&mut self, scheduler_run_on: ::models::ConfigNodePropertyDropDown) {
    self.scheduler_run_on = Some(scheduler_run_on);
  }

  pub fn with_scheduler_run_on(mut self, scheduler_run_on: ::models::ConfigNodePropertyDropDown) -> ComAdobeGraniteThreaddumpThreadDumpCollectorProperties {
    self.scheduler_run_on = Some(scheduler_run_on);
    self
  }

  pub fn scheduler_run_on(&self) -> Option<&::models::ConfigNodePropertyDropDown> {
    self.scheduler_run_on.as_ref()
  }

  pub fn reset_scheduler_run_on(&mut self) {
    self.scheduler_run_on = None;
  }

  pub fn set_granite_threaddump_enabled(&mut self, granite_threaddump_enabled: ::models::ConfigNodePropertyBoolean) {
    self.granite_threaddump_enabled = Some(granite_threaddump_enabled);
  }

  pub fn with_granite_threaddump_enabled(mut self, granite_threaddump_enabled: ::models::ConfigNodePropertyBoolean) -> ComAdobeGraniteThreaddumpThreadDumpCollectorProperties {
    self.granite_threaddump_enabled = Some(granite_threaddump_enabled);
    self
  }

  pub fn granite_threaddump_enabled(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.granite_threaddump_enabled.as_ref()
  }

  pub fn reset_granite_threaddump_enabled(&mut self) {
    self.granite_threaddump_enabled = None;
  }

  pub fn set_granite_threaddump_dumps_per_file(&mut self, granite_threaddump_dumps_per_file: ::models::ConfigNodePropertyInteger) {
    self.granite_threaddump_dumps_per_file = Some(granite_threaddump_dumps_per_file);
  }

  pub fn with_granite_threaddump_dumps_per_file(mut self, granite_threaddump_dumps_per_file: ::models::ConfigNodePropertyInteger) -> ComAdobeGraniteThreaddumpThreadDumpCollectorProperties {
    self.granite_threaddump_dumps_per_file = Some(granite_threaddump_dumps_per_file);
    self
  }

  pub fn granite_threaddump_dumps_per_file(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.granite_threaddump_dumps_per_file.as_ref()
  }

  pub fn reset_granite_threaddump_dumps_per_file(&mut self) {
    self.granite_threaddump_dumps_per_file = None;
  }

  pub fn set_granite_threaddump_enable_gzip_compression(&mut self, granite_threaddump_enable_gzip_compression: ::models::ConfigNodePropertyBoolean) {
    self.granite_threaddump_enable_gzip_compression = Some(granite_threaddump_enable_gzip_compression);
  }

  pub fn with_granite_threaddump_enable_gzip_compression(mut self, granite_threaddump_enable_gzip_compression: ::models::ConfigNodePropertyBoolean) -> ComAdobeGraniteThreaddumpThreadDumpCollectorProperties {
    self.granite_threaddump_enable_gzip_compression = Some(granite_threaddump_enable_gzip_compression);
    self
  }

  pub fn granite_threaddump_enable_gzip_compression(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.granite_threaddump_enable_gzip_compression.as_ref()
  }

  pub fn reset_granite_threaddump_enable_gzip_compression(&mut self) {
    self.granite_threaddump_enable_gzip_compression = None;
  }

  pub fn set_granite_threaddump_enable_directories_compression(&mut self, granite_threaddump_enable_directories_compression: ::models::ConfigNodePropertyBoolean) {
    self.granite_threaddump_enable_directories_compression = Some(granite_threaddump_enable_directories_compression);
  }

  pub fn with_granite_threaddump_enable_directories_compression(mut self, granite_threaddump_enable_directories_compression: ::models::ConfigNodePropertyBoolean) -> ComAdobeGraniteThreaddumpThreadDumpCollectorProperties {
    self.granite_threaddump_enable_directories_compression = Some(granite_threaddump_enable_directories_compression);
    self
  }

  pub fn granite_threaddump_enable_directories_compression(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.granite_threaddump_enable_directories_compression.as_ref()
  }

  pub fn reset_granite_threaddump_enable_directories_compression(&mut self) {
    self.granite_threaddump_enable_directories_compression = None;
  }

  pub fn set_granite_threaddump_enable_j_stack(&mut self, granite_threaddump_enable_j_stack: ::models::ConfigNodePropertyBoolean) {
    self.granite_threaddump_enable_j_stack = Some(granite_threaddump_enable_j_stack);
  }

  pub fn with_granite_threaddump_enable_j_stack(mut self, granite_threaddump_enable_j_stack: ::models::ConfigNodePropertyBoolean) -> ComAdobeGraniteThreaddumpThreadDumpCollectorProperties {
    self.granite_threaddump_enable_j_stack = Some(granite_threaddump_enable_j_stack);
    self
  }

  pub fn granite_threaddump_enable_j_stack(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.granite_threaddump_enable_j_stack.as_ref()
  }

  pub fn reset_granite_threaddump_enable_j_stack(&mut self) {
    self.granite_threaddump_enable_j_stack = None;
  }

  pub fn set_granite_threaddump_max_backup_days(&mut self, granite_threaddump_max_backup_days: ::models::ConfigNodePropertyInteger) {
    self.granite_threaddump_max_backup_days = Some(granite_threaddump_max_backup_days);
  }

  pub fn with_granite_threaddump_max_backup_days(mut self, granite_threaddump_max_backup_days: ::models::ConfigNodePropertyInteger) -> ComAdobeGraniteThreaddumpThreadDumpCollectorProperties {
    self.granite_threaddump_max_backup_days = Some(granite_threaddump_max_backup_days);
    self
  }

  pub fn granite_threaddump_max_backup_days(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.granite_threaddump_max_backup_days.as_ref()
  }

  pub fn reset_granite_threaddump_max_backup_days(&mut self) {
    self.granite_threaddump_max_backup_days = None;
  }

  pub fn set_granite_threaddump_backup_clean_trigger(&mut self, granite_threaddump_backup_clean_trigger: ::models::ConfigNodePropertyString) {
    self.granite_threaddump_backup_clean_trigger = Some(granite_threaddump_backup_clean_trigger);
  }

  pub fn with_granite_threaddump_backup_clean_trigger(mut self, granite_threaddump_backup_clean_trigger: ::models::ConfigNodePropertyString) -> ComAdobeGraniteThreaddumpThreadDumpCollectorProperties {
    self.granite_threaddump_backup_clean_trigger = Some(granite_threaddump_backup_clean_trigger);
    self
  }

  pub fn granite_threaddump_backup_clean_trigger(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.granite_threaddump_backup_clean_trigger.as_ref()
  }

  pub fn reset_granite_threaddump_backup_clean_trigger(&mut self) {
    self.granite_threaddump_backup_clean_trigger = None;
  }

}



