<?php
/**
 * ComDayCqWcmMsmImplRolloutManagerImplProperties
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.2.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ComDayCqWcmMsmImplRolloutManagerImplProperties Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ComDayCqWcmMsmImplRolloutManagerImplProperties implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'comDayCqWcmMsmImplRolloutManagerImplProperties';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'event_filter' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'rolloutmgr_excludedprops_default' => '\OpenAPI\Client\Model\ConfigNodePropertyArray',
        'rolloutmgr_excludedparagraphprops_default' => '\OpenAPI\Client\Model\ConfigNodePropertyArray',
        'rolloutmgr_excludednodetypes_default' => '\OpenAPI\Client\Model\ConfigNodePropertyArray',
        'rolloutmgr_threadpool_maxsize' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'rolloutmgr_threadpool_maxshutdowntime' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'rolloutmgr_threadpool_priority' => '\OpenAPI\Client\Model\ConfigNodePropertyDropDown',
        'rolloutmgr_commit_size' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'rolloutmgr_conflicthandling_enabled' => '\OpenAPI\Client\Model\ConfigNodePropertyBoolean'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'event_filter' => null,
        'rolloutmgr_excludedprops_default' => null,
        'rolloutmgr_excludedparagraphprops_default' => null,
        'rolloutmgr_excludednodetypes_default' => null,
        'rolloutmgr_threadpool_maxsize' => null,
        'rolloutmgr_threadpool_maxshutdowntime' => null,
        'rolloutmgr_threadpool_priority' => null,
        'rolloutmgr_commit_size' => null,
        'rolloutmgr_conflicthandling_enabled' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'event_filter' => 'event.filter',
        'rolloutmgr_excludedprops_default' => 'rolloutmgr.excludedprops.default',
        'rolloutmgr_excludedparagraphprops_default' => 'rolloutmgr.excludedparagraphprops.default',
        'rolloutmgr_excludednodetypes_default' => 'rolloutmgr.excludednodetypes.default',
        'rolloutmgr_threadpool_maxsize' => 'rolloutmgr.threadpool.maxsize',
        'rolloutmgr_threadpool_maxshutdowntime' => 'rolloutmgr.threadpool.maxshutdowntime',
        'rolloutmgr_threadpool_priority' => 'rolloutmgr.threadpool.priority',
        'rolloutmgr_commit_size' => 'rolloutmgr.commit.size',
        'rolloutmgr_conflicthandling_enabled' => 'rolloutmgr.conflicthandling.enabled'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'event_filter' => 'setEventFilter',
        'rolloutmgr_excludedprops_default' => 'setRolloutmgrExcludedpropsDefault',
        'rolloutmgr_excludedparagraphprops_default' => 'setRolloutmgrExcludedparagraphpropsDefault',
        'rolloutmgr_excludednodetypes_default' => 'setRolloutmgrExcludednodetypesDefault',
        'rolloutmgr_threadpool_maxsize' => 'setRolloutmgrThreadpoolMaxsize',
        'rolloutmgr_threadpool_maxshutdowntime' => 'setRolloutmgrThreadpoolMaxshutdowntime',
        'rolloutmgr_threadpool_priority' => 'setRolloutmgrThreadpoolPriority',
        'rolloutmgr_commit_size' => 'setRolloutmgrCommitSize',
        'rolloutmgr_conflicthandling_enabled' => 'setRolloutmgrConflicthandlingEnabled'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'event_filter' => 'getEventFilter',
        'rolloutmgr_excludedprops_default' => 'getRolloutmgrExcludedpropsDefault',
        'rolloutmgr_excludedparagraphprops_default' => 'getRolloutmgrExcludedparagraphpropsDefault',
        'rolloutmgr_excludednodetypes_default' => 'getRolloutmgrExcludednodetypesDefault',
        'rolloutmgr_threadpool_maxsize' => 'getRolloutmgrThreadpoolMaxsize',
        'rolloutmgr_threadpool_maxshutdowntime' => 'getRolloutmgrThreadpoolMaxshutdowntime',
        'rolloutmgr_threadpool_priority' => 'getRolloutmgrThreadpoolPriority',
        'rolloutmgr_commit_size' => 'getRolloutmgrCommitSize',
        'rolloutmgr_conflicthandling_enabled' => 'getRolloutmgrConflicthandlingEnabled'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['event_filter'] = isset($data['event_filter']) ? $data['event_filter'] : null;
        $this->container['rolloutmgr_excludedprops_default'] = isset($data['rolloutmgr_excludedprops_default']) ? $data['rolloutmgr_excludedprops_default'] : null;
        $this->container['rolloutmgr_excludedparagraphprops_default'] = isset($data['rolloutmgr_excludedparagraphprops_default']) ? $data['rolloutmgr_excludedparagraphprops_default'] : null;
        $this->container['rolloutmgr_excludednodetypes_default'] = isset($data['rolloutmgr_excludednodetypes_default']) ? $data['rolloutmgr_excludednodetypes_default'] : null;
        $this->container['rolloutmgr_threadpool_maxsize'] = isset($data['rolloutmgr_threadpool_maxsize']) ? $data['rolloutmgr_threadpool_maxsize'] : null;
        $this->container['rolloutmgr_threadpool_maxshutdowntime'] = isset($data['rolloutmgr_threadpool_maxshutdowntime']) ? $data['rolloutmgr_threadpool_maxshutdowntime'] : null;
        $this->container['rolloutmgr_threadpool_priority'] = isset($data['rolloutmgr_threadpool_priority']) ? $data['rolloutmgr_threadpool_priority'] : null;
        $this->container['rolloutmgr_commit_size'] = isset($data['rolloutmgr_commit_size']) ? $data['rolloutmgr_commit_size'] : null;
        $this->container['rolloutmgr_conflicthandling_enabled'] = isset($data['rolloutmgr_conflicthandling_enabled']) ? $data['rolloutmgr_conflicthandling_enabled'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets event_filter
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getEventFilter()
    {
        return $this->container['event_filter'];
    }

    /**
     * Sets event_filter
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $event_filter event_filter
     *
     * @return $this
     */
    public function setEventFilter($event_filter)
    {
        $this->container['event_filter'] = $event_filter;

        return $this;
    }

    /**
     * Gets rolloutmgr_excludedprops_default
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyArray|null
     */
    public function getRolloutmgrExcludedpropsDefault()
    {
        return $this->container['rolloutmgr_excludedprops_default'];
    }

    /**
     * Sets rolloutmgr_excludedprops_default
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyArray|null $rolloutmgr_excludedprops_default rolloutmgr_excludedprops_default
     *
     * @return $this
     */
    public function setRolloutmgrExcludedpropsDefault($rolloutmgr_excludedprops_default)
    {
        $this->container['rolloutmgr_excludedprops_default'] = $rolloutmgr_excludedprops_default;

        return $this;
    }

    /**
     * Gets rolloutmgr_excludedparagraphprops_default
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyArray|null
     */
    public function getRolloutmgrExcludedparagraphpropsDefault()
    {
        return $this->container['rolloutmgr_excludedparagraphprops_default'];
    }

    /**
     * Sets rolloutmgr_excludedparagraphprops_default
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyArray|null $rolloutmgr_excludedparagraphprops_default rolloutmgr_excludedparagraphprops_default
     *
     * @return $this
     */
    public function setRolloutmgrExcludedparagraphpropsDefault($rolloutmgr_excludedparagraphprops_default)
    {
        $this->container['rolloutmgr_excludedparagraphprops_default'] = $rolloutmgr_excludedparagraphprops_default;

        return $this;
    }

    /**
     * Gets rolloutmgr_excludednodetypes_default
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyArray|null
     */
    public function getRolloutmgrExcludednodetypesDefault()
    {
        return $this->container['rolloutmgr_excludednodetypes_default'];
    }

    /**
     * Sets rolloutmgr_excludednodetypes_default
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyArray|null $rolloutmgr_excludednodetypes_default rolloutmgr_excludednodetypes_default
     *
     * @return $this
     */
    public function setRolloutmgrExcludednodetypesDefault($rolloutmgr_excludednodetypes_default)
    {
        $this->container['rolloutmgr_excludednodetypes_default'] = $rolloutmgr_excludednodetypes_default;

        return $this;
    }

    /**
     * Gets rolloutmgr_threadpool_maxsize
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getRolloutmgrThreadpoolMaxsize()
    {
        return $this->container['rolloutmgr_threadpool_maxsize'];
    }

    /**
     * Sets rolloutmgr_threadpool_maxsize
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $rolloutmgr_threadpool_maxsize rolloutmgr_threadpool_maxsize
     *
     * @return $this
     */
    public function setRolloutmgrThreadpoolMaxsize($rolloutmgr_threadpool_maxsize)
    {
        $this->container['rolloutmgr_threadpool_maxsize'] = $rolloutmgr_threadpool_maxsize;

        return $this;
    }

    /**
     * Gets rolloutmgr_threadpool_maxshutdowntime
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getRolloutmgrThreadpoolMaxshutdowntime()
    {
        return $this->container['rolloutmgr_threadpool_maxshutdowntime'];
    }

    /**
     * Sets rolloutmgr_threadpool_maxshutdowntime
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $rolloutmgr_threadpool_maxshutdowntime rolloutmgr_threadpool_maxshutdowntime
     *
     * @return $this
     */
    public function setRolloutmgrThreadpoolMaxshutdowntime($rolloutmgr_threadpool_maxshutdowntime)
    {
        $this->container['rolloutmgr_threadpool_maxshutdowntime'] = $rolloutmgr_threadpool_maxshutdowntime;

        return $this;
    }

    /**
     * Gets rolloutmgr_threadpool_priority
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyDropDown|null
     */
    public function getRolloutmgrThreadpoolPriority()
    {
        return $this->container['rolloutmgr_threadpool_priority'];
    }

    /**
     * Sets rolloutmgr_threadpool_priority
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyDropDown|null $rolloutmgr_threadpool_priority rolloutmgr_threadpool_priority
     *
     * @return $this
     */
    public function setRolloutmgrThreadpoolPriority($rolloutmgr_threadpool_priority)
    {
        $this->container['rolloutmgr_threadpool_priority'] = $rolloutmgr_threadpool_priority;

        return $this;
    }

    /**
     * Gets rolloutmgr_commit_size
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getRolloutmgrCommitSize()
    {
        return $this->container['rolloutmgr_commit_size'];
    }

    /**
     * Sets rolloutmgr_commit_size
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $rolloutmgr_commit_size rolloutmgr_commit_size
     *
     * @return $this
     */
    public function setRolloutmgrCommitSize($rolloutmgr_commit_size)
    {
        $this->container['rolloutmgr_commit_size'] = $rolloutmgr_commit_size;

        return $this;
    }

    /**
     * Gets rolloutmgr_conflicthandling_enabled
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null
     */
    public function getRolloutmgrConflicthandlingEnabled()
    {
        return $this->container['rolloutmgr_conflicthandling_enabled'];
    }

    /**
     * Sets rolloutmgr_conflicthandling_enabled
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null $rolloutmgr_conflicthandling_enabled rolloutmgr_conflicthandling_enabled
     *
     * @return $this
     */
    public function setRolloutmgrConflicthandlingEnabled($rolloutmgr_conflicthandling_enabled)
    {
        $this->container['rolloutmgr_conflicthandling_enabled'] = $rolloutmgr_conflicthandling_enabled;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


