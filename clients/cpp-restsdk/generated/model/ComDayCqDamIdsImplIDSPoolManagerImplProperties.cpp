/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComDayCqDamIdsImplIDSPoolManagerImplProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComDayCqDamIdsImplIDSPoolManagerImplProperties::ComDayCqDamIdsImplIDSPoolManagerImplProperties()
{
    m_Max_errors_to_blacklistIsSet = false;
    m_Retry_interval_to_whitelistIsSet = false;
    m_Connect_timeoutIsSet = false;
    m_Socket_timeoutIsSet = false;
    m_Process_labelIsSet = false;
    m_Connection_use_maxIsSet = false;
}

ComDayCqDamIdsImplIDSPoolManagerImplProperties::~ComDayCqDamIdsImplIDSPoolManagerImplProperties()
{
}

void ComDayCqDamIdsImplIDSPoolManagerImplProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComDayCqDamIdsImplIDSPoolManagerImplProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Max_errors_to_blacklistIsSet)
    {
        val[utility::conversions::to_string_t("max.errors.to.blacklist")] = ModelBase::toJson(m_Max_errors_to_blacklist);
    }
    if(m_Retry_interval_to_whitelistIsSet)
    {
        val[utility::conversions::to_string_t("retry.interval.to.whitelist")] = ModelBase::toJson(m_Retry_interval_to_whitelist);
    }
    if(m_Connect_timeoutIsSet)
    {
        val[utility::conversions::to_string_t("connect.timeout")] = ModelBase::toJson(m_Connect_timeout);
    }
    if(m_Socket_timeoutIsSet)
    {
        val[utility::conversions::to_string_t("socket.timeout")] = ModelBase::toJson(m_Socket_timeout);
    }
    if(m_Process_labelIsSet)
    {
        val[utility::conversions::to_string_t("process.label")] = ModelBase::toJson(m_Process_label);
    }
    if(m_Connection_use_maxIsSet)
    {
        val[utility::conversions::to_string_t("connection.use.max")] = ModelBase::toJson(m_Connection_use_max);
    }

    return val;
}

void ComDayCqDamIdsImplIDSPoolManagerImplProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("max.errors.to.blacklist")))
    {
        if(!val[utility::conversions::to_string_t("max.errors.to.blacklist")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("max.errors.to.blacklist")]);
            setMaxErrorsToBlacklist( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("retry.interval.to.whitelist")))
    {
        if(!val[utility::conversions::to_string_t("retry.interval.to.whitelist")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("retry.interval.to.whitelist")]);
            setRetryIntervalToWhitelist( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("connect.timeout")))
    {
        if(!val[utility::conversions::to_string_t("connect.timeout")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("connect.timeout")]);
            setConnectTimeout( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("socket.timeout")))
    {
        if(!val[utility::conversions::to_string_t("socket.timeout")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("socket.timeout")]);
            setSocketTimeout( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("process.label")))
    {
        if(!val[utility::conversions::to_string_t("process.label")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("process.label")]);
            setProcessLabel( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("connection.use.max")))
    {
        if(!val[utility::conversions::to_string_t("connection.use.max")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("connection.use.max")]);
            setConnectionUseMax( newItem );
        }
    }
}

void ComDayCqDamIdsImplIDSPoolManagerImplProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Max_errors_to_blacklistIsSet)
    {
        if (m_Max_errors_to_blacklist.get())
        {
            m_Max_errors_to_blacklist->toMultipart(multipart, utility::conversions::to_string_t("max.errors.to.blacklist."));
        }
    }
    if(m_Retry_interval_to_whitelistIsSet)
    {
        if (m_Retry_interval_to_whitelist.get())
        {
            m_Retry_interval_to_whitelist->toMultipart(multipart, utility::conversions::to_string_t("retry.interval.to.whitelist."));
        }
    }
    if(m_Connect_timeoutIsSet)
    {
        if (m_Connect_timeout.get())
        {
            m_Connect_timeout->toMultipart(multipart, utility::conversions::to_string_t("connect.timeout."));
        }
    }
    if(m_Socket_timeoutIsSet)
    {
        if (m_Socket_timeout.get())
        {
            m_Socket_timeout->toMultipart(multipart, utility::conversions::to_string_t("socket.timeout."));
        }
    }
    if(m_Process_labelIsSet)
    {
        if (m_Process_label.get())
        {
            m_Process_label->toMultipart(multipart, utility::conversions::to_string_t("process.label."));
        }
    }
    if(m_Connection_use_maxIsSet)
    {
        if (m_Connection_use_max.get())
        {
            m_Connection_use_max->toMultipart(multipart, utility::conversions::to_string_t("connection.use.max."));
        }
    }
}

void ComDayCqDamIdsImplIDSPoolManagerImplProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("max.errors.to.blacklist")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("max.errors.to.blacklist")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("max.errors.to.blacklist."));
            setMaxErrorsToBlacklist( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("retry.interval.to.whitelist")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("retry.interval.to.whitelist")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("retry.interval.to.whitelist."));
            setRetryIntervalToWhitelist( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("connect.timeout")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("connect.timeout")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("connect.timeout."));
            setConnectTimeout( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("socket.timeout")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("socket.timeout")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("socket.timeout."));
            setSocketTimeout( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("process.label")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("process.label")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("process.label."));
            setProcessLabel( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("connection.use.max")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("connection.use.max")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("connection.use.max."));
            setConnectionUseMax( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyInteger> ComDayCqDamIdsImplIDSPoolManagerImplProperties::getMaxErrorsToBlacklist() const
{
    return m_Max_errors_to_blacklist;
}


void ComDayCqDamIdsImplIDSPoolManagerImplProperties::setMaxErrorsToBlacklist(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Max_errors_to_blacklist = value;
    m_Max_errors_to_blacklistIsSet = true;
}
bool ComDayCqDamIdsImplIDSPoolManagerImplProperties::maxErrorsToBlacklistIsSet() const
{
    return m_Max_errors_to_blacklistIsSet;
}

void ComDayCqDamIdsImplIDSPoolManagerImplProperties::unsetMax_errors_to_blacklist()
{
    m_Max_errors_to_blacklistIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComDayCqDamIdsImplIDSPoolManagerImplProperties::getRetryIntervalToWhitelist() const
{
    return m_Retry_interval_to_whitelist;
}


void ComDayCqDamIdsImplIDSPoolManagerImplProperties::setRetryIntervalToWhitelist(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Retry_interval_to_whitelist = value;
    m_Retry_interval_to_whitelistIsSet = true;
}
bool ComDayCqDamIdsImplIDSPoolManagerImplProperties::retryIntervalToWhitelistIsSet() const
{
    return m_Retry_interval_to_whitelistIsSet;
}

void ComDayCqDamIdsImplIDSPoolManagerImplProperties::unsetRetry_interval_to_whitelist()
{
    m_Retry_interval_to_whitelistIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComDayCqDamIdsImplIDSPoolManagerImplProperties::getConnectTimeout() const
{
    return m_Connect_timeout;
}


void ComDayCqDamIdsImplIDSPoolManagerImplProperties::setConnectTimeout(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Connect_timeout = value;
    m_Connect_timeoutIsSet = true;
}
bool ComDayCqDamIdsImplIDSPoolManagerImplProperties::connectTimeoutIsSet() const
{
    return m_Connect_timeoutIsSet;
}

void ComDayCqDamIdsImplIDSPoolManagerImplProperties::unsetConnect_timeout()
{
    m_Connect_timeoutIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComDayCqDamIdsImplIDSPoolManagerImplProperties::getSocketTimeout() const
{
    return m_Socket_timeout;
}


void ComDayCqDamIdsImplIDSPoolManagerImplProperties::setSocketTimeout(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Socket_timeout = value;
    m_Socket_timeoutIsSet = true;
}
bool ComDayCqDamIdsImplIDSPoolManagerImplProperties::socketTimeoutIsSet() const
{
    return m_Socket_timeoutIsSet;
}

void ComDayCqDamIdsImplIDSPoolManagerImplProperties::unsetSocket_timeout()
{
    m_Socket_timeoutIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComDayCqDamIdsImplIDSPoolManagerImplProperties::getProcessLabel() const
{
    return m_Process_label;
}


void ComDayCqDamIdsImplIDSPoolManagerImplProperties::setProcessLabel(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Process_label = value;
    m_Process_labelIsSet = true;
}
bool ComDayCqDamIdsImplIDSPoolManagerImplProperties::processLabelIsSet() const
{
    return m_Process_labelIsSet;
}

void ComDayCqDamIdsImplIDSPoolManagerImplProperties::unsetProcess_label()
{
    m_Process_labelIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComDayCqDamIdsImplIDSPoolManagerImplProperties::getConnectionUseMax() const
{
    return m_Connection_use_max;
}


void ComDayCqDamIdsImplIDSPoolManagerImplProperties::setConnectionUseMax(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Connection_use_max = value;
    m_Connection_use_maxIsSet = true;
}
bool ComDayCqDamIdsImplIDSPoolManagerImplProperties::connectionUseMaxIsSet() const
{
    return m_Connection_use_maxIsSet;
}

void ComDayCqDamIdsImplIDSPoolManagerImplProperties::unsetConnection_use_max()
{
    m_Connection_use_maxIsSet = false;
}

}
}
}
}

