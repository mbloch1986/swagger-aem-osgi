/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeGraniteAuthImsImplImsConfigProviderImplProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeGraniteAuthImsImplImsConfigProviderImplProperties::OAIComAdobeGraniteAuthImsImplImsConfigProviderImplProperties(QString json) {
    this->fromJson(json);
}

OAIComAdobeGraniteAuthImsImplImsConfigProviderImplProperties::OAIComAdobeGraniteAuthImsImplImsConfigProviderImplProperties() {
    this->init();
}

OAIComAdobeGraniteAuthImsImplImsConfigProviderImplProperties::~OAIComAdobeGraniteAuthImsImplImsConfigProviderImplProperties() {
    
}

void
OAIComAdobeGraniteAuthImsImplImsConfigProviderImplProperties::init() {
    m_oauth_configmanager_ims_configid_isSet = false;
    m_ims_owning_entity_isSet = false;
    m_aem_instance_id_isSet = false;
    m_ims_service_code_isSet = false;
}

void
OAIComAdobeGraniteAuthImsImplImsConfigProviderImplProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIComAdobeGraniteAuthImsImplImsConfigProviderImplProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(oauth_configmanager_ims_configid, json[QString("oauth.configmanager.ims.configid")]);
    
    ::OpenAPI::fromJsonValue(ims_owning_entity, json[QString("ims.owningEntity")]);
    
    ::OpenAPI::fromJsonValue(aem_instance_id, json[QString("aem.instanceId")]);
    
    ::OpenAPI::fromJsonValue(ims_service_code, json[QString("ims.serviceCode")]);
    
}

QString
OAIComAdobeGraniteAuthImsImplImsConfigProviderImplProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeGraniteAuthImsImplImsConfigProviderImplProperties::asJsonObject() const {
    QJsonObject obj;
	if(oauth_configmanager_ims_configid.isSet()){
        obj.insert(QString("oauth.configmanager.ims.configid"), ::OpenAPI::toJsonValue(oauth_configmanager_ims_configid));
    }
	if(ims_owning_entity.isSet()){
        obj.insert(QString("ims.owningEntity"), ::OpenAPI::toJsonValue(ims_owning_entity));
    }
	if(aem_instance_id.isSet()){
        obj.insert(QString("aem.instanceId"), ::OpenAPI::toJsonValue(aem_instance_id));
    }
	if(ims_service_code.isSet()){
        obj.insert(QString("ims.serviceCode"), ::OpenAPI::toJsonValue(ims_service_code));
    }
    return obj;
}

OAIConfigNodePropertyString
OAIComAdobeGraniteAuthImsImplImsConfigProviderImplProperties::getOauthConfigmanagerImsConfigid() const {
    return oauth_configmanager_ims_configid;
}
void
OAIComAdobeGraniteAuthImsImplImsConfigProviderImplProperties::setOauthConfigmanagerImsConfigid(const OAIConfigNodePropertyString &oauth_configmanager_ims_configid) {
    this->oauth_configmanager_ims_configid = oauth_configmanager_ims_configid;
    this->m_oauth_configmanager_ims_configid_isSet = true;
}

OAIConfigNodePropertyString
OAIComAdobeGraniteAuthImsImplImsConfigProviderImplProperties::getImsOwningEntity() const {
    return ims_owning_entity;
}
void
OAIComAdobeGraniteAuthImsImplImsConfigProviderImplProperties::setImsOwningEntity(const OAIConfigNodePropertyString &ims_owning_entity) {
    this->ims_owning_entity = ims_owning_entity;
    this->m_ims_owning_entity_isSet = true;
}

OAIConfigNodePropertyString
OAIComAdobeGraniteAuthImsImplImsConfigProviderImplProperties::getAemInstanceId() const {
    return aem_instance_id;
}
void
OAIComAdobeGraniteAuthImsImplImsConfigProviderImplProperties::setAemInstanceId(const OAIConfigNodePropertyString &aem_instance_id) {
    this->aem_instance_id = aem_instance_id;
    this->m_aem_instance_id_isSet = true;
}

OAIConfigNodePropertyString
OAIComAdobeGraniteAuthImsImplImsConfigProviderImplProperties::getImsServiceCode() const {
    return ims_service_code;
}
void
OAIComAdobeGraniteAuthImsImplImsConfigProviderImplProperties::setImsServiceCode(const OAIConfigNodePropertyString &ims_service_code) {
    this->ims_service_code = ims_service_code;
    this->m_ims_service_code_isSet = true;
}


bool
OAIComAdobeGraniteAuthImsImplImsConfigProviderImplProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(oauth_configmanager_ims_configid.isSet()){ isObjectUpdated = true; break;}
    
        if(ims_owning_entity.isSet()){ isObjectUpdated = true; break;}
    
        if(aem_instance_id.isSet()){ isObjectUpdated = true; break;}
    
        if(ims_service_code.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

