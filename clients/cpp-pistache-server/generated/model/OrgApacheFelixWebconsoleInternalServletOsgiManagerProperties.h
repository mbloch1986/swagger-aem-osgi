/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties.h
 *
 * 
 */

#ifndef OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties_H_
#define OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties_H_


#include "ModelBase.h"

#include "ConfigNodePropertyDropDown.h"
#include "ConfigNodePropertyString.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties
    : public ModelBase
{
public:
    OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties();
    virtual ~OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    nlohmann::json toJson() const override;
    void fromJson(nlohmann::json& json) override;

    /////////////////////////////////////////////
    /// OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties members

    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getManagerRoot() const;
    void setManagerRoot(ConfigNodePropertyString const& value);
    bool managerRootIsSet() const;
    void unsetManager_root();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getHttpServiceFilter() const;
    void setHttpServiceFilter(ConfigNodePropertyString const& value);
    bool httpServiceFilterIsSet() const;
    void unsetHttp_service_filter();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getDefaultRender() const;
    void setDefaultRender(ConfigNodePropertyString const& value);
    bool defaultRenderIsSet() const;
    void unsetDefault_render();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getRealm() const;
    void setRealm(ConfigNodePropertyString const& value);
    bool realmIsSet() const;
    void unsetRealm();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getUsername() const;
    void setUsername(ConfigNodePropertyString const& value);
    bool usernameIsSet() const;
    void unsetUsername();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getPassword() const;
    void setPassword(ConfigNodePropertyString const& value);
    bool passwordIsSet() const;
    void unsetPassword();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getCategory() const;
    void setCategory(ConfigNodePropertyString const& value);
    bool categoryIsSet() const;
    void unsetCategory();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getLocale() const;
    void setLocale(ConfigNodePropertyString const& value);
    bool localeIsSet() const;
    void unsetLocale();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyDropDown getLoglevel() const;
    void setLoglevel(ConfigNodePropertyDropDown const& value);
    bool loglevelIsSet() const;
    void unsetLoglevel();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyDropDown getPlugins() const;
    void setPlugins(ConfigNodePropertyDropDown const& value);
    bool pluginsIsSet() const;
    void unsetPlugins();

protected:
    ConfigNodePropertyString m_Manager_root;
    bool m_Manager_rootIsSet;
    ConfigNodePropertyString m_Http_service_filter;
    bool m_Http_service_filterIsSet;
    ConfigNodePropertyString m_Default_render;
    bool m_Default_renderIsSet;
    ConfigNodePropertyString m_Realm;
    bool m_RealmIsSet;
    ConfigNodePropertyString m_Username;
    bool m_UsernameIsSet;
    ConfigNodePropertyString m_Password;
    bool m_PasswordIsSet;
    ConfigNodePropertyString m_Category;
    bool m_CategoryIsSet;
    ConfigNodePropertyString m_Locale;
    bool m_LocaleIsSet;
    ConfigNodePropertyDropDown m_Loglevel;
    bool m_LoglevelIsSet;
    ConfigNodePropertyDropDown m_Plugins;
    bool m_PluginsIsSet;
};

}
}
}
}

#endif /* OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties_H_ */
