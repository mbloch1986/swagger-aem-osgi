/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "OrgApacheSlingDatasourceJNDIDataSourceFactoryProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

OrgApacheSlingDatasourceJNDIDataSourceFactoryProperties::OrgApacheSlingDatasourceJNDIDataSourceFactoryProperties()
{
    m_Datasource_nameIsSet = false;
    m_Datasource_svc_prop_nameIsSet = false;
    m_Datasource_jndi_nameIsSet = false;
    m_Jndi_propertiesIsSet = false;
}

OrgApacheSlingDatasourceJNDIDataSourceFactoryProperties::~OrgApacheSlingDatasourceJNDIDataSourceFactoryProperties()
{
}

void OrgApacheSlingDatasourceJNDIDataSourceFactoryProperties::validate()
{
    // TODO: implement validation
}

web::json::value OrgApacheSlingDatasourceJNDIDataSourceFactoryProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Datasource_nameIsSet)
    {
        val[utility::conversions::to_string_t("datasource.name")] = ModelBase::toJson(m_Datasource_name);
    }
    if(m_Datasource_svc_prop_nameIsSet)
    {
        val[utility::conversions::to_string_t("datasource.svc.prop.name")] = ModelBase::toJson(m_Datasource_svc_prop_name);
    }
    if(m_Datasource_jndi_nameIsSet)
    {
        val[utility::conversions::to_string_t("datasource.jndi.name")] = ModelBase::toJson(m_Datasource_jndi_name);
    }
    if(m_Jndi_propertiesIsSet)
    {
        val[utility::conversions::to_string_t("jndi.properties")] = ModelBase::toJson(m_Jndi_properties);
    }

    return val;
}

void OrgApacheSlingDatasourceJNDIDataSourceFactoryProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("datasource.name")))
    {
        if(!val[utility::conversions::to_string_t("datasource.name")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("datasource.name")]);
            setDatasourceName( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("datasource.svc.prop.name")))
    {
        if(!val[utility::conversions::to_string_t("datasource.svc.prop.name")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("datasource.svc.prop.name")]);
            setDatasourceSvcPropName( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("datasource.jndi.name")))
    {
        if(!val[utility::conversions::to_string_t("datasource.jndi.name")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("datasource.jndi.name")]);
            setDatasourceJndiName( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("jndi.properties")))
    {
        if(!val[utility::conversions::to_string_t("jndi.properties")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("jndi.properties")]);
            setJndiProperties( newItem );
        }
    }
}

void OrgApacheSlingDatasourceJNDIDataSourceFactoryProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Datasource_nameIsSet)
    {
        if (m_Datasource_name.get())
        {
            m_Datasource_name->toMultipart(multipart, utility::conversions::to_string_t("datasource.name."));
        }
    }
    if(m_Datasource_svc_prop_nameIsSet)
    {
        if (m_Datasource_svc_prop_name.get())
        {
            m_Datasource_svc_prop_name->toMultipart(multipart, utility::conversions::to_string_t("datasource.svc.prop.name."));
        }
    }
    if(m_Datasource_jndi_nameIsSet)
    {
        if (m_Datasource_jndi_name.get())
        {
            m_Datasource_jndi_name->toMultipart(multipart, utility::conversions::to_string_t("datasource.jndi.name."));
        }
    }
    if(m_Jndi_propertiesIsSet)
    {
        if (m_Jndi_properties.get())
        {
            m_Jndi_properties->toMultipart(multipart, utility::conversions::to_string_t("jndi.properties."));
        }
    }
}

void OrgApacheSlingDatasourceJNDIDataSourceFactoryProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("datasource.name")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("datasource.name")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("datasource.name."));
            setDatasourceName( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("datasource.svc.prop.name")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("datasource.svc.prop.name")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("datasource.svc.prop.name."));
            setDatasourceSvcPropName( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("datasource.jndi.name")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("datasource.jndi.name")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("datasource.jndi.name."));
            setDatasourceJndiName( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("jndi.properties")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("jndi.properties")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("jndi.properties."));
            setJndiProperties( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingDatasourceJNDIDataSourceFactoryProperties::getDatasourceName() const
{
    return m_Datasource_name;
}


void OrgApacheSlingDatasourceJNDIDataSourceFactoryProperties::setDatasourceName(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Datasource_name = value;
    m_Datasource_nameIsSet = true;
}
bool OrgApacheSlingDatasourceJNDIDataSourceFactoryProperties::datasourceNameIsSet() const
{
    return m_Datasource_nameIsSet;
}

void OrgApacheSlingDatasourceJNDIDataSourceFactoryProperties::unsetDatasource_name()
{
    m_Datasource_nameIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingDatasourceJNDIDataSourceFactoryProperties::getDatasourceSvcPropName() const
{
    return m_Datasource_svc_prop_name;
}


void OrgApacheSlingDatasourceJNDIDataSourceFactoryProperties::setDatasourceSvcPropName(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Datasource_svc_prop_name = value;
    m_Datasource_svc_prop_nameIsSet = true;
}
bool OrgApacheSlingDatasourceJNDIDataSourceFactoryProperties::datasourceSvcPropNameIsSet() const
{
    return m_Datasource_svc_prop_nameIsSet;
}

void OrgApacheSlingDatasourceJNDIDataSourceFactoryProperties::unsetDatasource_svc_prop_name()
{
    m_Datasource_svc_prop_nameIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingDatasourceJNDIDataSourceFactoryProperties::getDatasourceJndiName() const
{
    return m_Datasource_jndi_name;
}


void OrgApacheSlingDatasourceJNDIDataSourceFactoryProperties::setDatasourceJndiName(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Datasource_jndi_name = value;
    m_Datasource_jndi_nameIsSet = true;
}
bool OrgApacheSlingDatasourceJNDIDataSourceFactoryProperties::datasourceJndiNameIsSet() const
{
    return m_Datasource_jndi_nameIsSet;
}

void OrgApacheSlingDatasourceJNDIDataSourceFactoryProperties::unsetDatasource_jndi_name()
{
    m_Datasource_jndi_nameIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> OrgApacheSlingDatasourceJNDIDataSourceFactoryProperties::getJndiProperties() const
{
    return m_Jndi_properties;
}


void OrgApacheSlingDatasourceJNDIDataSourceFactoryProperties::setJndiProperties(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Jndi_properties = value;
    m_Jndi_propertiesIsSet = true;
}
bool OrgApacheSlingDatasourceJNDIDataSourceFactoryProperties::jndiPropertiesIsSet() const
{
    return m_Jndi_propertiesIsSet;
}

void OrgApacheSlingDatasourceJNDIDataSourceFactoryProperties::unsetJndi_properties()
{
    m_Jndi_propertiesIsSet = false;
}

}
}
}
}

