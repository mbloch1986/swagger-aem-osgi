/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties::OAIComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties::OAIComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties() {
    init();
}

OAIComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties::~OAIComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties() {
    this->cleanup();
}

void
OAIComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties::init() {
    jdbc_driver_class = new OAIConfigNodePropertyString();
    m_jdbc_driver_class_isSet = false;
    jdbc_connection_uri = new OAIConfigNodePropertyString();
    m_jdbc_connection_uri_isSet = false;
    jdbc_username = new OAIConfigNodePropertyString();
    m_jdbc_username_isSet = false;
    jdbc_password = new OAIConfigNodePropertyString();
    m_jdbc_password_isSet = false;
    jdbc_validation_query = new OAIConfigNodePropertyString();
    m_jdbc_validation_query_isSet = false;
    default_readonly = new OAIConfigNodePropertyBoolean();
    m_default_readonly_isSet = false;
    default_autocommit = new OAIConfigNodePropertyBoolean();
    m_default_autocommit_isSet = false;
    pool_size = new OAIConfigNodePropertyInteger();
    m_pool_size_isSet = false;
    pool_max_wait_msec = new OAIConfigNodePropertyInteger();
    m_pool_max_wait_msec_isSet = false;
    datasource_name = new OAIConfigNodePropertyString();
    m_datasource_name_isSet = false;
    datasource_svc_properties = new OAIConfigNodePropertyArray();
    m_datasource_svc_properties_isSet = false;
}

void
OAIComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties::cleanup() {
    if(jdbc_driver_class != nullptr) { 
        delete jdbc_driver_class;
    }
    if(jdbc_connection_uri != nullptr) { 
        delete jdbc_connection_uri;
    }
    if(jdbc_username != nullptr) { 
        delete jdbc_username;
    }
    if(jdbc_password != nullptr) { 
        delete jdbc_password;
    }
    if(jdbc_validation_query != nullptr) { 
        delete jdbc_validation_query;
    }
    if(default_readonly != nullptr) { 
        delete default_readonly;
    }
    if(default_autocommit != nullptr) { 
        delete default_autocommit;
    }
    if(pool_size != nullptr) { 
        delete pool_size;
    }
    if(pool_max_wait_msec != nullptr) { 
        delete pool_max_wait_msec;
    }
    if(datasource_name != nullptr) { 
        delete datasource_name;
    }
    if(datasource_svc_properties != nullptr) { 
        delete datasource_svc_properties;
    }
}

OAIComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties*
OAIComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&jdbc_driver_class, pJson["jdbc.driver.class"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&jdbc_connection_uri, pJson["jdbc.connection.uri"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&jdbc_username, pJson["jdbc.username"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&jdbc_password, pJson["jdbc.password"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&jdbc_validation_query, pJson["jdbc.validation.query"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&default_readonly, pJson["default.readonly"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&default_autocommit, pJson["default.autocommit"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&pool_size, pJson["pool.size"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&pool_max_wait_msec, pJson["pool.max.wait.msec"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&datasource_name, pJson["datasource.name"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&datasource_svc_properties, pJson["datasource.svc.properties"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
}

QString
OAIComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties::asJsonObject() {
    QJsonObject obj;
    if((jdbc_driver_class != nullptr) && (jdbc_driver_class->isSet())){
        toJsonValue(QString("jdbc.driver.class"), jdbc_driver_class, obj, QString("OAIConfigNodePropertyString"));
    }
    if((jdbc_connection_uri != nullptr) && (jdbc_connection_uri->isSet())){
        toJsonValue(QString("jdbc.connection.uri"), jdbc_connection_uri, obj, QString("OAIConfigNodePropertyString"));
    }
    if((jdbc_username != nullptr) && (jdbc_username->isSet())){
        toJsonValue(QString("jdbc.username"), jdbc_username, obj, QString("OAIConfigNodePropertyString"));
    }
    if((jdbc_password != nullptr) && (jdbc_password->isSet())){
        toJsonValue(QString("jdbc.password"), jdbc_password, obj, QString("OAIConfigNodePropertyString"));
    }
    if((jdbc_validation_query != nullptr) && (jdbc_validation_query->isSet())){
        toJsonValue(QString("jdbc.validation.query"), jdbc_validation_query, obj, QString("OAIConfigNodePropertyString"));
    }
    if((default_readonly != nullptr) && (default_readonly->isSet())){
        toJsonValue(QString("default.readonly"), default_readonly, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((default_autocommit != nullptr) && (default_autocommit->isSet())){
        toJsonValue(QString("default.autocommit"), default_autocommit, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((pool_size != nullptr) && (pool_size->isSet())){
        toJsonValue(QString("pool.size"), pool_size, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((pool_max_wait_msec != nullptr) && (pool_max_wait_msec->isSet())){
        toJsonValue(QString("pool.max.wait.msec"), pool_max_wait_msec, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((datasource_name != nullptr) && (datasource_name->isSet())){
        toJsonValue(QString("datasource.name"), datasource_name, obj, QString("OAIConfigNodePropertyString"));
    }
    if((datasource_svc_properties != nullptr) && (datasource_svc_properties->isSet())){
        toJsonValue(QString("datasource.svc.properties"), datasource_svc_properties, obj, QString("OAIConfigNodePropertyArray"));
    }

    return obj;
}

OAIConfigNodePropertyString*
OAIComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties::getJdbcDriverClass() {
    return jdbc_driver_class;
}
void
OAIComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties::setJdbcDriverClass(OAIConfigNodePropertyString* jdbc_driver_class) {
    this->jdbc_driver_class = jdbc_driver_class;
    this->m_jdbc_driver_class_isSet = true;
}

OAIConfigNodePropertyString*
OAIComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties::getJdbcConnectionUri() {
    return jdbc_connection_uri;
}
void
OAIComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties::setJdbcConnectionUri(OAIConfigNodePropertyString* jdbc_connection_uri) {
    this->jdbc_connection_uri = jdbc_connection_uri;
    this->m_jdbc_connection_uri_isSet = true;
}

OAIConfigNodePropertyString*
OAIComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties::getJdbcUsername() {
    return jdbc_username;
}
void
OAIComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties::setJdbcUsername(OAIConfigNodePropertyString* jdbc_username) {
    this->jdbc_username = jdbc_username;
    this->m_jdbc_username_isSet = true;
}

OAIConfigNodePropertyString*
OAIComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties::getJdbcPassword() {
    return jdbc_password;
}
void
OAIComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties::setJdbcPassword(OAIConfigNodePropertyString* jdbc_password) {
    this->jdbc_password = jdbc_password;
    this->m_jdbc_password_isSet = true;
}

OAIConfigNodePropertyString*
OAIComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties::getJdbcValidationQuery() {
    return jdbc_validation_query;
}
void
OAIComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties::setJdbcValidationQuery(OAIConfigNodePropertyString* jdbc_validation_query) {
    this->jdbc_validation_query = jdbc_validation_query;
    this->m_jdbc_validation_query_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties::getDefaultReadonly() {
    return default_readonly;
}
void
OAIComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties::setDefaultReadonly(OAIConfigNodePropertyBoolean* default_readonly) {
    this->default_readonly = default_readonly;
    this->m_default_readonly_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties::getDefaultAutocommit() {
    return default_autocommit;
}
void
OAIComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties::setDefaultAutocommit(OAIConfigNodePropertyBoolean* default_autocommit) {
    this->default_autocommit = default_autocommit;
    this->m_default_autocommit_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties::getPoolSize() {
    return pool_size;
}
void
OAIComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties::setPoolSize(OAIConfigNodePropertyInteger* pool_size) {
    this->pool_size = pool_size;
    this->m_pool_size_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties::getPoolMaxWaitMsec() {
    return pool_max_wait_msec;
}
void
OAIComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties::setPoolMaxWaitMsec(OAIConfigNodePropertyInteger* pool_max_wait_msec) {
    this->pool_max_wait_msec = pool_max_wait_msec;
    this->m_pool_max_wait_msec_isSet = true;
}

OAIConfigNodePropertyString*
OAIComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties::getDatasourceName() {
    return datasource_name;
}
void
OAIComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties::setDatasourceName(OAIConfigNodePropertyString* datasource_name) {
    this->datasource_name = datasource_name;
    this->m_datasource_name_isSet = true;
}

OAIConfigNodePropertyArray*
OAIComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties::getDatasourceSvcProperties() {
    return datasource_svc_properties;
}
void
OAIComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties::setDatasourceSvcProperties(OAIConfigNodePropertyArray* datasource_svc_properties) {
    this->datasource_svc_properties = datasource_svc_properties;
    this->m_datasource_svc_properties_isSet = true;
}


bool
OAIComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(jdbc_driver_class != nullptr && jdbc_driver_class->isSet()){ isObjectUpdated = true; break;}
        if(jdbc_connection_uri != nullptr && jdbc_connection_uri->isSet()){ isObjectUpdated = true; break;}
        if(jdbc_username != nullptr && jdbc_username->isSet()){ isObjectUpdated = true; break;}
        if(jdbc_password != nullptr && jdbc_password->isSet()){ isObjectUpdated = true; break;}
        if(jdbc_validation_query != nullptr && jdbc_validation_query->isSet()){ isObjectUpdated = true; break;}
        if(default_readonly != nullptr && default_readonly->isSet()){ isObjectUpdated = true; break;}
        if(default_autocommit != nullptr && default_autocommit->isSet()){ isObjectUpdated = true; break;}
        if(pool_size != nullptr && pool_size->isSet()){ isObjectUpdated = true; break;}
        if(pool_max_wait_msec != nullptr && pool_max_wait_msec->isSet()){ isObjectUpdated = true; break;}
        if(datasource_name != nullptr && datasource_name->isSet()){ isObjectUpdated = true; break;}
        if(datasource_svc_properties != nullptr && datasource_svc_properties->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

