/*
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OAS-api/OAS-codegen.git
 * Do not edit the class manually.
 */

/**
 * OASComDayCqDamIdsImplIDSPoolManagerI
 */
public class OASComDayCqDamIdsImplIDSPoolManagerI implements OAS.MappedProperties {
    /**
     * Get maxErrorsToBlacklist
     * @return maxErrorsToBlacklist
     */
    public OASConfigNodePropertyInteger maxErrorsToBlacklist { get; set; }

    /**
     * Get retryIntervalToWhitelist
     * @return retryIntervalToWhitelist
     */
    public OASConfigNodePropertyInteger retryIntervalToWhitelist { get; set; }

    /**
     * Get connectTimeout
     * @return connectTimeout
     */
    public OASConfigNodePropertyInteger connectTimeout { get; set; }

    /**
     * Get socketTimeout
     * @return socketTimeout
     */
    public OASConfigNodePropertyInteger socketTimeout { get; set; }

    /**
     * Get processLabel
     * @return processLabel
     */
    public OASConfigNodePropertyString processLabel { get; set; }

    /**
     * Get connectionUseMax
     * @return connectionUseMax
     */
    public OASConfigNodePropertyInteger connectionUseMax { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'max.errors.to.blacklist' => 'maxErrorsToBlacklist',
        'retry.interval.to.whitelist' => 'retryIntervalToWhitelist',
        'connect.timeout' => 'connectTimeout',
        'socket.timeout' => 'socketTimeout',
        'process.label' => 'processLabel',
        'connection.use.max' => 'connectionUseMax'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public static OASComDayCqDamIdsImplIDSPoolManagerI getExample() {
        OASComDayCqDamIdsImplIDSPoolManagerI comDayCqDamIdsImplIDSPoolManagerImplProperties = new OASComDayCqDamIdsImplIDSPoolManagerI();
          comDayCqDamIdsImplIDSPoolManagerImplProperties.maxErrorsToBlacklist = OASConfigNodePropertyInteger.getExample();
          comDayCqDamIdsImplIDSPoolManagerImplProperties.retryIntervalToWhitelist = OASConfigNodePropertyInteger.getExample();
          comDayCqDamIdsImplIDSPoolManagerImplProperties.connectTimeout = OASConfigNodePropertyInteger.getExample();
          comDayCqDamIdsImplIDSPoolManagerImplProperties.socketTimeout = OASConfigNodePropertyInteger.getExample();
          comDayCqDamIdsImplIDSPoolManagerImplProperties.processLabel = OASConfigNodePropertyString.getExample();
          comDayCqDamIdsImplIDSPoolManagerImplProperties.connectionUseMax = OASConfigNodePropertyInteger.getExample();
        return comDayCqDamIdsImplIDSPoolManagerImplProperties;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASComDayCqDamIdsImplIDSPoolManagerI) {           
            OASComDayCqDamIdsImplIDSPoolManagerI comDayCqDamIdsImplIDSPoolManagerImplProperties = (OASComDayCqDamIdsImplIDSPoolManagerI) obj;
            return this.maxErrorsToBlacklist == comDayCqDamIdsImplIDSPoolManagerImplProperties.maxErrorsToBlacklist
                && this.retryIntervalToWhitelist == comDayCqDamIdsImplIDSPoolManagerImplProperties.retryIntervalToWhitelist
                && this.connectTimeout == comDayCqDamIdsImplIDSPoolManagerImplProperties.connectTimeout
                && this.socketTimeout == comDayCqDamIdsImplIDSPoolManagerImplProperties.socketTimeout
                && this.processLabel == comDayCqDamIdsImplIDSPoolManagerImplProperties.processLabel
                && this.connectionUseMax == comDayCqDamIdsImplIDSPoolManagerImplProperties.connectionUseMax;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (maxErrorsToBlacklist == null ? 0 : System.hashCode(maxErrorsToBlacklist));
        hashCode = (17 * hashCode) + (retryIntervalToWhitelist == null ? 0 : System.hashCode(retryIntervalToWhitelist));
        hashCode = (17 * hashCode) + (connectTimeout == null ? 0 : System.hashCode(connectTimeout));
        hashCode = (17 * hashCode) + (socketTimeout == null ? 0 : System.hashCode(socketTimeout));
        hashCode = (17 * hashCode) + (processLabel == null ? 0 : System.hashCode(processLabel));
        hashCode = (17 * hashCode) + (connectionUseMax == null ? 0 : System.hashCode(connectionUseMax));
        return hashCode;
    }
}

