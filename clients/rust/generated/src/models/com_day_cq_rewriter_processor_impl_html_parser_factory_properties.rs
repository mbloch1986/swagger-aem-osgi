/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComDayCqRewriterProcessorImplHtmlParserFactoryProperties {
  #[serde(rename = "htmlparser.processTags")]
  htmlparser_process_tags: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "htmlparser.preserveCamelCase")]
  htmlparser_preserve_camel_case: Option<::models::ConfigNodePropertyBoolean>
}

impl ComDayCqRewriterProcessorImplHtmlParserFactoryProperties {
  pub fn new() -> ComDayCqRewriterProcessorImplHtmlParserFactoryProperties {
    ComDayCqRewriterProcessorImplHtmlParserFactoryProperties {
      htmlparser_process_tags: None,
      htmlparser_preserve_camel_case: None
    }
  }

  pub fn set_htmlparser_process_tags(&mut self, htmlparser_process_tags: ::models::ConfigNodePropertyArray) {
    self.htmlparser_process_tags = Some(htmlparser_process_tags);
  }

  pub fn with_htmlparser_process_tags(mut self, htmlparser_process_tags: ::models::ConfigNodePropertyArray) -> ComDayCqRewriterProcessorImplHtmlParserFactoryProperties {
    self.htmlparser_process_tags = Some(htmlparser_process_tags);
    self
  }

  pub fn htmlparser_process_tags(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.htmlparser_process_tags.as_ref()
  }

  pub fn reset_htmlparser_process_tags(&mut self) {
    self.htmlparser_process_tags = None;
  }

  pub fn set_htmlparser_preserve_camel_case(&mut self, htmlparser_preserve_camel_case: ::models::ConfigNodePropertyBoolean) {
    self.htmlparser_preserve_camel_case = Some(htmlparser_preserve_camel_case);
  }

  pub fn with_htmlparser_preserve_camel_case(mut self, htmlparser_preserve_camel_case: ::models::ConfigNodePropertyBoolean) -> ComDayCqRewriterProcessorImplHtmlParserFactoryProperties {
    self.htmlparser_preserve_camel_case = Some(htmlparser_preserve_camel_case);
    self
  }

  pub fn htmlparser_preserve_camel_case(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.htmlparser_preserve_camel_case.as_ref()
  }

  pub fn reset_htmlparser_preserve_camel_case(&mut self) {
    self.htmlparser_preserve_camel_case = None;
  }

}



