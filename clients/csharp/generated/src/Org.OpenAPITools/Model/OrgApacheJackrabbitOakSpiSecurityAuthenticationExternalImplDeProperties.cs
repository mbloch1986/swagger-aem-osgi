/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties
    /// </summary>
    [DataContract]
    public partial class OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties :  IEquatable<OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties" /> class.
        /// </summary>
        /// <param name="handlerName">handlerName.</param>
        /// <param name="userExpirationTime">userExpirationTime.</param>
        /// <param name="userAutoMembership">userAutoMembership.</param>
        /// <param name="userPropertyMapping">userPropertyMapping.</param>
        /// <param name="userPathPrefix">userPathPrefix.</param>
        /// <param name="userMembershipExpTime">userMembershipExpTime.</param>
        /// <param name="userMembershipNestingDepth">userMembershipNestingDepth.</param>
        /// <param name="userDynamicMembership">userDynamicMembership.</param>
        /// <param name="userDisableMissing">userDisableMissing.</param>
        /// <param name="groupExpirationTime">groupExpirationTime.</param>
        /// <param name="groupAutoMembership">groupAutoMembership.</param>
        /// <param name="groupPropertyMapping">groupPropertyMapping.</param>
        /// <param name="groupPathPrefix">groupPathPrefix.</param>
        /// <param name="enableRFC7613UsercaseMappedProfile">enableRFC7613UsercaseMappedProfile.</param>
        public OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties(ConfigNodePropertyString handlerName = default(ConfigNodePropertyString), ConfigNodePropertyString userExpirationTime = default(ConfigNodePropertyString), ConfigNodePropertyArray userAutoMembership = default(ConfigNodePropertyArray), ConfigNodePropertyArray userPropertyMapping = default(ConfigNodePropertyArray), ConfigNodePropertyString userPathPrefix = default(ConfigNodePropertyString), ConfigNodePropertyString userMembershipExpTime = default(ConfigNodePropertyString), ConfigNodePropertyInteger userMembershipNestingDepth = default(ConfigNodePropertyInteger), ConfigNodePropertyBoolean userDynamicMembership = default(ConfigNodePropertyBoolean), ConfigNodePropertyBoolean userDisableMissing = default(ConfigNodePropertyBoolean), ConfigNodePropertyString groupExpirationTime = default(ConfigNodePropertyString), ConfigNodePropertyArray groupAutoMembership = default(ConfigNodePropertyArray), ConfigNodePropertyArray groupPropertyMapping = default(ConfigNodePropertyArray), ConfigNodePropertyString groupPathPrefix = default(ConfigNodePropertyString), ConfigNodePropertyBoolean enableRFC7613UsercaseMappedProfile = default(ConfigNodePropertyBoolean))
        {
            this.HandlerName = handlerName;
            this.UserExpirationTime = userExpirationTime;
            this.UserAutoMembership = userAutoMembership;
            this.UserPropertyMapping = userPropertyMapping;
            this.UserPathPrefix = userPathPrefix;
            this.UserMembershipExpTime = userMembershipExpTime;
            this.UserMembershipNestingDepth = userMembershipNestingDepth;
            this.UserDynamicMembership = userDynamicMembership;
            this.UserDisableMissing = userDisableMissing;
            this.GroupExpirationTime = groupExpirationTime;
            this.GroupAutoMembership = groupAutoMembership;
            this.GroupPropertyMapping = groupPropertyMapping;
            this.GroupPathPrefix = groupPathPrefix;
            this.EnableRFC7613UsercaseMappedProfile = enableRFC7613UsercaseMappedProfile;
        }
        
        /// <summary>
        /// Gets or Sets HandlerName
        /// </summary>
        [DataMember(Name="handler.name", EmitDefaultValue=false)]
        public ConfigNodePropertyString HandlerName { get; set; }

        /// <summary>
        /// Gets or Sets UserExpirationTime
        /// </summary>
        [DataMember(Name="user.expirationTime", EmitDefaultValue=false)]
        public ConfigNodePropertyString UserExpirationTime { get; set; }

        /// <summary>
        /// Gets or Sets UserAutoMembership
        /// </summary>
        [DataMember(Name="user.autoMembership", EmitDefaultValue=false)]
        public ConfigNodePropertyArray UserAutoMembership { get; set; }

        /// <summary>
        /// Gets or Sets UserPropertyMapping
        /// </summary>
        [DataMember(Name="user.propertyMapping", EmitDefaultValue=false)]
        public ConfigNodePropertyArray UserPropertyMapping { get; set; }

        /// <summary>
        /// Gets or Sets UserPathPrefix
        /// </summary>
        [DataMember(Name="user.pathPrefix", EmitDefaultValue=false)]
        public ConfigNodePropertyString UserPathPrefix { get; set; }

        /// <summary>
        /// Gets or Sets UserMembershipExpTime
        /// </summary>
        [DataMember(Name="user.membershipExpTime", EmitDefaultValue=false)]
        public ConfigNodePropertyString UserMembershipExpTime { get; set; }

        /// <summary>
        /// Gets or Sets UserMembershipNestingDepth
        /// </summary>
        [DataMember(Name="user.membershipNestingDepth", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger UserMembershipNestingDepth { get; set; }

        /// <summary>
        /// Gets or Sets UserDynamicMembership
        /// </summary>
        [DataMember(Name="user.dynamicMembership", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean UserDynamicMembership { get; set; }

        /// <summary>
        /// Gets or Sets UserDisableMissing
        /// </summary>
        [DataMember(Name="user.disableMissing", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean UserDisableMissing { get; set; }

        /// <summary>
        /// Gets or Sets GroupExpirationTime
        /// </summary>
        [DataMember(Name="group.expirationTime", EmitDefaultValue=false)]
        public ConfigNodePropertyString GroupExpirationTime { get; set; }

        /// <summary>
        /// Gets or Sets GroupAutoMembership
        /// </summary>
        [DataMember(Name="group.autoMembership", EmitDefaultValue=false)]
        public ConfigNodePropertyArray GroupAutoMembership { get; set; }

        /// <summary>
        /// Gets or Sets GroupPropertyMapping
        /// </summary>
        [DataMember(Name="group.propertyMapping", EmitDefaultValue=false)]
        public ConfigNodePropertyArray GroupPropertyMapping { get; set; }

        /// <summary>
        /// Gets or Sets GroupPathPrefix
        /// </summary>
        [DataMember(Name="group.pathPrefix", EmitDefaultValue=false)]
        public ConfigNodePropertyString GroupPathPrefix { get; set; }

        /// <summary>
        /// Gets or Sets EnableRFC7613UsercaseMappedProfile
        /// </summary>
        [DataMember(Name="enableRFC7613UsercaseMappedProfile", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean EnableRFC7613UsercaseMappedProfile { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties {\n");
            sb.Append("  HandlerName: ").Append(HandlerName).Append("\n");
            sb.Append("  UserExpirationTime: ").Append(UserExpirationTime).Append("\n");
            sb.Append("  UserAutoMembership: ").Append(UserAutoMembership).Append("\n");
            sb.Append("  UserPropertyMapping: ").Append(UserPropertyMapping).Append("\n");
            sb.Append("  UserPathPrefix: ").Append(UserPathPrefix).Append("\n");
            sb.Append("  UserMembershipExpTime: ").Append(UserMembershipExpTime).Append("\n");
            sb.Append("  UserMembershipNestingDepth: ").Append(UserMembershipNestingDepth).Append("\n");
            sb.Append("  UserDynamicMembership: ").Append(UserDynamicMembership).Append("\n");
            sb.Append("  UserDisableMissing: ").Append(UserDisableMissing).Append("\n");
            sb.Append("  GroupExpirationTime: ").Append(GroupExpirationTime).Append("\n");
            sb.Append("  GroupAutoMembership: ").Append(GroupAutoMembership).Append("\n");
            sb.Append("  GroupPropertyMapping: ").Append(GroupPropertyMapping).Append("\n");
            sb.Append("  GroupPathPrefix: ").Append(GroupPathPrefix).Append("\n");
            sb.Append("  EnableRFC7613UsercaseMappedProfile: ").Append(EnableRFC7613UsercaseMappedProfile).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties);
        }

        /// <summary>
        /// Returns true if OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeProperties input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.HandlerName == input.HandlerName ||
                    (this.HandlerName != null &&
                    this.HandlerName.Equals(input.HandlerName))
                ) && 
                (
                    this.UserExpirationTime == input.UserExpirationTime ||
                    (this.UserExpirationTime != null &&
                    this.UserExpirationTime.Equals(input.UserExpirationTime))
                ) && 
                (
                    this.UserAutoMembership == input.UserAutoMembership ||
                    (this.UserAutoMembership != null &&
                    this.UserAutoMembership.Equals(input.UserAutoMembership))
                ) && 
                (
                    this.UserPropertyMapping == input.UserPropertyMapping ||
                    (this.UserPropertyMapping != null &&
                    this.UserPropertyMapping.Equals(input.UserPropertyMapping))
                ) && 
                (
                    this.UserPathPrefix == input.UserPathPrefix ||
                    (this.UserPathPrefix != null &&
                    this.UserPathPrefix.Equals(input.UserPathPrefix))
                ) && 
                (
                    this.UserMembershipExpTime == input.UserMembershipExpTime ||
                    (this.UserMembershipExpTime != null &&
                    this.UserMembershipExpTime.Equals(input.UserMembershipExpTime))
                ) && 
                (
                    this.UserMembershipNestingDepth == input.UserMembershipNestingDepth ||
                    (this.UserMembershipNestingDepth != null &&
                    this.UserMembershipNestingDepth.Equals(input.UserMembershipNestingDepth))
                ) && 
                (
                    this.UserDynamicMembership == input.UserDynamicMembership ||
                    (this.UserDynamicMembership != null &&
                    this.UserDynamicMembership.Equals(input.UserDynamicMembership))
                ) && 
                (
                    this.UserDisableMissing == input.UserDisableMissing ||
                    (this.UserDisableMissing != null &&
                    this.UserDisableMissing.Equals(input.UserDisableMissing))
                ) && 
                (
                    this.GroupExpirationTime == input.GroupExpirationTime ||
                    (this.GroupExpirationTime != null &&
                    this.GroupExpirationTime.Equals(input.GroupExpirationTime))
                ) && 
                (
                    this.GroupAutoMembership == input.GroupAutoMembership ||
                    (this.GroupAutoMembership != null &&
                    this.GroupAutoMembership.Equals(input.GroupAutoMembership))
                ) && 
                (
                    this.GroupPropertyMapping == input.GroupPropertyMapping ||
                    (this.GroupPropertyMapping != null &&
                    this.GroupPropertyMapping.Equals(input.GroupPropertyMapping))
                ) && 
                (
                    this.GroupPathPrefix == input.GroupPathPrefix ||
                    (this.GroupPathPrefix != null &&
                    this.GroupPathPrefix.Equals(input.GroupPathPrefix))
                ) && 
                (
                    this.EnableRFC7613UsercaseMappedProfile == input.EnableRFC7613UsercaseMappedProfile ||
                    (this.EnableRFC7613UsercaseMappedProfile != null &&
                    this.EnableRFC7613UsercaseMappedProfile.Equals(input.EnableRFC7613UsercaseMappedProfile))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.HandlerName != null)
                    hashCode = hashCode * 59 + this.HandlerName.GetHashCode();
                if (this.UserExpirationTime != null)
                    hashCode = hashCode * 59 + this.UserExpirationTime.GetHashCode();
                if (this.UserAutoMembership != null)
                    hashCode = hashCode * 59 + this.UserAutoMembership.GetHashCode();
                if (this.UserPropertyMapping != null)
                    hashCode = hashCode * 59 + this.UserPropertyMapping.GetHashCode();
                if (this.UserPathPrefix != null)
                    hashCode = hashCode * 59 + this.UserPathPrefix.GetHashCode();
                if (this.UserMembershipExpTime != null)
                    hashCode = hashCode * 59 + this.UserMembershipExpTime.GetHashCode();
                if (this.UserMembershipNestingDepth != null)
                    hashCode = hashCode * 59 + this.UserMembershipNestingDepth.GetHashCode();
                if (this.UserDynamicMembership != null)
                    hashCode = hashCode * 59 + this.UserDynamicMembership.GetHashCode();
                if (this.UserDisableMissing != null)
                    hashCode = hashCode * 59 + this.UserDisableMissing.GetHashCode();
                if (this.GroupExpirationTime != null)
                    hashCode = hashCode * 59 + this.GroupExpirationTime.GetHashCode();
                if (this.GroupAutoMembership != null)
                    hashCode = hashCode * 59 + this.GroupAutoMembership.GetHashCode();
                if (this.GroupPropertyMapping != null)
                    hashCode = hashCode * 59 + this.GroupPropertyMapping.GetHashCode();
                if (this.GroupPathPrefix != null)
                    hashCode = hashCode * 59 + this.GroupPathPrefix.GetHashCode();
                if (this.EnableRFC7613UsercaseMappedProfile != null)
                    hashCode = hashCode * 59 + this.EnableRFC7613UsercaseMappedProfile.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
