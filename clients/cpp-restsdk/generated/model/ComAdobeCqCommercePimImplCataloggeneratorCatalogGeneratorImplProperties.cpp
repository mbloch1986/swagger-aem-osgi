/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplProperties::ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplProperties()
{
    m_Cq_commerce_cataloggenerator_bucketsizeIsSet = false;
    m_Cq_commerce_cataloggenerator_bucketnameIsSet = false;
    m_Cq_commerce_cataloggenerator_excludedtemplatepropertiesIsSet = false;
}

ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplProperties::~ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplProperties()
{
}

void ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Cq_commerce_cataloggenerator_bucketsizeIsSet)
    {
        val[utility::conversions::to_string_t("cq.commerce.cataloggenerator.bucketsize")] = ModelBase::toJson(m_Cq_commerce_cataloggenerator_bucketsize);
    }
    if(m_Cq_commerce_cataloggenerator_bucketnameIsSet)
    {
        val[utility::conversions::to_string_t("cq.commerce.cataloggenerator.bucketname")] = ModelBase::toJson(m_Cq_commerce_cataloggenerator_bucketname);
    }
    if(m_Cq_commerce_cataloggenerator_excludedtemplatepropertiesIsSet)
    {
        val[utility::conversions::to_string_t("cq.commerce.cataloggenerator.excludedtemplateproperties")] = ModelBase::toJson(m_Cq_commerce_cataloggenerator_excludedtemplateproperties);
    }

    return val;
}

void ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("cq.commerce.cataloggenerator.bucketsize")))
    {
        if(!val[utility::conversions::to_string_t("cq.commerce.cataloggenerator.bucketsize")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("cq.commerce.cataloggenerator.bucketsize")]);
            setCqCommerceCataloggeneratorBucketsize( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cq.commerce.cataloggenerator.bucketname")))
    {
        if(!val[utility::conversions::to_string_t("cq.commerce.cataloggenerator.bucketname")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("cq.commerce.cataloggenerator.bucketname")]);
            setCqCommerceCataloggeneratorBucketname( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cq.commerce.cataloggenerator.excludedtemplateproperties")))
    {
        if(!val[utility::conversions::to_string_t("cq.commerce.cataloggenerator.excludedtemplateproperties")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("cq.commerce.cataloggenerator.excludedtemplateproperties")]);
            setCqCommerceCataloggeneratorExcludedtemplateproperties( newItem );
        }
    }
}

void ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Cq_commerce_cataloggenerator_bucketsizeIsSet)
    {
        if (m_Cq_commerce_cataloggenerator_bucketsize.get())
        {
            m_Cq_commerce_cataloggenerator_bucketsize->toMultipart(multipart, utility::conversions::to_string_t("cq.commerce.cataloggenerator.bucketsize."));
        }
    }
    if(m_Cq_commerce_cataloggenerator_bucketnameIsSet)
    {
        if (m_Cq_commerce_cataloggenerator_bucketname.get())
        {
            m_Cq_commerce_cataloggenerator_bucketname->toMultipart(multipart, utility::conversions::to_string_t("cq.commerce.cataloggenerator.bucketname."));
        }
    }
    if(m_Cq_commerce_cataloggenerator_excludedtemplatepropertiesIsSet)
    {
        if (m_Cq_commerce_cataloggenerator_excludedtemplateproperties.get())
        {
            m_Cq_commerce_cataloggenerator_excludedtemplateproperties->toMultipart(multipart, utility::conversions::to_string_t("cq.commerce.cataloggenerator.excludedtemplateproperties."));
        }
    }
}

void ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("cq.commerce.cataloggenerator.bucketsize")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cq.commerce.cataloggenerator.bucketsize")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cq.commerce.cataloggenerator.bucketsize."));
            setCqCommerceCataloggeneratorBucketsize( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cq.commerce.cataloggenerator.bucketname")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cq.commerce.cataloggenerator.bucketname")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cq.commerce.cataloggenerator.bucketname."));
            setCqCommerceCataloggeneratorBucketname( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cq.commerce.cataloggenerator.excludedtemplateproperties")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cq.commerce.cataloggenerator.excludedtemplateproperties")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cq.commerce.cataloggenerator.excludedtemplateproperties."));
            setCqCommerceCataloggeneratorExcludedtemplateproperties( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplProperties::getCqCommerceCataloggeneratorBucketsize() const
{
    return m_Cq_commerce_cataloggenerator_bucketsize;
}


void ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplProperties::setCqCommerceCataloggeneratorBucketsize(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Cq_commerce_cataloggenerator_bucketsize = value;
    m_Cq_commerce_cataloggenerator_bucketsizeIsSet = true;
}
bool ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplProperties::cqCommerceCataloggeneratorBucketsizeIsSet() const
{
    return m_Cq_commerce_cataloggenerator_bucketsizeIsSet;
}

void ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplProperties::unsetCq_commerce_cataloggenerator_bucketsize()
{
    m_Cq_commerce_cataloggenerator_bucketsizeIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplProperties::getCqCommerceCataloggeneratorBucketname() const
{
    return m_Cq_commerce_cataloggenerator_bucketname;
}


void ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplProperties::setCqCommerceCataloggeneratorBucketname(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Cq_commerce_cataloggenerator_bucketname = value;
    m_Cq_commerce_cataloggenerator_bucketnameIsSet = true;
}
bool ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplProperties::cqCommerceCataloggeneratorBucketnameIsSet() const
{
    return m_Cq_commerce_cataloggenerator_bucketnameIsSet;
}

void ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplProperties::unsetCq_commerce_cataloggenerator_bucketname()
{
    m_Cq_commerce_cataloggenerator_bucketnameIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplProperties::getCqCommerceCataloggeneratorExcludedtemplateproperties() const
{
    return m_Cq_commerce_cataloggenerator_excludedtemplateproperties;
}


void ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplProperties::setCqCommerceCataloggeneratorExcludedtemplateproperties(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Cq_commerce_cataloggenerator_excludedtemplateproperties = value;
    m_Cq_commerce_cataloggenerator_excludedtemplatepropertiesIsSet = true;
}
bool ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplProperties::cqCommerceCataloggeneratorExcludedtemplatepropertiesIsSet() const
{
    return m_Cq_commerce_cataloggenerator_excludedtemplatepropertiesIsSet;
}

void ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplProperties::unsetCq_commerce_cataloggenerator_excludedtemplateproperties()
{
    m_Cq_commerce_cataloggenerator_excludedtemplatepropertiesIsSet = false;
}

}
}
}
}

