/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ComAdobeGraniteThreaddumpThreadDumpCollectorProperties.h
 *
 * 
 */

#ifndef ComAdobeGraniteThreaddumpThreadDumpCollectorProperties_H_
#define ComAdobeGraniteThreaddumpThreadDumpCollectorProperties_H_



#include "ConfigNodePropertyBoolean.h"
#include "ConfigNodePropertyDropDown.h"
#include "ConfigNodePropertyInteger.h"
#include "ConfigNodePropertyString.h"
#include <memory>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  ComAdobeGraniteThreaddumpThreadDumpCollectorProperties
{
public:
    ComAdobeGraniteThreaddumpThreadDumpCollectorProperties();
    virtual ~ComAdobeGraniteThreaddumpThreadDumpCollectorProperties();
    
    std::string toJsonString();
    void fromJsonString(std::string const& jsonString);

    /////////////////////////////////////////////
    /// ComAdobeGraniteThreaddumpThreadDumpCollectorProperties members
    
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getSchedulerPeriod() const;
    void setSchedulerPeriod(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyDropDown> getSchedulerRunOn() const;
    void setSchedulerRunOn(std::shared_ptr<ConfigNodePropertyDropDown> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getGraniteThreaddumpEnabled() const;
    void setGraniteThreaddumpEnabled(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getGraniteThreaddumpDumpsPerFile() const;
    void setGraniteThreaddumpDumpsPerFile(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getGraniteThreaddumpEnableGzipCompression() const;
    void setGraniteThreaddumpEnableGzipCompression(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getGraniteThreaddumpEnableDirectoriesCompression() const;
    void setGraniteThreaddumpEnableDirectoriesCompression(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getGraniteThreaddumpEnableJStack() const;
    void setGraniteThreaddumpEnableJStack(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getGraniteThreaddumpMaxBackupDays() const;
    void setGraniteThreaddumpMaxBackupDays(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getGraniteThreaddumpBackupCleanTrigger() const;
    void setGraniteThreaddumpBackupCleanTrigger(std::shared_ptr<ConfigNodePropertyString> value);

protected:
    std::shared_ptr<ConfigNodePropertyInteger> m_Scheduler_period;
    std::shared_ptr<ConfigNodePropertyDropDown> m_Scheduler_runOn;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Granite_threaddump_enabled;
    std::shared_ptr<ConfigNodePropertyInteger> m_Granite_threaddump_dumpsPerFile;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Granite_threaddump_enableGzipCompression;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Granite_threaddump_enableDirectoriesCompression;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Granite_threaddump_enableJStack;
    std::shared_ptr<ConfigNodePropertyInteger> m_Granite_threaddump_maxBackupDays;
    std::shared_ptr<ConfigNodePropertyString> m_Granite_threaddump_backupCleanTrigger;
};

}
}
}
}

#endif /* ComAdobeGraniteThreaddumpThreadDumpCollectorProperties_H_ */
