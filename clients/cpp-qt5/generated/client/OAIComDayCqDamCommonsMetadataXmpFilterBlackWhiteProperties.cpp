/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComDayCqDamCommonsMetadataXmpFilterBlackWhiteProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComDayCqDamCommonsMetadataXmpFilterBlackWhiteProperties::OAIComDayCqDamCommonsMetadataXmpFilterBlackWhiteProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIComDayCqDamCommonsMetadataXmpFilterBlackWhiteProperties::OAIComDayCqDamCommonsMetadataXmpFilterBlackWhiteProperties() {
    init();
}

OAIComDayCqDamCommonsMetadataXmpFilterBlackWhiteProperties::~OAIComDayCqDamCommonsMetadataXmpFilterBlackWhiteProperties() {
    this->cleanup();
}

void
OAIComDayCqDamCommonsMetadataXmpFilterBlackWhiteProperties::init() {
    xmp_filter_apply_whitelist = new OAIConfigNodePropertyBoolean();
    m_xmp_filter_apply_whitelist_isSet = false;
    xmp_filter_whitelist = new OAIConfigNodePropertyArray();
    m_xmp_filter_whitelist_isSet = false;
    xmp_filter_apply_blacklist = new OAIConfigNodePropertyBoolean();
    m_xmp_filter_apply_blacklist_isSet = false;
    xmp_filter_blacklist = new OAIConfigNodePropertyArray();
    m_xmp_filter_blacklist_isSet = false;
}

void
OAIComDayCqDamCommonsMetadataXmpFilterBlackWhiteProperties::cleanup() {
    if(xmp_filter_apply_whitelist != nullptr) { 
        delete xmp_filter_apply_whitelist;
    }
    if(xmp_filter_whitelist != nullptr) { 
        delete xmp_filter_whitelist;
    }
    if(xmp_filter_apply_blacklist != nullptr) { 
        delete xmp_filter_apply_blacklist;
    }
    if(xmp_filter_blacklist != nullptr) { 
        delete xmp_filter_blacklist;
    }
}

OAIComDayCqDamCommonsMetadataXmpFilterBlackWhiteProperties*
OAIComDayCqDamCommonsMetadataXmpFilterBlackWhiteProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIComDayCqDamCommonsMetadataXmpFilterBlackWhiteProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&xmp_filter_apply_whitelist, pJson["xmp.filter.apply_whitelist"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&xmp_filter_whitelist, pJson["xmp.filter.whitelist"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
    ::OpenAPI::setValue(&xmp_filter_apply_blacklist, pJson["xmp.filter.apply_blacklist"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&xmp_filter_blacklist, pJson["xmp.filter.blacklist"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
}

QString
OAIComDayCqDamCommonsMetadataXmpFilterBlackWhiteProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComDayCqDamCommonsMetadataXmpFilterBlackWhiteProperties::asJsonObject() {
    QJsonObject obj;
    if((xmp_filter_apply_whitelist != nullptr) && (xmp_filter_apply_whitelist->isSet())){
        toJsonValue(QString("xmp.filter.apply_whitelist"), xmp_filter_apply_whitelist, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((xmp_filter_whitelist != nullptr) && (xmp_filter_whitelist->isSet())){
        toJsonValue(QString("xmp.filter.whitelist"), xmp_filter_whitelist, obj, QString("OAIConfigNodePropertyArray"));
    }
    if((xmp_filter_apply_blacklist != nullptr) && (xmp_filter_apply_blacklist->isSet())){
        toJsonValue(QString("xmp.filter.apply_blacklist"), xmp_filter_apply_blacklist, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((xmp_filter_blacklist != nullptr) && (xmp_filter_blacklist->isSet())){
        toJsonValue(QString("xmp.filter.blacklist"), xmp_filter_blacklist, obj, QString("OAIConfigNodePropertyArray"));
    }

    return obj;
}

OAIConfigNodePropertyBoolean*
OAIComDayCqDamCommonsMetadataXmpFilterBlackWhiteProperties::getXmpFilterApplyWhitelist() {
    return xmp_filter_apply_whitelist;
}
void
OAIComDayCqDamCommonsMetadataXmpFilterBlackWhiteProperties::setXmpFilterApplyWhitelist(OAIConfigNodePropertyBoolean* xmp_filter_apply_whitelist) {
    this->xmp_filter_apply_whitelist = xmp_filter_apply_whitelist;
    this->m_xmp_filter_apply_whitelist_isSet = true;
}

OAIConfigNodePropertyArray*
OAIComDayCqDamCommonsMetadataXmpFilterBlackWhiteProperties::getXmpFilterWhitelist() {
    return xmp_filter_whitelist;
}
void
OAIComDayCqDamCommonsMetadataXmpFilterBlackWhiteProperties::setXmpFilterWhitelist(OAIConfigNodePropertyArray* xmp_filter_whitelist) {
    this->xmp_filter_whitelist = xmp_filter_whitelist;
    this->m_xmp_filter_whitelist_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIComDayCqDamCommonsMetadataXmpFilterBlackWhiteProperties::getXmpFilterApplyBlacklist() {
    return xmp_filter_apply_blacklist;
}
void
OAIComDayCqDamCommonsMetadataXmpFilterBlackWhiteProperties::setXmpFilterApplyBlacklist(OAIConfigNodePropertyBoolean* xmp_filter_apply_blacklist) {
    this->xmp_filter_apply_blacklist = xmp_filter_apply_blacklist;
    this->m_xmp_filter_apply_blacklist_isSet = true;
}

OAIConfigNodePropertyArray*
OAIComDayCqDamCommonsMetadataXmpFilterBlackWhiteProperties::getXmpFilterBlacklist() {
    return xmp_filter_blacklist;
}
void
OAIComDayCqDamCommonsMetadataXmpFilterBlackWhiteProperties::setXmpFilterBlacklist(OAIConfigNodePropertyArray* xmp_filter_blacklist) {
    this->xmp_filter_blacklist = xmp_filter_blacklist;
    this->m_xmp_filter_blacklist_isSet = true;
}


bool
OAIComDayCqDamCommonsMetadataXmpFilterBlackWhiteProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(xmp_filter_apply_whitelist != nullptr && xmp_filter_apply_whitelist->isSet()){ isObjectUpdated = true; break;}
        if(xmp_filter_whitelist != nullptr && xmp_filter_whitelist->isSet()){ isObjectUpdated = true; break;}
        if(xmp_filter_apply_blacklist != nullptr && xmp_filter_apply_blacklist->isSet()){ isObjectUpdated = true; break;}
        if(xmp_filter_blacklist != nullptr && xmp_filter_blacklist->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

