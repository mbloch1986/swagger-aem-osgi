/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "OrgApacheSlingSecurityImplContentDispositionFilterProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

OrgApacheSlingSecurityImplContentDispositionFilterProperties::OrgApacheSlingSecurityImplContentDispositionFilterProperties()
{
    m_Sling_content_disposition_pathsIsSet = false;
    m_Sling_content_disposition_excluded_pathsIsSet = false;
    m_Sling_content_disposition_all_pathsIsSet = false;
    
}

OrgApacheSlingSecurityImplContentDispositionFilterProperties::~OrgApacheSlingSecurityImplContentDispositionFilterProperties()
{
}

void OrgApacheSlingSecurityImplContentDispositionFilterProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json OrgApacheSlingSecurityImplContentDispositionFilterProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_Sling_content_disposition_pathsIsSet)
    {
        val["sling.content.disposition.paths"] = ModelBase::toJson(m_Sling_content_disposition_paths);
    }
    if(m_Sling_content_disposition_excluded_pathsIsSet)
    {
        val["sling.content.disposition.excluded.paths"] = ModelBase::toJson(m_Sling_content_disposition_excluded_paths);
    }
    if(m_Sling_content_disposition_all_pathsIsSet)
    {
        val["sling.content.disposition.all.paths"] = ModelBase::toJson(m_Sling_content_disposition_all_paths);
    }
    

    return val;
}

void OrgApacheSlingSecurityImplContentDispositionFilterProperties::fromJson(nlohmann::json& val)
{
    if(val.find("sling.content.disposition.paths") != val.end())
    {
        if(!val["sling.content.disposition.paths"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["sling.content.disposition.paths"]);
            setSlingContentDispositionPaths( newItem );
        }
        
    }
    if(val.find("sling.content.disposition.excluded.paths") != val.end())
    {
        if(!val["sling.content.disposition.excluded.paths"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["sling.content.disposition.excluded.paths"]);
            setSlingContentDispositionExcludedPaths( newItem );
        }
        
    }
    if(val.find("sling.content.disposition.all.paths") != val.end())
    {
        if(!val["sling.content.disposition.all.paths"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["sling.content.disposition.all.paths"]);
            setSlingContentDispositionAllPaths( newItem );
        }
        
    }
    
}


ConfigNodePropertyArray OrgApacheSlingSecurityImplContentDispositionFilterProperties::getSlingContentDispositionPaths() const
{
    return m_Sling_content_disposition_paths;
}
void OrgApacheSlingSecurityImplContentDispositionFilterProperties::setSlingContentDispositionPaths(ConfigNodePropertyArray const& value)
{
    m_Sling_content_disposition_paths = value;
    m_Sling_content_disposition_pathsIsSet = true;
}
bool OrgApacheSlingSecurityImplContentDispositionFilterProperties::slingContentDispositionPathsIsSet() const
{
    return m_Sling_content_disposition_pathsIsSet;
}
void OrgApacheSlingSecurityImplContentDispositionFilterProperties::unsetSling_content_disposition_paths()
{
    m_Sling_content_disposition_pathsIsSet = false;
}
ConfigNodePropertyArray OrgApacheSlingSecurityImplContentDispositionFilterProperties::getSlingContentDispositionExcludedPaths() const
{
    return m_Sling_content_disposition_excluded_paths;
}
void OrgApacheSlingSecurityImplContentDispositionFilterProperties::setSlingContentDispositionExcludedPaths(ConfigNodePropertyArray const& value)
{
    m_Sling_content_disposition_excluded_paths = value;
    m_Sling_content_disposition_excluded_pathsIsSet = true;
}
bool OrgApacheSlingSecurityImplContentDispositionFilterProperties::slingContentDispositionExcludedPathsIsSet() const
{
    return m_Sling_content_disposition_excluded_pathsIsSet;
}
void OrgApacheSlingSecurityImplContentDispositionFilterProperties::unsetSling_content_disposition_excluded_paths()
{
    m_Sling_content_disposition_excluded_pathsIsSet = false;
}
ConfigNodePropertyBoolean OrgApacheSlingSecurityImplContentDispositionFilterProperties::getSlingContentDispositionAllPaths() const
{
    return m_Sling_content_disposition_all_paths;
}
void OrgApacheSlingSecurityImplContentDispositionFilterProperties::setSlingContentDispositionAllPaths(ConfigNodePropertyBoolean const& value)
{
    m_Sling_content_disposition_all_paths = value;
    m_Sling_content_disposition_all_pathsIsSet = true;
}
bool OrgApacheSlingSecurityImplContentDispositionFilterProperties::slingContentDispositionAllPathsIsSet() const
{
    return m_Sling_content_disposition_all_pathsIsSet;
}
void OrgApacheSlingSecurityImplContentDispositionFilterProperties::unsetSling_content_disposition_all_paths()
{
    m_Sling_content_disposition_all_pathsIsSet = false;
}

}
}
}
}

