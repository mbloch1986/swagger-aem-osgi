/*
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties : IEquatable<ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties>
    { 
        /// <summary>
        /// Gets or Sets PortalOutboxes
        /// </summary>
        [DataMember(Name="portal.outboxes")]
        public ConfigNodePropertyArray PortalOutboxes { get; set; }

        /// <summary>
        /// Gets or Sets DraftDataService
        /// </summary>
        [DataMember(Name="draft.data.service")]
        public ConfigNodePropertyString DraftDataService { get; set; }

        /// <summary>
        /// Gets or Sets DraftMetadataService
        /// </summary>
        [DataMember(Name="draft.metadata.service")]
        public ConfigNodePropertyString DraftMetadataService { get; set; }

        /// <summary>
        /// Gets or Sets SubmitDataService
        /// </summary>
        [DataMember(Name="submit.data.service")]
        public ConfigNodePropertyString SubmitDataService { get; set; }

        /// <summary>
        /// Gets or Sets SubmitMetadataService
        /// </summary>
        [DataMember(Name="submit.metadata.service")]
        public ConfigNodePropertyString SubmitMetadataService { get; set; }

        /// <summary>
        /// Gets or Sets PendingSignDataService
        /// </summary>
        [DataMember(Name="pendingSign.data.service")]
        public ConfigNodePropertyString PendingSignDataService { get; set; }

        /// <summary>
        /// Gets or Sets PendingSignMetadataService
        /// </summary>
        [DataMember(Name="pendingSign.metadata.service")]
        public ConfigNodePropertyString PendingSignMetadataService { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties {\n");
            sb.Append("  PortalOutboxes: ").Append(PortalOutboxes).Append("\n");
            sb.Append("  DraftDataService: ").Append(DraftDataService).Append("\n");
            sb.Append("  DraftMetadataService: ").Append(DraftMetadataService).Append("\n");
            sb.Append("  SubmitDataService: ").Append(SubmitDataService).Append("\n");
            sb.Append("  SubmitMetadataService: ").Append(SubmitMetadataService).Append("\n");
            sb.Append("  PendingSignDataService: ").Append(PendingSignDataService).Append("\n");
            sb.Append("  PendingSignMetadataService: ").Append(PendingSignMetadataService).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties)obj);
        }

        /// <summary>
        /// Returns true if ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties instances are equal
        /// </summary>
        /// <param name="other">Instance of ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    PortalOutboxes == other.PortalOutboxes ||
                    PortalOutboxes != null &&
                    PortalOutboxes.Equals(other.PortalOutboxes)
                ) && 
                (
                    DraftDataService == other.DraftDataService ||
                    DraftDataService != null &&
                    DraftDataService.Equals(other.DraftDataService)
                ) && 
                (
                    DraftMetadataService == other.DraftMetadataService ||
                    DraftMetadataService != null &&
                    DraftMetadataService.Equals(other.DraftMetadataService)
                ) && 
                (
                    SubmitDataService == other.SubmitDataService ||
                    SubmitDataService != null &&
                    SubmitDataService.Equals(other.SubmitDataService)
                ) && 
                (
                    SubmitMetadataService == other.SubmitMetadataService ||
                    SubmitMetadataService != null &&
                    SubmitMetadataService.Equals(other.SubmitMetadataService)
                ) && 
                (
                    PendingSignDataService == other.PendingSignDataService ||
                    PendingSignDataService != null &&
                    PendingSignDataService.Equals(other.PendingSignDataService)
                ) && 
                (
                    PendingSignMetadataService == other.PendingSignMetadataService ||
                    PendingSignMetadataService != null &&
                    PendingSignMetadataService.Equals(other.PendingSignMetadataService)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (PortalOutboxes != null)
                    hashCode = hashCode * 59 + PortalOutboxes.GetHashCode();
                    if (DraftDataService != null)
                    hashCode = hashCode * 59 + DraftDataService.GetHashCode();
                    if (DraftMetadataService != null)
                    hashCode = hashCode * 59 + DraftMetadataService.GetHashCode();
                    if (SubmitDataService != null)
                    hashCode = hashCode * 59 + SubmitDataService.GetHashCode();
                    if (SubmitMetadataService != null)
                    hashCode = hashCode * 59 + SubmitMetadataService.GetHashCode();
                    if (PendingSignDataService != null)
                    hashCode = hashCode * 59 + PendingSignDataService.GetHashCode();
                    if (PendingSignMetadataService != null)
                    hashCode = hashCode * 59 + PendingSignMetadataService.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties left, ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties left, ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceProperties right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
