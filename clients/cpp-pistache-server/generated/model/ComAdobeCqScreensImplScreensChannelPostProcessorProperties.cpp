/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ComAdobeCqScreensImplScreensChannelPostProcessorProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComAdobeCqScreensImplScreensChannelPostProcessorProperties::ComAdobeCqScreensImplScreensChannelPostProcessorProperties()
{
    m_Screens_channels_properties_to_removeIsSet = false;
    
}

ComAdobeCqScreensImplScreensChannelPostProcessorProperties::~ComAdobeCqScreensImplScreensChannelPostProcessorProperties()
{
}

void ComAdobeCqScreensImplScreensChannelPostProcessorProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json ComAdobeCqScreensImplScreensChannelPostProcessorProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_Screens_channels_properties_to_removeIsSet)
    {
        val["screens.channels.properties.to.remove"] = ModelBase::toJson(m_Screens_channels_properties_to_remove);
    }
    

    return val;
}

void ComAdobeCqScreensImplScreensChannelPostProcessorProperties::fromJson(nlohmann::json& val)
{
    if(val.find("screens.channels.properties.to.remove") != val.end())
    {
        if(!val["screens.channels.properties.to.remove"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["screens.channels.properties.to.remove"]);
            setScreensChannelsPropertiesToRemove( newItem );
        }
        
    }
    
}


ConfigNodePropertyArray ComAdobeCqScreensImplScreensChannelPostProcessorProperties::getScreensChannelsPropertiesToRemove() const
{
    return m_Screens_channels_properties_to_remove;
}
void ComAdobeCqScreensImplScreensChannelPostProcessorProperties::setScreensChannelsPropertiesToRemove(ConfigNodePropertyArray const& value)
{
    m_Screens_channels_properties_to_remove = value;
    m_Screens_channels_properties_to_removeIsSet = true;
}
bool ComAdobeCqScreensImplScreensChannelPostProcessorProperties::screensChannelsPropertiesToRemoveIsSet() const
{
    return m_Screens_channels_properties_to_removeIsSet;
}
void ComAdobeCqScreensImplScreensChannelPostProcessorProperties::unsetScreens_channels_properties_to_remove()
{
    m_Screens_channels_properties_to_removeIsSet = false;
}

}
}
}
}

