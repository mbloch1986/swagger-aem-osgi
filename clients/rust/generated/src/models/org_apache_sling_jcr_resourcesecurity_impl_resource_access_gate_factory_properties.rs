/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryProperties {
  #[serde(rename = "path")]
  path: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "checkpath.prefix")]
  checkpath_prefix: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "jcrPath")]
  jcr_path: Option<::models::ConfigNodePropertyString>
}

impl OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryProperties {
  pub fn new() -> OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryProperties {
    OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryProperties {
      path: None,
      checkpath_prefix: None,
      jcr_path: None
    }
  }

  pub fn set_path(&mut self, path: ::models::ConfigNodePropertyString) {
    self.path = Some(path);
  }

  pub fn with_path(mut self, path: ::models::ConfigNodePropertyString) -> OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryProperties {
    self.path = Some(path);
    self
  }

  pub fn path(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.path.as_ref()
  }

  pub fn reset_path(&mut self) {
    self.path = None;
  }

  pub fn set_checkpath_prefix(&mut self, checkpath_prefix: ::models::ConfigNodePropertyString) {
    self.checkpath_prefix = Some(checkpath_prefix);
  }

  pub fn with_checkpath_prefix(mut self, checkpath_prefix: ::models::ConfigNodePropertyString) -> OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryProperties {
    self.checkpath_prefix = Some(checkpath_prefix);
    self
  }

  pub fn checkpath_prefix(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.checkpath_prefix.as_ref()
  }

  pub fn reset_checkpath_prefix(&mut self) {
    self.checkpath_prefix = None;
  }

  pub fn set_jcr_path(&mut self, jcr_path: ::models::ConfigNodePropertyString) {
    self.jcr_path = Some(jcr_path);
  }

  pub fn with_jcr_path(mut self, jcr_path: ::models::ConfigNodePropertyString) -> OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryProperties {
    self.jcr_path = Some(jcr_path);
    self
  }

  pub fn jcr_path(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.jcr_path.as_ref()
  }

  pub fn reset_jcr_path(&mut self) {
    self.jcr_path = None;
  }

}



