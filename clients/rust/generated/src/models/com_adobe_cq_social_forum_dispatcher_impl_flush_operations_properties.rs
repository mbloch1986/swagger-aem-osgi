/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComAdobeCqSocialForumDispatcherImplFlushOperationsProperties {
  #[serde(rename = "extension.order")]
  extension_order: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "flush.forumontopic")]
  flush_forumontopic: Option<::models::ConfigNodePropertyBoolean>
}

impl ComAdobeCqSocialForumDispatcherImplFlushOperationsProperties {
  pub fn new() -> ComAdobeCqSocialForumDispatcherImplFlushOperationsProperties {
    ComAdobeCqSocialForumDispatcherImplFlushOperationsProperties {
      extension_order: None,
      flush_forumontopic: None
    }
  }

  pub fn set_extension_order(&mut self, extension_order: ::models::ConfigNodePropertyInteger) {
    self.extension_order = Some(extension_order);
  }

  pub fn with_extension_order(mut self, extension_order: ::models::ConfigNodePropertyInteger) -> ComAdobeCqSocialForumDispatcherImplFlushOperationsProperties {
    self.extension_order = Some(extension_order);
    self
  }

  pub fn extension_order(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.extension_order.as_ref()
  }

  pub fn reset_extension_order(&mut self) {
    self.extension_order = None;
  }

  pub fn set_flush_forumontopic(&mut self, flush_forumontopic: ::models::ConfigNodePropertyBoolean) {
    self.flush_forumontopic = Some(flush_forumontopic);
  }

  pub fn with_flush_forumontopic(mut self, flush_forumontopic: ::models::ConfigNodePropertyBoolean) -> ComAdobeCqSocialForumDispatcherImplFlushOperationsProperties {
    self.flush_forumontopic = Some(flush_forumontopic);
    self
  }

  pub fn flush_forumontopic(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.flush_forumontopic.as_ref()
  }

  pub fn reset_flush_forumontopic(&mut self) {
    self.flush_forumontopic = None;
  }

}



