/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComDayCqRewriterProcessorImplHtmlParserFactoryProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComDayCqRewriterProcessorImplHtmlParserFactoryProperties::OAIComDayCqRewriterProcessorImplHtmlParserFactoryProperties(QString json) {
    this->fromJson(json);
}

OAIComDayCqRewriterProcessorImplHtmlParserFactoryProperties::OAIComDayCqRewriterProcessorImplHtmlParserFactoryProperties() {
    this->init();
}

OAIComDayCqRewriterProcessorImplHtmlParserFactoryProperties::~OAIComDayCqRewriterProcessorImplHtmlParserFactoryProperties() {
    
}

void
OAIComDayCqRewriterProcessorImplHtmlParserFactoryProperties::init() {
    m_htmlparser_process_tags_isSet = false;
    m_htmlparser_preserve_camel_case_isSet = false;
}

void
OAIComDayCqRewriterProcessorImplHtmlParserFactoryProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIComDayCqRewriterProcessorImplHtmlParserFactoryProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(htmlparser_process_tags, json[QString("htmlparser.processTags")]);
    
    ::OpenAPI::fromJsonValue(htmlparser_preserve_camel_case, json[QString("htmlparser.preserveCamelCase")]);
    
}

QString
OAIComDayCqRewriterProcessorImplHtmlParserFactoryProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComDayCqRewriterProcessorImplHtmlParserFactoryProperties::asJsonObject() const {
    QJsonObject obj;
	if(htmlparser_process_tags.isSet()){
        obj.insert(QString("htmlparser.processTags"), ::OpenAPI::toJsonValue(htmlparser_process_tags));
    }
	if(htmlparser_preserve_camel_case.isSet()){
        obj.insert(QString("htmlparser.preserveCamelCase"), ::OpenAPI::toJsonValue(htmlparser_preserve_camel_case));
    }
    return obj;
}

OAIConfigNodePropertyArray
OAIComDayCqRewriterProcessorImplHtmlParserFactoryProperties::getHtmlparserProcessTags() const {
    return htmlparser_process_tags;
}
void
OAIComDayCqRewriterProcessorImplHtmlParserFactoryProperties::setHtmlparserProcessTags(const OAIConfigNodePropertyArray &htmlparser_process_tags) {
    this->htmlparser_process_tags = htmlparser_process_tags;
    this->m_htmlparser_process_tags_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIComDayCqRewriterProcessorImplHtmlParserFactoryProperties::getHtmlparserPreserveCamelCase() const {
    return htmlparser_preserve_camel_case;
}
void
OAIComDayCqRewriterProcessorImplHtmlParserFactoryProperties::setHtmlparserPreserveCamelCase(const OAIConfigNodePropertyBoolean &htmlparser_preserve_camel_case) {
    this->htmlparser_preserve_camel_case = htmlparser_preserve_camel_case;
    this->m_htmlparser_preserve_camel_case_isSet = true;
}


bool
OAIComDayCqRewriterProcessorImplHtmlParserFactoryProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(htmlparser_process_tags.isSet()){ isObjectUpdated = true; break;}
    
        if(htmlparser_preserve_camel_case.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

