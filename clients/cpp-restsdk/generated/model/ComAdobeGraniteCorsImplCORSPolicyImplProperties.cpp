/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComAdobeGraniteCorsImplCORSPolicyImplProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComAdobeGraniteCorsImplCORSPolicyImplProperties::ComAdobeGraniteCorsImplCORSPolicyImplProperties()
{
    m_AlloworiginIsSet = false;
    m_AlloworiginregexpIsSet = false;
    m_AllowedpathsIsSet = false;
    m_ExposedheadersIsSet = false;
    m_MaxageIsSet = false;
    m_SupportedheadersIsSet = false;
    m_SupportedmethodsIsSet = false;
    m_SupportscredentialsIsSet = false;
}

ComAdobeGraniteCorsImplCORSPolicyImplProperties::~ComAdobeGraniteCorsImplCORSPolicyImplProperties()
{
}

void ComAdobeGraniteCorsImplCORSPolicyImplProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComAdobeGraniteCorsImplCORSPolicyImplProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_AlloworiginIsSet)
    {
        val[utility::conversions::to_string_t("alloworigin")] = ModelBase::toJson(m_Alloworigin);
    }
    if(m_AlloworiginregexpIsSet)
    {
        val[utility::conversions::to_string_t("alloworiginregexp")] = ModelBase::toJson(m_Alloworiginregexp);
    }
    if(m_AllowedpathsIsSet)
    {
        val[utility::conversions::to_string_t("allowedpaths")] = ModelBase::toJson(m_Allowedpaths);
    }
    if(m_ExposedheadersIsSet)
    {
        val[utility::conversions::to_string_t("exposedheaders")] = ModelBase::toJson(m_Exposedheaders);
    }
    if(m_MaxageIsSet)
    {
        val[utility::conversions::to_string_t("maxage")] = ModelBase::toJson(m_Maxage);
    }
    if(m_SupportedheadersIsSet)
    {
        val[utility::conversions::to_string_t("supportedheaders")] = ModelBase::toJson(m_Supportedheaders);
    }
    if(m_SupportedmethodsIsSet)
    {
        val[utility::conversions::to_string_t("supportedmethods")] = ModelBase::toJson(m_Supportedmethods);
    }
    if(m_SupportscredentialsIsSet)
    {
        val[utility::conversions::to_string_t("supportscredentials")] = ModelBase::toJson(m_Supportscredentials);
    }

    return val;
}

void ComAdobeGraniteCorsImplCORSPolicyImplProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("alloworigin")))
    {
        if(!val[utility::conversions::to_string_t("alloworigin")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("alloworigin")]);
            setAlloworigin( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("alloworiginregexp")))
    {
        if(!val[utility::conversions::to_string_t("alloworiginregexp")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("alloworiginregexp")]);
            setAlloworiginregexp( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("allowedpaths")))
    {
        if(!val[utility::conversions::to_string_t("allowedpaths")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("allowedpaths")]);
            setAllowedpaths( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("exposedheaders")))
    {
        if(!val[utility::conversions::to_string_t("exposedheaders")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("exposedheaders")]);
            setExposedheaders( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("maxage")))
    {
        if(!val[utility::conversions::to_string_t("maxage")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("maxage")]);
            setMaxage( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("supportedheaders")))
    {
        if(!val[utility::conversions::to_string_t("supportedheaders")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("supportedheaders")]);
            setSupportedheaders( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("supportedmethods")))
    {
        if(!val[utility::conversions::to_string_t("supportedmethods")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("supportedmethods")]);
            setSupportedmethods( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("supportscredentials")))
    {
        if(!val[utility::conversions::to_string_t("supportscredentials")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("supportscredentials")]);
            setSupportscredentials( newItem );
        }
    }
}

void ComAdobeGraniteCorsImplCORSPolicyImplProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_AlloworiginIsSet)
    {
        if (m_Alloworigin.get())
        {
            m_Alloworigin->toMultipart(multipart, utility::conversions::to_string_t("alloworigin."));
        }
    }
    if(m_AlloworiginregexpIsSet)
    {
        if (m_Alloworiginregexp.get())
        {
            m_Alloworiginregexp->toMultipart(multipart, utility::conversions::to_string_t("alloworiginregexp."));
        }
    }
    if(m_AllowedpathsIsSet)
    {
        if (m_Allowedpaths.get())
        {
            m_Allowedpaths->toMultipart(multipart, utility::conversions::to_string_t("allowedpaths."));
        }
    }
    if(m_ExposedheadersIsSet)
    {
        if (m_Exposedheaders.get())
        {
            m_Exposedheaders->toMultipart(multipart, utility::conversions::to_string_t("exposedheaders."));
        }
    }
    if(m_MaxageIsSet)
    {
        if (m_Maxage.get())
        {
            m_Maxage->toMultipart(multipart, utility::conversions::to_string_t("maxage."));
        }
    }
    if(m_SupportedheadersIsSet)
    {
        if (m_Supportedheaders.get())
        {
            m_Supportedheaders->toMultipart(multipart, utility::conversions::to_string_t("supportedheaders."));
        }
    }
    if(m_SupportedmethodsIsSet)
    {
        if (m_Supportedmethods.get())
        {
            m_Supportedmethods->toMultipart(multipart, utility::conversions::to_string_t("supportedmethods."));
        }
    }
    if(m_SupportscredentialsIsSet)
    {
        if (m_Supportscredentials.get())
        {
            m_Supportscredentials->toMultipart(multipart, utility::conversions::to_string_t("supportscredentials."));
        }
    }
}

void ComAdobeGraniteCorsImplCORSPolicyImplProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("alloworigin")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("alloworigin")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("alloworigin."));
            setAlloworigin( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("alloworiginregexp")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("alloworiginregexp")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("alloworiginregexp."));
            setAlloworiginregexp( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("allowedpaths")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("allowedpaths")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("allowedpaths."));
            setAllowedpaths( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("exposedheaders")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("exposedheaders")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("exposedheaders."));
            setExposedheaders( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("maxage")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("maxage")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("maxage."));
            setMaxage( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("supportedheaders")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("supportedheaders")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("supportedheaders."));
            setSupportedheaders( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("supportedmethods")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("supportedmethods")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("supportedmethods."));
            setSupportedmethods( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("supportscredentials")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("supportscredentials")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("supportscredentials."));
            setSupportscredentials( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyArray> ComAdobeGraniteCorsImplCORSPolicyImplProperties::getAlloworigin() const
{
    return m_Alloworigin;
}


void ComAdobeGraniteCorsImplCORSPolicyImplProperties::setAlloworigin(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Alloworigin = value;
    m_AlloworiginIsSet = true;
}
bool ComAdobeGraniteCorsImplCORSPolicyImplProperties::alloworiginIsSet() const
{
    return m_AlloworiginIsSet;
}

void ComAdobeGraniteCorsImplCORSPolicyImplProperties::unsetAlloworigin()
{
    m_AlloworiginIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> ComAdobeGraniteCorsImplCORSPolicyImplProperties::getAlloworiginregexp() const
{
    return m_Alloworiginregexp;
}


void ComAdobeGraniteCorsImplCORSPolicyImplProperties::setAlloworiginregexp(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Alloworiginregexp = value;
    m_AlloworiginregexpIsSet = true;
}
bool ComAdobeGraniteCorsImplCORSPolicyImplProperties::alloworiginregexpIsSet() const
{
    return m_AlloworiginregexpIsSet;
}

void ComAdobeGraniteCorsImplCORSPolicyImplProperties::unsetAlloworiginregexp()
{
    m_AlloworiginregexpIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> ComAdobeGraniteCorsImplCORSPolicyImplProperties::getAllowedpaths() const
{
    return m_Allowedpaths;
}


void ComAdobeGraniteCorsImplCORSPolicyImplProperties::setAllowedpaths(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Allowedpaths = value;
    m_AllowedpathsIsSet = true;
}
bool ComAdobeGraniteCorsImplCORSPolicyImplProperties::allowedpathsIsSet() const
{
    return m_AllowedpathsIsSet;
}

void ComAdobeGraniteCorsImplCORSPolicyImplProperties::unsetAllowedpaths()
{
    m_AllowedpathsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> ComAdobeGraniteCorsImplCORSPolicyImplProperties::getExposedheaders() const
{
    return m_Exposedheaders;
}


void ComAdobeGraniteCorsImplCORSPolicyImplProperties::setExposedheaders(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Exposedheaders = value;
    m_ExposedheadersIsSet = true;
}
bool ComAdobeGraniteCorsImplCORSPolicyImplProperties::exposedheadersIsSet() const
{
    return m_ExposedheadersIsSet;
}

void ComAdobeGraniteCorsImplCORSPolicyImplProperties::unsetExposedheaders()
{
    m_ExposedheadersIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeGraniteCorsImplCORSPolicyImplProperties::getMaxage() const
{
    return m_Maxage;
}


void ComAdobeGraniteCorsImplCORSPolicyImplProperties::setMaxage(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Maxage = value;
    m_MaxageIsSet = true;
}
bool ComAdobeGraniteCorsImplCORSPolicyImplProperties::maxageIsSet() const
{
    return m_MaxageIsSet;
}

void ComAdobeGraniteCorsImplCORSPolicyImplProperties::unsetMaxage()
{
    m_MaxageIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> ComAdobeGraniteCorsImplCORSPolicyImplProperties::getSupportedheaders() const
{
    return m_Supportedheaders;
}


void ComAdobeGraniteCorsImplCORSPolicyImplProperties::setSupportedheaders(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Supportedheaders = value;
    m_SupportedheadersIsSet = true;
}
bool ComAdobeGraniteCorsImplCORSPolicyImplProperties::supportedheadersIsSet() const
{
    return m_SupportedheadersIsSet;
}

void ComAdobeGraniteCorsImplCORSPolicyImplProperties::unsetSupportedheaders()
{
    m_SupportedheadersIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> ComAdobeGraniteCorsImplCORSPolicyImplProperties::getSupportedmethods() const
{
    return m_Supportedmethods;
}


void ComAdobeGraniteCorsImplCORSPolicyImplProperties::setSupportedmethods(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Supportedmethods = value;
    m_SupportedmethodsIsSet = true;
}
bool ComAdobeGraniteCorsImplCORSPolicyImplProperties::supportedmethodsIsSet() const
{
    return m_SupportedmethodsIsSet;
}

void ComAdobeGraniteCorsImplCORSPolicyImplProperties::unsetSupportedmethods()
{
    m_SupportedmethodsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> ComAdobeGraniteCorsImplCORSPolicyImplProperties::getSupportscredentials() const
{
    return m_Supportscredentials;
}


void ComAdobeGraniteCorsImplCORSPolicyImplProperties::setSupportscredentials(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Supportscredentials = value;
    m_SupportscredentialsIsSet = true;
}
bool ComAdobeGraniteCorsImplCORSPolicyImplProperties::supportscredentialsIsSet() const
{
    return m_SupportscredentialsIsSet;
}

void ComAdobeGraniteCorsImplCORSPolicyImplProperties::unsetSupportscredentials()
{
    m_SupportscredentialsIsSet = false;
}

}
}
}
}

