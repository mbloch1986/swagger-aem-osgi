/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// OrgApacheSlingServletsResolverSlingServletResolverProperties
    /// </summary>
    [DataContract]
    public partial class OrgApacheSlingServletsResolverSlingServletResolverProperties :  IEquatable<OrgApacheSlingServletsResolverSlingServletResolverProperties>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrgApacheSlingServletsResolverSlingServletResolverProperties" /> class.
        /// </summary>
        /// <param name="servletresolverServletRoot">servletresolverServletRoot.</param>
        /// <param name="servletresolverCacheSize">servletresolverCacheSize.</param>
        /// <param name="servletresolverPaths">servletresolverPaths.</param>
        /// <param name="servletresolverDefaultExtensions">servletresolverDefaultExtensions.</param>
        public OrgApacheSlingServletsResolverSlingServletResolverProperties(ConfigNodePropertyString servletresolverServletRoot = default(ConfigNodePropertyString), ConfigNodePropertyInteger servletresolverCacheSize = default(ConfigNodePropertyInteger), ConfigNodePropertyArray servletresolverPaths = default(ConfigNodePropertyArray), ConfigNodePropertyArray servletresolverDefaultExtensions = default(ConfigNodePropertyArray))
        {
            this.ServletresolverServletRoot = servletresolverServletRoot;
            this.ServletresolverCacheSize = servletresolverCacheSize;
            this.ServletresolverPaths = servletresolverPaths;
            this.ServletresolverDefaultExtensions = servletresolverDefaultExtensions;
        }
        
        /// <summary>
        /// Gets or Sets ServletresolverServletRoot
        /// </summary>
        [DataMember(Name="servletresolver.servletRoot", EmitDefaultValue=false)]
        public ConfigNodePropertyString ServletresolverServletRoot { get; set; }

        /// <summary>
        /// Gets or Sets ServletresolverCacheSize
        /// </summary>
        [DataMember(Name="servletresolver.cacheSize", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger ServletresolverCacheSize { get; set; }

        /// <summary>
        /// Gets or Sets ServletresolverPaths
        /// </summary>
        [DataMember(Name="servletresolver.paths", EmitDefaultValue=false)]
        public ConfigNodePropertyArray ServletresolverPaths { get; set; }

        /// <summary>
        /// Gets or Sets ServletresolverDefaultExtensions
        /// </summary>
        [DataMember(Name="servletresolver.defaultExtensions", EmitDefaultValue=false)]
        public ConfigNodePropertyArray ServletresolverDefaultExtensions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrgApacheSlingServletsResolverSlingServletResolverProperties {\n");
            sb.Append("  ServletresolverServletRoot: ").Append(ServletresolverServletRoot).Append("\n");
            sb.Append("  ServletresolverCacheSize: ").Append(ServletresolverCacheSize).Append("\n");
            sb.Append("  ServletresolverPaths: ").Append(ServletresolverPaths).Append("\n");
            sb.Append("  ServletresolverDefaultExtensions: ").Append(ServletresolverDefaultExtensions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrgApacheSlingServletsResolverSlingServletResolverProperties);
        }

        /// <summary>
        /// Returns true if OrgApacheSlingServletsResolverSlingServletResolverProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of OrgApacheSlingServletsResolverSlingServletResolverProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrgApacheSlingServletsResolverSlingServletResolverProperties input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ServletresolverServletRoot == input.ServletresolverServletRoot ||
                    (this.ServletresolverServletRoot != null &&
                    this.ServletresolverServletRoot.Equals(input.ServletresolverServletRoot))
                ) && 
                (
                    this.ServletresolverCacheSize == input.ServletresolverCacheSize ||
                    (this.ServletresolverCacheSize != null &&
                    this.ServletresolverCacheSize.Equals(input.ServletresolverCacheSize))
                ) && 
                (
                    this.ServletresolverPaths == input.ServletresolverPaths ||
                    (this.ServletresolverPaths != null &&
                    this.ServletresolverPaths.Equals(input.ServletresolverPaths))
                ) && 
                (
                    this.ServletresolverDefaultExtensions == input.ServletresolverDefaultExtensions ||
                    (this.ServletresolverDefaultExtensions != null &&
                    this.ServletresolverDefaultExtensions.Equals(input.ServletresolverDefaultExtensions))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ServletresolverServletRoot != null)
                    hashCode = hashCode * 59 + this.ServletresolverServletRoot.GetHashCode();
                if (this.ServletresolverCacheSize != null)
                    hashCode = hashCode * 59 + this.ServletresolverCacheSize.GetHashCode();
                if (this.ServletresolverPaths != null)
                    hashCode = hashCode * 59 + this.ServletresolverPaths.GetHashCode();
                if (this.ServletresolverDefaultExtensions != null)
                    hashCode = hashCode * 59 + this.ServletresolverDefaultExtensions.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
