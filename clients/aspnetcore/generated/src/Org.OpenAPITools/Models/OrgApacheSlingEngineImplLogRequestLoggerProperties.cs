/*
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class OrgApacheSlingEngineImplLogRequestLoggerProperties : IEquatable<OrgApacheSlingEngineImplLogRequestLoggerProperties>
    { 
        /// <summary>
        /// Gets or Sets RequestLogOutput
        /// </summary>
        [DataMember(Name="request.log.output")]
        public ConfigNodePropertyString RequestLogOutput { get; set; }

        /// <summary>
        /// Gets or Sets RequestLogOutputtype
        /// </summary>
        [DataMember(Name="request.log.outputtype")]
        public ConfigNodePropertyDropDown RequestLogOutputtype { get; set; }

        /// <summary>
        /// Gets or Sets RequestLogEnabled
        /// </summary>
        [DataMember(Name="request.log.enabled")]
        public ConfigNodePropertyBoolean RequestLogEnabled { get; set; }

        /// <summary>
        /// Gets or Sets AccessLogOutput
        /// </summary>
        [DataMember(Name="access.log.output")]
        public ConfigNodePropertyString AccessLogOutput { get; set; }

        /// <summary>
        /// Gets or Sets AccessLogOutputtype
        /// </summary>
        [DataMember(Name="access.log.outputtype")]
        public ConfigNodePropertyDropDown AccessLogOutputtype { get; set; }

        /// <summary>
        /// Gets or Sets AccessLogEnabled
        /// </summary>
        [DataMember(Name="access.log.enabled")]
        public ConfigNodePropertyBoolean AccessLogEnabled { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrgApacheSlingEngineImplLogRequestLoggerProperties {\n");
            sb.Append("  RequestLogOutput: ").Append(RequestLogOutput).Append("\n");
            sb.Append("  RequestLogOutputtype: ").Append(RequestLogOutputtype).Append("\n");
            sb.Append("  RequestLogEnabled: ").Append(RequestLogEnabled).Append("\n");
            sb.Append("  AccessLogOutput: ").Append(AccessLogOutput).Append("\n");
            sb.Append("  AccessLogOutputtype: ").Append(AccessLogOutputtype).Append("\n");
            sb.Append("  AccessLogEnabled: ").Append(AccessLogEnabled).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((OrgApacheSlingEngineImplLogRequestLoggerProperties)obj);
        }

        /// <summary>
        /// Returns true if OrgApacheSlingEngineImplLogRequestLoggerProperties instances are equal
        /// </summary>
        /// <param name="other">Instance of OrgApacheSlingEngineImplLogRequestLoggerProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrgApacheSlingEngineImplLogRequestLoggerProperties other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    RequestLogOutput == other.RequestLogOutput ||
                    RequestLogOutput != null &&
                    RequestLogOutput.Equals(other.RequestLogOutput)
                ) && 
                (
                    RequestLogOutputtype == other.RequestLogOutputtype ||
                    RequestLogOutputtype != null &&
                    RequestLogOutputtype.Equals(other.RequestLogOutputtype)
                ) && 
                (
                    RequestLogEnabled == other.RequestLogEnabled ||
                    RequestLogEnabled != null &&
                    RequestLogEnabled.Equals(other.RequestLogEnabled)
                ) && 
                (
                    AccessLogOutput == other.AccessLogOutput ||
                    AccessLogOutput != null &&
                    AccessLogOutput.Equals(other.AccessLogOutput)
                ) && 
                (
                    AccessLogOutputtype == other.AccessLogOutputtype ||
                    AccessLogOutputtype != null &&
                    AccessLogOutputtype.Equals(other.AccessLogOutputtype)
                ) && 
                (
                    AccessLogEnabled == other.AccessLogEnabled ||
                    AccessLogEnabled != null &&
                    AccessLogEnabled.Equals(other.AccessLogEnabled)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (RequestLogOutput != null)
                    hashCode = hashCode * 59 + RequestLogOutput.GetHashCode();
                    if (RequestLogOutputtype != null)
                    hashCode = hashCode * 59 + RequestLogOutputtype.GetHashCode();
                    if (RequestLogEnabled != null)
                    hashCode = hashCode * 59 + RequestLogEnabled.GetHashCode();
                    if (AccessLogOutput != null)
                    hashCode = hashCode * 59 + AccessLogOutput.GetHashCode();
                    if (AccessLogOutputtype != null)
                    hashCode = hashCode * 59 + AccessLogOutputtype.GetHashCode();
                    if (AccessLogEnabled != null)
                    hashCode = hashCode * 59 + AccessLogEnabled.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(OrgApacheSlingEngineImplLogRequestLoggerProperties left, OrgApacheSlingEngineImplLogRequestLoggerProperties right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(OrgApacheSlingEngineImplLogRequestLoggerProperties left, OrgApacheSlingEngineImplLogRequestLoggerProperties right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
