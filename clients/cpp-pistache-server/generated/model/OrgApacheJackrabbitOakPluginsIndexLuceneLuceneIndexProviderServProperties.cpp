/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties()
{
    m_DisabledIsSet = false;
    m_DebugIsSet = false;
    m_LocalIndexDirIsSet = false;
    m_EnableOpenIndexAsyncIsSet = false;
    m_ThreadPoolSizeIsSet = false;
    m_PrefetchIndexFilesIsSet = false;
    m_ExtractedTextCacheSizeInMBIsSet = false;
    m_ExtractedTextCacheExpiryInSecsIsSet = false;
    m_AlwaysUsePreExtractedCacheIsSet = false;
    m_BooleanClauseLimitIsSet = false;
    m_EnableHybridIndexingIsSet = false;
    m_HybridQueueSizeIsSet = false;
    m_DisableStoredIndexDefinitionIsSet = false;
    m_DeletedBlobsCollectionEnabledIsSet = false;
    m_PropIndexCleanerIntervalInSecsIsSet = false;
    m_EnableSingleBlobIndexFilesIsSet = false;
    
}

OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::~OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties()
{
}

void OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_DisabledIsSet)
    {
        val["disabled"] = ModelBase::toJson(m_Disabled);
    }
    if(m_DebugIsSet)
    {
        val["debug"] = ModelBase::toJson(m_Debug);
    }
    if(m_LocalIndexDirIsSet)
    {
        val["localIndexDir"] = ModelBase::toJson(m_LocalIndexDir);
    }
    if(m_EnableOpenIndexAsyncIsSet)
    {
        val["enableOpenIndexAsync"] = ModelBase::toJson(m_EnableOpenIndexAsync);
    }
    if(m_ThreadPoolSizeIsSet)
    {
        val["threadPoolSize"] = ModelBase::toJson(m_ThreadPoolSize);
    }
    if(m_PrefetchIndexFilesIsSet)
    {
        val["prefetchIndexFiles"] = ModelBase::toJson(m_PrefetchIndexFiles);
    }
    if(m_ExtractedTextCacheSizeInMBIsSet)
    {
        val["extractedTextCacheSizeInMB"] = ModelBase::toJson(m_ExtractedTextCacheSizeInMB);
    }
    if(m_ExtractedTextCacheExpiryInSecsIsSet)
    {
        val["extractedTextCacheExpiryInSecs"] = ModelBase::toJson(m_ExtractedTextCacheExpiryInSecs);
    }
    if(m_AlwaysUsePreExtractedCacheIsSet)
    {
        val["alwaysUsePreExtractedCache"] = ModelBase::toJson(m_AlwaysUsePreExtractedCache);
    }
    if(m_BooleanClauseLimitIsSet)
    {
        val["booleanClauseLimit"] = ModelBase::toJson(m_BooleanClauseLimit);
    }
    if(m_EnableHybridIndexingIsSet)
    {
        val["enableHybridIndexing"] = ModelBase::toJson(m_EnableHybridIndexing);
    }
    if(m_HybridQueueSizeIsSet)
    {
        val["hybridQueueSize"] = ModelBase::toJson(m_HybridQueueSize);
    }
    if(m_DisableStoredIndexDefinitionIsSet)
    {
        val["disableStoredIndexDefinition"] = ModelBase::toJson(m_DisableStoredIndexDefinition);
    }
    if(m_DeletedBlobsCollectionEnabledIsSet)
    {
        val["deletedBlobsCollectionEnabled"] = ModelBase::toJson(m_DeletedBlobsCollectionEnabled);
    }
    if(m_PropIndexCleanerIntervalInSecsIsSet)
    {
        val["propIndexCleanerIntervalInSecs"] = ModelBase::toJson(m_PropIndexCleanerIntervalInSecs);
    }
    if(m_EnableSingleBlobIndexFilesIsSet)
    {
        val["enableSingleBlobIndexFiles"] = ModelBase::toJson(m_EnableSingleBlobIndexFiles);
    }
    

    return val;
}

void OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::fromJson(nlohmann::json& val)
{
    if(val.find("disabled") != val.end())
    {
        if(!val["disabled"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["disabled"]);
            setDisabled( newItem );
        }
        
    }
    if(val.find("debug") != val.end())
    {
        if(!val["debug"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["debug"]);
            setDebug( newItem );
        }
        
    }
    if(val.find("localIndexDir") != val.end())
    {
        if(!val["localIndexDir"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["localIndexDir"]);
            setLocalIndexDir( newItem );
        }
        
    }
    if(val.find("enableOpenIndexAsync") != val.end())
    {
        if(!val["enableOpenIndexAsync"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["enableOpenIndexAsync"]);
            setEnableOpenIndexAsync( newItem );
        }
        
    }
    if(val.find("threadPoolSize") != val.end())
    {
        if(!val["threadPoolSize"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["threadPoolSize"]);
            setThreadPoolSize( newItem );
        }
        
    }
    if(val.find("prefetchIndexFiles") != val.end())
    {
        if(!val["prefetchIndexFiles"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["prefetchIndexFiles"]);
            setPrefetchIndexFiles( newItem );
        }
        
    }
    if(val.find("extractedTextCacheSizeInMB") != val.end())
    {
        if(!val["extractedTextCacheSizeInMB"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["extractedTextCacheSizeInMB"]);
            setExtractedTextCacheSizeInMB( newItem );
        }
        
    }
    if(val.find("extractedTextCacheExpiryInSecs") != val.end())
    {
        if(!val["extractedTextCacheExpiryInSecs"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["extractedTextCacheExpiryInSecs"]);
            setExtractedTextCacheExpiryInSecs( newItem );
        }
        
    }
    if(val.find("alwaysUsePreExtractedCache") != val.end())
    {
        if(!val["alwaysUsePreExtractedCache"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["alwaysUsePreExtractedCache"]);
            setAlwaysUsePreExtractedCache( newItem );
        }
        
    }
    if(val.find("booleanClauseLimit") != val.end())
    {
        if(!val["booleanClauseLimit"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["booleanClauseLimit"]);
            setBooleanClauseLimit( newItem );
        }
        
    }
    if(val.find("enableHybridIndexing") != val.end())
    {
        if(!val["enableHybridIndexing"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["enableHybridIndexing"]);
            setEnableHybridIndexing( newItem );
        }
        
    }
    if(val.find("hybridQueueSize") != val.end())
    {
        if(!val["hybridQueueSize"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["hybridQueueSize"]);
            setHybridQueueSize( newItem );
        }
        
    }
    if(val.find("disableStoredIndexDefinition") != val.end())
    {
        if(!val["disableStoredIndexDefinition"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["disableStoredIndexDefinition"]);
            setDisableStoredIndexDefinition( newItem );
        }
        
    }
    if(val.find("deletedBlobsCollectionEnabled") != val.end())
    {
        if(!val["deletedBlobsCollectionEnabled"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["deletedBlobsCollectionEnabled"]);
            setDeletedBlobsCollectionEnabled( newItem );
        }
        
    }
    if(val.find("propIndexCleanerIntervalInSecs") != val.end())
    {
        if(!val["propIndexCleanerIntervalInSecs"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["propIndexCleanerIntervalInSecs"]);
            setPropIndexCleanerIntervalInSecs( newItem );
        }
        
    }
    if(val.find("enableSingleBlobIndexFiles") != val.end())
    {
        if(!val["enableSingleBlobIndexFiles"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["enableSingleBlobIndexFiles"]);
            setEnableSingleBlobIndexFiles( newItem );
        }
        
    }
    
}


ConfigNodePropertyBoolean OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::getDisabled() const
{
    return m_Disabled;
}
void OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::setDisabled(ConfigNodePropertyBoolean const& value)
{
    m_Disabled = value;
    m_DisabledIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::disabledIsSet() const
{
    return m_DisabledIsSet;
}
void OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::unsetDisabled()
{
    m_DisabledIsSet = false;
}
ConfigNodePropertyBoolean OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::getDebug() const
{
    return m_Debug;
}
void OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::setDebug(ConfigNodePropertyBoolean const& value)
{
    m_Debug = value;
    m_DebugIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::debugIsSet() const
{
    return m_DebugIsSet;
}
void OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::unsetDebug()
{
    m_DebugIsSet = false;
}
ConfigNodePropertyString OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::getLocalIndexDir() const
{
    return m_LocalIndexDir;
}
void OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::setLocalIndexDir(ConfigNodePropertyString const& value)
{
    m_LocalIndexDir = value;
    m_LocalIndexDirIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::localIndexDirIsSet() const
{
    return m_LocalIndexDirIsSet;
}
void OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::unsetLocalIndexDir()
{
    m_LocalIndexDirIsSet = false;
}
ConfigNodePropertyBoolean OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::getEnableOpenIndexAsync() const
{
    return m_EnableOpenIndexAsync;
}
void OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::setEnableOpenIndexAsync(ConfigNodePropertyBoolean const& value)
{
    m_EnableOpenIndexAsync = value;
    m_EnableOpenIndexAsyncIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::enableOpenIndexAsyncIsSet() const
{
    return m_EnableOpenIndexAsyncIsSet;
}
void OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::unsetEnableOpenIndexAsync()
{
    m_EnableOpenIndexAsyncIsSet = false;
}
ConfigNodePropertyInteger OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::getThreadPoolSize() const
{
    return m_ThreadPoolSize;
}
void OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::setThreadPoolSize(ConfigNodePropertyInteger const& value)
{
    m_ThreadPoolSize = value;
    m_ThreadPoolSizeIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::threadPoolSizeIsSet() const
{
    return m_ThreadPoolSizeIsSet;
}
void OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::unsetThreadPoolSize()
{
    m_ThreadPoolSizeIsSet = false;
}
ConfigNodePropertyBoolean OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::getPrefetchIndexFiles() const
{
    return m_PrefetchIndexFiles;
}
void OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::setPrefetchIndexFiles(ConfigNodePropertyBoolean const& value)
{
    m_PrefetchIndexFiles = value;
    m_PrefetchIndexFilesIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::prefetchIndexFilesIsSet() const
{
    return m_PrefetchIndexFilesIsSet;
}
void OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::unsetPrefetchIndexFiles()
{
    m_PrefetchIndexFilesIsSet = false;
}
ConfigNodePropertyInteger OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::getExtractedTextCacheSizeInMB() const
{
    return m_ExtractedTextCacheSizeInMB;
}
void OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::setExtractedTextCacheSizeInMB(ConfigNodePropertyInteger const& value)
{
    m_ExtractedTextCacheSizeInMB = value;
    m_ExtractedTextCacheSizeInMBIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::extractedTextCacheSizeInMBIsSet() const
{
    return m_ExtractedTextCacheSizeInMBIsSet;
}
void OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::unsetExtractedTextCacheSizeInMB()
{
    m_ExtractedTextCacheSizeInMBIsSet = false;
}
ConfigNodePropertyInteger OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::getExtractedTextCacheExpiryInSecs() const
{
    return m_ExtractedTextCacheExpiryInSecs;
}
void OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::setExtractedTextCacheExpiryInSecs(ConfigNodePropertyInteger const& value)
{
    m_ExtractedTextCacheExpiryInSecs = value;
    m_ExtractedTextCacheExpiryInSecsIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::extractedTextCacheExpiryInSecsIsSet() const
{
    return m_ExtractedTextCacheExpiryInSecsIsSet;
}
void OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::unsetExtractedTextCacheExpiryInSecs()
{
    m_ExtractedTextCacheExpiryInSecsIsSet = false;
}
ConfigNodePropertyBoolean OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::getAlwaysUsePreExtractedCache() const
{
    return m_AlwaysUsePreExtractedCache;
}
void OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::setAlwaysUsePreExtractedCache(ConfigNodePropertyBoolean const& value)
{
    m_AlwaysUsePreExtractedCache = value;
    m_AlwaysUsePreExtractedCacheIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::alwaysUsePreExtractedCacheIsSet() const
{
    return m_AlwaysUsePreExtractedCacheIsSet;
}
void OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::unsetAlwaysUsePreExtractedCache()
{
    m_AlwaysUsePreExtractedCacheIsSet = false;
}
ConfigNodePropertyInteger OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::getBooleanClauseLimit() const
{
    return m_BooleanClauseLimit;
}
void OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::setBooleanClauseLimit(ConfigNodePropertyInteger const& value)
{
    m_BooleanClauseLimit = value;
    m_BooleanClauseLimitIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::booleanClauseLimitIsSet() const
{
    return m_BooleanClauseLimitIsSet;
}
void OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::unsetBooleanClauseLimit()
{
    m_BooleanClauseLimitIsSet = false;
}
ConfigNodePropertyBoolean OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::getEnableHybridIndexing() const
{
    return m_EnableHybridIndexing;
}
void OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::setEnableHybridIndexing(ConfigNodePropertyBoolean const& value)
{
    m_EnableHybridIndexing = value;
    m_EnableHybridIndexingIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::enableHybridIndexingIsSet() const
{
    return m_EnableHybridIndexingIsSet;
}
void OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::unsetEnableHybridIndexing()
{
    m_EnableHybridIndexingIsSet = false;
}
ConfigNodePropertyInteger OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::getHybridQueueSize() const
{
    return m_HybridQueueSize;
}
void OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::setHybridQueueSize(ConfigNodePropertyInteger const& value)
{
    m_HybridQueueSize = value;
    m_HybridQueueSizeIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::hybridQueueSizeIsSet() const
{
    return m_HybridQueueSizeIsSet;
}
void OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::unsetHybridQueueSize()
{
    m_HybridQueueSizeIsSet = false;
}
ConfigNodePropertyBoolean OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::getDisableStoredIndexDefinition() const
{
    return m_DisableStoredIndexDefinition;
}
void OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::setDisableStoredIndexDefinition(ConfigNodePropertyBoolean const& value)
{
    m_DisableStoredIndexDefinition = value;
    m_DisableStoredIndexDefinitionIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::disableStoredIndexDefinitionIsSet() const
{
    return m_DisableStoredIndexDefinitionIsSet;
}
void OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::unsetDisableStoredIndexDefinition()
{
    m_DisableStoredIndexDefinitionIsSet = false;
}
ConfigNodePropertyBoolean OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::getDeletedBlobsCollectionEnabled() const
{
    return m_DeletedBlobsCollectionEnabled;
}
void OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::setDeletedBlobsCollectionEnabled(ConfigNodePropertyBoolean const& value)
{
    m_DeletedBlobsCollectionEnabled = value;
    m_DeletedBlobsCollectionEnabledIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::deletedBlobsCollectionEnabledIsSet() const
{
    return m_DeletedBlobsCollectionEnabledIsSet;
}
void OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::unsetDeletedBlobsCollectionEnabled()
{
    m_DeletedBlobsCollectionEnabledIsSet = false;
}
ConfigNodePropertyInteger OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::getPropIndexCleanerIntervalInSecs() const
{
    return m_PropIndexCleanerIntervalInSecs;
}
void OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::setPropIndexCleanerIntervalInSecs(ConfigNodePropertyInteger const& value)
{
    m_PropIndexCleanerIntervalInSecs = value;
    m_PropIndexCleanerIntervalInSecsIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::propIndexCleanerIntervalInSecsIsSet() const
{
    return m_PropIndexCleanerIntervalInSecsIsSet;
}
void OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::unsetPropIndexCleanerIntervalInSecs()
{
    m_PropIndexCleanerIntervalInSecsIsSet = false;
}
ConfigNodePropertyBoolean OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::getEnableSingleBlobIndexFiles() const
{
    return m_EnableSingleBlobIndexFiles;
}
void OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::setEnableSingleBlobIndexFiles(ConfigNodePropertyBoolean const& value)
{
    m_EnableSingleBlobIndexFiles = value;
    m_EnableSingleBlobIndexFilesIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::enableSingleBlobIndexFilesIsSet() const
{
    return m_EnableSingleBlobIndexFilesIsSet;
}
void OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties::unsetEnableSingleBlobIndexFiles()
{
    m_EnableSingleBlobIndexFilesIsSet = false;
}

}
}
}
}

