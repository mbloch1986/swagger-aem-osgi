/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties::ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties()
{
    m_Scheduler_periodIsSet = false;
    m_Scheduler_concurrentIsSet = false;
    m_Service_bad_link_tolerance_intervalIsSet = false;
    m_Service_check_override_patternsIsSet = false;
    m_Service_cache_broken_internal_linksIsSet = false;
    m_Service_special_link_prefixIsSet = false;
    m_Service_special_link_patternsIsSet = false;
    
}

ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties::~ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties()
{
}

void ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_Scheduler_periodIsSet)
    {
        val["scheduler.period"] = ModelBase::toJson(m_Scheduler_period);
    }
    if(m_Scheduler_concurrentIsSet)
    {
        val["scheduler.concurrent"] = ModelBase::toJson(m_Scheduler_concurrent);
    }
    if(m_Service_bad_link_tolerance_intervalIsSet)
    {
        val["service.bad_link_tolerance_interval"] = ModelBase::toJson(m_Service_bad_link_tolerance_interval);
    }
    if(m_Service_check_override_patternsIsSet)
    {
        val["service.check_override_patterns"] = ModelBase::toJson(m_Service_check_override_patterns);
    }
    if(m_Service_cache_broken_internal_linksIsSet)
    {
        val["service.cache_broken_internal_links"] = ModelBase::toJson(m_Service_cache_broken_internal_links);
    }
    if(m_Service_special_link_prefixIsSet)
    {
        val["service.special_link_prefix"] = ModelBase::toJson(m_Service_special_link_prefix);
    }
    if(m_Service_special_link_patternsIsSet)
    {
        val["service.special_link_patterns"] = ModelBase::toJson(m_Service_special_link_patterns);
    }
    

    return val;
}

void ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties::fromJson(nlohmann::json& val)
{
    if(val.find("scheduler.period") != val.end())
    {
        if(!val["scheduler.period"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["scheduler.period"]);
            setSchedulerPeriod( newItem );
        }
        
    }
    if(val.find("scheduler.concurrent") != val.end())
    {
        if(!val["scheduler.concurrent"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["scheduler.concurrent"]);
            setSchedulerConcurrent( newItem );
        }
        
    }
    if(val.find("service.bad_link_tolerance_interval") != val.end())
    {
        if(!val["service.bad_link_tolerance_interval"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["service.bad_link_tolerance_interval"]);
            setServiceBadLinkToleranceInterval( newItem );
        }
        
    }
    if(val.find("service.check_override_patterns") != val.end())
    {
        if(!val["service.check_override_patterns"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["service.check_override_patterns"]);
            setServiceCheckOverridePatterns( newItem );
        }
        
    }
    if(val.find("service.cache_broken_internal_links") != val.end())
    {
        if(!val["service.cache_broken_internal_links"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["service.cache_broken_internal_links"]);
            setServiceCacheBrokenInternalLinks( newItem );
        }
        
    }
    if(val.find("service.special_link_prefix") != val.end())
    {
        if(!val["service.special_link_prefix"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["service.special_link_prefix"]);
            setServiceSpecialLinkPrefix( newItem );
        }
        
    }
    if(val.find("service.special_link_patterns") != val.end())
    {
        if(!val["service.special_link_patterns"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["service.special_link_patterns"]);
            setServiceSpecialLinkPatterns( newItem );
        }
        
    }
    
}


ConfigNodePropertyInteger ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties::getSchedulerPeriod() const
{
    return m_Scheduler_period;
}
void ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties::setSchedulerPeriod(ConfigNodePropertyInteger const& value)
{
    m_Scheduler_period = value;
    m_Scheduler_periodIsSet = true;
}
bool ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties::schedulerPeriodIsSet() const
{
    return m_Scheduler_periodIsSet;
}
void ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties::unsetScheduler_period()
{
    m_Scheduler_periodIsSet = false;
}
ConfigNodePropertyBoolean ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties::getSchedulerConcurrent() const
{
    return m_Scheduler_concurrent;
}
void ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties::setSchedulerConcurrent(ConfigNodePropertyBoolean const& value)
{
    m_Scheduler_concurrent = value;
    m_Scheduler_concurrentIsSet = true;
}
bool ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties::schedulerConcurrentIsSet() const
{
    return m_Scheduler_concurrentIsSet;
}
void ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties::unsetScheduler_concurrent()
{
    m_Scheduler_concurrentIsSet = false;
}
ConfigNodePropertyInteger ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties::getServiceBadLinkToleranceInterval() const
{
    return m_Service_bad_link_tolerance_interval;
}
void ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties::setServiceBadLinkToleranceInterval(ConfigNodePropertyInteger const& value)
{
    m_Service_bad_link_tolerance_interval = value;
    m_Service_bad_link_tolerance_intervalIsSet = true;
}
bool ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties::serviceBadLinkToleranceIntervalIsSet() const
{
    return m_Service_bad_link_tolerance_intervalIsSet;
}
void ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties::unsetService_bad_link_tolerance_interval()
{
    m_Service_bad_link_tolerance_intervalIsSet = false;
}
ConfigNodePropertyArray ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties::getServiceCheckOverridePatterns() const
{
    return m_Service_check_override_patterns;
}
void ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties::setServiceCheckOverridePatterns(ConfigNodePropertyArray const& value)
{
    m_Service_check_override_patterns = value;
    m_Service_check_override_patternsIsSet = true;
}
bool ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties::serviceCheckOverridePatternsIsSet() const
{
    return m_Service_check_override_patternsIsSet;
}
void ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties::unsetService_check_override_patterns()
{
    m_Service_check_override_patternsIsSet = false;
}
ConfigNodePropertyBoolean ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties::getServiceCacheBrokenInternalLinks() const
{
    return m_Service_cache_broken_internal_links;
}
void ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties::setServiceCacheBrokenInternalLinks(ConfigNodePropertyBoolean const& value)
{
    m_Service_cache_broken_internal_links = value;
    m_Service_cache_broken_internal_linksIsSet = true;
}
bool ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties::serviceCacheBrokenInternalLinksIsSet() const
{
    return m_Service_cache_broken_internal_linksIsSet;
}
void ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties::unsetService_cache_broken_internal_links()
{
    m_Service_cache_broken_internal_linksIsSet = false;
}
ConfigNodePropertyArray ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties::getServiceSpecialLinkPrefix() const
{
    return m_Service_special_link_prefix;
}
void ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties::setServiceSpecialLinkPrefix(ConfigNodePropertyArray const& value)
{
    m_Service_special_link_prefix = value;
    m_Service_special_link_prefixIsSet = true;
}
bool ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties::serviceSpecialLinkPrefixIsSet() const
{
    return m_Service_special_link_prefixIsSet;
}
void ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties::unsetService_special_link_prefix()
{
    m_Service_special_link_prefixIsSet = false;
}
ConfigNodePropertyArray ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties::getServiceSpecialLinkPatterns() const
{
    return m_Service_special_link_patterns;
}
void ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties::setServiceSpecialLinkPatterns(ConfigNodePropertyArray const& value)
{
    m_Service_special_link_patterns = value;
    m_Service_special_link_patternsIsSet = true;
}
bool ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties::serviceSpecialLinkPatternsIsSet() const
{
    return m_Service_special_link_patternsIsSet;
}
void ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties::unsetService_special_link_patterns()
{
    m_Service_special_link_patternsIsSet = false;
}

}
}
}
}

