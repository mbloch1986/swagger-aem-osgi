/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeProperties::OAIComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeProperties(QString json) {
    this->fromJson(json);
}

OAIComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeProperties::OAIComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeProperties() {
    this->init();
}

OAIComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeProperties::~OAIComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeProperties() {
    
}

void
OAIComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeProperties::init() {
    m_codeupgradetasks_isSet = false;
    m_codeupgradetaskfilters_isSet = false;
}

void
OAIComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(codeupgradetasks, json[QString("codeupgradetasks")]);
    
    ::OpenAPI::fromJsonValue(codeupgradetaskfilters, json[QString("codeupgradetaskfilters")]);
    
}

QString
OAIComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeProperties::asJsonObject() const {
    QJsonObject obj;
	if(codeupgradetasks.isSet()){
        obj.insert(QString("codeupgradetasks"), ::OpenAPI::toJsonValue(codeupgradetasks));
    }
	if(codeupgradetaskfilters.isSet()){
        obj.insert(QString("codeupgradetaskfilters"), ::OpenAPI::toJsonValue(codeupgradetaskfilters));
    }
    return obj;
}

OAIConfigNodePropertyArray
OAIComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeProperties::getCodeupgradetasks() const {
    return codeupgradetasks;
}
void
OAIComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeProperties::setCodeupgradetasks(const OAIConfigNodePropertyArray &codeupgradetasks) {
    this->codeupgradetasks = codeupgradetasks;
    this->m_codeupgradetasks_isSet = true;
}

OAIConfigNodePropertyArray
OAIComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeProperties::getCodeupgradetaskfilters() const {
    return codeupgradetaskfilters;
}
void
OAIComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeProperties::setCodeupgradetaskfilters(const OAIConfigNodePropertyArray &codeupgradetaskfilters) {
    this->codeupgradetaskfilters = codeupgradetaskfilters;
    this->m_codeupgradetaskfilters_isSet = true;
}


bool
OAIComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(codeupgradetasks.isSet()){ isObjectUpdated = true; break;}
    
        if(codeupgradetaskfilters.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

