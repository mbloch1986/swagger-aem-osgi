/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties.h"

#include <string>
#include <sstream>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties::ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties()
{
    
}

ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties::~ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties()
{
}

std::string ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties::toJsonString()
{
	std::stringstream ss;
	ptree pt;
	write_json(ss, pt, false);
	return ss.str();
}

void ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
}

std::shared_ptr<ConfigNodePropertyInteger> ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties::getSchedulerPeriod() const
{
    return m_Scheduler_period;
}
void ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties::setSchedulerPeriod(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Scheduler_period = value;
}
std::shared_ptr<ConfigNodePropertyBoolean> ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties::getSchedulerConcurrent() const
{
    return m_Scheduler_concurrent;
}
void ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties::setSchedulerConcurrent(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Scheduler_concurrent = value;
}
std::shared_ptr<ConfigNodePropertyInteger> ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties::getServiceBadLinkToleranceInterval() const
{
    return m_Service_bad_link_tolerance_interval;
}
void ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties::setServiceBadLinkToleranceInterval(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Service_bad_link_tolerance_interval = value;
}
std::shared_ptr<ConfigNodePropertyArray> ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties::getServiceCheckOverridePatterns() const
{
    return m_Service_check_override_patterns;
}
void ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties::setServiceCheckOverridePatterns(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Service_check_override_patterns = value;
}
std::shared_ptr<ConfigNodePropertyBoolean> ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties::getServiceCacheBrokenInternalLinks() const
{
    return m_Service_cache_broken_internal_links;
}
void ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties::setServiceCacheBrokenInternalLinks(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Service_cache_broken_internal_links = value;
}
std::shared_ptr<ConfigNodePropertyArray> ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties::getServiceSpecialLinkPrefix() const
{
    return m_Service_special_link_prefix;
}
void ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties::setServiceSpecialLinkPrefix(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Service_special_link_prefix = value;
}
std::shared_ptr<ConfigNodePropertyArray> ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties::getServiceSpecialLinkPatterns() const
{
    return m_Service_special_link_patterns;
}
void ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties::setServiceSpecialLinkPatterns(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Service_special_link_patterns = value;
}

}
}
}
}

