/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComDayCqReportingImplConfigServiceImplProperties.h"

#include <string>
#include <sstream>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComDayCqReportingImplConfigServiceImplProperties::ComDayCqReportingImplConfigServiceImplProperties()
{
    
}

ComDayCqReportingImplConfigServiceImplProperties::~ComDayCqReportingImplConfigServiceImplProperties()
{
}

std::string ComDayCqReportingImplConfigServiceImplProperties::toJsonString()
{
	std::stringstream ss;
	ptree pt;
	write_json(ss, pt, false);
	return ss.str();
}

void ComDayCqReportingImplConfigServiceImplProperties::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
}

std::shared_ptr<ConfigNodePropertyString> ComDayCqReportingImplConfigServiceImplProperties::getRepconfTimezone() const
{
    return m_Repconf_timezone;
}
void ComDayCqReportingImplConfigServiceImplProperties::setRepconfTimezone(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Repconf_timezone = value;
}
std::shared_ptr<ConfigNodePropertyString> ComDayCqReportingImplConfigServiceImplProperties::getRepconfLocale() const
{
    return m_Repconf_locale;
}
void ComDayCqReportingImplConfigServiceImplProperties::setRepconfLocale(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Repconf_locale = value;
}
std::shared_ptr<ConfigNodePropertyString> ComDayCqReportingImplConfigServiceImplProperties::getRepconfSnapshots() const
{
    return m_Repconf_snapshots;
}
void ComDayCqReportingImplConfigServiceImplProperties::setRepconfSnapshots(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Repconf_snapshots = value;
}
std::shared_ptr<ConfigNodePropertyString> ComDayCqReportingImplConfigServiceImplProperties::getRepconfRepdir() const
{
    return m_Repconf_repdir;
}
void ComDayCqReportingImplConfigServiceImplProperties::setRepconfRepdir(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Repconf_repdir = value;
}
std::shared_ptr<ConfigNodePropertyInteger> ComDayCqReportingImplConfigServiceImplProperties::getRepconfHourofday() const
{
    return m_Repconf_hourofday;
}
void ComDayCqReportingImplConfigServiceImplProperties::setRepconfHourofday(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Repconf_hourofday = value;
}
std::shared_ptr<ConfigNodePropertyInteger> ComDayCqReportingImplConfigServiceImplProperties::getRepconfMinofhour() const
{
    return m_Repconf_minofhour;
}
void ComDayCqReportingImplConfigServiceImplProperties::setRepconfMinofhour(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Repconf_minofhour = value;
}
std::shared_ptr<ConfigNodePropertyInteger> ComDayCqReportingImplConfigServiceImplProperties::getRepconfMaxrows() const
{
    return m_Repconf_maxrows;
}
void ComDayCqReportingImplConfigServiceImplProperties::setRepconfMaxrows(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Repconf_maxrows = value;
}
std::shared_ptr<ConfigNodePropertyBoolean> ComDayCqReportingImplConfigServiceImplProperties::getRepconfFakedata() const
{
    return m_Repconf_fakedata;
}
void ComDayCqReportingImplConfigServiceImplProperties::setRepconfFakedata(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Repconf_fakedata = value;
}
std::shared_ptr<ConfigNodePropertyString> ComDayCqReportingImplConfigServiceImplProperties::getRepconfSnapshotuser() const
{
    return m_Repconf_snapshotuser;
}
void ComDayCqReportingImplConfigServiceImplProperties::setRepconfSnapshotuser(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Repconf_snapshotuser = value;
}
std::shared_ptr<ConfigNodePropertyBoolean> ComDayCqReportingImplConfigServiceImplProperties::getRepconfEnforcesnapshotuser() const
{
    return m_Repconf_enforcesnapshotuser;
}
void ComDayCqReportingImplConfigServiceImplProperties::setRepconfEnforcesnapshotuser(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Repconf_enforcesnapshotuser = value;
}

}
}
}
}

