/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties::ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties()
{
    m_Version_idIsSet = false;
    m_Cache_onIsSet = false;
    m_Concurrency_levelIsSet = false;
    m_Cache_start_sizeIsSet = false;
    m_Cache_ttlIsSet = false;
    m_Cache_sizeIsSet = false;
    m_Time_limitIsSet = false;
    
}

ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties::~ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties()
{
}

void ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_Version_idIsSet)
    {
        val["version.id"] = ModelBase::toJson(m_Version_id);
    }
    if(m_Cache_onIsSet)
    {
        val["cache.on"] = ModelBase::toJson(m_Cache_on);
    }
    if(m_Concurrency_levelIsSet)
    {
        val["concurrency.level"] = ModelBase::toJson(m_Concurrency_level);
    }
    if(m_Cache_start_sizeIsSet)
    {
        val["cache.start.size"] = ModelBase::toJson(m_Cache_start_size);
    }
    if(m_Cache_ttlIsSet)
    {
        val["cache.ttl"] = ModelBase::toJson(m_Cache_ttl);
    }
    if(m_Cache_sizeIsSet)
    {
        val["cache.size"] = ModelBase::toJson(m_Cache_size);
    }
    if(m_Time_limitIsSet)
    {
        val["time.limit"] = ModelBase::toJson(m_Time_limit);
    }
    

    return val;
}

void ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties::fromJson(nlohmann::json& val)
{
    if(val.find("version.id") != val.end())
    {
        if(!val["version.id"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["version.id"]);
            setVersionId( newItem );
        }
        
    }
    if(val.find("cache.on") != val.end())
    {
        if(!val["cache.on"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["cache.on"]);
            setCacheOn( newItem );
        }
        
    }
    if(val.find("concurrency.level") != val.end())
    {
        if(!val["concurrency.level"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["concurrency.level"]);
            setConcurrencyLevel( newItem );
        }
        
    }
    if(val.find("cache.start.size") != val.end())
    {
        if(!val["cache.start.size"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["cache.start.size"]);
            setCacheStartSize( newItem );
        }
        
    }
    if(val.find("cache.ttl") != val.end())
    {
        if(!val["cache.ttl"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["cache.ttl"]);
            setCacheTtl( newItem );
        }
        
    }
    if(val.find("cache.size") != val.end())
    {
        if(!val["cache.size"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["cache.size"]);
            setCacheSize( newItem );
        }
        
    }
    if(val.find("time.limit") != val.end())
    {
        if(!val["time.limit"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["time.limit"]);
            setTimeLimit( newItem );
        }
        
    }
    
}


ConfigNodePropertyString ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties::getVersionId() const
{
    return m_Version_id;
}
void ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties::setVersionId(ConfigNodePropertyString const& value)
{
    m_Version_id = value;
    m_Version_idIsSet = true;
}
bool ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties::versionIdIsSet() const
{
    return m_Version_idIsSet;
}
void ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties::unsetVersion_id()
{
    m_Version_idIsSet = false;
}
ConfigNodePropertyBoolean ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties::getCacheOn() const
{
    return m_Cache_on;
}
void ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties::setCacheOn(ConfigNodePropertyBoolean const& value)
{
    m_Cache_on = value;
    m_Cache_onIsSet = true;
}
bool ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties::cacheOnIsSet() const
{
    return m_Cache_onIsSet;
}
void ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties::unsetCache_on()
{
    m_Cache_onIsSet = false;
}
ConfigNodePropertyInteger ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties::getConcurrencyLevel() const
{
    return m_Concurrency_level;
}
void ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties::setConcurrencyLevel(ConfigNodePropertyInteger const& value)
{
    m_Concurrency_level = value;
    m_Concurrency_levelIsSet = true;
}
bool ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties::concurrencyLevelIsSet() const
{
    return m_Concurrency_levelIsSet;
}
void ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties::unsetConcurrency_level()
{
    m_Concurrency_levelIsSet = false;
}
ConfigNodePropertyInteger ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties::getCacheStartSize() const
{
    return m_Cache_start_size;
}
void ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties::setCacheStartSize(ConfigNodePropertyInteger const& value)
{
    m_Cache_start_size = value;
    m_Cache_start_sizeIsSet = true;
}
bool ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties::cacheStartSizeIsSet() const
{
    return m_Cache_start_sizeIsSet;
}
void ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties::unsetCache_start_size()
{
    m_Cache_start_sizeIsSet = false;
}
ConfigNodePropertyInteger ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties::getCacheTtl() const
{
    return m_Cache_ttl;
}
void ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties::setCacheTtl(ConfigNodePropertyInteger const& value)
{
    m_Cache_ttl = value;
    m_Cache_ttlIsSet = true;
}
bool ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties::cacheTtlIsSet() const
{
    return m_Cache_ttlIsSet;
}
void ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties::unsetCache_ttl()
{
    m_Cache_ttlIsSet = false;
}
ConfigNodePropertyInteger ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties::getCacheSize() const
{
    return m_Cache_size;
}
void ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties::setCacheSize(ConfigNodePropertyInteger const& value)
{
    m_Cache_size = value;
    m_Cache_sizeIsSet = true;
}
bool ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties::cacheSizeIsSet() const
{
    return m_Cache_sizeIsSet;
}
void ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties::unsetCache_size()
{
    m_Cache_sizeIsSet = false;
}
ConfigNodePropertyInteger ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties::getTimeLimit() const
{
    return m_Time_limit;
}
void ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties::setTimeLimit(ConfigNodePropertyInteger const& value)
{
    m_Time_limit = value;
    m_Time_limitIsSet = true;
}
bool ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties::timeLimitIsSet() const
{
    return m_Time_limitIsSet;
}
void ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryProperties::unsetTime_limit()
{
    m_Time_limitIsSet = false;
}

}
}
}
}

