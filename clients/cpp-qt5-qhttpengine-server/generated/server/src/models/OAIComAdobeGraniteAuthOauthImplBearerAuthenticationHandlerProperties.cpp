/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerProperties::OAIComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerProperties(QString json) {
    this->fromJson(json);
}

OAIComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerProperties::OAIComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerProperties() {
    this->init();
}

OAIComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerProperties::~OAIComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerProperties() {
    
}

void
OAIComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerProperties::init() {
    m_path_isSet = false;
    m_oauth_client_ids_allowed_isSet = false;
    m_auth_bearer_sync_ims_isSet = false;
    m_auth_token_request_parameter_isSet = false;
    m_oauth_bearer_configid_isSet = false;
    m_oauth_jwt_support_isSet = false;
}

void
OAIComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(path, json[QString("path")]);
    
    ::OpenAPI::fromJsonValue(oauth_client_ids_allowed, json[QString("oauth.clientIds.allowed")]);
    
    ::OpenAPI::fromJsonValue(auth_bearer_sync_ims, json[QString("auth.bearer.sync.ims")]);
    
    ::OpenAPI::fromJsonValue(auth_token_request_parameter, json[QString("auth.tokenRequestParameter")]);
    
    ::OpenAPI::fromJsonValue(oauth_bearer_configid, json[QString("oauth.bearer.configid")]);
    
    ::OpenAPI::fromJsonValue(oauth_jwt_support, json[QString("oauth.jwt.support")]);
    
}

QString
OAIComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerProperties::asJsonObject() const {
    QJsonObject obj;
	if(path.isSet()){
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(path));
    }
	if(oauth_client_ids_allowed.isSet()){
        obj.insert(QString("oauth.clientIds.allowed"), ::OpenAPI::toJsonValue(oauth_client_ids_allowed));
    }
	if(auth_bearer_sync_ims.isSet()){
        obj.insert(QString("auth.bearer.sync.ims"), ::OpenAPI::toJsonValue(auth_bearer_sync_ims));
    }
	if(auth_token_request_parameter.isSet()){
        obj.insert(QString("auth.tokenRequestParameter"), ::OpenAPI::toJsonValue(auth_token_request_parameter));
    }
	if(oauth_bearer_configid.isSet()){
        obj.insert(QString("oauth.bearer.configid"), ::OpenAPI::toJsonValue(oauth_bearer_configid));
    }
	if(oauth_jwt_support.isSet()){
        obj.insert(QString("oauth.jwt.support"), ::OpenAPI::toJsonValue(oauth_jwt_support));
    }
    return obj;
}

OAIConfigNodePropertyString
OAIComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerProperties::getPath() const {
    return path;
}
void
OAIComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerProperties::setPath(const OAIConfigNodePropertyString &path) {
    this->path = path;
    this->m_path_isSet = true;
}

OAIConfigNodePropertyArray
OAIComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerProperties::getOauthClientIdsAllowed() const {
    return oauth_client_ids_allowed;
}
void
OAIComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerProperties::setOauthClientIdsAllowed(const OAIConfigNodePropertyArray &oauth_client_ids_allowed) {
    this->oauth_client_ids_allowed = oauth_client_ids_allowed;
    this->m_oauth_client_ids_allowed_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerProperties::getAuthBearerSyncIms() const {
    return auth_bearer_sync_ims;
}
void
OAIComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerProperties::setAuthBearerSyncIms(const OAIConfigNodePropertyBoolean &auth_bearer_sync_ims) {
    this->auth_bearer_sync_ims = auth_bearer_sync_ims;
    this->m_auth_bearer_sync_ims_isSet = true;
}

OAIConfigNodePropertyString
OAIComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerProperties::getAuthTokenRequestParameter() const {
    return auth_token_request_parameter;
}
void
OAIComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerProperties::setAuthTokenRequestParameter(const OAIConfigNodePropertyString &auth_token_request_parameter) {
    this->auth_token_request_parameter = auth_token_request_parameter;
    this->m_auth_token_request_parameter_isSet = true;
}

OAIConfigNodePropertyString
OAIComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerProperties::getOauthBearerConfigid() const {
    return oauth_bearer_configid;
}
void
OAIComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerProperties::setOauthBearerConfigid(const OAIConfigNodePropertyString &oauth_bearer_configid) {
    this->oauth_bearer_configid = oauth_bearer_configid;
    this->m_oauth_bearer_configid_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerProperties::getOauthJwtSupport() const {
    return oauth_jwt_support;
}
void
OAIComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerProperties::setOauthJwtSupport(const OAIConfigNodePropertyBoolean &oauth_jwt_support) {
    this->oauth_jwt_support = oauth_jwt_support;
    this->m_oauth_jwt_support_isSet = true;
}


bool
OAIComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(path.isSet()){ isObjectUpdated = true; break;}
    
        if(oauth_client_ids_allowed.isSet()){ isObjectUpdated = true; break;}
    
        if(auth_bearer_sync_ims.isSet()){ isObjectUpdated = true; break;}
    
        if(auth_token_request_parameter.isSet()){ isObjectUpdated = true; break;}
    
        if(oauth_bearer_configid.isSet()){ isObjectUpdated = true; break;}
    
        if(oauth_jwt_support.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

