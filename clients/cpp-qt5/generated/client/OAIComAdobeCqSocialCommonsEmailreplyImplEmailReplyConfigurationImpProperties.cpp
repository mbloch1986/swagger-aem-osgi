/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties::OAIComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties::OAIComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties() {
    init();
}

OAIComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties::~OAIComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties() {
    this->cleanup();
}

void
OAIComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties::init() {
    email_name = new OAIConfigNodePropertyString();
    m_email_name_isSet = false;
    email_create_post_from_reply = new OAIConfigNodePropertyBoolean();
    m_email_create_post_from_reply_isSet = false;
    email_add_comment_id_to = new OAIConfigNodePropertyDropDown();
    m_email_add_comment_id_to_isSet = false;
    email_subject_maximum_length = new OAIConfigNodePropertyInteger();
    m_email_subject_maximum_length_isSet = false;
    email_reply_to_address = new OAIConfigNodePropertyString();
    m_email_reply_to_address_isSet = false;
    email_reply_to_delimiter = new OAIConfigNodePropertyString();
    m_email_reply_to_delimiter_isSet = false;
    email_tracker_id_prefix_in_subject = new OAIConfigNodePropertyString();
    m_email_tracker_id_prefix_in_subject_isSet = false;
    email_tracker_id_prefix_in_body = new OAIConfigNodePropertyString();
    m_email_tracker_id_prefix_in_body_isSet = false;
    email_as_html = new OAIConfigNodePropertyBoolean();
    m_email_as_html_isSet = false;
    email_default_user_name = new OAIConfigNodePropertyString();
    m_email_default_user_name_isSet = false;
    email_templates_root_path = new OAIConfigNodePropertyString();
    m_email_templates_root_path_isSet = false;
}

void
OAIComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties::cleanup() {
    if(email_name != nullptr) { 
        delete email_name;
    }
    if(email_create_post_from_reply != nullptr) { 
        delete email_create_post_from_reply;
    }
    if(email_add_comment_id_to != nullptr) { 
        delete email_add_comment_id_to;
    }
    if(email_subject_maximum_length != nullptr) { 
        delete email_subject_maximum_length;
    }
    if(email_reply_to_address != nullptr) { 
        delete email_reply_to_address;
    }
    if(email_reply_to_delimiter != nullptr) { 
        delete email_reply_to_delimiter;
    }
    if(email_tracker_id_prefix_in_subject != nullptr) { 
        delete email_tracker_id_prefix_in_subject;
    }
    if(email_tracker_id_prefix_in_body != nullptr) { 
        delete email_tracker_id_prefix_in_body;
    }
    if(email_as_html != nullptr) { 
        delete email_as_html;
    }
    if(email_default_user_name != nullptr) { 
        delete email_default_user_name;
    }
    if(email_templates_root_path != nullptr) { 
        delete email_templates_root_path;
    }
}

OAIComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties*
OAIComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&email_name, pJson["email.name"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&email_create_post_from_reply, pJson["email.createPostFromReply"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&email_add_comment_id_to, pJson["email.addCommentIdTo"], "OAIConfigNodePropertyDropDown", "OAIConfigNodePropertyDropDown");
    
    ::OpenAPI::setValue(&email_subject_maximum_length, pJson["email.subjectMaximumLength"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&email_reply_to_address, pJson["email.replyToAddress"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&email_reply_to_delimiter, pJson["email.replyToDelimiter"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&email_tracker_id_prefix_in_subject, pJson["email.trackerIdPrefixInSubject"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&email_tracker_id_prefix_in_body, pJson["email.trackerIdPrefixInBody"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&email_as_html, pJson["email.asHTML"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&email_default_user_name, pJson["email.defaultUserName"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&email_templates_root_path, pJson["email.templates.rootPath"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
}

QString
OAIComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties::asJsonObject() {
    QJsonObject obj;
    if((email_name != nullptr) && (email_name->isSet())){
        toJsonValue(QString("email.name"), email_name, obj, QString("OAIConfigNodePropertyString"));
    }
    if((email_create_post_from_reply != nullptr) && (email_create_post_from_reply->isSet())){
        toJsonValue(QString("email.createPostFromReply"), email_create_post_from_reply, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((email_add_comment_id_to != nullptr) && (email_add_comment_id_to->isSet())){
        toJsonValue(QString("email.addCommentIdTo"), email_add_comment_id_to, obj, QString("OAIConfigNodePropertyDropDown"));
    }
    if((email_subject_maximum_length != nullptr) && (email_subject_maximum_length->isSet())){
        toJsonValue(QString("email.subjectMaximumLength"), email_subject_maximum_length, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((email_reply_to_address != nullptr) && (email_reply_to_address->isSet())){
        toJsonValue(QString("email.replyToAddress"), email_reply_to_address, obj, QString("OAIConfigNodePropertyString"));
    }
    if((email_reply_to_delimiter != nullptr) && (email_reply_to_delimiter->isSet())){
        toJsonValue(QString("email.replyToDelimiter"), email_reply_to_delimiter, obj, QString("OAIConfigNodePropertyString"));
    }
    if((email_tracker_id_prefix_in_subject != nullptr) && (email_tracker_id_prefix_in_subject->isSet())){
        toJsonValue(QString("email.trackerIdPrefixInSubject"), email_tracker_id_prefix_in_subject, obj, QString("OAIConfigNodePropertyString"));
    }
    if((email_tracker_id_prefix_in_body != nullptr) && (email_tracker_id_prefix_in_body->isSet())){
        toJsonValue(QString("email.trackerIdPrefixInBody"), email_tracker_id_prefix_in_body, obj, QString("OAIConfigNodePropertyString"));
    }
    if((email_as_html != nullptr) && (email_as_html->isSet())){
        toJsonValue(QString("email.asHTML"), email_as_html, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((email_default_user_name != nullptr) && (email_default_user_name->isSet())){
        toJsonValue(QString("email.defaultUserName"), email_default_user_name, obj, QString("OAIConfigNodePropertyString"));
    }
    if((email_templates_root_path != nullptr) && (email_templates_root_path->isSet())){
        toJsonValue(QString("email.templates.rootPath"), email_templates_root_path, obj, QString("OAIConfigNodePropertyString"));
    }

    return obj;
}

OAIConfigNodePropertyString*
OAIComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties::getEmailName() {
    return email_name;
}
void
OAIComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties::setEmailName(OAIConfigNodePropertyString* email_name) {
    this->email_name = email_name;
    this->m_email_name_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties::getEmailCreatePostFromReply() {
    return email_create_post_from_reply;
}
void
OAIComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties::setEmailCreatePostFromReply(OAIConfigNodePropertyBoolean* email_create_post_from_reply) {
    this->email_create_post_from_reply = email_create_post_from_reply;
    this->m_email_create_post_from_reply_isSet = true;
}

OAIConfigNodePropertyDropDown*
OAIComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties::getEmailAddCommentIdTo() {
    return email_add_comment_id_to;
}
void
OAIComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties::setEmailAddCommentIdTo(OAIConfigNodePropertyDropDown* email_add_comment_id_to) {
    this->email_add_comment_id_to = email_add_comment_id_to;
    this->m_email_add_comment_id_to_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties::getEmailSubjectMaximumLength() {
    return email_subject_maximum_length;
}
void
OAIComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties::setEmailSubjectMaximumLength(OAIConfigNodePropertyInteger* email_subject_maximum_length) {
    this->email_subject_maximum_length = email_subject_maximum_length;
    this->m_email_subject_maximum_length_isSet = true;
}

OAIConfigNodePropertyString*
OAIComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties::getEmailReplyToAddress() {
    return email_reply_to_address;
}
void
OAIComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties::setEmailReplyToAddress(OAIConfigNodePropertyString* email_reply_to_address) {
    this->email_reply_to_address = email_reply_to_address;
    this->m_email_reply_to_address_isSet = true;
}

OAIConfigNodePropertyString*
OAIComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties::getEmailReplyToDelimiter() {
    return email_reply_to_delimiter;
}
void
OAIComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties::setEmailReplyToDelimiter(OAIConfigNodePropertyString* email_reply_to_delimiter) {
    this->email_reply_to_delimiter = email_reply_to_delimiter;
    this->m_email_reply_to_delimiter_isSet = true;
}

OAIConfigNodePropertyString*
OAIComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties::getEmailTrackerIdPrefixInSubject() {
    return email_tracker_id_prefix_in_subject;
}
void
OAIComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties::setEmailTrackerIdPrefixInSubject(OAIConfigNodePropertyString* email_tracker_id_prefix_in_subject) {
    this->email_tracker_id_prefix_in_subject = email_tracker_id_prefix_in_subject;
    this->m_email_tracker_id_prefix_in_subject_isSet = true;
}

OAIConfigNodePropertyString*
OAIComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties::getEmailTrackerIdPrefixInBody() {
    return email_tracker_id_prefix_in_body;
}
void
OAIComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties::setEmailTrackerIdPrefixInBody(OAIConfigNodePropertyString* email_tracker_id_prefix_in_body) {
    this->email_tracker_id_prefix_in_body = email_tracker_id_prefix_in_body;
    this->m_email_tracker_id_prefix_in_body_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties::getEmailAsHtml() {
    return email_as_html;
}
void
OAIComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties::setEmailAsHtml(OAIConfigNodePropertyBoolean* email_as_html) {
    this->email_as_html = email_as_html;
    this->m_email_as_html_isSet = true;
}

OAIConfigNodePropertyString*
OAIComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties::getEmailDefaultUserName() {
    return email_default_user_name;
}
void
OAIComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties::setEmailDefaultUserName(OAIConfigNodePropertyString* email_default_user_name) {
    this->email_default_user_name = email_default_user_name;
    this->m_email_default_user_name_isSet = true;
}

OAIConfigNodePropertyString*
OAIComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties::getEmailTemplatesRootPath() {
    return email_templates_root_path;
}
void
OAIComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties::setEmailTemplatesRootPath(OAIConfigNodePropertyString* email_templates_root_path) {
    this->email_templates_root_path = email_templates_root_path;
    this->m_email_templates_root_path_isSet = true;
}


bool
OAIComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(email_name != nullptr && email_name->isSet()){ isObjectUpdated = true; break;}
        if(email_create_post_from_reply != nullptr && email_create_post_from_reply->isSet()){ isObjectUpdated = true; break;}
        if(email_add_comment_id_to != nullptr && email_add_comment_id_to->isSet()){ isObjectUpdated = true; break;}
        if(email_subject_maximum_length != nullptr && email_subject_maximum_length->isSet()){ isObjectUpdated = true; break;}
        if(email_reply_to_address != nullptr && email_reply_to_address->isSet()){ isObjectUpdated = true; break;}
        if(email_reply_to_delimiter != nullptr && email_reply_to_delimiter->isSet()){ isObjectUpdated = true; break;}
        if(email_tracker_id_prefix_in_subject != nullptr && email_tracker_id_prefix_in_subject->isSet()){ isObjectUpdated = true; break;}
        if(email_tracker_id_prefix_in_body != nullptr && email_tracker_id_prefix_in_body->isSet()){ isObjectUpdated = true; break;}
        if(email_as_html != nullptr && email_as_html->isSet()){ isObjectUpdated = true; break;}
        if(email_default_user_name != nullptr && email_default_user_name->isSet()){ isObjectUpdated = true; break;}
        if(email_templates_root_path != nullptr && email_templates_root_path->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

