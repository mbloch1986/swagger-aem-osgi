/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiProperties::OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiProperties()
{
    m_NameIsSet = false;
    m_EndpointsIsSet = false;
    m_Pull_itemsIsSet = false;
    m_PackageBuilder_targetIsSet = false;
    m_TransportSecretProvider_targetIsSet = false;
    
}

OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiProperties::~OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiProperties()
{
}

void OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_NameIsSet)
    {
        val["name"] = ModelBase::toJson(m_Name);
    }
    if(m_EndpointsIsSet)
    {
        val["endpoints"] = ModelBase::toJson(m_Endpoints);
    }
    if(m_Pull_itemsIsSet)
    {
        val["pull.items"] = ModelBase::toJson(m_Pull_items);
    }
    if(m_PackageBuilder_targetIsSet)
    {
        val["packageBuilder.target"] = ModelBase::toJson(m_PackageBuilder_target);
    }
    if(m_TransportSecretProvider_targetIsSet)
    {
        val["transportSecretProvider.target"] = ModelBase::toJson(m_TransportSecretProvider_target);
    }
    

    return val;
}

void OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiProperties::fromJson(nlohmann::json& val)
{
    if(val.find("name") != val.end())
    {
        if(!val["name"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["name"]);
            setName( newItem );
        }
        
    }
    if(val.find("endpoints") != val.end())
    {
        if(!val["endpoints"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["endpoints"]);
            setEndpoints( newItem );
        }
        
    }
    if(val.find("pull.items") != val.end())
    {
        if(!val["pull.items"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["pull.items"]);
            setPullItems( newItem );
        }
        
    }
    if(val.find("packageBuilder.target") != val.end())
    {
        if(!val["packageBuilder.target"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["packageBuilder.target"]);
            setPackageBuilderTarget( newItem );
        }
        
    }
    if(val.find("transportSecretProvider.target") != val.end())
    {
        if(!val["transportSecretProvider.target"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["transportSecretProvider.target"]);
            setTransportSecretProviderTarget( newItem );
        }
        
    }
    
}


ConfigNodePropertyString OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiProperties::getName() const
{
    return m_Name;
}
void OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiProperties::setName(ConfigNodePropertyString const& value)
{
    m_Name = value;
    m_NameIsSet = true;
}
bool OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiProperties::nameIsSet() const
{
    return m_NameIsSet;
}
void OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiProperties::unsetName()
{
    m_NameIsSet = false;
}
ConfigNodePropertyArray OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiProperties::getEndpoints() const
{
    return m_Endpoints;
}
void OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiProperties::setEndpoints(ConfigNodePropertyArray const& value)
{
    m_Endpoints = value;
    m_EndpointsIsSet = true;
}
bool OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiProperties::endpointsIsSet() const
{
    return m_EndpointsIsSet;
}
void OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiProperties::unsetEndpoints()
{
    m_EndpointsIsSet = false;
}
ConfigNodePropertyInteger OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiProperties::getPullItems() const
{
    return m_Pull_items;
}
void OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiProperties::setPullItems(ConfigNodePropertyInteger const& value)
{
    m_Pull_items = value;
    m_Pull_itemsIsSet = true;
}
bool OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiProperties::pullItemsIsSet() const
{
    return m_Pull_itemsIsSet;
}
void OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiProperties::unsetPull_items()
{
    m_Pull_itemsIsSet = false;
}
ConfigNodePropertyString OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiProperties::getPackageBuilderTarget() const
{
    return m_PackageBuilder_target;
}
void OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiProperties::setPackageBuilderTarget(ConfigNodePropertyString const& value)
{
    m_PackageBuilder_target = value;
    m_PackageBuilder_targetIsSet = true;
}
bool OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiProperties::packageBuilderTargetIsSet() const
{
    return m_PackageBuilder_targetIsSet;
}
void OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiProperties::unsetPackageBuilder_target()
{
    m_PackageBuilder_targetIsSet = false;
}
ConfigNodePropertyString OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiProperties::getTransportSecretProviderTarget() const
{
    return m_TransportSecretProvider_target;
}
void OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiProperties::setTransportSecretProviderTarget(ConfigNodePropertyString const& value)
{
    m_TransportSecretProvider_target = value;
    m_TransportSecretProvider_targetIsSet = true;
}
bool OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiProperties::transportSecretProviderTargetIsSet() const
{
    return m_TransportSecretProvider_targetIsSet;
}
void OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiProperties::unsetTransportSecretProvider_target()
{
    m_TransportSecretProvider_targetIsSet = false;
}

}
}
}
}

