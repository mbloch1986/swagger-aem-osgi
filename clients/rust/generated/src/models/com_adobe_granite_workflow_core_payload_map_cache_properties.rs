/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComAdobeGraniteWorkflowCorePayloadMapCacheProperties {
  #[serde(rename = "getSystemWorkflowModels")]
  get_system_workflow_models: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "getPackageRootPath")]
  get_package_root_path: Option<::models::ConfigNodePropertyString>
}

impl ComAdobeGraniteWorkflowCorePayloadMapCacheProperties {
  pub fn new() -> ComAdobeGraniteWorkflowCorePayloadMapCacheProperties {
    ComAdobeGraniteWorkflowCorePayloadMapCacheProperties {
      get_system_workflow_models: None,
      get_package_root_path: None
    }
  }

  pub fn set_get_system_workflow_models(&mut self, get_system_workflow_models: ::models::ConfigNodePropertyArray) {
    self.get_system_workflow_models = Some(get_system_workflow_models);
  }

  pub fn with_get_system_workflow_models(mut self, get_system_workflow_models: ::models::ConfigNodePropertyArray) -> ComAdobeGraniteWorkflowCorePayloadMapCacheProperties {
    self.get_system_workflow_models = Some(get_system_workflow_models);
    self
  }

  pub fn get_system_workflow_models(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.get_system_workflow_models.as_ref()
  }

  pub fn reset_get_system_workflow_models(&mut self) {
    self.get_system_workflow_models = None;
  }

  pub fn set_get_package_root_path(&mut self, get_package_root_path: ::models::ConfigNodePropertyString) {
    self.get_package_root_path = Some(get_package_root_path);
  }

  pub fn with_get_package_root_path(mut self, get_package_root_path: ::models::ConfigNodePropertyString) -> ComAdobeGraniteWorkflowCorePayloadMapCacheProperties {
    self.get_package_root_path = Some(get_package_root_path);
    self
  }

  pub fn get_package_root_path(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.get_package_root_path.as_ref()
  }

  pub fn reset_get_package_root_path(&mut self) {
    self.get_package_root_path = None;
  }

}



