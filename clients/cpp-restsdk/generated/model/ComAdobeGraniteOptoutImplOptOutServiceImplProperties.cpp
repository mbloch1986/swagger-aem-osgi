/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComAdobeGraniteOptoutImplOptOutServiceImplProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComAdobeGraniteOptoutImplOptOutServiceImplProperties::ComAdobeGraniteOptoutImplOptOutServiceImplProperties()
{
    m_Optout_cookiesIsSet = false;
    m_Optout_headersIsSet = false;
    m_Optout_whitelist_cookiesIsSet = false;
}

ComAdobeGraniteOptoutImplOptOutServiceImplProperties::~ComAdobeGraniteOptoutImplOptOutServiceImplProperties()
{
}

void ComAdobeGraniteOptoutImplOptOutServiceImplProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComAdobeGraniteOptoutImplOptOutServiceImplProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Optout_cookiesIsSet)
    {
        val[utility::conversions::to_string_t("optout.cookies")] = ModelBase::toJson(m_Optout_cookies);
    }
    if(m_Optout_headersIsSet)
    {
        val[utility::conversions::to_string_t("optout.headers")] = ModelBase::toJson(m_Optout_headers);
    }
    if(m_Optout_whitelist_cookiesIsSet)
    {
        val[utility::conversions::to_string_t("optout.whitelist.cookies")] = ModelBase::toJson(m_Optout_whitelist_cookies);
    }

    return val;
}

void ComAdobeGraniteOptoutImplOptOutServiceImplProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("optout.cookies")))
    {
        if(!val[utility::conversions::to_string_t("optout.cookies")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("optout.cookies")]);
            setOptoutCookies( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("optout.headers")))
    {
        if(!val[utility::conversions::to_string_t("optout.headers")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("optout.headers")]);
            setOptoutHeaders( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("optout.whitelist.cookies")))
    {
        if(!val[utility::conversions::to_string_t("optout.whitelist.cookies")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("optout.whitelist.cookies")]);
            setOptoutWhitelistCookies( newItem );
        }
    }
}

void ComAdobeGraniteOptoutImplOptOutServiceImplProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Optout_cookiesIsSet)
    {
        if (m_Optout_cookies.get())
        {
            m_Optout_cookies->toMultipart(multipart, utility::conversions::to_string_t("optout.cookies."));
        }
    }
    if(m_Optout_headersIsSet)
    {
        if (m_Optout_headers.get())
        {
            m_Optout_headers->toMultipart(multipart, utility::conversions::to_string_t("optout.headers."));
        }
    }
    if(m_Optout_whitelist_cookiesIsSet)
    {
        if (m_Optout_whitelist_cookies.get())
        {
            m_Optout_whitelist_cookies->toMultipart(multipart, utility::conversions::to_string_t("optout.whitelist.cookies."));
        }
    }
}

void ComAdobeGraniteOptoutImplOptOutServiceImplProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("optout.cookies")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("optout.cookies")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("optout.cookies."));
            setOptoutCookies( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("optout.headers")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("optout.headers")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("optout.headers."));
            setOptoutHeaders( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("optout.whitelist.cookies")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("optout.whitelist.cookies")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("optout.whitelist.cookies."));
            setOptoutWhitelistCookies( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyArray> ComAdobeGraniteOptoutImplOptOutServiceImplProperties::getOptoutCookies() const
{
    return m_Optout_cookies;
}


void ComAdobeGraniteOptoutImplOptOutServiceImplProperties::setOptoutCookies(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Optout_cookies = value;
    m_Optout_cookiesIsSet = true;
}
bool ComAdobeGraniteOptoutImplOptOutServiceImplProperties::optoutCookiesIsSet() const
{
    return m_Optout_cookiesIsSet;
}

void ComAdobeGraniteOptoutImplOptOutServiceImplProperties::unsetOptout_cookies()
{
    m_Optout_cookiesIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> ComAdobeGraniteOptoutImplOptOutServiceImplProperties::getOptoutHeaders() const
{
    return m_Optout_headers;
}


void ComAdobeGraniteOptoutImplOptOutServiceImplProperties::setOptoutHeaders(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Optout_headers = value;
    m_Optout_headersIsSet = true;
}
bool ComAdobeGraniteOptoutImplOptOutServiceImplProperties::optoutHeadersIsSet() const
{
    return m_Optout_headersIsSet;
}

void ComAdobeGraniteOptoutImplOptOutServiceImplProperties::unsetOptout_headers()
{
    m_Optout_headersIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> ComAdobeGraniteOptoutImplOptOutServiceImplProperties::getOptoutWhitelistCookies() const
{
    return m_Optout_whitelist_cookies;
}


void ComAdobeGraniteOptoutImplOptOutServiceImplProperties::setOptoutWhitelistCookies(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Optout_whitelist_cookies = value;
    m_Optout_whitelist_cookiesIsSet = true;
}
bool ComAdobeGraniteOptoutImplOptOutServiceImplProperties::optoutWhitelistCookiesIsSet() const
{
    return m_Optout_whitelist_cookiesIsSet;
}

void ComAdobeGraniteOptoutImplOptOutServiceImplProperties::unsetOptout_whitelist_cookies()
{
    m_Optout_whitelist_cookiesIsSet = false;
}

}
}
}
}

