/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComDayCqDamCoreImplDamEventPurgeServiceProperties {
  #[serde(rename = "scheduler.expression")]
  scheduler_expression: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "maxSavedActivities")]
  max_saved_activities: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "saveInterval")]
  save_interval: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "enableActivityPurge")]
  enable_activity_purge: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "eventTypes")]
  event_types: Option<::models::ConfigNodePropertyDropDown>
}

impl ComDayCqDamCoreImplDamEventPurgeServiceProperties {
  pub fn new() -> ComDayCqDamCoreImplDamEventPurgeServiceProperties {
    ComDayCqDamCoreImplDamEventPurgeServiceProperties {
      scheduler_expression: None,
      max_saved_activities: None,
      save_interval: None,
      enable_activity_purge: None,
      event_types: None
    }
  }

  pub fn set_scheduler_expression(&mut self, scheduler_expression: ::models::ConfigNodePropertyString) {
    self.scheduler_expression = Some(scheduler_expression);
  }

  pub fn with_scheduler_expression(mut self, scheduler_expression: ::models::ConfigNodePropertyString) -> ComDayCqDamCoreImplDamEventPurgeServiceProperties {
    self.scheduler_expression = Some(scheduler_expression);
    self
  }

  pub fn scheduler_expression(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.scheduler_expression.as_ref()
  }

  pub fn reset_scheduler_expression(&mut self) {
    self.scheduler_expression = None;
  }

  pub fn set_max_saved_activities(&mut self, max_saved_activities: ::models::ConfigNodePropertyInteger) {
    self.max_saved_activities = Some(max_saved_activities);
  }

  pub fn with_max_saved_activities(mut self, max_saved_activities: ::models::ConfigNodePropertyInteger) -> ComDayCqDamCoreImplDamEventPurgeServiceProperties {
    self.max_saved_activities = Some(max_saved_activities);
    self
  }

  pub fn max_saved_activities(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.max_saved_activities.as_ref()
  }

  pub fn reset_max_saved_activities(&mut self) {
    self.max_saved_activities = None;
  }

  pub fn set_save_interval(&mut self, save_interval: ::models::ConfigNodePropertyInteger) {
    self.save_interval = Some(save_interval);
  }

  pub fn with_save_interval(mut self, save_interval: ::models::ConfigNodePropertyInteger) -> ComDayCqDamCoreImplDamEventPurgeServiceProperties {
    self.save_interval = Some(save_interval);
    self
  }

  pub fn save_interval(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.save_interval.as_ref()
  }

  pub fn reset_save_interval(&mut self) {
    self.save_interval = None;
  }

  pub fn set_enable_activity_purge(&mut self, enable_activity_purge: ::models::ConfigNodePropertyBoolean) {
    self.enable_activity_purge = Some(enable_activity_purge);
  }

  pub fn with_enable_activity_purge(mut self, enable_activity_purge: ::models::ConfigNodePropertyBoolean) -> ComDayCqDamCoreImplDamEventPurgeServiceProperties {
    self.enable_activity_purge = Some(enable_activity_purge);
    self
  }

  pub fn enable_activity_purge(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.enable_activity_purge.as_ref()
  }

  pub fn reset_enable_activity_purge(&mut self) {
    self.enable_activity_purge = None;
  }

  pub fn set_event_types(&mut self, event_types: ::models::ConfigNodePropertyDropDown) {
    self.event_types = Some(event_types);
  }

  pub fn with_event_types(mut self, event_types: ::models::ConfigNodePropertyDropDown) -> ComDayCqDamCoreImplDamEventPurgeServiceProperties {
    self.event_types = Some(event_types);
    self
  }

  pub fn event_types(&self) -> Option<&::models::ConfigNodePropertyDropDown> {
    self.event_types.as_ref()
  }

  pub fn reset_event_types(&mut self) {
    self.event_types = None;
  }

}



