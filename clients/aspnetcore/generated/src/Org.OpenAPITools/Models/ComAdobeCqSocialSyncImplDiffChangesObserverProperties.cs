/*
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ComAdobeCqSocialSyncImplDiffChangesObserverProperties : IEquatable<ComAdobeCqSocialSyncImplDiffChangesObserverProperties>
    { 
        /// <summary>
        /// Gets or Sets Enabled
        /// </summary>
        [DataMember(Name="enabled")]
        public ConfigNodePropertyBoolean Enabled { get; set; }

        /// <summary>
        /// Gets or Sets AgentName
        /// </summary>
        [DataMember(Name="agentName")]
        public ConfigNodePropertyString AgentName { get; set; }

        /// <summary>
        /// Gets or Sets DiffPath
        /// </summary>
        [DataMember(Name="diffPath")]
        public ConfigNodePropertyString DiffPath { get; set; }

        /// <summary>
        /// Gets or Sets PropertyNames
        /// </summary>
        [DataMember(Name="propertyNames")]
        public ConfigNodePropertyString PropertyNames { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ComAdobeCqSocialSyncImplDiffChangesObserverProperties {\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  AgentName: ").Append(AgentName).Append("\n");
            sb.Append("  DiffPath: ").Append(DiffPath).Append("\n");
            sb.Append("  PropertyNames: ").Append(PropertyNames).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ComAdobeCqSocialSyncImplDiffChangesObserverProperties)obj);
        }

        /// <summary>
        /// Returns true if ComAdobeCqSocialSyncImplDiffChangesObserverProperties instances are equal
        /// </summary>
        /// <param name="other">Instance of ComAdobeCqSocialSyncImplDiffChangesObserverProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComAdobeCqSocialSyncImplDiffChangesObserverProperties other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Enabled == other.Enabled ||
                    Enabled != null &&
                    Enabled.Equals(other.Enabled)
                ) && 
                (
                    AgentName == other.AgentName ||
                    AgentName != null &&
                    AgentName.Equals(other.AgentName)
                ) && 
                (
                    DiffPath == other.DiffPath ||
                    DiffPath != null &&
                    DiffPath.Equals(other.DiffPath)
                ) && 
                (
                    PropertyNames == other.PropertyNames ||
                    PropertyNames != null &&
                    PropertyNames.Equals(other.PropertyNames)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Enabled != null)
                    hashCode = hashCode * 59 + Enabled.GetHashCode();
                    if (AgentName != null)
                    hashCode = hashCode * 59 + AgentName.GetHashCode();
                    if (DiffPath != null)
                    hashCode = hashCode * 59 + DiffPath.GetHashCode();
                    if (PropertyNames != null)
                    hashCode = hashCode * 59 + PropertyNames.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ComAdobeCqSocialSyncImplDiffChangesObserverProperties left, ComAdobeCqSocialSyncImplDiffChangesObserverProperties right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ComAdobeCqSocialSyncImplDiffChangesObserverProperties left, ComAdobeCqSocialSyncImplDiffChangesObserverProperties right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
