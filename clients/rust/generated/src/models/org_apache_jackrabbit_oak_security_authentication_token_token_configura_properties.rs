/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties {
  #[serde(rename = "tokenExpiration")]
  token_expiration: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "tokenLength")]
  token_length: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "tokenRefresh")]
  token_refresh: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "tokenCleanupThreshold")]
  token_cleanup_threshold: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "passwordHashAlgorithm")]
  password_hash_algorithm: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "passwordHashIterations")]
  password_hash_iterations: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "passwordSaltSize")]
  password_salt_size: Option<::models::ConfigNodePropertyInteger>
}

impl OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties {
  pub fn new() -> OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties {
    OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties {
      token_expiration: None,
      token_length: None,
      token_refresh: None,
      token_cleanup_threshold: None,
      password_hash_algorithm: None,
      password_hash_iterations: None,
      password_salt_size: None
    }
  }

  pub fn set_token_expiration(&mut self, token_expiration: ::models::ConfigNodePropertyString) {
    self.token_expiration = Some(token_expiration);
  }

  pub fn with_token_expiration(mut self, token_expiration: ::models::ConfigNodePropertyString) -> OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties {
    self.token_expiration = Some(token_expiration);
    self
  }

  pub fn token_expiration(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.token_expiration.as_ref()
  }

  pub fn reset_token_expiration(&mut self) {
    self.token_expiration = None;
  }

  pub fn set_token_length(&mut self, token_length: ::models::ConfigNodePropertyString) {
    self.token_length = Some(token_length);
  }

  pub fn with_token_length(mut self, token_length: ::models::ConfigNodePropertyString) -> OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties {
    self.token_length = Some(token_length);
    self
  }

  pub fn token_length(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.token_length.as_ref()
  }

  pub fn reset_token_length(&mut self) {
    self.token_length = None;
  }

  pub fn set_token_refresh(&mut self, token_refresh: ::models::ConfigNodePropertyBoolean) {
    self.token_refresh = Some(token_refresh);
  }

  pub fn with_token_refresh(mut self, token_refresh: ::models::ConfigNodePropertyBoolean) -> OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties {
    self.token_refresh = Some(token_refresh);
    self
  }

  pub fn token_refresh(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.token_refresh.as_ref()
  }

  pub fn reset_token_refresh(&mut self) {
    self.token_refresh = None;
  }

  pub fn set_token_cleanup_threshold(&mut self, token_cleanup_threshold: ::models::ConfigNodePropertyInteger) {
    self.token_cleanup_threshold = Some(token_cleanup_threshold);
  }

  pub fn with_token_cleanup_threshold(mut self, token_cleanup_threshold: ::models::ConfigNodePropertyInteger) -> OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties {
    self.token_cleanup_threshold = Some(token_cleanup_threshold);
    self
  }

  pub fn token_cleanup_threshold(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.token_cleanup_threshold.as_ref()
  }

  pub fn reset_token_cleanup_threshold(&mut self) {
    self.token_cleanup_threshold = None;
  }

  pub fn set_password_hash_algorithm(&mut self, password_hash_algorithm: ::models::ConfigNodePropertyString) {
    self.password_hash_algorithm = Some(password_hash_algorithm);
  }

  pub fn with_password_hash_algorithm(mut self, password_hash_algorithm: ::models::ConfigNodePropertyString) -> OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties {
    self.password_hash_algorithm = Some(password_hash_algorithm);
    self
  }

  pub fn password_hash_algorithm(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.password_hash_algorithm.as_ref()
  }

  pub fn reset_password_hash_algorithm(&mut self) {
    self.password_hash_algorithm = None;
  }

  pub fn set_password_hash_iterations(&mut self, password_hash_iterations: ::models::ConfigNodePropertyInteger) {
    self.password_hash_iterations = Some(password_hash_iterations);
  }

  pub fn with_password_hash_iterations(mut self, password_hash_iterations: ::models::ConfigNodePropertyInteger) -> OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties {
    self.password_hash_iterations = Some(password_hash_iterations);
    self
  }

  pub fn password_hash_iterations(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.password_hash_iterations.as_ref()
  }

  pub fn reset_password_hash_iterations(&mut self) {
    self.password_hash_iterations = None;
  }

  pub fn set_password_salt_size(&mut self, password_salt_size: ::models::ConfigNodePropertyInteger) {
    self.password_salt_size = Some(password_salt_size);
  }

  pub fn with_password_salt_size(mut self, password_salt_size: ::models::ConfigNodePropertyInteger) -> OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties {
    self.password_salt_size = Some(password_salt_size);
    self
  }

  pub fn password_salt_size(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.password_salt_size.as_ref()
  }

  pub fn reset_password_salt_size(&mut self) {
    self.password_salt_size = None;
  }

}



