/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// OrgApacheSlingServletsGetDefaultGetServletProperties
    /// </summary>
    [DataContract]
    public partial class OrgApacheSlingServletsGetDefaultGetServletProperties :  IEquatable<OrgApacheSlingServletsGetDefaultGetServletProperties>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrgApacheSlingServletsGetDefaultGetServletProperties" /> class.
        /// </summary>
        /// <param name="aliases">aliases.</param>
        /// <param name="index">index.</param>
        /// <param name="indexFiles">indexFiles.</param>
        /// <param name="enableHtml">enableHtml.</param>
        /// <param name="enableJson">enableJson.</param>
        /// <param name="enableTxt">enableTxt.</param>
        /// <param name="enableXml">enableXml.</param>
        /// <param name="jsonMaximumresults">jsonMaximumresults.</param>
        /// <param name="ecmaSuport">ecmaSuport.</param>
        public OrgApacheSlingServletsGetDefaultGetServletProperties(ConfigNodePropertyArray aliases = default(ConfigNodePropertyArray), ConfigNodePropertyBoolean index = default(ConfigNodePropertyBoolean), ConfigNodePropertyArray indexFiles = default(ConfigNodePropertyArray), ConfigNodePropertyBoolean enableHtml = default(ConfigNodePropertyBoolean), ConfigNodePropertyBoolean enableJson = default(ConfigNodePropertyBoolean), ConfigNodePropertyBoolean enableTxt = default(ConfigNodePropertyBoolean), ConfigNodePropertyBoolean enableXml = default(ConfigNodePropertyBoolean), ConfigNodePropertyInteger jsonMaximumresults = default(ConfigNodePropertyInteger), ConfigNodePropertyBoolean ecmaSuport = default(ConfigNodePropertyBoolean))
        {
            this.Aliases = aliases;
            this.Index = index;
            this.IndexFiles = indexFiles;
            this.EnableHtml = enableHtml;
            this.EnableJson = enableJson;
            this.EnableTxt = enableTxt;
            this.EnableXml = enableXml;
            this.JsonMaximumresults = jsonMaximumresults;
            this.EcmaSuport = ecmaSuport;
        }
        
        /// <summary>
        /// Gets or Sets Aliases
        /// </summary>
        [DataMember(Name="aliases", EmitDefaultValue=false)]
        public ConfigNodePropertyArray Aliases { get; set; }

        /// <summary>
        /// Gets or Sets Index
        /// </summary>
        [DataMember(Name="index", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean Index { get; set; }

        /// <summary>
        /// Gets or Sets IndexFiles
        /// </summary>
        [DataMember(Name="index.files", EmitDefaultValue=false)]
        public ConfigNodePropertyArray IndexFiles { get; set; }

        /// <summary>
        /// Gets or Sets EnableHtml
        /// </summary>
        [DataMember(Name="enable.html", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean EnableHtml { get; set; }

        /// <summary>
        /// Gets or Sets EnableJson
        /// </summary>
        [DataMember(Name="enable.json", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean EnableJson { get; set; }

        /// <summary>
        /// Gets or Sets EnableTxt
        /// </summary>
        [DataMember(Name="enable.txt", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean EnableTxt { get; set; }

        /// <summary>
        /// Gets or Sets EnableXml
        /// </summary>
        [DataMember(Name="enable.xml", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean EnableXml { get; set; }

        /// <summary>
        /// Gets or Sets JsonMaximumresults
        /// </summary>
        [DataMember(Name="json.maximumresults", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger JsonMaximumresults { get; set; }

        /// <summary>
        /// Gets or Sets EcmaSuport
        /// </summary>
        [DataMember(Name="ecmaSuport", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean EcmaSuport { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrgApacheSlingServletsGetDefaultGetServletProperties {\n");
            sb.Append("  Aliases: ").Append(Aliases).Append("\n");
            sb.Append("  Index: ").Append(Index).Append("\n");
            sb.Append("  IndexFiles: ").Append(IndexFiles).Append("\n");
            sb.Append("  EnableHtml: ").Append(EnableHtml).Append("\n");
            sb.Append("  EnableJson: ").Append(EnableJson).Append("\n");
            sb.Append("  EnableTxt: ").Append(EnableTxt).Append("\n");
            sb.Append("  EnableXml: ").Append(EnableXml).Append("\n");
            sb.Append("  JsonMaximumresults: ").Append(JsonMaximumresults).Append("\n");
            sb.Append("  EcmaSuport: ").Append(EcmaSuport).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrgApacheSlingServletsGetDefaultGetServletProperties);
        }

        /// <summary>
        /// Returns true if OrgApacheSlingServletsGetDefaultGetServletProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of OrgApacheSlingServletsGetDefaultGetServletProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrgApacheSlingServletsGetDefaultGetServletProperties input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Aliases == input.Aliases ||
                    (this.Aliases != null &&
                    this.Aliases.Equals(input.Aliases))
                ) && 
                (
                    this.Index == input.Index ||
                    (this.Index != null &&
                    this.Index.Equals(input.Index))
                ) && 
                (
                    this.IndexFiles == input.IndexFiles ||
                    (this.IndexFiles != null &&
                    this.IndexFiles.Equals(input.IndexFiles))
                ) && 
                (
                    this.EnableHtml == input.EnableHtml ||
                    (this.EnableHtml != null &&
                    this.EnableHtml.Equals(input.EnableHtml))
                ) && 
                (
                    this.EnableJson == input.EnableJson ||
                    (this.EnableJson != null &&
                    this.EnableJson.Equals(input.EnableJson))
                ) && 
                (
                    this.EnableTxt == input.EnableTxt ||
                    (this.EnableTxt != null &&
                    this.EnableTxt.Equals(input.EnableTxt))
                ) && 
                (
                    this.EnableXml == input.EnableXml ||
                    (this.EnableXml != null &&
                    this.EnableXml.Equals(input.EnableXml))
                ) && 
                (
                    this.JsonMaximumresults == input.JsonMaximumresults ||
                    (this.JsonMaximumresults != null &&
                    this.JsonMaximumresults.Equals(input.JsonMaximumresults))
                ) && 
                (
                    this.EcmaSuport == input.EcmaSuport ||
                    (this.EcmaSuport != null &&
                    this.EcmaSuport.Equals(input.EcmaSuport))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Aliases != null)
                    hashCode = hashCode * 59 + this.Aliases.GetHashCode();
                if (this.Index != null)
                    hashCode = hashCode * 59 + this.Index.GetHashCode();
                if (this.IndexFiles != null)
                    hashCode = hashCode * 59 + this.IndexFiles.GetHashCode();
                if (this.EnableHtml != null)
                    hashCode = hashCode * 59 + this.EnableHtml.GetHashCode();
                if (this.EnableJson != null)
                    hashCode = hashCode * 59 + this.EnableJson.GetHashCode();
                if (this.EnableTxt != null)
                    hashCode = hashCode * 59 + this.EnableTxt.GetHashCode();
                if (this.EnableXml != null)
                    hashCode = hashCode * 59 + this.EnableXml.GetHashCode();
                if (this.JsonMaximumresults != null)
                    hashCode = hashCode * 59 + this.JsonMaximumresults.GetHashCode();
                if (this.EcmaSuport != null)
                    hashCode = hashCode * 59 + this.EcmaSuport.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
