/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeCqProjectsImplServletProjectImageServletProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeCqProjectsImplServletProjectImageServletProperties::OAIComAdobeCqProjectsImplServletProjectImageServletProperties(QString json) {
    this->fromJson(json);
}

OAIComAdobeCqProjectsImplServletProjectImageServletProperties::OAIComAdobeCqProjectsImplServletProjectImageServletProperties() {
    this->init();
}

OAIComAdobeCqProjectsImplServletProjectImageServletProperties::~OAIComAdobeCqProjectsImplServletProjectImageServletProperties() {
    
}

void
OAIComAdobeCqProjectsImplServletProjectImageServletProperties::init() {
    m_image_quality_isSet = false;
    m_image_supported_resolutions_isSet = false;
}

void
OAIComAdobeCqProjectsImplServletProjectImageServletProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIComAdobeCqProjectsImplServletProjectImageServletProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(image_quality, json[QString("image.quality")]);
    
    ::OpenAPI::fromJsonValue(image_supported_resolutions, json[QString("image.supported.resolutions")]);
    
}

QString
OAIComAdobeCqProjectsImplServletProjectImageServletProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeCqProjectsImplServletProjectImageServletProperties::asJsonObject() const {
    QJsonObject obj;
	if(image_quality.isSet()){
        obj.insert(QString("image.quality"), ::OpenAPI::toJsonValue(image_quality));
    }
	if(image_supported_resolutions.isSet()){
        obj.insert(QString("image.supported.resolutions"), ::OpenAPI::toJsonValue(image_supported_resolutions));
    }
    return obj;
}

OAIConfigNodePropertyString
OAIComAdobeCqProjectsImplServletProjectImageServletProperties::getImageQuality() const {
    return image_quality;
}
void
OAIComAdobeCqProjectsImplServletProjectImageServletProperties::setImageQuality(const OAIConfigNodePropertyString &image_quality) {
    this->image_quality = image_quality;
    this->m_image_quality_isSet = true;
}

OAIConfigNodePropertyString
OAIComAdobeCqProjectsImplServletProjectImageServletProperties::getImageSupportedResolutions() const {
    return image_supported_resolutions;
}
void
OAIComAdobeCqProjectsImplServletProjectImageServletProperties::setImageSupportedResolutions(const OAIConfigNodePropertyString &image_supported_resolutions) {
    this->image_supported_resolutions = image_supported_resolutions;
    this->m_image_supported_resolutions_isSet = true;
}


bool
OAIComAdobeCqProjectsImplServletProjectImageServletProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(image_quality.isSet()){ isObjectUpdated = true; break;}
    
        if(image_supported_resolutions.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

