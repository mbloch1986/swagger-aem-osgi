/*
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OAS-api/OAS-codegen.git
 * Do not edit the class manually.
 */

/**
 * OASOrgApacheJackrabbitOakSecurityUse
 */
public class OASOrgApacheJackrabbitOakSecurityUse {
    /**
     * Get usersPath
     * @return usersPath
     */
    public OASConfigNodePropertyString usersPath { get; set; }

    /**
     * Get groupsPath
     * @return groupsPath
     */
    public OASConfigNodePropertyString groupsPath { get; set; }

    /**
     * Get systemRelativePath
     * @return systemRelativePath
     */
    public OASConfigNodePropertyString systemRelativePath { get; set; }

    /**
     * Get defaultDepth
     * @return defaultDepth
     */
    public OASConfigNodePropertyInteger defaultDepth { get; set; }

    /**
     * Get importBehavior
     * @return importBehavior
     */
    public OASConfigNodePropertyDropDown importBehavior { get; set; }

    /**
     * Get passwordHashAlgorithm
     * @return passwordHashAlgorithm
     */
    public OASConfigNodePropertyString passwordHashAlgorithm { get; set; }

    /**
     * Get passwordHashIterations
     * @return passwordHashIterations
     */
    public OASConfigNodePropertyInteger passwordHashIterations { get; set; }

    /**
     * Get passwordSaltSize
     * @return passwordSaltSize
     */
    public OASConfigNodePropertyInteger passwordSaltSize { get; set; }

    /**
     * Get omitAdminPw
     * @return omitAdminPw
     */
    public OASConfigNodePropertyBoolean omitAdminPw { get; set; }

    /**
     * Get supportAutoSave
     * @return supportAutoSave
     */
    public OASConfigNodePropertyBoolean supportAutoSave { get; set; }

    /**
     * Get passwordMaxAge
     * @return passwordMaxAge
     */
    public OASConfigNodePropertyInteger passwordMaxAge { get; set; }

    /**
     * Get initialPasswordChange
     * @return initialPasswordChange
     */
    public OASConfigNodePropertyBoolean initialPasswordChange { get; set; }

    /**
     * Get passwordHistorySize
     * @return passwordHistorySize
     */
    public OASConfigNodePropertyInteger passwordHistorySize { get; set; }

    /**
     * Get passwordExpiryForAdmin
     * @return passwordExpiryForAdmin
     */
    public OASConfigNodePropertyBoolean passwordExpiryForAdmin { get; set; }

    /**
     * Get cacheExpiration
     * @return cacheExpiration
     */
    public OASConfigNodePropertyInteger cacheExpiration { get; set; }

    /**
     * Get enableRFC7613UsercaseMappedProfile
     * @return enableRFC7613UsercaseMappedProfile
     */
    public OASConfigNodePropertyBoolean enableRFC7613UsercaseMappedProfile { get; set; }

    public static OASOrgApacheJackrabbitOakSecurityUse getExample() {
        OASOrgApacheJackrabbitOakSecurityUse orgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties = new OASOrgApacheJackrabbitOakSecurityUse();
          orgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties.usersPath = OASConfigNodePropertyString.getExample();
          orgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties.groupsPath = OASConfigNodePropertyString.getExample();
          orgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties.systemRelativePath = OASConfigNodePropertyString.getExample();
          orgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties.defaultDepth = OASConfigNodePropertyInteger.getExample();
          orgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties.importBehavior = OASConfigNodePropertyDropDown.getExample();
          orgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties.passwordHashAlgorithm = OASConfigNodePropertyString.getExample();
          orgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties.passwordHashIterations = OASConfigNodePropertyInteger.getExample();
          orgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties.passwordSaltSize = OASConfigNodePropertyInteger.getExample();
          orgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties.omitAdminPw = OASConfigNodePropertyBoolean.getExample();
          orgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties.supportAutoSave = OASConfigNodePropertyBoolean.getExample();
          orgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties.passwordMaxAge = OASConfigNodePropertyInteger.getExample();
          orgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties.initialPasswordChange = OASConfigNodePropertyBoolean.getExample();
          orgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties.passwordHistorySize = OASConfigNodePropertyInteger.getExample();
          orgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties.passwordExpiryForAdmin = OASConfigNodePropertyBoolean.getExample();
          orgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties.cacheExpiration = OASConfigNodePropertyInteger.getExample();
          orgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties.enableRFC7613UsercaseMappedProfile = OASConfigNodePropertyBoolean.getExample();
        return orgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASOrgApacheJackrabbitOakSecurityUse) {           
            OASOrgApacheJackrabbitOakSecurityUse orgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties = (OASOrgApacheJackrabbitOakSecurityUse) obj;
            return this.usersPath == orgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties.usersPath
                && this.groupsPath == orgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties.groupsPath
                && this.systemRelativePath == orgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties.systemRelativePath
                && this.defaultDepth == orgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties.defaultDepth
                && this.importBehavior == orgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties.importBehavior
                && this.passwordHashAlgorithm == orgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties.passwordHashAlgorithm
                && this.passwordHashIterations == orgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties.passwordHashIterations
                && this.passwordSaltSize == orgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties.passwordSaltSize
                && this.omitAdminPw == orgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties.omitAdminPw
                && this.supportAutoSave == orgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties.supportAutoSave
                && this.passwordMaxAge == orgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties.passwordMaxAge
                && this.initialPasswordChange == orgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties.initialPasswordChange
                && this.passwordHistorySize == orgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties.passwordHistorySize
                && this.passwordExpiryForAdmin == orgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties.passwordExpiryForAdmin
                && this.cacheExpiration == orgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties.cacheExpiration
                && this.enableRFC7613UsercaseMappedProfile == orgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties.enableRFC7613UsercaseMappedProfile;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (usersPath == null ? 0 : System.hashCode(usersPath));
        hashCode = (17 * hashCode) + (groupsPath == null ? 0 : System.hashCode(groupsPath));
        hashCode = (17 * hashCode) + (systemRelativePath == null ? 0 : System.hashCode(systemRelativePath));
        hashCode = (17 * hashCode) + (defaultDepth == null ? 0 : System.hashCode(defaultDepth));
        hashCode = (17 * hashCode) + (importBehavior == null ? 0 : System.hashCode(importBehavior));
        hashCode = (17 * hashCode) + (passwordHashAlgorithm == null ? 0 : System.hashCode(passwordHashAlgorithm));
        hashCode = (17 * hashCode) + (passwordHashIterations == null ? 0 : System.hashCode(passwordHashIterations));
        hashCode = (17 * hashCode) + (passwordSaltSize == null ? 0 : System.hashCode(passwordSaltSize));
        hashCode = (17 * hashCode) + (omitAdminPw == null ? 0 : System.hashCode(omitAdminPw));
        hashCode = (17 * hashCode) + (supportAutoSave == null ? 0 : System.hashCode(supportAutoSave));
        hashCode = (17 * hashCode) + (passwordMaxAge == null ? 0 : System.hashCode(passwordMaxAge));
        hashCode = (17 * hashCode) + (initialPasswordChange == null ? 0 : System.hashCode(initialPasswordChange));
        hashCode = (17 * hashCode) + (passwordHistorySize == null ? 0 : System.hashCode(passwordHistorySize));
        hashCode = (17 * hashCode) + (passwordExpiryForAdmin == null ? 0 : System.hashCode(passwordExpiryForAdmin));
        hashCode = (17 * hashCode) + (cacheExpiration == null ? 0 : System.hashCode(cacheExpiration));
        hashCode = (17 * hashCode) + (enableRFC7613UsercaseMappedProfile == null ? 0 : System.hashCode(enableRFC7613UsercaseMappedProfile));
        return hashCode;
    }
}

