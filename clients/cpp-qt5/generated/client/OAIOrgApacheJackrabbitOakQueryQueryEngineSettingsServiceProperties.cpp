/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIOrgApacheJackrabbitOakQueryQueryEngineSettingsServiceProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIOrgApacheJackrabbitOakQueryQueryEngineSettingsServiceProperties::OAIOrgApacheJackrabbitOakQueryQueryEngineSettingsServiceProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIOrgApacheJackrabbitOakQueryQueryEngineSettingsServiceProperties::OAIOrgApacheJackrabbitOakQueryQueryEngineSettingsServiceProperties() {
    init();
}

OAIOrgApacheJackrabbitOakQueryQueryEngineSettingsServiceProperties::~OAIOrgApacheJackrabbitOakQueryQueryEngineSettingsServiceProperties() {
    this->cleanup();
}

void
OAIOrgApacheJackrabbitOakQueryQueryEngineSettingsServiceProperties::init() {
    query_limit_in_memory = new OAIConfigNodePropertyInteger();
    m_query_limit_in_memory_isSet = false;
    query_limit_reads = new OAIConfigNodePropertyInteger();
    m_query_limit_reads_isSet = false;
    query_fail_traversal = new OAIConfigNodePropertyBoolean();
    m_query_fail_traversal_isSet = false;
    fast_query_size = new OAIConfigNodePropertyBoolean();
    m_fast_query_size_isSet = false;
}

void
OAIOrgApacheJackrabbitOakQueryQueryEngineSettingsServiceProperties::cleanup() {
    if(query_limit_in_memory != nullptr) { 
        delete query_limit_in_memory;
    }
    if(query_limit_reads != nullptr) { 
        delete query_limit_reads;
    }
    if(query_fail_traversal != nullptr) { 
        delete query_fail_traversal;
    }
    if(fast_query_size != nullptr) { 
        delete fast_query_size;
    }
}

OAIOrgApacheJackrabbitOakQueryQueryEngineSettingsServiceProperties*
OAIOrgApacheJackrabbitOakQueryQueryEngineSettingsServiceProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIOrgApacheJackrabbitOakQueryQueryEngineSettingsServiceProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&query_limit_in_memory, pJson["queryLimitInMemory"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&query_limit_reads, pJson["queryLimitReads"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&query_fail_traversal, pJson["queryFailTraversal"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&fast_query_size, pJson["fastQuerySize"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
}

QString
OAIOrgApacheJackrabbitOakQueryQueryEngineSettingsServiceProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIOrgApacheJackrabbitOakQueryQueryEngineSettingsServiceProperties::asJsonObject() {
    QJsonObject obj;
    if((query_limit_in_memory != nullptr) && (query_limit_in_memory->isSet())){
        toJsonValue(QString("queryLimitInMemory"), query_limit_in_memory, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((query_limit_reads != nullptr) && (query_limit_reads->isSet())){
        toJsonValue(QString("queryLimitReads"), query_limit_reads, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((query_fail_traversal != nullptr) && (query_fail_traversal->isSet())){
        toJsonValue(QString("queryFailTraversal"), query_fail_traversal, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((fast_query_size != nullptr) && (fast_query_size->isSet())){
        toJsonValue(QString("fastQuerySize"), fast_query_size, obj, QString("OAIConfigNodePropertyBoolean"));
    }

    return obj;
}

OAIConfigNodePropertyInteger*
OAIOrgApacheJackrabbitOakQueryQueryEngineSettingsServiceProperties::getQueryLimitInMemory() {
    return query_limit_in_memory;
}
void
OAIOrgApacheJackrabbitOakQueryQueryEngineSettingsServiceProperties::setQueryLimitInMemory(OAIConfigNodePropertyInteger* query_limit_in_memory) {
    this->query_limit_in_memory = query_limit_in_memory;
    this->m_query_limit_in_memory_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIOrgApacheJackrabbitOakQueryQueryEngineSettingsServiceProperties::getQueryLimitReads() {
    return query_limit_reads;
}
void
OAIOrgApacheJackrabbitOakQueryQueryEngineSettingsServiceProperties::setQueryLimitReads(OAIConfigNodePropertyInteger* query_limit_reads) {
    this->query_limit_reads = query_limit_reads;
    this->m_query_limit_reads_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIOrgApacheJackrabbitOakQueryQueryEngineSettingsServiceProperties::getQueryFailTraversal() {
    return query_fail_traversal;
}
void
OAIOrgApacheJackrabbitOakQueryQueryEngineSettingsServiceProperties::setQueryFailTraversal(OAIConfigNodePropertyBoolean* query_fail_traversal) {
    this->query_fail_traversal = query_fail_traversal;
    this->m_query_fail_traversal_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIOrgApacheJackrabbitOakQueryQueryEngineSettingsServiceProperties::getFastQuerySize() {
    return fast_query_size;
}
void
OAIOrgApacheJackrabbitOakQueryQueryEngineSettingsServiceProperties::setFastQuerySize(OAIConfigNodePropertyBoolean* fast_query_size) {
    this->fast_query_size = fast_query_size;
    this->m_fast_query_size_isSet = true;
}


bool
OAIOrgApacheJackrabbitOakQueryQueryEngineSettingsServiceProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(query_limit_in_memory != nullptr && query_limit_in_memory->isSet()){ isObjectUpdated = true; break;}
        if(query_limit_reads != nullptr && query_limit_reads->isSet()){ isObjectUpdated = true; break;}
        if(query_fail_traversal != nullptr && query_fail_traversal->isSet()){ isObjectUpdated = true; break;}
        if(fast_query_size != nullptr && fast_query_size->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

