/*
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ComDayCqDamCoreImplExpiryNotificationJobImplProperties : IEquatable<ComDayCqDamCoreImplExpiryNotificationJobImplProperties>
    { 
        /// <summary>
        /// Gets or Sets CqDamExpiryNotificationSchedulerIstimebased
        /// </summary>
        [DataMember(Name="cq.dam.expiry.notification.scheduler.istimebased")]
        public ConfigNodePropertyBoolean CqDamExpiryNotificationSchedulerIstimebased { get; set; }

        /// <summary>
        /// Gets or Sets CqDamExpiryNotificationSchedulerTimebasedRule
        /// </summary>
        [DataMember(Name="cq.dam.expiry.notification.scheduler.timebased.rule")]
        public ConfigNodePropertyString CqDamExpiryNotificationSchedulerTimebasedRule { get; set; }

        /// <summary>
        /// Gets or Sets CqDamExpiryNotificationSchedulerPeriodRule
        /// </summary>
        [DataMember(Name="cq.dam.expiry.notification.scheduler.period.rule")]
        public ConfigNodePropertyInteger CqDamExpiryNotificationSchedulerPeriodRule { get; set; }

        /// <summary>
        /// Gets or Sets SendEmail
        /// </summary>
        [DataMember(Name="send_email")]
        public ConfigNodePropertyBoolean SendEmail { get; set; }

        /// <summary>
        /// Gets or Sets AssetExpiredLimit
        /// </summary>
        [DataMember(Name="asset_expired_limit")]
        public ConfigNodePropertyInteger AssetExpiredLimit { get; set; }

        /// <summary>
        /// Gets or Sets PriorNotificationSeconds
        /// </summary>
        [DataMember(Name="prior_notification_seconds")]
        public ConfigNodePropertyInteger PriorNotificationSeconds { get; set; }

        /// <summary>
        /// Gets or Sets CqDamExpiryNotificationUrlProtocol
        /// </summary>
        [DataMember(Name="cq.dam.expiry.notification.url.protocol")]
        public ConfigNodePropertyString CqDamExpiryNotificationUrlProtocol { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ComDayCqDamCoreImplExpiryNotificationJobImplProperties {\n");
            sb.Append("  CqDamExpiryNotificationSchedulerIstimebased: ").Append(CqDamExpiryNotificationSchedulerIstimebased).Append("\n");
            sb.Append("  CqDamExpiryNotificationSchedulerTimebasedRule: ").Append(CqDamExpiryNotificationSchedulerTimebasedRule).Append("\n");
            sb.Append("  CqDamExpiryNotificationSchedulerPeriodRule: ").Append(CqDamExpiryNotificationSchedulerPeriodRule).Append("\n");
            sb.Append("  SendEmail: ").Append(SendEmail).Append("\n");
            sb.Append("  AssetExpiredLimit: ").Append(AssetExpiredLimit).Append("\n");
            sb.Append("  PriorNotificationSeconds: ").Append(PriorNotificationSeconds).Append("\n");
            sb.Append("  CqDamExpiryNotificationUrlProtocol: ").Append(CqDamExpiryNotificationUrlProtocol).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ComDayCqDamCoreImplExpiryNotificationJobImplProperties)obj);
        }

        /// <summary>
        /// Returns true if ComDayCqDamCoreImplExpiryNotificationJobImplProperties instances are equal
        /// </summary>
        /// <param name="other">Instance of ComDayCqDamCoreImplExpiryNotificationJobImplProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComDayCqDamCoreImplExpiryNotificationJobImplProperties other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    CqDamExpiryNotificationSchedulerIstimebased == other.CqDamExpiryNotificationSchedulerIstimebased ||
                    CqDamExpiryNotificationSchedulerIstimebased != null &&
                    CqDamExpiryNotificationSchedulerIstimebased.Equals(other.CqDamExpiryNotificationSchedulerIstimebased)
                ) && 
                (
                    CqDamExpiryNotificationSchedulerTimebasedRule == other.CqDamExpiryNotificationSchedulerTimebasedRule ||
                    CqDamExpiryNotificationSchedulerTimebasedRule != null &&
                    CqDamExpiryNotificationSchedulerTimebasedRule.Equals(other.CqDamExpiryNotificationSchedulerTimebasedRule)
                ) && 
                (
                    CqDamExpiryNotificationSchedulerPeriodRule == other.CqDamExpiryNotificationSchedulerPeriodRule ||
                    CqDamExpiryNotificationSchedulerPeriodRule != null &&
                    CqDamExpiryNotificationSchedulerPeriodRule.Equals(other.CqDamExpiryNotificationSchedulerPeriodRule)
                ) && 
                (
                    SendEmail == other.SendEmail ||
                    SendEmail != null &&
                    SendEmail.Equals(other.SendEmail)
                ) && 
                (
                    AssetExpiredLimit == other.AssetExpiredLimit ||
                    AssetExpiredLimit != null &&
                    AssetExpiredLimit.Equals(other.AssetExpiredLimit)
                ) && 
                (
                    PriorNotificationSeconds == other.PriorNotificationSeconds ||
                    PriorNotificationSeconds != null &&
                    PriorNotificationSeconds.Equals(other.PriorNotificationSeconds)
                ) && 
                (
                    CqDamExpiryNotificationUrlProtocol == other.CqDamExpiryNotificationUrlProtocol ||
                    CqDamExpiryNotificationUrlProtocol != null &&
                    CqDamExpiryNotificationUrlProtocol.Equals(other.CqDamExpiryNotificationUrlProtocol)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (CqDamExpiryNotificationSchedulerIstimebased != null)
                    hashCode = hashCode * 59 + CqDamExpiryNotificationSchedulerIstimebased.GetHashCode();
                    if (CqDamExpiryNotificationSchedulerTimebasedRule != null)
                    hashCode = hashCode * 59 + CqDamExpiryNotificationSchedulerTimebasedRule.GetHashCode();
                    if (CqDamExpiryNotificationSchedulerPeriodRule != null)
                    hashCode = hashCode * 59 + CqDamExpiryNotificationSchedulerPeriodRule.GetHashCode();
                    if (SendEmail != null)
                    hashCode = hashCode * 59 + SendEmail.GetHashCode();
                    if (AssetExpiredLimit != null)
                    hashCode = hashCode * 59 + AssetExpiredLimit.GetHashCode();
                    if (PriorNotificationSeconds != null)
                    hashCode = hashCode * 59 + PriorNotificationSeconds.GetHashCode();
                    if (CqDamExpiryNotificationUrlProtocol != null)
                    hashCode = hashCode * 59 + CqDamExpiryNotificationUrlProtocol.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ComDayCqDamCoreImplExpiryNotificationJobImplProperties left, ComDayCqDamCoreImplExpiryNotificationJobImplProperties right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ComDayCqDamCoreImplExpiryNotificationJobImplProperties left, ComDayCqDamCoreImplExpiryNotificationJobImplProperties right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
