/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIOrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIOrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties::OAIOrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIOrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties::OAIOrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties() {
    init();
}

OAIOrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties::~OAIOrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties() {
    this->cleanup();
}

void
OAIOrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties::init() {
    token_expiration = new OAIConfigNodePropertyString();
    m_token_expiration_isSet = false;
    token_length = new OAIConfigNodePropertyString();
    m_token_length_isSet = false;
    token_refresh = new OAIConfigNodePropertyBoolean();
    m_token_refresh_isSet = false;
    token_cleanup_threshold = new OAIConfigNodePropertyInteger();
    m_token_cleanup_threshold_isSet = false;
    password_hash_algorithm = new OAIConfigNodePropertyString();
    m_password_hash_algorithm_isSet = false;
    password_hash_iterations = new OAIConfigNodePropertyInteger();
    m_password_hash_iterations_isSet = false;
    password_salt_size = new OAIConfigNodePropertyInteger();
    m_password_salt_size_isSet = false;
}

void
OAIOrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties::cleanup() {
    if(token_expiration != nullptr) { 
        delete token_expiration;
    }
    if(token_length != nullptr) { 
        delete token_length;
    }
    if(token_refresh != nullptr) { 
        delete token_refresh;
    }
    if(token_cleanup_threshold != nullptr) { 
        delete token_cleanup_threshold;
    }
    if(password_hash_algorithm != nullptr) { 
        delete password_hash_algorithm;
    }
    if(password_hash_iterations != nullptr) { 
        delete password_hash_iterations;
    }
    if(password_salt_size != nullptr) { 
        delete password_salt_size;
    }
}

OAIOrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties*
OAIOrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIOrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&token_expiration, pJson["tokenExpiration"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&token_length, pJson["tokenLength"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&token_refresh, pJson["tokenRefresh"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&token_cleanup_threshold, pJson["tokenCleanupThreshold"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&password_hash_algorithm, pJson["passwordHashAlgorithm"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&password_hash_iterations, pJson["passwordHashIterations"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&password_salt_size, pJson["passwordSaltSize"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
}

QString
OAIOrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIOrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties::asJsonObject() {
    QJsonObject obj;
    if((token_expiration != nullptr) && (token_expiration->isSet())){
        toJsonValue(QString("tokenExpiration"), token_expiration, obj, QString("OAIConfigNodePropertyString"));
    }
    if((token_length != nullptr) && (token_length->isSet())){
        toJsonValue(QString("tokenLength"), token_length, obj, QString("OAIConfigNodePropertyString"));
    }
    if((token_refresh != nullptr) && (token_refresh->isSet())){
        toJsonValue(QString("tokenRefresh"), token_refresh, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((token_cleanup_threshold != nullptr) && (token_cleanup_threshold->isSet())){
        toJsonValue(QString("tokenCleanupThreshold"), token_cleanup_threshold, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((password_hash_algorithm != nullptr) && (password_hash_algorithm->isSet())){
        toJsonValue(QString("passwordHashAlgorithm"), password_hash_algorithm, obj, QString("OAIConfigNodePropertyString"));
    }
    if((password_hash_iterations != nullptr) && (password_hash_iterations->isSet())){
        toJsonValue(QString("passwordHashIterations"), password_hash_iterations, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((password_salt_size != nullptr) && (password_salt_size->isSet())){
        toJsonValue(QString("passwordSaltSize"), password_salt_size, obj, QString("OAIConfigNodePropertyInteger"));
    }

    return obj;
}

OAIConfigNodePropertyString*
OAIOrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties::getTokenExpiration() {
    return token_expiration;
}
void
OAIOrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties::setTokenExpiration(OAIConfigNodePropertyString* token_expiration) {
    this->token_expiration = token_expiration;
    this->m_token_expiration_isSet = true;
}

OAIConfigNodePropertyString*
OAIOrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties::getTokenLength() {
    return token_length;
}
void
OAIOrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties::setTokenLength(OAIConfigNodePropertyString* token_length) {
    this->token_length = token_length;
    this->m_token_length_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIOrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties::getTokenRefresh() {
    return token_refresh;
}
void
OAIOrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties::setTokenRefresh(OAIConfigNodePropertyBoolean* token_refresh) {
    this->token_refresh = token_refresh;
    this->m_token_refresh_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIOrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties::getTokenCleanupThreshold() {
    return token_cleanup_threshold;
}
void
OAIOrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties::setTokenCleanupThreshold(OAIConfigNodePropertyInteger* token_cleanup_threshold) {
    this->token_cleanup_threshold = token_cleanup_threshold;
    this->m_token_cleanup_threshold_isSet = true;
}

OAIConfigNodePropertyString*
OAIOrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties::getPasswordHashAlgorithm() {
    return password_hash_algorithm;
}
void
OAIOrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties::setPasswordHashAlgorithm(OAIConfigNodePropertyString* password_hash_algorithm) {
    this->password_hash_algorithm = password_hash_algorithm;
    this->m_password_hash_algorithm_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIOrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties::getPasswordHashIterations() {
    return password_hash_iterations;
}
void
OAIOrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties::setPasswordHashIterations(OAIConfigNodePropertyInteger* password_hash_iterations) {
    this->password_hash_iterations = password_hash_iterations;
    this->m_password_hash_iterations_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIOrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties::getPasswordSaltSize() {
    return password_salt_size;
}
void
OAIOrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties::setPasswordSaltSize(OAIConfigNodePropertyInteger* password_salt_size) {
    this->password_salt_size = password_salt_size;
    this->m_password_salt_size_isSet = true;
}


bool
OAIOrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(token_expiration != nullptr && token_expiration->isSet()){ isObjectUpdated = true; break;}
        if(token_length != nullptr && token_length->isSet()){ isObjectUpdated = true; break;}
        if(token_refresh != nullptr && token_refresh->isSet()){ isObjectUpdated = true; break;}
        if(token_cleanup_threshold != nullptr && token_cleanup_threshold->isSet()){ isObjectUpdated = true; break;}
        if(password_hash_algorithm != nullptr && password_hash_algorithm->isSet()){ isObjectUpdated = true; break;}
        if(password_hash_iterations != nullptr && password_hash_iterations->isSet()){ isObjectUpdated = true; break;}
        if(password_salt_size != nullptr && password_salt_size->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

