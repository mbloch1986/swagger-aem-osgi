/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckProperties
    /// </summary>
    [DataContract]
    public partial class ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckProperties :  IEquatable<ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckProperties>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckProperties" /> class.
        /// </summary>
        /// <param name="hcTags">hcTags.</param>
        /// <param name="dispatcherAddress">dispatcherAddress.</param>
        /// <param name="dispatcherFilterAllowed">dispatcherFilterAllowed.</param>
        /// <param name="dispatcherFilterBlocked">dispatcherFilterBlocked.</param>
        public ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckProperties(ConfigNodePropertyArray hcTags = default(ConfigNodePropertyArray), ConfigNodePropertyString dispatcherAddress = default(ConfigNodePropertyString), ConfigNodePropertyArray dispatcherFilterAllowed = default(ConfigNodePropertyArray), ConfigNodePropertyArray dispatcherFilterBlocked = default(ConfigNodePropertyArray))
        {
            this.HcTags = hcTags;
            this.DispatcherAddress = dispatcherAddress;
            this.DispatcherFilterAllowed = dispatcherFilterAllowed;
            this.DispatcherFilterBlocked = dispatcherFilterBlocked;
        }
        
        /// <summary>
        /// Gets or Sets HcTags
        /// </summary>
        [DataMember(Name="hc.tags", EmitDefaultValue=false)]
        public ConfigNodePropertyArray HcTags { get; set; }

        /// <summary>
        /// Gets or Sets DispatcherAddress
        /// </summary>
        [DataMember(Name="dispatcher.address", EmitDefaultValue=false)]
        public ConfigNodePropertyString DispatcherAddress { get; set; }

        /// <summary>
        /// Gets or Sets DispatcherFilterAllowed
        /// </summary>
        [DataMember(Name="dispatcher.filter.allowed", EmitDefaultValue=false)]
        public ConfigNodePropertyArray DispatcherFilterAllowed { get; set; }

        /// <summary>
        /// Gets or Sets DispatcherFilterBlocked
        /// </summary>
        [DataMember(Name="dispatcher.filter.blocked", EmitDefaultValue=false)]
        public ConfigNodePropertyArray DispatcherFilterBlocked { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckProperties {\n");
            sb.Append("  HcTags: ").Append(HcTags).Append("\n");
            sb.Append("  DispatcherAddress: ").Append(DispatcherAddress).Append("\n");
            sb.Append("  DispatcherFilterAllowed: ").Append(DispatcherFilterAllowed).Append("\n");
            sb.Append("  DispatcherFilterBlocked: ").Append(DispatcherFilterBlocked).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckProperties);
        }

        /// <summary>
        /// Returns true if ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckProperties input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.HcTags == input.HcTags ||
                    (this.HcTags != null &&
                    this.HcTags.Equals(input.HcTags))
                ) && 
                (
                    this.DispatcherAddress == input.DispatcherAddress ||
                    (this.DispatcherAddress != null &&
                    this.DispatcherAddress.Equals(input.DispatcherAddress))
                ) && 
                (
                    this.DispatcherFilterAllowed == input.DispatcherFilterAllowed ||
                    (this.DispatcherFilterAllowed != null &&
                    this.DispatcherFilterAllowed.Equals(input.DispatcherFilterAllowed))
                ) && 
                (
                    this.DispatcherFilterBlocked == input.DispatcherFilterBlocked ||
                    (this.DispatcherFilterBlocked != null &&
                    this.DispatcherFilterBlocked.Equals(input.DispatcherFilterBlocked))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.HcTags != null)
                    hashCode = hashCode * 59 + this.HcTags.GetHashCode();
                if (this.DispatcherAddress != null)
                    hashCode = hashCode * 59 + this.DispatcherAddress.GetHashCode();
                if (this.DispatcherFilterAllowed != null)
                    hashCode = hashCode * 59 + this.DispatcherFilterAllowed.GetHashCode();
                if (this.DispatcherFilterBlocked != null)
                    hashCode = hashCode * 59 + this.DispatcherFilterBlocked.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
