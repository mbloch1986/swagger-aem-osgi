/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviProperties {
  #[serde(rename = "description")]
  description: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "overrides")]
  overrides: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "enabled")]
  enabled: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "service.ranking")]
  service_ranking: Option<::models::ConfigNodePropertyInteger>
}

impl OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviProperties {
  pub fn new() -> OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviProperties {
    OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviProperties {
      description: None,
      overrides: None,
      enabled: None,
      service_ranking: None
    }
  }

  pub fn set_description(&mut self, description: ::models::ConfigNodePropertyString) {
    self.description = Some(description);
  }

  pub fn with_description(mut self, description: ::models::ConfigNodePropertyString) -> OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviProperties {
    self.description = Some(description);
    self
  }

  pub fn description(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.description.as_ref()
  }

  pub fn reset_description(&mut self) {
    self.description = None;
  }

  pub fn set_overrides(&mut self, overrides: ::models::ConfigNodePropertyArray) {
    self.overrides = Some(overrides);
  }

  pub fn with_overrides(mut self, overrides: ::models::ConfigNodePropertyArray) -> OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviProperties {
    self.overrides = Some(overrides);
    self
  }

  pub fn overrides(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.overrides.as_ref()
  }

  pub fn reset_overrides(&mut self) {
    self.overrides = None;
  }

  pub fn set_enabled(&mut self, enabled: ::models::ConfigNodePropertyBoolean) {
    self.enabled = Some(enabled);
  }

  pub fn with_enabled(mut self, enabled: ::models::ConfigNodePropertyBoolean) -> OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviProperties {
    self.enabled = Some(enabled);
    self
  }

  pub fn enabled(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.enabled.as_ref()
  }

  pub fn reset_enabled(&mut self) {
    self.enabled = None;
  }

  pub fn set_service_ranking(&mut self, service_ranking: ::models::ConfigNodePropertyInteger) {
    self.service_ranking = Some(service_ranking);
  }

  pub fn with_service_ranking(mut self, service_ranking: ::models::ConfigNodePropertyInteger) -> OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviProperties {
    self.service_ranking = Some(service_ranking);
    self
  }

  pub fn service_ranking(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.service_ranking.as_ref()
  }

  pub fn reset_service_ranking(&mut self) {
    self.service_ranking = None;
  }

}



