/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerProperties::ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerProperties()
{
    m_Payload_move_white_listIsSet = false;
    m_Payload_move_handle_from_workflow_processIsSet = false;
}

ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerProperties::~ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerProperties()
{
}

void ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Payload_move_white_listIsSet)
    {
        val[utility::conversions::to_string_t("payload.move.white.list")] = ModelBase::toJson(m_Payload_move_white_list);
    }
    if(m_Payload_move_handle_from_workflow_processIsSet)
    {
        val[utility::conversions::to_string_t("payload.move.handle.from.workflow.process")] = ModelBase::toJson(m_Payload_move_handle_from_workflow_process);
    }

    return val;
}

void ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("payload.move.white.list")))
    {
        if(!val[utility::conversions::to_string_t("payload.move.white.list")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("payload.move.white.list")]);
            setPayloadMoveWhiteList( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("payload.move.handle.from.workflow.process")))
    {
        if(!val[utility::conversions::to_string_t("payload.move.handle.from.workflow.process")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("payload.move.handle.from.workflow.process")]);
            setPayloadMoveHandleFromWorkflowProcess( newItem );
        }
    }
}

void ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Payload_move_white_listIsSet)
    {
        if (m_Payload_move_white_list.get())
        {
            m_Payload_move_white_list->toMultipart(multipart, utility::conversions::to_string_t("payload.move.white.list."));
        }
    }
    if(m_Payload_move_handle_from_workflow_processIsSet)
    {
        if (m_Payload_move_handle_from_workflow_process.get())
        {
            m_Payload_move_handle_from_workflow_process->toMultipart(multipart, utility::conversions::to_string_t("payload.move.handle.from.workflow.process."));
        }
    }
}

void ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("payload.move.white.list")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("payload.move.white.list")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("payload.move.white.list."));
            setPayloadMoveWhiteList( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("payload.move.handle.from.workflow.process")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("payload.move.handle.from.workflow.process")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("payload.move.handle.from.workflow.process."));
            setPayloadMoveHandleFromWorkflowProcess( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyArray> ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerProperties::getPayloadMoveWhiteList() const
{
    return m_Payload_move_white_list;
}


void ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerProperties::setPayloadMoveWhiteList(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Payload_move_white_list = value;
    m_Payload_move_white_listIsSet = true;
}
bool ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerProperties::payloadMoveWhiteListIsSet() const
{
    return m_Payload_move_white_listIsSet;
}

void ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerProperties::unsetPayload_move_white_list()
{
    m_Payload_move_white_listIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerProperties::getPayloadMoveHandleFromWorkflowProcess() const
{
    return m_Payload_move_handle_from_workflow_process;
}


void ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerProperties::setPayloadMoveHandleFromWorkflowProcess(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Payload_move_handle_from_workflow_process = value;
    m_Payload_move_handle_from_workflow_processIsSet = true;
}
bool ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerProperties::payloadMoveHandleFromWorkflowProcessIsSet() const
{
    return m_Payload_move_handle_from_workflow_processIsSet;
}

void ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerProperties::unsetPayload_move_handle_from_workflow_process()
{
    m_Payload_move_handle_from_workflow_processIsSet = false;
}

}
}
}
}

