/*
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties : IEquatable<ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties>
    { 
        /// <summary>
        /// Gets or Sets GraniteWorkflowinboxSortPropertyName
        /// </summary>
        [DataMember(Name="granite.workflowinbox.sort.propertyName")]
        public ConfigNodePropertyDropDown GraniteWorkflowinboxSortPropertyName { get; set; }

        /// <summary>
        /// Gets or Sets GraniteWorkflowinboxSortOrder
        /// </summary>
        [DataMember(Name="granite.workflowinbox.sort.order")]
        public ConfigNodePropertyString GraniteWorkflowinboxSortOrder { get; set; }

        /// <summary>
        /// Gets or Sets CqWorkflowJobRetry
        /// </summary>
        [DataMember(Name="cq.workflow.job.retry")]
        public ConfigNodePropertyInteger CqWorkflowJobRetry { get; set; }

        /// <summary>
        /// Gets or Sets CqWorkflowSuperuser
        /// </summary>
        [DataMember(Name="cq.workflow.superuser")]
        public ConfigNodePropertyArray CqWorkflowSuperuser { get; set; }

        /// <summary>
        /// Gets or Sets GraniteWorkflowInboxQuerySize
        /// </summary>
        [DataMember(Name="granite.workflow.inboxQuerySize")]
        public ConfigNodePropertyInteger GraniteWorkflowInboxQuerySize { get; set; }

        /// <summary>
        /// Gets or Sets GraniteWorkflowAdminUserGroupFilter
        /// </summary>
        [DataMember(Name="granite.workflow.adminUserGroupFilter")]
        public ConfigNodePropertyBoolean GraniteWorkflowAdminUserGroupFilter { get; set; }

        /// <summary>
        /// Gets or Sets GraniteWorkflowEnforceWorkitemAssigneePermissions
        /// </summary>
        [DataMember(Name="granite.workflow.enforceWorkitemAssigneePermissions")]
        public ConfigNodePropertyBoolean GraniteWorkflowEnforceWorkitemAssigneePermissions { get; set; }

        /// <summary>
        /// Gets or Sets GraniteWorkflowEnforceWorkflowInitiatorPermissions
        /// </summary>
        [DataMember(Name="granite.workflow.enforceWorkflowInitiatorPermissions")]
        public ConfigNodePropertyBoolean GraniteWorkflowEnforceWorkflowInitiatorPermissions { get; set; }

        /// <summary>
        /// Gets or Sets GraniteWorkflowInjectTenantIdInJobTopics
        /// </summary>
        [DataMember(Name="granite.workflow.injectTenantIdInJobTopics")]
        public ConfigNodePropertyBoolean GraniteWorkflowInjectTenantIdInJobTopics { get; set; }

        /// <summary>
        /// Gets or Sets GraniteWorkflowMaxPurgeSaveThreshold
        /// </summary>
        [DataMember(Name="granite.workflow.maxPurgeSaveThreshold")]
        public ConfigNodePropertyInteger GraniteWorkflowMaxPurgeSaveThreshold { get; set; }

        /// <summary>
        /// Gets or Sets GraniteWorkflowMaxPurgeQueryCount
        /// </summary>
        [DataMember(Name="granite.workflow.maxPurgeQueryCount")]
        public ConfigNodePropertyInteger GraniteWorkflowMaxPurgeQueryCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties {\n");
            sb.Append("  GraniteWorkflowinboxSortPropertyName: ").Append(GraniteWorkflowinboxSortPropertyName).Append("\n");
            sb.Append("  GraniteWorkflowinboxSortOrder: ").Append(GraniteWorkflowinboxSortOrder).Append("\n");
            sb.Append("  CqWorkflowJobRetry: ").Append(CqWorkflowJobRetry).Append("\n");
            sb.Append("  CqWorkflowSuperuser: ").Append(CqWorkflowSuperuser).Append("\n");
            sb.Append("  GraniteWorkflowInboxQuerySize: ").Append(GraniteWorkflowInboxQuerySize).Append("\n");
            sb.Append("  GraniteWorkflowAdminUserGroupFilter: ").Append(GraniteWorkflowAdminUserGroupFilter).Append("\n");
            sb.Append("  GraniteWorkflowEnforceWorkitemAssigneePermissions: ").Append(GraniteWorkflowEnforceWorkitemAssigneePermissions).Append("\n");
            sb.Append("  GraniteWorkflowEnforceWorkflowInitiatorPermissions: ").Append(GraniteWorkflowEnforceWorkflowInitiatorPermissions).Append("\n");
            sb.Append("  GraniteWorkflowInjectTenantIdInJobTopics: ").Append(GraniteWorkflowInjectTenantIdInJobTopics).Append("\n");
            sb.Append("  GraniteWorkflowMaxPurgeSaveThreshold: ").Append(GraniteWorkflowMaxPurgeSaveThreshold).Append("\n");
            sb.Append("  GraniteWorkflowMaxPurgeQueryCount: ").Append(GraniteWorkflowMaxPurgeQueryCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties)obj);
        }

        /// <summary>
        /// Returns true if ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties instances are equal
        /// </summary>
        /// <param name="other">Instance of ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    GraniteWorkflowinboxSortPropertyName == other.GraniteWorkflowinboxSortPropertyName ||
                    GraniteWorkflowinboxSortPropertyName != null &&
                    GraniteWorkflowinboxSortPropertyName.Equals(other.GraniteWorkflowinboxSortPropertyName)
                ) && 
                (
                    GraniteWorkflowinboxSortOrder == other.GraniteWorkflowinboxSortOrder ||
                    GraniteWorkflowinboxSortOrder != null &&
                    GraniteWorkflowinboxSortOrder.Equals(other.GraniteWorkflowinboxSortOrder)
                ) && 
                (
                    CqWorkflowJobRetry == other.CqWorkflowJobRetry ||
                    CqWorkflowJobRetry != null &&
                    CqWorkflowJobRetry.Equals(other.CqWorkflowJobRetry)
                ) && 
                (
                    CqWorkflowSuperuser == other.CqWorkflowSuperuser ||
                    CqWorkflowSuperuser != null &&
                    CqWorkflowSuperuser.Equals(other.CqWorkflowSuperuser)
                ) && 
                (
                    GraniteWorkflowInboxQuerySize == other.GraniteWorkflowInboxQuerySize ||
                    GraniteWorkflowInboxQuerySize != null &&
                    GraniteWorkflowInboxQuerySize.Equals(other.GraniteWorkflowInboxQuerySize)
                ) && 
                (
                    GraniteWorkflowAdminUserGroupFilter == other.GraniteWorkflowAdminUserGroupFilter ||
                    GraniteWorkflowAdminUserGroupFilter != null &&
                    GraniteWorkflowAdminUserGroupFilter.Equals(other.GraniteWorkflowAdminUserGroupFilter)
                ) && 
                (
                    GraniteWorkflowEnforceWorkitemAssigneePermissions == other.GraniteWorkflowEnforceWorkitemAssigneePermissions ||
                    GraniteWorkflowEnforceWorkitemAssigneePermissions != null &&
                    GraniteWorkflowEnforceWorkitemAssigneePermissions.Equals(other.GraniteWorkflowEnforceWorkitemAssigneePermissions)
                ) && 
                (
                    GraniteWorkflowEnforceWorkflowInitiatorPermissions == other.GraniteWorkflowEnforceWorkflowInitiatorPermissions ||
                    GraniteWorkflowEnforceWorkflowInitiatorPermissions != null &&
                    GraniteWorkflowEnforceWorkflowInitiatorPermissions.Equals(other.GraniteWorkflowEnforceWorkflowInitiatorPermissions)
                ) && 
                (
                    GraniteWorkflowInjectTenantIdInJobTopics == other.GraniteWorkflowInjectTenantIdInJobTopics ||
                    GraniteWorkflowInjectTenantIdInJobTopics != null &&
                    GraniteWorkflowInjectTenantIdInJobTopics.Equals(other.GraniteWorkflowInjectTenantIdInJobTopics)
                ) && 
                (
                    GraniteWorkflowMaxPurgeSaveThreshold == other.GraniteWorkflowMaxPurgeSaveThreshold ||
                    GraniteWorkflowMaxPurgeSaveThreshold != null &&
                    GraniteWorkflowMaxPurgeSaveThreshold.Equals(other.GraniteWorkflowMaxPurgeSaveThreshold)
                ) && 
                (
                    GraniteWorkflowMaxPurgeQueryCount == other.GraniteWorkflowMaxPurgeQueryCount ||
                    GraniteWorkflowMaxPurgeQueryCount != null &&
                    GraniteWorkflowMaxPurgeQueryCount.Equals(other.GraniteWorkflowMaxPurgeQueryCount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (GraniteWorkflowinboxSortPropertyName != null)
                    hashCode = hashCode * 59 + GraniteWorkflowinboxSortPropertyName.GetHashCode();
                    if (GraniteWorkflowinboxSortOrder != null)
                    hashCode = hashCode * 59 + GraniteWorkflowinboxSortOrder.GetHashCode();
                    if (CqWorkflowJobRetry != null)
                    hashCode = hashCode * 59 + CqWorkflowJobRetry.GetHashCode();
                    if (CqWorkflowSuperuser != null)
                    hashCode = hashCode * 59 + CqWorkflowSuperuser.GetHashCode();
                    if (GraniteWorkflowInboxQuerySize != null)
                    hashCode = hashCode * 59 + GraniteWorkflowInboxQuerySize.GetHashCode();
                    if (GraniteWorkflowAdminUserGroupFilter != null)
                    hashCode = hashCode * 59 + GraniteWorkflowAdminUserGroupFilter.GetHashCode();
                    if (GraniteWorkflowEnforceWorkitemAssigneePermissions != null)
                    hashCode = hashCode * 59 + GraniteWorkflowEnforceWorkitemAssigneePermissions.GetHashCode();
                    if (GraniteWorkflowEnforceWorkflowInitiatorPermissions != null)
                    hashCode = hashCode * 59 + GraniteWorkflowEnforceWorkflowInitiatorPermissions.GetHashCode();
                    if (GraniteWorkflowInjectTenantIdInJobTopics != null)
                    hashCode = hashCode * 59 + GraniteWorkflowInjectTenantIdInJobTopics.GetHashCode();
                    if (GraniteWorkflowMaxPurgeSaveThreshold != null)
                    hashCode = hashCode * 59 + GraniteWorkflowMaxPurgeSaveThreshold.GetHashCode();
                    if (GraniteWorkflowMaxPurgeQueryCount != null)
                    hashCode = hashCode * 59 + GraniteWorkflowMaxPurgeQueryCount.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties left, ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties left, ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
