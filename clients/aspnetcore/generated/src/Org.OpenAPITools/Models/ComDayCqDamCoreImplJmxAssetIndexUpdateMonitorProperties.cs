/*
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorProperties : IEquatable<ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorProperties>
    { 
        /// <summary>
        /// Gets or Sets JmxObjectname
        /// </summary>
        [DataMember(Name="jmx.objectname")]
        public ConfigNodePropertyString JmxObjectname { get; set; }

        /// <summary>
        /// Gets or Sets PropertyMeasureEnabled
        /// </summary>
        [DataMember(Name="property.measure.enabled")]
        public ConfigNodePropertyBoolean PropertyMeasureEnabled { get; set; }

        /// <summary>
        /// Gets or Sets PropertyName
        /// </summary>
        [DataMember(Name="property.name")]
        public ConfigNodePropertyString PropertyName { get; set; }

        /// <summary>
        /// Gets or Sets PropertyMaxWaitMs
        /// </summary>
        [DataMember(Name="property.max.wait.ms")]
        public ConfigNodePropertyInteger PropertyMaxWaitMs { get; set; }

        /// <summary>
        /// Gets or Sets PropertyMaxRate
        /// </summary>
        [DataMember(Name="property.max.rate")]
        public ConfigNodePropertyFloat PropertyMaxRate { get; set; }

        /// <summary>
        /// Gets or Sets FulltextMeasureEnabled
        /// </summary>
        [DataMember(Name="fulltext.measure.enabled")]
        public ConfigNodePropertyBoolean FulltextMeasureEnabled { get; set; }

        /// <summary>
        /// Gets or Sets FulltextName
        /// </summary>
        [DataMember(Name="fulltext.name")]
        public ConfigNodePropertyString FulltextName { get; set; }

        /// <summary>
        /// Gets or Sets FulltextMaxWaitMs
        /// </summary>
        [DataMember(Name="fulltext.max.wait.ms")]
        public ConfigNodePropertyInteger FulltextMaxWaitMs { get; set; }

        /// <summary>
        /// Gets or Sets FulltextMaxRate
        /// </summary>
        [DataMember(Name="fulltext.max.rate")]
        public ConfigNodePropertyFloat FulltextMaxRate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorProperties {\n");
            sb.Append("  JmxObjectname: ").Append(JmxObjectname).Append("\n");
            sb.Append("  PropertyMeasureEnabled: ").Append(PropertyMeasureEnabled).Append("\n");
            sb.Append("  PropertyName: ").Append(PropertyName).Append("\n");
            sb.Append("  PropertyMaxWaitMs: ").Append(PropertyMaxWaitMs).Append("\n");
            sb.Append("  PropertyMaxRate: ").Append(PropertyMaxRate).Append("\n");
            sb.Append("  FulltextMeasureEnabled: ").Append(FulltextMeasureEnabled).Append("\n");
            sb.Append("  FulltextName: ").Append(FulltextName).Append("\n");
            sb.Append("  FulltextMaxWaitMs: ").Append(FulltextMaxWaitMs).Append("\n");
            sb.Append("  FulltextMaxRate: ").Append(FulltextMaxRate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorProperties)obj);
        }

        /// <summary>
        /// Returns true if ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorProperties instances are equal
        /// </summary>
        /// <param name="other">Instance of ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorProperties other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    JmxObjectname == other.JmxObjectname ||
                    JmxObjectname != null &&
                    JmxObjectname.Equals(other.JmxObjectname)
                ) && 
                (
                    PropertyMeasureEnabled == other.PropertyMeasureEnabled ||
                    PropertyMeasureEnabled != null &&
                    PropertyMeasureEnabled.Equals(other.PropertyMeasureEnabled)
                ) && 
                (
                    PropertyName == other.PropertyName ||
                    PropertyName != null &&
                    PropertyName.Equals(other.PropertyName)
                ) && 
                (
                    PropertyMaxWaitMs == other.PropertyMaxWaitMs ||
                    PropertyMaxWaitMs != null &&
                    PropertyMaxWaitMs.Equals(other.PropertyMaxWaitMs)
                ) && 
                (
                    PropertyMaxRate == other.PropertyMaxRate ||
                    PropertyMaxRate != null &&
                    PropertyMaxRate.Equals(other.PropertyMaxRate)
                ) && 
                (
                    FulltextMeasureEnabled == other.FulltextMeasureEnabled ||
                    FulltextMeasureEnabled != null &&
                    FulltextMeasureEnabled.Equals(other.FulltextMeasureEnabled)
                ) && 
                (
                    FulltextName == other.FulltextName ||
                    FulltextName != null &&
                    FulltextName.Equals(other.FulltextName)
                ) && 
                (
                    FulltextMaxWaitMs == other.FulltextMaxWaitMs ||
                    FulltextMaxWaitMs != null &&
                    FulltextMaxWaitMs.Equals(other.FulltextMaxWaitMs)
                ) && 
                (
                    FulltextMaxRate == other.FulltextMaxRate ||
                    FulltextMaxRate != null &&
                    FulltextMaxRate.Equals(other.FulltextMaxRate)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (JmxObjectname != null)
                    hashCode = hashCode * 59 + JmxObjectname.GetHashCode();
                    if (PropertyMeasureEnabled != null)
                    hashCode = hashCode * 59 + PropertyMeasureEnabled.GetHashCode();
                    if (PropertyName != null)
                    hashCode = hashCode * 59 + PropertyName.GetHashCode();
                    if (PropertyMaxWaitMs != null)
                    hashCode = hashCode * 59 + PropertyMaxWaitMs.GetHashCode();
                    if (PropertyMaxRate != null)
                    hashCode = hashCode * 59 + PropertyMaxRate.GetHashCode();
                    if (FulltextMeasureEnabled != null)
                    hashCode = hashCode * 59 + FulltextMeasureEnabled.GetHashCode();
                    if (FulltextName != null)
                    hashCode = hashCode * 59 + FulltextName.GetHashCode();
                    if (FulltextMaxWaitMs != null)
                    hashCode = hashCode * 59 + FulltextMaxWaitMs.GetHashCode();
                    if (FulltextMaxRate != null)
                    hashCode = hashCode * 59 + FulltextMaxRate.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorProperties left, ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorProperties right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorProperties left, ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorProperties right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
