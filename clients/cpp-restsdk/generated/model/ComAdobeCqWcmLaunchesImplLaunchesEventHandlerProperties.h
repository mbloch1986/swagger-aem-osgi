/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_ComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_ComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties_H_


#include "../ModelBase.h"

#include "ConfigNodePropertyBoolean.h"
#include "ConfigNodePropertyDropDown.h"
#include "ConfigNodePropertyInteger.h"
#include "ConfigNodePropertyString.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  ComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties
    : public ModelBase
{
public:
    ComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties();
    virtual ~ComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// ComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getEventFilter() const;
    bool eventFilterIsSet() const;
    void unsetEvent_filter();
    void setEventFilter(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getLaunchesEventhandlerThreadpoolMaxsize() const;
    bool launchesEventhandlerThreadpoolMaxsizeIsSet() const;
    void unsetLaunches_eventhandler_threadpool_maxsize();
    void setLaunchesEventhandlerThreadpoolMaxsize(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyDropDown> getLaunchesEventhandlerThreadpoolPriority() const;
    bool launchesEventhandlerThreadpoolPriorityIsSet() const;
    void unsetLaunches_eventhandler_threadpool_priority();
    void setLaunchesEventhandlerThreadpoolPriority(std::shared_ptr<ConfigNodePropertyDropDown> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getLaunchesEventhandlerUpdatelastmodification() const;
    bool launchesEventhandlerUpdatelastmodificationIsSet() const;
    void unsetLaunches_eventhandler_updatelastmodification();
    void setLaunchesEventhandlerUpdatelastmodification(std::shared_ptr<ConfigNodePropertyBoolean> value);

protected:
    std::shared_ptr<ConfigNodePropertyString> m_Event_filter;
    bool m_Event_filterIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_Launches_eventhandler_threadpool_maxsize;
    bool m_Launches_eventhandler_threadpool_maxsizeIsSet;
    std::shared_ptr<ConfigNodePropertyDropDown> m_Launches_eventhandler_threadpool_priority;
    bool m_Launches_eventhandler_threadpool_priorityIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Launches_eventhandler_updatelastmodification;
    bool m_Launches_eventhandler_updatelastmodificationIsSet;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_ComAdobeCqWcmLaunchesImplLaunchesEventHandlerProperties_H_ */
