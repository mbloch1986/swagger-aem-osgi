/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeCqSocialGroupImplGroupServiceImplProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeCqSocialGroupImplGroupServiceImplProperties::OAIComAdobeCqSocialGroupImplGroupServiceImplProperties(QString json) {
    this->fromJson(json);
}

OAIComAdobeCqSocialGroupImplGroupServiceImplProperties::OAIComAdobeCqSocialGroupImplGroupServiceImplProperties() {
    this->init();
}

OAIComAdobeCqSocialGroupImplGroupServiceImplProperties::~OAIComAdobeCqSocialGroupImplGroupServiceImplProperties() {
    
}

void
OAIComAdobeCqSocialGroupImplGroupServiceImplProperties::init() {
    m_max_wait_time_isSet = false;
    m_min_wait_between_retries_isSet = false;
}

void
OAIComAdobeCqSocialGroupImplGroupServiceImplProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIComAdobeCqSocialGroupImplGroupServiceImplProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(max_wait_time, json[QString("maxWaitTime")]);
    
    ::OpenAPI::fromJsonValue(min_wait_between_retries, json[QString("minWaitBetweenRetries")]);
    
}

QString
OAIComAdobeCqSocialGroupImplGroupServiceImplProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeCqSocialGroupImplGroupServiceImplProperties::asJsonObject() const {
    QJsonObject obj;
	if(max_wait_time.isSet()){
        obj.insert(QString("maxWaitTime"), ::OpenAPI::toJsonValue(max_wait_time));
    }
	if(min_wait_between_retries.isSet()){
        obj.insert(QString("minWaitBetweenRetries"), ::OpenAPI::toJsonValue(min_wait_between_retries));
    }
    return obj;
}

OAIConfigNodePropertyInteger
OAIComAdobeCqSocialGroupImplGroupServiceImplProperties::getMaxWaitTime() const {
    return max_wait_time;
}
void
OAIComAdobeCqSocialGroupImplGroupServiceImplProperties::setMaxWaitTime(const OAIConfigNodePropertyInteger &max_wait_time) {
    this->max_wait_time = max_wait_time;
    this->m_max_wait_time_isSet = true;
}

OAIConfigNodePropertyInteger
OAIComAdobeCqSocialGroupImplGroupServiceImplProperties::getMinWaitBetweenRetries() const {
    return min_wait_between_retries;
}
void
OAIComAdobeCqSocialGroupImplGroupServiceImplProperties::setMinWaitBetweenRetries(const OAIConfigNodePropertyInteger &min_wait_between_retries) {
    this->min_wait_between_retries = min_wait_between_retries;
    this->m_min_wait_between_retries_isSet = true;
}


bool
OAIComAdobeCqSocialGroupImplGroupServiceImplProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(max_wait_time.isSet()){ isObjectUpdated = true; break;}
    
        if(min_wait_between_retries.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

