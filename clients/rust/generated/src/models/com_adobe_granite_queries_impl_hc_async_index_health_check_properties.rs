/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckProperties {
  #[serde(rename = "indexing.critical.threshold")]
  indexing_critical_threshold: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "indexing.warn.threshold")]
  indexing_warn_threshold: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "hc.tags")]
  hc_tags: Option<::models::ConfigNodePropertyArray>
}

impl ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckProperties {
  pub fn new() -> ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckProperties {
    ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckProperties {
      indexing_critical_threshold: None,
      indexing_warn_threshold: None,
      hc_tags: None
    }
  }

  pub fn set_indexing_critical_threshold(&mut self, indexing_critical_threshold: ::models::ConfigNodePropertyInteger) {
    self.indexing_critical_threshold = Some(indexing_critical_threshold);
  }

  pub fn with_indexing_critical_threshold(mut self, indexing_critical_threshold: ::models::ConfigNodePropertyInteger) -> ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckProperties {
    self.indexing_critical_threshold = Some(indexing_critical_threshold);
    self
  }

  pub fn indexing_critical_threshold(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.indexing_critical_threshold.as_ref()
  }

  pub fn reset_indexing_critical_threshold(&mut self) {
    self.indexing_critical_threshold = None;
  }

  pub fn set_indexing_warn_threshold(&mut self, indexing_warn_threshold: ::models::ConfigNodePropertyInteger) {
    self.indexing_warn_threshold = Some(indexing_warn_threshold);
  }

  pub fn with_indexing_warn_threshold(mut self, indexing_warn_threshold: ::models::ConfigNodePropertyInteger) -> ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckProperties {
    self.indexing_warn_threshold = Some(indexing_warn_threshold);
    self
  }

  pub fn indexing_warn_threshold(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.indexing_warn_threshold.as_ref()
  }

  pub fn reset_indexing_warn_threshold(&mut self) {
    self.indexing_warn_threshold = None;
  }

  pub fn set_hc_tags(&mut self, hc_tags: ::models::ConfigNodePropertyArray) {
    self.hc_tags = Some(hc_tags);
  }

  pub fn with_hc_tags(mut self, hc_tags: ::models::ConfigNodePropertyArray) -> ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckProperties {
    self.hc_tags = Some(hc_tags);
    self
  }

  pub fn hc_tags(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.hc_tags.as_ref()
  }

  pub fn reset_hc_tags(&mut self) {
    self.hc_tags = None;
  }

}



