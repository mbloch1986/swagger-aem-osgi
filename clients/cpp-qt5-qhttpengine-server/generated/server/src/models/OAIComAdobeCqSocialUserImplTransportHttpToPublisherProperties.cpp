/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeCqSocialUserImplTransportHttpToPublisherProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeCqSocialUserImplTransportHttpToPublisherProperties::OAIComAdobeCqSocialUserImplTransportHttpToPublisherProperties(QString json) {
    this->fromJson(json);
}

OAIComAdobeCqSocialUserImplTransportHttpToPublisherProperties::OAIComAdobeCqSocialUserImplTransportHttpToPublisherProperties() {
    this->init();
}

OAIComAdobeCqSocialUserImplTransportHttpToPublisherProperties::~OAIComAdobeCqSocialUserImplTransportHttpToPublisherProperties() {
    
}

void
OAIComAdobeCqSocialUserImplTransportHttpToPublisherProperties::init() {
    m_enable_isSet = false;
    m_agent_configuration_isSet = false;
    m_context_path_isSet = false;
    m_disabled_cipher_suites_isSet = false;
    m_enabled_cipher_suites_isSet = false;
}

void
OAIComAdobeCqSocialUserImplTransportHttpToPublisherProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIComAdobeCqSocialUserImplTransportHttpToPublisherProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(enable, json[QString("enable")]);
    
    ::OpenAPI::fromJsonValue(agent_configuration, json[QString("agent.configuration")]);
    
    ::OpenAPI::fromJsonValue(context_path, json[QString("context.path")]);
    
    ::OpenAPI::fromJsonValue(disabled_cipher_suites, json[QString("disabled.cipher.suites")]);
    
    ::OpenAPI::fromJsonValue(enabled_cipher_suites, json[QString("enabled.cipher.suites")]);
    
}

QString
OAIComAdobeCqSocialUserImplTransportHttpToPublisherProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeCqSocialUserImplTransportHttpToPublisherProperties::asJsonObject() const {
    QJsonObject obj;
	if(enable.isSet()){
        obj.insert(QString("enable"), ::OpenAPI::toJsonValue(enable));
    }
	if(agent_configuration.isSet()){
        obj.insert(QString("agent.configuration"), ::OpenAPI::toJsonValue(agent_configuration));
    }
	if(context_path.isSet()){
        obj.insert(QString("context.path"), ::OpenAPI::toJsonValue(context_path));
    }
	if(disabled_cipher_suites.isSet()){
        obj.insert(QString("disabled.cipher.suites"), ::OpenAPI::toJsonValue(disabled_cipher_suites));
    }
	if(enabled_cipher_suites.isSet()){
        obj.insert(QString("enabled.cipher.suites"), ::OpenAPI::toJsonValue(enabled_cipher_suites));
    }
    return obj;
}

OAIConfigNodePropertyBoolean
OAIComAdobeCqSocialUserImplTransportHttpToPublisherProperties::getEnable() const {
    return enable;
}
void
OAIComAdobeCqSocialUserImplTransportHttpToPublisherProperties::setEnable(const OAIConfigNodePropertyBoolean &enable) {
    this->enable = enable;
    this->m_enable_isSet = true;
}

OAIConfigNodePropertyArray
OAIComAdobeCqSocialUserImplTransportHttpToPublisherProperties::getAgentConfiguration() const {
    return agent_configuration;
}
void
OAIComAdobeCqSocialUserImplTransportHttpToPublisherProperties::setAgentConfiguration(const OAIConfigNodePropertyArray &agent_configuration) {
    this->agent_configuration = agent_configuration;
    this->m_agent_configuration_isSet = true;
}

OAIConfigNodePropertyString
OAIComAdobeCqSocialUserImplTransportHttpToPublisherProperties::getContextPath() const {
    return context_path;
}
void
OAIComAdobeCqSocialUserImplTransportHttpToPublisherProperties::setContextPath(const OAIConfigNodePropertyString &context_path) {
    this->context_path = context_path;
    this->m_context_path_isSet = true;
}

OAIConfigNodePropertyArray
OAIComAdobeCqSocialUserImplTransportHttpToPublisherProperties::getDisabledCipherSuites() const {
    return disabled_cipher_suites;
}
void
OAIComAdobeCqSocialUserImplTransportHttpToPublisherProperties::setDisabledCipherSuites(const OAIConfigNodePropertyArray &disabled_cipher_suites) {
    this->disabled_cipher_suites = disabled_cipher_suites;
    this->m_disabled_cipher_suites_isSet = true;
}

OAIConfigNodePropertyArray
OAIComAdobeCqSocialUserImplTransportHttpToPublisherProperties::getEnabledCipherSuites() const {
    return enabled_cipher_suites;
}
void
OAIComAdobeCqSocialUserImplTransportHttpToPublisherProperties::setEnabledCipherSuites(const OAIConfigNodePropertyArray &enabled_cipher_suites) {
    this->enabled_cipher_suites = enabled_cipher_suites;
    this->m_enabled_cipher_suites_isSet = true;
}


bool
OAIComAdobeCqSocialUserImplTransportHttpToPublisherProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(enable.isSet()){ isObjectUpdated = true; break;}
    
        if(agent_configuration.isSet()){ isObjectUpdated = true; break;}
    
        if(context_path.isSet()){ isObjectUpdated = true; break;}
    
        if(disabled_cipher_suites.isSet()){ isObjectUpdated = true; break;}
    
        if(enabled_cipher_suites.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

