/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIOrgApacheSlingDatasourceDataSourceFactoryProperties.h
 *
 * 
 */

#ifndef OAIOrgApacheSlingDatasourceDataSourceFactoryProperties_H_
#define OAIOrgApacheSlingDatasourceDataSourceFactoryProperties_H_

#include <QJsonObject>


#include "OAIOAIConfigNodePropertyArray.h"
#include "OAIOAIConfigNodePropertyBoolean.h"
#include "OAIOAIConfigNodePropertyDropDown.h"
#include "OAIOAIConfigNodePropertyInteger.h"
#include "OAIOAIConfigNodePropertyString.h"

#include "OAIObject.h"

namespace OpenAPI {

class OAIOrgApacheSlingDatasourceDataSourceFactoryProperties: public OAIObject {
public:
    OAIOrgApacheSlingDatasourceDataSourceFactoryProperties();
    OAIOrgApacheSlingDatasourceDataSourceFactoryProperties(QString json);
    ~OAIOrgApacheSlingDatasourceDataSourceFactoryProperties();
    void init();
    void cleanup();

    QString asJson () override;
    QJsonObject asJsonObject() override;
    void fromJsonObject(QJsonObject json) override;
    OAIOrgApacheSlingDatasourceDataSourceFactoryProperties* fromJson(QString jsonString) override;

    OAIConfigNodePropertyString* getDatasourceName();
    void setDatasourceName(OAIConfigNodePropertyString* datasource_name);

    OAIConfigNodePropertyString* getDatasourceSvcPropName();
    void setDatasourceSvcPropName(OAIConfigNodePropertyString* datasource_svc_prop_name);

    OAIConfigNodePropertyString* getDriverClassName();
    void setDriverClassName(OAIConfigNodePropertyString* driver_class_name);

    OAIConfigNodePropertyString* getUrl();
    void setUrl(OAIConfigNodePropertyString* url);

    OAIConfigNodePropertyString* getUsername();
    void setUsername(OAIConfigNodePropertyString* username);

    OAIConfigNodePropertyString* getPassword();
    void setPassword(OAIConfigNodePropertyString* password);

    OAIConfigNodePropertyDropDown* getDefaultAutoCommit();
    void setDefaultAutoCommit(OAIConfigNodePropertyDropDown* default_auto_commit);

    OAIConfigNodePropertyDropDown* getDefaultReadOnly();
    void setDefaultReadOnly(OAIConfigNodePropertyDropDown* default_read_only);

    OAIConfigNodePropertyDropDown* getDefaultTransactionIsolation();
    void setDefaultTransactionIsolation(OAIConfigNodePropertyDropDown* default_transaction_isolation);

    OAIConfigNodePropertyString* getDefaultCatalog();
    void setDefaultCatalog(OAIConfigNodePropertyString* default_catalog);

    OAIConfigNodePropertyInteger* getMaxActive();
    void setMaxActive(OAIConfigNodePropertyInteger* max_active);

    OAIConfigNodePropertyInteger* getMaxIdle();
    void setMaxIdle(OAIConfigNodePropertyInteger* max_idle);

    OAIConfigNodePropertyInteger* getMinIdle();
    void setMinIdle(OAIConfigNodePropertyInteger* min_idle);

    OAIConfigNodePropertyInteger* getInitialSize();
    void setInitialSize(OAIConfigNodePropertyInteger* initial_size);

    OAIConfigNodePropertyInteger* getMaxWait();
    void setMaxWait(OAIConfigNodePropertyInteger* max_wait);

    OAIConfigNodePropertyInteger* getMaxAge();
    void setMaxAge(OAIConfigNodePropertyInteger* max_age);

    OAIConfigNodePropertyBoolean* getTestOnBorrow();
    void setTestOnBorrow(OAIConfigNodePropertyBoolean* test_on_borrow);

    OAIConfigNodePropertyBoolean* getTestOnReturn();
    void setTestOnReturn(OAIConfigNodePropertyBoolean* test_on_return);

    OAIConfigNodePropertyBoolean* getTestWhileIdle();
    void setTestWhileIdle(OAIConfigNodePropertyBoolean* test_while_idle);

    OAIConfigNodePropertyString* getValidationQuery();
    void setValidationQuery(OAIConfigNodePropertyString* validation_query);

    OAIConfigNodePropertyInteger* getValidationQueryTimeout();
    void setValidationQueryTimeout(OAIConfigNodePropertyInteger* validation_query_timeout);

    OAIConfigNodePropertyInteger* getTimeBetweenEvictionRunsMillis();
    void setTimeBetweenEvictionRunsMillis(OAIConfigNodePropertyInteger* time_between_eviction_runs_millis);

    OAIConfigNodePropertyInteger* getMinEvictableIdleTimeMillis();
    void setMinEvictableIdleTimeMillis(OAIConfigNodePropertyInteger* min_evictable_idle_time_millis);

    OAIConfigNodePropertyString* getConnectionProperties();
    void setConnectionProperties(OAIConfigNodePropertyString* connection_properties);

    OAIConfigNodePropertyString* getInitSql();
    void setInitSql(OAIConfigNodePropertyString* init_sql);

    OAIConfigNodePropertyString* getJdbcInterceptors();
    void setJdbcInterceptors(OAIConfigNodePropertyString* jdbc_interceptors);

    OAIConfigNodePropertyInteger* getValidationInterval();
    void setValidationInterval(OAIConfigNodePropertyInteger* validation_interval);

    OAIConfigNodePropertyBoolean* getLogValidationErrors();
    void setLogValidationErrors(OAIConfigNodePropertyBoolean* log_validation_errors);

    OAIConfigNodePropertyArray* getDatasourceSvcProperties();
    void setDatasourceSvcProperties(OAIConfigNodePropertyArray* datasource_svc_properties);


    virtual bool isSet() override;

private:
    OAIConfigNodePropertyString* datasource_name;
    bool m_datasource_name_isSet;

    OAIConfigNodePropertyString* datasource_svc_prop_name;
    bool m_datasource_svc_prop_name_isSet;

    OAIConfigNodePropertyString* driver_class_name;
    bool m_driver_class_name_isSet;

    OAIConfigNodePropertyString* url;
    bool m_url_isSet;

    OAIConfigNodePropertyString* username;
    bool m_username_isSet;

    OAIConfigNodePropertyString* password;
    bool m_password_isSet;

    OAIConfigNodePropertyDropDown* default_auto_commit;
    bool m_default_auto_commit_isSet;

    OAIConfigNodePropertyDropDown* default_read_only;
    bool m_default_read_only_isSet;

    OAIConfigNodePropertyDropDown* default_transaction_isolation;
    bool m_default_transaction_isolation_isSet;

    OAIConfigNodePropertyString* default_catalog;
    bool m_default_catalog_isSet;

    OAIConfigNodePropertyInteger* max_active;
    bool m_max_active_isSet;

    OAIConfigNodePropertyInteger* max_idle;
    bool m_max_idle_isSet;

    OAIConfigNodePropertyInteger* min_idle;
    bool m_min_idle_isSet;

    OAIConfigNodePropertyInteger* initial_size;
    bool m_initial_size_isSet;

    OAIConfigNodePropertyInteger* max_wait;
    bool m_max_wait_isSet;

    OAIConfigNodePropertyInteger* max_age;
    bool m_max_age_isSet;

    OAIConfigNodePropertyBoolean* test_on_borrow;
    bool m_test_on_borrow_isSet;

    OAIConfigNodePropertyBoolean* test_on_return;
    bool m_test_on_return_isSet;

    OAIConfigNodePropertyBoolean* test_while_idle;
    bool m_test_while_idle_isSet;

    OAIConfigNodePropertyString* validation_query;
    bool m_validation_query_isSet;

    OAIConfigNodePropertyInteger* validation_query_timeout;
    bool m_validation_query_timeout_isSet;

    OAIConfigNodePropertyInteger* time_between_eviction_runs_millis;
    bool m_time_between_eviction_runs_millis_isSet;

    OAIConfigNodePropertyInteger* min_evictable_idle_time_millis;
    bool m_min_evictable_idle_time_millis_isSet;

    OAIConfigNodePropertyString* connection_properties;
    bool m_connection_properties_isSet;

    OAIConfigNodePropertyString* init_sql;
    bool m_init_sql_isSet;

    OAIConfigNodePropertyString* jdbc_interceptors;
    bool m_jdbc_interceptors_isSet;

    OAIConfigNodePropertyInteger* validation_interval;
    bool m_validation_interval_isSet;

    OAIConfigNodePropertyBoolean* log_validation_errors;
    bool m_log_validation_errors_isSet;

    OAIConfigNodePropertyArray* datasource_svc_properties;
    bool m_datasource_svc_properties_isSet;

};

}

#endif /* OAIOrgApacheSlingDatasourceDataSourceFactoryProperties_H_ */
