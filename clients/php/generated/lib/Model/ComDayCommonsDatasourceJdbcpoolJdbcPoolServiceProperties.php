<?php
/**
 * ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.2.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'comDayCommonsDatasourceJdbcpoolJdbcPoolServiceProperties';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'jdbc_driver_class' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'jdbc_connection_uri' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'jdbc_username' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'jdbc_password' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'jdbc_validation_query' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'default_readonly' => '\OpenAPI\Client\Model\ConfigNodePropertyBoolean',
        'default_autocommit' => '\OpenAPI\Client\Model\ConfigNodePropertyBoolean',
        'pool_size' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'pool_max_wait_msec' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'datasource_name' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'datasource_svc_properties' => '\OpenAPI\Client\Model\ConfigNodePropertyArray'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'jdbc_driver_class' => null,
        'jdbc_connection_uri' => null,
        'jdbc_username' => null,
        'jdbc_password' => null,
        'jdbc_validation_query' => null,
        'default_readonly' => null,
        'default_autocommit' => null,
        'pool_size' => null,
        'pool_max_wait_msec' => null,
        'datasource_name' => null,
        'datasource_svc_properties' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'jdbc_driver_class' => 'jdbc.driver.class',
        'jdbc_connection_uri' => 'jdbc.connection.uri',
        'jdbc_username' => 'jdbc.username',
        'jdbc_password' => 'jdbc.password',
        'jdbc_validation_query' => 'jdbc.validation.query',
        'default_readonly' => 'default.readonly',
        'default_autocommit' => 'default.autocommit',
        'pool_size' => 'pool.size',
        'pool_max_wait_msec' => 'pool.max.wait.msec',
        'datasource_name' => 'datasource.name',
        'datasource_svc_properties' => 'datasource.svc.properties'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'jdbc_driver_class' => 'setJdbcDriverClass',
        'jdbc_connection_uri' => 'setJdbcConnectionUri',
        'jdbc_username' => 'setJdbcUsername',
        'jdbc_password' => 'setJdbcPassword',
        'jdbc_validation_query' => 'setJdbcValidationQuery',
        'default_readonly' => 'setDefaultReadonly',
        'default_autocommit' => 'setDefaultAutocommit',
        'pool_size' => 'setPoolSize',
        'pool_max_wait_msec' => 'setPoolMaxWaitMsec',
        'datasource_name' => 'setDatasourceName',
        'datasource_svc_properties' => 'setDatasourceSvcProperties'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'jdbc_driver_class' => 'getJdbcDriverClass',
        'jdbc_connection_uri' => 'getJdbcConnectionUri',
        'jdbc_username' => 'getJdbcUsername',
        'jdbc_password' => 'getJdbcPassword',
        'jdbc_validation_query' => 'getJdbcValidationQuery',
        'default_readonly' => 'getDefaultReadonly',
        'default_autocommit' => 'getDefaultAutocommit',
        'pool_size' => 'getPoolSize',
        'pool_max_wait_msec' => 'getPoolMaxWaitMsec',
        'datasource_name' => 'getDatasourceName',
        'datasource_svc_properties' => 'getDatasourceSvcProperties'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['jdbc_driver_class'] = isset($data['jdbc_driver_class']) ? $data['jdbc_driver_class'] : null;
        $this->container['jdbc_connection_uri'] = isset($data['jdbc_connection_uri']) ? $data['jdbc_connection_uri'] : null;
        $this->container['jdbc_username'] = isset($data['jdbc_username']) ? $data['jdbc_username'] : null;
        $this->container['jdbc_password'] = isset($data['jdbc_password']) ? $data['jdbc_password'] : null;
        $this->container['jdbc_validation_query'] = isset($data['jdbc_validation_query']) ? $data['jdbc_validation_query'] : null;
        $this->container['default_readonly'] = isset($data['default_readonly']) ? $data['default_readonly'] : null;
        $this->container['default_autocommit'] = isset($data['default_autocommit']) ? $data['default_autocommit'] : null;
        $this->container['pool_size'] = isset($data['pool_size']) ? $data['pool_size'] : null;
        $this->container['pool_max_wait_msec'] = isset($data['pool_max_wait_msec']) ? $data['pool_max_wait_msec'] : null;
        $this->container['datasource_name'] = isset($data['datasource_name']) ? $data['datasource_name'] : null;
        $this->container['datasource_svc_properties'] = isset($data['datasource_svc_properties']) ? $data['datasource_svc_properties'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets jdbc_driver_class
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getJdbcDriverClass()
    {
        return $this->container['jdbc_driver_class'];
    }

    /**
     * Sets jdbc_driver_class
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $jdbc_driver_class jdbc_driver_class
     *
     * @return $this
     */
    public function setJdbcDriverClass($jdbc_driver_class)
    {
        $this->container['jdbc_driver_class'] = $jdbc_driver_class;

        return $this;
    }

    /**
     * Gets jdbc_connection_uri
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getJdbcConnectionUri()
    {
        return $this->container['jdbc_connection_uri'];
    }

    /**
     * Sets jdbc_connection_uri
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $jdbc_connection_uri jdbc_connection_uri
     *
     * @return $this
     */
    public function setJdbcConnectionUri($jdbc_connection_uri)
    {
        $this->container['jdbc_connection_uri'] = $jdbc_connection_uri;

        return $this;
    }

    /**
     * Gets jdbc_username
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getJdbcUsername()
    {
        return $this->container['jdbc_username'];
    }

    /**
     * Sets jdbc_username
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $jdbc_username jdbc_username
     *
     * @return $this
     */
    public function setJdbcUsername($jdbc_username)
    {
        $this->container['jdbc_username'] = $jdbc_username;

        return $this;
    }

    /**
     * Gets jdbc_password
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getJdbcPassword()
    {
        return $this->container['jdbc_password'];
    }

    /**
     * Sets jdbc_password
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $jdbc_password jdbc_password
     *
     * @return $this
     */
    public function setJdbcPassword($jdbc_password)
    {
        $this->container['jdbc_password'] = $jdbc_password;

        return $this;
    }

    /**
     * Gets jdbc_validation_query
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getJdbcValidationQuery()
    {
        return $this->container['jdbc_validation_query'];
    }

    /**
     * Sets jdbc_validation_query
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $jdbc_validation_query jdbc_validation_query
     *
     * @return $this
     */
    public function setJdbcValidationQuery($jdbc_validation_query)
    {
        $this->container['jdbc_validation_query'] = $jdbc_validation_query;

        return $this;
    }

    /**
     * Gets default_readonly
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null
     */
    public function getDefaultReadonly()
    {
        return $this->container['default_readonly'];
    }

    /**
     * Sets default_readonly
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null $default_readonly default_readonly
     *
     * @return $this
     */
    public function setDefaultReadonly($default_readonly)
    {
        $this->container['default_readonly'] = $default_readonly;

        return $this;
    }

    /**
     * Gets default_autocommit
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null
     */
    public function getDefaultAutocommit()
    {
        return $this->container['default_autocommit'];
    }

    /**
     * Sets default_autocommit
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null $default_autocommit default_autocommit
     *
     * @return $this
     */
    public function setDefaultAutocommit($default_autocommit)
    {
        $this->container['default_autocommit'] = $default_autocommit;

        return $this;
    }

    /**
     * Gets pool_size
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getPoolSize()
    {
        return $this->container['pool_size'];
    }

    /**
     * Sets pool_size
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $pool_size pool_size
     *
     * @return $this
     */
    public function setPoolSize($pool_size)
    {
        $this->container['pool_size'] = $pool_size;

        return $this;
    }

    /**
     * Gets pool_max_wait_msec
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getPoolMaxWaitMsec()
    {
        return $this->container['pool_max_wait_msec'];
    }

    /**
     * Sets pool_max_wait_msec
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $pool_max_wait_msec pool_max_wait_msec
     *
     * @return $this
     */
    public function setPoolMaxWaitMsec($pool_max_wait_msec)
    {
        $this->container['pool_max_wait_msec'] = $pool_max_wait_msec;

        return $this;
    }

    /**
     * Gets datasource_name
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getDatasourceName()
    {
        return $this->container['datasource_name'];
    }

    /**
     * Sets datasource_name
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $datasource_name datasource_name
     *
     * @return $this
     */
    public function setDatasourceName($datasource_name)
    {
        $this->container['datasource_name'] = $datasource_name;

        return $this;
    }

    /**
     * Gets datasource_svc_properties
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyArray|null
     */
    public function getDatasourceSvcProperties()
    {
        return $this->container['datasource_svc_properties'];
    }

    /**
     * Sets datasource_svc_properties
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyArray|null $datasource_svc_properties datasource_svc_properties
     *
     * @return $this
     */
    public function setDatasourceSvcProperties($datasource_svc_properties)
    {
        $this->container['datasource_svc_properties'] = $datasource_svc_properties;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


