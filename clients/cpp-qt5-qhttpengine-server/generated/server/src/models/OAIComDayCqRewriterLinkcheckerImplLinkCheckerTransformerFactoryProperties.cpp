/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties::OAIComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties(QString json) {
    this->fromJson(json);
}

OAIComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties::OAIComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties() {
    this->init();
}

OAIComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties::~OAIComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties() {
    
}

void
OAIComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties::init() {
    m_linkcheckertransformer_disable_rewriting_isSet = false;
    m_linkcheckertransformer_disable_checking_isSet = false;
    m_linkcheckertransformer_map_cache_size_isSet = false;
    m_linkcheckertransformer_strict_extension_check_isSet = false;
    m_linkcheckertransformer_strip_htmlt_extension_isSet = false;
    m_linkcheckertransformer_rewrite_elements_isSet = false;
    m_linkcheckertransformer_strip_extension_path_blacklist_isSet = false;
}

void
OAIComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(linkcheckertransformer_disable_rewriting, json[QString("linkcheckertransformer.disableRewriting")]);
    
    ::OpenAPI::fromJsonValue(linkcheckertransformer_disable_checking, json[QString("linkcheckertransformer.disableChecking")]);
    
    ::OpenAPI::fromJsonValue(linkcheckertransformer_map_cache_size, json[QString("linkcheckertransformer.mapCacheSize")]);
    
    ::OpenAPI::fromJsonValue(linkcheckertransformer_strict_extension_check, json[QString("linkcheckertransformer.strictExtensionCheck")]);
    
    ::OpenAPI::fromJsonValue(linkcheckertransformer_strip_htmlt_extension, json[QString("linkcheckertransformer.stripHtmltExtension")]);
    
    ::OpenAPI::fromJsonValue(linkcheckertransformer_rewrite_elements, json[QString("linkcheckertransformer.rewriteElements")]);
    
    ::OpenAPI::fromJsonValue(linkcheckertransformer_strip_extension_path_blacklist, json[QString("linkcheckertransformer.stripExtensionPathBlacklist")]);
    
}

QString
OAIComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties::asJsonObject() const {
    QJsonObject obj;
	if(linkcheckertransformer_disable_rewriting.isSet()){
        obj.insert(QString("linkcheckertransformer.disableRewriting"), ::OpenAPI::toJsonValue(linkcheckertransformer_disable_rewriting));
    }
	if(linkcheckertransformer_disable_checking.isSet()){
        obj.insert(QString("linkcheckertransformer.disableChecking"), ::OpenAPI::toJsonValue(linkcheckertransformer_disable_checking));
    }
	if(linkcheckertransformer_map_cache_size.isSet()){
        obj.insert(QString("linkcheckertransformer.mapCacheSize"), ::OpenAPI::toJsonValue(linkcheckertransformer_map_cache_size));
    }
	if(linkcheckertransformer_strict_extension_check.isSet()){
        obj.insert(QString("linkcheckertransformer.strictExtensionCheck"), ::OpenAPI::toJsonValue(linkcheckertransformer_strict_extension_check));
    }
	if(linkcheckertransformer_strip_htmlt_extension.isSet()){
        obj.insert(QString("linkcheckertransformer.stripHtmltExtension"), ::OpenAPI::toJsonValue(linkcheckertransformer_strip_htmlt_extension));
    }
	if(linkcheckertransformer_rewrite_elements.isSet()){
        obj.insert(QString("linkcheckertransformer.rewriteElements"), ::OpenAPI::toJsonValue(linkcheckertransformer_rewrite_elements));
    }
	if(linkcheckertransformer_strip_extension_path_blacklist.isSet()){
        obj.insert(QString("linkcheckertransformer.stripExtensionPathBlacklist"), ::OpenAPI::toJsonValue(linkcheckertransformer_strip_extension_path_blacklist));
    }
    return obj;
}

OAIConfigNodePropertyBoolean
OAIComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties::getLinkcheckertransformerDisableRewriting() const {
    return linkcheckertransformer_disable_rewriting;
}
void
OAIComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties::setLinkcheckertransformerDisableRewriting(const OAIConfigNodePropertyBoolean &linkcheckertransformer_disable_rewriting) {
    this->linkcheckertransformer_disable_rewriting = linkcheckertransformer_disable_rewriting;
    this->m_linkcheckertransformer_disable_rewriting_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties::getLinkcheckertransformerDisableChecking() const {
    return linkcheckertransformer_disable_checking;
}
void
OAIComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties::setLinkcheckertransformerDisableChecking(const OAIConfigNodePropertyBoolean &linkcheckertransformer_disable_checking) {
    this->linkcheckertransformer_disable_checking = linkcheckertransformer_disable_checking;
    this->m_linkcheckertransformer_disable_checking_isSet = true;
}

OAIConfigNodePropertyInteger
OAIComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties::getLinkcheckertransformerMapCacheSize() const {
    return linkcheckertransformer_map_cache_size;
}
void
OAIComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties::setLinkcheckertransformerMapCacheSize(const OAIConfigNodePropertyInteger &linkcheckertransformer_map_cache_size) {
    this->linkcheckertransformer_map_cache_size = linkcheckertransformer_map_cache_size;
    this->m_linkcheckertransformer_map_cache_size_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties::getLinkcheckertransformerStrictExtensionCheck() const {
    return linkcheckertransformer_strict_extension_check;
}
void
OAIComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties::setLinkcheckertransformerStrictExtensionCheck(const OAIConfigNodePropertyBoolean &linkcheckertransformer_strict_extension_check) {
    this->linkcheckertransformer_strict_extension_check = linkcheckertransformer_strict_extension_check;
    this->m_linkcheckertransformer_strict_extension_check_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties::getLinkcheckertransformerStripHtmltExtension() const {
    return linkcheckertransformer_strip_htmlt_extension;
}
void
OAIComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties::setLinkcheckertransformerStripHtmltExtension(const OAIConfigNodePropertyBoolean &linkcheckertransformer_strip_htmlt_extension) {
    this->linkcheckertransformer_strip_htmlt_extension = linkcheckertransformer_strip_htmlt_extension;
    this->m_linkcheckertransformer_strip_htmlt_extension_isSet = true;
}

OAIConfigNodePropertyArray
OAIComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties::getLinkcheckertransformerRewriteElements() const {
    return linkcheckertransformer_rewrite_elements;
}
void
OAIComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties::setLinkcheckertransformerRewriteElements(const OAIConfigNodePropertyArray &linkcheckertransformer_rewrite_elements) {
    this->linkcheckertransformer_rewrite_elements = linkcheckertransformer_rewrite_elements;
    this->m_linkcheckertransformer_rewrite_elements_isSet = true;
}

OAIConfigNodePropertyArray
OAIComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties::getLinkcheckertransformerStripExtensionPathBlacklist() const {
    return linkcheckertransformer_strip_extension_path_blacklist;
}
void
OAIComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties::setLinkcheckertransformerStripExtensionPathBlacklist(const OAIConfigNodePropertyArray &linkcheckertransformer_strip_extension_path_blacklist) {
    this->linkcheckertransformer_strip_extension_path_blacklist = linkcheckertransformer_strip_extension_path_blacklist;
    this->m_linkcheckertransformer_strip_extension_path_blacklist_isSet = true;
}


bool
OAIComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(linkcheckertransformer_disable_rewriting.isSet()){ isObjectUpdated = true; break;}
    
        if(linkcheckertransformer_disable_checking.isSet()){ isObjectUpdated = true; break;}
    
        if(linkcheckertransformer_map_cache_size.isSet()){ isObjectUpdated = true; break;}
    
        if(linkcheckertransformer_strict_extension_check.isSet()){ isObjectUpdated = true; break;}
    
        if(linkcheckertransformer_strip_htmlt_extension.isSet()){ isObjectUpdated = true; break;}
    
        if(linkcheckertransformer_rewrite_elements.isSet()){ isObjectUpdated = true; break;}
    
        if(linkcheckertransformer_strip_extension_path_blacklist.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

