/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComDayCqDamStockIntegrationImplConfigurationStockConfigurationProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComDayCqDamStockIntegrationImplConfigurationStockConfigurationProperties::OAIComDayCqDamStockIntegrationImplConfigurationStockConfigurationProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIComDayCqDamStockIntegrationImplConfigurationStockConfigurationProperties::OAIComDayCqDamStockIntegrationImplConfigurationStockConfigurationProperties() {
    init();
}

OAIComDayCqDamStockIntegrationImplConfigurationStockConfigurationProperties::~OAIComDayCqDamStockIntegrationImplConfigurationStockConfigurationProperties() {
    this->cleanup();
}

void
OAIComDayCqDamStockIntegrationImplConfigurationStockConfigurationProperties::init() {
    name = new OAIConfigNodePropertyString();
    m_name_isSet = false;
    locale = new OAIConfigNodePropertyString();
    m_locale_isSet = false;
    ims_config = new OAIConfigNodePropertyString();
    m_ims_config_isSet = false;
}

void
OAIComDayCqDamStockIntegrationImplConfigurationStockConfigurationProperties::cleanup() {
    if(name != nullptr) { 
        delete name;
    }
    if(locale != nullptr) { 
        delete locale;
    }
    if(ims_config != nullptr) { 
        delete ims_config;
    }
}

OAIComDayCqDamStockIntegrationImplConfigurationStockConfigurationProperties*
OAIComDayCqDamStockIntegrationImplConfigurationStockConfigurationProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIComDayCqDamStockIntegrationImplConfigurationStockConfigurationProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&name, pJson["name"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&locale, pJson["locale"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&ims_config, pJson["imsConfig"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
}

QString
OAIComDayCqDamStockIntegrationImplConfigurationStockConfigurationProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComDayCqDamStockIntegrationImplConfigurationStockConfigurationProperties::asJsonObject() {
    QJsonObject obj;
    if((name != nullptr) && (name->isSet())){
        toJsonValue(QString("name"), name, obj, QString("OAIConfigNodePropertyString"));
    }
    if((locale != nullptr) && (locale->isSet())){
        toJsonValue(QString("locale"), locale, obj, QString("OAIConfigNodePropertyString"));
    }
    if((ims_config != nullptr) && (ims_config->isSet())){
        toJsonValue(QString("imsConfig"), ims_config, obj, QString("OAIConfigNodePropertyString"));
    }

    return obj;
}

OAIConfigNodePropertyString*
OAIComDayCqDamStockIntegrationImplConfigurationStockConfigurationProperties::getName() {
    return name;
}
void
OAIComDayCqDamStockIntegrationImplConfigurationStockConfigurationProperties::setName(OAIConfigNodePropertyString* name) {
    this->name = name;
    this->m_name_isSet = true;
}

OAIConfigNodePropertyString*
OAIComDayCqDamStockIntegrationImplConfigurationStockConfigurationProperties::getLocale() {
    return locale;
}
void
OAIComDayCqDamStockIntegrationImplConfigurationStockConfigurationProperties::setLocale(OAIConfigNodePropertyString* locale) {
    this->locale = locale;
    this->m_locale_isSet = true;
}

OAIConfigNodePropertyString*
OAIComDayCqDamStockIntegrationImplConfigurationStockConfigurationProperties::getImsConfig() {
    return ims_config;
}
void
OAIComDayCqDamStockIntegrationImplConfigurationStockConfigurationProperties::setImsConfig(OAIConfigNodePropertyString* ims_config) {
    this->ims_config = ims_config;
    this->m_ims_config_isSet = true;
}


bool
OAIComDayCqDamStockIntegrationImplConfigurationStockConfigurationProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(name != nullptr && name->isSet()){ isObjectUpdated = true; break;}
        if(locale != nullptr && locale->isSet()){ isObjectUpdated = true; break;}
        if(ims_config != nullptr && ims_config->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

