/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerProperties {
  #[serde(rename = "diffPath")]
  diff_path: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "serviceName")]
  service_name: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "serviceUser.target")]
  service_user_target: Option<::models::ConfigNodePropertyString>
}

impl ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerProperties {
  pub fn new() -> ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerProperties {
    ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerProperties {
      diff_path: None,
      service_name: None,
      service_user_target: None
    }
  }

  pub fn set_diff_path(&mut self, diff_path: ::models::ConfigNodePropertyString) {
    self.diff_path = Some(diff_path);
  }

  pub fn with_diff_path(mut self, diff_path: ::models::ConfigNodePropertyString) -> ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerProperties {
    self.diff_path = Some(diff_path);
    self
  }

  pub fn diff_path(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.diff_path.as_ref()
  }

  pub fn reset_diff_path(&mut self) {
    self.diff_path = None;
  }

  pub fn set_service_name(&mut self, service_name: ::models::ConfigNodePropertyString) {
    self.service_name = Some(service_name);
  }

  pub fn with_service_name(mut self, service_name: ::models::ConfigNodePropertyString) -> ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerProperties {
    self.service_name = Some(service_name);
    self
  }

  pub fn service_name(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.service_name.as_ref()
  }

  pub fn reset_service_name(&mut self) {
    self.service_name = None;
  }

  pub fn set_service_user_target(&mut self, service_user_target: ::models::ConfigNodePropertyString) {
    self.service_user_target = Some(service_user_target);
  }

  pub fn with_service_user_target(mut self, service_user_target: ::models::ConfigNodePropertyString) -> ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerProperties {
    self.service_user_target = Some(service_user_target);
    self
  }

  pub fn service_user_target(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.service_user_target.as_ref()
  }

  pub fn reset_service_user_target(&mut self) {
    self.service_user_target = None;
  }

}



