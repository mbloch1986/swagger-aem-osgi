/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComAdobeGraniteCsrfImplCSRFFilterProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComAdobeGraniteCsrfImplCSRFFilterProperties::ComAdobeGraniteCsrfImplCSRFFilterProperties()
{
    m_Filter_methodsIsSet = false;
    m_Filter_enable_safe_user_agentsIsSet = false;
    m_Filter_safe_user_agentsIsSet = false;
    m_Filter_excluded_pathsIsSet = false;
}

ComAdobeGraniteCsrfImplCSRFFilterProperties::~ComAdobeGraniteCsrfImplCSRFFilterProperties()
{
}

void ComAdobeGraniteCsrfImplCSRFFilterProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComAdobeGraniteCsrfImplCSRFFilterProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Filter_methodsIsSet)
    {
        val[utility::conversions::to_string_t("filter.methods")] = ModelBase::toJson(m_Filter_methods);
    }
    if(m_Filter_enable_safe_user_agentsIsSet)
    {
        val[utility::conversions::to_string_t("filter.enable.safe.user.agents")] = ModelBase::toJson(m_Filter_enable_safe_user_agents);
    }
    if(m_Filter_safe_user_agentsIsSet)
    {
        val[utility::conversions::to_string_t("filter.safe.user.agents")] = ModelBase::toJson(m_Filter_safe_user_agents);
    }
    if(m_Filter_excluded_pathsIsSet)
    {
        val[utility::conversions::to_string_t("filter.excluded.paths")] = ModelBase::toJson(m_Filter_excluded_paths);
    }

    return val;
}

void ComAdobeGraniteCsrfImplCSRFFilterProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("filter.methods")))
    {
        if(!val[utility::conversions::to_string_t("filter.methods")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("filter.methods")]);
            setFilterMethods( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("filter.enable.safe.user.agents")))
    {
        if(!val[utility::conversions::to_string_t("filter.enable.safe.user.agents")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("filter.enable.safe.user.agents")]);
            setFilterEnableSafeUserAgents( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("filter.safe.user.agents")))
    {
        if(!val[utility::conversions::to_string_t("filter.safe.user.agents")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("filter.safe.user.agents")]);
            setFilterSafeUserAgents( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("filter.excluded.paths")))
    {
        if(!val[utility::conversions::to_string_t("filter.excluded.paths")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("filter.excluded.paths")]);
            setFilterExcludedPaths( newItem );
        }
    }
}

void ComAdobeGraniteCsrfImplCSRFFilterProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Filter_methodsIsSet)
    {
        if (m_Filter_methods.get())
        {
            m_Filter_methods->toMultipart(multipart, utility::conversions::to_string_t("filter.methods."));
        }
    }
    if(m_Filter_enable_safe_user_agentsIsSet)
    {
        if (m_Filter_enable_safe_user_agents.get())
        {
            m_Filter_enable_safe_user_agents->toMultipart(multipart, utility::conversions::to_string_t("filter.enable.safe.user.agents."));
        }
    }
    if(m_Filter_safe_user_agentsIsSet)
    {
        if (m_Filter_safe_user_agents.get())
        {
            m_Filter_safe_user_agents->toMultipart(multipart, utility::conversions::to_string_t("filter.safe.user.agents."));
        }
    }
    if(m_Filter_excluded_pathsIsSet)
    {
        if (m_Filter_excluded_paths.get())
        {
            m_Filter_excluded_paths->toMultipart(multipart, utility::conversions::to_string_t("filter.excluded.paths."));
        }
    }
}

void ComAdobeGraniteCsrfImplCSRFFilterProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("filter.methods")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("filter.methods")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("filter.methods."));
            setFilterMethods( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("filter.enable.safe.user.agents")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("filter.enable.safe.user.agents")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("filter.enable.safe.user.agents."));
            setFilterEnableSafeUserAgents( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("filter.safe.user.agents")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("filter.safe.user.agents")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("filter.safe.user.agents."));
            setFilterSafeUserAgents( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("filter.excluded.paths")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("filter.excluded.paths")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("filter.excluded.paths."));
            setFilterExcludedPaths( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyArray> ComAdobeGraniteCsrfImplCSRFFilterProperties::getFilterMethods() const
{
    return m_Filter_methods;
}


void ComAdobeGraniteCsrfImplCSRFFilterProperties::setFilterMethods(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Filter_methods = value;
    m_Filter_methodsIsSet = true;
}
bool ComAdobeGraniteCsrfImplCSRFFilterProperties::filterMethodsIsSet() const
{
    return m_Filter_methodsIsSet;
}

void ComAdobeGraniteCsrfImplCSRFFilterProperties::unsetFilter_methods()
{
    m_Filter_methodsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> ComAdobeGraniteCsrfImplCSRFFilterProperties::getFilterEnableSafeUserAgents() const
{
    return m_Filter_enable_safe_user_agents;
}


void ComAdobeGraniteCsrfImplCSRFFilterProperties::setFilterEnableSafeUserAgents(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Filter_enable_safe_user_agents = value;
    m_Filter_enable_safe_user_agentsIsSet = true;
}
bool ComAdobeGraniteCsrfImplCSRFFilterProperties::filterEnableSafeUserAgentsIsSet() const
{
    return m_Filter_enable_safe_user_agentsIsSet;
}

void ComAdobeGraniteCsrfImplCSRFFilterProperties::unsetFilter_enable_safe_user_agents()
{
    m_Filter_enable_safe_user_agentsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> ComAdobeGraniteCsrfImplCSRFFilterProperties::getFilterSafeUserAgents() const
{
    return m_Filter_safe_user_agents;
}


void ComAdobeGraniteCsrfImplCSRFFilterProperties::setFilterSafeUserAgents(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Filter_safe_user_agents = value;
    m_Filter_safe_user_agentsIsSet = true;
}
bool ComAdobeGraniteCsrfImplCSRFFilterProperties::filterSafeUserAgentsIsSet() const
{
    return m_Filter_safe_user_agentsIsSet;
}

void ComAdobeGraniteCsrfImplCSRFFilterProperties::unsetFilter_safe_user_agents()
{
    m_Filter_safe_user_agentsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> ComAdobeGraniteCsrfImplCSRFFilterProperties::getFilterExcludedPaths() const
{
    return m_Filter_excluded_paths;
}


void ComAdobeGraniteCsrfImplCSRFFilterProperties::setFilterExcludedPaths(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Filter_excluded_paths = value;
    m_Filter_excluded_pathsIsSet = true;
}
bool ComAdobeGraniteCsrfImplCSRFFilterProperties::filterExcludedPathsIsSet() const
{
    return m_Filter_excluded_pathsIsSet;
}

void ComAdobeGraniteCsrfImplCSRFFilterProperties::unsetFilter_excluded_paths()
{
    m_Filter_excluded_pathsIsSet = false;
}

}
}
}
}

