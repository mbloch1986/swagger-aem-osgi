/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIOrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIOrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties::OAIOrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties(QString json) {
    this->fromJson(json);
}

OAIOrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties::OAIOrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties() {
    this->init();
}

OAIOrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties::~OAIOrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties() {
    
}

void
OAIOrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties::init() {
    m_extensions_isSet = false;
    m_min_duration_ms_isSet = false;
    m_max_duration_ms_isSet = false;
    m_compact_log_format_isSet = false;
}

void
OAIOrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIOrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(extensions, json[QString("extensions")]);
    
    ::OpenAPI::fromJsonValue(min_duration_ms, json[QString("minDurationMs")]);
    
    ::OpenAPI::fromJsonValue(max_duration_ms, json[QString("maxDurationMs")]);
    
    ::OpenAPI::fromJsonValue(compact_log_format, json[QString("compactLogFormat")]);
    
}

QString
OAIOrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIOrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties::asJsonObject() const {
    QJsonObject obj;
	if(extensions.isSet()){
        obj.insert(QString("extensions"), ::OpenAPI::toJsonValue(extensions));
    }
	if(min_duration_ms.isSet()){
        obj.insert(QString("minDurationMs"), ::OpenAPI::toJsonValue(min_duration_ms));
    }
	if(max_duration_ms.isSet()){
        obj.insert(QString("maxDurationMs"), ::OpenAPI::toJsonValue(max_duration_ms));
    }
	if(compact_log_format.isSet()){
        obj.insert(QString("compactLogFormat"), ::OpenAPI::toJsonValue(compact_log_format));
    }
    return obj;
}

OAIConfigNodePropertyArray
OAIOrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties::getExtensions() const {
    return extensions;
}
void
OAIOrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties::setExtensions(const OAIConfigNodePropertyArray &extensions) {
    this->extensions = extensions;
    this->m_extensions_isSet = true;
}

OAIConfigNodePropertyInteger
OAIOrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties::getMinDurationMs() const {
    return min_duration_ms;
}
void
OAIOrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties::setMinDurationMs(const OAIConfigNodePropertyInteger &min_duration_ms) {
    this->min_duration_ms = min_duration_ms;
    this->m_min_duration_ms_isSet = true;
}

OAIConfigNodePropertyInteger
OAIOrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties::getMaxDurationMs() const {
    return max_duration_ms;
}
void
OAIOrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties::setMaxDurationMs(const OAIConfigNodePropertyInteger &max_duration_ms) {
    this->max_duration_ms = max_duration_ms;
    this->m_max_duration_ms_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIOrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties::getCompactLogFormat() const {
    return compact_log_format;
}
void
OAIOrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties::setCompactLogFormat(const OAIConfigNodePropertyBoolean &compact_log_format) {
    this->compact_log_format = compact_log_format;
    this->m_compact_log_format_isSet = true;
}


bool
OAIOrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(extensions.isSet()){ isObjectUpdated = true; break;}
    
        if(min_duration_ms.isSet()){ isObjectUpdated = true; break;}
    
        if(max_duration_ms.isSet()){ isObjectUpdated = true; break;}
    
        if(compact_log_format.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

