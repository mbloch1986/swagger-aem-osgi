/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ComDayCrxSecurityTokenImplTokenCleanupTaskProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComDayCrxSecurityTokenImplTokenCleanupTaskProperties::ComDayCrxSecurityTokenImplTokenCleanupTaskProperties()
{
    m_Enable_token_cleanup_taskIsSet = false;
    m_Scheduler_expressionIsSet = false;
    m_Batch_sizeIsSet = false;
    
}

ComDayCrxSecurityTokenImplTokenCleanupTaskProperties::~ComDayCrxSecurityTokenImplTokenCleanupTaskProperties()
{
}

void ComDayCrxSecurityTokenImplTokenCleanupTaskProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json ComDayCrxSecurityTokenImplTokenCleanupTaskProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_Enable_token_cleanup_taskIsSet)
    {
        val["enable.token.cleanup.task"] = ModelBase::toJson(m_Enable_token_cleanup_task);
    }
    if(m_Scheduler_expressionIsSet)
    {
        val["scheduler.expression"] = ModelBase::toJson(m_Scheduler_expression);
    }
    if(m_Batch_sizeIsSet)
    {
        val["batch.size"] = ModelBase::toJson(m_Batch_size);
    }
    

    return val;
}

void ComDayCrxSecurityTokenImplTokenCleanupTaskProperties::fromJson(nlohmann::json& val)
{
    if(val.find("enable.token.cleanup.task") != val.end())
    {
        if(!val["enable.token.cleanup.task"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["enable.token.cleanup.task"]);
            setEnableTokenCleanupTask( newItem );
        }
        
    }
    if(val.find("scheduler.expression") != val.end())
    {
        if(!val["scheduler.expression"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["scheduler.expression"]);
            setSchedulerExpression( newItem );
        }
        
    }
    if(val.find("batch.size") != val.end())
    {
        if(!val["batch.size"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["batch.size"]);
            setBatchSize( newItem );
        }
        
    }
    
}


ConfigNodePropertyBoolean ComDayCrxSecurityTokenImplTokenCleanupTaskProperties::getEnableTokenCleanupTask() const
{
    return m_Enable_token_cleanup_task;
}
void ComDayCrxSecurityTokenImplTokenCleanupTaskProperties::setEnableTokenCleanupTask(ConfigNodePropertyBoolean const& value)
{
    m_Enable_token_cleanup_task = value;
    m_Enable_token_cleanup_taskIsSet = true;
}
bool ComDayCrxSecurityTokenImplTokenCleanupTaskProperties::enableTokenCleanupTaskIsSet() const
{
    return m_Enable_token_cleanup_taskIsSet;
}
void ComDayCrxSecurityTokenImplTokenCleanupTaskProperties::unsetEnable_token_cleanup_task()
{
    m_Enable_token_cleanup_taskIsSet = false;
}
ConfigNodePropertyString ComDayCrxSecurityTokenImplTokenCleanupTaskProperties::getSchedulerExpression() const
{
    return m_Scheduler_expression;
}
void ComDayCrxSecurityTokenImplTokenCleanupTaskProperties::setSchedulerExpression(ConfigNodePropertyString const& value)
{
    m_Scheduler_expression = value;
    m_Scheduler_expressionIsSet = true;
}
bool ComDayCrxSecurityTokenImplTokenCleanupTaskProperties::schedulerExpressionIsSet() const
{
    return m_Scheduler_expressionIsSet;
}
void ComDayCrxSecurityTokenImplTokenCleanupTaskProperties::unsetScheduler_expression()
{
    m_Scheduler_expressionIsSet = false;
}
ConfigNodePropertyInteger ComDayCrxSecurityTokenImplTokenCleanupTaskProperties::getBatchSize() const
{
    return m_Batch_size;
}
void ComDayCrxSecurityTokenImplTokenCleanupTaskProperties::setBatchSize(ConfigNodePropertyInteger const& value)
{
    m_Batch_size = value;
    m_Batch_sizeIsSet = true;
}
bool ComDayCrxSecurityTokenImplTokenCleanupTaskProperties::batchSizeIsSet() const
{
    return m_Batch_sizeIsSet;
}
void ComDayCrxSecurityTokenImplTokenCleanupTaskProperties::unsetBatch_size()
{
    m_Batch_sizeIsSet = false;
}

}
}
}
}

