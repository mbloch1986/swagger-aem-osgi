/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ComDayCqReplicationImplAgentManagerImplProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComDayCqReplicationImplAgentManagerImplProperties::ComDayCqReplicationImplAgentManagerImplProperties()
{
    m_Job_topicsIsSet = false;
    m_ServiceUser_targetIsSet = false;
    m_AgentProvider_targetIsSet = false;
    
}

ComDayCqReplicationImplAgentManagerImplProperties::~ComDayCqReplicationImplAgentManagerImplProperties()
{
}

void ComDayCqReplicationImplAgentManagerImplProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json ComDayCqReplicationImplAgentManagerImplProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_Job_topicsIsSet)
    {
        val["job.topics"] = ModelBase::toJson(m_Job_topics);
    }
    if(m_ServiceUser_targetIsSet)
    {
        val["serviceUser.target"] = ModelBase::toJson(m_ServiceUser_target);
    }
    if(m_AgentProvider_targetIsSet)
    {
        val["agentProvider.target"] = ModelBase::toJson(m_AgentProvider_target);
    }
    

    return val;
}

void ComDayCqReplicationImplAgentManagerImplProperties::fromJson(nlohmann::json& val)
{
    if(val.find("job.topics") != val.end())
    {
        if(!val["job.topics"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["job.topics"]);
            setJobTopics( newItem );
        }
        
    }
    if(val.find("serviceUser.target") != val.end())
    {
        if(!val["serviceUser.target"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["serviceUser.target"]);
            setServiceUserTarget( newItem );
        }
        
    }
    if(val.find("agentProvider.target") != val.end())
    {
        if(!val["agentProvider.target"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["agentProvider.target"]);
            setAgentProviderTarget( newItem );
        }
        
    }
    
}


ConfigNodePropertyString ComDayCqReplicationImplAgentManagerImplProperties::getJobTopics() const
{
    return m_Job_topics;
}
void ComDayCqReplicationImplAgentManagerImplProperties::setJobTopics(ConfigNodePropertyString const& value)
{
    m_Job_topics = value;
    m_Job_topicsIsSet = true;
}
bool ComDayCqReplicationImplAgentManagerImplProperties::jobTopicsIsSet() const
{
    return m_Job_topicsIsSet;
}
void ComDayCqReplicationImplAgentManagerImplProperties::unsetJob_topics()
{
    m_Job_topicsIsSet = false;
}
ConfigNodePropertyString ComDayCqReplicationImplAgentManagerImplProperties::getServiceUserTarget() const
{
    return m_ServiceUser_target;
}
void ComDayCqReplicationImplAgentManagerImplProperties::setServiceUserTarget(ConfigNodePropertyString const& value)
{
    m_ServiceUser_target = value;
    m_ServiceUser_targetIsSet = true;
}
bool ComDayCqReplicationImplAgentManagerImplProperties::serviceUserTargetIsSet() const
{
    return m_ServiceUser_targetIsSet;
}
void ComDayCqReplicationImplAgentManagerImplProperties::unsetServiceUser_target()
{
    m_ServiceUser_targetIsSet = false;
}
ConfigNodePropertyString ComDayCqReplicationImplAgentManagerImplProperties::getAgentProviderTarget() const
{
    return m_AgentProvider_target;
}
void ComDayCqReplicationImplAgentManagerImplProperties::setAgentProviderTarget(ConfigNodePropertyString const& value)
{
    m_AgentProvider_target = value;
    m_AgentProvider_targetIsSet = true;
}
bool ComDayCqReplicationImplAgentManagerImplProperties::agentProviderTargetIsSet() const
{
    return m_AgentProvider_targetIsSet;
}
void ComDayCqReplicationImplAgentManagerImplProperties::unsetAgentProvider_target()
{
    m_AgentProvider_targetIsSet = false;
}

}
}
}
}

