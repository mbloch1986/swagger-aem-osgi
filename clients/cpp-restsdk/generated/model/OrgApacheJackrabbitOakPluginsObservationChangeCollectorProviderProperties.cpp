/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderProperties::OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderProperties()
{
    m_MaxItemsIsSet = false;
    m_MaxPathDepthIsSet = false;
    m_EnabledIsSet = false;
}

OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderProperties::~OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderProperties()
{
}

void OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderProperties::validate()
{
    // TODO: implement validation
}

web::json::value OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_MaxItemsIsSet)
    {
        val[utility::conversions::to_string_t("maxItems")] = ModelBase::toJson(m_MaxItems);
    }
    if(m_MaxPathDepthIsSet)
    {
        val[utility::conversions::to_string_t("maxPathDepth")] = ModelBase::toJson(m_MaxPathDepth);
    }
    if(m_EnabledIsSet)
    {
        val[utility::conversions::to_string_t("enabled")] = ModelBase::toJson(m_Enabled);
    }

    return val;
}

void OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("maxItems")))
    {
        if(!val[utility::conversions::to_string_t("maxItems")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("maxItems")]);
            setMaxItems( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("maxPathDepth")))
    {
        if(!val[utility::conversions::to_string_t("maxPathDepth")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("maxPathDepth")]);
            setMaxPathDepth( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("enabled")))
    {
        if(!val[utility::conversions::to_string_t("enabled")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("enabled")]);
            setEnabled( newItem );
        }
    }
}

void OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_MaxItemsIsSet)
    {
        if (m_MaxItems.get())
        {
            m_MaxItems->toMultipart(multipart, utility::conversions::to_string_t("maxItems."));
        }
    }
    if(m_MaxPathDepthIsSet)
    {
        if (m_MaxPathDepth.get())
        {
            m_MaxPathDepth->toMultipart(multipart, utility::conversions::to_string_t("maxPathDepth."));
        }
    }
    if(m_EnabledIsSet)
    {
        if (m_Enabled.get())
        {
            m_Enabled->toMultipart(multipart, utility::conversions::to_string_t("enabled."));
        }
    }
}

void OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("maxItems")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("maxItems")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("maxItems."));
            setMaxItems( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("maxPathDepth")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("maxPathDepth")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("maxPathDepth."));
            setMaxPathDepth( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("enabled")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("enabled")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("enabled."));
            setEnabled( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderProperties::getMaxItems() const
{
    return m_MaxItems;
}


void OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderProperties::setMaxItems(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_MaxItems = value;
    m_MaxItemsIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderProperties::maxItemsIsSet() const
{
    return m_MaxItemsIsSet;
}

void OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderProperties::unsetMaxItems()
{
    m_MaxItemsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderProperties::getMaxPathDepth() const
{
    return m_MaxPathDepth;
}


void OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderProperties::setMaxPathDepth(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_MaxPathDepth = value;
    m_MaxPathDepthIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderProperties::maxPathDepthIsSet() const
{
    return m_MaxPathDepthIsSet;
}

void OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderProperties::unsetMaxPathDepth()
{
    m_MaxPathDepthIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderProperties::getEnabled() const
{
    return m_Enabled;
}


void OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderProperties::setEnabled(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Enabled = value;
    m_EnabledIsSet = true;
}
bool OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderProperties::enabledIsSet() const
{
    return m_EnabledIsSet;
}

void OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderProperties::unsetEnabled()
{
    m_EnabledIsSet = false;
}

}
}
}
}

