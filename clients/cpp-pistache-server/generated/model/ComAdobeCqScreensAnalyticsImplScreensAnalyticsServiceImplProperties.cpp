/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplProperties::ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplProperties()
{
    m_Com_adobe_cq_screens_analytics_impl_urlIsSet = false;
    m_Com_adobe_cq_screens_analytics_impl_apikeyIsSet = false;
    m_Com_adobe_cq_screens_analytics_impl_projectIsSet = false;
    m_Com_adobe_cq_screens_analytics_impl_environmentIsSet = false;
    m_Com_adobe_cq_screens_analytics_impl_sendFrequencyIsSet = false;
    
}

ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplProperties::~ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplProperties()
{
}

void ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_Com_adobe_cq_screens_analytics_impl_urlIsSet)
    {
        val["com.adobe.cq.screens.analytics.impl.url"] = ModelBase::toJson(m_Com_adobe_cq_screens_analytics_impl_url);
    }
    if(m_Com_adobe_cq_screens_analytics_impl_apikeyIsSet)
    {
        val["com.adobe.cq.screens.analytics.impl.apikey"] = ModelBase::toJson(m_Com_adobe_cq_screens_analytics_impl_apikey);
    }
    if(m_Com_adobe_cq_screens_analytics_impl_projectIsSet)
    {
        val["com.adobe.cq.screens.analytics.impl.project"] = ModelBase::toJson(m_Com_adobe_cq_screens_analytics_impl_project);
    }
    if(m_Com_adobe_cq_screens_analytics_impl_environmentIsSet)
    {
        val["com.adobe.cq.screens.analytics.impl.environment"] = ModelBase::toJson(m_Com_adobe_cq_screens_analytics_impl_environment);
    }
    if(m_Com_adobe_cq_screens_analytics_impl_sendFrequencyIsSet)
    {
        val["com.adobe.cq.screens.analytics.impl.sendFrequency"] = ModelBase::toJson(m_Com_adobe_cq_screens_analytics_impl_sendFrequency);
    }
    

    return val;
}

void ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplProperties::fromJson(nlohmann::json& val)
{
    if(val.find("com.adobe.cq.screens.analytics.impl.url") != val.end())
    {
        if(!val["com.adobe.cq.screens.analytics.impl.url"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["com.adobe.cq.screens.analytics.impl.url"]);
            setComAdobeCqScreensAnalyticsImplUrl( newItem );
        }
        
    }
    if(val.find("com.adobe.cq.screens.analytics.impl.apikey") != val.end())
    {
        if(!val["com.adobe.cq.screens.analytics.impl.apikey"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["com.adobe.cq.screens.analytics.impl.apikey"]);
            setComAdobeCqScreensAnalyticsImplApikey( newItem );
        }
        
    }
    if(val.find("com.adobe.cq.screens.analytics.impl.project") != val.end())
    {
        if(!val["com.adobe.cq.screens.analytics.impl.project"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["com.adobe.cq.screens.analytics.impl.project"]);
            setComAdobeCqScreensAnalyticsImplProject( newItem );
        }
        
    }
    if(val.find("com.adobe.cq.screens.analytics.impl.environment") != val.end())
    {
        if(!val["com.adobe.cq.screens.analytics.impl.environment"].is_null())
        {
            ConfigNodePropertyDropDown newItem;
            newItem.fromJson(val["com.adobe.cq.screens.analytics.impl.environment"]);
            setComAdobeCqScreensAnalyticsImplEnvironment( newItem );
        }
        
    }
    if(val.find("com.adobe.cq.screens.analytics.impl.sendFrequency") != val.end())
    {
        if(!val["com.adobe.cq.screens.analytics.impl.sendFrequency"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["com.adobe.cq.screens.analytics.impl.sendFrequency"]);
            setComAdobeCqScreensAnalyticsImplSendFrequency( newItem );
        }
        
    }
    
}


ConfigNodePropertyString ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplProperties::getComAdobeCqScreensAnalyticsImplUrl() const
{
    return m_Com_adobe_cq_screens_analytics_impl_url;
}
void ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplProperties::setComAdobeCqScreensAnalyticsImplUrl(ConfigNodePropertyString const& value)
{
    m_Com_adobe_cq_screens_analytics_impl_url = value;
    m_Com_adobe_cq_screens_analytics_impl_urlIsSet = true;
}
bool ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplProperties::comAdobeCqScreensAnalyticsImplUrlIsSet() const
{
    return m_Com_adobe_cq_screens_analytics_impl_urlIsSet;
}
void ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplProperties::unsetCom_adobe_cq_screens_analytics_impl_url()
{
    m_Com_adobe_cq_screens_analytics_impl_urlIsSet = false;
}
ConfigNodePropertyString ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplProperties::getComAdobeCqScreensAnalyticsImplApikey() const
{
    return m_Com_adobe_cq_screens_analytics_impl_apikey;
}
void ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplProperties::setComAdobeCqScreensAnalyticsImplApikey(ConfigNodePropertyString const& value)
{
    m_Com_adobe_cq_screens_analytics_impl_apikey = value;
    m_Com_adobe_cq_screens_analytics_impl_apikeyIsSet = true;
}
bool ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplProperties::comAdobeCqScreensAnalyticsImplApikeyIsSet() const
{
    return m_Com_adobe_cq_screens_analytics_impl_apikeyIsSet;
}
void ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplProperties::unsetCom_adobe_cq_screens_analytics_impl_apikey()
{
    m_Com_adobe_cq_screens_analytics_impl_apikeyIsSet = false;
}
ConfigNodePropertyString ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplProperties::getComAdobeCqScreensAnalyticsImplProject() const
{
    return m_Com_adobe_cq_screens_analytics_impl_project;
}
void ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplProperties::setComAdobeCqScreensAnalyticsImplProject(ConfigNodePropertyString const& value)
{
    m_Com_adobe_cq_screens_analytics_impl_project = value;
    m_Com_adobe_cq_screens_analytics_impl_projectIsSet = true;
}
bool ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplProperties::comAdobeCqScreensAnalyticsImplProjectIsSet() const
{
    return m_Com_adobe_cq_screens_analytics_impl_projectIsSet;
}
void ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplProperties::unsetCom_adobe_cq_screens_analytics_impl_project()
{
    m_Com_adobe_cq_screens_analytics_impl_projectIsSet = false;
}
ConfigNodePropertyDropDown ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplProperties::getComAdobeCqScreensAnalyticsImplEnvironment() const
{
    return m_Com_adobe_cq_screens_analytics_impl_environment;
}
void ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplProperties::setComAdobeCqScreensAnalyticsImplEnvironment(ConfigNodePropertyDropDown const& value)
{
    m_Com_adobe_cq_screens_analytics_impl_environment = value;
    m_Com_adobe_cq_screens_analytics_impl_environmentIsSet = true;
}
bool ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplProperties::comAdobeCqScreensAnalyticsImplEnvironmentIsSet() const
{
    return m_Com_adobe_cq_screens_analytics_impl_environmentIsSet;
}
void ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplProperties::unsetCom_adobe_cq_screens_analytics_impl_environment()
{
    m_Com_adobe_cq_screens_analytics_impl_environmentIsSet = false;
}
ConfigNodePropertyInteger ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplProperties::getComAdobeCqScreensAnalyticsImplSendFrequency() const
{
    return m_Com_adobe_cq_screens_analytics_impl_sendFrequency;
}
void ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplProperties::setComAdobeCqScreensAnalyticsImplSendFrequency(ConfigNodePropertyInteger const& value)
{
    m_Com_adobe_cq_screens_analytics_impl_sendFrequency = value;
    m_Com_adobe_cq_screens_analytics_impl_sendFrequencyIsSet = true;
}
bool ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplProperties::comAdobeCqScreensAnalyticsImplSendFrequencyIsSet() const
{
    return m_Com_adobe_cq_screens_analytics_impl_sendFrequencyIsSet;
}
void ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplProperties::unsetCom_adobe_cq_screens_analytics_impl_sendFrequency()
{
    m_Com_adobe_cq_screens_analytics_impl_sendFrequencyIsSet = false;
}

}
}
}
}

