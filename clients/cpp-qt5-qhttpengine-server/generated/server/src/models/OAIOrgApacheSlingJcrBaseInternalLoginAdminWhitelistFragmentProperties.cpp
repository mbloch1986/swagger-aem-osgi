/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIOrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIOrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentProperties::OAIOrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentProperties(QString json) {
    this->fromJson(json);
}

OAIOrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentProperties::OAIOrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentProperties() {
    this->init();
}

OAIOrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentProperties::~OAIOrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentProperties() {
    
}

void
OAIOrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentProperties::init() {
    m_whitelist_name_isSet = false;
    m_whitelist_bundles_isSet = false;
}

void
OAIOrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIOrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(whitelist_name, json[QString("whitelist.name")]);
    
    ::OpenAPI::fromJsonValue(whitelist_bundles, json[QString("whitelist.bundles")]);
    
}

QString
OAIOrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIOrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentProperties::asJsonObject() const {
    QJsonObject obj;
	if(whitelist_name.isSet()){
        obj.insert(QString("whitelist.name"), ::OpenAPI::toJsonValue(whitelist_name));
    }
	if(whitelist_bundles.isSet()){
        obj.insert(QString("whitelist.bundles"), ::OpenAPI::toJsonValue(whitelist_bundles));
    }
    return obj;
}

OAIConfigNodePropertyString
OAIOrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentProperties::getWhitelistName() const {
    return whitelist_name;
}
void
OAIOrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentProperties::setWhitelistName(const OAIConfigNodePropertyString &whitelist_name) {
    this->whitelist_name = whitelist_name;
    this->m_whitelist_name_isSet = true;
}

OAIConfigNodePropertyArray
OAIOrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentProperties::getWhitelistBundles() const {
    return whitelist_bundles;
}
void
OAIOrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentProperties::setWhitelistBundles(const OAIConfigNodePropertyArray &whitelist_bundles) {
    this->whitelist_bundles = whitelist_bundles;
    this->m_whitelist_bundles_isSet = true;
}


bool
OAIOrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(whitelist_name.isSet()){ isObjectUpdated = true; break;}
    
        if(whitelist_bundles.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

