/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComAdobeCqCdnRewriterImplAwsCloudFrontRewriterProperties {
  #[serde(rename = "service.ranking")]
  service_ranking: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "keypair.id")]
  keypair_id: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "keypair.alias")]
  keypair_alias: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "cdnrewriter.attributes")]
  cdnrewriter_attributes: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "cdn.rewriter.distribution.domain")]
  cdn_rewriter_distribution_domain: Option<::models::ConfigNodePropertyString>
}

impl ComAdobeCqCdnRewriterImplAwsCloudFrontRewriterProperties {
  pub fn new() -> ComAdobeCqCdnRewriterImplAwsCloudFrontRewriterProperties {
    ComAdobeCqCdnRewriterImplAwsCloudFrontRewriterProperties {
      service_ranking: None,
      keypair_id: None,
      keypair_alias: None,
      cdnrewriter_attributes: None,
      cdn_rewriter_distribution_domain: None
    }
  }

  pub fn set_service_ranking(&mut self, service_ranking: ::models::ConfigNodePropertyInteger) {
    self.service_ranking = Some(service_ranking);
  }

  pub fn with_service_ranking(mut self, service_ranking: ::models::ConfigNodePropertyInteger) -> ComAdobeCqCdnRewriterImplAwsCloudFrontRewriterProperties {
    self.service_ranking = Some(service_ranking);
    self
  }

  pub fn service_ranking(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.service_ranking.as_ref()
  }

  pub fn reset_service_ranking(&mut self) {
    self.service_ranking = None;
  }

  pub fn set_keypair_id(&mut self, keypair_id: ::models::ConfigNodePropertyString) {
    self.keypair_id = Some(keypair_id);
  }

  pub fn with_keypair_id(mut self, keypair_id: ::models::ConfigNodePropertyString) -> ComAdobeCqCdnRewriterImplAwsCloudFrontRewriterProperties {
    self.keypair_id = Some(keypair_id);
    self
  }

  pub fn keypair_id(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.keypair_id.as_ref()
  }

  pub fn reset_keypair_id(&mut self) {
    self.keypair_id = None;
  }

  pub fn set_keypair_alias(&mut self, keypair_alias: ::models::ConfigNodePropertyString) {
    self.keypair_alias = Some(keypair_alias);
  }

  pub fn with_keypair_alias(mut self, keypair_alias: ::models::ConfigNodePropertyString) -> ComAdobeCqCdnRewriterImplAwsCloudFrontRewriterProperties {
    self.keypair_alias = Some(keypair_alias);
    self
  }

  pub fn keypair_alias(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.keypair_alias.as_ref()
  }

  pub fn reset_keypair_alias(&mut self) {
    self.keypair_alias = None;
  }

  pub fn set_cdnrewriter_attributes(&mut self, cdnrewriter_attributes: ::models::ConfigNodePropertyArray) {
    self.cdnrewriter_attributes = Some(cdnrewriter_attributes);
  }

  pub fn with_cdnrewriter_attributes(mut self, cdnrewriter_attributes: ::models::ConfigNodePropertyArray) -> ComAdobeCqCdnRewriterImplAwsCloudFrontRewriterProperties {
    self.cdnrewriter_attributes = Some(cdnrewriter_attributes);
    self
  }

  pub fn cdnrewriter_attributes(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.cdnrewriter_attributes.as_ref()
  }

  pub fn reset_cdnrewriter_attributes(&mut self) {
    self.cdnrewriter_attributes = None;
  }

  pub fn set_cdn_rewriter_distribution_domain(&mut self, cdn_rewriter_distribution_domain: ::models::ConfigNodePropertyString) {
    self.cdn_rewriter_distribution_domain = Some(cdn_rewriter_distribution_domain);
  }

  pub fn with_cdn_rewriter_distribution_domain(mut self, cdn_rewriter_distribution_domain: ::models::ConfigNodePropertyString) -> ComAdobeCqCdnRewriterImplAwsCloudFrontRewriterProperties {
    self.cdn_rewriter_distribution_domain = Some(cdn_rewriter_distribution_domain);
    self
  }

  pub fn cdn_rewriter_distribution_domain(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.cdn_rewriter_distribution_domain.as_ref()
  }

  pub fn reset_cdn_rewriter_distribution_domain(&mut self) {
    self.cdn_rewriter_distribution_domain = None;
  }

}



