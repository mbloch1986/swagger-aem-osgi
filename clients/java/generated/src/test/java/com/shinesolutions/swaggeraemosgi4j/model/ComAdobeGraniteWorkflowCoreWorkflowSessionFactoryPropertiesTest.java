/*
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.shinesolutions.swaggeraemosgi4j.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.shinesolutions.swaggeraemosgi4j.model.ConfigNodePropertyArray;
import com.shinesolutions.swaggeraemosgi4j.model.ConfigNodePropertyBoolean;
import com.shinesolutions.swaggeraemosgi4j.model.ConfigNodePropertyDropDown;
import com.shinesolutions.swaggeraemosgi4j.model.ConfigNodePropertyInteger;
import com.shinesolutions.swaggeraemosgi4j.model.ConfigNodePropertyString;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;


/**
 * Model tests for ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties
 */
public class ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryPropertiesTest {
    private final ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties model = new ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties();

    /**
     * Model tests for ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties
     */
    @Test
    public void testComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties() {
        // TODO: test ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties
    }

    /**
     * Test the property 'graniteWorkflowinboxSortPropertyName'
     */
    @Test
    public void graniteWorkflowinboxSortPropertyNameTest() {
        // TODO: test graniteWorkflowinboxSortPropertyName
    }

    /**
     * Test the property 'graniteWorkflowinboxSortOrder'
     */
    @Test
    public void graniteWorkflowinboxSortOrderTest() {
        // TODO: test graniteWorkflowinboxSortOrder
    }

    /**
     * Test the property 'cqWorkflowJobRetry'
     */
    @Test
    public void cqWorkflowJobRetryTest() {
        // TODO: test cqWorkflowJobRetry
    }

    /**
     * Test the property 'cqWorkflowSuperuser'
     */
    @Test
    public void cqWorkflowSuperuserTest() {
        // TODO: test cqWorkflowSuperuser
    }

    /**
     * Test the property 'graniteWorkflowInboxQuerySize'
     */
    @Test
    public void graniteWorkflowInboxQuerySizeTest() {
        // TODO: test graniteWorkflowInboxQuerySize
    }

    /**
     * Test the property 'graniteWorkflowAdminUserGroupFilter'
     */
    @Test
    public void graniteWorkflowAdminUserGroupFilterTest() {
        // TODO: test graniteWorkflowAdminUserGroupFilter
    }

    /**
     * Test the property 'graniteWorkflowEnforceWorkitemAssigneePermissions'
     */
    @Test
    public void graniteWorkflowEnforceWorkitemAssigneePermissionsTest() {
        // TODO: test graniteWorkflowEnforceWorkitemAssigneePermissions
    }

    /**
     * Test the property 'graniteWorkflowEnforceWorkflowInitiatorPermissions'
     */
    @Test
    public void graniteWorkflowEnforceWorkflowInitiatorPermissionsTest() {
        // TODO: test graniteWorkflowEnforceWorkflowInitiatorPermissions
    }

    /**
     * Test the property 'graniteWorkflowInjectTenantIdInJobTopics'
     */
    @Test
    public void graniteWorkflowInjectTenantIdInJobTopicsTest() {
        // TODO: test graniteWorkflowInjectTenantIdInJobTopics
    }

    /**
     * Test the property 'graniteWorkflowMaxPurgeSaveThreshold'
     */
    @Test
    public void graniteWorkflowMaxPurgeSaveThresholdTest() {
        // TODO: test graniteWorkflowMaxPurgeSaveThreshold
    }

    /**
     * Test the property 'graniteWorkflowMaxPurgeQueryCount'
     */
    @Test
    public void graniteWorkflowMaxPurgeQueryCountTest() {
        // TODO: test graniteWorkflowMaxPurgeQueryCount
    }

}
