/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties.h
 *
 * 
 */

#ifndef ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties_H_
#define ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties_H_


#include "ModelBase.h"

#include "ConfigNodePropertyBoolean.h"
#include "ConfigNodePropertyInteger.h"
#include "ConfigNodePropertyArray.h"
#include "ConfigNodePropertyString.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties
    : public ModelBase
{
public:
    ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties();
    virtual ~ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    nlohmann::json toJson() const override;
    void fromJson(nlohmann::json& json) override;

    /////////////////////////////////////////////
    /// ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties members

    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyArray getMessageProperties() const;
    void setMessageProperties(ConfigNodePropertyArray const& value);
    bool messagePropertiesIsSet() const;
    void unsetMessage_properties();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getMessageBoxSizeLimit() const;
    void setMessageBoxSizeLimit(ConfigNodePropertyInteger const& value);
    bool messageBoxSizeLimitIsSet() const;
    void unsetMessageBoxSizeLimit();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getMessageCountLimit() const;
    void setMessageCountLimit(ConfigNodePropertyInteger const& value);
    bool messageCountLimitIsSet() const;
    void unsetMessageCountLimit();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyBoolean getNotifyFailure() const;
    void setNotifyFailure(ConfigNodePropertyBoolean const& value);
    bool notifyFailureIsSet() const;
    void unsetNotifyFailure();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getFailureMessageFrom() const;
    void setFailureMessageFrom(ConfigNodePropertyString const& value);
    bool failureMessageFromIsSet() const;
    void unsetFailureMessageFrom();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getFailureTemplatePath() const;
    void setFailureTemplatePath(ConfigNodePropertyString const& value);
    bool failureTemplatePathIsSet() const;
    void unsetFailureTemplatePath();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getMaxRetries() const;
    void setMaxRetries(ConfigNodePropertyInteger const& value);
    bool maxRetriesIsSet() const;
    void unsetMaxRetries();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getMinWaitBetweenRetries() const;
    void setMinWaitBetweenRetries(ConfigNodePropertyInteger const& value);
    bool minWaitBetweenRetriesIsSet() const;
    void unsetMinWaitBetweenRetries();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getCountUpdatePoolSize() const;
    void setCountUpdatePoolSize(ConfigNodePropertyInteger const& value);
    bool countUpdatePoolSizeIsSet() const;
    void unsetCountUpdatePoolSize();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getInboxPath() const;
    void setInboxPath(ConfigNodePropertyString const& value);
    bool inboxPathIsSet() const;
    void unsetInbox_path();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getSentitemsPath() const;
    void setSentitemsPath(ConfigNodePropertyString const& value);
    bool sentitemsPathIsSet() const;
    void unsetSentitems_path();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyBoolean getSupportAttachments() const;
    void setSupportAttachments(ConfigNodePropertyBoolean const& value);
    bool supportAttachmentsIsSet() const;
    void unsetSupportAttachments();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyBoolean getSupportGroupMessaging() const;
    void setSupportGroupMessaging(ConfigNodePropertyBoolean const& value);
    bool supportGroupMessagingIsSet() const;
    void unsetSupportGroupMessaging();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getMaxTotalRecipients() const;
    void setMaxTotalRecipients(ConfigNodePropertyInteger const& value);
    bool maxTotalRecipientsIsSet() const;
    void unsetMaxTotalRecipients();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getBatchSize() const;
    void setBatchSize(ConfigNodePropertyInteger const& value);
    bool batchSizeIsSet() const;
    void unsetBatchSize();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getMaxTotalAttachmentSize() const;
    void setMaxTotalAttachmentSize(ConfigNodePropertyInteger const& value);
    bool maxTotalAttachmentSizeIsSet() const;
    void unsetMaxTotalAttachmentSize();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyArray getAttachmentTypeBlacklist() const;
    void setAttachmentTypeBlacklist(ConfigNodePropertyArray const& value);
    bool attachmentTypeBlacklistIsSet() const;
    void unsetAttachmentTypeBlacklist();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyArray getAllowedAttachmentTypes() const;
    void setAllowedAttachmentTypes(ConfigNodePropertyArray const& value);
    bool allowedAttachmentTypesIsSet() const;
    void unsetAllowedAttachmentTypes();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getServiceSelector() const;
    void setServiceSelector(ConfigNodePropertyString const& value);
    bool serviceSelectorIsSet() const;
    void unsetServiceSelector();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyArray getFieldWhitelist() const;
    void setFieldWhitelist(ConfigNodePropertyArray const& value);
    bool fieldWhitelistIsSet() const;
    void unsetFieldWhitelist();

protected:
    ConfigNodePropertyArray m_Message_properties;
    bool m_Message_propertiesIsSet;
    ConfigNodePropertyInteger m_MessageBoxSizeLimit;
    bool m_MessageBoxSizeLimitIsSet;
    ConfigNodePropertyInteger m_MessageCountLimit;
    bool m_MessageCountLimitIsSet;
    ConfigNodePropertyBoolean m_NotifyFailure;
    bool m_NotifyFailureIsSet;
    ConfigNodePropertyString m_FailureMessageFrom;
    bool m_FailureMessageFromIsSet;
    ConfigNodePropertyString m_FailureTemplatePath;
    bool m_FailureTemplatePathIsSet;
    ConfigNodePropertyInteger m_MaxRetries;
    bool m_MaxRetriesIsSet;
    ConfigNodePropertyInteger m_MinWaitBetweenRetries;
    bool m_MinWaitBetweenRetriesIsSet;
    ConfigNodePropertyInteger m_CountUpdatePoolSize;
    bool m_CountUpdatePoolSizeIsSet;
    ConfigNodePropertyString m_Inbox_path;
    bool m_Inbox_pathIsSet;
    ConfigNodePropertyString m_Sentitems_path;
    bool m_Sentitems_pathIsSet;
    ConfigNodePropertyBoolean m_SupportAttachments;
    bool m_SupportAttachmentsIsSet;
    ConfigNodePropertyBoolean m_SupportGroupMessaging;
    bool m_SupportGroupMessagingIsSet;
    ConfigNodePropertyInteger m_MaxTotalRecipients;
    bool m_MaxTotalRecipientsIsSet;
    ConfigNodePropertyInteger m_BatchSize;
    bool m_BatchSizeIsSet;
    ConfigNodePropertyInteger m_MaxTotalAttachmentSize;
    bool m_MaxTotalAttachmentSizeIsSet;
    ConfigNodePropertyArray m_AttachmentTypeBlacklist;
    bool m_AttachmentTypeBlacklistIsSet;
    ConfigNodePropertyArray m_AllowedAttachmentTypes;
    bool m_AllowedAttachmentTypesIsSet;
    ConfigNodePropertyString m_ServiceSelector;
    bool m_ServiceSelectorIsSet;
    ConfigNodePropertyArray m_FieldWhitelist;
    bool m_FieldWhitelistIsSet;
};

}
}
}
}

#endif /* ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties_H_ */
