/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComDayCqCommonsImplExternalizerImplProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComDayCqCommonsImplExternalizerImplProperties::ComDayCqCommonsImplExternalizerImplProperties()
{
    m_Externalizer_domainsIsSet = false;
    m_Externalizer_hostIsSet = false;
    m_Externalizer_contextpathIsSet = false;
    m_Externalizer_encodedpathIsSet = false;
}

ComDayCqCommonsImplExternalizerImplProperties::~ComDayCqCommonsImplExternalizerImplProperties()
{
}

void ComDayCqCommonsImplExternalizerImplProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComDayCqCommonsImplExternalizerImplProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Externalizer_domainsIsSet)
    {
        val[utility::conversions::to_string_t("externalizer.domains")] = ModelBase::toJson(m_Externalizer_domains);
    }
    if(m_Externalizer_hostIsSet)
    {
        val[utility::conversions::to_string_t("externalizer.host")] = ModelBase::toJson(m_Externalizer_host);
    }
    if(m_Externalizer_contextpathIsSet)
    {
        val[utility::conversions::to_string_t("externalizer.contextpath")] = ModelBase::toJson(m_Externalizer_contextpath);
    }
    if(m_Externalizer_encodedpathIsSet)
    {
        val[utility::conversions::to_string_t("externalizer.encodedpath")] = ModelBase::toJson(m_Externalizer_encodedpath);
    }

    return val;
}

void ComDayCqCommonsImplExternalizerImplProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("externalizer.domains")))
    {
        if(!val[utility::conversions::to_string_t("externalizer.domains")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("externalizer.domains")]);
            setExternalizerDomains( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("externalizer.host")))
    {
        if(!val[utility::conversions::to_string_t("externalizer.host")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("externalizer.host")]);
            setExternalizerHost( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("externalizer.contextpath")))
    {
        if(!val[utility::conversions::to_string_t("externalizer.contextpath")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("externalizer.contextpath")]);
            setExternalizerContextpath( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("externalizer.encodedpath")))
    {
        if(!val[utility::conversions::to_string_t("externalizer.encodedpath")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("externalizer.encodedpath")]);
            setExternalizerEncodedpath( newItem );
        }
    }
}

void ComDayCqCommonsImplExternalizerImplProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Externalizer_domainsIsSet)
    {
        if (m_Externalizer_domains.get())
        {
            m_Externalizer_domains->toMultipart(multipart, utility::conversions::to_string_t("externalizer.domains."));
        }
    }
    if(m_Externalizer_hostIsSet)
    {
        if (m_Externalizer_host.get())
        {
            m_Externalizer_host->toMultipart(multipart, utility::conversions::to_string_t("externalizer.host."));
        }
    }
    if(m_Externalizer_contextpathIsSet)
    {
        if (m_Externalizer_contextpath.get())
        {
            m_Externalizer_contextpath->toMultipart(multipart, utility::conversions::to_string_t("externalizer.contextpath."));
        }
    }
    if(m_Externalizer_encodedpathIsSet)
    {
        if (m_Externalizer_encodedpath.get())
        {
            m_Externalizer_encodedpath->toMultipart(multipart, utility::conversions::to_string_t("externalizer.encodedpath."));
        }
    }
}

void ComDayCqCommonsImplExternalizerImplProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("externalizer.domains")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("externalizer.domains")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("externalizer.domains."));
            setExternalizerDomains( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("externalizer.host")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("externalizer.host")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("externalizer.host."));
            setExternalizerHost( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("externalizer.contextpath")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("externalizer.contextpath")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("externalizer.contextpath."));
            setExternalizerContextpath( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("externalizer.encodedpath")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("externalizer.encodedpath")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("externalizer.encodedpath."));
            setExternalizerEncodedpath( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyArray> ComDayCqCommonsImplExternalizerImplProperties::getExternalizerDomains() const
{
    return m_Externalizer_domains;
}


void ComDayCqCommonsImplExternalizerImplProperties::setExternalizerDomains(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Externalizer_domains = value;
    m_Externalizer_domainsIsSet = true;
}
bool ComDayCqCommonsImplExternalizerImplProperties::externalizerDomainsIsSet() const
{
    return m_Externalizer_domainsIsSet;
}

void ComDayCqCommonsImplExternalizerImplProperties::unsetExternalizer_domains()
{
    m_Externalizer_domainsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComDayCqCommonsImplExternalizerImplProperties::getExternalizerHost() const
{
    return m_Externalizer_host;
}


void ComDayCqCommonsImplExternalizerImplProperties::setExternalizerHost(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Externalizer_host = value;
    m_Externalizer_hostIsSet = true;
}
bool ComDayCqCommonsImplExternalizerImplProperties::externalizerHostIsSet() const
{
    return m_Externalizer_hostIsSet;
}

void ComDayCqCommonsImplExternalizerImplProperties::unsetExternalizer_host()
{
    m_Externalizer_hostIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComDayCqCommonsImplExternalizerImplProperties::getExternalizerContextpath() const
{
    return m_Externalizer_contextpath;
}


void ComDayCqCommonsImplExternalizerImplProperties::setExternalizerContextpath(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Externalizer_contextpath = value;
    m_Externalizer_contextpathIsSet = true;
}
bool ComDayCqCommonsImplExternalizerImplProperties::externalizerContextpathIsSet() const
{
    return m_Externalizer_contextpathIsSet;
}

void ComDayCqCommonsImplExternalizerImplProperties::unsetExternalizer_contextpath()
{
    m_Externalizer_contextpathIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> ComDayCqCommonsImplExternalizerImplProperties::getExternalizerEncodedpath() const
{
    return m_Externalizer_encodedpath;
}


void ComDayCqCommonsImplExternalizerImplProperties::setExternalizerEncodedpath(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Externalizer_encodedpath = value;
    m_Externalizer_encodedpathIsSet = true;
}
bool ComDayCqCommonsImplExternalizerImplProperties::externalizerEncodedpathIsSet() const
{
    return m_Externalizer_encodedpathIsSet;
}

void ComDayCqCommonsImplExternalizerImplProperties::unsetExternalizer_encodedpath()
{
    m_Externalizer_encodedpathIsSet = false;
}

}
}
}
}

