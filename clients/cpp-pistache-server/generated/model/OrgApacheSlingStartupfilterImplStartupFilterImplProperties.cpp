/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "OrgApacheSlingStartupfilterImplStartupFilterImplProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

OrgApacheSlingStartupfilterImplStartupFilterImplProperties::OrgApacheSlingStartupfilterImplStartupFilterImplProperties()
{
    m_Active_by_defaultIsSet = false;
    m_Default_messageIsSet = false;
    
}

OrgApacheSlingStartupfilterImplStartupFilterImplProperties::~OrgApacheSlingStartupfilterImplStartupFilterImplProperties()
{
}

void OrgApacheSlingStartupfilterImplStartupFilterImplProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json OrgApacheSlingStartupfilterImplStartupFilterImplProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_Active_by_defaultIsSet)
    {
        val["active.by.default"] = ModelBase::toJson(m_Active_by_default);
    }
    if(m_Default_messageIsSet)
    {
        val["default.message"] = ModelBase::toJson(m_Default_message);
    }
    

    return val;
}

void OrgApacheSlingStartupfilterImplStartupFilterImplProperties::fromJson(nlohmann::json& val)
{
    if(val.find("active.by.default") != val.end())
    {
        if(!val["active.by.default"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["active.by.default"]);
            setActiveByDefault( newItem );
        }
        
    }
    if(val.find("default.message") != val.end())
    {
        if(!val["default.message"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["default.message"]);
            setDefaultMessage( newItem );
        }
        
    }
    
}


ConfigNodePropertyBoolean OrgApacheSlingStartupfilterImplStartupFilterImplProperties::getActiveByDefault() const
{
    return m_Active_by_default;
}
void OrgApacheSlingStartupfilterImplStartupFilterImplProperties::setActiveByDefault(ConfigNodePropertyBoolean const& value)
{
    m_Active_by_default = value;
    m_Active_by_defaultIsSet = true;
}
bool OrgApacheSlingStartupfilterImplStartupFilterImplProperties::activeByDefaultIsSet() const
{
    return m_Active_by_defaultIsSet;
}
void OrgApacheSlingStartupfilterImplStartupFilterImplProperties::unsetActive_by_default()
{
    m_Active_by_defaultIsSet = false;
}
ConfigNodePropertyString OrgApacheSlingStartupfilterImplStartupFilterImplProperties::getDefaultMessage() const
{
    return m_Default_message;
}
void OrgApacheSlingStartupfilterImplStartupFilterImplProperties::setDefaultMessage(ConfigNodePropertyString const& value)
{
    m_Default_message = value;
    m_Default_messageIsSet = true;
}
bool OrgApacheSlingStartupfilterImplStartupFilterImplProperties::defaultMessageIsSet() const
{
    return m_Default_messageIsSet;
}
void OrgApacheSlingStartupfilterImplStartupFilterImplProperties::unsetDefault_message()
{
    m_Default_messageIsSet = false;
}

}
}
}
}

