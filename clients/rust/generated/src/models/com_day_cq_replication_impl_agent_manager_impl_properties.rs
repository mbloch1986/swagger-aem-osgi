/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComDayCqReplicationImplAgentManagerImplProperties {
  #[serde(rename = "job.topics")]
  job_topics: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "serviceUser.target")]
  service_user_target: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "agentProvider.target")]
  agent_provider_target: Option<::models::ConfigNodePropertyString>
}

impl ComDayCqReplicationImplAgentManagerImplProperties {
  pub fn new() -> ComDayCqReplicationImplAgentManagerImplProperties {
    ComDayCqReplicationImplAgentManagerImplProperties {
      job_topics: None,
      service_user_target: None,
      agent_provider_target: None
    }
  }

  pub fn set_job_topics(&mut self, job_topics: ::models::ConfigNodePropertyString) {
    self.job_topics = Some(job_topics);
  }

  pub fn with_job_topics(mut self, job_topics: ::models::ConfigNodePropertyString) -> ComDayCqReplicationImplAgentManagerImplProperties {
    self.job_topics = Some(job_topics);
    self
  }

  pub fn job_topics(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.job_topics.as_ref()
  }

  pub fn reset_job_topics(&mut self) {
    self.job_topics = None;
  }

  pub fn set_service_user_target(&mut self, service_user_target: ::models::ConfigNodePropertyString) {
    self.service_user_target = Some(service_user_target);
  }

  pub fn with_service_user_target(mut self, service_user_target: ::models::ConfigNodePropertyString) -> ComDayCqReplicationImplAgentManagerImplProperties {
    self.service_user_target = Some(service_user_target);
    self
  }

  pub fn service_user_target(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.service_user_target.as_ref()
  }

  pub fn reset_service_user_target(&mut self) {
    self.service_user_target = None;
  }

  pub fn set_agent_provider_target(&mut self, agent_provider_target: ::models::ConfigNodePropertyString) {
    self.agent_provider_target = Some(agent_provider_target);
  }

  pub fn with_agent_provider_target(mut self, agent_provider_target: ::models::ConfigNodePropertyString) -> ComDayCqReplicationImplAgentManagerImplProperties {
    self.agent_provider_target = Some(agent_provider_target);
    self
  }

  pub fn agent_provider_target(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.agent_provider_target.as_ref()
  }

  pub fn reset_agent_provider_target(&mut self) {
    self.agent_provider_target = None;
  }

}



