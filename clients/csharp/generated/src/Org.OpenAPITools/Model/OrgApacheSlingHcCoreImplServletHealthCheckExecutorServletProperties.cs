/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletProperties
    /// </summary>
    [DataContract]
    public partial class OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletProperties :  IEquatable<OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletProperties>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletProperties" /> class.
        /// </summary>
        /// <param name="servletPath">servletPath.</param>
        /// <param name="disabled">disabled.</param>
        /// <param name="corsAccessControlAllowOrigin">corsAccessControlAllowOrigin.</param>
        public OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletProperties(ConfigNodePropertyString servletPath = default(ConfigNodePropertyString), ConfigNodePropertyBoolean disabled = default(ConfigNodePropertyBoolean), ConfigNodePropertyString corsAccessControlAllowOrigin = default(ConfigNodePropertyString))
        {
            this.ServletPath = servletPath;
            this.Disabled = disabled;
            this.CorsAccessControlAllowOrigin = corsAccessControlAllowOrigin;
        }
        
        /// <summary>
        /// Gets or Sets ServletPath
        /// </summary>
        [DataMember(Name="servletPath", EmitDefaultValue=false)]
        public ConfigNodePropertyString ServletPath { get; set; }

        /// <summary>
        /// Gets or Sets Disabled
        /// </summary>
        [DataMember(Name="disabled", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean Disabled { get; set; }

        /// <summary>
        /// Gets or Sets CorsAccessControlAllowOrigin
        /// </summary>
        [DataMember(Name="cors.accessControlAllowOrigin", EmitDefaultValue=false)]
        public ConfigNodePropertyString CorsAccessControlAllowOrigin { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletProperties {\n");
            sb.Append("  ServletPath: ").Append(ServletPath).Append("\n");
            sb.Append("  Disabled: ").Append(Disabled).Append("\n");
            sb.Append("  CorsAccessControlAllowOrigin: ").Append(CorsAccessControlAllowOrigin).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletProperties);
        }

        /// <summary>
        /// Returns true if OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletProperties input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ServletPath == input.ServletPath ||
                    (this.ServletPath != null &&
                    this.ServletPath.Equals(input.ServletPath))
                ) && 
                (
                    this.Disabled == input.Disabled ||
                    (this.Disabled != null &&
                    this.Disabled.Equals(input.Disabled))
                ) && 
                (
                    this.CorsAccessControlAllowOrigin == input.CorsAccessControlAllowOrigin ||
                    (this.CorsAccessControlAllowOrigin != null &&
                    this.CorsAccessControlAllowOrigin.Equals(input.CorsAccessControlAllowOrigin))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ServletPath != null)
                    hashCode = hashCode * 59 + this.ServletPath.GetHashCode();
                if (this.Disabled != null)
                    hashCode = hashCode * 59 + this.Disabled.GetHashCode();
                if (this.CorsAccessControlAllowOrigin != null)
                    hashCode = hashCode * 59 + this.CorsAccessControlAllowOrigin.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
