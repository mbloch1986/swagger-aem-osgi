/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComAdobeGraniteAuthImsImplImsAccessTokenRequestCustomizerImplProperties {
  #[serde(rename = "auth.ims.client.secret")]
  auth_ims_client_secret: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "customizer.type")]
  customizer_type: Option<::models::ConfigNodePropertyString>
}

impl ComAdobeGraniteAuthImsImplImsAccessTokenRequestCustomizerImplProperties {
  pub fn new() -> ComAdobeGraniteAuthImsImplImsAccessTokenRequestCustomizerImplProperties {
    ComAdobeGraniteAuthImsImplImsAccessTokenRequestCustomizerImplProperties {
      auth_ims_client_secret: None,
      customizer_type: None
    }
  }

  pub fn set_auth_ims_client_secret(&mut self, auth_ims_client_secret: ::models::ConfigNodePropertyString) {
    self.auth_ims_client_secret = Some(auth_ims_client_secret);
  }

  pub fn with_auth_ims_client_secret(mut self, auth_ims_client_secret: ::models::ConfigNodePropertyString) -> ComAdobeGraniteAuthImsImplImsAccessTokenRequestCustomizerImplProperties {
    self.auth_ims_client_secret = Some(auth_ims_client_secret);
    self
  }

  pub fn auth_ims_client_secret(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.auth_ims_client_secret.as_ref()
  }

  pub fn reset_auth_ims_client_secret(&mut self) {
    self.auth_ims_client_secret = None;
  }

  pub fn set_customizer_type(&mut self, customizer_type: ::models::ConfigNodePropertyString) {
    self.customizer_type = Some(customizer_type);
  }

  pub fn with_customizer_type(mut self, customizer_type: ::models::ConfigNodePropertyString) -> ComAdobeGraniteAuthImsImplImsAccessTokenRequestCustomizerImplProperties {
    self.customizer_type = Some(customizer_type);
    self
  }

  pub fn customizer_type(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.customizer_type.as_ref()
  }

  pub fn reset_customizer_type(&mut self) {
    self.customizer_type = None;
  }

}



