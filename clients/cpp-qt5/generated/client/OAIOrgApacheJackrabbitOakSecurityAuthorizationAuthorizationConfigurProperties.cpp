/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIOrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIOrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties::OAIOrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIOrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties::OAIOrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties() {
    init();
}

OAIOrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties::~OAIOrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties() {
    this->cleanup();
}

void
OAIOrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties::init() {
    permissions_jr2 = new OAIConfigNodePropertyDropDown();
    m_permissions_jr2_isSet = false;
    import_behavior = new OAIConfigNodePropertyDropDown();
    m_import_behavior_isSet = false;
    read_paths = new OAIConfigNodePropertyArray();
    m_read_paths_isSet = false;
    administrative_principals = new OAIConfigNodePropertyArray();
    m_administrative_principals_isSet = false;
    configuration_ranking = new OAIConfigNodePropertyInteger();
    m_configuration_ranking_isSet = false;
}

void
OAIOrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties::cleanup() {
    if(permissions_jr2 != nullptr) { 
        delete permissions_jr2;
    }
    if(import_behavior != nullptr) { 
        delete import_behavior;
    }
    if(read_paths != nullptr) { 
        delete read_paths;
    }
    if(administrative_principals != nullptr) { 
        delete administrative_principals;
    }
    if(configuration_ranking != nullptr) { 
        delete configuration_ranking;
    }
}

OAIOrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties*
OAIOrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIOrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&permissions_jr2, pJson["permissionsJr2"], "OAIConfigNodePropertyDropDown", "OAIConfigNodePropertyDropDown");
    
    ::OpenAPI::setValue(&import_behavior, pJson["importBehavior"], "OAIConfigNodePropertyDropDown", "OAIConfigNodePropertyDropDown");
    
    ::OpenAPI::setValue(&read_paths, pJson["readPaths"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
    ::OpenAPI::setValue(&administrative_principals, pJson["administrativePrincipals"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
    ::OpenAPI::setValue(&configuration_ranking, pJson["configurationRanking"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
}

QString
OAIOrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIOrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties::asJsonObject() {
    QJsonObject obj;
    if((permissions_jr2 != nullptr) && (permissions_jr2->isSet())){
        toJsonValue(QString("permissionsJr2"), permissions_jr2, obj, QString("OAIConfigNodePropertyDropDown"));
    }
    if((import_behavior != nullptr) && (import_behavior->isSet())){
        toJsonValue(QString("importBehavior"), import_behavior, obj, QString("OAIConfigNodePropertyDropDown"));
    }
    if((read_paths != nullptr) && (read_paths->isSet())){
        toJsonValue(QString("readPaths"), read_paths, obj, QString("OAIConfigNodePropertyArray"));
    }
    if((administrative_principals != nullptr) && (administrative_principals->isSet())){
        toJsonValue(QString("administrativePrincipals"), administrative_principals, obj, QString("OAIConfigNodePropertyArray"));
    }
    if((configuration_ranking != nullptr) && (configuration_ranking->isSet())){
        toJsonValue(QString("configurationRanking"), configuration_ranking, obj, QString("OAIConfigNodePropertyInteger"));
    }

    return obj;
}

OAIConfigNodePropertyDropDown*
OAIOrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties::getPermissionsJr2() {
    return permissions_jr2;
}
void
OAIOrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties::setPermissionsJr2(OAIConfigNodePropertyDropDown* permissions_jr2) {
    this->permissions_jr2 = permissions_jr2;
    this->m_permissions_jr2_isSet = true;
}

OAIConfigNodePropertyDropDown*
OAIOrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties::getImportBehavior() {
    return import_behavior;
}
void
OAIOrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties::setImportBehavior(OAIConfigNodePropertyDropDown* import_behavior) {
    this->import_behavior = import_behavior;
    this->m_import_behavior_isSet = true;
}

OAIConfigNodePropertyArray*
OAIOrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties::getReadPaths() {
    return read_paths;
}
void
OAIOrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties::setReadPaths(OAIConfigNodePropertyArray* read_paths) {
    this->read_paths = read_paths;
    this->m_read_paths_isSet = true;
}

OAIConfigNodePropertyArray*
OAIOrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties::getAdministrativePrincipals() {
    return administrative_principals;
}
void
OAIOrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties::setAdministrativePrincipals(OAIConfigNodePropertyArray* administrative_principals) {
    this->administrative_principals = administrative_principals;
    this->m_administrative_principals_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIOrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties::getConfigurationRanking() {
    return configuration_ranking;
}
void
OAIOrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties::setConfigurationRanking(OAIConfigNodePropertyInteger* configuration_ranking) {
    this->configuration_ranking = configuration_ranking;
    this->m_configuration_ranking_isSet = true;
}


bool
OAIOrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(permissions_jr2 != nullptr && permissions_jr2->isSet()){ isObjectUpdated = true; break;}
        if(import_behavior != nullptr && import_behavior->isSet()){ isObjectUpdated = true; break;}
        if(read_paths != nullptr && read_paths->isSet()){ isObjectUpdated = true; break;}
        if(administrative_principals != nullptr && administrative_principals->isSet()){ isObjectUpdated = true; break;}
        if(configuration_ranking != nullptr && configuration_ranking->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

