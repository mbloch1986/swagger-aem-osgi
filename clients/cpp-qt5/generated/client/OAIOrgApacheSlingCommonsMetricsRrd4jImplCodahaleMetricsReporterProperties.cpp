/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIOrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIOrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterProperties::OAIOrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIOrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterProperties::OAIOrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterProperties() {
    init();
}

OAIOrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterProperties::~OAIOrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterProperties() {
    this->cleanup();
}

void
OAIOrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterProperties::init() {
    datasources = new OAIConfigNodePropertyArray();
    m_datasources_isSet = false;
    step = new OAIConfigNodePropertyInteger();
    m_step_isSet = false;
    archives = new OAIConfigNodePropertyArray();
    m_archives_isSet = false;
    path = new OAIConfigNodePropertyString();
    m_path_isSet = false;
}

void
OAIOrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterProperties::cleanup() {
    if(datasources != nullptr) { 
        delete datasources;
    }
    if(step != nullptr) { 
        delete step;
    }
    if(archives != nullptr) { 
        delete archives;
    }
    if(path != nullptr) { 
        delete path;
    }
}

OAIOrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterProperties*
OAIOrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIOrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&datasources, pJson["datasources"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
    ::OpenAPI::setValue(&step, pJson["step"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&archives, pJson["archives"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
    ::OpenAPI::setValue(&path, pJson["path"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
}

QString
OAIOrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIOrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterProperties::asJsonObject() {
    QJsonObject obj;
    if((datasources != nullptr) && (datasources->isSet())){
        toJsonValue(QString("datasources"), datasources, obj, QString("OAIConfigNodePropertyArray"));
    }
    if((step != nullptr) && (step->isSet())){
        toJsonValue(QString("step"), step, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((archives != nullptr) && (archives->isSet())){
        toJsonValue(QString("archives"), archives, obj, QString("OAIConfigNodePropertyArray"));
    }
    if((path != nullptr) && (path->isSet())){
        toJsonValue(QString("path"), path, obj, QString("OAIConfigNodePropertyString"));
    }

    return obj;
}

OAIConfigNodePropertyArray*
OAIOrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterProperties::getDatasources() {
    return datasources;
}
void
OAIOrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterProperties::setDatasources(OAIConfigNodePropertyArray* datasources) {
    this->datasources = datasources;
    this->m_datasources_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIOrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterProperties::getStep() {
    return step;
}
void
OAIOrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterProperties::setStep(OAIConfigNodePropertyInteger* step) {
    this->step = step;
    this->m_step_isSet = true;
}

OAIConfigNodePropertyArray*
OAIOrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterProperties::getArchives() {
    return archives;
}
void
OAIOrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterProperties::setArchives(OAIConfigNodePropertyArray* archives) {
    this->archives = archives;
    this->m_archives_isSet = true;
}

OAIConfigNodePropertyString*
OAIOrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterProperties::getPath() {
    return path;
}
void
OAIOrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterProperties::setPath(OAIConfigNodePropertyString* path) {
    this->path = path;
    this->m_path_isSet = true;
}


bool
OAIOrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(datasources != nullptr && datasources->isSet()){ isObjectUpdated = true; break;}
        if(step != nullptr && step->isSet()){ isObjectUpdated = true; break;}
        if(archives != nullptr && archives->isSet()){ isObjectUpdated = true; break;}
        if(path != nullptr && path->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

