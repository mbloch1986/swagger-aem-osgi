/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "OrgApacheSlingCommonsSchedulerImplQuartzSchedulerProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

OrgApacheSlingCommonsSchedulerImplQuartzSchedulerProperties::OrgApacheSlingCommonsSchedulerImplQuartzSchedulerProperties()
{
    m_PoolNameIsSet = false;
    m_AllowedPoolNamesIsSet = false;
    m_Scheduler_useleaderforsingleIsSet = false;
    m_Metrics_filtersIsSet = false;
    m_SlowThresholdMillisIsSet = false;
}

OrgApacheSlingCommonsSchedulerImplQuartzSchedulerProperties::~OrgApacheSlingCommonsSchedulerImplQuartzSchedulerProperties()
{
}

void OrgApacheSlingCommonsSchedulerImplQuartzSchedulerProperties::validate()
{
    // TODO: implement validation
}

web::json::value OrgApacheSlingCommonsSchedulerImplQuartzSchedulerProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_PoolNameIsSet)
    {
        val[utility::conversions::to_string_t("poolName")] = ModelBase::toJson(m_PoolName);
    }
    if(m_AllowedPoolNamesIsSet)
    {
        val[utility::conversions::to_string_t("allowedPoolNames")] = ModelBase::toJson(m_AllowedPoolNames);
    }
    if(m_Scheduler_useleaderforsingleIsSet)
    {
        val[utility::conversions::to_string_t("scheduler.useleaderforsingle")] = ModelBase::toJson(m_Scheduler_useleaderforsingle);
    }
    if(m_Metrics_filtersIsSet)
    {
        val[utility::conversions::to_string_t("metrics.filters")] = ModelBase::toJson(m_Metrics_filters);
    }
    if(m_SlowThresholdMillisIsSet)
    {
        val[utility::conversions::to_string_t("slowThresholdMillis")] = ModelBase::toJson(m_SlowThresholdMillis);
    }

    return val;
}

void OrgApacheSlingCommonsSchedulerImplQuartzSchedulerProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("poolName")))
    {
        if(!val[utility::conversions::to_string_t("poolName")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("poolName")]);
            setPoolName( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("allowedPoolNames")))
    {
        if(!val[utility::conversions::to_string_t("allowedPoolNames")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("allowedPoolNames")]);
            setAllowedPoolNames( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("scheduler.useleaderforsingle")))
    {
        if(!val[utility::conversions::to_string_t("scheduler.useleaderforsingle")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("scheduler.useleaderforsingle")]);
            setSchedulerUseleaderforsingle( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("metrics.filters")))
    {
        if(!val[utility::conversions::to_string_t("metrics.filters")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("metrics.filters")]);
            setMetricsFilters( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("slowThresholdMillis")))
    {
        if(!val[utility::conversions::to_string_t("slowThresholdMillis")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("slowThresholdMillis")]);
            setSlowThresholdMillis( newItem );
        }
    }
}

void OrgApacheSlingCommonsSchedulerImplQuartzSchedulerProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_PoolNameIsSet)
    {
        if (m_PoolName.get())
        {
            m_PoolName->toMultipart(multipart, utility::conversions::to_string_t("poolName."));
        }
    }
    if(m_AllowedPoolNamesIsSet)
    {
        if (m_AllowedPoolNames.get())
        {
            m_AllowedPoolNames->toMultipart(multipart, utility::conversions::to_string_t("allowedPoolNames."));
        }
    }
    if(m_Scheduler_useleaderforsingleIsSet)
    {
        if (m_Scheduler_useleaderforsingle.get())
        {
            m_Scheduler_useleaderforsingle->toMultipart(multipart, utility::conversions::to_string_t("scheduler.useleaderforsingle."));
        }
    }
    if(m_Metrics_filtersIsSet)
    {
        if (m_Metrics_filters.get())
        {
            m_Metrics_filters->toMultipart(multipart, utility::conversions::to_string_t("metrics.filters."));
        }
    }
    if(m_SlowThresholdMillisIsSet)
    {
        if (m_SlowThresholdMillis.get())
        {
            m_SlowThresholdMillis->toMultipart(multipart, utility::conversions::to_string_t("slowThresholdMillis."));
        }
    }
}

void OrgApacheSlingCommonsSchedulerImplQuartzSchedulerProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("poolName")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("poolName")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("poolName."));
            setPoolName( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("allowedPoolNames")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("allowedPoolNames")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("allowedPoolNames."));
            setAllowedPoolNames( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("scheduler.useleaderforsingle")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("scheduler.useleaderforsingle")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("scheduler.useleaderforsingle."));
            setSchedulerUseleaderforsingle( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("metrics.filters")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("metrics.filters")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("metrics.filters."));
            setMetricsFilters( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("slowThresholdMillis")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("slowThresholdMillis")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("slowThresholdMillis."));
            setSlowThresholdMillis( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingCommonsSchedulerImplQuartzSchedulerProperties::getPoolName() const
{
    return m_PoolName;
}


void OrgApacheSlingCommonsSchedulerImplQuartzSchedulerProperties::setPoolName(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_PoolName = value;
    m_PoolNameIsSet = true;
}
bool OrgApacheSlingCommonsSchedulerImplQuartzSchedulerProperties::poolNameIsSet() const
{
    return m_PoolNameIsSet;
}

void OrgApacheSlingCommonsSchedulerImplQuartzSchedulerProperties::unsetPoolName()
{
    m_PoolNameIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> OrgApacheSlingCommonsSchedulerImplQuartzSchedulerProperties::getAllowedPoolNames() const
{
    return m_AllowedPoolNames;
}


void OrgApacheSlingCommonsSchedulerImplQuartzSchedulerProperties::setAllowedPoolNames(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_AllowedPoolNames = value;
    m_AllowedPoolNamesIsSet = true;
}
bool OrgApacheSlingCommonsSchedulerImplQuartzSchedulerProperties::allowedPoolNamesIsSet() const
{
    return m_AllowedPoolNamesIsSet;
}

void OrgApacheSlingCommonsSchedulerImplQuartzSchedulerProperties::unsetAllowedPoolNames()
{
    m_AllowedPoolNamesIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheSlingCommonsSchedulerImplQuartzSchedulerProperties::getSchedulerUseleaderforsingle() const
{
    return m_Scheduler_useleaderforsingle;
}


void OrgApacheSlingCommonsSchedulerImplQuartzSchedulerProperties::setSchedulerUseleaderforsingle(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Scheduler_useleaderforsingle = value;
    m_Scheduler_useleaderforsingleIsSet = true;
}
bool OrgApacheSlingCommonsSchedulerImplQuartzSchedulerProperties::schedulerUseleaderforsingleIsSet() const
{
    return m_Scheduler_useleaderforsingleIsSet;
}

void OrgApacheSlingCommonsSchedulerImplQuartzSchedulerProperties::unsetScheduler_useleaderforsingle()
{
    m_Scheduler_useleaderforsingleIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> OrgApacheSlingCommonsSchedulerImplQuartzSchedulerProperties::getMetricsFilters() const
{
    return m_Metrics_filters;
}


void OrgApacheSlingCommonsSchedulerImplQuartzSchedulerProperties::setMetricsFilters(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Metrics_filters = value;
    m_Metrics_filtersIsSet = true;
}
bool OrgApacheSlingCommonsSchedulerImplQuartzSchedulerProperties::metricsFiltersIsSet() const
{
    return m_Metrics_filtersIsSet;
}

void OrgApacheSlingCommonsSchedulerImplQuartzSchedulerProperties::unsetMetrics_filters()
{
    m_Metrics_filtersIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheSlingCommonsSchedulerImplQuartzSchedulerProperties::getSlowThresholdMillis() const
{
    return m_SlowThresholdMillis;
}


void OrgApacheSlingCommonsSchedulerImplQuartzSchedulerProperties::setSlowThresholdMillis(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_SlowThresholdMillis = value;
    m_SlowThresholdMillisIsSet = true;
}
bool OrgApacheSlingCommonsSchedulerImplQuartzSchedulerProperties::slowThresholdMillisIsSet() const
{
    return m_SlowThresholdMillisIsSet;
}

void OrgApacheSlingCommonsSchedulerImplQuartzSchedulerProperties::unsetSlowThresholdMillis()
{
    m_SlowThresholdMillisIsSet = false;
}

}
}
}
}

