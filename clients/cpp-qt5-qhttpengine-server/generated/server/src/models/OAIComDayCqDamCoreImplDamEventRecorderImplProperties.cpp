/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComDayCqDamCoreImplDamEventRecorderImplProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComDayCqDamCoreImplDamEventRecorderImplProperties::OAIComDayCqDamCoreImplDamEventRecorderImplProperties(QString json) {
    this->fromJson(json);
}

OAIComDayCqDamCoreImplDamEventRecorderImplProperties::OAIComDayCqDamCoreImplDamEventRecorderImplProperties() {
    this->init();
}

OAIComDayCqDamCoreImplDamEventRecorderImplProperties::~OAIComDayCqDamCoreImplDamEventRecorderImplProperties() {
    
}

void
OAIComDayCqDamCoreImplDamEventRecorderImplProperties::init() {
    m_event_filter_isSet = false;
    m_event_queue_length_isSet = false;
    m_eventrecorder_enabled_isSet = false;
    m_eventrecorder_blacklist_isSet = false;
    m_eventrecorder_eventtypes_isSet = false;
}

void
OAIComDayCqDamCoreImplDamEventRecorderImplProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIComDayCqDamCoreImplDamEventRecorderImplProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(event_filter, json[QString("event.filter")]);
    
    ::OpenAPI::fromJsonValue(event_queue_length, json[QString("event.queue.length")]);
    
    ::OpenAPI::fromJsonValue(eventrecorder_enabled, json[QString("eventrecorder.enabled")]);
    
    ::OpenAPI::fromJsonValue(eventrecorder_blacklist, json[QString("eventrecorder.blacklist")]);
    
    ::OpenAPI::fromJsonValue(eventrecorder_eventtypes, json[QString("eventrecorder.eventtypes")]);
    
}

QString
OAIComDayCqDamCoreImplDamEventRecorderImplProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComDayCqDamCoreImplDamEventRecorderImplProperties::asJsonObject() const {
    QJsonObject obj;
	if(event_filter.isSet()){
        obj.insert(QString("event.filter"), ::OpenAPI::toJsonValue(event_filter));
    }
	if(event_queue_length.isSet()){
        obj.insert(QString("event.queue.length"), ::OpenAPI::toJsonValue(event_queue_length));
    }
	if(eventrecorder_enabled.isSet()){
        obj.insert(QString("eventrecorder.enabled"), ::OpenAPI::toJsonValue(eventrecorder_enabled));
    }
	if(eventrecorder_blacklist.isSet()){
        obj.insert(QString("eventrecorder.blacklist"), ::OpenAPI::toJsonValue(eventrecorder_blacklist));
    }
	if(eventrecorder_eventtypes.isSet()){
        obj.insert(QString("eventrecorder.eventtypes"), ::OpenAPI::toJsonValue(eventrecorder_eventtypes));
    }
    return obj;
}

OAIConfigNodePropertyString
OAIComDayCqDamCoreImplDamEventRecorderImplProperties::getEventFilter() const {
    return event_filter;
}
void
OAIComDayCqDamCoreImplDamEventRecorderImplProperties::setEventFilter(const OAIConfigNodePropertyString &event_filter) {
    this->event_filter = event_filter;
    this->m_event_filter_isSet = true;
}

OAIConfigNodePropertyInteger
OAIComDayCqDamCoreImplDamEventRecorderImplProperties::getEventQueueLength() const {
    return event_queue_length;
}
void
OAIComDayCqDamCoreImplDamEventRecorderImplProperties::setEventQueueLength(const OAIConfigNodePropertyInteger &event_queue_length) {
    this->event_queue_length = event_queue_length;
    this->m_event_queue_length_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIComDayCqDamCoreImplDamEventRecorderImplProperties::getEventrecorderEnabled() const {
    return eventrecorder_enabled;
}
void
OAIComDayCqDamCoreImplDamEventRecorderImplProperties::setEventrecorderEnabled(const OAIConfigNodePropertyBoolean &eventrecorder_enabled) {
    this->eventrecorder_enabled = eventrecorder_enabled;
    this->m_eventrecorder_enabled_isSet = true;
}

OAIConfigNodePropertyArray
OAIComDayCqDamCoreImplDamEventRecorderImplProperties::getEventrecorderBlacklist() const {
    return eventrecorder_blacklist;
}
void
OAIComDayCqDamCoreImplDamEventRecorderImplProperties::setEventrecorderBlacklist(const OAIConfigNodePropertyArray &eventrecorder_blacklist) {
    this->eventrecorder_blacklist = eventrecorder_blacklist;
    this->m_eventrecorder_blacklist_isSet = true;
}

OAIConfigNodePropertyDropDown
OAIComDayCqDamCoreImplDamEventRecorderImplProperties::getEventrecorderEventtypes() const {
    return eventrecorder_eventtypes;
}
void
OAIComDayCqDamCoreImplDamEventRecorderImplProperties::setEventrecorderEventtypes(const OAIConfigNodePropertyDropDown &eventrecorder_eventtypes) {
    this->eventrecorder_eventtypes = eventrecorder_eventtypes;
    this->m_eventrecorder_eventtypes_isSet = true;
}


bool
OAIComDayCqDamCoreImplDamEventRecorderImplProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(event_filter.isSet()){ isObjectUpdated = true; break;}
    
        if(event_queue_length.isSet()){ isObjectUpdated = true; break;}
    
        if(eventrecorder_enabled.isSet()){ isObjectUpdated = true; break;}
    
        if(eventrecorder_blacklist.isSet()){ isObjectUpdated = true; break;}
    
        if(eventrecorder_eventtypes.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

