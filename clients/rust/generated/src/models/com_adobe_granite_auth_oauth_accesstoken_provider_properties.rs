/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComAdobeGraniteAuthOauthAccesstokenProviderProperties {
  #[serde(rename = "name")]
  name: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "auth.token.provider.title")]
  auth_token_provider_title: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "auth.token.provider.default.claims")]
  auth_token_provider_default_claims: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "auth.token.provider.endpoint")]
  auth_token_provider_endpoint: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "auth.access.token.request")]
  auth_access_token_request: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "auth.token.provider.keypair.alias")]
  auth_token_provider_keypair_alias: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "auth.token.provider.conn.timeout")]
  auth_token_provider_conn_timeout: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "auth.token.provider.so.timeout")]
  auth_token_provider_so_timeout: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "auth.token.provider.client.id")]
  auth_token_provider_client_id: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "auth.token.provider.scope")]
  auth_token_provider_scope: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "auth.token.provider.reuse.access.token")]
  auth_token_provider_reuse_access_token: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "auth.token.provider.relaxed.ssl")]
  auth_token_provider_relaxed_ssl: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "token.request.customizer.type")]
  token_request_customizer_type: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "auth.token.validator.type")]
  auth_token_validator_type: Option<::models::ConfigNodePropertyString>
}

impl ComAdobeGraniteAuthOauthAccesstokenProviderProperties {
  pub fn new() -> ComAdobeGraniteAuthOauthAccesstokenProviderProperties {
    ComAdobeGraniteAuthOauthAccesstokenProviderProperties {
      name: None,
      auth_token_provider_title: None,
      auth_token_provider_default_claims: None,
      auth_token_provider_endpoint: None,
      auth_access_token_request: None,
      auth_token_provider_keypair_alias: None,
      auth_token_provider_conn_timeout: None,
      auth_token_provider_so_timeout: None,
      auth_token_provider_client_id: None,
      auth_token_provider_scope: None,
      auth_token_provider_reuse_access_token: None,
      auth_token_provider_relaxed_ssl: None,
      token_request_customizer_type: None,
      auth_token_validator_type: None
    }
  }

  pub fn set_name(&mut self, name: ::models::ConfigNodePropertyString) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: ::models::ConfigNodePropertyString) -> ComAdobeGraniteAuthOauthAccesstokenProviderProperties {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

  pub fn set_auth_token_provider_title(&mut self, auth_token_provider_title: ::models::ConfigNodePropertyString) {
    self.auth_token_provider_title = Some(auth_token_provider_title);
  }

  pub fn with_auth_token_provider_title(mut self, auth_token_provider_title: ::models::ConfigNodePropertyString) -> ComAdobeGraniteAuthOauthAccesstokenProviderProperties {
    self.auth_token_provider_title = Some(auth_token_provider_title);
    self
  }

  pub fn auth_token_provider_title(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.auth_token_provider_title.as_ref()
  }

  pub fn reset_auth_token_provider_title(&mut self) {
    self.auth_token_provider_title = None;
  }

  pub fn set_auth_token_provider_default_claims(&mut self, auth_token_provider_default_claims: ::models::ConfigNodePropertyArray) {
    self.auth_token_provider_default_claims = Some(auth_token_provider_default_claims);
  }

  pub fn with_auth_token_provider_default_claims(mut self, auth_token_provider_default_claims: ::models::ConfigNodePropertyArray) -> ComAdobeGraniteAuthOauthAccesstokenProviderProperties {
    self.auth_token_provider_default_claims = Some(auth_token_provider_default_claims);
    self
  }

  pub fn auth_token_provider_default_claims(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.auth_token_provider_default_claims.as_ref()
  }

  pub fn reset_auth_token_provider_default_claims(&mut self) {
    self.auth_token_provider_default_claims = None;
  }

  pub fn set_auth_token_provider_endpoint(&mut self, auth_token_provider_endpoint: ::models::ConfigNodePropertyString) {
    self.auth_token_provider_endpoint = Some(auth_token_provider_endpoint);
  }

  pub fn with_auth_token_provider_endpoint(mut self, auth_token_provider_endpoint: ::models::ConfigNodePropertyString) -> ComAdobeGraniteAuthOauthAccesstokenProviderProperties {
    self.auth_token_provider_endpoint = Some(auth_token_provider_endpoint);
    self
  }

  pub fn auth_token_provider_endpoint(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.auth_token_provider_endpoint.as_ref()
  }

  pub fn reset_auth_token_provider_endpoint(&mut self) {
    self.auth_token_provider_endpoint = None;
  }

  pub fn set_auth_access_token_request(&mut self, auth_access_token_request: ::models::ConfigNodePropertyString) {
    self.auth_access_token_request = Some(auth_access_token_request);
  }

  pub fn with_auth_access_token_request(mut self, auth_access_token_request: ::models::ConfigNodePropertyString) -> ComAdobeGraniteAuthOauthAccesstokenProviderProperties {
    self.auth_access_token_request = Some(auth_access_token_request);
    self
  }

  pub fn auth_access_token_request(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.auth_access_token_request.as_ref()
  }

  pub fn reset_auth_access_token_request(&mut self) {
    self.auth_access_token_request = None;
  }

  pub fn set_auth_token_provider_keypair_alias(&mut self, auth_token_provider_keypair_alias: ::models::ConfigNodePropertyString) {
    self.auth_token_provider_keypair_alias = Some(auth_token_provider_keypair_alias);
  }

  pub fn with_auth_token_provider_keypair_alias(mut self, auth_token_provider_keypair_alias: ::models::ConfigNodePropertyString) -> ComAdobeGraniteAuthOauthAccesstokenProviderProperties {
    self.auth_token_provider_keypair_alias = Some(auth_token_provider_keypair_alias);
    self
  }

  pub fn auth_token_provider_keypair_alias(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.auth_token_provider_keypair_alias.as_ref()
  }

  pub fn reset_auth_token_provider_keypair_alias(&mut self) {
    self.auth_token_provider_keypair_alias = None;
  }

  pub fn set_auth_token_provider_conn_timeout(&mut self, auth_token_provider_conn_timeout: ::models::ConfigNodePropertyInteger) {
    self.auth_token_provider_conn_timeout = Some(auth_token_provider_conn_timeout);
  }

  pub fn with_auth_token_provider_conn_timeout(mut self, auth_token_provider_conn_timeout: ::models::ConfigNodePropertyInteger) -> ComAdobeGraniteAuthOauthAccesstokenProviderProperties {
    self.auth_token_provider_conn_timeout = Some(auth_token_provider_conn_timeout);
    self
  }

  pub fn auth_token_provider_conn_timeout(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.auth_token_provider_conn_timeout.as_ref()
  }

  pub fn reset_auth_token_provider_conn_timeout(&mut self) {
    self.auth_token_provider_conn_timeout = None;
  }

  pub fn set_auth_token_provider_so_timeout(&mut self, auth_token_provider_so_timeout: ::models::ConfigNodePropertyInteger) {
    self.auth_token_provider_so_timeout = Some(auth_token_provider_so_timeout);
  }

  pub fn with_auth_token_provider_so_timeout(mut self, auth_token_provider_so_timeout: ::models::ConfigNodePropertyInteger) -> ComAdobeGraniteAuthOauthAccesstokenProviderProperties {
    self.auth_token_provider_so_timeout = Some(auth_token_provider_so_timeout);
    self
  }

  pub fn auth_token_provider_so_timeout(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.auth_token_provider_so_timeout.as_ref()
  }

  pub fn reset_auth_token_provider_so_timeout(&mut self) {
    self.auth_token_provider_so_timeout = None;
  }

  pub fn set_auth_token_provider_client_id(&mut self, auth_token_provider_client_id: ::models::ConfigNodePropertyString) {
    self.auth_token_provider_client_id = Some(auth_token_provider_client_id);
  }

  pub fn with_auth_token_provider_client_id(mut self, auth_token_provider_client_id: ::models::ConfigNodePropertyString) -> ComAdobeGraniteAuthOauthAccesstokenProviderProperties {
    self.auth_token_provider_client_id = Some(auth_token_provider_client_id);
    self
  }

  pub fn auth_token_provider_client_id(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.auth_token_provider_client_id.as_ref()
  }

  pub fn reset_auth_token_provider_client_id(&mut self) {
    self.auth_token_provider_client_id = None;
  }

  pub fn set_auth_token_provider_scope(&mut self, auth_token_provider_scope: ::models::ConfigNodePropertyString) {
    self.auth_token_provider_scope = Some(auth_token_provider_scope);
  }

  pub fn with_auth_token_provider_scope(mut self, auth_token_provider_scope: ::models::ConfigNodePropertyString) -> ComAdobeGraniteAuthOauthAccesstokenProviderProperties {
    self.auth_token_provider_scope = Some(auth_token_provider_scope);
    self
  }

  pub fn auth_token_provider_scope(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.auth_token_provider_scope.as_ref()
  }

  pub fn reset_auth_token_provider_scope(&mut self) {
    self.auth_token_provider_scope = None;
  }

  pub fn set_auth_token_provider_reuse_access_token(&mut self, auth_token_provider_reuse_access_token: ::models::ConfigNodePropertyBoolean) {
    self.auth_token_provider_reuse_access_token = Some(auth_token_provider_reuse_access_token);
  }

  pub fn with_auth_token_provider_reuse_access_token(mut self, auth_token_provider_reuse_access_token: ::models::ConfigNodePropertyBoolean) -> ComAdobeGraniteAuthOauthAccesstokenProviderProperties {
    self.auth_token_provider_reuse_access_token = Some(auth_token_provider_reuse_access_token);
    self
  }

  pub fn auth_token_provider_reuse_access_token(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.auth_token_provider_reuse_access_token.as_ref()
  }

  pub fn reset_auth_token_provider_reuse_access_token(&mut self) {
    self.auth_token_provider_reuse_access_token = None;
  }

  pub fn set_auth_token_provider_relaxed_ssl(&mut self, auth_token_provider_relaxed_ssl: ::models::ConfigNodePropertyBoolean) {
    self.auth_token_provider_relaxed_ssl = Some(auth_token_provider_relaxed_ssl);
  }

  pub fn with_auth_token_provider_relaxed_ssl(mut self, auth_token_provider_relaxed_ssl: ::models::ConfigNodePropertyBoolean) -> ComAdobeGraniteAuthOauthAccesstokenProviderProperties {
    self.auth_token_provider_relaxed_ssl = Some(auth_token_provider_relaxed_ssl);
    self
  }

  pub fn auth_token_provider_relaxed_ssl(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.auth_token_provider_relaxed_ssl.as_ref()
  }

  pub fn reset_auth_token_provider_relaxed_ssl(&mut self) {
    self.auth_token_provider_relaxed_ssl = None;
  }

  pub fn set_token_request_customizer_type(&mut self, token_request_customizer_type: ::models::ConfigNodePropertyString) {
    self.token_request_customizer_type = Some(token_request_customizer_type);
  }

  pub fn with_token_request_customizer_type(mut self, token_request_customizer_type: ::models::ConfigNodePropertyString) -> ComAdobeGraniteAuthOauthAccesstokenProviderProperties {
    self.token_request_customizer_type = Some(token_request_customizer_type);
    self
  }

  pub fn token_request_customizer_type(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.token_request_customizer_type.as_ref()
  }

  pub fn reset_token_request_customizer_type(&mut self) {
    self.token_request_customizer_type = None;
  }

  pub fn set_auth_token_validator_type(&mut self, auth_token_validator_type: ::models::ConfigNodePropertyString) {
    self.auth_token_validator_type = Some(auth_token_validator_type);
  }

  pub fn with_auth_token_validator_type(mut self, auth_token_validator_type: ::models::ConfigNodePropertyString) -> ComAdobeGraniteAuthOauthAccesstokenProviderProperties {
    self.auth_token_validator_type = Some(auth_token_validator_type);
    self
  }

  pub fn auth_token_validator_type(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.auth_token_validator_type.as_ref()
  }

  pub fn reset_auth_token_validator_type(&mut self) {
    self.auth_token_validator_type = None;
  }

}



